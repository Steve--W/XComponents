var pas = {};

var rtl = {

  version: 10101,

  quiet: false,
  debug_load_units: false,
  debug_rtti: false,

  debug: function(){
    if (rtl.quiet || !console || !console.log) return;
    console.log(arguments);
  },

  error: function(s){
    rtl.debug('Error: ',s);
    throw s;
  },

  warn: function(s){
    rtl.debug('Warn: ',s);
  },

  checkVersion: function(v){
    if (rtl.version != v) throw "expected rtl version "+v+", but found "+rtl.version;
  },

  hasString: function(s){
    return rtl.isString(s) && (s.length>0);
  },

  isArray: function(a) {
    return Array.isArray(a);
  },

  isFunction: function(f){
    return typeof(f)==="function";
  },

  isModule: function(m){
    return rtl.isObject(m) && rtl.hasString(m.$name) && (pas[m.$name]===m);
  },

  isImplementation: function(m){
    return rtl.isObject(m) && rtl.isModule(m.$module) && (m.$module.$impl===m);
  },

  isNumber: function(n){
    return typeof(n)==="number";
  },

  isObject: function(o){
    var s=typeof(o);
    return (typeof(o)==="object") && (o!=null);
  },

  isString: function(s){
    return typeof(s)==="string";
  },

  getNumber: function(n){
    return typeof(n)==="number"?n:NaN;
  },

  getChar: function(c){
    return ((typeof(c)==="string") && (c.length===1)) ? c : "";
  },

  getObject: function(o){
    return ((typeof(o)==="object") || (typeof(o)==='function')) ? o : null;
  },

  isPasClass: function(type){
    return (rtl.isObject(type) && type.hasOwnProperty('$classname') && rtl.isObject(type.$module));
  },

  isPasClassInstance: function(type){
    return (rtl.isObject(type) && rtl.isPasClass(type.$class));
  },

  hexStr: function(n,digits){
    return ("000000000000000"+n.toString(16).toUpperCase()).slice(-digits);
  },

  m_loading: 0,
  m_loading_intf: 1,
  m_intf_loaded: 2,
  m_loading_impl: 3, // loading all used unit
  m_initializing: 4, // running initialization
  m_initialized: 5,

  module: function(module_name, intfuseslist, intfcode, impluseslist, implcode){
    if (rtl.debug_load_units) rtl.debug('rtl.module name="'+module_name+'" intfuses='+intfuseslist+' impluses='+impluseslist+' hasimplcode='+rtl.isFunction(implcode));
    if (!rtl.hasString(module_name)) rtl.error('invalid module name "'+module_name+'"');
    if (!rtl.isArray(intfuseslist)) rtl.error('invalid interface useslist of "'+module_name+'"');
    if (!rtl.isFunction(intfcode)) rtl.error('invalid interface code of "'+module_name+'"');
    if (!(impluseslist==undefined) && !rtl.isArray(impluseslist)) rtl.error('invalid implementation useslist of "'+module_name+'"');
    if (!(implcode==undefined) && !rtl.isFunction(implcode)) rtl.error('invalid implementation code of "'+module_name+'"');

    if (pas[module_name])
      rtl.error('module "'+module_name+'" is already registered');

    var module = pas[module_name] = {
      $name: module_name,
      $intfuseslist: intfuseslist,
      $impluseslist: impluseslist,
      $state: rtl.m_loading,
      $intfcode: intfcode,
      $implcode: implcode,
      $impl: null,
      $rtti: Object.create(rtl.tSectionRTTI)
    };
    module.$rtti.$module = module;
    if (implcode) module.$impl = {
      $module: module,
      $rtti: module.$rtti
    };
  },

  exitcode: 0,

  run: function(module_name){
  
    function doRun(){
      if (!rtl.hasString(module_name)) module_name='program';
      if (rtl.debug_load_units) rtl.debug('rtl.run module="'+module_name+'"');
      rtl.initRTTI();
      var module = pas[module_name];
      if (!module) rtl.error('rtl.run module "'+module_name+'" missing');
      rtl.loadintf(module);
      rtl.loadimpl(module);
      if (module_name=='program'){
        if (rtl.debug_load_units) rtl.debug('running $main');
        var r = pas.program.$main();
        if (rtl.isNumber(r)) rtl.exitcode = r;
      }
    }
    
    if (rtl.showUncaughtExceptions) {
      try{
        doRun();
      } catch(re) {
        var errMsg = re.hasOwnProperty('$class') ? re.$class.$classname : '';
	    errMsg +=  ((errMsg) ? ': ' : '') + (re.hasOwnProperty('fMessage') ? re.fMessage : re);
        alert('Uncaught Exception : '+errMsg);
        rtl.exitCode = 216;
      }
    } else {
      doRun();
    }
    return rtl.exitcode;
  },

  loadintf: function(module){
    if (module.$state>rtl.m_loading_intf) return; // already finished
    if (rtl.debug_load_units) rtl.debug('loadintf: "'+module.$name+'"');
    if (module.$state===rtl.m_loading_intf)
      rtl.error('unit cycle detected "'+module.$name+'"');
    module.$state=rtl.m_loading_intf;
    // load interfaces of interface useslist
    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadintf);
    // run interface
    if (rtl.debug_load_units) rtl.debug('loadintf: run intf of "'+module.$name+'"');
    module.$intfcode(module.$intfuseslist);
    // success
    module.$state=rtl.m_intf_loaded;
    // Note: units only used in implementations are not yet loaded (not even their interfaces)
  },

  loaduseslist: function(module,useslist,f){
    if (useslist==undefined) return;
    for (var i in useslist){
      var unitname=useslist[i];
      if (rtl.debug_load_units) rtl.debug('loaduseslist of "'+module.$name+'" uses="'+unitname+'"');
      if (pas[unitname]==undefined)
        rtl.error('module "'+module.$name+'" misses "'+unitname+'"');
      f(pas[unitname]);
    }
  },

  loadimpl: function(module){
    if (module.$state>=rtl.m_loading_impl) return; // already processing
    if (module.$state<rtl.m_intf_loaded) rtl.error('loadimpl: interface not loaded of "'+module.$name+'"');
    if (rtl.debug_load_units) rtl.debug('loadimpl: load uses of "'+module.$name+'"');
    module.$state=rtl.m_loading_impl;
    // load interfaces of implementation useslist
    rtl.loaduseslist(module,module.$impluseslist,rtl.loadintf);
    // load implementation of interfaces useslist
    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadimpl);
    // load implementation of implementation useslist
    rtl.loaduseslist(module,module.$impluseslist,rtl.loadimpl);
    // Note: At this point all interfaces used by this unit are loaded. If
    //   there are implementation uses cycles some used units might not yet be
    //   initialized. This is by design.
    // run implementation
    if (rtl.debug_load_units) rtl.debug('loadimpl: run impl of "'+module.$name+'"');
    if (rtl.isFunction(module.$implcode)) module.$implcode(module.$impluseslist);
    // run initialization
    if (rtl.debug_load_units) rtl.debug('loadimpl: run init of "'+module.$name+'"');
    module.$state=rtl.m_initializing;
    if (rtl.isFunction(module.$init)) module.$init();
    // unit initialized
    module.$state=rtl.m_initialized;
  },

  createCallback: function(scope, fn){
    var cb;
    if (typeof(fn)==='string'){
      cb = function(){
        return scope[fn].apply(scope,arguments);
      };
    } else {
      cb = function(){
        return fn.apply(scope,arguments);
      };
    };
    cb.scope = scope;
    cb.fn = fn;
    return cb;
  },

  cloneCallback: function(cb){
    return rtl.createCallback(cb.scope,cb.fn);
  },

  eqCallback: function(a,b){
    // can be a function or a function wrapper
    if (a==b){
      return true;
    } else {
      return (a!=null) && (b!=null) && (a.fn) && (a.scope===b.scope) && (a.fn==b.fn);
    }
  },

  initClass: function(c,parent,name,initfn){
    parent[name] = c;
    c.$class = c; // Note: o.$class === Object.getPrototypeOf(o)
    c.$classname = name;
    if ((parent.$module) && (parent.$module.$impl===parent)) parent=parent.$module;
    c.$parent = parent;
    c.$fullname = parent.$name+'.'+name;
    if (rtl.isModule(parent)){
      c.$module = parent;
      c.$name = name;
    } else {
      c.$module = parent.$module;
      c.$name = parent.name+'.'+name;
    };
    // rtti
    if (rtl.debug_rtti) rtl.debug('initClass '+c.$fullname);
    var t = c.$module.$rtti.$Class(c.$name,{ "class": c, module: parent });
    c.$rtti = t;
    if (rtl.isObject(c.$ancestor)) t.ancestor = c.$ancestor.$rtti;
    if (!t.ancestor) t.ancestor = null;
    // init members
    initfn.call(c);
  },

  createClass: function(parent,name,ancestor,initfn){
    // create a normal class,
    // ancestor must be null or a normal class,
    // the root ancestor can be an external class
    var c = null;
    if (ancestor != null){
      c = Object.create(ancestor);
      c.$ancestor = ancestor;
      // Note:
      // if root is an "object" then c.$ancestor === Object.getPrototypeOf(c)
      // if root is a "function" then c.$ancestor === c.__proto__, Object.getPrototypeOf(c) returns the root
    } else {
      c = {};
      c.$create = function(fnname,args){
        if (args == undefined) args = [];
        var o = Object.create(this);
        o.$init();
        try{
          o[fnname].apply(o,args);
          o.AfterConstruction();
        } catch($e){
          // do not call BeforeDestruction
          if (o.Destroy) o.Destroy();
          o.$final();
          throw $e;
        }
        return o;
      };
      c.$destroy = function(fnname){
        this.BeforeDestruction();
        if (this[fnname]) this[fnname]();
        this.$final();
      };
    };
    rtl.initClass(c,parent,name,initfn);
  },

  createClassExt: function(parent,name,ancestor,newinstancefnname,initfn){
    // Create a class using an external ancestor.
    // If newinstancefnname is given, use that function to create the new object.
    // If exist call BeforeDestruction and AfterConstruction.
    var c = null;
    c = Object.create(ancestor);
    c.$create = function(fnname,args){
      if (args == undefined) args = [];
      var o = null;
      if (newinstancefnname.length>0){
        o = this[newinstancefnname](fnname,args);
      } else {
        o = Object.create(this);
      }
      if (o.$init) o.$init();
      try{
        o[fnname].apply(o,args);
        if (o.AfterConstruction) o.AfterConstruction();
      } catch($e){
        // do not call BeforeDestruction
        if (o.Destroy) o.Destroy();
        if (o.$final) this.$final();
        throw $e;
      }
      return o;
    };
    c.$destroy = function(fnname){
      if (this.BeforeDestruction) this.BeforeDestruction();
      if (this[fnname]) this[fnname]();
      if (this.$final) this.$final();
    };
    rtl.initClass(c,parent,name,initfn);
  },

  tObjectDestroy: "Destroy",

  free: function(obj,name){
    if (obj[name]==null) return;
    obj[name].$destroy(rtl.tObjectDestroy);
    obj[name]=null;
  },

  freeLoc: function(obj){
    if (obj==null) return;
    obj.$destroy(rtl.tObjectDestroy);
    return null;
  },

  is: function(instance,type){
    return type.isPrototypeOf(instance) || (instance===type);
  },

  isExt: function(instance,type,mode){
    // mode===1 means instance must be a Pascal class instance
    // mode===2 means instance must be a Pascal class
    // Notes:
    // isPrototypeOf and instanceof return false on equal
    // isPrototypeOf does not work for Date.isPrototypeOf(new Date())
    //   so if isPrototypeOf is false test with instanceof
    // instanceof needs a function on right side
    if (instance == null) return false; // Note: ==null checks for undefined too
    if ((typeof(type) !== 'object') && (typeof(type) !== 'function')) return false;
    if (instance === type){
      if (mode===1) return false;
      if (mode===2) return rtl.isPasClass(instance);
      return true;
    }
    if (type.isPrototypeOf && type.isPrototypeOf(instance)){
      if (mode===1) return rtl.isPasClassInstance(instance);
      if (mode===2) return rtl.isPasClass(instance);
      return true;
    }
    if ((typeof type == 'function') && (instance instanceof type)) return true;
    return false;
  },

  Exception: null,
  EInvalidCast: null,
  EAbstractError: null,
  ERangeError: null,

  raiseE: function(typename){
    var t = rtl[typename];
    if (t==null){
      var mod = pas.SysUtils;
      if (!mod) mod = pas.sysutils;
      if (mod){
        t = mod[typename];
        if (!t) t = mod[typename.toLowerCase()];
        if (!t) t = mod['Exception'];
        if (!t) t = mod['exception'];
      }
    }
    if (t){
      if (t.Create){
        throw t.$create("Create");
      } else if (t.create){
        throw t.$create("create");
      }
    }
    if (typename === "EInvalidCast") throw "invalid type cast";
    if (typename === "EAbstractError") throw "Abstract method called";
    if (typename === "ERangeError") throw "range error";
    throw typename;
  },

  as: function(instance,type){
    if((instance === null) || rtl.is(instance,type)) return instance;
    rtl.raiseE("EInvalidCast");
  },

  asExt: function(instance,type,mode){
    if((instance === null) || rtl.isExt(instance,type,mode)) return instance;
    rtl.raiseE("EInvalidCast");
  },

  createInterface: function(module, name, guid, fnnames, ancestor, initfn){
    //console.log('createInterface name="'+name+'" guid="'+guid+'" names='+fnnames);
    var i = ancestor?Object.create(ancestor):{};
    module[name] = i;
    i.$module = module;
    i.$name = name;
    i.$fullname = module.$name+'.'+name;
    i.$guid = guid;
    i.$guidr = null;
    i.$names = fnnames?fnnames:[];
    if (rtl.isFunction(initfn)){
      // rtti
      if (rtl.debug_rtti) rtl.debug('createInterface '+i.$fullname);
      var t = i.$module.$rtti.$Interface(name,{ "interface": i, module: module });
      i.$rtti = t;
      if (ancestor) t.ancestor = ancestor.$rtti;
      if (!t.ancestor) t.ancestor = null;
      initfn.call(i);
    }
    return i;
  },

  strToGUIDR: function(s,g){
    var p = 0;
    function n(l){
      var h = s.substr(p,l);
      p+=l;
      return parseInt(h,16);
    }
    p+=1; // skip {
    g.D1 = n(8);
    p+=1; // skip -
    g.D2 = n(4);
    p+=1; // skip -
    g.D3 = n(4);
    p+=1; // skip -
    if (!g.D4) g.D4=[];
    g.D4[0] = n(2);
    g.D4[1] = n(2);
    p+=1; // skip -
    for(var i=2; i<8; i++) g.D4[i] = n(2);
    return g;
  },

  guidrToStr: function(g){
    if (g.$intf) return g.$intf.$guid;
    var h = rtl.hexStr;
    var s='{'+h(g.D1,8)+'-'+h(g.D2,4)+'-'+h(g.D3,4)+'-'+h(g.D4[0],2)+h(g.D4[1],2)+'-';
    for (var i=2; i<8; i++) s+=h(g.D4[i],2);
    s+='}';
    return s;
  },

  createTGUID: function(guid){
    var TGuid = (pas.System)?pas.System.TGuid:pas.system.tguid;
    var g = rtl.strToGUIDR(guid,new TGuid());
    return g;
  },

  getIntfGUIDR: function(intfTypeOrVar){
    if (!intfTypeOrVar) return null;
    if (!intfTypeOrVar.$guidr){
      var g = rtl.createTGUID(intfTypeOrVar.$guid);
      if (!intfTypeOrVar.hasOwnProperty('$guid')) intfTypeOrVar = Object.getPrototypeOf(intfTypeOrVar);
      g.$intf = intfTypeOrVar;
      intfTypeOrVar.$guidr = g;
    }
    return intfTypeOrVar.$guidr;
  },

  addIntf: function (aclass, intf, map){
    function jmp(fn){
      if (typeof(fn)==="function"){
        return function(){ return fn.apply(this.$o,arguments); };
      } else {
        return function(){ rtl.raiseE('EAbstractError'); };
      }
    }
    if(!map) map = {};
    var t = intf;
    var item = Object.create(t);
    if (!aclass.hasOwnProperty('$intfmaps')) aclass.$intfmaps = {};
    aclass.$intfmaps[intf.$guid] = item;
    do{
      var names = t.$names;
      if (!names) break;
      for (var i=0; i<names.length; i++){
        var intfname = names[i];
        var fnname = map[intfname];
        if (!fnname) fnname = intfname;
        //console.log('addIntf: intftype='+t.$name+' index='+i+' intfname="'+intfname+'" fnname="'+fnname+'" old='+typeof(item[intfname]));
        item[intfname] = jmp(aclass[fnname]);
      }
      t = Object.getPrototypeOf(t);
    }while(t!=null);
  },

  getIntfG: function (obj, guid, query){
    if (!obj) return null;
    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query);
    // search
    var maps = obj.$intfmaps;
    if (!maps) return null;
    var item = maps[guid];
    if (!item) return null;
    // check delegation
    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query+' item='+typeof(item));
    if (typeof item === 'function') return item.call(obj); // delegate. Note: COM contains _AddRef
    // check cache
    var intf = null;
    if (obj.$interfaces){
      intf = obj.$interfaces[guid];
      //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' cache='+typeof(intf));
    }
    if (!intf){ // intf can be undefined!
      intf = Object.create(item);
      intf.$o = obj;
      if (!obj.$interfaces) obj.$interfaces = {};
      obj.$interfaces[guid] = intf;
    }
    if (typeof(query)==='object'){
      // called by queryIntfT
      var o = null;
      if (intf.QueryInterface(rtl.getIntfGUIDR(query),
          {get:function(){ return o; }, set:function(v){ o=v; }}) === 0){
        return o;
      } else {
        return null;
      }
    } else if(query===2){
      // called by TObject.GetInterfaceByStr
      if (intf.$kind === 'com') intf._AddRef();
    }
    return intf;
  },

  getIntfT: function(obj,intftype){
    return rtl.getIntfG(obj,intftype.$guid);
  },

  queryIntfT: function(obj,intftype){
    return rtl.getIntfG(obj,intftype.$guid,intftype);
  },

  queryIntfIsT: function(obj,intftype){
    var i = rtl.queryIntfG(obj,intftype.$guid);
    if (!i) return false;
    if (i.$kind === 'com') i._Release();
    return true;
  },

  asIntfT: function (obj,intftype){
    var i = rtl.getIntfG(obj,intftype.$guid);
    if (i!==null) return i;
    rtl.raiseEInvalidCast();
  },

  intfIsClass: function(intf,classtype){
    return (intf!=null) && (rtl.is(intf.$o,classtype));
  },

  intfAsClass: function(intf,classtype){
    if (intf==null) return null;
    return rtl.as(intf.$o,classtype);
  },

  intfToClass: function(intf,classtype){
    if ((intf!==null) && rtl.is(intf.$o,classtype)) return intf.$o;
    return null;
  },

  // interface reference counting
  intfRefs: { // base object for temporary interface variables
    ref: function(id,intf){
      // called for temporary interface references needing delayed release
      var old = this[id];
      //console.log('rtl.intfRefs.ref: id='+id+' old="'+(old?old.$name:'null')+'" intf="'+(intf?intf.$name:'null')+' $o='+(intf?intf.$o:'null'));
      if (old){
        // called again, e.g. in a loop
        delete this[id];
        old._Release(); // may fail
      }
      this[id]=intf;
      return intf;
    },
    free: function(){
      //console.log('rtl.intfRefs.free...');
      for (var id in this){
        if (this.hasOwnProperty(id)){
          //console.log('rtl.intfRefs.free: id='+id+' '+this[id].$name+' $o='+this[id].$o.$classname);
          this[id]._Release();
        }
      }
    }
  },

  createIntfRefs: function(){
    //console.log('rtl.createIntfRefs');
    return Object.create(rtl.intfRefs);
  },

  setIntfP: function(path,name,value,skipAddRef){
    var old = path[name];
    //console.log('rtl.setIntfP path='+path+' name='+name+' old="'+(old?old.$name:'null')+'" value="'+(value?value.$name:'null')+'"');
    if (old === value) return;
    if (old !== null){
      path[name]=null;
      old._Release();
    }
    if (value !== null){
      if (!skipAddRef) value._AddRef();
      path[name]=value;
    }
  },

  setIntfL: function(old,value,skipAddRef){
    //console.log('rtl.setIntfL old="'+(old?old.$name:'null')+'" value="'+(value?value.$name:'null')+'"');
    if (old !== value){
      if (value!==null){
        if (!skipAddRef) value._AddRef();
      }
      if (old!==null){
        old._Release();  // Release after AddRef, to avoid double Release if Release creates an exception
      }
    } else if (skipAddRef){
      if (old!==null){
        old._Release();  // value has an AddRef
      }
    }
    return value;
  },

  _AddRef: function(intf){
    //if (intf) console.log('rtl._AddRef intf="'+(intf?intf.$name:'null')+'"');
    if (intf) intf._AddRef();
    return intf;
  },

  _Release: function(intf){
    //if (intf) console.log('rtl._Release intf="'+(intf?intf.$name:'null')+'"');
    if (intf) intf._Release();
    return intf;
  },

  checkMethodCall: function(obj,type){
    if (rtl.isObject(obj) && rtl.is(obj,type)) return;
    rtl.raiseE("EInvalidCast");
  },

  rc: function(i,minval,maxval){
    // range check integer
    if ((Math.floor(i)===i) && (i>=minval) && (i<=maxval)) return i;
    rtl.raiseE('ERangeError');
  },

  rcc: function(c,minval,maxval){
    // range check char
    if ((typeof(c)==='string') && (c.length===1)){
      var i = c.charCodeAt(0);
      if ((i>=minval) && (i<=maxval)) return c;
    }
    rtl.raiseE('ERangeError');
  },

  rcSetCharAt: function(s,index,c){
    // range check setCharAt
    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');
    return rtl.setCharAt(s,index,c);
  },

  rcCharAt: function(s,index){
    // range check charAt
    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');
    return s.charAt(index);
  },

  rcArrR: function(arr,index){
    // range check read array
    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){
      if (arguments.length>2){
        // arr,index1,index2,...
        arr=arr[index];
        for (var i=2; i<arguments.length; i++) arr=rtl.rcArrR(arr,arguments[i]);
        return arr;
      }
      return arr[index];
    }
    rtl.raiseE('ERangeError');
  },

  rcArrW: function(arr,index,value){
    // range check write array
    // arr,index1,index2,...,value
    for (var i=3; i<arguments.length; i++){
      arr=rtl.rcArrR(arr,index);
      index=arguments[i-1];
      value=arguments[i];
    }
    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){
      return arr[index]=value;
    }
    rtl.raiseE('ERangeError');
  },

  length: function(arr){
    return (arr == null) ? 0 : arr.length;
  },

  arraySetLength: function(arr,defaultvalue,newlength){
    // multi dim: (arr,defaultvalue,dim1,dim2,...)
    if (arr == null) arr = [];
    var p = arguments;
    function setLength(a,argNo){
      var oldlen = a.length;
      var newlen = p[argNo];
      if (oldlen!==newlength){
        a.length = newlength;
        if (argNo === p.length-1){
          if (rtl.isArray(defaultvalue)){
            for (var i=oldlen; i<newlen; i++) a[i]=[]; // nested array
          } else if (rtl.isFunction(defaultvalue)){
            for (var i=oldlen; i<newlen; i++) a[i]=new defaultvalue(); // e.g. record
          } else if (rtl.isObject(defaultvalue)) {
            for (var i=oldlen; i<newlen; i++) a[i]={}; // e.g. set
          } else {
            for (var i=oldlen; i<newlen; i++) a[i]=defaultvalue;
          }
        } else {
          for (var i=oldlen; i<newlen; i++) a[i]=[]; // nested array
        }
      }
      if (argNo < p.length-1){
        // multi argNo
        for (var i=0; i<newlen; i++) a[i]=setLength(a[i],argNo+1);
      }
      return a;
    }
    return setLength(arr,2);
  },

  arrayEq: function(a,b){
    if (a===null) return b===null;
    if (b===null) return false;
    if (a.length!==b.length) return false;
    for (var i=0; i<a.length; i++) if (a[i]!==b[i]) return false;
    return true;
  },

  arrayClone: function(type,src,srcpos,endpos,dst,dstpos){
    // type: 0 for references, "refset" for calling refSet(), a function for new type()
    // src must not be null
    // This function does not range check.
    if (rtl.isFunction(type)){
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = new type(src[srcpos]); // clone record
    } else if(type === 'refSet') {
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = rtl.refSet(src[srcpos]); // ref set
    }  else {
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = src[srcpos]; // reference
    };
  },

  arrayConcat: function(type){
    // type: see rtl.arrayClone
    var a = [];
    var l = 0;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src !== null) l+=src.length;
    };
    a.length = l;
    l=0;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src === null) continue;
      rtl.arrayClone(type,src,0,src.length,a,l);
      l+=src.length;
    };
    return a;
  },

  arrayConcatN: function(){
    var a = null;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src === null) continue;
      if (a===null){
        a=src; // Note: concat(a) does not clone
      } else {
        a=a.concat(src);
      }
    };
    return a;
  },

  arrayCopy: function(type, srcarray, index, count){
    // type: see rtl.arrayClone
    // if count is missing, use srcarray.length
    if (srcarray === null) return [];
    if (index < 0) index = 0;
    if (count === undefined) count=srcarray.length;
    var end = index+count;
    if (end>srcarray.length) end = srcarray.length;
    if (index>=end) return [];
    if (type===0){
      return srcarray.slice(index,end);
    } else {
      var a = [];
      a.length = end-index;
      rtl.arrayClone(type,srcarray,index,end,a,0);
      return a;
    }
  },

  setCharAt: function(s,index,c){
    return s.substr(0,index)+c+s.substr(index+1);
  },

  getResStr: function(mod,name){
    var rs = mod.$resourcestrings[name];
    return rs.current?rs.current:rs.org;
  },

  createSet: function(){
    var s = {};
    for (var i=0; i<arguments.length; i++){
      if (arguments[i]!=null){
        s[arguments[i]]=true;
      } else {
        var first=arguments[i+=1];
        var last=arguments[i+=1];
        for(var j=first; j<=last; j++) s[j]=true;
      }
    }
    return s;
  },

  cloneSet: function(s){
    var r = {};
    for (var key in s) r[key]=true;
    return r;
  },

  refSet: function(s){
    Object.defineProperty(s, '$shared', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: true
    });
    return s;
  },

  includeSet: function(s,enumvalue){
    if (s.$shared) s = rtl.cloneSet(s);
    s[enumvalue] = true;
    return s;
  },

  excludeSet: function(s,enumvalue){
    if (s.$shared) s = rtl.cloneSet(s);
    delete s[enumvalue];
    return s;
  },

  diffSet: function(s,t){
    var r = {};
    for (var key in s) if (!t[key]) r[key]=true;
    return r;
  },

  unionSet: function(s,t){
    var r = {};
    for (var key in s) r[key]=true;
    for (var key in t) r[key]=true;
    return r;
  },

  intersectSet: function(s,t){
    var r = {};
    for (var key in s) if (t[key]) r[key]=true;
    return r;
  },

  symDiffSet: function(s,t){
    var r = {};
    for (var key in s) if (!t[key]) r[key]=true;
    for (var key in t) if (!s[key]) r[key]=true;
    return r;
  },

  eqSet: function(s,t){
    for (var key in s) if (!t[key]) return false;
    for (var key in t) if (!s[key]) return false;
    return true;
  },

  neSet: function(s,t){
    return !rtl.eqSet(s,t);
  },

  leSet: function(s,t){
    for (var key in s) if (!t[key]) return false;
    return true;
  },

  geSet: function(s,t){
    for (var key in t) if (!s[key]) return false;
    return true;
  },

  strSetLength: function(s,newlen){
    var oldlen = s.length;
    if (oldlen > newlen){
      return s.substring(0,newlen);
    } else if (s.repeat){
      // Note: repeat needs ECMAScript6!
      return s+' '.repeat(newlen-oldlen);
    } else {
       while (oldlen<newlen){
         s+=' ';
         oldlen++;
       };
       return s;
    }
  },

  spaceLeft: function(s,width){
    var l=s.length;
    if (l>=width) return s;
    if (s.repeat){
      // Note: repeat needs ECMAScript6!
      return ' '.repeat(width-l) + s;
    } else {
      while (l<width){
        s=' '+s;
        l++;
      };
    };
  },

  floatToStr : function(d,w,p){
    // input 1-3 arguments: double, width, precision
    if (arguments.length>2){
      return rtl.spaceLeft(d.toFixed(p),w);
    } else {
	  // exponent width
	  var pad = "";
	  var ad = Math.abs(d);
	  if (ad<1.0e+10) {
		pad='00';
	  } else if (ad<1.0e+100) {
		pad='0';
      }  	
	  if (arguments.length<2) {
	    w=9;		
      } else if (w<9) {
		w=9;
      }		  
      var p = w-8;
      var s=(d>0 ? " " : "" ) + d.toExponential(p);
      s=s.replace(/e(.)/,'E$1'+pad);
      return rtl.spaceLeft(s,w);
    }
  },

  initRTTI: function(){
    if (rtl.debug_rtti) rtl.debug('initRTTI');

    // base types
    rtl.tTypeInfo = { name: "tTypeInfo" };
    function newBaseTI(name,kind,ancestor){
      if (!ancestor) ancestor = rtl.tTypeInfo;
      if (rtl.debug_rtti) rtl.debug('initRTTI.newBaseTI "'+name+'" '+kind+' ("'+ancestor.name+'")');
      var t = Object.create(ancestor);
      t.name = name;
      t.kind = kind;
      rtl[name] = t;
      return t;
    };
    function newBaseInt(name,minvalue,maxvalue,ordtype){
      var t = newBaseTI(name,1 /* tkInteger */,rtl.tTypeInfoInteger);
      t.minvalue = minvalue;
      t.maxvalue = maxvalue;
      t.ordtype = ordtype;
      return t;
    };
    newBaseTI("tTypeInfoInteger",1 /* tkInteger */);
    newBaseInt("shortint",-0x80,0x7f,0);
    newBaseInt("byte",0,0xff,1);
    newBaseInt("smallint",-0x8000,0x7fff,2);
    newBaseInt("word",0,0xffff,3);
    newBaseInt("longint",-0x80000000,0x7fffffff,4);
    newBaseInt("longword",0,0xffffffff,5);
    newBaseInt("nativeint",-0x10000000000000,0xfffffffffffff,6);
    newBaseInt("nativeuint",0,0xfffffffffffff,7);
    newBaseTI("char",2 /* tkChar */);
    newBaseTI("string",3 /* tkString */);
    newBaseTI("tTypeInfoEnum",4 /* tkEnumeration */,rtl.tTypeInfoInteger);
    newBaseTI("tTypeInfoSet",5 /* tkSet */);
    newBaseTI("double",6 /* tkDouble */);
    newBaseTI("boolean",7 /* tkBool */);
    newBaseTI("tTypeInfoProcVar",8 /* tkProcVar */);
    newBaseTI("tTypeInfoMethodVar",9 /* tkMethod */,rtl.tTypeInfoProcVar);
    newBaseTI("tTypeInfoArray",10 /* tkArray */);
    newBaseTI("tTypeInfoDynArray",11 /* tkDynArray */);
    newBaseTI("tTypeInfoPointer",15 /* tkPointer */);
    var t = newBaseTI("pointer",15 /* tkPointer */,rtl.tTypeInfoPointer);
    t.reftype = null;
    newBaseTI("jsvalue",16 /* tkJSValue */);
    newBaseTI("tTypeInfoRefToProcVar",17 /* tkRefToProcVar */,rtl.tTypeInfoProcVar);

    // member kinds
    rtl.tTypeMember = {};
    function newMember(name,kind){
      var m = Object.create(rtl.tTypeMember);
      m.name = name;
      m.kind = kind;
      rtl[name] = m;
    };
    newMember("tTypeMemberField",1); // tmkField
    newMember("tTypeMemberMethod",2); // tmkMethod
    newMember("tTypeMemberProperty",3); // tmkProperty

    // base object for storing members: a simple object
    rtl.tTypeMembers = {};

    // tTypeInfoStruct - base object for tTypeInfoClass, tTypeInfoRecord, tTypeInfoInterface
    var tis = newBaseTI("tTypeInfoStruct",0);
    tis.$addMember = function(name,ancestor,options){
      if (rtl.debug_rtti){
        if (!rtl.hasString(name) || (name.charAt()==='$')) throw 'invalid member "'+name+'", this="'+this.name+'"';
        if (!rtl.is(ancestor,rtl.tTypeMember)) throw 'invalid ancestor "'+ancestor+':'+ancestor.name+'", "'+this.name+'.'+name+'"';
        if ((options!=undefined) && (typeof(options)!='object')) throw 'invalid options "'+options+'", "'+this.name+'.'+name+'"';
      };
      var t = Object.create(ancestor);
      t.name = name;
      this.members[name] = t;
      this.names.push(name);
      if (rtl.isObject(options)){
        for (var key in options) if (options.hasOwnProperty(key)) t[key] = options[key];
      };
      return t;
    };
    tis.addField = function(name,type,options){
      var t = this.$addMember(name,rtl.tTypeMemberField,options);
      if (rtl.debug_rtti){
        if (!rtl.is(type,rtl.tTypeInfo)) throw 'invalid type "'+type+'", "'+this.name+'.'+name+'"';
      };
      t.typeinfo = type;
      this.fields.push(name);
      return t;
    };
    tis.addFields = function(){
      var i=0;
      while(i<arguments.length){
        var name = arguments[i++];
        var type = arguments[i++];
        if ((i<arguments.length) && (typeof(arguments[i])==='object')){
          this.addField(name,type,arguments[i++]);
        } else {
          this.addField(name,type);
        };
      };
    };
    tis.addMethod = function(name,methodkind,params,result,options){
      var t = this.$addMember(name,rtl.tTypeMemberMethod,options);
      t.methodkind = methodkind;
      t.procsig = rtl.newTIProcSig(params);
      t.procsig.resulttype = result?result:null;
      this.methods.push(name);
      return t;
    };
    tis.addProperty = function(name,flags,result,getter,setter,options){
      var t = this.$addMember(name,rtl.tTypeMemberProperty,options);
      t.flags = flags;
      t.typeinfo = result;
      t.getter = getter;
      t.setter = setter;
      // Note: in options: params, stored, defaultvalue
      if (rtl.isArray(t.params)) t.params = rtl.newTIParams(t.params);
      this.properties.push(name);
      if (!rtl.isString(t.stored)) t.stored = "";
      return t;
    };
    tis.getField = function(index){
      return this.members[this.fields[index]];
    };
    tis.getMethod = function(index){
      return this.members[this.methods[index]];
    };
    tis.getProperty = function(index){
      return this.members[this.properties[index]];
    };

    newBaseTI("tTypeInfoRecord",12 /* tkRecord */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoClass",13 /* tkClass */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoClassRef",14 /* tkClassRef */);
    newBaseTI("tTypeInfoInterface",15 /* tkInterface */,rtl.tTypeInfoStruct);
  },

  tSectionRTTI: {
    $module: null,
    $inherited: function(name,ancestor,o){
      if (rtl.debug_rtti){
        rtl.debug('tSectionRTTI.newTI "'+(this.$module?this.$module.$name:"(no module)")
          +'"."'+name+'" ('+ancestor.name+') '+(o?'init':'forward'));
      };
      var t = this[name];
      if (t){
        if (!t.$forward) throw 'duplicate type "'+name+'"';
        if (!ancestor.isPrototypeOf(t)) throw 'typeinfo ancestor mismatch "'+name+'" ancestor="'+ancestor.name+'" t.name="'+t.name+'"';
      } else {
        t = Object.create(ancestor);
        t.name = name;
        t.$module = this.$module;
        this[name] = t;
      }
      if (o){
        delete t.$forward;
        for (var key in o) if (o.hasOwnProperty(key)) t[key]=o[key];
      } else {
        t.$forward = true;
      }
      return t;
    },
    $Scope: function(name,ancestor,o){
      var t=this.$inherited(name,ancestor,o);
      t.members = {};
      t.names = [];
      t.fields = [];
      t.methods = [];
      t.properties = [];
      return t;
    },
    $TI: function(name,kind,o){ var t=this.$inherited(name,rtl.tTypeInfo,o); t.kind = kind; return t; },
    $Int: function(name,o){ return this.$inherited(name,rtl.tTypeInfoInteger,o); },
    $Enum: function(name,o){ return this.$inherited(name,rtl.tTypeInfoEnum,o); },
    $Set: function(name,o){ return this.$inherited(name,rtl.tTypeInfoSet,o); },
    $StaticArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoArray,o); },
    $DynArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoDynArray,o); },
    $ProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoProcVar,o); },
    $RefToProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoRefToProcVar,o); },
    $MethodVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoMethodVar,o); },
    $Record: function(name,o){ return this.$Scope(name,rtl.tTypeInfoRecord,o); },
    $Class: function(name,o){ return this.$Scope(name,rtl.tTypeInfoClass,o); },
    $ClassRef: function(name,o){ return this.$inherited(name,rtl.tTypeInfoClassRef,o); },
    $Pointer: function(name,o){ return this.$inherited(name,rtl.tTypeInfoPointer,o); },
    $Interface: function(name,o){ return this.$Scope(name,rtl.tTypeInfoInterface,o); }
  },

  newTIParam: function(param){
    // param is an array, 0=name, 1=type, 2=optional flags
    var t = {
      name: param[0],
      typeinfo: param[1],
      flags: (rtl.isNumber(param[2]) ? param[2] : 0)
    };
    return t;
  },

  newTIParams: function(list){
    // list: optional array of [paramname,typeinfo,optional flags]
    var params = [];
    if (rtl.isArray(list)){
      for (var i=0; i<list.length; i++) params.push(rtl.newTIParam(list[i]));
    };
    return params;
  },

  newTIProcSig: function(params,result,flags){
    var s = {
      params: rtl.newTIParams(params),
      resulttype: result,
      flags: flags
    };
    return s;
  }
}
rtl.module("System",[],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.LineEnding = "\n";
  this.sLineBreak = $mod.LineEnding;
  this.PathDelim = "\/";
  this.AllowDirectorySeparators = rtl.createSet(47);
  this.AllowDriveSeparators = rtl.createSet(58);
  this.ExtensionSeparator = ".";
  this.MaxSmallint = 32767;
  this.MinSmallint = -32768;
  this.MaxShortInt = 127;
  this.MinShortInt = -128;
  this.MaxByte = 0xFF;
  this.MaxWord = 0xFFFF;
  this.MaxLongint = 0x7fffffff;
  this.MaxCardinal = 0xffffffff;
  this.Maxint = 2147483647;
  this.IsMultiThread = false;
  $mod.$rtti.$inherited("Real",rtl.double,{});
  $mod.$rtti.$inherited("Extended",rtl.double,{});
  $mod.$rtti.$inherited("TDateTime",rtl.double,{});
  $mod.$rtti.$inherited("TTime",$mod.$rtti["TDateTime"],{});
  $mod.$rtti.$inherited("TDate",$mod.$rtti["TDateTime"],{});
  $mod.$rtti.$inherited("Int64",rtl.nativeint,{});
  $mod.$rtti.$inherited("UInt64",rtl.nativeuint,{});
  $mod.$rtti.$inherited("QWord",rtl.nativeuint,{});
  $mod.$rtti.$inherited("Single",rtl.double,{});
  $mod.$rtti.$inherited("Comp",rtl.nativeint,{});
  $mod.$rtti.$inherited("UnicodeString",rtl.string,{});
  $mod.$rtti.$inherited("WideString",rtl.string,{});
  this.TTextLineBreakStyle = {"0": "tlbsLF", tlbsLF: 0, "1": "tlbsCRLF", tlbsCRLF: 1, "2": "tlbsCR", tlbsCR: 2};
  $mod.$rtti.$Enum("TTextLineBreakStyle",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTextLineBreakStyle});
  this.TGuid = function (s) {
    if (s) {
      this.D1 = s.D1;
      this.D2 = s.D2;
      this.D3 = s.D3;
      this.D4 = s.D4.slice(0);
    } else {
      this.D1 = 0;
      this.D2 = 0;
      this.D3 = 0;
      this.D4 = rtl.arraySetLength(null,0,8);
    };
    this.$equal = function (b) {
      return (this.D1 === b.D1) && ((this.D2 === b.D2) && ((this.D3 === b.D3) && rtl.arrayEq(this.D4,b.D4)));
    };
  };
  $mod.$rtti.$StaticArray("TGuid.D4$a",{dims: [8], eltype: rtl.byte});
  $mod.$rtti.$Record("TGuid",{}).addFields("D1",rtl.longword,"D2",rtl.word,"D3",rtl.word,"D4",$mod.$rtti["TGuid.D4$a"]);
  $mod.$rtti.$inherited("TGUIDString",rtl.string,{});
  $mod.$rtti.$Class("TObject");
  $mod.$rtti.$ClassRef("TClass",{instancetype: $mod.$rtti["TObject"]});
  rtl.createClass($mod,"TObject",null,function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
    this.Create = function () {
    };
    this.Destroy = function () {
    };
    this.Free = function () {
      this.$destroy("Destroy");
    };
    this.ClassType = function () {
      return this;
    };
    this.ClassNameIs = function (Name) {
      var Result = false;
      Result = $impl.SameText(Name,this.$classname);
      return Result;
    };
    this.InheritsFrom = function (aClass) {
      return (aClass!=null) && ((this==aClass) || aClass.isPrototypeOf(this));
    };
    this.AfterConstruction = function () {
    };
    this.BeforeDestruction = function () {
    };
    this.GetInterface = function (iid, obj) {
      var Result = false;
      var i = iid.$intf;
      if (i){
        i = rtl.getIntfG(this,i.$guid,2);
        if (i){
          obj.set(i);
          return true;
        }
      };
      Result = this.GetInterfaceByStr(rtl.guidrToStr(iid),obj);
      return Result;
    };
    this.GetInterface$1 = function (iidstr, obj) {
      var Result = false;
      Result = this.GetInterfaceByStr(iidstr,obj);
      return Result;
    };
    this.GetInterfaceByStr = function (iidstr, obj) {
      var Result = false;
      if ($mod.IObjectInstance.$equal(rtl.createTGUID(iidstr))) {
        obj.set(this);
        return true;
      };
      var i = rtl.getIntfG(this,iidstr,2);
      obj.set(i);
      return i!==null;
      Result = false;
      return Result;
    };
    this.GetInterfaceWeak = function (iid, obj) {
      var Result = false;
      Result = this.GetInterface(iid,obj);
      if (Result){
        var o = obj.get();
        if (o.$kind==='com'){
          o._Release();
        }
      };
      return Result;
    };
    this.Equals = function (Obj) {
      var Result = false;
      Result = Obj === this;
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      Result = this.$classname;
      return Result;
    };
  });
  this.S_OK = 0;
  this.S_FALSE = 1;
  this.E_NOINTERFACE = -2147467262;
  this.E_UNEXPECTED = -2147418113;
  this.E_NOTIMPL = -2147467263;
  rtl.createInterface($mod,"IUnknown","{00000000-0000-0000-C000-000000000046}",["QueryInterface","_AddRef","_Release"],null,function () {
    this.$kind = "com";
    var $r = this.$rtti;
    $r.addMethod("QueryInterface",1,[["iid",$mod.$rtti["TGuid"],2],["obj",null,4]],rtl.longint);
    $r.addMethod("_AddRef",1,null,rtl.longint);
    $r.addMethod("_Release",1,null,rtl.longint);
  });
  rtl.createInterface($mod,"IInvokable","{88387EF6-BCEE-3E17-9E85-5D491ED4FC10}",[],$mod.IUnknown,function () {
  });
  rtl.createInterface($mod,"IEnumerator","{ECEC7568-4E50-30C9-A2F0-439342DE2ADB}",["GetCurrent","MoveNext","Reset"],$mod.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("GetCurrent",1,null,$mod.$rtti["TObject"]);
    $r.addMethod("MoveNext",1,null,rtl.boolean);
    $r.addMethod("Reset",0,null);
    $r.addProperty("Current",1,$mod.$rtti["TObject"],"GetCurrent","");
  });
  rtl.createInterface($mod,"IEnumerable","{9791C368-4E51-3424-A3CE-D4911D54F385}",["GetEnumerator"],$mod.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("GetEnumerator",1,null,$mod.$rtti["IEnumerator"]);
  });
  rtl.createClass($mod,"TInterfacedObject",$mod.TObject,function () {
    this.$init = function () {
      $mod.TObject.$init.call(this);
      this.fRefCount = 0;
    };
    this.QueryInterface = function (iid, obj) {
      var Result = 0;
      if (this.GetInterface(iid,obj)) {
        Result = 0}
       else Result = -2147467262;
      return Result;
    };
    this._AddRef = function () {
      var Result = 0;
      this.fRefCount += 1;
      Result = this.fRefCount;
      return Result;
    };
    this._Release = function () {
      var Result = 0;
      this.fRefCount -= 1;
      Result = this.fRefCount;
      if (this.fRefCount === 0) this.$destroy("Destroy");
      return Result;
    };
    this.BeforeDestruction = function () {
      if (this.fRefCount !== 0) rtl.raiseE('EHeapMemoryError');
    };
    rtl.addIntf(this,$mod.IUnknown);
  });
  $mod.$rtti.$ClassRef("TInterfacedClass",{instancetype: $mod.$rtti["TInterfacedObject"]});
  rtl.createClass($mod,"TAggregatedObject",$mod.TObject,function () {
    this.$init = function () {
      $mod.TObject.$init.call(this);
      this.fController = null;
    };
    this.GetController = function () {
      var Result = null;
      var $ok = false;
      try {
        Result = rtl.setIntfL(Result,this.fController);
        $ok = true;
      } finally {
        if (!$ok) rtl._Release(Result);
      };
      return Result;
    };
    this.QueryInterface = function (iid, obj) {
      var Result = 0;
      Result = this.fController.QueryInterface(iid,obj);
      return Result;
    };
    this._AddRef = function () {
      var Result = 0;
      Result = this.fController._AddRef();
      return Result;
    };
    this._Release = function () {
      var Result = 0;
      Result = this.fController._Release();
      return Result;
    };
    this.Create$1 = function (aController) {
      $mod.TObject.Create.call(this);
      this.fController = aController;
    };
  });
  rtl.createClass($mod,"TContainedObject",$mod.TAggregatedObject,function () {
    this.QueryInterface = function (iid, obj) {
      var Result = 0;
      if (this.GetInterface(iid,obj)) {
        Result = 0}
       else Result = -2147467262;
      return Result;
    };
    rtl.addIntf(this,$mod.IUnknown);
  });
  this.IObjectInstance = new $mod.TGuid({D1: 0xD91C9AF4, D2: 0x3C93, D3: 0x420F, D4: [0xA3,0x03,0xBF,0x5B,0xA8,0x2B,0xFD,0x23]});
  this.IsConsole = false;
  this.FirstDotAtFileNameStartIsExtension = false;
  $mod.$rtti.$ProcVar("TOnParamCount",{procsig: rtl.newTIProcSig(null,rtl.longint)});
  $mod.$rtti.$ProcVar("TOnParamStr",{procsig: rtl.newTIProcSig([["Index",rtl.longint]],rtl.string)});
  this.OnParamCount = null;
  this.OnParamStr = null;
  this.ParamCount = function () {
    var Result = 0;
    if ($mod.OnParamCount != null) {
      Result = $mod.OnParamCount()}
     else Result = 0;
    return Result;
  };
  this.ParamStr = function (Index) {
    var Result = "";
    if ($mod.OnParamStr != null) {
      Result = $mod.OnParamStr(Index)}
     else if (Index === 0) {
      Result = "js"}
     else Result = "";
    return Result;
  };
  this.Frac = function (A) {
    return A % 1;
  };
  this.Odd = function (A) {
    return A&1 != 0;
  };
  this.Random = function (Range) {
    return Math.floor(Math.random()*Range);
  };
  this.Sqr = function (A) {
    return A*A;
  };
  this.Sqr$1 = function (A) {
    return A*A;
  };
  this.Trunc = function (A) {
    if (!Math.trunc) {
      Math.trunc = function(v) {
        v = +v;
        if (!isFinite(v)) return v;
        return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
      };
    }
    $mod.Trunc = Math.trunc;
    return Math.trunc(A);
  };
  this.DefaultTextLineBreakStyle = $mod.TTextLineBreakStyle.tlbsLF;
  this.Int = function (A) {
    var Result = 0.0;
    Result = $mod.Trunc(A);
    return Result;
  };
  this.Copy = function (S, Index, Size) {
    if (Index<1) Index = 1;
    return (Size>0) ? S.substring(Index-1,Index+Size-1) : "";
  };
  this.Copy$1 = function (S, Index) {
    if (Index<1) Index = 1;
    return S.substr(Index-1);
  };
  this.Delete = function (S, Index, Size) {
    var h = "";
    if (((Index < 1) || (Index > S.get().length)) || (Size <= 0)) return;
    h = S.get();
    S.set($mod.Copy(h,1,Index - 1) + $mod.Copy$1(h,Index + Size));
  };
  this.Pos = function (Search, InString) {
    return InString.indexOf(Search)+1;
  };
  this.Pos$1 = function (Search, InString, StartAt) {
    return InString.indexOf(Search,StartAt-1)+1;
  };
  this.Insert = function (Insertion, Target, Index) {
    var t = "";
    if (Insertion === "") return;
    t = Target.get();
    if (Index < 1) {
      Target.set(Insertion + t)}
     else if (Index > t.length) {
      Target.set(t + Insertion)}
     else Target.set(($mod.Copy(t,1,Index - 1) + Insertion) + $mod.Copy(t,Index,t.length));
  };
  this.upcase = function (c) {
    return c.toUpperCase();
  };
  this.val = function (S, NI, Code) {
    var x = 0.0;
    Code.set(0);
    x = Number(S);
    if (isNaN(x)) {
      var $tmp1 = $mod.Copy(S,1,1);
      if ($tmp1 === "$") {
        x = Number("0x" + $mod.Copy$1(S,2))}
       else if ($tmp1 === "&") {
        x = Number("0o" + $mod.Copy$1(S,2))}
       else if ($tmp1 === "%") {
        x = Number("0b" + $mod.Copy$1(S,2))}
       else {
        Code.set(1);
        return;
      };
    };
    if (isNaN(x) || (x !== $mod.Int(x))) {
      Code.set(1)}
     else NI.set($mod.Trunc(x));
  };
  this.val$1 = function (S, NI, Code) {
    var x = 0.0;
    Code.set(0);
    x = Number(S);
    if ((isNaN(x) || (x !== $mod.Int(x))) || (x < 0)) {
      Code.set(1)}
     else NI.set($mod.Trunc(x));
  };
  this.val$2 = function (S, SI, Code) {
    var X = 0.0;
    Code.set(0);
    X = Number(S);
    if (isNaN(X) || (X !== $mod.Int(X))) {
      Code.set(1)}
     else if ((X < -128) || (X > 127)) {
      Code.set(2)}
     else SI.set($mod.Trunc(X));
  };
  this.val$3 = function (S, B, Code) {
    var x = 0.0;
    Code.set(0);
    x = Number(S);
    if (isNaN(x) || (x !== $mod.Int(x))) {
      Code.set(1)}
     else if ((x < 0) || (x > 255)) {
      Code.set(2)}
     else B.set($mod.Trunc(x));
  };
  this.val$4 = function (S, SI, Code) {
    var x = 0.0;
    Code.set(0);
    x = Number(S);
    if (isNaN(x) || (x !== $mod.Int(x))) {
      Code.set(1)}
     else if ((x < -32768) || (x > 32767)) {
      Code.set(2)}
     else SI.set($mod.Trunc(x));
  };
  this.val$5 = function (S, W, Code) {
    var x = 0.0;
    Code.set(0);
    x = Number(S);
    if (isNaN(x)) {
      Code.set(1)}
     else if ((x < 0) || (x > 65535)) {
      Code.set(2)}
     else W.set($mod.Trunc(x));
  };
  this.val$6 = function (S, I, Code) {
    var x = 0.0;
    Code.set(0);
    x = Number(S);
    if (isNaN(x)) {
      Code.set(1)}
     else if (x > 2147483647) {
      Code.set(2)}
     else I.set($mod.Trunc(x));
  };
  this.val$7 = function (S, C, Code) {
    var x = 0.0;
    Code.set(0);
    x = Number(S);
    if (isNaN(x) || (x !== $mod.Int(x))) {
      Code.set(1)}
     else if ((x < 0) || (x > 4294967295)) {
      Code.set(2)}
     else C.set($mod.Trunc(x));
  };
  this.val$8 = function (S, d, Code) {
    var x = 0.0;
    x = Number(S);
    if (isNaN(x)) {
      Code.set(1)}
     else {
      Code.set(0);
      d.set(x);
    };
  };
  this.StringOfChar = function (c, l) {
    var Result = "";
    var i = 0;
    if ((l>0) && c.repeat) return c.repeat(l);
    Result = "";
    for (var $l1 = 1, $end2 = l; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = Result + c;
    };
    return Result;
  };
  this.Write = function () {
    var i = 0;
    for (var $l1 = 0, $end2 = rtl.length(arguments) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if ($impl.WriteCallBack != null) {
        $impl.WriteCallBack(arguments[i],false)}
       else $impl.WriteBuf = $impl.WriteBuf + ("" + arguments[i]);
    };
  };
  this.Writeln = function () {
    var i = 0;
    var l = 0;
    var s = "";
    l = rtl.length(arguments) - 1;
    if ($impl.WriteCallBack != null) {
      for (var $l1 = 0, $end2 = l; $l1 <= $end2; $l1++) {
        i = $l1;
        $impl.WriteCallBack(arguments[i],i === l);
      };
    } else {
      s = $impl.WriteBuf;
      for (var $l3 = 0, $end4 = l; $l3 <= $end4; $l3++) {
        i = $l3;
        s = s + ("" + arguments[i]);
      };
      console.log(s);
      $impl.WriteBuf = "";
    };
  };
  $mod.$rtti.$ProcVar("TConsoleHandler",{procsig: rtl.newTIProcSig([["S",rtl.jsvalue],["NewLine",rtl.boolean]])});
  this.SetWriteCallBack = function (H) {
    var Result = null;
    Result = $impl.WriteCallBack;
    $impl.WriteCallBack = H;
    return Result;
  };
  this.Assigned = function (V) {
    return (V!=undefined) && (V!=null) && (!rtl.isArray(V) || (V.length > 0));
  };
  this.StrictEqual = function (A, B) {
    return A === B;
  };
  this.StrictInequal = function (A, B) {
    return A !== B;
  };
  $mod.$init = function () {
    rtl.exitcode = 0;
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.SameText = function (s1, s2) {
    return s1.toLowerCase() == s2.toLowerCase();
  };
  $impl.WriteBuf = "";
  $impl.WriteCallBack = null;
});
rtl.module("RTLConsts",["System"],function () {
  "use strict";
  var $mod = this;
  this.SArgumentMissing = 'Missing argument in format "%s"';
  this.SInvalidFormat = 'Invalid format specifier : "%s"';
  this.SInvalidArgIndex = 'Invalid argument index in format: "%s"';
  this.SListCapacityError = "List capacity (%s) exceeded.";
  this.SListCountError = "List count (%s) out of bounds.";
  this.SListIndexError = "List index (%s) out of bounds";
  this.SSortedListError = "Operation not allowed on sorted list";
  this.SDuplicateString = "String list does not allow duplicates";
  this.SErrFindNeedsSortedList = "Cannot use find on unsorted list";
  this.SInvalidName = 'Invalid component name: "%s"';
  this.SInvalidBoolean = '"%s" is not a valid boolean.';
  this.SDuplicateName = 'Duplicate component name: "%s"';
  this.SErrInvalidDate = 'Invalid date: "%s"';
  this.SErrInvalidTimeFormat = 'Invalid time format: "%s"';
  this.SInvalidDateFormat = 'Invalid date format: "%s"';
  this.SCantReadPropertyS = 'Cannot read property "%s"';
  this.SCantWritePropertyS = 'Cannot write property "%s"';
  this.SErrPropertyNotFound = 'Unknown property: "%s"';
  this.SIndexedPropertyNeedsParams = 'Indexed property "%s" needs parameters';
  this.SErrInvalidInteger = 'Invalid integer value: "%s"';
  this.SErrInvalidFloat = 'Invalid floating-point value: "%s"';
  this.SInvalidDateTime = "Invalid date-time value: %s";
  this.SInvalidCurrency = "Invalid currency value: %s";
  this.SErrInvalidDayOfWeek = "%d is not a valid day of the week";
  this.SErrInvalidTimeStamp = 'Invalid date\/timestamp : "%s"';
  this.SErrInvalidDateWeek = "%d %d %d is not a valid dateweek";
  this.SErrInvalidDayOfYear = "Year %d does not have a day number %d";
  this.SErrInvalidDateMonthWeek = "Year %d, month %d, Week %d and day %d is not a valid date.";
  this.SErrInvalidDayOfWeekInMonth = "Year %d Month %d NDow %d DOW %d is not a valid date";
  this.SInvalidJulianDate = "%f Julian cannot be represented as a DateTime";
  this.SErrInvalidHourMinuteSecMsec = "%d:%d:%d.%d is not a valid time specification";
  this.SInvalidGUID = '"%s" is not a valid GUID value';
});
rtl.module("Types",["System"],function () {
  "use strict";
  var $mod = this;
  this.TDirection = {"0": "FromBeginning", FromBeginning: 0, "1": "FromEnd", FromEnd: 1};
  $mod.$rtti.$Enum("TDirection",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TDirection});
  $mod.$rtti.$DynArray("TBooleanDynArray",{eltype: rtl.boolean});
  $mod.$rtti.$DynArray("TIntegerDynArray",{eltype: rtl.longint});
  $mod.$rtti.$DynArray("TNativeIntDynArray",{eltype: rtl.nativeint});
  $mod.$rtti.$DynArray("TStringDynArray",{eltype: rtl.string});
  $mod.$rtti.$DynArray("TDoubleDynArray",{eltype: rtl.double});
  $mod.$rtti.$DynArray("TJSValueDynArray",{eltype: rtl.jsvalue});
  this.TDuplicates = {"0": "dupIgnore", dupIgnore: 0, "1": "dupAccept", dupAccept: 1, "2": "dupError", dupError: 2};
  $mod.$rtti.$Enum("TDuplicates",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TDuplicates});
  $mod.$rtti.$MethodVar("TListCallback",{procsig: rtl.newTIProcSig([["data",rtl.jsvalue],["arg",rtl.jsvalue]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TListStaticCallback",{procsig: rtl.newTIProcSig([["data",rtl.jsvalue],["arg",rtl.jsvalue]])});
  this.TSize = function (s) {
    if (s) {
      this.cx = s.cx;
      this.cy = s.cy;
    } else {
      this.cx = 0;
      this.cy = 0;
    };
    this.$equal = function (b) {
      return (this.cx === b.cx) && (this.cy === b.cy);
    };
  };
  $mod.$rtti.$Record("TSize",{}).addFields("cx",rtl.longint,"cy",rtl.longint);
  this.TPoint = function (s) {
    if (s) {
      this.x = s.x;
      this.y = s.y;
    } else {
      this.x = 0;
      this.y = 0;
    };
    this.$equal = function (b) {
      return (this.x === b.x) && (this.y === b.y);
    };
  };
  $mod.$rtti.$Record("TPoint",{}).addFields("x",rtl.longint,"y",rtl.longint);
  this.TRect = function (s) {
    if (s) {
      this.Left = s.Left;
      this.Top = s.Top;
      this.Right = s.Right;
      this.Bottom = s.Bottom;
    } else {
      this.Left = 0;
      this.Top = 0;
      this.Right = 0;
      this.Bottom = 0;
    };
    this.$equal = function (b) {
      return (this.Left === b.Left) && ((this.Top === b.Top) && ((this.Right === b.Right) && (this.Bottom === b.Bottom)));
    };
  };
  $mod.$rtti.$Record("TRect",{}).addFields("Left",rtl.longint,"Top",rtl.longint,"Right",rtl.longint,"Bottom",rtl.longint);
  this.EqualRect = function (r1, r2) {
    var Result = false;
    Result = (((r1.Left === r2.Left) && (r1.Right === r2.Right)) && (r1.Top === r2.Top)) && (r1.Bottom === r2.Bottom);
    return Result;
  };
  this.Rect = function (Left, Top, Right, Bottom) {
    var Result = new $mod.TRect();
    Result.Left = Left;
    Result.Top = Top;
    Result.Right = Right;
    Result.Bottom = Bottom;
    return Result;
  };
  this.Bounds = function (ALeft, ATop, AWidth, AHeight) {
    var Result = new $mod.TRect();
    Result.Left = ALeft;
    Result.Top = ATop;
    Result.Right = ALeft + AWidth;
    Result.Bottom = ATop + AHeight;
    return Result;
  };
  this.Point = function (x, y) {
    var Result = new $mod.TPoint();
    Result.x = x;
    Result.y = y;
    return Result;
  };
  this.PtInRect = function (aRect, p) {
    var Result = false;
    Result = (((p.y >= aRect.Top) && (p.y < aRect.Bottom)) && (p.x >= aRect.Left)) && (p.x < aRect.Right);
    return Result;
  };
  this.IntersectRect = function (aRect, R1, R2) {
    var Result = false;
    var lRect = new $mod.TRect();
    lRect = new $mod.TRect(R1);
    if (R2.Left > R1.Left) lRect.Left = R2.Left;
    if (R2.Top > R1.Top) lRect.Top = R2.Top;
    if (R2.Right < R1.Right) lRect.Right = R2.Right;
    if (R2.Bottom < R1.Bottom) lRect.Bottom = R2.Bottom;
    if ($mod.IsRectEmpty(lRect)) {
      aRect.set(new $mod.TRect($mod.Rect(0,0,0,0)));
      Result = false;
    } else {
      Result = true;
      aRect.set(new $mod.TRect(lRect));
    };
    return Result;
  };
  this.UnionRect = function (aRect, R1, R2) {
    var Result = false;
    var lRect = new $mod.TRect();
    lRect = new $mod.TRect(R1);
    if (R2.Left < R1.Left) lRect.Left = R2.Left;
    if (R2.Top < R1.Top) lRect.Top = R2.Top;
    if (R2.Right > R1.Right) lRect.Right = R2.Right;
    if (R2.Bottom > R1.Bottom) lRect.Bottom = R2.Bottom;
    if ($mod.IsRectEmpty(lRect)) {
      aRect.set(new $mod.TRect($mod.Rect(0,0,0,0)));
      Result = false;
    } else {
      aRect.set(new $mod.TRect(lRect));
      Result = true;
    };
    return Result;
  };
  this.IsRectEmpty = function (aRect) {
    var Result = false;
    Result = (aRect.Right <= aRect.Left) || (aRect.Bottom <= aRect.Top);
    return Result;
  };
  this.OffsetRect = function (aRect, DX, DY) {
    var Result = false;
    var $with1 = aRect.get();
    $with1.Left += DX;
    $with1.Top += DY;
    $with1.Right += DX;
    $with1.Bottom += DY;
    Result = true;
    return Result;
  };
  this.CenterPoint = function (aRect) {
    var Result = new $mod.TPoint();
    function Avg(a, b) {
      var Result = 0;
      if (a < b) {
        Result = a + ((b - a) >>> 1)}
       else Result = b + ((a - b) >>> 1);
      return Result;
    };
    Result.x = Avg(aRect.Left,aRect.Right);
    Result.y = Avg(aRect.Top,aRect.Bottom);
    return Result;
  };
  this.InflateRect = function (aRect, dx, dy) {
    var Result = false;
    var $with1 = aRect.get();
    $with1.Left -= dx;
    $with1.Top -= dy;
    $with1.Right += dx;
    $with1.Bottom += dy;
    Result = true;
    return Result;
  };
  this.Size = function (AWidth, AHeight) {
    var Result = new $mod.TSize();
    Result.cx = AWidth;
    Result.cy = AHeight;
    return Result;
  };
  this.Size$1 = function (aRect) {
    var Result = new $mod.TSize();
    Result.cx = aRect.Right - aRect.Left;
    Result.cy = aRect.Bottom - aRect.Top;
    return Result;
  };
});
rtl.module("JS",["System","Types"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"EJS",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FMessage = "";
    };
    this.Create$1 = function (Msg) {
      this.FMessage = Msg;
    };
  });
  $mod.$rtti.$DynArray("TJSObjectDynArray",{eltype: $mod.$rtti["TJSObject"]});
  $mod.$rtti.$DynArray("TJSObjectDynArrayArray",{eltype: $mod.$rtti["TJSObjectDynArray"]});
  $mod.$rtti.$DynArray("TJSStringDynArray",{eltype: rtl.string});
  this.TLocaleCompareOptions = function (s) {
    if (s) {
      this.localematched = s.localematched;
      this.usage = s.usage;
      this.sensitivity = s.sensitivity;
      this.ignorePunctuation = s.ignorePunctuation;
      this.numeric = s.numeric;
      this.caseFirst = s.caseFirst;
    } else {
      this.localematched = "";
      this.usage = "";
      this.sensitivity = "";
      this.ignorePunctuation = false;
      this.numeric = false;
      this.caseFirst = "";
    };
    this.$equal = function (b) {
      return (this.localematched === b.localematched) && ((this.usage === b.usage) && ((this.sensitivity === b.sensitivity) && ((this.ignorePunctuation === b.ignorePunctuation) && ((this.numeric === b.numeric) && (this.caseFirst === b.caseFirst)))));
    };
  };
  $mod.$rtti.$Record("TLocaleCompareOptions",{}).addFields("localematched",rtl.string,"usage",rtl.string,"sensitivity",rtl.string,"ignorePunctuation",rtl.boolean,"numeric",rtl.boolean,"caseFirst",rtl.string);
  $mod.$rtti.$ProcVar("TReplaceCallBack",{procsig: rtl.newTIProcSig(null,rtl.string,2)});
  $mod.$rtti.$RefToProcVar("TJSArrayEvent",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSArray"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSArrayMapEvent",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSArray"]]],rtl.jsvalue)});
  $mod.$rtti.$RefToProcVar("TJSArrayReduceEvent",{procsig: rtl.newTIProcSig([["accumulator",rtl.jsvalue],["currentValue",rtl.jsvalue],["currentIndex",rtl.nativeint],["anArray",$mod.$rtti["TJSArray"]]],rtl.jsvalue)});
  $mod.$rtti.$RefToProcVar("TJSArrayCompareEvent",{procsig: rtl.newTIProcSig([["a",rtl.jsvalue],["b",rtl.jsvalue]],rtl.nativeint)});
  $mod.$rtti.$ProcVar("TJSTypedArrayCallBack",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSTypedArray"]]],rtl.boolean)});
  $mod.$rtti.$MethodVar("TJSTypedArrayEvent",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSTypedArray"]]],rtl.boolean), methodkind: 1});
  $mod.$rtti.$ProcVar("TJSTypedArrayMapCallBack",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSTypedArray"]]],rtl.jsvalue)});
  $mod.$rtti.$MethodVar("TJSTypedArrayMapEvent",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSTypedArray"]]],rtl.jsvalue), methodkind: 1});
  $mod.$rtti.$ProcVar("TJSTypedArrayReduceCallBack",{procsig: rtl.newTIProcSig([["accumulator",rtl.jsvalue],["currentValue",rtl.jsvalue],["currentIndex",rtl.nativeint],["anArray",$mod.$rtti["TJSTypedArray"]]],rtl.jsvalue)});
  $mod.$rtti.$ProcVar("TJSTypedArrayCompareCallBack",{procsig: rtl.newTIProcSig([["a",rtl.jsvalue],["b",rtl.jsvalue]],rtl.nativeint)});
  $mod.$rtti.$RefToProcVar("TJSPromiseResolver",{procsig: rtl.newTIProcSig([["aValue",rtl.jsvalue]],rtl.jsvalue)});
  $mod.$rtti.$RefToProcVar("TJSPromiseExecutor",{procsig: rtl.newTIProcSig([["resolve",$mod.$rtti["TJSPromiseResolver"]],["reject",$mod.$rtti["TJSPromiseResolver"]]])});
  $mod.$rtti.$RefToProcVar("TJSPromiseFinallyHandler",{procsig: rtl.newTIProcSig(null)});
  this.New = function (aElements) {
    var Result = null;
    var L = 0;
    var I = 0;
    var S = "";
    L = rtl.length(aElements);
    if ((L % 2) === 1) throw $mod.EJS.$create("Create$1",["Number of arguments must be even"]);
    I = 0;
    while (I < L) {
      if (!rtl.isString(aElements[I])) {
        S = String(I);
        throw $mod.EJS.$create("Create$1",[("Argument " + S) + " must be a string."]);
      };
      I += 2;
    };
    I = 0;
    Result = new Object();
    while (I < L) {
      S = "" + aElements[I];
      Result[S] = aElements[I + 1];
      I += 2;
    };
    return Result;
  };
  this.JSDelete = function (Obj, PropName) {
    return delete Obj[PropName];
  };
  this.hasValue = function (v) {
    if(v){ return true; } else { return false; };
  };
  this.isBoolean = function (v) {
    return typeof(v) == 'boolean';
  };
  this.isCallback = function (v) {
    return rtl.isObject(v) && rtl.isObject(v.scope) && (rtl.isString(v.fn) || rtl.isFunction(v.fn));
  };
  this.isChar = function (v) {
    return (typeof(v)!="string") && (v.length==1);
  };
  this.isClass = function (v) {
    return (typeof(v)=="object") && (v!=null) && (v.$class == v);
  };
  this.isClassInstance = function (v) {
    return (typeof(v)=="object") && (v!=null) && (v.$class == Object.getPrototypeOf(v));
  };
  this.isInteger = function (v) {
    return Math.floor(v)===v;
  };
  this.isNull = function (v) {
    return v === null;
  };
  this.isRecord = function (v) {
    return (typeof(v)=="function") && (typeof(v.$create) == "function");
  };
  this.isUndefined = function (v) {
    return v == undefined;
  };
  this.isDefined = function (v) {
    return !(v == undefined);
  };
  this.isUTF16Char = function (v) {
    if (typeof(v)!="string") return false;
    if ((v.length==0) || (v.length>2)) return false;
    var code = v.charCodeAt(0);
    if (code < 0xD800){
      if (v.length == 1) return true;
    } else if (code <= 0xDBFF){
      if (v.length==2){
        code = v.charCodeAt(1);
        if (code >= 0xDC00 && code <= 0xDFFF) return true;
      };
    };
    return false;
  };
  this.jsInstanceOf = function (aFunction, aFunctionWithPrototype) {
    return aFunction instanceof aFunctionWithPrototype;
  };
  this.toNumber = function (v) {
    return v-0;
  };
  this.toInteger = function (v) {
    var Result = 0;
    if ($mod.isInteger(v)) {
      Result = Math.floor(v)}
     else Result = 0;
    return Result;
  };
  this.toObject = function (Value) {
    var Result = null;
    if (rtl.isObject(Value)) {
      Result = rtl.getObject(Value)}
     else Result = null;
    return Result;
  };
  this.toArray = function (Value) {
    var Result = null;
    if (rtl.isArray(Value)) {
      Result = rtl.getObject(Value)}
     else Result = null;
    return Result;
  };
  this.toBoolean = function (Value) {
    var Result = false;
    if ($mod.isBoolean(Value)) {
      Result = !(Value == false)}
     else Result = false;
    return Result;
  };
  this.ToString = function (Value) {
    var Result = "";
    if (rtl.isString(Value)) {
      Result = "" + Value}
     else Result = "";
    return Result;
  };
  this.TJSValueType = {"0": "jvtNull", jvtNull: 0, "1": "jvtBoolean", jvtBoolean: 1, "2": "jvtInteger", jvtInteger: 2, "3": "jvtFloat", jvtFloat: 3, "4": "jvtString", jvtString: 4, "5": "jvtObject", jvtObject: 5, "6": "jvtArray", jvtArray: 6};
  $mod.$rtti.$Enum("TJSValueType",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TJSValueType});
  this.GetValueType = function (JS) {
    var Result = 0;
    var t = "";
    if ($mod.isNull(JS)) {
      Result = $mod.TJSValueType.jvtNull}
     else {
      t = typeof(JS);
      if (t === "string") {
        Result = $mod.TJSValueType.jvtString}
       else if (t === "boolean") {
        Result = $mod.TJSValueType.jvtBoolean}
       else if (t === "object") {
        if (rtl.isArray(JS)) {
          Result = $mod.TJSValueType.jvtArray}
         else Result = $mod.TJSValueType.jvtObject;
      } else if (t === "number") if ($mod.isInteger(JS)) {
        Result = $mod.TJSValueType.jvtInteger}
       else Result = $mod.TJSValueType.jvtFloat;
    };
    return Result;
  };
});
rtl.module("SysUtils",["System","RTLConsts","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.FreeAndNil = function (Obj) {
    var o = null;
    o = Obj.get();
    if (o === null) return;
    Obj.set(null);
    o.$destroy("Destroy");
  };
  $mod.$rtti.$ProcVar("TProcedure",{procsig: rtl.newTIProcSig(null)});
  this.FloatRecDigits = 19;
  this.TFloatRec = function (s) {
    if (s) {
      this.Exponent = s.Exponent;
      this.Negative = s.Negative;
      this.Digits = s.Digits.slice(0);
    } else {
      this.Exponent = 0;
      this.Negative = false;
      this.Digits = rtl.arraySetLength(null,"",19);
    };
    this.$equal = function (b) {
      return (this.Exponent === b.Exponent) && ((this.Negative === b.Negative) && rtl.arrayEq(this.Digits,b.Digits));
    };
  };
  $mod.$rtti.$StaticArray("TFloatRec.Digits$a",{dims: [19], eltype: rtl.char});
  $mod.$rtti.$Record("TFloatRec",{}).addFields("Exponent",rtl.longint,"Negative",rtl.boolean,"Digits",$mod.$rtti["TFloatRec.Digits$a"]);
  this.TEndian = {"0": "Little", Little: 0, "1": "Big", Big: 1};
  $mod.$rtti.$Enum("TEndian",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TEndian});
  $mod.$rtti.$StaticArray("TByteArray",{dims: [32768], eltype: rtl.byte});
  $mod.$rtti.$StaticArray("TWordArray",{dims: [16384], eltype: rtl.word});
  $mod.$rtti.$DynArray("TBytes",{eltype: rtl.byte});
  $mod.$rtti.$DynArray("TStringArray",{eltype: rtl.string});
  $mod.$rtti.$StaticArray("TMonthNameArray",{dims: [12], eltype: rtl.string});
  $mod.$rtti.$StaticArray("TDayTable",{dims: [12], eltype: rtl.word});
  $mod.$rtti.$StaticArray("TWeekNameArray",{dims: [7], eltype: rtl.string});
  $mod.$rtti.$StaticArray("TDayNames",{dims: [7], eltype: rtl.string});
  rtl.createClass($mod,"Exception",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.fMessage = "";
      this.fHelpContext = 0;
    };
    this.Create$1 = function (Msg) {
      this.fMessage = Msg;
    };
    this.CreateFmt = function (Msg, Args) {
      this.Create$1($mod.Format(Msg,Args));
    };
    this.CreateHelp = function (Msg, AHelpContext) {
      this.Create$1(Msg);
      this.fHelpContext = AHelpContext;
    };
    this.CreateFmtHelp = function (Msg, Args, AHelpContext) {
      this.Create$1($mod.Format(Msg,Args));
      this.fHelpContext = AHelpContext;
    };
    this.ToString = function () {
      var Result = "";
      Result = (this.$classname + ": ") + this.fMessage;
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("ExceptClass",{instancetype: $mod.$rtti["Exception"]});
  rtl.createClass($mod,"EExternal",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EMathError",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EInvalidOp",$mod.EMathError,function () {
  });
  rtl.createClass($mod,"EZeroDivide",$mod.EMathError,function () {
  });
  rtl.createClass($mod,"EOverflow",$mod.EMathError,function () {
  });
  rtl.createClass($mod,"EUnderflow",$mod.EMathError,function () {
  });
  rtl.createClass($mod,"EAbort",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EInvalidCast",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EAssertionFailed",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EObjectCheck",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EConvertError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EFormatError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EIntError",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EDivByZero",$mod.EIntError,function () {
  });
  rtl.createClass($mod,"ERangeError",$mod.EIntError,function () {
  });
  rtl.createClass($mod,"EIntOverflow",$mod.EIntError,function () {
  });
  rtl.createClass($mod,"EInOutError",$mod.Exception,function () {
    this.$init = function () {
      $mod.Exception.$init.call(this);
      this.ErrorCode = 0;
    };
  });
  rtl.createClass($mod,"EHeapMemoryError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EExternalException",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EInvalidPointer",$mod.EHeapMemoryError,function () {
  });
  rtl.createClass($mod,"EOutOfMemory",$mod.EHeapMemoryError,function () {
  });
  rtl.createClass($mod,"EVariantError",$mod.Exception,function () {
    this.$init = function () {
      $mod.Exception.$init.call(this);
      this.ErrCode = 0;
    };
    this.CreateCode = function (Code) {
      this.ErrCode = Code;
    };
  });
  rtl.createClass($mod,"EAccessViolation",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EBusError",$mod.EAccessViolation,function () {
  });
  rtl.createClass($mod,"EPrivilege",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EStackOverflow",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EControlC",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EAbstractError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EPropReadOnly",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EPropWriteOnly",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EIntfCastError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EInvalidContainer",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EInvalidInsert",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EPackageError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EOSError",$mod.Exception,function () {
    this.$init = function () {
      $mod.Exception.$init.call(this);
      this.ErrorCode = 0;
    };
  });
  rtl.createClass($mod,"ESafecallException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"ENoThreadSupport",$mod.Exception,function () {
  });
  rtl.createClass($mod,"ENoWideStringSupport",$mod.Exception,function () {
  });
  rtl.createClass($mod,"ENotImplemented",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EArgumentException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EArgumentOutOfRangeException",$mod.EArgumentException,function () {
  });
  rtl.createClass($mod,"EArgumentNilException",$mod.EArgumentException,function () {
  });
  rtl.createClass($mod,"EPathTooLongException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"ENotSupportedException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EDirectoryNotFoundException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EFileNotFoundException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EPathNotFoundException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"ENoConstructException",$mod.Exception,function () {
  });
  this.EmptyStr = "";
  this.EmptyWideStr = "";
  this.HexDisplayPrefix = "$";
  this.LeadBytes = {};
  this.CharInSet = function (Ch, CSet) {
    var Result = false;
    var I = 0;
    Result = false;
    I = rtl.length(CSet) - 1;
    while (!Result && (I >= 0)) {
      Result = Ch === CSet[I];
      I -= 1;
    };
    return Result;
  };
  this.LeftStr = function (S, Count) {
    return (Count>0) ? S.substr(0,Count) : "";
  };
  this.RightStr = function (S, Count) {
    var l = S.length;
    return (Count<1) ? "" : ( Count>=l ? S : S.substr(l-Count));
  };
  this.Trim = function (S) {
    return S.trim();
  };
  this.TrimLeft = function (S) {
    return S.replace(/^[\s\uFEFF\xA0\x00-\x1f]+/,'');
  };
  this.TrimRight = function (S) {
    return S.replace(/[\s\uFEFF\xA0\x00-\x1f]+$/,'');
  };
  this.UpperCase = function (s) {
    return s.toUpperCase();
  };
  this.LowerCase = function (s) {
    return s.toLowerCase();
  };
  this.CompareStr = function (s1, s2) {
    var l1 = s1.length;
    var l2 = s2.length;
    if (l1<=l2){
      var s = s2.substr(0,l1);
      if (s1<s){ return -1;
      } else if (s1>s){ return 1;
      } else { return l1<l2 ? -1 : 0; };
    } else {
      var s = s1.substr(0,l2);
      if (s<s2){ return -1;
      } else { return 1; };
    };
  };
  this.SameStr = function (s1, s2) {
    return s1 == s2;
  };
  this.CompareText = function (s1, s2) {
    var l1 = s1.toLowerCase();
    var l2 = s2.toLowerCase();
    if (l1>l2){ return 1;
    } else if (l1<l2){ return -1;
    } else { return 0; };
  };
  this.SameText = function (s1, s2) {
    return s1.toLowerCase() == s2.toLowerCase();
  };
  this.AnsiCompareText = function (s1, s2) {
    return s1.localeCompare(s2);
  };
  this.AnsiSameText = function (s1, s2) {
    return s1.localeCompare(s2) == 0;
  };
  this.AnsiCompareStr = function (s1, s2) {
    var Result = 0;
    Result = $mod.CompareText(s1,s2);
    return Result;
  };
  this.AppendStr = function (Dest, S) {
    Dest.set(Dest.get() + S);
  };
  this.Format = function (Fmt, Args) {
    var Result = "";
    var ChPos = 0;
    var OldPos = 0;
    var ArgPos = 0;
    var DoArg = 0;
    var Len = 0;
    var Hs = "";
    var ToAdd = "";
    var Index = 0;
    var Width = 0;
    var Prec = 0;
    var Left = false;
    var Fchar = "";
    var vq = 0;
    function ReadFormat() {
      var Result = "";
      var Value = 0;
      function ReadInteger() {
        var Code = 0;
        var ArgN = 0;
        if (Value !== -1) return;
        OldPos = ChPos;
        while (((ChPos <= Len) && (Fmt.charAt(ChPos - 1) <= "9")) && (Fmt.charAt(ChPos - 1) >= "0")) ChPos += 1;
        if (ChPos > Len) $impl.DoFormatError(1,Fmt);
        if (Fmt.charAt(ChPos - 1) === "*") {
          if (Index === -1) {
            ArgN = ArgPos}
           else {
            ArgN = Index;
            Index += 1;
          };
          if ((ChPos > OldPos) || (ArgN > (rtl.length(Args) - 1))) $impl.DoFormatError(1,Fmt);
          ArgPos = ArgN + 1;
          if (rtl.isNumber(Args[ArgN]) && pas.JS.isInteger(Args[ArgN])) {
            Value = Math.floor(Args[ArgN])}
           else $impl.DoFormatError(1,Fmt);
          ChPos += 1;
        } else {
          if (OldPos < ChPos) {
            pas.System.val(pas.System.Copy(Fmt,OldPos,ChPos - OldPos),{get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }},{get: function () {
                return Code;
              }, set: function (v) {
                Code = v;
              }});
            if (Code > 0) $impl.DoFormatError(1,Fmt);
          } else Value = -1;
        };
      };
      function ReadIndex() {
        if (Fmt.charAt(ChPos - 1) !== ":") {
          ReadInteger()}
         else Value = 0;
        if (Fmt.charAt(ChPos - 1) === ":") {
          if (Value === -1) $impl.DoFormatError(2,Fmt);
          Index = Value;
          Value = -1;
          ChPos += 1;
        };
      };
      function ReadLeft() {
        if (Fmt.charAt(ChPos - 1) === "-") {
          Left = true;
          ChPos += 1;
        } else Left = false;
      };
      function ReadWidth() {
        ReadInteger();
        if (Value !== -1) {
          Width = Value;
          Value = -1;
        };
      };
      function ReadPrec() {
        if (Fmt.charAt(ChPos - 1) === ".") {
          ChPos += 1;
          ReadInteger();
          if (Value === -1) Value = 0;
          Prec = Value;
        };
      };
      Index = -1;
      Width = -1;
      Prec = -1;
      Value = -1;
      ChPos += 1;
      if (Fmt.charAt(ChPos - 1) === "%") {
        Result = "%";
        return Result;
      };
      ReadIndex();
      ReadLeft();
      ReadWidth();
      ReadPrec();
      Result = pas.System.upcase(Fmt.charAt(ChPos - 1));
      return Result;
    };
    function Checkarg(AT, err) {
      var Result = false;
      Result = false;
      if (Index === -1) {
        DoArg = ArgPos}
       else DoArg = Index;
      ArgPos = DoArg + 1;
      if ((DoArg > (rtl.length(Args) - 1)) || (pas.JS.GetValueType(Args[DoArg]) !== AT)) {
        if (err) $impl.DoFormatError(3,Fmt);
        ArgPos -= 1;
        return Result;
      };
      Result = true;
      return Result;
    };
    Result = "";
    Len = Fmt.length;
    ChPos = 1;
    OldPos = 1;
    ArgPos = 0;
    while (ChPos <= Len) {
      while ((ChPos <= Len) && (Fmt.charAt(ChPos - 1) !== "%")) ChPos += 1;
      if (ChPos > OldPos) Result = Result + pas.System.Copy(Fmt,OldPos,ChPos - OldPos);
      if (ChPos < Len) {
        Fchar = ReadFormat();
        var $tmp1 = Fchar;
        if ($tmp1 === "D") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          ToAdd = $mod.IntToStr(Math.floor(Args[DoArg]));
          Width = Math.abs(Width);
          Index = Prec - ToAdd.length;
          if (ToAdd.charAt(0) !== "-") {
            ToAdd = pas.System.StringOfChar("0",Index) + ToAdd}
           else pas.System.Insert(pas.System.StringOfChar("0",Index + 1),{get: function () {
              return ToAdd;
            }, set: function (v) {
              ToAdd = v;
            }},2);
        } else if ($tmp1 === "U") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          if (Math.floor(Args[DoArg]) < 0) $impl.DoFormatError(3,Fmt);
          ToAdd = $mod.IntToStr(Math.floor(Args[DoArg]));
          Width = Math.abs(Width);
          Index = Prec - ToAdd.length;
          ToAdd = pas.System.StringOfChar("0",Index) + ToAdd;
        } else if ($tmp1 === "E") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffFixed,9999,Prec);
        } else if ($tmp1 === "F") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffFixed,9999,Prec);
        } else if ($tmp1 === "G") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffGeneral,Prec,3);
        } else if ($tmp1 === "N") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffNumber,9999,Prec);
        } else if ($tmp1 === "M") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffCurrency,9999,Prec);
        } else if ($tmp1 === "S") {
          Checkarg(pas.JS.TJSValueType.jvtString,true);
          Hs = "" + Args[DoArg];
          Index = Hs.length;
          if ((Prec !== -1) && (Index > Prec)) Index = Prec;
          ToAdd = pas.System.Copy(Hs,1,Index);
        } else if ($tmp1 === "P") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          ToAdd = $mod.IntToHex(Math.floor(Args[DoArg]),31);
        } else if ($tmp1 === "X") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          vq = Math.floor(Args[DoArg]);
          Index = 31;
          if (Prec > Index) {
            ToAdd = $mod.IntToHex(vq,Index)}
           else {
            Index = 1;
            while (((1 << (Index * 4)) <= vq) && (Index < 16)) Index += 1;
            if (Index > Prec) Prec = Index;
            ToAdd = $mod.IntToHex(vq,Prec);
          };
        } else if ($tmp1 === "%") ToAdd = "%";
        if (Width !== -1) if (ToAdd.length < Width) if (!Left) {
          ToAdd = pas.System.StringOfChar(" ",Width - ToAdd.length) + ToAdd}
         else ToAdd = ToAdd + pas.System.StringOfChar(" ",Width - ToAdd.length);
        Result = Result + ToAdd;
      };
      ChPos += 1;
      OldPos = ChPos;
    };
    return Result;
  };
  this.BytesOf = function (AVal) {
    var Result = [];
    var I = 0;
    Result = rtl.arraySetLength(Result,0,AVal.length);
    for (var $l1 = 0, $end2 = AVal.length - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      Result[I] = AVal.charCodeAt((I + 1) - 1);
    };
    return Result;
  };
  this.StringOf = function (ABytes) {
    var Result = "";
    var I = 0;
    Result = "";
    for (var $l1 = 0, $end2 = rtl.length(ABytes) - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      Result = Result + String.fromCharCode(ABytes[I]);
    };
    return Result;
  };
  this.LocaleCompare = function (s1, s2, locales) {
    return s1.localeCompare(s2,locales) == 0;
  };
  this.NormalizeStr = function (S, Norm) {
    return S.normalize(Norm);
  };
  var Alpha = rtl.createSet(null,65,90,null,97,122,95);
  var AlphaNum = rtl.unionSet(Alpha,rtl.createSet(null,48,57));
  var Dot = ".";
  this.IsValidIdent = function (Ident, AllowDots, StrictDots) {
    var Result = false;
    var First = false;
    var I = 0;
    var Len = 0;
    Len = Ident.length;
    if (Len < 1) return false;
    First = true;
    Result = false;
    I = 1;
    while (I <= Len) {
      if (First) {
        if (!(Ident.charCodeAt(I - 1) in Alpha)) return Result;
        First = false;
      } else if (AllowDots && (Ident.charAt(I - 1) === Dot)) {
        if (StrictDots) {
          if (I >= Len) return Result;
          First = true;
        };
      } else if (!(Ident.charCodeAt(I - 1) in AlphaNum)) return Result;
      I = I + 1;
    };
    Result = true;
    return Result;
  };
  this.TStringReplaceFlag = {"0": "rfReplaceAll", rfReplaceAll: 0, "1": "rfIgnoreCase", rfIgnoreCase: 1};
  $mod.$rtti.$Enum("TStringReplaceFlag",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TStringReplaceFlag});
  $mod.$rtti.$Set("TStringReplaceFlags",{comptype: $mod.$rtti["TStringReplaceFlag"]});
  this.StringReplace = function (aOriginal, aSearch, aReplace, Flags) {
    var Result = "";
    var REFlags = "";
    var REString = "";
    REFlags = "";
    if ($mod.TStringReplaceFlag.rfReplaceAll in Flags) REFlags = "g";
    if ($mod.TStringReplaceFlag.rfIgnoreCase in Flags) REFlags = REFlags + "i";
    REString = aSearch.replace(new RegExp($impl.RESpecials,"g"),"\\$1");
    Result = aOriginal.replace(new RegExp(REString,REFlags),aReplace);
    return Result;
  };
  this.QuoteString = function (aOriginal, AQuote) {
    var Result = "";
    Result = (AQuote + $mod.StringReplace(aOriginal,AQuote,AQuote + AQuote,rtl.createSet($mod.TStringReplaceFlag.rfReplaceAll))) + AQuote;
    return Result;
  };
  this.QuotedStr = function (s, QuoteChar) {
    var Result = "";
    Result = $mod.QuoteString(s,QuoteChar);
    return Result;
  };
  this.DeQuoteString = function (aQuoted, AQuote) {
    var Result = "";
    var i = 0;
    Result = aQuoted;
    if (Result.substr(0,1) !== AQuote) return Result;
    Result = Result.slice(1);
    i = 1;
    while (i <= Result.length) {
      if (Result.charAt(i - 1) === AQuote) {
        if ((i === Result.length) || (Result.charAt((i + 1) - 1) !== AQuote)) {
          Result = Result.slice(0,i - 1);
          return Result;
        } else Result = Result.slice(0,i - 1) + Result.slice(i);
      } else i += 1;
    };
    return Result;
  };
  this.IsDelimiter = function (Delimiters, S, Index) {
    var Result = false;
    Result = false;
    if ((Index > 0) && (Index <= S.length)) Result = pas.System.Pos(S.charAt(Index - 1),Delimiters) !== 0;
    return Result;
  };
  this.AdjustLineBreaks = function (S) {
    var Result = "";
    Result = $mod.AdjustLineBreaks$1(S,pas.System.DefaultTextLineBreakStyle);
    return Result;
  };
  this.AdjustLineBreaks$1 = function (S, Style) {
    var Result = "";
    var I = 0;
    var L = 0;
    var Res = "";
    function Add(C) {
      Res = Res + C;
    };
    I = 0;
    L = S.length;
    Result = "";
    while (I <= L) {
      var $tmp1 = S.charAt(I - 1);
      if ($tmp1 === "\n") {
        if (Style in rtl.createSet(pas.System.TTextLineBreakStyle.tlbsCRLF,pas.System.TTextLineBreakStyle.tlbsCR)) Add("\r");
        if (Style === pas.System.TTextLineBreakStyle.tlbsCRLF) Add("\n");
        I += 1;
      } else if ($tmp1 === "\r") {
        if (Style === pas.System.TTextLineBreakStyle.tlbsCRLF) Add("\r");
        Add("\n");
        I += 1;
        if (S.charAt(I - 1) === "\n") I += 1;
      } else {
        Add(S.charAt(I - 1));
        I += 1;
      };
    };
    Result = Res;
    return Result;
  };
  var Quotes = rtl.createSet(39,34);
  this.WrapText = function (Line, BreakStr, BreakChars, MaxCol) {
    var Result = "";
    var L = "";
    var C = "";
    var LQ = "";
    var BC = "";
    var P = 0;
    var BLen = 0;
    var Len = 0;
    var HB = false;
    var IBC = false;
    Result = "";
    L = Line;
    BLen = BreakStr.length;
    if (BLen > 0) {
      BC = BreakStr.charAt(0)}
     else BC = "\x00";
    Len = L.length;
    while (Len > 0) {
      P = 1;
      LQ = "\x00";
      HB = false;
      IBC = false;
      while (((P <= Len) && ((P <= MaxCol) || !IBC)) && ((LQ !== "\x00") || !HB)) {
        C = L.charAt(P - 1);
        if (C === LQ) {
          LQ = "\x00"}
         else if (C.charCodeAt() in Quotes) LQ = C;
        if (LQ !== "\x00") {
          P += 1}
         else {
          HB = (C === BC) && (BreakStr === pas.System.Copy(L,P,BLen));
          if (HB) {
            P += BLen}
           else {
            if (P >= MaxCol) IBC = $mod.CharInSet(C,BreakChars);
            P += 1;
          };
        };
      };
      Result = Result + pas.System.Copy(L,1,P - 1);
      pas.System.Delete({get: function () {
          return L;
        }, set: function (v) {
          L = v;
        }},1,P - 1);
      Len = L.length;
      if ((Len > 0) && !HB) Result = Result + BreakStr;
    };
    return Result;
  };
  this.WrapText$1 = function (Line, MaxCol) {
    var Result = "";
    Result = $mod.WrapText(Line,pas.System.sLineBreak,[" ","-","\t"],MaxCol);
    return Result;
  };
  this.IntToStr = function (Value) {
    var Result = "";
    Result = "" + Value;
    return Result;
  };
  this.TryStrToInt = function (S, res) {
    var Result = false;
    var NI = 0;
    Result = $mod.TryStrToInt$1(S,{get: function () {
        return NI;
      }, set: function (v) {
        NI = v;
      }});
    if (Result) res.set(NI);
    return Result;
  };
  this.TryStrToInt$1 = function (S, res) {
    var Result = false;
    var Radix = 10;
    var N = "";
    var J = undefined;
    N = S;
    var $tmp1 = pas.System.Copy(N,1,1);
    if ($tmp1 === "$") {
      Radix = 16}
     else if ($tmp1 === "&") {
      Radix = 8}
     else if ($tmp1 === "%") Radix = 2;
    if (Radix !== 10) pas.System.Delete({get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},1,1);
    J = parseInt(N,Radix);
    Result = !isNaN(J);
    if (Result) res.set(Math.floor(J));
    return Result;
  };
  this.StrToIntDef = function (S, aDef) {
    var Result = 0;
    var R = 0;
    if ($mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }})) {
      Result = R}
     else Result = aDef;
    return Result;
  };
  this.StrToIntDef$1 = function (S, aDef) {
    var Result = 0;
    var R = 0;
    if ($mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }})) {
      Result = R}
     else Result = aDef;
    return Result;
  };
  this.StrToInt = function (S) {
    var Result = 0;
    var R = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    Result = R;
    return Result;
  };
  this.StrToNativeInt = function (S) {
    var Result = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    return Result;
  };
  this.StrToInt64 = function (S) {
    var Result = 0;
    var N = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    Result = N;
    return Result;
  };
  this.StrToInt64Def = function (S, ADefault) {
    var Result = 0;
    if ($mod.TryStrToInt64(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = ADefault;
    return Result;
  };
  this.TryStrToInt64 = function (S, res) {
    var Result = false;
    var R = 0;
    Result = $mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }});
    if (Result) res.set(R);
    return Result;
  };
  this.StrToQWord = function (S) {
    var Result = 0;
    var N = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }}) || (N < 0)) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    Result = N;
    return Result;
  };
  this.StrToQWordDef = function (S, ADefault) {
    var Result = 0;
    if (!$mod.TryStrToQWord(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = ADefault;
    return Result;
  };
  this.TryStrToQWord = function (S, res) {
    var Result = false;
    var R = 0;
    Result = $mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }}) && (R >= 0);
    if (Result) res.set(R);
    return Result;
  };
  this.StrToUInt64 = function (S) {
    var Result = 0;
    var N = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }}) || (N < 0)) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    Result = N;
    return Result;
  };
  this.StrToUInt64Def = function (S, ADefault) {
    var Result = 0;
    if (!$mod.TryStrToUInt64(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = ADefault;
    return Result;
  };
  this.TryStrToUInt64 = function (S, res) {
    var Result = false;
    var R = 0;
    Result = $mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }}) && (R >= 0);
    if (Result) res.set(R);
    return Result;
  };
  this.StrToDWord = function (S) {
    var Result = 0;
    if (!$mod.TryStrToDWord(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    return Result;
  };
  this.StrToDWordDef = function (S, ADefault) {
    var Result = 0;
    if (!$mod.TryStrToDWord(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = ADefault;
    return Result;
  };
  this.TryStrToDWord = function (S, res) {
    var Result = false;
    var R = 0;
    Result = ($mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }}) && (R >= 0)) && (R <= 0xFFFFFFFF);
    if (Result) res.set(R);
    return Result;
  };
  var HexDigits = "0123456789ABCDEF";
  this.IntToHex = function (Value, Digits) {
    var Result = "";
    if (Digits === 0) Digits = 1;
    Result = "";
    while (Value > 0) {
      Result = HexDigits.charAt(((Value & 15) + 1) - 1) + Result;
      Value = Value >>> 4;
    };
    while (Result.length < Digits) Result = "0" + Result;
    return Result;
  };
  this.MaxCurrency = 450359962737.0495;
  this.MinCurrency = -450359962737.0496;
  this.TFloatFormat = {"0": "ffFixed", ffFixed: 0, "1": "ffGeneral", ffGeneral: 1, "2": "ffExponent", ffExponent: 2, "3": "ffNumber", ffNumber: 3, "4": "ffCurrency", ffCurrency: 4};
  var Rounds = "123456789:";
  this.FloatToDecimal = function (Value, Precision, Decimals) {
    var Result = new $mod.TFloatRec();
    var Buffer = "";
    var InfNan = "";
    var OutPos = 0;
    var error = 0;
    var N = 0;
    var L = 0;
    var C = 0;
    var GotNonZeroBeforeDot = false;
    var BeforeDot = false;
    Result.Negative = false;
    Result.Exponent = 0;
    for (C = 0; C <= 19; C++) Result.Digits[C] = "0";
    if (Value === 0) return Result;
    Buffer=Value.toPrecision(21); // Double precision;
    N = 1;
    L = Buffer.length;
    while (Buffer.charAt(N - 1) === " ") N += 1;
    Result.Negative = Buffer.charAt(N - 1) === "-";
    if (Result.Negative) {
      N += 1}
     else if (Buffer.charAt(N - 1) === "+") N += 1;
    if (L >= (N + 2)) {
      InfNan = pas.System.Copy(Buffer,N,3);
      if (InfNan === "Inf") {
        Result.Digits[0] = "\x00";
        Result.Exponent = 32767;
        return Result;
      };
      if (InfNan === "Nan") {
        Result.Digits[0] = "\x00";
        Result.Exponent = -32768;
        return Result;
      };
    };
    OutPos = 0;
    Result.Exponent = 0;
    BeforeDot = true;
    GotNonZeroBeforeDot = false;
    while ((L >= N) && (Buffer.charAt(N - 1) !== "E")) {
      if (Buffer.charAt(N - 1) === ".") {
        BeforeDot = false}
       else {
        if (BeforeDot) {
          Result.Exponent += 1;
          Result.Digits[OutPos] = Buffer.charAt(N - 1);
          if (Buffer.charAt(N - 1) !== "0") GotNonZeroBeforeDot = true;
        } else Result.Digits[OutPos] = Buffer.charAt(N - 1);
        OutPos += 1;
      };
      N += 1;
    };
    N += 1;
    if (N <= L) {
      pas.System.val$6(pas.System.Copy(Buffer,N,(L - N) + 1),{get: function () {
          return C;
        }, set: function (v) {
          C = v;
        }},{get: function () {
          return error;
        }, set: function (v) {
          error = v;
        }});
      Result.Exponent += C;
    };
    N = OutPos;
    L = 19;
    while (N < L) {
      Result.Digits[N] = "0";
      N += 1;
    };
    if ((Decimals + Result.Exponent) < Precision) {
      N = Decimals + Result.Exponent}
     else N = Precision;
    if (N >= L) N = L - 1;
    if (N === 0) {
      if (Result.Digits[0] >= "5") {
        Result.Digits[0] = "1";
        Result.Digits[1] = "\x00";
        Result.Exponent += 1;
      } else Result.Digits[0] = "\x00";
    } else if (N > 0) {
      if (Result.Digits[N] >= "5") {
        do {
          Result.Digits[N] = "\x00";
          N -= 1;
          Result.Digits[N] = Rounds.charAt(($mod.StrToInt(Result.Digits[N]) + 1) - 1);
        } while (!((N === 0) || (Result.Digits[N] < ":")));
        if (Result.Digits[0] === ":") {
          Result.Digits[0] = "1";
          Result.Exponent += 1;
        };
      } else {
        Result.Digits[N] = "0";
        while ((N > -1) && (Result.Digits[N] === "0")) {
          Result.Digits[N] = "\x00";
          N -= 1;
        };
      };
    } else Result.Digits[0] = "\x00";
    if ((Result.Digits[0] === "\x00") && !GotNonZeroBeforeDot) {
      Result.Exponent = 0;
      Result.Negative = false;
    };
    return Result;
  };
  this.FloatToStr = function (Value) {
    var Result = "";
    Result = $mod.FloatToStrF(Value,$mod.TFloatFormat.ffGeneral,15,0);
    return Result;
  };
  this.FloatToStrF = function (Value, format, Precision, Digits) {
    var Result = "";
    var DS = "";
    DS = $mod.DecimalSeparator;
    var $tmp1 = format;
    if ($tmp1 === $mod.TFloatFormat.ffGeneral) {
      Result = $impl.FormatGeneralFloat(Value,Precision,DS)}
     else if ($tmp1 === $mod.TFloatFormat.ffExponent) {
      Result = $impl.FormatExponentFloat(Value,Precision,Digits,DS)}
     else if ($tmp1 === $mod.TFloatFormat.ffFixed) {
      Result = $impl.FormatFixedFloat(Value,Digits,DS)}
     else if ($tmp1 === $mod.TFloatFormat.ffNumber) {
      Result = $impl.FormatNumberFloat(Value,Digits,DS,$mod.ThousandSeparator)}
     else if ($tmp1 === $mod.TFloatFormat.ffCurrency) Result = $impl.FormatNumberCurrency(Value * 10000,Digits,DS,$mod.ThousandSeparator);
    if (((format !== $mod.TFloatFormat.ffCurrency) && (Result.length > 1)) && (Result.charAt(0) === "-")) $impl.RemoveLeadingNegativeSign({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},DS);
    return Result;
  };
  this.TryStrToFloat = function (S, res) {
    var Result = false;
    var J = undefined;
    var N = "";
    N = S;
    if ($mod.ThousandSeparator !== "") N = $mod.StringReplace(N,$mod.ThousandSeparator,"",rtl.createSet($mod.TStringReplaceFlag.rfReplaceAll));
    if ($mod.DecimalSeparator !== ".") N = $mod.StringReplace(N,$mod.DecimalSeparator,".",{});
    J = parseFloat(N);
    Result = !isNaN(J);
    if (Result) res.set(rtl.getNumber(J));
    return Result;
  };
  this.StrToFloatDef = function (S, aDef) {
    var Result = 0.0;
    if (!$mod.TryStrToFloat(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = aDef;
    return Result;
  };
  this.StrToFloat = function (S) {
    var Result = 0.0;
    if (!$mod.TryStrToFloat(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidFloat,[S]]);
    return Result;
  };
  var MaxPrecision = 18;
  this.FormatFloat = function (Fmt, aValue) {
    var Result = "";
    var E = 0.0;
    var FV = new $mod.TFloatRec();
    var Section = "";
    var SectionLength = 0;
    var ThousandSep = false;
    var IsScientific = false;
    var DecimalPos = 0;
    var FirstDigit = 0;
    var LastDigit = 0;
    var RequestedDigits = 0;
    var ExpSize = 0;
    var Available = 0;
    var Current = 0;
    var PadZeroes = 0;
    var DistToDecimal = 0;
    function InitVars() {
      E = aValue;
      Section = "";
      SectionLength = 0;
      ThousandSep = false;
      IsScientific = false;
      DecimalPos = 0;
      FirstDigit = 2147483647;
      LastDigit = 0;
      RequestedDigits = 0;
      ExpSize = 0;
      Available = -1;
    };
    function ToResult(AChar) {
      Result = Result + AChar;
    };
    function AddToResult(AStr) {
      Result = Result + AStr;
    };
    function WriteDigit(ADigit) {
      if (ADigit === "\x00") return;
      DistToDecimal -= 1;
      if (DistToDecimal === -1) {
        AddToResult($mod.DecimalSeparator);
        ToResult(ADigit);
      } else {
        ToResult(ADigit);
        if ((ThousandSep && ((DistToDecimal % 3) === 0)) && (DistToDecimal > 1)) AddToResult($mod.ThousandSeparator);
      };
    };
    function GetDigit() {
      var Result = "";
      Result = "\x00";
      if (Current <= Available) {
        Result = FV.Digits[Current];
        Current += 1;
      } else if (DistToDecimal <= LastDigit) {
        DistToDecimal -= 1}
       else Result = "0";
      return Result;
    };
    function CopyDigit() {
      if (PadZeroes === 0) {
        WriteDigit(GetDigit())}
       else if (PadZeroes < 0) {
        PadZeroes += 1;
        if (DistToDecimal <= FirstDigit) {
          WriteDigit("0")}
         else DistToDecimal -= 1;
      } else {
        while (PadZeroes > 0) {
          WriteDigit(GetDigit());
          PadZeroes -= 1;
        };
        WriteDigit(GetDigit());
      };
    };
    function GetSections(SP) {
      var Result = 0;
      var FL = 0;
      var i = 0;
      var C = "";
      var Q = "";
      var inQuote = false;
      Result = 1;
      SP.get()[1] = -1;
      SP.get()[2] = -1;
      SP.get()[3] = -1;
      inQuote = false;
      Q = "\x00";
      i = 1;
      FL = Fmt.length;
      while (i <= FL) {
        C = Fmt.charAt(i - 1);
        var $tmp1 = C;
        if ($tmp1 === ";") {
          if (!inQuote) {
            if (Result > 3) throw $mod.Exception.$create("Create$1",["Invalid float format"]);
            SP.get()[Result] = i + 1;
            Result += 1;
          };
        } else if (($tmp1 === '"') || ($tmp1 === "'")) {
          if (inQuote) {
            inQuote = C !== Q}
           else {
            inQuote = true;
            Q = C;
          };
        };
        i += 1;
      };
      if (SP.get()[Result] === -1) SP.get()[Result] = FL + 1;
      return Result;
    };
    function AnalyzeFormat() {
      var I = 0;
      var Len = 0;
      var Q = "";
      var C = "";
      var InQuote = false;
      Len = Section.length;
      I = 1;
      InQuote = false;
      Q = "\x00";
      while (I <= Len) {
        C = Section.charAt(I - 1);
        if (C.charCodeAt() in rtl.createSet(34,39)) {
          if (InQuote) {
            InQuote = C !== Q}
           else {
            InQuote = true;
            Q = C;
          };
        } else if (!InQuote) {
          var $tmp1 = C;
          if ($tmp1 === ".") {
            if (DecimalPos === 0) DecimalPos = RequestedDigits + 1}
           else if ($tmp1 === ",") {
            ThousandSep = $mod.ThousandSeparator !== "\x00"}
           else if (($tmp1 === "e") || ($tmp1 === "E")) {
            I += 1;
            if (I < Len) {
              C = Section.charAt(I - 1);
              IsScientific = C.charCodeAt() in rtl.createSet(45,43);
              if (IsScientific) while ((I < Len) && (Section.charAt((I + 1) - 1) === "0")) {
                ExpSize += 1;
                I += 1;
              };
              if (ExpSize > 4) ExpSize = 4;
            };
          } else if ($tmp1 === "#") {
            RequestedDigits += 1}
           else if ($tmp1 === "0") {
            if (RequestedDigits < FirstDigit) FirstDigit = RequestedDigits + 1;
            RequestedDigits += 1;
            LastDigit = RequestedDigits + 1;
          };
        };
        I += 1;
      };
      if (DecimalPos === 0) DecimalPos = RequestedDigits + 1;
      LastDigit = DecimalPos - LastDigit;
      if (LastDigit > 0) LastDigit = 0;
      FirstDigit = DecimalPos - FirstDigit;
      if (FirstDigit < 0) FirstDigit = 0;
    };
    function ValueOutSideScope() {
      var Result = false;
      Result = (((FV.Exponent >= 18) && !IsScientific) || (FV.Exponent === 0x7FF)) || (FV.Exponent === 0x800);
      return Result;
    };
    function CalcRunVars() {
      var D = 0;
      var P = 0;
      if (IsScientific) {
        P = RequestedDigits;
        D = 9999;
      } else {
        P = 18;
        D = (RequestedDigits - DecimalPos) + 1;
      };
      FV = new $mod.TFloatRec($mod.FloatToDecimal(aValue,P,D));
      DistToDecimal = DecimalPos - 1;
      if (IsScientific) {
        PadZeroes = 0}
       else {
        PadZeroes = FV.Exponent - (DecimalPos - 1);
        if (PadZeroes >= 0) DistToDecimal = FV.Exponent;
      };
      Available = -1;
      while ((Available < 18) && (FV.Digits[Available + 1] !== "\x00")) Available += 1;
    };
    function FormatExponent(ASign, aExponent) {
      var Result = "";
      Result = $mod.IntToStr(aExponent);
      Result = pas.System.StringOfChar("0",ExpSize - Result.length) + Result;
      if (aExponent < 0) {
        Result = "-" + Result}
       else if ((aExponent > 0) && (ASign === "+")) Result = ASign + Result;
      return Result;
    };
    var I = 0;
    var S = 0;
    var C = "";
    var Q = "";
    var PA = [];
    var InLiteral = false;
    PA = rtl.arraySetLength(PA,0,4);
    Result = "";
    InitVars();
    if (E > 0) {
      S = 1}
     else if (E < 0) {
      S = 2}
     else S = 3;
    PA[0] = 0;
    I = GetSections({get: function () {
        return PA;
      }, set: function (v) {
        PA = v;
      }});
    if ((I < S) || ((PA[S] - PA[S - 1]) === 0)) S = 1;
    SectionLength = (PA[S] - PA[S - 1]) - 1;
    Section = pas.System.Copy(Fmt,PA[S - 1] + 1,SectionLength);
    Section = rtl.strSetLength(Section,SectionLength);
    AnalyzeFormat();
    CalcRunVars();
    if ((SectionLength === 0) || ValueOutSideScope()) {
      Section=E.toPrecision(15);
      Result = Section;
    };
    I = 1;
    Current = 0;
    Q = " ";
    InLiteral = false;
    if (FV.Negative && (S === 1)) ToResult("-");
    while (I <= SectionLength) {
      C = Section.charAt(I - 1);
      if (C.charCodeAt() in rtl.createSet(34,39)) {
        if (InLiteral) {
          InLiteral = C !== Q}
         else {
          InLiteral = true;
          Q = C;
        };
      } else if (InLiteral) {
        ToResult(C)}
       else {
        var $tmp1 = C;
        if (($tmp1 === "0") || ($tmp1 === "#")) {
          CopyDigit()}
         else if (($tmp1 === ".") || ($tmp1 === ",")) {}
        else if (($tmp1 === "e") || ($tmp1 === "E")) {
          ToResult(C);
          I += 1;
          if (I <= Section.length) {
            C = Section.charAt(I - 1);
            if (C.charCodeAt() in rtl.createSet(43,45)) {
              AddToResult(FormatExponent(C,(FV.Exponent - DecimalPos) + 1));
              while ((I < SectionLength) && (Section.charAt((I + 1) - 1) === "0")) I += 1;
            };
          };
        } else {
          ToResult(C);
        };
      };
      I += 1;
    };
    return Result;
  };
  this.TrueBoolStrs = [];
  this.FalseBoolStrs = [];
  this.StrToBool = function (S) {
    var Result = false;
    if (!$mod.TryStrToBool(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidBoolean,[S]]);
    return Result;
  };
  this.BoolToStr = function (B, UseBoolStrs) {
    var Result = "";
    if (UseBoolStrs) {
      $impl.CheckBoolStrs();
      if (B) {
        Result = $mod.TrueBoolStrs[0]}
       else Result = $mod.FalseBoolStrs[0];
    } else if (B) {
      Result = "-1"}
     else Result = "0";
    return Result;
  };
  this.BoolToStr$1 = function (B, TrueS, FalseS) {
    var Result = "";
    if (B) {
      Result = TrueS}
     else Result = FalseS;
    return Result;
  };
  this.StrToBoolDef = function (S, Default) {
    var Result = false;
    if (!$mod.TryStrToBool(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = Default;
    return Result;
  };
  this.TryStrToBool = function (S, Value) {
    var Result = false;
    var Temp = "";
    var I = 0;
    var D = 0.0;
    var Code = 0;
    Temp = $mod.UpperCase(S);
    pas.System.val$8(Temp,{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return Code;
      }, set: function (v) {
        Code = v;
      }});
    Result = true;
    if (Code === 0) {
      Value.set(D !== 0.0)}
     else {
      $impl.CheckBoolStrs();
      for (var $l1 = 0, $end2 = rtl.length($mod.TrueBoolStrs) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (Temp === $mod.UpperCase($mod.TrueBoolStrs[I])) {
          Value.set(true);
          return Result;
        };
      };
      for (var $l3 = 0, $end4 = rtl.length($mod.FalseBoolStrs) - 1; $l3 <= $end4; $l3++) {
        I = $l3;
        if (Temp === $mod.UpperCase($mod.FalseBoolStrs[I])) {
          Value.set(false);
          return Result;
        };
      };
      Result = false;
    };
    return Result;
  };
  this.ConfigExtension = ".cfg";
  this.SysConfigDir = "";
  $mod.$rtti.$ProcVar("TOnGetEnvironmentVariable",{procsig: rtl.newTIProcSig([["EnvVar",rtl.string,2]],rtl.string)});
  $mod.$rtti.$ProcVar("TOnGetEnvironmentString",{procsig: rtl.newTIProcSig([["Index",rtl.longint]],rtl.string)});
  $mod.$rtti.$ProcVar("TOnGetEnvironmentVariableCount",{procsig: rtl.newTIProcSig(null,rtl.longint)});
  this.OnGetEnvironmentVariable = null;
  this.OnGetEnvironmentString = null;
  this.OnGetEnvironmentVariableCount = null;
  this.GetEnvironmentVariable = function (EnvVar) {
    var Result = "";
    if ($mod.OnGetEnvironmentVariable != null) {
      Result = $mod.OnGetEnvironmentVariable(EnvVar)}
     else Result = "";
    return Result;
  };
  this.GetEnvironmentVariableCount = function () {
    var Result = 0;
    if ($mod.OnGetEnvironmentVariableCount != null) {
      Result = $mod.OnGetEnvironmentVariableCount()}
     else Result = 0;
    return Result;
  };
  this.GetEnvironmentString = function (Index) {
    var Result = "";
    if ($mod.OnGetEnvironmentString != null) {
      Result = $mod.OnGetEnvironmentString(Index)}
     else Result = "";
    return Result;
  };
  this.ShowException = function (ExceptObject, ExceptAddr) {
    var S = "";
    S = "Application raised an exception " + ExceptObject.$classname;
    if ($mod.Exception.isPrototypeOf(ExceptObject)) S = (S + " : ") + ExceptObject.fMessage;
    window.alert(S);
    if (ExceptAddr === null) ;
  };
  this.Abort = function () {
    throw $mod.EAbort.$create("Create$1",[$impl.SAbortError]);
  };
  this.TEventType = {"0": "etCustom", etCustom: 0, "1": "etInfo", etInfo: 1, "2": "etWarning", etWarning: 2, "3": "etError", etError: 3, "4": "etDebug", etDebug: 4};
  $mod.$rtti.$Enum("TEventType",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TEventType});
  $mod.$rtti.$Set("TEventTypes",{comptype: $mod.$rtti["TEventType"]});
  this.TSystemTime = function (s) {
    if (s) {
      this.Year = s.Year;
      this.Month = s.Month;
      this.Day = s.Day;
      this.DayOfWeek = s.DayOfWeek;
      this.Hour = s.Hour;
      this.Minute = s.Minute;
      this.Second = s.Second;
      this.MilliSecond = s.MilliSecond;
    } else {
      this.Year = 0;
      this.Month = 0;
      this.Day = 0;
      this.DayOfWeek = 0;
      this.Hour = 0;
      this.Minute = 0;
      this.Second = 0;
      this.MilliSecond = 0;
    };
    this.$equal = function (b) {
      return (this.Year === b.Year) && ((this.Month === b.Month) && ((this.Day === b.Day) && ((this.DayOfWeek === b.DayOfWeek) && ((this.Hour === b.Hour) && ((this.Minute === b.Minute) && ((this.Second === b.Second) && (this.MilliSecond === b.MilliSecond)))))));
    };
  };
  $mod.$rtti.$Record("TSystemTime",{}).addFields("Year",rtl.word,"Month",rtl.word,"Day",rtl.word,"DayOfWeek",rtl.word,"Hour",rtl.word,"Minute",rtl.word,"Second",rtl.word,"MilliSecond",rtl.word);
  this.TTimeStamp = function (s) {
    if (s) {
      this.Time = s.Time;
      this.Date = s.Date;
    } else {
      this.Time = 0;
      this.Date = 0;
    };
    this.$equal = function (b) {
      return (this.Time === b.Time) && (this.Date === b.Date);
    };
  };
  $mod.$rtti.$Record("TTimeStamp",{}).addFields("Time",rtl.longint,"Date",rtl.longint);
  this.TimeSeparator = ":";
  this.DateSeparator = "-";
  this.ShortDateFormat = "yyyy-mm-dd";
  this.LongDateFormat = "ddd, yyyy-mm-dd";
  this.ShortTimeFormat = "hh:nn";
  this.LongTimeFormat = "hh:nn:ss";
  this.DecimalSeparator = ".";
  this.ThousandSeparator = "";
  this.TimeAMString = "AM";
  this.TimePMString = "PM";
  this.HoursPerDay = 24;
  this.MinsPerHour = 60;
  this.SecsPerMin = 60;
  this.MSecsPerSec = 1000;
  this.MinsPerDay = 24 * 60;
  this.SecsPerDay = 1440 * 60;
  this.MSecsPerDay = 86400 * 1000;
  this.MaxDateTime = 2958465.99999999;
  this.MinDateTime = -693593.99999999;
  this.JulianEpoch = -2415018.5;
  this.UnixEpoch = -2415018.5 + 2440587.5;
  this.DateDelta = 693594;
  this.UnixDateDelta = 25569;
  this.MonthDays = [[31,28,31,30,31,30,31,31,30,31,30,31],[31,29,31,30,31,30,31,31,30,31,30,31]];
  this.ShortMonthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
  this.LongMonthNames = ["January","February","March","April","May","June","July","August","September","October","November","December"];
  this.ShortDayNames = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
  this.LongDayNames = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
  rtl.createClass($mod,"TFormatSettings",pas.System.TObject,function () {
    this.GetCurrencyDecimals = function () {
      var Result = 0;
      Result = $mod.CurrencyDecimals;
      return Result;
    };
    this.GetCurrencyFormat = function () {
      var Result = 0;
      Result = $mod.CurrencyFormat;
      return Result;
    };
    this.GetCurrencyString = function () {
      var Result = "";
      Result = $mod.CurrencyString;
      return Result;
    };
    this.GetDateSeparator = function () {
      var Result = "";
      Result = $mod.DateSeparator;
      return Result;
    };
    this.GetDecimalSeparator = function () {
      var Result = "";
      Result = $mod.DecimalSeparator;
      return Result;
    };
    this.GetLongDateFormat = function () {
      var Result = "";
      Result = $mod.LongDateFormat;
      return Result;
    };
    this.GetLongDayNames = function () {
      var Result = rtl.arraySetLength(null,"",7);
      Result = $mod.LongDayNames.slice(0);
      return Result;
    };
    this.GetLongMonthNames = function () {
      var Result = rtl.arraySetLength(null,"",12);
      Result = $mod.LongMonthNames.slice(0);
      return Result;
    };
    this.GetLongTimeFormat = function () {
      var Result = "";
      Result = $mod.LongTimeFormat;
      return Result;
    };
    this.GetNegCurrFormat = function () {
      var Result = 0;
      Result = $mod.NegCurrFormat;
      return Result;
    };
    this.GetShortDateFormat = function () {
      var Result = "";
      Result = $mod.ShortDateFormat;
      return Result;
    };
    this.GetShortDayNames = function () {
      var Result = rtl.arraySetLength(null,"",7);
      Result = $mod.ShortDayNames.slice(0);
      return Result;
    };
    this.GetShortMonthNames = function () {
      var Result = rtl.arraySetLength(null,"",12);
      Result = $mod.ShortMonthNames.slice(0);
      return Result;
    };
    this.GetShortTimeFormat = function () {
      var Result = "";
      Result = $mod.ShortTimeFormat;
      return Result;
    };
    this.GetThousandSeparator = function () {
      var Result = "";
      Result = $mod.ThousandSeparator;
      return Result;
    };
    this.GetTimeAMString = function () {
      var Result = "";
      Result = $mod.TimeAMString;
      return Result;
    };
    this.GetTimePMString = function () {
      var Result = "";
      Result = $mod.TimePMString;
      return Result;
    };
    this.GetTimeSeparator = function () {
      var Result = "";
      Result = $mod.TimeSeparator;
      return Result;
    };
    this.SetCurrencyFormat = function (AValue) {
      $mod.CurrencyFormat = AValue;
    };
    this.SetCurrencyString = function (AValue) {
      $mod.CurrencyString = AValue;
    };
    this.SetDateSeparator = function (Value) {
      $mod.DateSeparator = Value;
    };
    this.SetDecimalSeparator = function (Value) {
      $mod.DecimalSeparator = Value;
    };
    this.SetLongDateFormat = function (Value) {
      $mod.LongDateFormat = Value;
    };
    this.SetLongDayNames = function (AValue) {
      $mod.LongDayNames = AValue.slice(0);
    };
    this.SetLongMonthNames = function (AValue) {
      $mod.LongMonthNames = AValue.slice(0);
    };
    this.SetLongTimeFormat = function (Value) {
      $mod.LongTimeFormat = Value;
    };
    this.SetNegCurrFormat = function (AValue) {
      $mod.NegCurrFormat = AValue;
    };
    this.SetShortDateFormat = function (Value) {
      $mod.ShortDateFormat = Value;
    };
    this.SetShortDayNames = function (AValue) {
      $mod.ShortDayNames = AValue.slice(0);
    };
    this.SetShortMonthNames = function (AValue) {
      $mod.ShortMonthNames = AValue.slice(0);
    };
    this.SetShortTimeFormat = function (Value) {
      $mod.ShortTimeFormat = Value;
    };
    this.SetCurrencyDecimals = function (AValue) {
      $mod.CurrencyDecimals = AValue;
    };
    this.SetThousandSeparator = function (Value) {
      $mod.ThousandSeparator = Value;
    };
    this.SetTimeAMString = function (Value) {
      $mod.TimeAMString = Value;
    };
    this.SetTimePMString = function (Value) {
      $mod.TimePMString = Value;
    };
    this.SetTimeSeparator = function (Value) {
      $mod.TimeSeparator = Value;
    };
  });
  this.FormatSettings = null;
  this.TwoDigitYearCenturyWindow = 50;
  this.DateTimeToJSDate = function (aDateTime) {
    var Result = null;
    var Y = 0;
    var M = 0;
    var D = 0;
    var h = 0;
    var n = 0;
    var s = 0;
    var z = 0;
    $mod.DecodeDate(pas.System.Trunc(aDateTime),{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    $mod.DecodeTime(pas.System.Frac(aDateTime),{get: function () {
        return h;
      }, set: function (v) {
        h = v;
      }},{get: function () {
        return n;
      }, set: function (v) {
        n = v;
      }},{get: function () {
        return s;
      }, set: function (v) {
        s = v;
      }},{get: function () {
        return z;
      }, set: function (v) {
        z = v;
      }});
    Result = new Date(Y,M,D,h,n,s,z);
    return Result;
  };
  this.JSDateToDateTime = function (aDate) {
    var Result = 0.0;
    Result = $mod.EncodeDate(aDate.getFullYear(),aDate.getMonth() + 1,aDate.getDate()) + $mod.EncodeTime(aDate.getHours(),aDate.getMinutes(),aDate.getSeconds(),aDate.getMilliseconds());
    return Result;
  };
  this.DateTimeToTimeStamp = function (DateTime) {
    var Result = new $mod.TTimeStamp();
    var D = 0.0;
    D = DateTime * 86400000;
    if (D < 0) {
      D = D - 0.5}
     else D = D + 0.5;
    Result.Time = pas.System.Trunc(Math.abs(pas.System.Trunc(D)) % 86400000);
    Result.Date = 693594 + Math.floor(pas.System.Trunc(D) / 86400000);
    return Result;
  };
  this.TimeStampToDateTime = function (TimeStamp) {
    var Result = 0.0;
    Result = $mod.ComposeDateTime(TimeStamp.Date - 693594,TimeStamp.Time / 86400000);
    return Result;
  };
  this.MSecsToTimeStamp = function (MSecs) {
    var Result = new $mod.TTimeStamp();
    Result.Date = pas.System.Trunc(MSecs / 86400000);
    MSecs = MSecs - (Result.Date * 86400000);
    Result.Time = Math.round(MSecs);
    return Result;
  };
  this.TimeStampToMSecs = function (TimeStamp) {
    var Result = 0;
    Result = TimeStamp.Time + (TimeStamp.Date * 86400000);
    return Result;
  };
  this.TryEncodeDate = function (Year, Month, Day, date) {
    var Result = false;
    var c = 0;
    var ya = 0;
    Result = (((((Year > 0) && (Year < 10000)) && (Month >= 1)) && (Month <= 12)) && (Day > 0)) && (Day <= $mod.MonthDays[+$mod.IsLeapYear(Year)][Month - 1]);
    if (Result) {
      if (Month > 2) {
        Month -= 3}
       else {
        Month += 9;
        Year -= 1;
      };
      c = Math.floor(Year / 100);
      ya = Year - (100 * c);
      date.set(((((146097 * c) >>> 2) + ((1461 * ya) >>> 2)) + Math.floor(((153 * Month) + 2) / 5)) + Day);
      date.set(date.get() - 693900);
    };
    return Result;
  };
  this.TryEncodeTime = function (Hour, Min, Sec, MSec, Time) {
    var Result = false;
    Result = (((Hour < 24) && (Min < 60)) && (Sec < 60)) && (MSec < 1000);
    if (Result) Time.set(((((Hour * 3600000) + (Min * 60000)) + (Sec * 1000)) + MSec) / 86400000);
    return Result;
  };
  this.EncodeDate = function (Year, Month, Day) {
    var Result = 0.0;
    if (!$mod.TryEncodeDate(Year,Month,Day,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",["%s-%s-%s is not a valid date specification",[$mod.IntToStr(Year),$mod.IntToStr(Month),$mod.IntToStr(Day)]]);
    return Result;
  };
  this.EncodeTime = function (Hour, Minute, Second, MilliSecond) {
    var Result = 0.0;
    if (!$mod.TryEncodeTime(Hour,Minute,Second,MilliSecond,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",["%s:%s:%s.%s is not a valid time specification",[$mod.IntToStr(Hour),$mod.IntToStr(Minute),$mod.IntToStr(Second),$mod.IntToStr(MilliSecond)]]);
    return Result;
  };
  this.ComposeDateTime = function (date, Time) {
    var Result = 0.0;
    if (date < 0) {
      Result = pas.System.Trunc(date) - Math.abs(pas.System.Frac(Time))}
     else Result = pas.System.Trunc(date) + Math.abs(pas.System.Frac(Time));
    return Result;
  };
  this.DecodeDate = function (date, Year, Month, Day) {
    var ly = 0;
    var ld = 0;
    var lm = 0;
    var j = 0;
    if (date <= -693594) {
      Year.set(0);
      Month.set(0);
      Day.set(0);
    } else {
      if (date > 0) {
        date = date + (1 / (86400000 * 2))}
       else date = date - (1 / (86400000 * 2));
      if (date > $mod.MaxDateTime) date = $mod.MaxDateTime;
      j = ((pas.System.Trunc(date) + 693900) << 2) - 1;
      ly = Math.floor(j / 146097);
      j = j - (146097 * ly);
      ld = j >>> 2;
      j = Math.floor(((ld << 2) + 3) / 1461);
      ld = (((ld << 2) + 7) - (1461 * j)) >>> 2;
      lm = Math.floor(((5 * ld) - 3) / 153);
      ld = Math.floor((((5 * ld) + 2) - (153 * lm)) / 5);
      ly = (100 * ly) + j;
      if (lm < 10) {
        lm += 3}
       else {
        lm -= 9;
        ly += 1;
      };
      Year.set(ly);
      Month.set(lm);
      Day.set(ld);
    };
  };
  this.DecodeDateFully = function (DateTime, Year, Month, Day, DOW) {
    var Result = false;
    $mod.DecodeDate(DateTime,Year,Month,Day);
    DOW.set($mod.DayOfWeek(DateTime));
    Result = $mod.IsLeapYear(Year.get());
    return Result;
  };
  this.DecodeTime = function (Time, Hour, Minute, Second, MilliSecond) {
    var l = 0;
    l = $mod.DateTimeToTimeStamp(Time).Time;
    Hour.set(Math.floor(l / 3600000));
    l = l % 3600000;
    Minute.set(Math.floor(l / 60000));
    l = l % 60000;
    Second.set(Math.floor(l / 1000));
    l = l % 1000;
    MilliSecond.set(l);
  };
  this.DateTimeToSystemTime = function (DateTime, SystemTime) {
    $mod.DecodeDateFully(DateTime,{p: SystemTime.get(), get: function () {
        return this.p.Year;
      }, set: function (v) {
        this.p.Year = v;
      }},{p: SystemTime.get(), get: function () {
        return this.p.Month;
      }, set: function (v) {
        this.p.Month = v;
      }},{p: SystemTime.get(), get: function () {
        return this.p.Day;
      }, set: function (v) {
        this.p.Day = v;
      }},{p: SystemTime.get(), get: function () {
        return this.p.DayOfWeek;
      }, set: function (v) {
        this.p.DayOfWeek = v;
      }});
    $mod.DecodeTime(DateTime,{p: SystemTime.get(), get: function () {
        return this.p.Hour;
      }, set: function (v) {
        this.p.Hour = v;
      }},{p: SystemTime.get(), get: function () {
        return this.p.Minute;
      }, set: function (v) {
        this.p.Minute = v;
      }},{p: SystemTime.get(), get: function () {
        return this.p.Second;
      }, set: function (v) {
        this.p.Second = v;
      }},{p: SystemTime.get(), get: function () {
        return this.p.MilliSecond;
      }, set: function (v) {
        this.p.MilliSecond = v;
      }});
    SystemTime.get().DayOfWeek -= 1;
  };
  this.SystemTimeToDateTime = function (SystemTime) {
    var Result = 0.0;
    Result = $mod.ComposeDateTime($impl.DoEncodeDate(SystemTime.Year,SystemTime.Month,SystemTime.Day),$impl.DoEncodeTime(SystemTime.Hour,SystemTime.Minute,SystemTime.Second,SystemTime.MilliSecond));
    return Result;
  };
  this.DayOfWeek = function (DateTime) {
    var Result = 0;
    Result = 1 + ((pas.System.Trunc(DateTime) - 1) % 7);
    if (Result <= 0) Result += 7;
    return Result;
  };
  this.Date = function () {
    var Result = 0.0;
    Result = pas.System.Trunc($mod.Now());
    return Result;
  };
  this.Time = function () {
    var Result = 0.0;
    Result = $mod.Now() - $mod.Date();
    return Result;
  };
  this.Now = function () {
    var Result = 0.0;
    Result = $mod.JSDateToDateTime(new Date());
    return Result;
  };
  this.IncMonth = function (DateTime, NumberOfMonths) {
    var Result = 0.0;
    var Year = 0;
    var Month = 0;
    var Day = 0;
    $mod.DecodeDate(DateTime,{get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }});
    $mod.IncAMonth({get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }},NumberOfMonths);
    Result = $mod.ComposeDateTime($impl.DoEncodeDate(Year,Month,Day),DateTime);
    return Result;
  };
  this.IncAMonth = function (Year, Month, Day, NumberOfMonths) {
    var TempMonth = 0;
    var S = 0;
    if (NumberOfMonths >= 0) {
      S = 1}
     else S = -1;
    Year.set(Year.get() + Math.floor(NumberOfMonths / 12));
    TempMonth = (Month.get() + (NumberOfMonths % 12)) - 1;
    if ((TempMonth > 11) || (TempMonth < 0)) {
      TempMonth -= S * 12;
      Year.set(Year.get() + S);
    };
    Month.set(TempMonth + 1);
    if (Day.get() > $mod.MonthDays[+$mod.IsLeapYear(Year.get())][Month.get() - 1]) Day.set($mod.MonthDays[+$mod.IsLeapYear(Year.get())][Month.get() - 1]);
  };
  this.IsLeapYear = function (Year) {
    var Result = false;
    Result = ((Year % 4) === 0) && (((Year % 100) !== 0) || ((Year % 400) === 0));
    return Result;
  };
  this.DateToStr = function (date) {
    var Result = "";
    Result = $mod.FormatDateTime("ddddd",date);
    return Result;
  };
  this.TimeToStr = function (Time) {
    var Result = "";
    Result = $mod.FormatDateTime("tt",Time);
    return Result;
  };
  this.DateTimeToStr = function (DateTime, ForceTimeIfZero) {
    var Result = "";
    Result = $mod.FormatDateTime($impl.DateTimeToStrFormat[+ForceTimeIfZero],DateTime);
    return Result;
  };
  this.StrToDate = function (S) {
    var Result = 0.0;
    Result = $mod.StrToDate$2(S,$mod.ShortDateFormat,"\x00");
    return Result;
  };
  this.StrToDate$1 = function (S, separator) {
    var Result = 0.0;
    Result = $mod.StrToDate$2(S,$mod.ShortDateFormat,separator);
    return Result;
  };
  this.StrToDate$2 = function (S, useformat, separator) {
    var Result = 0.0;
    var MSg = "";
    Result = $impl.IntStrToDate({get: function () {
        return MSg;
      }, set: function (v) {
        MSg = v;
      }},S,useformat,separator);
    if (MSg !== "") throw $mod.EConvertError.$create("Create$1",[MSg]);
    return Result;
  };
  this.StrToTime = function (S) {
    var Result = 0.0;
    Result = $mod.StrToTime$1(S,$mod.TimeSeparator);
    return Result;
  };
  this.StrToTime$1 = function (S, separator) {
    var Result = 0.0;
    var Msg = "";
    Result = $impl.IntStrToTime({get: function () {
        return Msg;
      }, set: function (v) {
        Msg = v;
      }},S,S.length,separator);
    if (Msg !== "") throw $mod.EConvertError.$create("Create$1",[Msg]);
    return Result;
  };
  this.StrToDateTime = function (S) {
    var Result = 0.0;
    var TimeStr = "";
    var DateStr = "";
    var PartsFound = 0;
    PartsFound = $impl.SplitDateTimeStr(S,{get: function () {
        return DateStr;
      }, set: function (v) {
        DateStr = v;
      }},{get: function () {
        return TimeStr;
      }, set: function (v) {
        TimeStr = v;
      }});
    var $tmp1 = PartsFound;
    if ($tmp1 === 0) {
      Result = $mod.StrToDate("")}
     else if ($tmp1 === 1) {
      if (DateStr.length > 0) {
        Result = $mod.StrToDate$2(DateStr,$mod.ShortDateFormat,$mod.DateSeparator)}
       else Result = $mod.StrToTime(TimeStr)}
     else if ($tmp1 === 2) Result = $mod.ComposeDateTime($mod.StrToDate$2(DateStr,$mod.ShortDateFormat,$mod.DateSeparator),$mod.StrToTime(TimeStr));
    return Result;
  };
  this.FormatDateTime = function (FormatStr, DateTime) {
    var Result = "";
    function StoreStr(APos, Len) {
      Result = Result + pas.System.Copy(FormatStr,APos,Len);
    };
    function StoreString(AStr) {
      Result = Result + AStr;
    };
    function StoreInt(Value, Digits) {
      var S = "";
      S = $mod.IntToStr(Value);
      while (S.length < Digits) S = "0" + S;
      StoreString(S);
    };
    var Year = 0;
    var Month = 0;
    var Day = 0;
    var DayOfWeek = 0;
    var Hour = 0;
    var Minute = 0;
    var Second = 0;
    var MilliSecond = 0;
    function StoreFormat(FormatStr, Nesting, TimeFlag) {
      var Token = "";
      var lastformattoken = "";
      var prevlasttoken = "";
      var Count = 0;
      var Clock12 = false;
      var tmp = 0;
      var isInterval = false;
      var P = 0;
      var FormatCurrent = 0;
      var FormatEnd = 0;
      if (Nesting > 1) return;
      FormatCurrent = 1;
      FormatEnd = FormatStr.length;
      Clock12 = false;
      isInterval = false;
      P = 1;
      while (P <= FormatEnd) {
        Token = FormatStr.charAt(P - 1);
        var $tmp1 = Token;
        if (($tmp1 === "'") || ($tmp1 === '"')) {
          P += 1;
          while ((P < FormatEnd) && (FormatStr.charAt(P - 1) !== Token)) P += 1;
        } else if (($tmp1 === "A") || ($tmp1 === "a")) {
          if ((($mod.CompareText(pas.System.Copy(FormatStr,P,3),"A\/P") === 0) || ($mod.CompareText(pas.System.Copy(FormatStr,P,4),"AMPM") === 0)) || ($mod.CompareText(pas.System.Copy(FormatStr,P,5),"AM\/PM") === 0)) {
            Clock12 = true;
            break;
          };
        };
        P += 1;
      };
      Token = "ÿ";
      lastformattoken = " ";
      prevlasttoken = "H";
      while (FormatCurrent <= FormatEnd) {
        Token = $mod.UpperCase(FormatStr.charAt(FormatCurrent - 1)).charAt(0);
        Count = 1;
        P = FormatCurrent + 1;
        var $tmp2 = Token;
        if (($tmp2 === "'") || ($tmp2 === '"')) {
          while ((P < FormatEnd) && (FormatStr.charAt(P - 1) !== Token)) P += 1;
          P += 1;
          Count = P - FormatCurrent;
          StoreStr(FormatCurrent + 1,Count - 2);
        } else if ($tmp2 === "A") {
          if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,4),"AMPM") === 0) {
            Count = 4;
            if (Hour < 12) {
              StoreString($mod.TimeAMString)}
             else StoreString($mod.TimePMString);
          } else if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,5),"AM\/PM") === 0) {
            Count = 5;
            if (Hour < 12) {
              StoreStr(FormatCurrent,2)}
             else StoreStr(FormatCurrent + 3,2);
          } else if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,3),"A\/P") === 0) {
            Count = 3;
            if (Hour < 12) {
              StoreStr(FormatCurrent,1)}
             else StoreStr(FormatCurrent + 2,1);
          } else throw $mod.EConvertError.$create("Create$1",["Illegal character in format string"]);
        } else if ($tmp2 === "\/") {
          StoreString($mod.DateSeparator);
        } else if ($tmp2 === ":") {
          StoreString($mod.TimeSeparator)}
         else if ((((((((((($tmp2 === " ") || ($tmp2 === "C")) || ($tmp2 === "D")) || ($tmp2 === "H")) || ($tmp2 === "M")) || ($tmp2 === "N")) || ($tmp2 === "S")) || ($tmp2 === "T")) || ($tmp2 === "Y")) || ($tmp2 === "Z")) || ($tmp2 === "F")) {
          while ((P <= FormatEnd) && ($mod.UpperCase(FormatStr.charAt(P - 1)) === Token)) P += 1;
          Count = P - FormatCurrent;
          var $tmp3 = Token;
          if ($tmp3 === " ") {
            StoreStr(FormatCurrent,Count)}
           else if ($tmp3 === "Y") {
            if (Count > 2) {
              StoreInt(Year,4)}
             else StoreInt(Year % 100,2);
          } else if ($tmp3 === "M") {
            if (isInterval && ((prevlasttoken === "H") || TimeFlag)) {
              StoreInt(Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60),0)}
             else if ((lastformattoken === "H") || TimeFlag) {
              if (Count === 1) {
                StoreInt(Minute,0)}
               else StoreInt(Minute,2);
            } else {
              var $tmp4 = Count;
              if ($tmp4 === 1) {
                StoreInt(Month,0)}
               else if ($tmp4 === 2) {
                StoreInt(Month,2)}
               else if ($tmp4 === 3) {
                StoreString($mod.ShortMonthNames[Month - 1])}
               else {
                StoreString($mod.LongMonthNames[Month - 1]);
              };
            };
          } else if ($tmp3 === "D") {
            var $tmp5 = Count;
            if ($tmp5 === 1) {
              StoreInt(Day,0)}
             else if ($tmp5 === 2) {
              StoreInt(Day,2)}
             else if ($tmp5 === 3) {
              StoreString($mod.ShortDayNames[DayOfWeek])}
             else if ($tmp5 === 4) {
              StoreString($mod.LongDayNames[DayOfWeek])}
             else if ($tmp5 === 5) {
              StoreFormat($mod.ShortDateFormat,Nesting + 1,false)}
             else {
              StoreFormat($mod.LongDateFormat,Nesting + 1,false);
            };
          } else if ($tmp3 === "H") {
            if (isInterval) {
              StoreInt(Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24),0)}
             else if (Clock12) {
              tmp = Hour % 12;
              if (tmp === 0) tmp = 12;
              if (Count === 1) {
                StoreInt(tmp,0)}
               else StoreInt(tmp,2);
            } else {
              if (Count === 1) {
                StoreInt(Hour,0)}
               else StoreInt(Hour,2);
            }}
           else if ($tmp3 === "N") {
            if (isInterval) {
              StoreInt(Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60),0)}
             else if (Count === 1) {
              StoreInt(Minute,0)}
             else StoreInt(Minute,2)}
           else if ($tmp3 === "S") {
            if (isInterval) {
              StoreInt(Second + ((Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60)) * 60),0)}
             else if (Count === 1) {
              StoreInt(Second,0)}
             else StoreInt(Second,2)}
           else if ($tmp3 === "Z") {
            if (Count === 1) {
              StoreInt(MilliSecond,0)}
             else StoreInt(MilliSecond,3)}
           else if ($tmp3 === "T") {
            if (Count === 1) {
              StoreFormat($mod.ShortTimeFormat,Nesting + 1,true)}
             else StoreFormat($mod.LongTimeFormat,Nesting + 1,true)}
           else if ($tmp3 === "C") {
            StoreFormat($mod.ShortDateFormat,Nesting + 1,false);
            if (((Hour !== 0) || (Minute !== 0)) || (Second !== 0)) {
              StoreString(" ");
              StoreFormat($mod.LongTimeFormat,Nesting + 1,true);
            };
          } else if ($tmp3 === "F") {
            StoreFormat($mod.ShortDateFormat,Nesting + 1,false);
            StoreString(" ");
            StoreFormat($mod.LongTimeFormat,Nesting + 1,true);
          };
          prevlasttoken = lastformattoken;
          lastformattoken = Token;
        } else {
          StoreString(Token);
        };
        FormatCurrent += Count;
      };
    };
    $mod.DecodeDateFully(DateTime,{get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }},{get: function () {
        return DayOfWeek;
      }, set: function (v) {
        DayOfWeek = v;
      }});
    $mod.DecodeTime(DateTime,{get: function () {
        return Hour;
      }, set: function (v) {
        Hour = v;
      }},{get: function () {
        return Minute;
      }, set: function (v) {
        Minute = v;
      }},{get: function () {
        return Second;
      }, set: function (v) {
        Second = v;
      }},{get: function () {
        return MilliSecond;
      }, set: function (v) {
        MilliSecond = v;
      }});
    if (FormatStr !== "") {
      StoreFormat(FormatStr,0,false)}
     else StoreFormat("C",0,false);
    return Result;
  };
  this.TryStrToDate = function (S, Value) {
    var Result = false;
    Result = $mod.TryStrToDate$2(S,Value,$mod.ShortDateFormat,"\x00");
    return Result;
  };
  this.TryStrToDate$1 = function (S, Value, separator) {
    var Result = false;
    Result = $mod.TryStrToDate$2(S,Value,$mod.ShortDateFormat,separator);
    return Result;
  };
  this.TryStrToDate$2 = function (S, Value, useformat, separator) {
    var Result = false;
    var Msg = "";
    Result = S.length !== 0;
    if (Result) {
      Value.set($impl.IntStrToDate({get: function () {
          return Msg;
        }, set: function (v) {
          Msg = v;
        }},S,useformat,separator));
      Result = Msg === "";
    };
    return Result;
  };
  this.TryStrToTime = function (S, Value) {
    var Result = false;
    Result = $mod.TryStrToTime$1(S,Value,"\x00");
    return Result;
  };
  this.TryStrToTime$1 = function (S, Value, separator) {
    var Result = false;
    var Msg = "";
    Result = S.length !== 0;
    if (Result) {
      Value.set($impl.IntStrToTime({get: function () {
          return Msg;
        }, set: function (v) {
          Msg = v;
        }},S,S.length,separator));
      Result = Msg === "";
    };
    return Result;
  };
  this.TryStrToDateTime = function (S, Value) {
    var Result = false;
    var I = 0;
    var dtdate = 0.0;
    var dttime = 0.0;
    Result = false;
    I = pas.System.Pos($mod.TimeSeparator,S);
    if (I > 0) {
      while ((I > 0) && (S.charAt(I - 1) !== " ")) I -= 1;
      if (I > 0) {
        if (!$mod.TryStrToDate(pas.System.Copy(S,1,I - 1),{get: function () {
            return dtdate;
          }, set: function (v) {
            dtdate = v;
          }})) return Result;
        if (!$mod.TryStrToTime(pas.System.Copy(S,I + 1,S.length - I),{get: function () {
            return dttime;
          }, set: function (v) {
            dttime = v;
          }})) return Result;
        Value.set($mod.ComposeDateTime(dtdate,dttime));
        Result = true;
      } else Result = $mod.TryStrToTime(S,Value);
    } else Result = $mod.TryStrToDate(S,Value);
    return Result;
  };
  this.StrToDateDef = function (S, Defvalue) {
    var Result = 0.0;
    Result = $mod.StrToDateDef$1(S,Defvalue,"\x00");
    return Result;
  };
  this.StrToDateDef$1 = function (S, Defvalue, separator) {
    var Result = 0.0;
    if (!$mod.TryStrToDate$1(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},separator)) Result = Defvalue;
    return Result;
  };
  this.StrToTimeDef = function (S, Defvalue) {
    var Result = 0.0;
    Result = $mod.StrToTimeDef$1(S,Defvalue,"\x00");
    return Result;
  };
  this.StrToTimeDef$1 = function (S, Defvalue, separator) {
    var Result = 0.0;
    if (!$mod.TryStrToTime$1(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},separator)) Result = Defvalue;
    return Result;
  };
  this.StrToDateTimeDef = function (S, Defvalue) {
    var Result = 0.0;
    if (!$mod.TryStrToDateTime(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = Defvalue;
    return Result;
  };
  this.CurrentYear = function () {
    var Result = 0;
    Result = (new Date()).getFullYear();
    return Result;
  };
  this.ReplaceTime = function (dati, NewTime) {
    dati.set($mod.ComposeDateTime(dati.get(),NewTime));
  };
  this.ReplaceDate = function (DateTime, NewDate) {
    var tmp = 0.0;
    tmp = NewDate;
    $mod.ReplaceTime({get: function () {
        return tmp;
      }, set: function (v) {
        tmp = v;
      }},DateTime.get());
    DateTime.set(tmp);
  };
  this.FloatToDateTime = function (Value) {
    var Result = 0.0;
    if ((Value < $mod.MinDateTime) || (Value > $mod.MaxDateTime)) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidDateTime,[$mod.FloatToStr(Value)]]);
    Result = Value;
    return Result;
  };
  this.CurrencyFormat = 0;
  this.NegCurrFormat = 0;
  this.CurrencyDecimals = 2;
  this.CurrencyString = "$";
  this.FloattoCurr = function (Value) {
    var Result = 0;
    if (!$mod.TryFloatToCurr(Value,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidCurrency,[$mod.FloatToStr(Value)]]);
    return Result;
  };
  this.TryFloatToCurr = function (Value, AResult) {
    var Result = false;
    Result = ((Value * 10000) >= $mod.MinCurrency) && ((Value * 10000) <= $mod.MaxCurrency);
    if (Result) AResult.set(Math.floor(Value * 10000));
    return Result;
  };
  this.CurrToStr = function (Value) {
    var Result = "";
    Result = $mod.FloatToStrF(Value / 10000,$mod.TFloatFormat.ffGeneral,-1,0);
    return Result;
  };
  this.StrToCurr = function (S) {
    var Result = 0;
    if (!$mod.TryStrToCurr(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidCurrency,[S]]);
    return Result;
  };
  this.TryStrToCurr = function (S, Value) {
    var Result = false;
    var D = 0.0;
    Result = $mod.TryStrToFloat(S,{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    if (Result) Value.set(Math.floor(D * 10000));
    return Result;
  };
  this.StrToCurrDef = function (S, Default) {
    var Result = 0;
    var R = 0;
    if ($mod.TryStrToCurr(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }})) {
      Result = R}
     else Result = Default;
    return Result;
  };
  $mod.$rtti.$DynArray("TPathStrArray",{eltype: rtl.string});
  this.ChangeFileExt = function (FileName, Extension) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    var SOF = false;
    i = FileName.length;
    EndSep = rtl.unionSet(rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators),rtl.createSet(pas.System.ExtensionSeparator.charCodeAt()));
    while ((i > 0) && !(FileName.charCodeAt(i - 1) in EndSep)) i -= 1;
    if ((i === 0) || (FileName.charAt(i - 1) !== pas.System.ExtensionSeparator)) {
      i = FileName.length + 1}
     else {
      SOF = (i === 1) || (FileName.charCodeAt((i - 1) - 1) in pas.System.AllowDirectorySeparators);
      if (SOF && !pas.System.FirstDotAtFileNameStartIsExtension) i = FileName.length + 1;
    };
    Result = pas.System.Copy(FileName,1,i - 1) + Extension;
    return Result;
  };
  this.ExtractFilePath = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    i = FileName.length;
    EndSep = rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators);
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    if (i > 0) {
      Result = pas.System.Copy(FileName,1,i)}
     else Result = "";
    return Result;
  };
  this.ExtractFileDrive = function (FileName) {
    var Result = "";
    var i = 0;
    var l = 0;
    Result = "";
    l = FileName.length;
    if (l < 2) return Result;
    if ($impl.CharInSet$1(FileName.charAt(1),pas.System.AllowDriveSeparators)) {
      Result = pas.System.Copy(FileName,1,2)}
     else if ($impl.CharInSet$1(FileName.charAt(0),pas.System.AllowDirectorySeparators) && $impl.CharInSet$1(FileName.charAt(1),pas.System.AllowDirectorySeparators)) {
      i = 2;
      while ((i < l) && !$impl.CharInSet$1(FileName.charAt((i + 1) - 1),pas.System.AllowDirectorySeparators)) i += 1;
      i += 1;
      while ((i < l) && !$impl.CharInSet$1(FileName.charAt((i + 1) - 1),pas.System.AllowDirectorySeparators)) i += 1;
      Result = pas.System.Copy(FileName,1,i);
    };
    return Result;
  };
  this.ExtractFileName = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    i = FileName.length;
    EndSep = rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators);
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    Result = pas.System.Copy(FileName,i + 1,2147483647);
    return Result;
  };
  this.ExtractFileExt = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    var SOF = false;
    Result = "";
    i = FileName.length;
    EndSep = rtl.unionSet(rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators),rtl.createSet(pas.System.ExtensionSeparator.charCodeAt()));
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    if ((i > 0) && (FileName.charAt(i - 1) === pas.System.ExtensionSeparator)) {
      SOF = (i === 1) || (FileName.charCodeAt((i - 1) - 1) in pas.System.AllowDirectorySeparators);
      if (!SOF || pas.System.FirstDotAtFileNameStartIsExtension) Result = pas.System.Copy(FileName,i,2147483647);
    } else Result = "";
    return Result;
  };
  this.ExtractFileDir = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    i = FileName.length;
    EndSep = rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators);
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    if (((i > 1) && $impl.CharInSet$1(FileName.charAt(i - 1),pas.System.AllowDirectorySeparators)) && !$impl.CharInSet$1(FileName.charAt((i - 1) - 1),EndSep)) i -= 1;
    Result = pas.System.Copy(FileName,1,i);
    return Result;
  };
  this.ExtractRelativepath = function (BaseName, DestName) {
    var Result = "";
    var OneLevelBack = "";
    var Source = "";
    var Dest = "";
    var Sc = 0;
    var Dc = 0;
    var I = 0;
    var J = 0;
    var SD = [];
    var DD = [];
    OneLevelBack = ".." + pas.System.PathDelim;
    if ($mod.UpperCase($mod.ExtractFileDrive(BaseName)) !== $mod.UpperCase($mod.ExtractFileDrive(DestName))) {
      Result = DestName;
      return Result;
    };
    Source = $mod.ExcludeTrailingPathDelimiter($mod.ExtractFilePath(BaseName));
    Dest = $mod.ExcludeTrailingPathDelimiter($mod.ExtractFilePath(DestName));
    SD = $mod.GetDirs(Source);
    Sc = rtl.length(SD);
    DD = $mod.GetDirs(Dest);
    Dc = rtl.length(SD);
    I = 0;
    while ((I < Dc) && (I < Sc)) {
      if ($mod.SameText(DD[I],SD[I])) {
        I += 1}
       else break;
    };
    Result = "";
    for (var $l1 = I, $end2 = Sc; $l1 <= $end2; $l1++) {
      J = $l1;
      Result = Result + OneLevelBack;
    };
    for (var $l3 = I, $end4 = Dc; $l3 <= $end4; $l3++) {
      J = $l3;
      Result = (Result + DD[J]) + pas.System.PathDelim;
    };
    Result = Result + $mod.ExtractFileName(DestName);
    return Result;
  };
  this.IncludeTrailingPathDelimiter = function (Path) {
    var Result = "";
    var l = 0;
    Result = Path;
    l = Result.length;
    if ((l === 0) || !$impl.CharInSet$1(Result.charAt(l - 1),pas.System.AllowDirectorySeparators)) Result = Result + pas.System.PathDelim;
    return Result;
  };
  this.ExcludeTrailingPathDelimiter = function (Path) {
    var Result = "";
    var L = 0;
    L = Path.length;
    if ((L > 0) && $impl.CharInSet$1(Path.charAt(L - 1),pas.System.AllowDirectorySeparators)) L -= 1;
    Result = pas.System.Copy(Path,1,L);
    return Result;
  };
  this.IncludeLeadingPathDelimiter = function (Path) {
    var Result = "";
    var l = 0;
    Result = Path;
    l = Result.length;
    if ((l === 0) || !$impl.CharInSet$1(Result.charAt(0),pas.System.AllowDirectorySeparators)) Result = pas.System.PathDelim + Result;
    return Result;
  };
  this.ExcludeLeadingPathDelimiter = function (Path) {
    var Result = "";
    var L = 0;
    Result = Path;
    L = Result.length;
    if ((L > 0) && $impl.CharInSet$1(Result.charAt(0),pas.System.AllowDirectorySeparators)) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    return Result;
  };
  this.IsPathDelimiter = function (Path, Index) {
    var Result = false;
    Result = ((Index > 0) && (Index <= Path.length)) && $impl.CharInSet$1(Path.charAt(Index - 1),pas.System.AllowDirectorySeparators);
    return Result;
  };
  this.SetDirSeparators = function (FileName) {
    var Result = "";
    var I = 0;
    Result = FileName;
    for (var $l1 = 1, $end2 = Result.length; $l1 <= $end2; $l1++) {
      I = $l1;
      if ($impl.CharInSet$1(Result.charAt(I - 1),pas.System.AllowDirectorySeparators)) Result = rtl.setCharAt(Result,I - 1,pas.System.PathDelim);
    };
    return Result;
  };
  this.GetDirs = function (DirName) {
    var Result = [];
    var I = 0;
    var J = 0;
    var L = 0;
    var D = "";
    I = 1;
    J = 0;
    L = 0;
    Result = rtl.arraySetLength(Result,"",DirName.length);
    while (I <= DirName.length) {
      if ($impl.CharInSet$1(DirName.charAt(I - 1),pas.System.AllowDirectorySeparators)) {
        D = pas.System.Copy(DirName,J + 1,J - I);
        if (D !== "") {
          Result[L] = D;
          L += 1;
        };
        J = I;
      };
      I += 1;
    };
    Result = rtl.arraySetLength(Result,"",L);
    return Result;
  };
  this.ConcatPaths = function (Paths) {
    var Result = "";
    var I = 0;
    if (rtl.length(Paths) > 0) {
      Result = Paths[0];
      for (var $l1 = 1, $end2 = rtl.length(Paths) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        Result = $mod.IncludeTrailingPathDelimiter(Result) + $mod.ExcludeLeadingPathDelimiter(Paths[I]);
      };
    } else Result = "";
    return Result;
  };
  this.GUID_NULL = new pas.System.TGuid({D1: 0x00000000, D2: 0x0000, D3: 0x0000, D4: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]});
  this.Supports = function (Instance, AClass, Obj) {
    var Result = false;
    Result = ((Instance !== null) && (Instance.QueryInterface(pas.System.IObjectInstance,Obj) === 0)) && Obj.get().$class.InheritsFrom(AClass);
    return Result;
  };
  this.Supports$1 = function (Instance, IID, Intf) {
    var Result = false;
    Result = (Instance !== null) && (Instance.QueryInterface(IID,Intf) === 0);
    return Result;
  };
  this.Supports$2 = function (Instance, IID, Intf) {
    var Result = false;
    Result = (Instance !== null) && Instance.GetInterface(IID,Intf);
    return Result;
  };
  this.Supports$3 = function (Instance, IID, Intf) {
    var Result = false;
    Result = (Instance !== null) && Instance.GetInterfaceByStr(IID,Intf);
    return Result;
  };
  this.Supports$4 = function (Instance, AClass) {
    var Result = false;
    var Temp = null;
    Result = $mod.Supports(Instance,AClass,{get: function () {
        return Temp;
      }, set: function (v) {
        Temp = v;
      }});
    return Result;
  };
  this.Supports$5 = function (Instance, IID) {
    var Result = false;
    var Temp = null;
    try {
      Result = $mod.Supports$1(Instance,IID,{get: function () {
          return Temp;
        }, set: function (v) {
          Temp = v;
        }});
    } finally {
      rtl._Release(Temp);
    };
    return Result;
  };
  this.Supports$6 = function (Instance, IID) {
    var Result = false;
    var Temp = null;
    Result = $mod.Supports$2(Instance,IID,{get: function () {
        return Temp;
      }, set: function (v) {
        Temp = v;
      }});
    if (Temp && Temp.$kind==='com') Temp._Release();
    return Result;
  };
  this.Supports$7 = function (Instance, IID) {
    var Result = false;
    var Temp = null;
    Result = $mod.Supports$3(Instance,IID,{get: function () {
        return Temp;
      }, set: function (v) {
        Temp = v;
      }});
    if (Temp && Temp.$kind==='com') Temp._Release();
    return Result;
  };
  this.Supports$8 = function (AClass, IID) {
    var Result = false;
    var maps = undefined;
    if (AClass === null) return false;
    maps = AClass["$intfmaps"];
    if (!maps) return false;
    if (rtl.getObject(maps)[$mod.GUIDToString(IID)]) return true;
    Result = false;
    return Result;
  };
  this.Supports$9 = function (AClass, IID) {
    var Result = false;
    var maps = undefined;
    if (AClass === null) return false;
    maps = AClass["$intfmaps"];
    if (!maps) return false;
    if (rtl.getObject(maps)[$mod.UpperCase(IID)]) return true;
    Result = false;
    return Result;
  };
  this.TryStringToGUID = function (s, Guid) {
    var Result = false;
    var re = null;
    if (s.length !== 38) return false;
    re = new RegExp("^\\{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\}$");
    Result = re.test(s);
    if (!Result) {
      Guid.get().D1 = 0;
      return Result;
    };
    rtl.strToGUIDR(s,Guid.get());
    Result = true;
    return Result;
  };
  this.StringToGUID = function (S) {
    var Result = new pas.System.TGuid();
    if (!$mod.TryStringToGUID(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidGUID,[S]]);
    return Result;
  };
  this.GUIDToString = function (guid) {
    var Result = "";
    Result = rtl.guidrToStr(guid);
    return Result;
  };
  this.IsEqualGUID = function (guid1, guid2) {
    var Result = false;
    var i = 0;
    if (((guid1.D1 !== guid2.D1) || (guid1.D2 !== guid2.D2)) || (guid1.D3 !== guid2.D3)) return false;
    for (i = 0; i <= 7; i++) if (guid1.D4[i] !== guid2.D4[i]) return false;
    Result = true;
    return Result;
  };
  this.GuidCase = function (guid, List) {
    var Result = 0;
    for (var $l1 = rtl.length(List) - 1; $l1 >= 0; $l1--) {
      Result = $l1;
      if ($mod.IsEqualGUID(guid,List[Result])) return Result;
    };
    Result = -1;
    return Result;
  };
  this.CreateGUID = function (GUID) {
    var Result = 0;
    function R(B) {
      var Result = 0;
      var v = 0;
      v = pas.System.Random(256);
      while (B > 1) {
        v = (v * 256) + pas.System.Random(256);
        B -= 1;
      };
      Result = v;
      return Result;
    };
    var I = 0;
    Result = 0;
    GUID.get().D1 = R(4);
    GUID.get().D2 = R(2);
    GUID.get().D3 = R(2);
    for (I = 0; I <= 7; I++) GUID.get().D4[I] = R(1);
    return Result;
  };
  $mod.$init = function () {
    $mod.FormatSettings = $mod.TFormatSettings.$create("Create");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.SAbortError = "Operation aborted";
  $impl.CharInSet$1 = function (Ch, CSet) {
    var Result = false;
    Result = Ch.charCodeAt() in CSet;
    return Result;
  };
  $impl.CheckBoolStrs = function () {
    if (rtl.length($mod.TrueBoolStrs) === 0) {
      $mod.TrueBoolStrs = rtl.arraySetLength($mod.TrueBoolStrs,"",1);
      $mod.TrueBoolStrs[0] = "True";
    };
    if (rtl.length($mod.FalseBoolStrs) === 0) {
      $mod.FalseBoolStrs = rtl.arraySetLength($mod.FalseBoolStrs,"",1);
      $mod.FalseBoolStrs[0] = "False";
    };
  };
  $impl.feInvalidFormat = 1;
  $impl.feMissingArgument = 2;
  $impl.feInvalidArgIndex = 3;
  $impl.DoFormatError = function (ErrCode, fmt) {
    var $tmp1 = ErrCode;
    if ($tmp1 === 1) {
      throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidFormat,[fmt]])}
     else if ($tmp1 === 2) {
      throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SArgumentMissing,[fmt]])}
     else if ($tmp1 === 3) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidArgIndex,[fmt]]);
  };
  $impl.maxdigits = 15;
  $impl.ReplaceDecimalSep = function (S, DS) {
    var Result = "";
    var P = 0;
    P = pas.System.Pos(".",S);
    if (P > 0) {
      Result = (pas.System.Copy(S,1,P - 1) + DS) + pas.System.Copy(S,P + 1,S.length - P)}
     else Result = S;
    return Result;
  };
  $impl.FormatGeneralFloat = function (Value, Precision, DS) {
    var Result = "";
    var P = 0;
    var PE = 0;
    var Q = 0;
    var Exponent = 0;
    if ((Precision === -1) || (Precision > 15)) Precision = 15;
    Result = rtl.floatToStr(Value,Precision + 7);
    Result = $mod.TrimLeft(Result);
    P = pas.System.Pos(".",Result);
    if (P === 0) return Result;
    PE = pas.System.Pos("E",Result);
    if (PE === 0) {
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    Q = PE + 2;
    Exponent = 0;
    while (Q <= Result.length) {
      Exponent = ((Exponent * 10) + Result.charCodeAt(Q - 1)) - "0".charCodeAt();
      Q += 1;
    };
    if (Result.charAt((PE + 1) - 1) === "-") Exponent = -Exponent;
    if (((P + Exponent) < PE) && (Exponent > -6)) {
      Result = rtl.strSetLength(Result,PE - 1);
      if (Exponent >= 0) {
        for (var $l1 = 0, $end2 = Exponent - 1; $l1 <= $end2; $l1++) {
          Q = $l1;
          Result = rtl.setCharAt(Result,P - 1,Result.charAt((P + 1) - 1));
          P += 1;
        };
        Result = rtl.setCharAt(Result,P - 1,".");
        P = 1;
        if (Result.charAt(P - 1) === "-") P += 1;
        while (((Result.charAt(P - 1) === "0") && (P < Result.length)) && (pas.System.Copy(Result,P + 1,DS.length) !== DS)) pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P,1);
      } else {
        pas.System.Insert(pas.System.Copy("00000",1,-Exponent),{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P - 1);
        Result = rtl.setCharAt(Result,(P - Exponent) - 1,Result.charAt(((P - Exponent) - 1) - 1));
        Result = rtl.setCharAt(Result,P - 1,".");
        if (Exponent !== -1) Result = rtl.setCharAt(Result,((P - Exponent) - 1) - 1,"0");
      };
      Q = Result.length;
      while ((Q > 0) && (Result.charAt(Q - 1) === "0")) Q -= 1;
      if (Result.charAt(Q - 1) === ".") Q -= 1;
      if ((Q === 0) || ((Q === 1) && (Result.charAt(0) === "-"))) {
        Result = "0"}
       else Result = rtl.strSetLength(Result,Q);
    } else {
      while (Result.charAt((PE - 1) - 1) === "0") {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE - 1,1);
        PE -= 1;
      };
      if (Result.charAt((PE - 1) - 1) === DS) {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE - 1,1);
        PE -= 1;
      };
      if (Result.charAt((PE + 1) - 1) === "+") {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE + 1,1)}
       else PE += 1;
      while (Result.charAt((PE + 1) - 1) === "0") pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},PE + 1,1);
    };
    Result = $impl.ReplaceDecimalSep(Result,DS);
    return Result;
  };
  $impl.FormatExponentFloat = function (Value, Precision, Digits, DS) {
    var Result = "";
    var P = 0;
    DS = $mod.DecimalSeparator;
    if ((Precision === -1) || (Precision > 15)) Precision = 15;
    Result = rtl.floatToStr(Value,Precision + 7);
    while (Result.charAt(0) === " ") pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    P = pas.System.Pos("E",Result);
    if (P === 0) {
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    P += 2;
    if (Digits > 4) Digits = 4;
    Digits = ((Result.length - P) - Digits) + 1;
    if (Digits < 0) {
      pas.System.Insert(pas.System.Copy("0000",1,-Digits),{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},P)}
     else while ((Digits > 0) && (Result.charAt(P - 1) === "0")) {
      pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},P,1);
      if (P > Result.length) {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P - 2,2);
        break;
      };
      Digits -= 1;
    };
    Result = $impl.ReplaceDecimalSep(Result,DS);
    return Result;
  };
  $impl.FormatFixedFloat = function (Value, Digits, DS) {
    var Result = "";
    if (Digits === -1) {
      Digits = 2}
     else if (Digits > 18) Digits = 18;
    Result = rtl.floatToStr(Value,0,Digits);
    if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    Result = $impl.ReplaceDecimalSep(Result,DS);
    return Result;
  };
  $impl.FormatNumberFloat = function (Value, Digits, DS, TS) {
    var Result = "";
    var P = 0;
    if (Digits === -1) {
      Digits = 2}
     else if (Digits > 15) Digits = 15;
    Result = rtl.floatToStr(Value,0,Digits);
    if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    P = pas.System.Pos(".",Result);
    Result = $impl.ReplaceDecimalSep(Result,DS);
    P -= 3;
    if ((TS !== "") && (TS !== "\x00")) while (P > 1) {
      if (Result.charAt((P - 1) - 1) !== "-") pas.System.Insert(TS,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},P);
      P -= 3;
    };
    return Result;
  };
  $impl.RemoveLeadingNegativeSign = function (AValue, DS) {
    var Result = false;
    var i = 0;
    var TS = "";
    var StartPos = 0;
    Result = false;
    StartPos = 2;
    TS = $mod.ThousandSeparator;
    for (var $l1 = StartPos, $end2 = AValue.get().length; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = (AValue.get().charCodeAt(i - 1) in rtl.createSet(48,DS.charCodeAt(),69,43)) || (AValue.get().charAt(i - 1) === TS);
      if (!Result) break;
    };
    if (Result && (AValue.get().charAt(0) === "-")) pas.System.Delete(AValue,1,1);
    return Result;
  };
  $impl.FormatNumberCurrency = function (Value, Digits, DS, TS) {
    var Result = "";
    var Negative = false;
    var P = 0;
    if (Digits === -1) {
      Digits = $mod.CurrencyDecimals}
     else if (Digits > 18) Digits = 18;
    Result = rtl.floatToStr(Value / 10000,0,Digits);
    Negative = Result.charAt(0) === "-";
    if (Negative) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    P = pas.System.Pos(".",Result);
    if (TS !== "") {
      if (P !== 0) {
        Result = $impl.ReplaceDecimalSep(Result,DS)}
       else P = Result.length + 1;
      P -= 3;
      while (P > 1) {
        pas.System.Insert(TS,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P);
        P -= 3;
      };
    };
    if (Negative) $impl.RemoveLeadingNegativeSign({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},DS);
    if (!Negative) {
      var $tmp1 = $mod.CurrencyFormat;
      if ($tmp1 === 0) {
        Result = $mod.CurrencyString + Result}
       else if ($tmp1 === 1) {
        Result = Result + $mod.CurrencyString}
       else if ($tmp1 === 2) {
        Result = ($mod.CurrencyString + " ") + Result}
       else if ($tmp1 === 3) Result = (Result + " ") + $mod.CurrencyString;
    } else {
      var $tmp2 = $mod.NegCurrFormat;
      if ($tmp2 === 0) {
        Result = (("(" + $mod.CurrencyString) + Result) + ")"}
       else if ($tmp2 === 1) {
        Result = ("-" + $mod.CurrencyString) + Result}
       else if ($tmp2 === 2) {
        Result = ($mod.CurrencyString + "-") + Result}
       else if ($tmp2 === 3) {
        Result = ($mod.CurrencyString + Result) + "-"}
       else if ($tmp2 === 4) {
        Result = (("(" + Result) + $mod.CurrencyString) + ")"}
       else if ($tmp2 === 5) {
        Result = ("-" + Result) + $mod.CurrencyString}
       else if ($tmp2 === 6) {
        Result = (Result + "-") + $mod.CurrencyString}
       else if ($tmp2 === 7) {
        Result = (Result + $mod.CurrencyString) + "-"}
       else if ($tmp2 === 8) {
        Result = (("-" + Result) + " ") + $mod.CurrencyString}
       else if ($tmp2 === 9) {
        Result = (("-" + $mod.CurrencyString) + " ") + Result}
       else if ($tmp2 === 10) {
        Result = ((Result + " ") + $mod.CurrencyString) + "-"}
       else if ($tmp2 === 11) {
        Result = (($mod.CurrencyString + " ") + Result) + "-"}
       else if ($tmp2 === 12) {
        Result = (($mod.CurrencyString + " ") + "-") + Result}
       else if ($tmp2 === 13) {
        Result = ((Result + "-") + " ") + $mod.CurrencyString}
       else if ($tmp2 === 14) {
        Result = ((("(" + $mod.CurrencyString) + " ") + Result) + ")"}
       else if ($tmp2 === 15) Result = ((("(" + Result) + " ") + $mod.CurrencyString) + ")";
    };
    return Result;
  };
  $impl.RESpecials = "([\\[\\]\\(\\)\\\\\\.\\*])";
  $impl.DoEncodeDate = function (Year, Month, Day) {
    var Result = 0;
    var D = 0.0;
    if ($mod.TryEncodeDate(Year,Month,Day,{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }})) {
      Result = pas.System.Trunc(D)}
     else Result = 0;
    return Result;
  };
  $impl.DoEncodeTime = function (Hour, Minute, Second, MilliSecond) {
    var Result = 0.0;
    if (!$mod.TryEncodeTime(Hour,Minute,Second,MilliSecond,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = 0;
    return Result;
  };
  $impl.DateTimeToStrFormat = ["c","f"];
  var WhiteSpace = " \b\t\n\f\r";
  var Digits = "0123456789";
  $impl.IntStrToDate = function (ErrorMsg, S, useformat, separator) {
    var Result = 0.0;
    function FixErrorMsg(errmarg) {
      ErrorMsg.set($mod.Format(pas.RTLConsts.SInvalidDateFormat,[errmarg]));
    };
    var df = "";
    var d = 0;
    var m = 0;
    var y = 0;
    var ly = 0;
    var ld = 0;
    var lm = 0;
    var n = 0;
    var i = 0;
    var len = 0;
    var c = 0;
    var dp = 0;
    var mp = 0;
    var yp = 0;
    var which = 0;
    var s1 = "";
    var values = [];
    var YearMoreThenTwoDigits = false;
    values = rtl.arraySetLength(values,0,4);
    Result = 0;
    len = S.length;
    ErrorMsg.set("");
    while ((len > 0) && (pas.System.Pos(S.charAt(len - 1),WhiteSpace) > 0)) len -= 1;
    if (len === 0) {
      FixErrorMsg(S);
      return Result;
    };
    YearMoreThenTwoDigits = false;
    if (separator === "\x00") if ($mod.DateSeparator !== "\x00") {
      separator = $mod.DateSeparator}
     else separator = "-";
    df = $mod.UpperCase(useformat);
    yp = 0;
    mp = 0;
    dp = 0;
    which = 0;
    i = 0;
    while ((i < df.length) && (which < 3)) {
      i += 1;
      var $tmp1 = df.charAt(i - 1);
      if ($tmp1 === "Y") {
        if (yp === 0) {
          which += 1;
          yp = which;
        }}
       else if ($tmp1 === "M") {
        if (mp === 0) {
          which += 1;
          mp = which;
        }}
       else if ($tmp1 === "D") if (dp === 0) {
        which += 1;
        dp = which;
      };
    };
    for (i = 1; i <= 3; i++) values[i] = 0;
    s1 = "";
    n = 0;
    for (var $l2 = 1, $end3 = len; $l2 <= $end3; $l2++) {
      i = $l2;
      if (pas.System.Pos(S.charAt(i - 1),Digits) > 0) s1 = s1 + S.charAt(i - 1);
      if ((separator !== " ") && (S.charAt(i - 1) === " ")) continue;
      if ((S.charAt(i - 1) === separator) || ((i === len) && (pas.System.Pos(S.charAt(i - 1),Digits) > 0))) {
        n += 1;
        if (n > 3) {
          FixErrorMsg(S);
          return Result;
        };
        if ((n === yp) && (s1.length > 2)) YearMoreThenTwoDigits = true;
        pas.System.val$6(s1,{a: n, p: values, get: function () {
            return this.p[this.a];
          }, set: function (v) {
            this.p[this.a] = v;
          }},{get: function () {
            return c;
          }, set: function (v) {
            c = v;
          }});
        if (c !== 0) {
          FixErrorMsg(S);
          return Result;
        };
        s1 = "";
      } else if (pas.System.Pos(S.charAt(i - 1),Digits) === 0) {
        FixErrorMsg(S);
        return Result;
      };
    };
    if ((which < 3) && (n > which)) {
      FixErrorMsg(S);
      return Result;
    };
    $mod.DecodeDate($mod.Date(),{get: function () {
        return ly;
      }, set: function (v) {
        ly = v;
      }},{get: function () {
        return lm;
      }, set: function (v) {
        lm = v;
      }},{get: function () {
        return ld;
      }, set: function (v) {
        ld = v;
      }});
    if (n === 3) {
      y = values[yp];
      m = values[mp];
      d = values[dp];
    } else {
      y = ly;
      if (n < 2) {
        d = values[1];
        m = lm;
      } else if (dp < mp) {
        d = values[1];
        m = values[2];
      } else {
        d = values[2];
        m = values[1];
      };
    };
    if (((y >= 0) && (y < 100)) && !YearMoreThenTwoDigits) {
      ly = ly - $mod.TwoDigitYearCenturyWindow;
      y += Math.floor(ly / 100) * 100;
      if (($mod.TwoDigitYearCenturyWindow > 0) && (y < ly)) y += 100;
    };
    if (!$mod.TryEncodeDate(y,m,d,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) ErrorMsg.set(pas.RTLConsts.SErrInvalidDate);
    return Result;
  };
  var AMPM_None = 0;
  var AMPM_AM = 1;
  var AMPM_PM = 2;
  var tiHour = 0;
  var tiMin = 1;
  var tiSec = 2;
  var tiMSec = 3;
  var Digits$1 = "0123456789";
  $impl.IntStrToTime = function (ErrorMsg, S, Len, separator) {
    var Result = 0.0;
    var AmPm = 0;
    var TimeValues = [];
    function SplitElements(TimeValues, AmPm) {
      var Result = false;
      var Cur = 0;
      var Offset = 0;
      var ElemLen = 0;
      var Err = 0;
      var TimeIndex = 0;
      var FirstSignificantDigit = 0;
      var Value = 0;
      var DigitPending = false;
      var MSecPending = false;
      var AmPmStr = "";
      var CurChar = "";
      var I = 0;
      var allowedchars = "";
      Result = false;
      AmPm.set(0);
      MSecPending = false;
      TimeIndex = 0;
      for (I = 0; I <= 3; I++) TimeValues.get()[I] = 0;
      Cur = 1;
      while ((Cur < Len) && (S.charAt(Cur - 1) === " ")) Cur += 1;
      Offset = Cur;
      if (((Cur > (Len - 1)) || (S.charAt(Cur - 1) === separator)) || (S.charAt(Cur - 1) === $mod.DecimalSeparator)) {
        return Result;
      };
      DigitPending = pas.System.Pos(S.charAt(Cur - 1),Digits$1) > 0;
      while (Cur <= Len) {
        CurChar = S.charAt(Cur - 1);
        if (pas.System.Pos(CurChar,Digits$1) > 0) {
          if (!DigitPending || (TimeIndex > 3)) {
            return Result;
          };
          Offset = Cur;
          if (CurChar !== "0") {
            FirstSignificantDigit = Offset}
           else FirstSignificantDigit = -1;
          while ((Cur < Len) && (pas.System.Pos(S.charAt((Cur + 1) - 1),Digits$1) > 0)) {
            if ((FirstSignificantDigit === -1) && (S.charAt(Cur - 1) !== "0")) FirstSignificantDigit = Cur;
            Cur += 1;
          };
          if (FirstSignificantDigit === -1) FirstSignificantDigit = Cur;
          ElemLen = (1 + Cur) - FirstSignificantDigit;
          if ((ElemLen <= 2) || ((ElemLen <= 3) && (TimeIndex === 3))) {
            pas.System.val$6(pas.System.Copy(S,FirstSignificantDigit,ElemLen),{get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }},{get: function () {
                return Err;
              }, set: function (v) {
                Err = v;
              }});
            TimeValues.get()[TimeIndex] = Value;
            TimeIndex += 1;
            DigitPending = false;
          } else {
            return Result;
          };
        } else if (CurChar === " ") {}
        else if (CurChar === separator) {
          if (DigitPending || (TimeIndex > 2)) {
            return Result;
          };
          DigitPending = true;
          MSecPending = false;
        } else if (CurChar === $mod.DecimalSeparator) {
          if ((DigitPending || MSecPending) || (TimeIndex !== 3)) {
            return Result;
          };
          DigitPending = true;
          MSecPending = true;
        } else {
          if ((AmPm.get() !== 0) || DigitPending) {
            return Result;
          };
          Offset = Cur;
          allowedchars = $mod.DecimalSeparator + " ";
          if (separator !== "\x00") allowedchars = allowedchars + separator;
          while (((Cur < (Len - 1)) && (pas.System.Pos(S.charAt((Cur + 1) - 1),allowedchars) === 0)) && (pas.System.Pos(S.charAt((Cur + 1) - 1),Digits$1) === 0)) Cur += 1;
          ElemLen = (1 + Cur) - Offset;
          AmPmStr = pas.System.Copy(S,1 + Offset,ElemLen);
          if ($mod.CompareText(AmPmStr,$mod.TimeAMString) === 0) {
            AmPm.set(1)}
           else if ($mod.CompareText(AmPmStr,$mod.TimePMString) === 0) {
            AmPm.set(2)}
           else if ($mod.CompareText(AmPmStr,"AM") === 0) {
            AmPm.set(1)}
           else if ($mod.CompareText(AmPmStr,"PM") === 0) {
            AmPm.set(2)}
           else {
            return Result;
          };
          if (TimeIndex === 0) {
            DigitPending = true;
          } else {
            TimeIndex = 3 + 1;
            DigitPending = false;
          };
        };
        Cur += 1;
      };
      if (((TimeIndex === 0) || ((AmPm.get() !== 0) && ((TimeValues.get()[0] > 12) || (TimeValues.get()[0] === 0)))) || DigitPending) return Result;
      Result = true;
      return Result;
    };
    TimeValues = rtl.arraySetLength(TimeValues,0,4);
    if (separator === "\x00") if ($mod.TimeSeparator !== "\x00") {
      separator = $mod.TimeSeparator}
     else separator = ":";
    AmPm = 0;
    if (!SplitElements({get: function () {
        return TimeValues;
      }, set: function (v) {
        TimeValues = v;
      }},{get: function () {
        return AmPm;
      }, set: function (v) {
        AmPm = v;
      }})) {
      ErrorMsg.set($mod.Format(pas.RTLConsts.SErrInvalidTimeFormat,[S]));
      return Result;
    };
    if ((AmPm === 2) && (TimeValues[0] !== 12)) {
      TimeValues[0] += 12}
     else if ((AmPm === 1) && (TimeValues[0] === 12)) TimeValues[0] = 0;
    if (!$mod.TryEncodeTime(TimeValues[0],TimeValues[1],TimeValues[2],TimeValues[3],{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) ErrorMsg.set($mod.Format(pas.RTLConsts.SErrInvalidTimeFormat,[S]));
    return Result;
  };
  var WhiteSpace$1 = "\t\n\r ";
  $impl.SplitDateTimeStr = function (DateTimeStr, DateStr, TimeStr) {
    var Result = 0;
    var p = 0;
    var DummyDT = 0.0;
    Result = 0;
    DateStr.set("");
    TimeStr.set("");
    DateTimeStr = $mod.Trim(DateTimeStr);
    if (DateTimeStr.length === 0) return Result;
    if ((($mod.DateSeparator === " ") && ($mod.TimeSeparator === " ")) && (pas.System.Pos(" ",DateTimeStr) > 0)) {
      DateStr.set(DateTimeStr);
      return 1;
    };
    p = 1;
    if ($mod.DateSeparator !== " ") {
      while ((p < DateTimeStr.length) && !(pas.System.Pos(DateTimeStr.charAt((p + 1) - 1),WhiteSpace$1) > 0)) p += 1;
    } else {
      p = pas.System.Pos($mod.TimeSeparator,DateTimeStr);
      if (p !== 0) do {
        p -= 1;
      } while (!((p === 0) || (pas.System.Pos(DateTimeStr.charAt(p - 1),WhiteSpace$1) > 0)));
    };
    if (p === 0) p = DateTimeStr.length;
    DateStr.set(pas.System.Copy(DateTimeStr,1,p));
    TimeStr.set($mod.Trim(pas.System.Copy(DateTimeStr,p + 1,100)));
    if (TimeStr.get().length !== 0) {
      Result = 2}
     else {
      Result = 1;
      if ((($mod.DateSeparator !== $mod.TimeSeparator) && (pas.System.Pos($mod.TimeSeparator,DateStr.get()) > 0)) || (($mod.DateSeparator === $mod.TimeSeparator) && !$mod.TryStrToDate(DateStr.get(),{get: function () {
          return DummyDT;
        }, set: function (v) {
          DummyDT = v;
        }}))) {
        TimeStr.set(DateStr.get());
        DateStr.set("");
      };
    };
    return Result;
  };
});
rtl.module("Classes",["System","RTLConsts","Types","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$MethodVar("TNotifyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]]]), methodkind: 0});
  this.TFPObservedOperation = {"0": "ooChange", ooChange: 0, "1": "ooFree", ooFree: 1, "2": "ooAddItem", ooAddItem: 2, "3": "ooDeleteItem", ooDeleteItem: 3, "4": "ooCustom", ooCustom: 4};
  $mod.$rtti.$Enum("TFPObservedOperation",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TFPObservedOperation});
  rtl.createClass($mod,"EStreamError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EFCreateError",$mod.EStreamError,function () {
  });
  rtl.createClass($mod,"EFOpenError",$mod.EStreamError,function () {
  });
  rtl.createClass($mod,"EFilerError",$mod.EStreamError,function () {
  });
  rtl.createClass($mod,"EReadError",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EWriteError",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EClassNotFound",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EMethodNotFound",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EInvalidImage",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EResNotFound",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EListError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EBitsError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EStringListError",$mod.EListError,function () {
  });
  rtl.createClass($mod,"EComponentError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EParserError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EOutOfResources",pas.SysUtils.EOutOfMemory,function () {
  });
  rtl.createClass($mod,"EInvalidOperation",pas.SysUtils.Exception,function () {
  });
  this.TListAssignOp = {"0": "laCopy", laCopy: 0, "1": "laAnd", laAnd: 1, "2": "laOr", laOr: 2, "3": "laXor", laXor: 3, "4": "laSrcUnique", laSrcUnique: 4, "5": "laDestUnique", laDestUnique: 5};
  $mod.$rtti.$Enum("TListAssignOp",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TListAssignOp});
  $mod.$rtti.$ProcVar("TListSortCompare",{procsig: rtl.newTIProcSig([["Item1",rtl.jsvalue],["Item2",rtl.jsvalue]],rtl.longint)});
  this.TAlignment = {"0": "taLeftJustify", taLeftJustify: 0, "1": "taRightJustify", taRightJustify: 1, "2": "taCenter", taCenter: 2};
  $mod.$rtti.$Enum("TAlignment",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TAlignment});
  $mod.$rtti.$Class("TFPList");
  rtl.createClass($mod,"TFPListEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AList) {
      pas.System.TObject.Create.call(this);
      this.FList = AList;
      this.FPosition = -1;
    };
    this.GetCurrent = function () {
      var Result = undefined;
      Result = this.FList.Get(this.FPosition);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FPosition += 1;
      Result = this.FPosition < this.FList.FCount;
      return Result;
    };
  });
  rtl.createClass($mod,"TFPList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = [];
      this.FCount = 0;
      this.FCapacity = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.CopyMove = function (aList) {
      var r = 0;
      this.Clear();
      for (var $l1 = 0, $end2 = aList.FCount - 1; $l1 <= $end2; $l1++) {
        r = $l1;
        this.Add(aList.Get(r));
      };
    };
    this.MergeMove = function (aList) {
      var r = 0;
      for (var $l1 = 0, $end2 = aList.FCount - 1; $l1 <= $end2; $l1++) {
        r = $l1;
        if (this.IndexOf(aList.Get(r)) < 0) this.Add(aList.Get(r));
      };
    };
    this.DoCopy = function (ListA, ListB) {
      if (ListB != null) {
        this.CopyMove(ListB)}
       else this.CopyMove(ListA);
    };
    this.DoSrcUnique = function (ListA, ListB) {
      var r = 0;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.FCount - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
        };
      } else {
        for (var $l3 = this.FCount - 1; $l3 >= 0; $l3--) {
          r = $l3;
          if (ListA.IndexOf(this.Get(r)) >= 0) this.Delete(r);
        };
      };
    };
    this.DoAnd = function (ListA, ListB) {
      var r = 0;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.FCount - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) >= 0) this.Add(ListA.Get(r));
        };
      } else {
        for (var $l3 = this.FCount - 1; $l3 >= 0; $l3--) {
          r = $l3;
          if (ListA.IndexOf(this.Get(r)) < 0) this.Delete(r);
        };
      };
    };
    this.DoDestUnique = function (ListA, ListB) {
      var Self = this;
      function MoveElements(Src, Dest) {
        var r = 0;
        Self.Clear();
        for (var $l1 = 0, $end2 = Src.FCount - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (Dest.IndexOf(Src.Get(r)) < 0) Self.Add(Src.Get(r));
        };
      };
      var Dest = null;
      if (ListB != null) {
        MoveElements(ListB,ListA)}
       else Dest = $mod.TFPList.$create("Create");
      try {
        Dest.CopyMove(Self);
        MoveElements(ListA,Dest);
      } finally {
        Dest.$destroy("Destroy");
      };
    };
    this.DoOr = function (ListA, ListB) {
      if (ListB != null) {
        this.CopyMove(ListA);
        this.MergeMove(ListB);
      } else this.MergeMove(ListA);
    };
    this.DoXOr = function (ListA, ListB) {
      var r = 0;
      var l = null;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.FCount - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
        };
        for (var $l3 = 0, $end4 = ListB.FCount - 1; $l3 <= $end4; $l3++) {
          r = $l3;
          if (ListA.IndexOf(ListB.Get(r)) < 0) this.Add(ListB.Get(r));
        };
      } else {
        l = $mod.TFPList.$create("Create");
        try {
          l.CopyMove(this);
          for (var $l5 = this.FCount - 1; $l5 >= 0; $l5--) {
            r = $l5;
            if (ListA.IndexOf(this.Get(r)) >= 0) this.Delete(r);
          };
          for (var $l6 = 0, $end7 = ListA.FCount - 1; $l6 <= $end7; $l6++) {
            r = $l6;
            if (l.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
          };
        } finally {
          l.$destroy("Destroy");
        };
      };
    };
    this.Get = function (Index) {
      var Result = undefined;
      if ((Index < 0) || (Index >= this.FCount)) this.RaiseIndexError(Index);
      Result = this.FList[Index];
      return Result;
    };
    this.Put = function (Index, Item) {
      if ((Index < 0) || (Index >= this.FCount)) this.RaiseIndexError(Index);
      this.FList[Index] = Item;
    };
    this.SetCapacity = function (NewCapacity) {
      if (NewCapacity < this.FCount) this.$class.Error(pas.RTLConsts.SListCapacityError,"" + NewCapacity);
      if (NewCapacity === this.FCapacity) return;
      this.FList = rtl.arraySetLength(this.FList,undefined,NewCapacity);
      this.FCapacity = NewCapacity;
    };
    this.SetCount = function (NewCount) {
      if (NewCount < 0) this.$class.Error(pas.RTLConsts.SListCountError,"" + NewCount);
      if (NewCount > this.FCount) {
        if (NewCount > this.FCapacity) this.SetCapacity(NewCount);
      };
      this.FCount = NewCount;
    };
    this.RaiseIndexError = function (Index) {
      this.$class.Error(pas.RTLConsts.SListIndexError,"" + Index);
    };
    this.Destroy = function () {
      this.Clear();
      pas.System.TObject.Destroy.call(this);
    };
    this.AddList = function (AList) {
      var I = 0;
      if (this.FCapacity < (this.FCount + AList.FCount)) this.SetCapacity(this.FCount + AList.FCount);
      for (var $l1 = 0, $end2 = AList.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.Add(AList.Get(I));
      };
    };
    this.Add = function (Item) {
      var Result = 0;
      if (this.FCount === this.FCapacity) this.Expand();
      this.FList[this.FCount] = Item;
      Result = this.FCount;
      this.FCount += 1;
      return Result;
    };
    this.Clear = function () {
      if (rtl.length(this.FList) > 0) {
        this.SetCount(0);
        this.SetCapacity(0);
      };
    };
    this.Delete = function (Index) {
      if ((Index < 0) || (Index >= this.FCount)) this.$class.Error(pas.RTLConsts.SListIndexError,"" + Index);
      this.FCount = this.FCount - 1;
      this.FList.splice(Index,1);
      this.FCapacity -= 1;
    };
    this.Error = function (Msg, Data) {
      throw $mod.EListError.$create("CreateFmt",[Msg,[Data]]);
    };
    this.Exchange = function (Index1, Index2) {
      var Temp = undefined;
      if ((Index1 >= this.FCount) || (Index1 < 0)) this.$class.Error(pas.RTLConsts.SListIndexError,"" + Index1);
      if ((Index2 >= this.FCount) || (Index2 < 0)) this.$class.Error(pas.RTLConsts.SListIndexError,"" + Index2);
      Temp = this.FList[Index1];
      this.FList[Index1] = this.FList[Index2];
      this.FList[Index2] = Temp;
    };
    this.Expand = function () {
      var Result = null;
      var IncSize = 0;
      if (this.FCount < this.FCapacity) return this;
      IncSize = 4;
      if (this.FCapacity > 3) IncSize = IncSize + 4;
      if (this.FCapacity > 8) IncSize = IncSize + 8;
      if (this.FCapacity > 127) IncSize += this.FCapacity >>> 2;
      this.SetCapacity(this.FCapacity + IncSize);
      Result = this;
      return Result;
    };
    this.Extract = function (Item) {
      var Result = undefined;
      var i = 0;
      i = this.IndexOf(Item);
      if (i >= 0) {
        Result = Item;
        this.Delete(i);
      } else Result = null;
      return Result;
    };
    this.First = function () {
      var Result = undefined;
      if (this.FCount === 0) {
        Result = null}
       else Result = this.Get(0);
      return Result;
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TFPListEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.IndexOf = function (Item) {
      var Result = 0;
      var C = 0;
      Result = 0;
      C = this.FCount;
      while ((Result < C) && (this.FList[Result] != Item)) Result += 1;
      if (Result >= C) Result = -1;
      return Result;
    };
    this.IndexOfItem = function (Item, Direction) {
      var Result = 0;
      if (Direction === pas.Types.TDirection.FromBeginning) {
        Result = this.IndexOf(Item)}
       else {
        Result = this.FCount - 1;
        while ((Result >= 0) && (this.FList[Result] != Item)) Result = Result - 1;
      };
      return Result;
    };
    this.Insert = function (Index, Item) {
      if ((Index < 0) || (Index > this.FCount)) this.$class.Error(pas.RTLConsts.SListIndexError,"" + Index);
      this.FList.splice(Index,0,Item);
      this.FCapacity += 1;
      this.FCount += 1;
    };
    this.Last = function () {
      var Result = undefined;
      if (this.FCount === 0) {
        Result = null}
       else Result = this.Get(this.FCount - 1);
      return Result;
    };
    this.Move = function (CurIndex, NewIndex) {
      var Temp = undefined;
      if ((CurIndex < 0) || (CurIndex > (this.FCount - 1))) this.$class.Error(pas.RTLConsts.SListIndexError,"" + CurIndex);
      if ((NewIndex < 0) || (NewIndex > (this.FCount - 1))) this.$class.Error(pas.RTLConsts.SListIndexError,"" + NewIndex);
      if (CurIndex === NewIndex) return;
      Temp = this.FList[CurIndex];
      this.FList.splice(CurIndex,1);
      this.FList.splice(NewIndex,0,Temp);
    };
    this.Assign = function (ListA, AOperator, ListB) {
      var $tmp1 = AOperator;
      if ($tmp1 === $mod.TListAssignOp.laCopy) {
        this.DoCopy(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laSrcUnique) {
        this.DoSrcUnique(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laAnd) {
        this.DoAnd(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laDestUnique) {
        this.DoDestUnique(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laOr) {
        this.DoOr(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laXor) this.DoXOr(ListA,ListB);
    };
    this.Remove = function (Item) {
      var Result = 0;
      Result = this.IndexOf(Item);
      if (Result !== -1) this.Delete(Result);
      return Result;
    };
    this.Pack = function () {
      var Dst = 0;
      var i = 0;
      var V = undefined;
      Dst = 0;
      for (var $l1 = 0, $end2 = this.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        V = this.FList[i];
        if (!pas.System.Assigned(V)) continue;
        this.FList[Dst] = V;
        Dst += 1;
      };
    };
    this.Sort = function (Compare) {
      if (!(rtl.length(this.FList) > 0) || (this.FCount < 2)) return;
      $impl.QuickSort(this.FList,0,this.FCount - 1,Compare);
    };
    this.ForEachCall = function (proc2call, arg) {
      var i = 0;
      var v = undefined;
      for (var $l1 = 0, $end2 = this.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        v = this.FList[i];
        if (pas.System.Assigned(v)) proc2call(v,arg);
      };
    };
    this.ForEachCall$1 = function (proc2call, arg) {
      var i = 0;
      var v = undefined;
      for (var $l1 = 0, $end2 = this.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        v = this.FList[i];
        if (pas.System.Assigned(v)) proc2call(v,arg);
      };
    };
  });
  this.TListNotification = {"0": "lnAdded", lnAdded: 0, "1": "lnExtracted", lnExtracted: 1, "2": "lnDeleted", lnDeleted: 2};
  $mod.$rtti.$Enum("TListNotification",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TListNotification});
  $mod.$rtti.$Class("TList");
  rtl.createClass($mod,"TListEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AList) {
      pas.System.TObject.Create.call(this);
      this.FList = AList;
      this.FPosition = -1;
    };
    this.GetCurrent = function () {
      var Result = undefined;
      Result = this.FList.Get(this.FPosition);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FPosition += 1;
      Result = this.FPosition < this.FList.GetCount();
      return Result;
    };
  });
  rtl.createClass($mod,"TList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = null;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.CopyMove = function (aList) {
      var r = 0;
      this.Clear();
      for (var $l1 = 0, $end2 = aList.GetCount() - 1; $l1 <= $end2; $l1++) {
        r = $l1;
        this.Add(aList.Get(r));
      };
    };
    this.MergeMove = function (aList) {
      var r = 0;
      for (var $l1 = 0, $end2 = aList.GetCount() - 1; $l1 <= $end2; $l1++) {
        r = $l1;
        if (this.IndexOf(aList.Get(r)) < 0) this.Add(aList.Get(r));
      };
    };
    this.DoCopy = function (ListA, ListB) {
      if (ListB != null) {
        this.CopyMove(ListB)}
       else this.CopyMove(ListA);
    };
    this.DoSrcUnique = function (ListA, ListB) {
      var r = 0;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.GetCount() - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
        };
      } else {
        for (var $l3 = this.GetCount() - 1; $l3 >= 0; $l3--) {
          r = $l3;
          if (ListA.IndexOf(this.Get(r)) >= 0) this.Delete(r);
        };
      };
    };
    this.DoAnd = function (ListA, ListB) {
      var r = 0;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.GetCount() - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) >= 0) this.Add(ListA.Get(r));
        };
      } else {
        for (var $l3 = this.GetCount() - 1; $l3 >= 0; $l3--) {
          r = $l3;
          if (ListA.IndexOf(this.Get(r)) < 0) this.Delete(r);
        };
      };
    };
    this.DoDestUnique = function (ListA, ListB) {
      var Self = this;
      function MoveElements(Src, Dest) {
        var r = 0;
        Self.Clear();
        for (var $l1 = 0, $end2 = Src.GetCount() - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (Dest.IndexOf(Src.Get(r)) < 0) Self.Add(Src.Get(r));
        };
      };
      var Dest = null;
      if (ListB != null) {
        MoveElements(ListB,ListA)}
       else try {
        Dest = $mod.TList.$create("Create$1");
        Dest.CopyMove(Self);
        MoveElements(ListA,Dest);
      } finally {
        Dest.$destroy("Destroy");
      };
    };
    this.DoOr = function (ListA, ListB) {
      if (ListB != null) {
        this.CopyMove(ListA);
        this.MergeMove(ListB);
      } else this.MergeMove(ListA);
    };
    this.DoXOr = function (ListA, ListB) {
      var r = 0;
      var l = null;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.GetCount() - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
        };
        for (var $l3 = 0, $end4 = ListB.GetCount() - 1; $l3 <= $end4; $l3++) {
          r = $l3;
          if (ListA.IndexOf(ListB.Get(r)) < 0) this.Add(ListB.Get(r));
        };
      } else try {
        l = $mod.TList.$create("Create$1");
        l.CopyMove(this);
        for (var $l5 = this.GetCount() - 1; $l5 >= 0; $l5--) {
          r = $l5;
          if (ListA.IndexOf(this.Get(r)) >= 0) this.Delete(r);
        };
        for (var $l6 = 0, $end7 = ListA.GetCount() - 1; $l6 <= $end7; $l6++) {
          r = $l6;
          if (l.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
        };
      } finally {
        l.$destroy("Destroy");
      };
    };
    this.Get = function (Index) {
      var Result = undefined;
      Result = this.FList.Get(Index);
      return Result;
    };
    this.Put = function (Index, Item) {
      var V = undefined;
      V = this.Get(Index);
      this.FList.Put(Index,Item);
      if (pas.System.Assigned(V)) this.Notify(V,$mod.TListNotification.lnDeleted);
      if (pas.System.Assigned(Item)) this.Notify(Item,$mod.TListNotification.lnAdded);
    };
    this.Notify = function (aValue, Action) {
      if (pas.System.Assigned(aValue)) ;
      if (Action === $mod.TListNotification.lnExtracted) ;
    };
    this.SetCapacity = function (NewCapacity) {
      this.FList.SetCapacity(NewCapacity);
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = this.FList.FCapacity;
      return Result;
    };
    this.SetCount = function (NewCount) {
      if (NewCount < this.FList.FCount) {
        while (this.FList.FCount > NewCount) this.Delete(this.FList.FCount - 1)}
       else this.FList.SetCount(NewCount);
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FList.FCount;
      return Result;
    };
    this.GetList = function () {
      var Result = [];
      Result = this.FList.FList;
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FList = $mod.TFPList.$create("Create");
    };
    this.Destroy = function () {
      if (this.FList != null) this.Clear();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FList;
        }, set: function (v) {
          this.p.FList = v;
        }});
    };
    this.AddList = function (AList) {
      var I = 0;
      this.FList.AddList(AList.FList);
      for (var $l1 = 0, $end2 = AList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas.System.Assigned(AList.Get(I))) this.Notify(AList.Get(I),$mod.TListNotification.lnAdded);
      };
    };
    this.Add = function (Item) {
      var Result = 0;
      Result = this.FList.Add(Item);
      if (pas.System.Assigned(Item)) this.Notify(Item,$mod.TListNotification.lnAdded);
      return Result;
    };
    this.Clear = function () {
      while (this.FList.FCount > 0) this.Delete(this.GetCount() - 1);
    };
    this.Delete = function (Index) {
      var V = undefined;
      V = this.FList.Get(Index);
      this.FList.Delete(Index);
      if (pas.System.Assigned(V)) this.Notify(V,$mod.TListNotification.lnDeleted);
    };
    this.Error = function (Msg, Data) {
      throw $mod.EListError.$create("CreateFmt",[Msg,[Data]]);
    };
    this.Exchange = function (Index1, Index2) {
      this.FList.Exchange(Index1,Index2);
    };
    this.Expand = function () {
      var Result = null;
      this.FList.Expand();
      Result = this;
      return Result;
    };
    this.Extract = function (Item) {
      var Result = undefined;
      var c = 0;
      c = this.FList.FCount;
      Result = this.FList.Extract(Item);
      if (c !== this.FList.FCount) this.Notify(Result,$mod.TListNotification.lnExtracted);
      return Result;
    };
    this.First = function () {
      var Result = undefined;
      Result = this.FList.First();
      return Result;
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TListEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.IndexOf = function (Item) {
      var Result = 0;
      Result = this.FList.IndexOf(Item);
      return Result;
    };
    this.Insert = function (Index, Item) {
      this.FList.Insert(Index,Item);
      if (pas.System.Assigned(Item)) this.Notify(Item,$mod.TListNotification.lnAdded);
    };
    this.Last = function () {
      var Result = undefined;
      Result = this.FList.Last();
      return Result;
    };
    this.Move = function (CurIndex, NewIndex) {
      this.FList.Move(CurIndex,NewIndex);
    };
    this.Assign = function (ListA, AOperator, ListB) {
      var $tmp1 = AOperator;
      if ($tmp1 === $mod.TListAssignOp.laCopy) {
        this.DoCopy(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laSrcUnique) {
        this.DoSrcUnique(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laAnd) {
        this.DoAnd(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laDestUnique) {
        this.DoDestUnique(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laOr) {
        this.DoOr(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laXor) this.DoXOr(ListA,ListB);
    };
    this.Remove = function (Item) {
      var Result = 0;
      Result = this.IndexOf(Item);
      if (Result !== -1) this.Delete(Result);
      return Result;
    };
    this.Pack = function () {
      this.FList.Pack();
    };
    this.Sort = function (Compare) {
      this.FList.Sort(Compare);
    };
  });
  rtl.createClass($mod,"TPersistent",pas.System.TObject,function () {
    this.AssignError = function (Source) {
      var SourceName = "";
      if (Source !== null) {
        SourceName = Source.$classname}
       else SourceName = "Nil";
      throw pas.SysUtils.EConvertError.$create("Create$1",[((("Cannot assign a " + SourceName) + " to a ") + this.$classname) + "."]);
    };
    this.AssignTo = function (Dest) {
      Dest.AssignError(this);
    };
    this.GetOwner = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.Assign = function (Source) {
      if (Source !== null) {
        Source.AssignTo(this)}
       else this.AssignError(null);
    };
    this.GetNamePath = function () {
      var Result = "";
      var OwnerName = "";
      var TheOwner = null;
      Result = this.$classname;
      TheOwner = this.GetOwner();
      if (TheOwner !== null) {
        OwnerName = TheOwner.GetNamePath();
        if (OwnerName !== "") Result = (OwnerName + ".") + Result;
      };
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("TPersistentClass",{instancetype: $mod.$rtti["TPersistent"]});
  rtl.createClass($mod,"TInterfacedPersistent",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FOwnerInterface = null;
    };
    this.$final = function () {
      this.FOwnerInterface = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this._AddRef = function () {
      var Result = 0;
      Result = -1;
      if (this.FOwnerInterface != null) Result = this.FOwnerInterface._AddRef();
      return Result;
    };
    this._Release = function () {
      var Result = 0;
      Result = -1;
      if (this.FOwnerInterface != null) Result = this.FOwnerInterface._Release();
      return Result;
    };
    this.QueryInterface = function (IID, Obj) {
      var Result = 0;
      Result = -2147467262;
      if (this.GetInterface(IID,Obj)) Result = 0;
      return Result;
    };
    this.AfterConstruction = function () {
      try {
        pas.System.TObject.AfterConstruction.call(this);
        if (this.GetOwner() !== null) this.GetOwner().GetInterface(rtl.getIntfGUIDR(pas.System.IUnknown),{p: this, get: function () {
            return this.p.FOwnerInterface;
          }, set: function (v) {
            this.p.FOwnerInterface = v;
          }});
      } finally {
        rtl._Release(this.FOwnerInterface);
      };
    };
  });
  $mod.$rtti.$Class("TStrings");
  rtl.createClass($mod,"TStringsEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FStrings = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FStrings = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AStrings) {
      pas.System.TObject.Create.call(this);
      this.FStrings = AStrings;
      this.FPosition = -1;
    };
    this.GetCurrent = function () {
      var Result = "";
      Result = this.FStrings.Get(this.FPosition);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FPosition += 1;
      Result = this.FPosition < this.FStrings.GetCount();
      return Result;
    };
  });
  rtl.createClass($mod,"TStrings",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FSpecialCharsInited = false;
      this.FAlwaysQuote = false;
      this.FQuoteChar = "";
      this.FDelimiter = "";
      this.FNameValueSeparator = "";
      this.FUpdateCount = 0;
      this.FLBS = 0;
      this.FSkipLastLineBreak = false;
      this.FStrictDelimiter = false;
      this.FLineBreak = "";
    };
    this.GetCommaText = function () {
      var Result = "";
      var C1 = "";
      var C2 = "";
      var FSD = false;
      this.CheckSpecialChars();
      FSD = this.FStrictDelimiter;
      C1 = this.GetDelimiter();
      C2 = this.GetQuoteChar();
      this.SetDelimiter(",");
      this.SetQuoteChar('"');
      this.FStrictDelimiter = false;
      try {
        Result = this.GetDelimitedText();
      } finally {
        this.SetDelimiter(C1);
        this.SetQuoteChar(C2);
        this.FStrictDelimiter = FSD;
      };
      return Result;
    };
    this.GetName = function (Index) {
      var Result = "";
      var V = "";
      this.GetNameValue(Index,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},{get: function () {
          return V;
        }, set: function (v) {
          V = v;
        }});
      return Result;
    };
    this.GetValue = function (Name) {
      var Result = "";
      var L = 0;
      var N = "";
      Result = "";
      L = this.IndexOfName(Name);
      if (L !== -1) this.GetNameValue(L,{get: function () {
          return N;
        }, set: function (v) {
          N = v;
        }},{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.GetLBS = function () {
      var Result = 0;
      this.CheckSpecialChars();
      Result = this.FLBS;
      return Result;
    };
    this.SetLBS = function (AValue) {
      this.CheckSpecialChars();
      this.FLBS = AValue;
    };
    this.SetCommaText = function (Value) {
      var C1 = "";
      var C2 = "";
      this.CheckSpecialChars();
      C1 = this.GetDelimiter();
      C2 = this.GetQuoteChar();
      this.SetDelimiter(",");
      this.SetQuoteChar('"');
      try {
        this.SetDelimitedText(Value);
      } finally {
        this.SetDelimiter(C1);
        this.SetQuoteChar(C2);
      };
    };
    this.SetValue = function (Name, Value) {
      var L = 0;
      this.CheckSpecialChars();
      L = this.IndexOfName(Name);
      if (L === -1) {
        this.Add((Name + this.FNameValueSeparator) + Value)}
       else this.Put(L,(Name + this.FNameValueSeparator) + Value);
    };
    this.SetDelimiter = function (c) {
      this.CheckSpecialChars();
      this.FDelimiter = c;
    };
    this.SetQuoteChar = function (c) {
      this.CheckSpecialChars();
      this.FQuoteChar = c;
    };
    this.SetNameValueSeparator = function (c) {
      this.CheckSpecialChars();
      this.FNameValueSeparator = c;
    };
    this.DoSetTextStr = function (Value, DoClear) {
      var S = "";
      var P = 0;
      try {
        this.BeginUpdate();
        if (DoClear) this.Clear();
        P = 1;
        while (this.GetNextLinebreak(Value,{get: function () {
            return S;
          }, set: function (v) {
            S = v;
          }},{get: function () {
            return P;
          }, set: function (v) {
            P = v;
          }})) this.Add(S);
      } finally {
        this.EndUpdate();
      };
    };
    this.GetDelimiter = function () {
      var Result = "";
      this.CheckSpecialChars();
      Result = this.FDelimiter;
      return Result;
    };
    this.GetNameValueSeparator = function () {
      var Result = "";
      this.CheckSpecialChars();
      Result = this.FNameValueSeparator;
      return Result;
    };
    this.GetQuoteChar = function () {
      var Result = "";
      this.CheckSpecialChars();
      Result = this.FQuoteChar;
      return Result;
    };
    this.GetLineBreak = function () {
      var Result = "";
      this.CheckSpecialChars();
      Result = this.FLineBreak;
      return Result;
    };
    this.SetLineBreak = function (S) {
      this.CheckSpecialChars();
      this.FLineBreak = S;
    };
    this.GetSkipLastLineBreak = function () {
      var Result = false;
      this.CheckSpecialChars();
      Result = this.FSkipLastLineBreak;
      return Result;
    };
    this.SetSkipLastLineBreak = function (AValue) {
      this.CheckSpecialChars();
      this.FSkipLastLineBreak = AValue;
    };
    this.Error = function (Msg, Data) {
      throw $mod.EStringListError.$create("CreateFmt",[Msg,[pas.SysUtils.IntToStr(Data)]]);
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = this.GetCount();
      return Result;
    };
    this.GetObject = function (Index) {
      var Result = null;
      if (Index === 0) ;
      Result = null;
      return Result;
    };
    this.GetTextStr = function () {
      var Result = "";
      var I = 0;
      var S = "";
      var NL = "";
      this.CheckSpecialChars();
      if (this.FLineBreak !== pas.System.sLineBreak) {
        NL = this.FLineBreak}
       else {
        var $tmp1 = this.FLBS;
        if ($tmp1 === pas.System.TTextLineBreakStyle.tlbsLF) {
          NL = "\n"}
         else if ($tmp1 === pas.System.TTextLineBreakStyle.tlbsCRLF) {
          NL = "\r\n"}
         else if ($tmp1 === pas.System.TTextLineBreakStyle.tlbsCR) NL = "\r";
      };
      Result = "";
      for (var $l2 = 0, $end3 = this.GetCount() - 1; $l2 <= $end3; $l2++) {
        I = $l2;
        S = this.Get(I);
        Result = Result + S;
        if ((I < (this.GetCount() - 1)) || !this.GetSkipLastLineBreak()) Result = Result + NL;
      };
      return Result;
    };
    this.Put = function (Index, S) {
      var Obj = null;
      Obj = this.GetObject(Index);
      this.Delete(Index);
      this.InsertObject(Index,S,Obj);
    };
    this.PutObject = function (Index, AObject) {
      if (Index === 0) return;
      if (AObject === null) return;
    };
    this.SetCapacity = function (NewCapacity) {
      if (NewCapacity === 0) ;
    };
    this.SetTextStr = function (Value) {
      this.CheckSpecialChars();
      this.DoSetTextStr(Value,true);
    };
    this.SetUpdateState = function (Updating) {
      if (Updating) ;
    };
    this.DoCompareText = function (s1, s2) {
      var Result = 0;
      Result = pas.SysUtils.CompareText(s1,s2);
      return Result;
    };
    this.GetDelimitedText = function () {
      var Result = "";
      var I = 0;
      var RE = "";
      var S = "";
      var doQuote = false;
      this.CheckSpecialChars();
      Result = "";
      RE = (this.GetQuoteChar() + "|") + this.GetDelimiter();
      if (!this.FStrictDelimiter) RE = " |" + RE;
      RE = ("\/" + RE) + "\/";
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        S = this.Get(I);
        doQuote = this.FAlwaysQuote || (S.search(RE) === -1);
        if (doQuote) {
          Result = Result + pas.SysUtils.QuoteString(S,this.GetQuoteChar())}
         else Result = Result + S;
        if (I < (this.GetCount() - 1)) Result = Result + this.GetDelimiter();
      };
      if ((Result.length === 0) && (this.GetCount() === 1)) Result = this.GetQuoteChar() + this.GetQuoteChar();
      return Result;
    };
    this.SetDelimitedText = function (AValue) {
      var i = 0;
      var j = 0;
      var aNotFirst = false;
      this.CheckSpecialChars();
      this.BeginUpdate();
      i = 1;
      j = 1;
      aNotFirst = false;
      try {
        this.Clear();
        if (this.FStrictDelimiter) {
          while (i <= AValue.length) {
            if ((aNotFirst && (i <= AValue.length)) && (AValue.charAt(i - 1) === this.FDelimiter)) i += 1;
            if (i <= AValue.length) {
              if (AValue.charAt(i - 1) === this.FQuoteChar) {
                j = i + 1;
                while ((j <= AValue.length) && ((AValue.charAt(j - 1) !== this.FQuoteChar) || (((j + 1) <= AValue.length) && (AValue.charAt((j + 1) - 1) === this.FQuoteChar)))) {
                  if ((j <= AValue.length) && (AValue.charAt(j - 1) === this.FQuoteChar)) {
                    j += 2}
                   else j += 1;
                };
                this.Add(pas.SysUtils.StringReplace(pas.System.Copy(AValue,i + 1,(j - i) - 1),this.FQuoteChar + this.FQuoteChar,this.FQuoteChar,rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
                i = j + 1;
              } else {
                j = i;
                while ((j <= AValue.length) && (AValue.charAt(j - 1) !== this.FDelimiter)) j += 1;
                this.Add(pas.System.Copy(AValue,i,j - i));
                i = j;
              };
            } else {
              if (aNotFirst) this.Add("");
            };
            aNotFirst = true;
          };
        } else {
          while (i <= AValue.length) {
            if ((aNotFirst && (i <= AValue.length)) && (AValue.charAt(i - 1) === this.FDelimiter)) i += 1;
            while ((i <= AValue.length) && (AValue.charCodeAt(i - 1) <= " ".charCodeAt())) i += 1;
            if (i <= AValue.length) {
              if (AValue.charAt(i - 1) === this.FQuoteChar) {
                j = i + 1;
                while ((j <= AValue.length) && ((AValue.charAt(j - 1) !== this.FQuoteChar) || (((j + 1) <= AValue.length) && (AValue.charAt((j + 1) - 1) === this.FQuoteChar)))) {
                  if ((j <= AValue.length) && (AValue.charAt(j - 1) === this.FQuoteChar)) {
                    j += 2}
                   else j += 1;
                };
                this.Add(pas.SysUtils.StringReplace(pas.System.Copy(AValue,i + 1,(j - i) - 1),this.FQuoteChar + this.FQuoteChar,this.FQuoteChar,rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
                i = j + 1;
              } else {
                j = i;
                while (((j <= AValue.length) && (AValue.charCodeAt(j - 1) > " ".charCodeAt())) && (AValue.charAt(j - 1) !== this.FDelimiter)) j += 1;
                this.Add(pas.System.Copy(AValue,i,j - i));
                i = j;
              };
            } else {
              if (aNotFirst) this.Add("");
            };
            while ((i <= AValue.length) && (AValue.charCodeAt(i - 1) <= " ".charCodeAt())) i += 1;
            aNotFirst = true;
          };
        };
      } finally {
        this.EndUpdate();
      };
    };
    this.GetValueFromIndex = function (Index) {
      var Result = "";
      var N = "";
      this.GetNameValue(Index,{get: function () {
          return N;
        }, set: function (v) {
          N = v;
        }},{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.SetValueFromIndex = function (Index, Value) {
      if (Value === "") {
        this.Delete(Index)}
       else {
        if (Index < 0) Index = this.Add("");
        this.CheckSpecialChars();
        this.Put(Index,(this.GetName(Index) + this.FNameValueSeparator) + Value);
      };
    };
    this.CheckSpecialChars = function () {
      if (!this.FSpecialCharsInited) {
        this.FQuoteChar = '"';
        this.FDelimiter = ",";
        this.FNameValueSeparator = "=";
        this.FLBS = pas.System.DefaultTextLineBreakStyle;
        this.FSpecialCharsInited = true;
        this.FLineBreak = pas.System.sLineBreak;
      };
    };
    this.GetNextLinebreak = function (Value, S, P) {
      var Result = false;
      var PP = 0;
      S.set("");
      Result = false;
      if ((Value.length - P.get()) < 0) return Result;
      PP = Value.indexOf(this.GetLineBreak(),P.get() - 1) + 1;
      if (PP < 1) PP = Value.length + 1;
      S.set(pas.System.Copy(Value,P.get(),PP - P.get()));
      P.set(PP + this.GetLineBreak().length);
      Result = true;
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FAlwaysQuote = false;
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.Add = function (S) {
      var Result = 0;
      Result = this.GetCount();
      this.Insert(this.GetCount(),S);
      return Result;
    };
    this.AddObject = function (S, AObject) {
      var Result = 0;
      Result = this.Add(S);
      this.PutObject(Result,AObject);
      return Result;
    };
    this.Append = function (S) {
      this.Add(S);
    };
    this.AddStrings = function (TheStrings) {
      var Runner = 0;
      for (var $l1 = 0, $end2 = TheStrings.GetCount() - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        this.AddObject(TheStrings.Get(Runner),TheStrings.GetObject(Runner));
      };
    };
    this.AddStrings$1 = function (TheStrings, ClearFirst) {
      this.BeginUpdate();
      try {
        if (ClearFirst) this.Clear();
        this.AddStrings(TheStrings);
      } finally {
        this.EndUpdate();
      };
    };
    this.AddStrings$2 = function (TheStrings) {
      var Runner = 0;
      if (((this.GetCount() + (rtl.length(TheStrings) - 1)) + 1) > this.GetCapacity()) this.SetCapacity((this.GetCount() + (rtl.length(TheStrings) - 1)) + 1);
      for (var $l1 = 0, $end2 = rtl.length(TheStrings) - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        this.Add(TheStrings[Runner]);
      };
    };
    this.AddStrings$3 = function (TheStrings, ClearFirst) {
      this.BeginUpdate();
      try {
        if (ClearFirst) this.Clear();
        this.AddStrings$2(TheStrings);
      } finally {
        this.EndUpdate();
      };
    };
    this.AddPair = function (AName, AValue) {
      var Result = null;
      Result = this.AddPair$1(AName,AValue,null);
      return Result;
    };
    this.AddPair$1 = function (AName, AValue, AObject) {
      var Result = null;
      Result = this;
      this.AddObject((AName + this.GetNameValueSeparator()) + AValue,AObject);
      return Result;
    };
    this.AddText = function (S) {
      this.CheckSpecialChars();
      this.DoSetTextStr(S,false);
    };
    this.Assign = function (Source) {
      var S = null;
      if ($mod.TStrings.isPrototypeOf(Source)) {
        S = Source;
        this.BeginUpdate();
        try {
          this.Clear();
          this.FSpecialCharsInited = S.FSpecialCharsInited;
          this.FQuoteChar = S.FQuoteChar;
          this.FDelimiter = S.FDelimiter;
          this.FNameValueSeparator = S.FNameValueSeparator;
          this.FLBS = S.FLBS;
          this.FLineBreak = S.FLineBreak;
          this.AddStrings(S);
        } finally {
          this.EndUpdate();
        };
      } else $mod.TPersistent.Assign.call(this,Source);
    };
    this.BeginUpdate = function () {
      if (this.FUpdateCount === 0) this.SetUpdateState(true);
      this.FUpdateCount += 1;
    };
    this.EndUpdate = function () {
      if (this.FUpdateCount > 0) this.FUpdateCount -= 1;
      if (this.FUpdateCount === 0) this.SetUpdateState(false);
    };
    this.Equals = function (Obj) {
      var Result = false;
      if ($mod.TStrings.isPrototypeOf(Obj)) {
        Result = this.Equals$2(Obj)}
       else Result = pas.System.TObject.Equals.call(this,Obj);
      return Result;
    };
    this.Equals$2 = function (TheStrings) {
      var Result = false;
      var Runner = 0;
      var Nr = 0;
      Result = false;
      Nr = this.GetCount();
      if (Nr !== TheStrings.GetCount()) return Result;
      for (var $l1 = 0, $end2 = Nr - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        if (this.Get(Runner) !== TheStrings.Get(Runner)) return Result;
      };
      Result = true;
      return Result;
    };
    this.Exchange = function (Index1, Index2) {
      var Obj = null;
      var Str = "";
      this.BeginUpdate();
      try {
        Obj = this.GetObject(Index1);
        Str = this.Get(Index1);
        this.PutObject(Index1,this.GetObject(Index2));
        this.Put(Index1,this.Get(Index2));
        this.PutObject(Index2,Obj);
        this.Put(Index2,Str);
      } finally {
        this.EndUpdate();
      };
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TStringsEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.IndexOf = function (S) {
      var Result = 0;
      Result = 0;
      while ((Result < this.GetCount()) && (this.DoCompareText(this.Get(Result),S) !== 0)) Result = Result + 1;
      if (Result === this.GetCount()) Result = -1;
      return Result;
    };
    this.IndexOfName = function (Name) {
      var Result = 0;
      var len = 0;
      var S = "";
      this.CheckSpecialChars();
      Result = 0;
      while (Result < this.GetCount()) {
        S = this.Get(Result);
        len = pas.System.Pos(this.FNameValueSeparator,S) - 1;
        if ((len >= 0) && (this.DoCompareText(Name,pas.System.Copy(S,1,len)) === 0)) return Result;
        Result += 1;
      };
      Result = -1;
      return Result;
    };
    this.IndexOfObject = function (AObject) {
      var Result = 0;
      Result = 0;
      while ((Result < this.GetCount()) && (this.GetObject(Result) !== AObject)) Result = Result + 1;
      if (Result === this.GetCount()) Result = -1;
      return Result;
    };
    this.InsertObject = function (Index, S, AObject) {
      this.Insert(Index,S);
      this.PutObject(Index,AObject);
    };
    this.Move = function (CurIndex, NewIndex) {
      var Obj = null;
      var Str = "";
      this.BeginUpdate();
      try {
        Obj = this.GetObject(CurIndex);
        Str = this.Get(CurIndex);
        this.PutObject(CurIndex,null);
        this.Delete(CurIndex);
        this.InsertObject(NewIndex,Str,Obj);
      } finally {
        this.EndUpdate();
      };
    };
    this.GetNameValue = function (Index, AName, AValue) {
      var L = 0;
      this.CheckSpecialChars();
      AValue.set(this.Get(Index));
      L = pas.System.Pos(this.FNameValueSeparator,AValue.get());
      if (L !== 0) {
        AName.set(pas.System.Copy(AValue.get(),1,L - 1));
        AValue.set(pas.System.Copy(AValue.get(),L + 1,AValue.get().length - L));
      } else AName.set("");
    };
    this.ExtractName = function (S) {
      var Result = "";
      var L = 0;
      this.CheckSpecialChars();
      L = pas.System.Pos(this.FNameValueSeparator,S);
      if (L !== 0) {
        Result = pas.System.Copy(S,1,L - 1)}
       else Result = "";
      return Result;
    };
  });
  this.TStringItem = function (s) {
    if (s) {
      this.FString = s.FString;
      this.FObject = s.FObject;
    } else {
      this.FString = "";
      this.FObject = null;
    };
    this.$equal = function (b) {
      return (this.FString === b.FString) && (this.FObject === b.FObject);
    };
  };
  $mod.$rtti.$Record("TStringItem",{}).addFields("FString",rtl.string,"FObject",pas.System.$rtti["TObject"]);
  $mod.$rtti.$DynArray("TStringItemArray",{eltype: $mod.$rtti["TStringItem"]});
  $mod.$rtti.$Class("TStringList");
  $mod.$rtti.$ProcVar("TStringListSortCompare",{procsig: rtl.newTIProcSig([["List",$mod.$rtti["TStringList"]],["Index1",rtl.longint],["Index2",rtl.longint]],rtl.longint)});
  this.TStringsSortStyle = {"0": "sslNone", sslNone: 0, "1": "sslUser", sslUser: 1, "2": "sslAuto", sslAuto: 2};
  $mod.$rtti.$Enum("TStringsSortStyle",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TStringsSortStyle});
  $mod.$rtti.$Set("TStringsSortStyles",{comptype: $mod.$rtti["TStringsSortStyle"]});
  rtl.createClass($mod,"TStringList",$mod.TStrings,function () {
    this.$init = function () {
      $mod.TStrings.$init.call(this);
      this.FList = [];
      this.FCount = 0;
      this.FOnChange = null;
      this.FOnChanging = null;
      this.FDuplicates = 0;
      this.FCaseSensitive = false;
      this.FForceSort = false;
      this.FOwnsObjects = false;
      this.FSortStyle = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      this.FOnChange = undefined;
      this.FOnChanging = undefined;
      $mod.TStrings.$final.call(this);
    };
    this.ExchangeItemsInt = function (Index1, Index2) {
      var S = "";
      var O = null;
      S = this.FList[Index1].FString;
      O = this.FList[Index1].FObject;
      this.FList[Index1].FString = this.FList[Index2].FString;
      this.FList[Index1].FObject = this.FList[Index2].FObject;
      this.FList[Index2].FString = S;
      this.FList[Index2].FObject = O;
    };
    this.GetSorted = function () {
      var Result = false;
      Result = this.FSortStyle in rtl.createSet($mod.TStringsSortStyle.sslUser,$mod.TStringsSortStyle.sslAuto);
      return Result;
    };
    this.Grow = function () {
      var NC = 0;
      NC = this.GetCapacity();
      if (NC >= 256) {
        NC = NC + Math.floor(NC / 4)}
       else if (NC === 0) {
        NC = 4}
       else NC = NC * 4;
      this.SetCapacity(NC);
    };
    this.InternalClear = function (FromIndex, ClearOnly) {
      var I = 0;
      if (FromIndex < this.FCount) {
        if (this.FOwnsObjects) {
          for (var $l1 = FromIndex, $end2 = this.FCount - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            this.FList[I].FString = "";
            pas.SysUtils.FreeAndNil({p: this.FList[I], get: function () {
                return this.p.FObject;
              }, set: function (v) {
                this.p.FObject = v;
              }});
          };
        } else {
          for (var $l3 = FromIndex, $end4 = this.FCount - 1; $l3 <= $end4; $l3++) {
            I = $l3;
            this.FList[I].FString = "";
          };
        };
        this.FCount = FromIndex;
      };
      if (!ClearOnly) this.SetCapacity(0);
    };
    this.QuickSort = function (L, R, CompareFn) {
      var Pivot = 0;
      var vL = 0;
      var vR = 0;
      if ((R - L) <= 1) {
        if (L < R) if (CompareFn(this,L,R) > 0) this.ExchangeItems(L,R);
        return;
      };
      vL = L;
      vR = R;
      Pivot = L + pas.System.Random(R - L);
      while (vL < vR) {
        while ((vL < Pivot) && (CompareFn(this,vL,Pivot) <= 0)) vL += 1;
        while ((vR > Pivot) && (CompareFn(this,vR,Pivot) > 0)) vR -= 1;
        this.ExchangeItems(vL,vR);
        if (Pivot === vL) {
          Pivot = vR}
         else if (Pivot === vR) Pivot = vL;
      };
      if ((Pivot - 1) >= L) this.QuickSort(L,Pivot - 1,CompareFn);
      if ((Pivot + 1) <= R) this.QuickSort(Pivot + 1,R,CompareFn);
    };
    this.SetSorted = function (Value) {
      if (Value) {
        this.SetSortStyle($mod.TStringsSortStyle.sslAuto)}
       else this.SetSortStyle($mod.TStringsSortStyle.sslNone);
    };
    this.SetCaseSensitive = function (b) {
      if (b === this.FCaseSensitive) return;
      this.FCaseSensitive = b;
      if (this.FSortStyle === $mod.TStringsSortStyle.sslAuto) {
        this.FForceSort = true;
        try {
          this.Sort();
        } finally {
          this.FForceSort = false;
        };
      };
    };
    this.SetSortStyle = function (AValue) {
      if (this.FSortStyle === AValue) return;
      if (AValue === $mod.TStringsSortStyle.sslAuto) this.Sort();
      this.FSortStyle = AValue;
    };
    this.CheckIndex = function (AIndex) {
      if ((AIndex < 0) || (AIndex >= this.FCount)) this.Error(pas.RTLConsts.SListIndexError,AIndex);
    };
    this.ExchangeItems = function (Index1, Index2) {
      this.ExchangeItemsInt(Index1,Index2);
    };
    this.Changed = function () {
      if (this.FUpdateCount === 0) {
        if (this.FOnChange != null) this.FOnChange(this);
      };
    };
    this.Changing = function () {
      if (this.FUpdateCount === 0) if (this.FOnChanging != null) this.FOnChanging(this);
    };
    this.Get = function (Index) {
      var Result = "";
      this.CheckIndex(Index);
      Result = this.FList[Index].FString;
      return Result;
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = rtl.length(this.FList);
      return Result;
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FCount;
      return Result;
    };
    this.GetObject = function (Index) {
      var Result = null;
      this.CheckIndex(Index);
      Result = this.FList[Index].FObject;
      return Result;
    };
    this.Put = function (Index, S) {
      if (this.GetSorted()) this.Error(pas.RTLConsts.SSortedListError,0);
      this.CheckIndex(Index);
      this.Changing();
      this.FList[Index].FString = S;
      this.Changed();
    };
    this.PutObject = function (Index, AObject) {
      this.CheckIndex(Index);
      this.Changing();
      this.FList[Index].FObject = AObject;
      this.Changed();
    };
    this.SetCapacity = function (NewCapacity) {
      if (NewCapacity < 0) this.Error(pas.RTLConsts.SListCapacityError,NewCapacity);
      if (NewCapacity !== this.GetCapacity()) this.FList = rtl.arraySetLength(this.FList,$mod.TStringItem,NewCapacity);
    };
    this.SetUpdateState = function (Updating) {
      if (Updating) {
        this.Changing()}
       else this.Changed();
    };
    this.InsertItem = function (Index, S) {
      this.InsertItem$1(Index,S,null);
    };
    this.InsertItem$1 = function (Index, S, O) {
      var It = new $mod.TStringItem();
      this.Changing();
      if (this.FCount === this.GetCapacity()) this.Grow();
      It.FString = S;
      It.FObject = O;
      this.FList.splice(Index,0,It);
      this.FCount += 1;
      this.Changed();
    };
    this.DoCompareText = function (s1, s2) {
      var Result = 0;
      if (this.FCaseSensitive) {
        Result = pas.SysUtils.CompareStr(s1,s2)}
       else Result = pas.SysUtils.CompareText(s1,s2);
      return Result;
    };
    this.CompareStrings = function (s1, s2) {
      var Result = 0;
      Result = this.DoCompareText(s1,s2);
      return Result;
    };
    this.Destroy = function () {
      this.InternalClear(0,false);
      $mod.TStrings.Destroy.call(this);
    };
    this.Add = function (S) {
      var Result = 0;
      if (!(this.FSortStyle === $mod.TStringsSortStyle.sslAuto)) {
        Result = this.FCount}
       else if (this.Find(S,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }})) {
        var $tmp1 = this.FDuplicates;
        if ($tmp1 === pas.Types.TDuplicates.dupIgnore) {
          return Result}
         else if ($tmp1 === pas.Types.TDuplicates.dupError) this.Error(pas.RTLConsts.SDuplicateString,0);
      };
      this.InsertItem(Result,S);
      return Result;
    };
    this.Clear = function () {
      if (this.FCount === 0) return;
      this.Changing();
      this.InternalClear(0,false);
      this.Changed();
    };
    this.Delete = function (Index) {
      this.CheckIndex(Index);
      this.Changing();
      if (this.FOwnsObjects) pas.SysUtils.FreeAndNil({p: this.FList[Index], get: function () {
          return this.p.FObject;
        }, set: function (v) {
          this.p.FObject = v;
        }});
      this.FList.splice(Index,1);
      this.FList[this.GetCount() - 1].FString = "";
      this.FList[this.GetCount() - 1].FObject = null;
      this.FCount -= 1;
      this.Changed();
    };
    this.Exchange = function (Index1, Index2) {
      this.CheckIndex(Index1);
      this.CheckIndex(Index2);
      this.Changing();
      this.ExchangeItemsInt(Index1,Index2);
      this.Changed();
    };
    this.Find = function (S, Index) {
      var Result = false;
      var L = 0;
      var R = 0;
      var I = 0;
      var CompareRes = 0;
      Result = false;
      Index.set(-1);
      if (!this.GetSorted()) throw $mod.EListError.$create("Create$1",[pas.RTLConsts.SErrFindNeedsSortedList]);
      L = 0;
      R = this.GetCount() - 1;
      while (L <= R) {
        I = L + Math.floor((R - L) / 2);
        CompareRes = this.DoCompareText(S,this.FList[I].FString);
        if (CompareRes > 0) {
          L = I + 1}
         else {
          R = I - 1;
          if (CompareRes === 0) {
            Result = true;
            if (this.FDuplicates !== pas.Types.TDuplicates.dupAccept) L = I;
          };
        };
      };
      Index.set(L);
      return Result;
    };
    this.IndexOf = function (S) {
      var Result = 0;
      if (!this.GetSorted()) {
        Result = $mod.TStrings.IndexOf.call(this,S)}
       else if (!this.Find(S,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }})) Result = -1;
      return Result;
    };
    this.Insert = function (Index, S) {
      if (this.FSortStyle === $mod.TStringsSortStyle.sslAuto) {
        this.Error(pas.RTLConsts.SSortedListError,0)}
       else {
        if ((Index < 0) || (Index > this.FCount)) this.Error(pas.RTLConsts.SListIndexError,Index);
        this.InsertItem(Index,S);
      };
    };
    this.Sort = function () {
      this.CustomSort($impl.StringListAnsiCompare);
    };
    this.CustomSort = function (CompareFn) {
      if ((this.FForceSort || !(this.FSortStyle === $mod.TStringsSortStyle.sslAuto)) && (this.FCount > 1)) {
        this.Changing();
        this.QuickSort(0,this.FCount - 1,CompareFn);
        this.Changed();
      };
    };
  });
  $mod.$rtti.$Class("TCollection");
  rtl.createClass($mod,"TCollectionItem",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FCollection = null;
      this.FID = 0;
      this.FUpdateCount = 0;
    };
    this.$final = function () {
      this.FCollection = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this.GetIndex = function () {
      var Result = 0;
      if (this.FCollection !== null) {
        Result = this.FCollection.FItems.IndexOf(this)}
       else Result = -1;
      return Result;
    };
    this.SetCollection = function (Value) {
      if (Value !== this.FCollection) {
        if (this.FCollection !== null) this.FCollection.RemoveItem(this);
        if (Value !== null) Value.InsertItem(this);
      };
    };
    this.Changed = function (AllItems) {
      if ((this.FCollection !== null) && (this.FCollection.FUpdateCount === 0)) {
        if (AllItems) {
          this.FCollection.Update(null)}
         else this.FCollection.Update(this);
      };
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FCollection;
      return Result;
    };
    this.GetDisplayName = function () {
      var Result = "";
      Result = this.$classname;
      return Result;
    };
    this.SetIndex = function (Value) {
      var Temp = 0;
      Temp = this.GetIndex();
      if ((Temp > -1) && (Temp !== Value)) {
        this.FCollection.FItems.Move(Temp,Value);
        this.Changed(true);
      };
    };
    this.SetDisplayName = function (Value) {
      this.Changed(false);
      if (Value === "") ;
    };
    this.Create$1 = function (ACollection) {
      pas.System.TObject.Create.call(this);
      this.SetCollection(ACollection);
    };
    this.Destroy = function () {
      this.SetCollection(null);
      pas.System.TObject.Destroy.call(this);
    };
    this.GetNamePath = function () {
      var Result = "";
      if (this.FCollection !== null) {
        Result = ((this.FCollection.GetNamePath() + "[") + pas.SysUtils.IntToStr(this.GetIndex())) + "]"}
       else Result = this.$classname;
      return Result;
    };
  });
  rtl.createClass($mod,"TCollectionEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FCollection = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FCollection = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (ACollection) {
      pas.System.TObject.Create.call(this);
      this.FCollection = ACollection;
      this.FPosition = -1;
    };
    this.GetCurrent = function () {
      var Result = null;
      Result = this.FCollection.GetItem(this.FPosition);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FPosition += 1;
      Result = this.FPosition < this.FCollection.GetCount();
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("TCollectionItemClass",{instancetype: $mod.$rtti["TCollectionItem"]});
  this.TCollectionNotification = {"0": "cnAdded", cnAdded: 0, "1": "cnExtracting", cnExtracting: 1, "2": "cnDeleting", cnDeleting: 2};
  $mod.$rtti.$ProcVar("TCollectionSortCompare",{procsig: rtl.newTIProcSig([["Item1",$mod.$rtti["TCollectionItem"]],["Item2",$mod.$rtti["TCollectionItem"]]],rtl.longint)});
  rtl.createClass($mod,"TCollection",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FItemClass = null;
      this.FItems = null;
      this.FUpdateCount = 0;
      this.FNextID = 0;
      this.FPropName = "";
    };
    this.$final = function () {
      this.FItemClass = undefined;
      this.FItems = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FItems.FCount;
      return Result;
    };
    this.GetPropName = function () {
      var Result = "";
      Result = this.FPropName;
      this.SetPropName();
      Result = this.FPropName;
      return Result;
    };
    this.InsertItem = function (Item) {
      if (!this.FItemClass.isPrototypeOf(Item)) return;
      this.FItems.Add(Item);
      Item.FCollection = this;
      Item.FID = this.FNextID;
      this.FNextID += 1;
      this.SetItemName(Item);
      this.Notify(Item,$mod.TCollectionNotification.cnAdded);
      this.Changed();
    };
    this.RemoveItem = function (Item) {
      var I = 0;
      this.Notify(Item,$mod.TCollectionNotification.cnExtracting);
      I = this.FItems.IndexOfItem(Item,pas.Types.TDirection.FromEnd);
      if (I !== -1) this.FItems.Delete(I);
      Item.FCollection = null;
      this.Changed();
    };
    this.DoClear = function () {
      var Item = null;
      while (this.FItems.FCount > 0) {
        Item = rtl.getObject(this.FItems.Last());
        if (Item != null) Item.$destroy("Destroy");
      };
    };
    this.GetAttrCount = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.GetAttr = function (Index) {
      var Result = "";
      Result = "";
      if (Index === 0) ;
      return Result;
    };
    this.GetItemAttr = function (Index, ItemIndex) {
      var Result = "";
      Result = rtl.getObject(this.FItems.Get(ItemIndex)).GetDisplayName();
      if (Index === 0) ;
      return Result;
    };
    this.Changed = function () {
      if (this.FUpdateCount === 0) this.Update(null);
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.FItems.Get(Index));
      return Result;
    };
    this.SetItem = function (Index, Value) {
      rtl.getObject(this.FItems.Get(Index)).Assign(Value);
    };
    this.SetItemName = function (Item) {
      if (Item === null) ;
    };
    this.SetPropName = function () {
      this.FPropName = "";
    };
    this.Update = function (Item) {
      if (Item === null) ;
    };
    this.Notify = function (Item, Action) {
      if (Item === null) ;
      if (Action === $mod.TCollectionNotification.cnAdded) ;
    };
    this.Create$1 = function (AItemClass) {
      pas.System.TObject.Create.call(this);
      this.FItemClass = AItemClass;
      this.FItems = $mod.TFPList.$create("Create");
    };
    this.Destroy = function () {
      this.FUpdateCount = 1;
      try {
        this.DoClear();
      } finally {
        this.FUpdateCount = 0;
      };
      if (this.FItems != null) this.FItems.$destroy("Destroy");
      pas.System.TObject.Destroy.call(this);
    };
    this.Owner = function () {
      var Result = null;
      Result = this.GetOwner();
      return Result;
    };
    this.Add = function () {
      var Result = null;
      Result = this.FItemClass.$create("Create$1",[this]);
      return Result;
    };
    this.Assign = function (Source) {
      var I = 0;
      if ($mod.TCollection.isPrototypeOf(Source)) {
        this.Clear();
        for (var $l1 = 0, $end2 = Source.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          this.Add().Assign(Source.GetItem(I));
        };
        return;
      } else $mod.TPersistent.Assign.call(this,Source);
    };
    this.BeginUpdate = function () {
      this.FUpdateCount += 1;
    };
    this.Clear = function () {
      if (this.FItems.FCount === 0) return;
      this.BeginUpdate();
      try {
        this.DoClear();
      } finally {
        this.EndUpdate();
      };
    };
    this.EndUpdate = function () {
      if (this.FUpdateCount > 0) this.FUpdateCount -= 1;
      if (this.FUpdateCount === 0) this.Changed();
    };
    this.Delete = function (Index) {
      var Item = null;
      Item = rtl.getObject(this.FItems.Get(Index));
      this.Notify(Item,$mod.TCollectionNotification.cnDeleting);
      if (Item != null) Item.$destroy("Destroy");
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TCollectionEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.GetNamePath = function () {
      var Result = "";
      var o = null;
      o = this.GetOwner();
      if ((o != null) && (this.GetPropName() !== "")) {
        Result = (o.GetNamePath() + ".") + this.GetPropName()}
       else Result = this.$classname;
      return Result;
    };
    this.Insert = function (Index) {
      var Result = null;
      Result = this.Add();
      Result.SetIndex(Index);
      return Result;
    };
    this.FindItemID = function (ID) {
      var Result = null;
      var I = 0;
      for (var $l1 = 0, $end2 = this.FItems.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        Result = rtl.getObject(this.FItems.Get(I));
        if (Result.FID === ID) return Result;
      };
      Result = null;
      return Result;
    };
    this.Exchange = function (Index1, index2) {
      this.FItems.Exchange(Index1,index2);
    };
    this.Sort = function (Compare) {
      this.BeginUpdate();
      try {
        this.FItems.Sort(Compare);
      } finally {
        this.EndUpdate();
      };
    };
  });
  rtl.createClass($mod,"TOwnedCollection",$mod.TCollection,function () {
    this.$init = function () {
      $mod.TCollection.$init.call(this);
      this.FOwner = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      $mod.TCollection.$final.call(this);
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner;
      return Result;
    };
    this.Create$2 = function (AOwner, AItemClass) {
      this.FOwner = AOwner;
      $mod.TCollection.Create$1.call(this,AItemClass);
    };
  });
  $mod.$rtti.$Class("TComponent");
  this.TOperation = {"0": "opInsert", opInsert: 0, "1": "opRemove", opRemove: 1};
  this.TComponentStateItem = {"0": "csLoading", csLoading: 0, "1": "csReading", csReading: 1, "2": "csWriting", csWriting: 2, "3": "csDestroying", csDestroying: 3, "4": "csDesigning", csDesigning: 4, "5": "csAncestor", csAncestor: 5, "6": "csUpdating", csUpdating: 6, "7": "csFixups", csFixups: 7, "8": "csFreeNotification", csFreeNotification: 8, "9": "csInline", csInline: 9, "10": "csDesignInstance", csDesignInstance: 10};
  $mod.$rtti.$Enum("TComponentStateItem",{minvalue: 0, maxvalue: 10, ordtype: 1, enumtype: this.TComponentStateItem});
  $mod.$rtti.$Set("TComponentState",{comptype: $mod.$rtti["TComponentStateItem"]});
  this.TComponentStyleItem = {"0": "csInheritable", csInheritable: 0, "1": "csCheckPropAvail", csCheckPropAvail: 1, "2": "csSubComponent", csSubComponent: 2, "3": "csTransient", csTransient: 3};
  $mod.$rtti.$Enum("TComponentStyleItem",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TComponentStyleItem});
  $mod.$rtti.$Set("TComponentStyle",{comptype: $mod.$rtti["TComponentStyleItem"]});
  $mod.$rtti.$MethodVar("TGetChildProc",{procsig: rtl.newTIProcSig([["Child",$mod.$rtti["TComponent"]]]), methodkind: 0});
  rtl.createClass($mod,"TComponentEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FComponent = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FComponent = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AComponent) {
      pas.System.TObject.Create.call(this);
      this.FComponent = AComponent;
      this.FPosition = -1;
    };
    this.GetCurrent = function () {
      var Result = null;
      Result = this.FComponent.GetComponent(this.FPosition);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FPosition += 1;
      Result = this.FPosition < this.FComponent.GetComponentCount();
      return Result;
    };
  });
  rtl.createClass($mod,"TComponent",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FName = "";
      this.FTag = 0;
      this.FComponents = null;
      this.FFreeNotifies = null;
      this.FDesignInfo = 0;
      this.FComponentState = {};
      this.FComponentStyle = {};
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FComponents = undefined;
      this.FFreeNotifies = undefined;
      this.FComponentState = undefined;
      this.FComponentStyle = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this.GetComponent = function (AIndex) {
      var Result = null;
      if (!(this.FComponents != null)) {
        Result = null}
       else Result = rtl.getObject(this.FComponents.Get(AIndex));
      return Result;
    };
    this.GetComponentCount = function () {
      var Result = 0;
      if (!(this.FComponents != null)) {
        Result = 0}
       else Result = this.FComponents.FCount;
      return Result;
    };
    this.GetComponentIndex = function () {
      var Result = 0;
      if ((this.FOwner != null) && (this.FOwner.FComponents != null)) {
        Result = this.FOwner.FComponents.IndexOf(this)}
       else Result = -1;
      return Result;
    };
    this.Insert = function (AComponent) {
      if (!(this.FComponents != null)) this.FComponents = $mod.TFPList.$create("Create");
      this.FComponents.Add(AComponent);
      AComponent.FOwner = this;
    };
    this.Remove = function (AComponent) {
      AComponent.FOwner = null;
      if (this.FComponents != null) {
        this.FComponents.Remove(AComponent);
        if (this.FComponents.FCount === 0) {
          this.FComponents.$destroy("Destroy");
          this.FComponents = null;
        };
      };
    };
    this.RemoveNotification = function (AComponent) {
      if (this.FFreeNotifies !== null) {
        this.FFreeNotifies.Remove(AComponent);
        if (this.FFreeNotifies.FCount === 0) {
          this.FFreeNotifies.$destroy("Destroy");
          this.FFreeNotifies = null;
          this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csFreeNotification);
        };
      };
    };
    this.SetComponentIndex = function (Value) {
      var Temp = 0;
      var Count = 0;
      if (!(this.FOwner != null)) return;
      Temp = this.GetComponentIndex();
      if (Temp < 0) return;
      if (Value < 0) Value = 0;
      Count = this.FOwner.FComponents.FCount;
      if (Value >= Count) Value = Count - 1;
      if (Value !== Temp) {
        this.FOwner.FComponents.Delete(Temp);
        this.FOwner.FComponents.Insert(Value,this);
      };
    };
    this.ChangeName = function (NewName) {
      this.FName = NewName;
    };
    this.GetChildren = function (Proc, Root) {
      if (Proc === null) ;
      if (Root === null) ;
    };
    this.GetChildOwner = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.GetChildParent = function () {
      var Result = null;
      Result = this;
      return Result;
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner;
      return Result;
    };
    this.Loaded = function () {
      this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csLoading);
    };
    this.Loading = function () {
      this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csLoading);
    };
    this.Notification = function (AComponent, Operation) {
      var C = 0;
      if (Operation === $mod.TOperation.opRemove) this.RemoveFreeNotification(AComponent);
      if (!(this.FComponents != null)) return;
      C = this.FComponents.FCount - 1;
      while (C >= 0) {
        rtl.getObject(this.FComponents.Get(C)).Notification(AComponent,Operation);
        C -= 1;
        if (C >= this.FComponents.FCount) C = this.FComponents.FCount - 1;
      };
    };
    this.PaletteCreated = function () {
    };
    this.SetAncestor = function (Value) {
      var Runner = 0;
      if (Value) {
        this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csAncestor)}
       else this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csAncestor);
      if (this.FComponents != null) for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        rtl.getObject(this.FComponents.Get(Runner)).SetAncestor(Value);
      };
    };
    this.SetDesigning = function (Value, SetChildren) {
      var Runner = 0;
      if (Value) {
        this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csDesigning)}
       else this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csDesigning);
      if ((this.FComponents != null) && SetChildren) for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        rtl.getObject(this.FComponents.Get(Runner)).SetDesigning(Value,true);
      };
    };
    this.SetDesignInstance = function (Value) {
      if (Value) {
        this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csDesignInstance)}
       else this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csDesignInstance);
    };
    this.SetInline = function (Value) {
      if (Value) {
        this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csInline)}
       else this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csInline);
    };
    this.SetName = function (NewName) {
      if (this.FName === NewName) return;
      if ((NewName !== "") && !pas.SysUtils.IsValidIdent(NewName,false,false)) throw $mod.EComponentError.$create("CreateFmt",[pas.RTLConsts.SInvalidName,[NewName]]);
      if (this.FOwner != null) {
        this.FOwner.ValidateRename(this,this.FName,NewName)}
       else this.ValidateRename(null,this.FName,NewName);
      this.ChangeName(NewName);
    };
    this.SetChildOrder = function (Child, Order) {
      if (Child === null) ;
      if (Order === 0) ;
    };
    this.SetParentComponent = function (Value) {
      if (Value === null) ;
    };
    this.Updating = function () {
      this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csUpdating);
    };
    this.Updated = function () {
      this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csUpdating);
    };
    this.ValidateRename = function (AComponent, CurName, NewName) {
      if ((((AComponent !== null) && (pas.SysUtils.CompareText(CurName,NewName) !== 0)) && (AComponent.FOwner === this)) && (this.FindComponent(NewName) !== null)) throw $mod.EComponentError.$create("CreateFmt",[pas.RTLConsts.SDuplicateName,[NewName]]);
      if (($mod.TComponentStateItem.csDesigning in this.FComponentState) && (this.FOwner !== null)) this.FOwner.ValidateRename(AComponent,CurName,NewName);
    };
    this.ValidateContainer = function (AComponent) {
      AComponent.ValidateInsert(this);
    };
    this.ValidateInsert = function (AComponent) {
      if (AComponent === null) ;
    };
    this._AddRef = function () {
      var Result = 0;
      Result = -1;
      return Result;
    };
    this._Release = function () {
      var Result = 0;
      Result = -1;
      return Result;
    };
    this.Create$1 = function (AOwner) {
      this.FComponentStyle = rtl.createSet($mod.TComponentStyleItem.csInheritable);
      if (AOwner != null) AOwner.InsertComponent(this);
    };
    this.Destroy = function () {
      var I = 0;
      var C = null;
      this.Destroying();
      if (this.FFreeNotifies != null) {
        I = this.FFreeNotifies.FCount - 1;
        while (I >= 0) {
          C = rtl.getObject(this.FFreeNotifies.Get(I));
          this.FFreeNotifies.Delete(I);
          C.Notification(this,$mod.TOperation.opRemove);
          if (this.FFreeNotifies === null) {
            I = 0}
           else if (I > this.FFreeNotifies.FCount) I = this.FFreeNotifies.FCount;
          I -= 1;
        };
        pas.SysUtils.FreeAndNil({p: this, get: function () {
            return this.p.FFreeNotifies;
          }, set: function (v) {
            this.p.FFreeNotifies = v;
          }});
      };
      this.DestroyComponents();
      if (this.FOwner !== null) this.FOwner.RemoveComponent(this);
      pas.System.TObject.Destroy.call(this);
    };
    this.BeforeDestruction = function () {
      if (!($mod.TComponentStateItem.csDestroying in this.FComponentState)) this.Destroying();
    };
    this.DestroyComponents = function () {
      var acomponent = null;
      while (this.FComponents != null) {
        acomponent = rtl.getObject(this.FComponents.Last());
        this.Remove(acomponent);
        acomponent.$destroy("Destroy");
      };
    };
    this.Destroying = function () {
      var Runner = 0;
      if ($mod.TComponentStateItem.csDestroying in this.FComponentState) return;
      this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csDestroying);
      if (this.FComponents != null) for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        rtl.getObject(this.FComponents.Get(Runner)).Destroying();
      };
    };
    this.QueryInterface = function (IID, Obj) {
      var Result = 0;
      if (this.GetInterface(IID,Obj)) {
        Result = 0}
       else Result = -2147467262;
      return Result;
    };
    this.FindComponent = function (AName) {
      var Result = null;
      var I = 0;
      Result = null;
      if ((AName === "") || !(this.FComponents != null)) return Result;
      for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas.SysUtils.CompareText(rtl.getObject(this.FComponents.Get(I)).FName,AName) === 0) {
          Result = rtl.getObject(this.FComponents.Get(I));
          return Result;
        };
      };
      return Result;
    };
    this.FreeNotification = function (AComponent) {
      if ((this.FOwner !== null) && (AComponent === this.FOwner)) return;
      if (!(this.FFreeNotifies != null)) this.FFreeNotifies = $mod.TFPList.$create("Create");
      if (this.FFreeNotifies.IndexOf(AComponent) === -1) {
        this.FFreeNotifies.Add(AComponent);
        AComponent.FreeNotification(this);
      };
    };
    this.RemoveFreeNotification = function (AComponent) {
      this.RemoveNotification(AComponent);
      AComponent.RemoveNotification(this);
    };
    this.GetNamePath = function () {
      var Result = "";
      Result = this.FName;
      return Result;
    };
    this.GetParentComponent = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.HasParent = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.InsertComponent = function (AComponent) {
      AComponent.ValidateContainer(this);
      this.ValidateRename(AComponent,"",AComponent.FName);
      this.Insert(AComponent);
      if ($mod.TComponentStateItem.csDesigning in this.FComponentState) AComponent.SetDesigning(true,true);
      this.Notification(AComponent,$mod.TOperation.opInsert);
    };
    this.RemoveComponent = function (AComponent) {
      this.Notification(AComponent,$mod.TOperation.opRemove);
      this.Remove(AComponent);
      AComponent.SetDesigning(false,true);
      this.ValidateRename(AComponent,AComponent.FName,"");
    };
    this.SetSubComponent = function (ASubComponent) {
      if (ASubComponent) {
        this.FComponentStyle = rtl.includeSet(this.FComponentStyle,$mod.TComponentStyleItem.csSubComponent)}
       else this.FComponentStyle = rtl.excludeSet(this.FComponentStyle,$mod.TComponentStyleItem.csSubComponent);
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TComponentEnumerator.$create("Create$1",[this]);
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Name",6,rtl.string,"FName","SetName");
    $r.addProperty("Tag",0,rtl.nativeint,"FTag","FTag");
  });
  $mod.$rtti.$ClassRef("TComponentClass",{instancetype: $mod.$rtti["TComponent"]});
  this.RegisterClass = function (AClass) {
    $impl.ClassList[AClass.$classname] = AClass;
  };
  this.GetClass = function (AClassName) {
    var Result = null;
    Result = null;
    if (AClassName === "") return Result;
    if (!$impl.ClassList.hasOwnProperty(AClassName)) return Result;
    Result = rtl.getObject($impl.ClassList[AClassName]);
    return Result;
  };
  $mod.$init = function () {
    $impl.ClassList = Object.create(null);
  };
},["JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.QuickSort = function (aList, L, R, Compare) {
    var I = 0;
    var J = 0;
    var P = undefined;
    var Q = undefined;
    do {
      I = L;
      J = R;
      P = aList[Math.floor((L + R) / 2)];
      do {
        while (Compare(P,aList[I]) > 0) I = I + 1;
        while (Compare(P,aList[J]) < 0) J = J - 1;
        if (I <= J) {
          Q = aList[I];
          aList[I] = aList[J];
          aList[J] = Q;
          I = I + 1;
          J = J - 1;
        };
      } while (!(I > J));
      if ((J - L) < (R - I)) {
        if (L < J) $impl.QuickSort(aList,L,J,Compare);
        L = I;
      } else {
        if (I < R) $impl.QuickSort(aList,I,R,Compare);
        R = J;
      };
    } while (!(L >= R));
  };
  $impl.StringListAnsiCompare = function (List, Index1, Index) {
    var Result = 0;
    Result = List.DoCompareText(List.FList[Index1].FString,List.FList[Index].FString);
    return Result;
  };
  $impl.ClassList = null;
});
rtl.module("Math",["System","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.MinInteger = -0x10000000000000;
  this.MaxInteger = 0xfffffffffffff;
  this.MinDouble = 5.0e-324;
  this.MaxDouble = 1.7e+308;
  this.InRange = function (AValue, AMin, AMax) {
    return (AValue >= AMin) && (AValue <= AMax);
  };
  this.InRange$1 = function (AValue, AMin, AMax) {
    return (AValue >= AMin) && (AValue <= AMax);
  };
  this.EnsureRange = function (AValue, AMin, AMax) {
    if (AValue<AMin){ return AMin;
    } else if (AValue>AMax){ return AMax;
    } else return AValue;
  };
  this.EnsureRange$1 = function (AValue, AMin, AMax) {
    if (AValue<AMin){ return AMin;
    } else if (AValue>AMax){ return AMax;
    } else return AValue;
  };
  $mod.$rtti.$Int("TRoundToRange",{minvalue: -37, maxvalue: 37, ordtype: 0});
  this.RoundTo = function (AValue, Digits) {
    var Result = 0.0;
    var RV = 0.0;
    RV = $mod.IntPower(10,Digits);
    Result = Math.round(AValue / RV) * RV;
    return Result;
  };
  this.SimpleRoundTo = function (AValue, Digits) {
    var Result = 0.0;
    var RV = 0.0;
    RV = $mod.IntPower(10,-Digits);
    if (AValue < 0) {
      Result = pas.System.Int((AValue * RV) - 0.5) / RV}
     else Result = pas.System.Int((AValue * RV) + 0.5) / RV;
    return Result;
  };
  this.randg = function (mean, stddev) {
    var Result = 0.0;
    var U1 = 0.0;
    var S2 = 0.0;
    do {
      U1 = (2 * Math.random()) - 1;
      S2 = pas.System.Sqr$1(U1) + pas.System.Sqr$1((2 * Math.random()) - 1);
    } while (!(S2 < 1));
    Result = ((Math.sqrt((-2 * Math.log(S2)) / S2) * U1) * stddev) + mean;
    return Result;
  };
  this.RandomRange = function (aFrom, aTo) {
    var Result = 0;
    Result = pas.System.Random(Math.abs(aFrom - aTo)) + Math.min(aTo,aFrom);
    return Result;
  };
  this.RandomRange$1 = function (aFrom, aTo) {
    var Result = 0;
    var m = 0;
    if (aFrom < aTo) {
      m = aFrom}
     else m = aTo;
    Result = pas.System.Random(Math.abs(aFrom - aTo)) + m;
    return Result;
  };
  this.NegativeValue = -1;
  this.ZeroValue = 0;
  this.PositiveValue = 1;
  this.IsZero = function (d, Epsilon) {
    var Result = false;
    if (Epsilon === 0) Epsilon = 1E-12;
    Result = Math.abs(d) <= Epsilon;
    return Result;
  };
  this.IsZero$1 = function (d) {
    var Result = false;
    Result = Math.abs(d) <= 1E-12;
    return Result;
  };
  this.IsInfinite = function (d) {
    return (d==Infinity) || (d==-Infinity);
  };
  this.SameValue = function (A, B, Epsilon) {
    var Result = false;
    if (Epsilon === 0.0) Epsilon = Math.max(Math.min(Math.abs(A),Math.abs(B)) * 1E-12,1E-12);
    if (A > B) {
      Result = (A - B) <= Epsilon}
     else Result = (B - A) <= Epsilon;
    return Result;
  };
  this.LogN = function (A, Base) {
    var Result = 0.0;
    Result = Math.log(A) / Math.log(Base);
    return Result;
  };
  this.Ceil = function (A) {
    var Result = 0;
    Result = pas.System.Trunc(Math.ceil(A));
    return Result;
  };
  this.Floor = function (A) {
    var Result = 0;
    Result = pas.System.Trunc(Math.floor(A));
    return Result;
  };
  this.Ceil64 = function (A) {
    var Result = 0;
    Result = pas.System.Trunc(Math.ceil(A));
    return Result;
  };
  this.Floor64 = function (A) {
    var Result = 0;
    Result = pas.System.Trunc(Math.ceil(A));
    return Result;
  };
  this.ldexp = function (x, p) {
    var Result = 0.0;
    Result = x * $mod.IntPower(2.0,p);
    return Result;
  };
  this.Frexp = function (X, Mantissa, Exponent) {
    Exponent.set(0);
    if (X !== 0) if (Math.abs(X) < 0.5) {
      do {
        X = X * 2;
        Exponent.set(Exponent.get() - 1);
      } while (!(Math.abs(X) >= 0.5))}
     else while (Math.abs(X) >= 1) {
      X = X / 2;
      Exponent.set(Exponent.get() + 1);
    };
    Mantissa.set(X);
  };
  this.lnxp1 = function (x) {
    var Result = 0.0;
    var y = 0.0;
    if (x >= 4.0) {
      Result = Math.log(1.0 + x)}
     else {
      y = 1.0 + x;
      if (y === 1.0) {
        Result = x}
       else {
        Result = Math.log(y);
        if (y > 0.0) Result = Result + ((x - (y - 1.0)) / y);
      };
    };
    return Result;
  };
  this.IntPower = function (base, exponent) {
    var Result = 0.0;
    var i = 0;
    if ((base === 0.0) && (exponent === 0)) {
      Result = 1}
     else {
      i = Math.abs(exponent);
      Result = 1.0;
      while (i > 0) {
        while ((i & 1) === 0) {
          i = i >>> 1;
          base = pas.System.Sqr$1(base);
        };
        i = i - 1;
        Result = Result * base;
      };
      if (exponent < 0) Result = 1.0 / Result;
    };
    return Result;
  };
  this.DivMod = function (Dividend, Divisor, Result, Remainder) {
    if (Dividend < 0) {
      Dividend = -Dividend;
      Result.set(-Math.floor(Dividend / Divisor));
      Remainder.set(-(Dividend + (Result.get() * Divisor)));
    } else {
      Result.set(Math.floor(Dividend / Divisor));
      Remainder.set(Dividend - (Result.get() * Divisor));
    };
  };
  this.DivMod$1 = function (Dividend, Divisor, Result, Remainder) {
    if (Dividend < 0) {
      Dividend = -Dividend;
      Result.set(-Math.floor(Dividend / Divisor));
      Remainder.set(-(Dividend + (Result.get() * Divisor)));
    } else {
      Result.set(Math.floor(Dividend / Divisor));
      Remainder.set(Dividend - (Result.get() * Divisor));
    };
  };
  this.DivMod$2 = function (Dividend, Divisor, Result, Remainder) {
    Result.set(Math.floor(Dividend / Divisor));
    Remainder.set(Dividend - (Result.get() * Divisor));
  };
  this.DivMod$3 = function (Dividend, Divisor, Result, Remainder) {
    if (Dividend < 0) {
      Dividend = -Dividend;
      Result.set(-Math.floor(Dividend / Divisor));
      Remainder.set(-(Dividend + (Result.get() * Divisor)));
    } else {
      Result.set(Math.floor(Dividend / Divisor));
      Remainder.set(Dividend - (Result.get() * Divisor));
    };
  };
  this.DegToRad = function (deg) {
    var Result = 0.0;
    Result = deg * (Math.PI / 180.0);
    return Result;
  };
  this.RadToDeg = function (rad) {
    var Result = 0.0;
    Result = rad * (180.0 / Math.PI);
    return Result;
  };
  this.GradToRad = function (grad) {
    var Result = 0.0;
    Result = grad * (Math.PI / 200.0);
    return Result;
  };
  this.RadToGrad = function (rad) {
    var Result = 0.0;
    Result = rad * (200.0 / Math.PI);
    return Result;
  };
  this.DegToGrad = function (deg) {
    var Result = 0.0;
    Result = deg * (200.0 / 180.0);
    return Result;
  };
  this.GradToDeg = function (grad) {
    var Result = 0.0;
    Result = grad * (180.0 / 200.0);
    return Result;
  };
  this.CycleToRad = function (cycle) {
    var Result = 0.0;
    Result = (2 * Math.PI) * cycle;
    return Result;
  };
  this.RadToCycle = function (rad) {
    var Result = 0.0;
    Result = rad * (1 / (2 * Math.PI));
    return Result;
  };
  this.DegNormalize = function (deg) {
    var Result = 0.0;
    Result = deg - (pas.System.Int(deg / 360) * 360);
    if (Result < 0) Result = Result + 360;
    return Result;
  };
  this.Norm = function (data) {
    var Result = 0.0;
    Result = Math.sqrt($impl.sumofsquares(data));
    return Result;
  };
  this.Mean = function (data) {
    var Result = 0.0;
    var N = 0;
    N = rtl.length(data);
    if (N === 0) {
      Result = 0}
     else Result = $mod.Sum(data) / N;
    return Result;
  };
  this.Sum = function (data) {
    var Result = 0.0;
    var i = 0;
    var N = 0;
    N = rtl.length(data);
    Result = 0.0;
    for (var $l1 = 0, $end2 = N - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = Result + data[i];
    };
    return Result;
  };
  this.SumsAndSquares = function (data, Sum, SumOfSquares) {
    var i = 0;
    var n = 0;
    var t = 0.0;
    var s = 0.0;
    var ss = 0.0;
    n = rtl.length(data);
    ss = 0.0;
    s = 0.0;
    for (var $l1 = 0, $end2 = n - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      t = data[i];
      ss = ss + pas.System.Sqr$1(t);
      s = s + t;
    };
    Sum.set(s);
    SumOfSquares.set(ss);
  };
  this.StdDev = function (data) {
    var Result = 0.0;
    Result = Math.sqrt($mod.Variance(data));
    return Result;
  };
  this.MeanAndStdDev = function (data, Mean, StdDev) {
    var I = 0;
    var N = 0;
    var M = 0.0;
    var S = 0.0;
    N = rtl.length(data);
    M = 0;
    S = 0;
    for (var $l1 = 0, $end2 = N - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      M = M + data[I];
      S = S + pas.System.Sqr$1(data[I]);
    };
    M = M / N;
    S = S - (N * pas.System.Sqr$1(M));
    if (N > 1) {
      S = Math.sqrt(S / (N - 1))}
     else S = 0;
    Mean.set(M);
    StdDev.set(S);
  };
  this.Variance = function (data) {
    var Result = 0.0;
    var n = 0;
    n = rtl.length(data);
    if (n === 1) {
      Result = 0}
     else Result = $mod.TotalVariance(data) / (n - 1);
    return Result;
  };
  this.TotalVariance = function (data) {
    var Result = 0.0;
    var S = 0.0;
    var SS = 0.0;
    var N = 0;
    N = rtl.length(data);
    if (rtl.length(data) === 1) {
      Result = 0}
     else {
      $mod.SumsAndSquares(data,{get: function () {
          return S;
        }, set: function (v) {
          S = v;
        }},{get: function () {
          return SS;
        }, set: function (v) {
          SS = v;
        }});
      Result = SS - (pas.System.Sqr$1(S) / N);
    };
    return Result;
  };
  this.PopNStdDev = function (data) {
    var Result = 0.0;
    Result = Math.sqrt($mod.PopNVariance(data));
    return Result;
  };
  this.PopNVariance = function (data) {
    var Result = 0.0;
    var N = 0;
    N = rtl.length(data);
    if (N === 0) {
      Result = 0}
     else Result = $mod.TotalVariance(data) / N;
    return Result;
  };
  this.MomentSkewKurtosis = function (data, m1, m2, m3, m4, skew, kurtosis) {
    var i = 0;
    var N = 0;
    var deviation = 0.0;
    var deviation2 = 0.0;
    var reciprocalN = 0.0;
    var lm1 = 0.0;
    var lm2 = 0.0;
    var lm3 = 0.0;
    var lm4 = 0.0;
    var lskew = 0.0;
    var lkurtosis = 0.0;
    N = rtl.length(data);
    lm1 = 0;
    reciprocalN = 1 / N;
    for (var $l1 = 0, $end2 = N - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      lm1 = lm1 + data[i];
    };
    lm1 = reciprocalN * lm1;
    lm2 = 0;
    lm3 = 0;
    lm4 = 0;
    for (var $l3 = 0, $end4 = N - 1; $l3 <= $end4; $l3++) {
      i = $l3;
      deviation = data[i] - lm1;
      deviation2 = deviation * deviation;
      lm2 = lm2 + deviation2;
      lm3 = lm3 + (deviation2 * deviation);
      lm4 = lm4 + (deviation2 * deviation2);
    };
    lm2 = reciprocalN * lm2;
    lm3 = reciprocalN * lm3;
    lm4 = reciprocalN * lm4;
    lskew = lm3 / (Math.sqrt(lm2) * lm2);
    lkurtosis = lm4 / (lm2 * lm2);
    m1.set(lm1);
    m2.set(lm2);
    m3.set(lm3);
    m4.set(lm4);
    skew.set(lskew);
    kurtosis.set(lkurtosis);
  };
  this.TPaymentTime = {"0": "ptEndOfPeriod", ptEndOfPeriod: 0, "1": "ptStartOfPeriod", ptStartOfPeriod: 1};
  $mod.$rtti.$Enum("TPaymentTime",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TPaymentTime});
  this.FutureValue = function (ARate, NPeriods, APayment, APresentValue, APaymentTime) {
    var Result = 0.0;
    var q = 0.0;
    var qn = 0.0;
    var factor = 0.0;
    if (ARate === 0) {
      Result = -APresentValue - (APayment * NPeriods)}
     else {
      q = 1.0 + ARate;
      qn = Math.pow(q,NPeriods);
      factor = (qn - 1) / (q - 1);
      if (APaymentTime === $mod.TPaymentTime.ptStartOfPeriod) factor = factor * q;
      Result = -((APresentValue * qn) + (APayment * factor));
    };
    return Result;
  };
  var DELTA = 0.001;
  var EPS = 1E-9;
  var MAXIT = 20;
  this.InterestRate = function (NPeriods, APayment, APresentValue, AFutureValue, APaymentTime) {
    var Result = 0.0;
    var r1 = 0.0;
    var r2 = 0.0;
    var dr = 0.0;
    var fv1 = 0.0;
    var fv2 = 0.0;
    var iteration = 0;
    iteration = 0;
    r1 = 0.05;
    do {
      r2 = r1 + 0.001;
      fv1 = $mod.FutureValue(r1,NPeriods,APayment,APresentValue,APaymentTime);
      fv2 = $mod.FutureValue(r2,NPeriods,APayment,APresentValue,APaymentTime);
      dr = ((AFutureValue - fv1) / (fv2 - fv1)) * 0.001;
      r1 = r1 + dr;
      iteration += 1;
    } while (!((Math.abs(dr) < 1.0E-9) || (iteration >= 20)));
    Result = r1;
    return Result;
  };
  this.NumberOfPeriods = function (ARate, APayment, APresentValue, AFutureValue, APaymentTime) {
    var Result = 0.0;
    var q = 0.0;
    var x1 = 0.0;
    var x2 = 0.0;
    if (ARate === 0) {
      Result = -(APresentValue + AFutureValue) / APayment}
     else {
      q = 1.0 + ARate;
      if (APaymentTime === $mod.TPaymentTime.ptStartOfPeriod) APayment = APayment * q;
      x1 = APayment - (AFutureValue * ARate);
      x2 = APayment + (APresentValue * ARate);
      if ((x2 === 0) || ((Math.sign(x1) * Math.sign(x2)) < 0)) {
        Result = Infinity}
       else {
        Result = Math.log(x1 / x2) / Math.log(q);
      };
    };
    return Result;
  };
  this.Payment = function (ARate, NPeriods, APresentValue, AFutureValue, APaymentTime) {
    var Result = 0.0;
    var q = 0.0;
    var qn = 0.0;
    var factor = 0.0;
    if (ARate === 0) {
      Result = -(AFutureValue + APresentValue) / NPeriods}
     else {
      q = 1.0 + ARate;
      qn = Math.pow(q,NPeriods);
      factor = (qn - 1) / (q - 1);
      if (APaymentTime === $mod.TPaymentTime.ptStartOfPeriod) factor = factor * q;
      Result = -(AFutureValue + (APresentValue * qn)) / factor;
    };
    return Result;
  };
  this.PresentValue = function (ARate, NPeriods, APayment, AFutureValue, APaymentTime) {
    var Result = 0.0;
    var q = 0.0;
    var qn = 0.0;
    var factor = 0.0;
    if (ARate === 0.0) {
      Result = -AFutureValue - (APayment * NPeriods)}
     else {
      q = 1.0 + ARate;
      qn = Math.pow(q,NPeriods);
      factor = (qn - 1) / (q - 1);
      if (APaymentTime === $mod.TPaymentTime.ptStartOfPeriod) factor = factor * q;
      Result = -(AFutureValue + (APayment * factor)) / qn;
    };
    return Result;
  };
  this.IfThen = function (val, ifTrue, ifFalse) {
    var Result = 0;
    if (val) {
      Result = ifTrue}
     else Result = ifFalse;
    return Result;
  };
  this.IfThen$1 = function (val, ifTrue, ifFalse) {
    var Result = 0.0;
    if (val) {
      Result = ifTrue}
     else Result = ifFalse;
    return Result;
  };
  $mod.$rtti.$Int("TValueRelationship",{minvalue: -1, maxvalue: 1, ordtype: 0});
  this.EqualsValue = 0;
  this.LessThanValue = -1;
  this.GreaterThanValue = 1;
  this.CompareValue = function (A, B) {
    var Result = 0;
    Result = 1;
    if (A === B) {
      Result = 0}
     else if (A < B) Result = -1;
    return Result;
  };
  this.CompareValue$1 = function (A, B) {
    var Result = 0;
    Result = 1;
    if (A === B) {
      Result = 0}
     else if (A < B) Result = -1;
    return Result;
  };
  this.CompareValue$2 = function (A, B) {
    var Result = 0;
    Result = 1;
    if (A === B) {
      Result = 0}
     else if (A < B) Result = -1;
    return Result;
  };
  this.CompareValue$3 = function (A, B, delta) {
    var Result = 0;
    Result = 1;
    if (Math.abs(A - B) <= delta) {
      Result = 0}
     else if (A < B) Result = -1;
    return Result;
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.DZeroResolution = 1E-12;
  $impl.sumofsquares = function (data) {
    var Result = 0.0;
    var i = 0;
    var N = 0;
    N = rtl.length(data);
    Result = 0.0;
    for (var $l1 = 0, $end2 = N - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = Result + pas.System.Sqr$1(data[i]);
    };
    return Result;
  };
});
rtl.module("EventsInterface",["System","Classes","SysUtils"],function () {
  "use strict";
  var $mod = this;
  $mod.$rtti.$DynArray("TNumArray",{eltype: rtl.double});
  $mod.$rtti.$DynArray("TImgArray",{eltype: rtl.string});
  rtl.createClass($mod,"TEventStatus",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.EventType = "";
      this.NodeId = "";
      this.InitRunning = false;
      this.AsyncProcsRunning = null;
      this.ContinueAfterTrappers = false;
      this.ReturnString = "";
      this.eventValue = "";
    };
    this.$final = function () {
      this.AsyncProcsRunning = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (EvType, NdId) {
      this.InitRunning = false;
      this.AsyncProcsRunning = pas.Classes.TStringList.$create("Create$1");
      this.ContinueAfterTrappers = true;
      this.EventType = EvType;
      this.NodeId = NdId;
    };
    this.EventHasWaitingAsyncProcs = function () {
      var Result = false;
      if (this.AsyncProcsRunning.GetCount() > 0) {
        Result = true}
       else Result = false;
      return Result;
    };
  });
});
rtl.module("StringUtils",["System","Classes","SysUtils","EventsInterface"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.FoundString = function (inString, searchString) {
    var Result = 0;
    var match = false;
    var found = false;
    var i = 0;
    var tempresult = 0;
    var tempstr = "";
    tempresult = 0;
    found = false;
    for (var $l1 = 1, $end2 = inString.length; $l1 <= $end2; $l1++) {
      i = $l1;
      if (found === false) {
        tempstr = inString.charAt(i - 1);
        if (tempstr === searchString.charAt(0)) {
          match = $impl.CheckMatch(inString,searchString,i);
          if (match === true) {
            tempresult = i;
            found = true;
          };
        };
      };
    };
    Result = tempresult;
    return Result;
  };
  this.myStringReplace = function (Instring, OldString, NewString, ReplaceNum, MaxStringLength) {
    var Result = "";
    var i = 0;
    var matchLength = 0;
    var match = false;
    var replaceCount = 0;
    var finalstring = "";
    var tempstr = "";
    finalstring = "";
    replaceCount = 0;
    matchLength = 0;
    if (ReplaceNum < 0) ReplaceNum = 999999;
    if (MaxStringLength < 0) MaxStringLength = 9999999;
    for (var $l1 = 1, $end2 = Instring.length; $l1 <= $end2; $l1++) {
      i = $l1;
      tempstr = Instring.charAt(i - 1);
      if (((tempstr !== OldString.charAt(0)) && (i > matchLength)) || (i > MaxStringLength)) {
        finalstring = finalstring + tempstr;
      } else if (i > matchLength) {
        match = $impl.CheckMatch(Instring,OldString,i);
        if ((match === false) || (replaceCount >= ReplaceNum)) {
          finalstring = finalstring + tempstr}
         else {
          replaceCount = replaceCount + 1;
          finalstring = finalstring + NewString;
          matchLength = (i + OldString.length) - 1;
        };
      };
    };
    Result = finalstring;
    return Result;
  };
  this.MyBoolToStr = function (inBool) {
    var Result = "";
    if (inBool === true) {
      Result = "True"}
     else if (inBool === false) {
      Result = "False"}
     else {
      $mod.ShowMessage("invalid boolean");
      alert('inBool='+inBool);
    };
    return Result;
  };
  this.MyStrToBool = function (inStr) {
    var Result = false;
    if (pas.SysUtils.UpperCase($mod.TrimWhiteSpace(inStr)) === "TRUE") {
      Result = true}
     else if (pas.SysUtils.UpperCase($mod.TrimWhiteSpace(inStr)) === "FALSE") {
      Result = false}
     else if (inStr === "") {
      Result = false}
     else $mod.ShowMessage("invalid boolean string " + inStr);
    return Result;
  };
  this.TrimWhiteSpace = function (Instring) {
    var Result = "";
    Result = $mod.DelChars(Instring," ");
    return Result;
  };
  this.stringsplit = function (str, separator) {
    var Result = null;
    var localStringList = null;
    localStringList = $mod.StringToSubStringList(str,separator);
    Result = localStringList;
    return Result;
  };
  this.IsInStringList = function (myList, elem) {
    var Result = false;
    var i = 0;
    var found = false;
    found = false;
    i = myList.IndexOf(elem);
    if (i > -1) found = true;
    Result = found;
    return Result;
  };
  this.CommaListToStringArray = function (AValue) {
    var Result = [];
    var bits = null;
    var i = 0;
    var arr = [];
    bits = pas.Classes.TStringList.$create("Create$1");
    bits.FStrictDelimiter = true;
    bits.SetLineBreak(",");
    bits.SetTextStr(AValue);
    arr = rtl.arraySetLength(arr,"",bits.GetCount());
    for (var $l1 = 0, $end2 = bits.GetCount() - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      arr[i] = bits.Get(i);
    };
    Result = arr;
    bits = rtl.freeLoc(bits);
    return Result;
  };
  this.StringToSubStringList = function (InString, delimiter) {
    var Result = null;
    var items = null;
    items = pas.Classes.TStringList.$create("Create$1");
    items.FStrictDelimiter = true;
    items.SetLineBreak(delimiter);
    items.SetTextStr(InString);
    Result = items;
    return Result;
  };
  this.DelChars = function (Instring, FilterChar) {
    var Result = "";
    var i = 0;
    var newstring = "";
    var tempstr = "";
    newstring = "";
    for (var $l1 = 1, $end2 = Instring.length; $l1 <= $end2; $l1++) {
      i = $l1;
      tempstr = Instring.charAt(i - 1);
      if (tempstr !== FilterChar) {
        newstring = newstring + tempstr;
      };
    };
    Result = newstring;
    return Result;
  };
  this.stripLeadingStringIfPresent = function (instring, LeadingString) {
    var Result = "";
    var i = 0;
    var OutString = "";
    var done = false;
    OutString = "";
    done = false;
    for (var $l1 = 1, $end2 = instring.length; $l1 <= $end2; $l1++) {
      i = $l1;
      if ((i <= LeadingString.length) && (done === false)) {
        if (instring.charAt(i - 1) !== LeadingString.charAt(i - 1)) {
          done = true;
          OutString = OutString + instring.charAt(i - 1);
        };
      } else OutString = OutString + instring.charAt(i - 1);
    };
    Result = OutString;
    return Result;
  };
  this.confirm = function (Textmessage) {
    var Result = false;
    var conf = false;
    conf=confirm(Textmessage);
    Result = conf;
    return Result;
  };
  this.prompt = function (TextMessage, promptString) {
    var Result = "";
    var str = "";
    var res=prompt(TextMessage,promptString);
    if (res==null) {str=''} else {str=res};
    Result = str;
    return Result;
  };
  this.JSONStringToStringList = function (JSONString) {
    var Result = null;
    var items = null;
    var TempString = "";
    TempString = JSONString;
    TempString = pas.SysUtils.StringReplace(TempString,"[","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    TempString = pas.SysUtils.StringReplace(TempString,"]","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    TempString = pas.SysUtils.StringReplace(TempString,'"',"",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    items = pas.Classes.TStringList.$create("Create$1");
    items.FStrictDelimiter = true;
    items.SetLineBreak(",");
    items.SetTextStr(TempString);
    Result = items;
    return Result;
  };
  this.StringListToJSONString = function (StringList) {
    var Result = "";
    var TempString = "";
    var i = 0;
    TempString = "[";
    for (var $l1 = 0, $end2 = StringList.GetCount() - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (i > 0) TempString = TempString + ",";
      TempString = ((TempString + '"') + StringList.Get(i)) + '"';
    };
    TempString = TempString + "]";
    Result = TempString;
    return Result;
  };
  this.NumArrayToJSONString = function (NumArray) {
    var Result = "";
    var TempString = "";
    var i = 0;
    TempString = "[";
    for (var $l1 = 0, $end2 = rtl.length(NumArray) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (i > 0) TempString = TempString + ",";
      TempString = TempString + pas.SysUtils.FloatToStr(NumArray[i]);
    };
    TempString = TempString + "]";
    Result = TempString;
    return Result;
  };
  this.ImgArrayToJSONString = function (ImgArray) {
    var Result = "";
    var TempString = "";
    var i = 0;
    TempString = "[";
    for (var $l1 = 0, $end2 = rtl.length(ImgArray) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (i > 0) TempString = TempString + ",";
      TempString = TempString + ImgArray[i];
    };
    TempString = TempString + "]";
    Result = TempString;
    return Result;
  };
  this.HexRGBToColor = function (RGBString, r, g, b, a) {
    var bits = null;
    var str = "";
    var rs = "";
    var gs = "";
    var bs = "";
    r.set(0);
    g.set(0);
    b.set(0);
    a.set(255);
    if (RGBString !== "") {
      bits = $mod.stringsplit(RGBString,"#");
      if (bits.GetCount() > 1) {
        str = bits.Get(1);
        if (str.length === 6) {
          rs = str.charAt(0) + str.charAt(1);
          gs = str.charAt(2) + str.charAt(3);
          bs = str.charAt(4) + str.charAt(5);
          r.set(pas.SysUtils.StrToInt("$" + rs));
          g.set(pas.SysUtils.StrToInt("$" + gs));
          b.set(pas.SysUtils.StrToInt("$" + bs));
        };
        a.set(0);
      };
    };
  };
  this.ShowMessage = function (text) {
    alert(text);
  };
  this.MainUnitName = "";
  $mod.$init = function () {
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.CheckMatch = function (Instring, teststring, startpos) {
    var Result = false;
    var i = 0;
    var match = false;
    var temp1 = "";
    var temp2 = "";
    match = true;
    for (var $l1 = 1, $end2 = teststring.length; $l1 <= $end2; $l1++) {
      i = $l1;
      if (((i + startpos) - 1) <= Instring.length) {
        temp1 = Instring.charAt(((i + startpos) - 1) - 1);
        temp2 = teststring.charAt(i - 1);
        if (temp1 !== temp2) match = false;
      } else match = false;
    };
    Result = match;
    return Result;
  };
});
rtl.module("TypInfo",["System","SysUtils","Types","RTLConsts","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TTypeKind = {"0": "tkUnknown", tkUnknown: 0, "1": "tkInteger", tkInteger: 1, "2": "tkChar", tkChar: 2, "3": "tkString", tkString: 3, "4": "tkEnumeration", tkEnumeration: 4, "5": "tkSet", tkSet: 5, "6": "tkDouble", tkDouble: 6, "7": "tkBool", tkBool: 7, "8": "tkProcVar", tkProcVar: 8, "9": "tkMethod", tkMethod: 9, "10": "tkArray", tkArray: 10, "11": "tkDynArray", tkDynArray: 11, "12": "tkRecord", tkRecord: 12, "13": "tkClass", tkClass: 13, "14": "tkClassRef", tkClassRef: 14, "15": "tkPointer", tkPointer: 15, "16": "tkJSValue", tkJSValue: 16, "17": "tkRefToProcVar", tkRefToProcVar: 17, "18": "tkInterface", tkInterface: 18};
  $mod.$rtti.$Enum("TTypeKind",{minvalue: 0, maxvalue: 18, ordtype: 1, enumtype: this.TTypeKind});
  $mod.$rtti.$Set("TTypeKinds",{comptype: $mod.$rtti["TTypeKind"]});
  this.tkFloat = $mod.TTypeKind.tkDouble;
  this.tkProcedure = $mod.TTypeKind.tkProcVar;
  this.tkAny = rtl.createSet(null,$mod.TTypeKind.tkUnknown,$mod.TTypeKind.tkInterface);
  this.tkMethods = rtl.createSet($mod.TTypeKind.tkMethod);
  this.tkProperties = rtl.diffSet(rtl.diffSet($mod.tkAny,$mod.tkMethods),rtl.createSet($mod.TTypeKind.tkUnknown));
  $mod.$rtti.$ClassRef("TTypeInfoClassOf",{instancetype: $mod.$rtti["TTypeInfo"]});
  this.TOrdType = {"0": "otSByte", otSByte: 0, "1": "otUByte", otUByte: 1, "2": "otSWord", otSWord: 2, "3": "otUWord", otUWord: 3, "4": "otSLong", otSLong: 4, "5": "otULong", otULong: 5, "6": "otSIntDouble", otSIntDouble: 6, "7": "otUIntDouble", otUIntDouble: 7};
  $mod.$rtti.$Enum("TOrdType",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TOrdType});
  this.TParamFlag = {"0": "pfVar", pfVar: 0, "1": "pfConst", pfConst: 1, "2": "pfOut", pfOut: 2, "3": "pfArray", pfArray: 3};
  $mod.$rtti.$Enum("TParamFlag",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TParamFlag});
  $mod.$rtti.$Set("TParamFlags",{comptype: $mod.$rtti["TParamFlag"]});
  $mod.$rtti.$DynArray("TProcedureParams",{eltype: $mod.$rtti["TProcedureParam"]});
  this.TProcedureFlag = {"0": "pfStatic", pfStatic: 0, "1": "pfVarargs", pfVarargs: 1, "2": "pfExternal", pfExternal: 2};
  $mod.$rtti.$Enum("TProcedureFlag",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TProcedureFlag});
  $mod.$rtti.$Set("TProcedureFlags",{comptype: $mod.$rtti["TProcedureFlag"]});
  this.TMethodKind = {"0": "mkProcedure", mkProcedure: 0, "1": "mkFunction", mkFunction: 1, "2": "mkConstructor", mkConstructor: 2, "3": "mkDestructor", mkDestructor: 3, "4": "mkClassProcedure", mkClassProcedure: 4, "5": "mkClassFunction", mkClassFunction: 5};
  $mod.$rtti.$Enum("TMethodKind",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TMethodKind});
  $mod.$rtti.$Set("TMethodKinds",{comptype: $mod.$rtti["TMethodKind"]});
  this.TTypeMemberKind = {"0": "tmkUnknown", tmkUnknown: 0, "1": "tmkField", tmkField: 1, "2": "tmkMethod", tmkMethod: 2, "3": "tmkProperty", tmkProperty: 3};
  $mod.$rtti.$Enum("TTypeMemberKind",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTypeMemberKind});
  $mod.$rtti.$Set("TTypeMemberKinds",{comptype: $mod.$rtti["TTypeMemberKind"]});
  $mod.$rtti.$DynArray("TTypeMemberDynArray",{eltype: $mod.$rtti["TTypeMember"]});
  $mod.$rtti.$DynArray("TTypeMemberMethodDynArray",{eltype: $mod.$rtti["TTypeMemberMethod"]});
  this.pfGetFunction = 1;
  this.pfSetProcedure = 2;
  this.pfStoredFalse = 4;
  this.pfStoredField = 8;
  this.pfStoredFunction = 12;
  this.pfHasIndex = 16;
  $mod.$rtti.$DynArray("TTypeMemberPropertyDynArray",{eltype: $mod.$rtti["TTypeMemberProperty"]});
  rtl.createClass($mod,"EPropertyError",pas.SysUtils.Exception,function () {
  });
  this.GetClassMembers = function (aTIClass) {
    var Result = [];
    var C = null;
    var i = 0;
    var PropName = "";
    var Names = null;
    Result = [];
    Names = new Object();
    C = aTIClass;
    while (C !== null) {
      for (var $l1 = 0, $end2 = rtl.length(C.names) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        PropName = C.names[i];
        if (Names.hasOwnProperty(PropName)) continue;
        Result.push(C.members[PropName]);
        Names[PropName] = true;
      };
      C = C.ancestor;
    };
    return Result;
  };
  this.GetClassMember = function (aTIClass, aName) {
    var Result = null;
    var C = null;
    var i = 0;
    C = aTIClass;
    while (C !== null) {
      if (C.members.hasOwnProperty(aName)) return C.members[aName];
      C = C.ancestor;
    };
    C = aTIClass;
    while (C !== null) {
      for (var $l1 = 0, $end2 = rtl.length(C.names) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.CompareText(C.names[i],aName) === 0) return C.members[C.names[i]];
      };
      C = C.ancestor;
    };
    Result = null;
    return Result;
  };
  this.GetInstanceMethod = function (Instance, aName) {
    var Result = null;
    var TI = null;
    if (Instance === null) return null;
    TI = $mod.GetClassMember(Instance.$rtti,aName);
    if (!rtl.isExt(TI,rtl.tTypeMemberMethod)) return null;
    Result = rtl.createCallback(Instance,TI.name);
    return Result;
  };
  this.GetClassMethods = function (aTIClass) {
    var Result = [];
    var C = null;
    var i = 0;
    var Cnt = 0;
    var j = 0;
    Cnt = 0;
    C = aTIClass;
    while (C !== null) {
      Cnt += C.methods.length;
      C = C.ancestor;
    };
    Result = rtl.arraySetLength(Result,null,Cnt);
    C = aTIClass;
    i = 0;
    while (C !== null) {
      for (var $l1 = 0, $end2 = C.methods.length - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        Result[i] = C.members[C.methods[j]];
        i += 1;
      };
      C = C.ancestor;
    };
    return Result;
  };
  this.GetInterfaceMembers = function (aTIInterface) {
    var Result = [];
    var Intf = null;
    var i = 0;
    var Cnt = 0;
    var j = 0;
    Cnt = 0;
    Intf = aTIInterface;
    while (Intf !== null) {
      Cnt += rtl.length(Intf.names);
      Intf = Intf.ancestor;
    };
    Result = rtl.arraySetLength(Result,null,Cnt);
    Intf = aTIInterface;
    i = 0;
    while (Intf !== null) {
      for (var $l1 = 0, $end2 = rtl.length(Intf.names) - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        Result[i] = Intf.members[Intf.names[j]];
        i += 1;
      };
      Intf = Intf.ancestor;
    };
    return Result;
  };
  this.GetInterfaceMember = function (aTIInterface, aName) {
    var Result = null;
    var Intf = null;
    var i = 0;
    Intf = aTIInterface;
    while (Intf !== null) {
      if (Intf.members.hasOwnProperty(aName)) return Intf.members[aName];
      Intf = Intf.ancestor;
    };
    Intf = aTIInterface;
    while (Intf !== null) {
      for (var $l1 = 0, $end2 = rtl.length(Intf.names) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.CompareText(Intf.names[i],aName) === 0) return Intf.members[Intf.names[i]];
      };
      Intf = Intf.ancestor;
    };
    Result = null;
    return Result;
  };
  this.GetInterfaceMethods = function (aTIInterface) {
    var Result = [];
    var Intf = null;
    var i = 0;
    var Cnt = 0;
    var j = 0;
    Cnt = 0;
    Intf = aTIInterface;
    while (Intf !== null) {
      Cnt += Intf.methods.length;
      Intf = Intf.ancestor;
    };
    Result = rtl.arraySetLength(Result,null,Cnt);
    Intf = aTIInterface;
    i = 0;
    while (Intf !== null) {
      for (var $l1 = 0, $end2 = Intf.methods.length - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        Result[i] = Intf.members[Intf.methods[j]];
        i += 1;
      };
      Intf = Intf.ancestor;
    };
    return Result;
  };
  this.GetPropInfos = function (aTIClass) {
    var Result = [];
    var C = null;
    var i = 0;
    var Names = null;
    var PropName = "";
    Result = [];
    C = aTIClass;
    Names = new Object();
    while (C !== null) {
      for (var $l1 = 0, $end2 = C.properties.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        PropName = C.properties[i];
        if (Names.hasOwnProperty(PropName)) continue;
        Result.push(C.members[PropName]);
        Names[PropName] = true;
      };
      C = C.ancestor;
    };
    return Result;
  };
  this.GetPropList = function (aTIClass, TypeKinds, Sorted) {
    var Result = [];
    function NameSort(a, b) {
      var Result = 0;
      if (rtl.getObject(a).name < rtl.getObject(b).name) {
        Result = -1}
       else if (rtl.getObject(a).name > rtl.getObject(b).name) {
        Result = 1}
       else Result = 0;
      return Result;
    };
    var C = null;
    var i = 0;
    var Names = null;
    var PropName = "";
    var Prop = null;
    Result = [];
    C = aTIClass;
    Names = new Object();
    while (C !== null) {
      for (var $l1 = 0, $end2 = C.properties.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        PropName = C.properties[i];
        if (Names.hasOwnProperty(PropName)) continue;
        Prop = C.members[PropName];
        if (!(Prop.typeinfo.kind in TypeKinds)) continue;
        Result.push(Prop);
        Names[PropName] = true;
      };
      C = C.ancestor;
    };
    if (Sorted) Result.sort(NameSort);
    return Result;
  };
  this.GetPropList$1 = function (aTIClass) {
    var Result = [];
    Result = $mod.GetPropInfos(aTIClass);
    return Result;
  };
  this.GetPropList$2 = function (AClass) {
    var Result = [];
    Result = $mod.GetPropInfos(AClass.$rtti);
    return Result;
  };
  this.GetPropList$3 = function (Instance) {
    var Result = [];
    Result = $mod.GetPropList$2(Instance.$class.ClassType());
    return Result;
  };
  this.GetPropInfo = function (TI, PropName) {
    var Result = null;
    var m = null;
    var i = 0;
    var C = null;
    C = TI;
    while (C !== null) {
      m = C.members[PropName];
      if (rtl.isExt(m,rtl.tTypeMemberProperty)) return m;
      C = C.ancestor;
    };
    Result = null;
    do {
      for (var $l1 = 0, $end2 = TI.properties.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.CompareText(PropName,TI.properties[i]) === 0) {
          m = TI.members[TI.properties[i]];
          if (rtl.isExt(m,rtl.tTypeMemberProperty)) Result = m;
          return Result;
        };
      };
      TI = TI.ancestor;
    } while (!(TI === null));
    return Result;
  };
  this.GetPropInfo$1 = function (TI, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo(TI,PropName);
    if ((rtl.neSet(Kinds,{}) && (Result !== null)) && !(Result.typeinfo.kind in Kinds)) Result = null;
    return Result;
  };
  this.GetPropInfo$2 = function (Instance, PropName) {
    var Result = null;
    Result = $mod.GetPropInfo$1(Instance.$rtti,PropName,{});
    return Result;
  };
  this.GetPropInfo$3 = function (Instance, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo$1(Instance.$rtti,PropName,Kinds);
    return Result;
  };
  this.GetPropInfo$4 = function (aClass, PropName) {
    var Result = null;
    Result = $mod.GetPropInfo$1(aClass.$rtti,PropName,{});
    return Result;
  };
  this.GetPropInfo$5 = function (aClass, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo$1(aClass.$rtti,PropName,Kinds);
    return Result;
  };
  this.FindPropInfo = function (Instance, PropName) {
    var Result = null;
    Result = $mod.GetPropInfo(Instance.$rtti,PropName);
    if (Result === null) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SErrPropertyNotFound,[PropName]]);
    return Result;
  };
  this.FindPropInfo$1 = function (Instance, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo$1(Instance.$rtti,PropName,Kinds);
    if (Result === null) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SErrPropertyNotFound,[PropName]]);
    return Result;
  };
  this.FindPropInfo$2 = function (aClass, PropName) {
    var Result = null;
    Result = $mod.GetPropInfo(aClass.$rtti,PropName);
    if (Result === null) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SErrPropertyNotFound,[PropName]]);
    return Result;
  };
  this.FindPropInfo$3 = function (aClass, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo$1(aClass.$rtti,PropName,Kinds);
    if (Result === null) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SErrPropertyNotFound,[PropName]]);
    return Result;
  };
  this.IsStoredProp = function (Instance, PropInfo) {
    var Result = false;
    var $tmp1 = PropInfo.flags & 12;
    if ($tmp1 === 0) {
      Result = true}
     else if ($tmp1 === 4) {
      Result = false}
     else if ($tmp1 === 8) {
      Result = !(Instance[PropInfo.stored] == false)}
     else {
      Result = Instance[PropInfo.stored]();
    };
    return Result;
  };
  this.IsStoredProp$1 = function (Instance, PropName) {
    var Result = false;
    Result = $mod.IsStoredProp(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.IsPublishedProp = function (Instance, PropName) {
    var Result = false;
    Result = $mod.GetPropInfo$2(Instance,PropName) !== null;
    return Result;
  };
  this.IsPublishedProp$1 = function (aClass, PropName) {
    var Result = false;
    Result = $mod.GetPropInfo$4(aClass,PropName) !== null;
    return Result;
  };
  this.PropType = function (Instance, PropName) {
    var Result = 0;
    Result = $mod.FindPropInfo(Instance,PropName).typeinfo.kind;
    return Result;
  };
  this.PropType$1 = function (aClass, PropName) {
    var Result = 0;
    Result = $mod.FindPropInfo$2(aClass,PropName).typeinfo.kind;
    return Result;
  };
  this.PropIsType = function (Instance, PropName, TypeKind) {
    var Result = false;
    Result = $mod.PropType(Instance,PropName) === TypeKind;
    return Result;
  };
  this.PropIsType$1 = function (aClass, PropName, TypeKind) {
    var Result = false;
    Result = $mod.PropType$1(aClass,PropName) === TypeKind;
    return Result;
  };
  this.GetJSValueProp = function (Instance, PropName) {
    var Result = undefined;
    Result = $mod.GetJSValueProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetJSValueProp$1 = function (Instance, PropInfo) {
    var Result = undefined;
    var gk = 0;
    gk = $impl.GetPropGetterKind(PropInfo);
    var $tmp1 = gk;
    if ($tmp1 === $impl.TGetterKind.gkNone) {
      throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SCantReadPropertyS,[PropInfo.name]])}
     else if ($tmp1 === $impl.TGetterKind.gkField) {
      Result = Instance[PropInfo.getter]}
     else if ($tmp1 === $impl.TGetterKind.gkFunction) {
      if ((16 & PropInfo.flags) > 0) {
        Result = Instance[PropInfo.getter](PropInfo.index)}
       else Result = Instance[PropInfo.getter]()}
     else if ($tmp1 === $impl.TGetterKind.gkFunctionWithParams) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SIndexedPropertyNeedsParams,[PropInfo.name]]);
    return Result;
  };
  this.SetJSValueProp = function (Instance, PropName, Value) {
    $mod.SetJSValueProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetJSValueProp$1 = function (Instance, PropInfo, Value) {
    var sk = 0;
    sk = $impl.GetPropSetterKind(PropInfo);
    var $tmp1 = sk;
    if ($tmp1 === $impl.TSetterKind.skNone) {
      throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SCantWritePropertyS,[PropInfo.name]])}
     else if ($tmp1 === $impl.TSetterKind.skField) {
      Instance[PropInfo.setter] = Value}
     else if ($tmp1 === $impl.TSetterKind.skProcedure) {
      if ((16 & PropInfo.flags) > 0) {
        Instance[PropInfo.setter](PropInfo.index,Value)}
       else Instance[PropInfo.setter](Value)}
     else if ($tmp1 === $impl.TSetterKind.skProcedureWithParams) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SIndexedPropertyNeedsParams,[PropInfo.name]]);
  };
  this.GetNativeIntProp = function (Instance, PropName) {
    var Result = 0;
    Result = $mod.GetNativeIntProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetNativeIntProp$1 = function (Instance, PropInfo) {
    var Result = 0;
    Result = Math.floor($mod.GetJSValueProp$1(Instance,PropInfo));
    return Result;
  };
  this.SetNativeIntProp = function (Instance, PropName, Value) {
    $mod.SetJSValueProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetNativeIntProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$1(Instance,PropInfo,Value);
  };
  this.GetOrdProp = function (Instance, PropName) {
    var Result = 0;
    Result = $mod.GetOrdProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetOrdProp$1 = function (Instance, PropInfo) {
    var Result = 0;
    var o = null;
    var Key = "";
    var n = 0;
    if (PropInfo.typeinfo.kind === $mod.TTypeKind.tkSet) {
      o = rtl.getObject($mod.GetJSValueProp$1(Instance,PropInfo));
      Result = 0;
      for (Key in o) {
        n = parseInt(Key,10);
        if (n < 32) Result = Result + (1 << n);
      };
    } else Result = Math.floor($mod.GetJSValueProp$1(Instance,PropInfo));
    return Result;
  };
  this.SetOrdProp = function (Instance, PropName, Value) {
    $mod.SetOrdProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetOrdProp$1 = function (Instance, PropInfo, Value) {
    var o = null;
    var i = 0;
    if (PropInfo.typeinfo.kind === $mod.TTypeKind.tkSet) {
      o = new Object();
      for (i = 0; i <= 31; i++) if (((1 << i) & Value) > 0) o["" + i] = true;
      $mod.SetJSValueProp$1(Instance,PropInfo,o);
    } else $mod.SetJSValueProp$1(Instance,PropInfo,Value);
  };
  this.GetEnumProp = function (Instance, PropName) {
    var Result = "";
    Result = $mod.GetEnumProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetEnumProp$1 = function (Instance, PropInfo) {
    var Result = "";
    var n = 0;
    var TIEnum = null;
    TIEnum = rtl.asExt(PropInfo.typeinfo,rtl.tTypeInfoEnum);
    n = Math.floor($mod.GetJSValueProp$1(Instance,PropInfo));
    if ((n >= TIEnum.minvalue) && (n <= TIEnum.maxvalue)) {
      Result = TIEnum.enumtype[n]}
     else Result = "" + n;
    return Result;
  };
  this.SetEnumProp = function (Instance, PropName, Value) {
    $mod.SetEnumProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetEnumProp$1 = function (Instance, PropInfo, Value) {
    var TIEnum = null;
    var n = 0;
    TIEnum = rtl.asExt(PropInfo.typeinfo,rtl.tTypeInfoEnum);
    n = TIEnum.enumtype[Value];
    if (!pas.JS.isUndefined(n)) $mod.SetJSValueProp$1(Instance,PropInfo,n);
  };
  this.GetEnumName = function (TypeInfo, Value) {
    var Result = "";
    Result = TypeInfo.enumtype[Value];
    return Result;
  };
  this.GetEnumValue = function (TypeInfo, Name) {
    var Result = 0;
    Result = TypeInfo.enumtype[Name];
    return Result;
  };
  this.GetEnumNameCount = function (TypeInfo) {
    var Result = 0;
    var o = null;
    var l = 0;
    var r = 0;
    o = TypeInfo.enumtype;
    Result = 1;
    while (o.hasOwnProperty("" + Result)) Result = Result * 2;
    l = Math.floor(Result / 2);
    r = Result;
    while (l <= r) {
      Result = Math.floor((l + r) / 2);
      if (o.hasOwnProperty("" + Result)) {
        l = Result + 1}
       else r = Result - 1;
    };
    if (o.hasOwnProperty("" + Result)) Result += 1;
    return Result;
  };
  this.GetSetProp = function (Instance, PropName) {
    var Result = "";
    Result = $mod.GetSetProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetSetProp$1 = function (Instance, PropInfo) {
    var Result = "";
    var o = null;
    var key = "";
    var Value = "";
    var n = 0;
    var TIEnum = null;
    var TISet = null;
    Result = "";
    TISet = rtl.asExt(PropInfo.typeinfo,rtl.tTypeInfoSet);
    TIEnum = null;
    if (rtl.isExt(TISet.comptype,rtl.tTypeInfoEnum)) TIEnum = TISet.comptype;
    o = rtl.getObject($mod.GetJSValueProp$1(Instance,PropInfo));
    for (key in o) {
      n = parseInt(key,10);
      if (((TIEnum !== null) && (n >= TIEnum.minvalue)) && (n <= TIEnum.maxvalue)) {
        Value = TIEnum.enumtype[n]}
       else Value = "" + n;
      if (Result !== "") Result = Result + ",";
      Result = Result + Value;
    };
    Result = ("[" + Result) + "]";
    return Result;
  };
  this.GetSetPropArray = function (Instance, PropName) {
    var Result = [];
    Result = $mod.GetSetPropArray$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetSetPropArray$1 = function (Instance, PropInfo) {
    var Result = [];
    var o = null;
    var Key = "";
    Result = [];
    o = rtl.getObject($mod.GetJSValueProp$1(Instance,PropInfo));
    for (Key in o) Result.push(parseInt(Key,10));
    return Result;
  };
  this.SetSetPropArray = function (Instance, PropName, Arr) {
    $mod.SetSetPropArray$1(Instance,$mod.FindPropInfo(Instance,PropName),Arr);
  };
  this.SetSetPropArray$1 = function (Instance, PropInfo, Arr) {
    var o = null;
    var i = 0;
    o = new Object();
    for (var $in1 = Arr, $l2 = 0, $end3 = rtl.length($in1) - 1; $l2 <= $end3; $l2++) {
      i = $in1[$l2];
      o["" + i] = true;
    };
    $mod.SetJSValueProp$1(Instance,PropInfo,o);
  };
  this.GetStrProp = function (Instance, PropName) {
    var Result = "";
    Result = $mod.GetStrProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetStrProp$1 = function (Instance, PropInfo) {
    var Result = "";
    Result = "" + $mod.GetJSValueProp$1(Instance,PropInfo);
    return Result;
  };
  this.SetStrProp = function (Instance, PropName, Value) {
    $mod.SetStrProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetStrProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$1(Instance,PropInfo,Value);
  };
  this.GetStringProp = function (Instance, PropName) {
    var Result = "";
    Result = $mod.GetStrProp(Instance,PropName);
    return Result;
  };
  this.GetStringProp$1 = function (Instance, PropInfo) {
    var Result = "";
    Result = $mod.GetStrProp$1(Instance,PropInfo);
    return Result;
  };
  this.SetStringProp = function (Instance, PropName, Value) {
    $mod.SetStrProp(Instance,PropName,Value);
  };
  this.SetStringProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetStrProp$1(Instance,PropInfo,Value);
  };
  this.GetBoolProp = function (Instance, PropName) {
    var Result = false;
    Result = $mod.GetBoolProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetBoolProp$1 = function (Instance, PropInfo) {
    var Result = false;
    Result = !($mod.GetJSValueProp$1(Instance,PropInfo) == false);
    return Result;
  };
  this.SetBoolProp = function (Instance, PropName, Value) {
    $mod.SetBoolProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetBoolProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$1(Instance,PropInfo,Value);
  };
  this.GetObjectProp = function (Instance, PropName) {
    var Result = null;
    Result = $mod.GetObjectProp$2(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetObjectProp$1 = function (Instance, PropName, MinClass) {
    var Result = null;
    Result = $mod.GetObjectProp$2(Instance,$mod.FindPropInfo(Instance,PropName));
    if ((MinClass !== null) && (Result !== null)) if (!Result.$class.InheritsFrom(MinClass)) Result = null;
    return Result;
  };
  this.GetObjectProp$2 = function (Instance, PropInfo) {
    var Result = null;
    Result = $mod.GetObjectProp$3(Instance,PropInfo,null);
    return Result;
  };
  this.GetObjectProp$3 = function (Instance, PropInfo, MinClass) {
    var Result = null;
    var O = null;
    O = rtl.getObject($mod.GetJSValueProp$1(Instance,PropInfo));
    if ((MinClass !== null) && !O.$class.InheritsFrom(MinClass)) {
      Result = null}
     else Result = O;
    return Result;
  };
  this.SetObjectProp = function (Instance, PropName, Value) {
    $mod.SetObjectProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetObjectProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$1(Instance,PropInfo,Value);
  };
  this.GetFloatProp = function (Instance, PropName) {
    var Result = 0.0;
    Result = $mod.GetFloatProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetFloatProp$1 = function (Instance, PropInfo) {
    var Result = 0.0;
    Result = rtl.getNumber($mod.GetJSValueProp$1(Instance,PropInfo));
    return Result;
  };
  this.SetFloatProp = function (Instance, PropName, Value) {
    $mod.SetFloatProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetFloatProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$1(Instance,PropInfo,Value);
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.TGetterKind = {"0": "gkNone", gkNone: 0, "1": "gkField", gkField: 1, "2": "gkFunction", gkFunction: 2, "3": "gkFunctionWithParams", gkFunctionWithParams: 3};
  $impl.GetPropGetterKind = function (PropInfo) {
    var Result = 0;
    if (PropInfo.getter === "") {
      Result = $impl.TGetterKind.gkNone}
     else if ((1 & PropInfo.flags) > 0) {
      if (rtl.length(PropInfo.params) > 0) {
        Result = $impl.TGetterKind.gkFunctionWithParams}
       else Result = $impl.TGetterKind.gkFunction;
    } else Result = $impl.TGetterKind.gkField;
    return Result;
  };
  $impl.TSetterKind = {"0": "skNone", skNone: 0, "1": "skField", skField: 1, "2": "skProcedure", skProcedure: 2, "3": "skProcedureWithParams", skProcedureWithParams: 3};
  $impl.GetPropSetterKind = function (PropInfo) {
    var Result = 0;
    if (PropInfo.setter === "") {
      Result = $impl.TSetterKind.skNone}
     else if ((2 & PropInfo.flags) > 0) {
      if (rtl.length(PropInfo.params) > 0) {
        Result = $impl.TSetterKind.skProcedureWithParams}
       else Result = $impl.TSetterKind.skProcedure;
    } else Result = $impl.TSetterKind.skField;
    return Result;
  };
});
rtl.module("Events",["System","SysUtils","Classes","StringUtils","NodeUtils","EventsInterface","HTMLUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.FindEventFunction = function (myName, EventType, MyNode, DoBind) {
    var Result = null;
    var UnitName = "";
    var fn = null;
    UnitName = pas.StringUtils.MainUnitName + "Events";
    fn = null;
    try {
    //alert('FindEventFunction NodeName='+MyNode.NodeName);
    
      fn=null;
      var handlerName=myName+'Handle'+EventType;
    
      // FIRST ..... Look for a compiled handler function in the Form ....
      if (MyNode.MyForm!=null) {
        fn = MyNode.MyForm[handlerName];
        if (fn!=null) {
          fn = fn.bind(MyNode.MyForm);     // so that the 'this' context will be preserved
        }
      }
    
      // SECOND .....
      if (fn==null) {
      // the component may have been created dynamically at run-time.
      // in which case look for a registered event.
        fn = MyNode.FindRegisteredEvent(EventType);
      }
    
      // THIRD ......
      if (fn==null) {
      // the component may have been created dynamically at run-time
      // with dynamically added event code (eg. using the XIDE project)
      // in which case look for the event handler in module XIDEMainEvents
    
        //alert('FindEventFunction looking in dynamic events unit '+UnitName+' for '+handlerName);
        var mdl=pas[UnitName];
        if ((mdl!=null)&&(mdl!=undefined)) {
          //alert('found module '+UnitName);
            fn = mdl[ handlerName];
            if (fn!=null) {
              //alert('found function '+handlerName);
              if (DoBind) {
              fn = fn.bind(mdl); }    // so that the 'this' context will be preserved
            }
          }
        }
    
        // FOURTH ......
        if (fn==null) {
        // the event we seek may be a thread event, for a TXThreads component.
        // These events are compiled into a separate unit (MainUnitName+'EventsThreads')
    
          //alert('FindEventFunction looking in thread events unit '+UnitName+'Threads for '+handlerName);
          var mdl=pas[UnitName+'Threads'];
          if ((mdl!=null)&&(mdl!=undefined)) {
            //alert('found module '+UnitName);
              fn = mdl[ handlerName];
              if (fn!=null) {
                //alert('found function '+handlerName);
                if (DoBind) {
                fn = fn.bind(mdl); }    // so that the 'this' context will be preserved
              }
            }
          }
        if (fn==undefined) {fn=null;}
    
    }catch(err) { alert(err.message+'  in Events.FindEventFunction '+myName+' '+EventType);};
    Result = fn;
    return Result;
  };
  this.DllName = "";
  this.handleEvent = function (e, MyEventType, nodeID, myValue, PropName) {
    var CurrentNode = null;
    if (pas.NodeUtils.StartingUp === false) {
      if (e === null) {
        e = pas.EventsInterface.TEventStatus.$create("Create$1",[MyEventType,nodeID]);
      };
      if (((MyEventType === "TreeNodeClick") || (MyEventType === "DragStart")) || (MyEventType === "Drop")) {
        CurrentNode = pas.HTMLUtils.GetDataNodeFromTreeNode(nodeID);
      } else CurrentNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,nodeID,false);
      if ((CurrentNode !== null) && (pas.NodeUtils.MainForm !== null)) {
        if (e.InitRunning === false) {
          $impl.ExecuteEventTrappers(e,MyEventType,CurrentNode.NodeName,myValue,CurrentNode)}
         else e.ContinueAfterTrappers = true;
        if (e.ContinueAfterTrappers) {
          $impl.ExecuteEventHandlers(e,MyEventType,CurrentNode.NodeName,myValue,CurrentNode);
        };
      };
    };
  };
  this.handleEvent$1 = function (e, MyEventType, nodeID, myValue) {
    $mod.handleEvent(e,MyEventType,nodeID,myValue,"");
  };
  this.handleEvent$2 = function (MyEventType, nodeID, myValue) {
    $mod.handleEvent(null,MyEventType,nodeID,myValue,"");
  };
  $mod.$init = function () {
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.RunComponentEvent = function (e, myName, EventType, MyNode, MyValue) {
    var UnitName = "";
    var fn = null;
    UnitName = pas.StringUtils.MainUnitName + "Events";
    fn = $mod.FindEventFunction(myName,EventType,MyNode,true);
    try {
        // Execute the function, if found....
      if (fn!=null)  {
      fn(e,myName,MyValue);
       // alert('function done.');
    }
    }catch(err) { alert(err.message+'  in Events.RunComponentEvent '+myName+' '+EventType);};
  };
  $impl.ExecuteEventTrappers = function (e, MyEventType, nodeID, myValue, myNode) {
    var Result = "";
    var i = 0;
    var j = 0;
    var NumHandlers = 0;
    var trappers = [];
    var newe = null;
    trappers = pas.NodeUtils.FindNodesOfType(pas.NodeUtils.SystemNodeTree,"TXTrapEvents");
    for (var $l1 = 0, $end2 = rtl.length(trappers) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (trappers[i].NodeClass === "NV") {
        NumHandlers = trappers[i].myEventTypes.GetCount();
        for (var $l3 = 0, $end4 = NumHandlers - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          newe = pas.EventsInterface.TEventStatus.$create("Create$1",[MyEventType,nodeID]);
          newe.eventValue = myValue;
          $impl.RunComponentEvent(newe,trappers[i].NodeName,trappers[i].myEventTypes.Get(j),trappers[i],"");
          e.ContinueAfterTrappers = newe.ContinueAfterTrappers;
        };
      };
    };
    return Result;
  };
  $impl.ExecuteEventHandlers = function (e, MyEventType, nodeID, myValue, myNode) {
    var Result = "";
    var i = 0;
    var NumHandlers = 0;
    NumHandlers = myNode.myEventTypes.GetCount();
    for (var $l1 = 0, $end2 = NumHandlers - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (myNode.myEventTypes.Get(i) === MyEventType) {
        $impl.RunComponentEvent(e,nodeID,MyEventType,myNode,myValue);
      };
    };
    return Result;
  };
});
rtl.module("XScrollBox",["System","Classes","SysUtils","NodeUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXScrollBox",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetScrollType = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ScrollType",true).AttribValue;
      return Result;
    };
    this.SetScrollType = function (AValue) {
      var AVal = "";
      this.myNode.SetAttributeValue$2("ScrollType",AValue);
      AVal = pas.SysUtils.UpperCase(AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        ob.style.overlow='none';
        if ((AVal=='BOTH')||(AVal=='RIGHT')) {ob.style.overflowY='scroll';}
        if ((AVal=='BOTH')||(AVal=='BOTTOM')) {ob.style.overflowX='scroll';}
        };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.FAlignChildrenVertical = true;
      this.SetMyEventTypes();
      this.FIsContainer = true;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("ScrollType",3,rtl.string,"GetScrollType","SetScrollType");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerWidth","String","300px","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerHeight","String","300px","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BgColor","Color","#FFFFFF","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ScrollType","String","Both","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"ScrollType",pas.NodeUtils.ScrollBarsOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelText");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXScrollBox";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ScrollType = "";
    var OnClickString = "";
    ScrollType = pas.SysUtils.UpperCase(MyNode.GetAttribute("ScrollType",true).AttribValue);
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value);" ';
    try{
    
          var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
          var HTMLString='';
          var MyObjectName=ScreenObjectName+'Contents';
          var oflow = ''
          if ((ScrollType=='BOTH')||(ScrollType=='RIGHT')) {oflow = 'overflow-y:scroll; '}
          if ((ScrollType=='BOTH')||(ScrollType=='BOTTOM')) {oflow = oflow+'overflow-x:scroll; '}
    
          HTMLString = '<div id='+MyObjectName+ '  class="vboxNoStretch" style="'+oflow+' height:100%; width:100%;" ' +
                       OnClickString +
                       '></div> ';
    
    
          var wrapper=document.getElementById(ScreenObjectName);
          wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
        }
        catch(err) { alert(err.message+'  in XScrollBox.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXScrollBox.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XTabControl",["System","Classes","SysUtils","NodeUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.ChangeTabPage = function (nodeId, parentNodeId) {
    var Result = "";
    $impl.openTab(nodeId,parentNodeId + "Contents");
    return Result;
  };
  rtl.createClass($mod,"TXTabControl",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
    };
    this.GetmyTabIndex = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("TabIndex",true).AttribValue);
      return Result;
    };
    this.SetmyTabIndex = function (AValue) {
      var myTabSheetNode = "";
      var idx = 0;
      idx = AValue;
      if (rtl.length(this.myNode.ChildNodes) > 0) {
        if ((idx >= rtl.length(this.myNode.ChildNodes)) || (idx < 0)) idx = 0;
      };
      this.myNode.SetAttributeValue$2("TabIndex",pas.SysUtils.IntToStr(idx));
      if ((idx > -1) && (rtl.length(this.myNode.ChildNodes) > idx)) {
        myTabSheetNode = this.myNode.ChildNodes[idx].NodeName;
        $impl.openTab(myTabSheetNode,this.NodeName + "Contents");
      };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.FAlignChildrenVertical = true;
      this.SetMyEventTypes();
      this.FIsContainer = true;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.ControlDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("TabIndex",3,rtl.longint,"GetmyTabIndex","SetmyTabIndex");
  });
  rtl.createClass($mod,"TXTabSheet",pas.WrapperPanel.TWrapperPanel,function () {
    this.GetCaption = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Caption",true).AttribValue;
      return Result;
    };
    this.SetCaption = function (AValue) {
      this.myNode.SetAttributeValue$2("Caption",AValue);
      var ob = document.getElementById(this.NodeName+'Button');
      if (ob!=null) {
        ob.innerHTML=AValue;
      };
    };
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = "TXTabSheet";
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = true;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.PageDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("Caption",3,rtl.string,"GetCaption","SetCaption");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ControlDefaultAttribs;
      }, set: function (v) {
        this.p.ControlDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ControlDefaultAttribs;
      }, set: function (v) {
        this.p.ControlDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ControlDefaultAttribs;
      }, set: function (v) {
        this.p.ControlDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ControlDefaultAttribs;
      }, set: function (v) {
        this.p.ControlDefaultAttribs = v;
      }},"ContainerWidth","String","300px","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ControlDefaultAttribs;
      }, set: function (v) {
        this.p.ControlDefaultAttribs = v;
      }},"ContainerHeight","String","300px","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ControlDefaultAttribs;
      }, set: function (v) {
        this.p.ControlDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ControlDefaultAttribs;
      }, set: function (v) {
        this.p.ControlDefaultAttribs = v;
      }},"BgColor","Color","#FFFFFF","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ControlDefaultAttribs;
      }, set: function (v) {
        this.p.ControlDefaultAttribs = v;
      }},"TabIndex","Integer","-1","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ControlDefaultAttribs;
      }, set: function (v) {
        this.p.ControlDefaultAttribs = v;
      }},"Caption","String","","",false);
    pas.NodeUtils.AddDefaultsToTable("TXTabControl",$impl.ControlDefaultAttribs);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.PageDefaultAttribs;
      }, set: function (v) {
        this.p.PageDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.PageDefaultAttribs;
      }, set: function (v) {
        this.p.PageDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.PageDefaultAttribs;
      }, set: function (v) {
        this.p.PageDefaultAttribs = v;
      }},"BgColor","Color","#FFFFFF","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.PageDefaultAttribs;
      }, set: function (v) {
        this.p.PageDefaultAttribs = v;
      }},"Caption","String","NewPage","",false);
    pas.NodeUtils.AddDefaultsToTable("TXTabSheet",$impl.PageDefaultAttribs);
    pas.NodeUtils.AddAttribOptions("TXTabControl","Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup("TXTabControl",$impl.CreateTabControlInterfaceObj,$impl.CreateTabControl);
    pas.NodeUtils.AddNodeFuncLookup("TXTabSheet",$impl.CreateTabPageInterfaceObj,$impl.CreateTabSheet);
    pas.WrapperPanel.SuppressDesignerProperty("TXTabControl","LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXTabControl","LabelText");
    pas.WrapperPanel.SuppressDesignerProperty("TXTabSheet","LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXTabSheet","LabelText");
  };
},[],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXTabControl";
  $impl.ControlDefaultAttribs = [];
  $impl.PageDefaultAttribs = [];
  $impl.CreateTabControl = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var OnClickString = "";
    var BgColor = "";
    BgColor = MyNode.GetAttribute("BgColor",true).AttribValue;
    if (BgColor === "") BgColor = "#FFFFFF";
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value);" ';
    try{
        // ----------------------------------------check if the style has already been set
        var x = document.getElementsByTagName("STYLE");
        var StyleIsSet = false;
        if (x.length>0){
          for (var i=0; i<x.length; i++){
            var y= x[i].innerHTML;
            if (y.indexOf("div.TabPage") !=-1) { StyleIsSet =true}
          }
        }
    
        // ----------------------------------------add style if not already been set
        if (StyleIsSet == false)
        {
          // ----------------------------Define the styling to be used for  "TabPage"
             var Styletext='<style type="text/css">';
             Styletext=Styletext+'div.TabPage { background-color:'+BgColor+'; height:98%; width:100%}';
             Styletext=Styletext+'</style>';
    
          //----------------------------- now append the style declarations to the head of the HTML page
             document.head.innerHTML = document.head.innerHTML+Styletext;
        }
    
    
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        //localcontainer is an inner div.  Its id is  ScreenObjectName+'Contents'
        // It is a child of the outer container div (wrapper)
        //
         var localcontainer = document.createElement("div");
         localcontainer.id = ScreenObjectName+'Contents';
         localcontainer.style.display="inline-block;";
         localcontainer.style.height="100%";
         localcontainer.style.width="100%";
         document.getElementById(ScreenObjectName).appendChild(localcontainer);
    
      // -----------------------------Define the HTML to be used to create the Tab control
      // NB --- "TabButton" and "TabPage" are the classnames used for styling the tab controls
      // -------"TabButtonDiv" is the classname used for styling the div containing the tab buttons
    
        var TabButtonsDef = '<div id="'+ScreenObjectName+'ContentsButtons'+'" class="TabButtonDiv"'+
                            '>'+
                            '</div>';
    
      //------------------------------------ now append the declarations to the Parent
         localcontainer.innerHTML = localcontainer.innerHTML + TabButtonsDef;
    
        var wrapper=document.getElementById(ScreenObjectName);
      }
      catch(err) { alert(err.message+'  in XTabControl.CreateTabControl');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.openTab = function (TabName, TabControlName) {
    var myNode = null;
    var ControlNode = null;
    var siblingpos = 0;
    try{
          var i;
       //alert('OpenTab  TabControl='+TabControlName+' TabName='+TabName);
          var x = document.getElementsByClassName(TabControlName);
          if (x==null) {alert('cannot find element by class name '+TabControlName);}
          for (i = 0; i < x.length; i++) {
             x[i].style.display = "none";
          }
    
         var y = document.getElementsByClassName(TabControlName+'TabButton');
         if (y==null) {alert('cannot find element by class name '+TabControlName+'TabButton');}
          for (i = 0; i <y.length; i++) {
             y[i].style.background ='#d1d0ce';// dark background when not selected
             y[i].style.border= 'none';
          }
    
          var selectedTab = document.getElementById(TabName);
          selectedTab.style.display = "block";
          var selectedTab = document.getElementById(TabName+'Contents');
          selectedTab.style.display = "flex";
    
          var selectedTabButton = document.getElementById(TabName+'Button');
          if (selectedTabButton==null) {alert('cannot find element by name '+TabName+'Button');}
          selectedTabButton.style.background = '#f1f0ee'; // Same background color as the tab page when selected
    
          } catch(err) {alert('Error in XTabControl.OpenTab '+ err.message);};
    myNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,TabName,true);
    if (myNode !== null) {
      ControlNode = pas.NodeUtils.FindParentOfNodeByName(pas.NodeUtils.SystemNodeTree,TabName,true,{get: function () {
          return siblingpos;
        }, set: function (v) {
          siblingpos = v;
        }});
      if ((siblingpos > -1) && (ControlNode.GetmyTabIndex() !== siblingpos)) ControlNode.SetmyTabIndex(siblingpos);
    };
  };
  $impl.CreateTabSheet = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ParentName = "";
    var PageCaption = "";
    var NodeID = "";
    var ControlName = "";
    var OnClickString = "";
    ControlName = ParentNode.NodeName;
    ParentName = MyNode.GetAttribute("ParentName",false).AttribValue + "Contents";
    PageCaption = MyNode.GetAttribute("Caption",false).AttribValue;
    NodeID = MyNode.NodeName;
    OnClickString = (((((((((((('onclick="event.stopPropagation();pas.XTabControl.ChangeTabPage(\'' + NodeID) + "','") + ParentNode.NodeName) + "'); ") + "pas.Events.handleEvent(null,'Change','") + ControlName) + "','") + ScreenObjectName) + "');") + "pas.Events.handleEvent(null,'Click','") + NodeID) + "', ''); ") + '" ';
    try{
        //alert('pagecaption='+PageCaption+' parent='+ParentName);
    
        var ButtonsDiv = document.getElementById(ParentName+'Buttons');
    
        var buttonstring ='<button id="'+ScreenObjectName+'Button" class="'+ParentName+'TabButton" ' +
                                 OnClickString +
                              '>'+PageCaption+'</button>';
        ButtonsDiv.innerHTML = ButtonsDiv.innerHTML + buttonstring;
    
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,'TXTabSheet',position);
        wrapper.style.height = '100%';
        wrapper.style.width = '100%';
        wrapper.className='TabPage  '+ ParentName;
    
        //var TabContentDef ="<div id='" +ScreenObjectName+"Contents'  class='TabPage  "+ ParentName+"' ></div>";
        var TabContentDef ="<div id='" +ScreenObjectName+"Contents'  class='TabPage  vboxNoStretch ' ></div>";
    
        wrapper.innerHTML = wrapper.innerHTML + TabContentDef;
    
        var wrapper=document.getElementById(ScreenObjectName);
      }
      catch(err) { alert(err.message+'  in XTabControl.CreateTabSheet');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateTabControlInterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXTabControl.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
  $impl.CreateTabPageInterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXTabSheet.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XForm",["System","Classes","SysUtils","NodeUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.ShowXForm = function (XFormID, modal) {
    var XFormNode = null;
    var XFormObj = null;
    XFormNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,XFormID,true);
    if (XFormNode !== null) {
      XFormObj = XFormNode.ScreenObject;
      XFormObj.SetShowing("Modal");
    };
  };
  this.CloseXForm = function (XFormID) {
    var formNode = null;
    formNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,XFormID,false);
    if (formNode !== null) {
      formNode.ScreenObject.SetShowing("No");
    } else {
      $mod.CloseModal(XFormID);
    };
  };
  rtl.createClass($mod,"TXForm",pas.NodeUtils.TInterfaceObject,function () {
    this.$init = function () {
      pas.NodeUtils.TInterfaceObject.$init.call(this);
      this.fIsSelected = false;
      this.fIsContainer = false;
    };
    this.getHeight = function () {
      var Result = 0;
      if (this.myNode !== null) {
        Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("Height",true).AttribValue)}
       else Result = 0;
      return Result;
    };
    this.getWidth = function () {
      var Result = 0;
      if (this.myNode !== null) {
        Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("Width",true).AttribValue)}
       else Result = 0;
      return Result;
    };
    this.getTop = function () {
      var Result = 0;
      var AttrVal = "";
      if (this.myNode !== null) {
        AttrVal = this.myNode.GetAttribute("Top",true).AttribValue;
        if (AttrVal !== "") {
          Result = pas.SysUtils.StrToInt(AttrVal)}
         else Result = 0;
      } else Result = 0;
      return Result;
    };
    this.getLeft = function () {
      var Result = 0;
      var AttrVal = "";
      if (this.myNode !== null) {
        AttrVal = this.myNode.GetAttribute("Left",true).AttribValue;
        if (AttrVal !== "") {
          Result = pas.SysUtils.StrToInt(AttrVal)}
         else Result = 0;
      } else Result = 0;
      return Result;
    };
    this.getCaption = function () {
      var Result = "";
      if (this.myNode !== null) {
        Result = this.myNode.GetAttribute("Caption",true).AttribValue}
       else Result = "";
      return Result;
    };
    this.getShowing = function () {
      var Result = "";
      if (this.myNode !== null) {
        Result = this.myNode.GetAttribute("Showing",true).AttribValue}
       else Result = "No";
      return Result;
    };
    this.SetHeight = function (AValue) {
      if (this.myNode !== null) this.myNode.SetAttributeValue$2("Height",pas.SysUtils.IntToStr(AValue));
      var ob=document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        var str=AValue;
        if (AValue==0) str='100%';
        pas.HTMLUtils.SetHeightWidthHTML(this,ob,'H',str);
      };
    };
    this.SetWidth = function (AValue) {
      if (this.myNode !== null) this.myNode.SetAttributeValue$2("Width",pas.SysUtils.IntToStr(AValue));
      var ob=document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        var str=AValue;
        if (AValue==0) str='100%';
        pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',str);
      };
    };
    this.SetTop = function (AValue) {
      var t = "";
      if (this.myNode !== null) this.myNode.SetAttributeValue$2("Top",pas.SysUtils.IntToStr(AValue));
      t = pas.SysUtils.IntToStr(AValue) + "px";
      var ob=document.getElementById(this.NodeName+'Contents');
          if (ob!=null) {
            ob.style.top=t;
      
            // if this means the modal window is not fully visible, adjust the top
              var style = window.getComputedStyle(ob);
              var hh = style.height;
              var h = parseInt(hh, 10);
      
              var btm = AValue + h;
              var viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);
              //alert(this.NodeName+' viewHeight='+viewHeight+' bottom='+btm);
              if (btm > viewHeight) {ob.style.top="20px";}
      
      
          };
    };
    this.SetLeft = function (AValue) {
      var l = "";
      if (this.myNode !== null) this.myNode.SetAttributeValue$2("Left",pas.SysUtils.IntToStr(AValue));
      l = pas.SysUtils.IntToStr(AValue) + "px";
      var ob=document.getElementById(this.NodeName+'Contents');
          if (ob!=null) {
            ob.style.left=l;
      
            // if this means the modal window is not fully visible, adjust the left
            var style = window.getComputedStyle(ob);
            var ww = style.width;
            var w = parseInt(ww, 10);
      
            var rgt = AValue + w;
            var viewWidth = Math.max(document.documentElement.clientWidth, window.innerWidth);
            if (rgt > viewWidth) {ob.style.left="20px";}
      
            };
    };
    this.SetCaption = function (AValue) {
      if (this.myNode !== null) this.myNode.SetAttributeValue$2("Caption",AValue);
      var ob=document.getElementById(this.NodeName+'Caption');
      if (ob!=null) {
        ob.innerHTML=AValue;
      };
    };
    this.SetShowing = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$2("Showing",AValue);
        if (this.NodeName !== "") {
          if (AValue === "No") {
            $mod.CloseModal(this.NodeName);
          } else {
            this.SetTop(this.getTop());
            this.SetLeft(this.getLeft());
            try{
               var modalwindowid= this.NodeName;
               //alert('open windowid='+modalwindowid);
               var modal = document.getElementById(modalwindowid);
               // alert('found '+modal);
               modal.style.display = 'block';
            }catch(err){alert('Error in XForm.SetShowing '+ err.message);};
            if (this.NodeName !== pas.NodeUtils.MainForm.fName) if ($mod.OpenXForms.IndexOf(this.NodeName) < 0) $mod.OpenXForms.Add(this.NodeName);
          };
        };
      };
    };
    this.Create$2 = function (NodeName) {
      pas.NodeUtils.TDataNode.Create$1.call(this,"UI",NodeName,"TXForm",true);
      this.myNode = this;
      this.fIsContainer = true;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("IsContainer",0,rtl.boolean,"fIsContainer","fIsContainer");
    $r.addProperty("IsSelected",0,rtl.boolean,"fIsSelected","fIsSelected");
    $r.addProperty("Height",3,rtl.longint,"getHeight","SetHeight");
    $r.addProperty("Width",3,rtl.longint,"getWidth","SetWidth");
    $r.addProperty("Top",3,rtl.longint,"getTop","SetTop");
    $r.addProperty("Left",3,rtl.longint,"getLeft","SetLeft");
    $r.addProperty("Caption",3,rtl.string,"getCaption","SetCaption");
    $r.addProperty("Showing",3,rtl.string,"getShowing","SetShowing");
  });
  this.OpenModal = function (WindowId) {
    try{
       var modalwindowid= WindowId;
        var modal = document.getElementById(modalwindowid);
        modal.style.display = 'block';
    }catch(err){alert('Error in XForm.OpenModal '+ err.message);};
    if (WindowId !== pas.NodeUtils.MainForm.fName) if ($mod.OpenXForms.IndexOf(WindowId) < 0) $mod.OpenXForms.Add(WindowId);
  };
  this.CloseModal = function (WindowId) {
    var formNode = null;
    formNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,WindowId,false);
    if (formNode !== null) formNode.SetAttributeValue$2("Showing","No");
    var modal = document.getElementById(WindowId);
    if (modal!=null) {
      modal.style.display = "none";   };
    if ($mod.OpenXForms.IndexOf(WindowId) > -1) $mod.OpenXForms.Delete($mod.OpenXForms.IndexOf(WindowId));
  };
  this.addTheModalBackground = function (ParentName, WindowId) {
    var OnClickString = "";
    if (WindowId === pas.NodeUtils.MainForm.fName) return;
    OnClickString = "pas.XForm.CloseModal(event.target.id); event.stopPropagation();";
    try{
      //alert('addTheModalBackground '+WindowId);
        $mod.InitialiseXFormStyles()
        var HTMLString = ''
        +'<div id='+WindowId+' class="modal-background" '
        +'onclick="'+OnClickString+'">'
        +'</div>';
    
        //----- now append the declarations to the Parent -------------------------------------------
        var ParentItem=document.getElementById(ParentName);
        ParentItem.insertAdjacentHTML('beforeend', HTMLString);
    
        //alert('addTheModalBackground done');
      }catch(err) {alert('Error in XForm.addTheModalBackground '+ err.message);};
  };
  this.addaModalContentItem = function (MyName) {
    var ContentName = "";
    ContentName = MyName + "Contents";
    try{
          var HTMLString = ''
          +'  <!-- Form '+MyName+' content -->'
          +'  <div id="'+ContentName+'" class="modal-content" > '
          +'    <div id="'+MyName+'Caption" ></div> '
          +'  </div>';
    
          var ParentItem = document.getElementById(MyName);
          ParentItem.innerHTML = ParentItem.innerHTML + HTMLString;
    
      }catch(err){alert('Error in XForm.addaModalContentItem '+ err.message);};
  };
  this.InitialiseXFormStyles = function () {
    try{
      // ----------------------------------------check if the style has already been set
      var x = document.getElementsByTagName("STYLE");
      var StyleIsSet = false;
      if (x.length>0){
        for (var i=0; i<x.length; i++){
          var y= x[i].innerHTML;
          if (y.indexOf("modal-background") !=-1) { StyleIsSet =true}
        }
      }
      if (StyleIsSet == false){
         var ModalBackgroundStyleString = ''
         +'<style>'
          +'/* The Modal (background) */'
          +'.modal-background {'
              +'display: none; /* Hidden by default */'
              +'position: fixed; /* Stay in place */'
              +'z-index: 1; /* Sit on top */'
              +'padding-top: 10px; /* Location of the box */'
              +'left: 0;'
              +'top: 0;'
              +'width: 100%; /* Full width */'
              +'height: 100%; /* Full height */'
              //+'overflow: auto; /* Enable scroll if needed */'
              +'background-color: rgb(0,0,0); /* Fallback color */'
              +'background-color: rgba(0,0,0,0.3); /* Black w/ opacity */'
          +'} '
          +'.modal-content {'
              +'background-color: #FFFFFF;'
              +'position: absolute;'
              +'border: 1px solid #888800;'
          +'}'
          +'</style>';
        //----------------------------- now append the style declarations to the head of the HTML page
        document.head.innerHTML = document.head.innerHTML+ModalBackgroundStyleString;
      }
    }catch(err)  {alert('Error in XForm.InitialiseXFormStyles '+ err.message);};
  };
  this.OpenXForms = null;
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Showing","String","No","",false,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Width","Integer","400","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Height","Integer","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Top","Integer","50","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Left","Integer","50","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Caption","String","My Title","",false);
    $mod.OpenXForms = pas.Classes.TStringList.$create("Create$1");
    pas.NodeUtils.AddNodeFuncLookup("TXForm",$impl.CreateinterfaceObj,$impl.CreateWidget);
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.myDefaultAttribs = [];
  $impl.CreateinterfaceObj = function (MyForm, Nodename) {
    var Result = null;
    var newobj = null;
    newobj = $mod.TXForm.$create("Create$2",[Nodename]);
    if (MyForm !== null) {
      newobj.MyForm = MyForm}
     else {
      MyForm = pas.NodeUtils.TForm.$create("Create");
      MyForm.fName = Nodename;
      newobj.MyForm = MyForm;
    };
    newobj.myNode = newobj;
    Result = newobj;
    return Result;
  };
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ParentName = "";
    if (ParentNode !== null) {
      ParentName = ParentNode.NodeName}
     else ParentName = pas.NodeUtils.MainForm.myNode.NodeName;
    try{
        $mod.addTheModalBackground(ParentName,ScreenObjectName);
        $mod.addaModalContentItem(ScreenObjectName);
    
        }catch(err) { alert(err.message+' in XForm.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    MyNode.myNode = MyNode;
    if (ScreenObjectName === pas.NodeUtils.MainForm.fName) {
      MyNode.SetCaption("");
      MyNode.SetTop(0);
      MyNode.SetLeft(0);
      MyNode.SetHeight(0);
      MyNode.SetWidth(0);
    } else {
      pas.NodeUtils.RefreshComponentProps(MyNode);
      MyNode.fIsContainer = true;
    };
    Result = MyNode;
    return Result;
  };
});
rtl.module("XIFrame",["System","Classes","SysUtils","StringUtils","NodeUtils","WrapperPanel","HTMLUtils","XForm"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.CreateBasicIFrame = function (ParentName, MyObjectName) {
    var Result = null;
    var ob = null;
    try {
      function resized(ob){
      // refresh the actual h/w attributes
      var h=ob.ActualHeight;
      var w=ob.ActualWidth;
      }
      ob=null;
      var labelstring='<label for="'+ParentName+'Contents" id="'+ParentName+'ContentsLbl'+'"></label>';
      //var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'"></label>';
      var FrameString = '<iframe  id='+MyObjectName+' name="'+MyObjectName+ '" '+
                              'src="" '+
                              'title="" '+
                              'style="height:100%;width:100%;border: 1px solid #444444;" '+
                              'onresize="resized(this);" '+
                              '>'+
                              '</iframe>';
      var HTMLString = labelstring+FrameString;
    
    
    
      var wrapper=document.getElementById(ParentName);
      wrapper.innerHTML= HTMLString;
    
      //............ Set an event for title change ...................
    
      var Iframe = document.getElementById(MyObjectName);
    
    //  // create an observer instance
    //  var observer = new MutationObserver(function(mutationsList) {
    //      for(var mutation of mutationsList) {
    //        if ((mutation.type == "attributes")
    //        && (mutation.attributeName == "title")) {
    //           alert('title mutation detected');
    //           pas.Events.handleEvent(null,'Click',ParentName, mutation.oldValue);
    //         }
    //      }
    //   });
    //
    //   // pass in the target node, as well as the observer options
    //  //!!!! observer target has to be the document>Title within the IFrame (not the Iframe's title attribute)....
    //        // this one works on the iframe title correctly....
    //      observer.observe(Iframe, {subtree: true, characterData: true,
    //                                attributes: true //configure it to listen to attribute changes
    //                               });
    //  }
    
    // ... attempt to reset the default 8px margin that appears in the iframe document body ...(unsuccessful)
    //  function restyle() {
    //     var body = Iframe.contentDocument.body;
    //     body.style.padding = 0;
    //     body.style.margin = 0;
    //  }
    //
    //  Iframe.onload = restyle;
    //  restyle();
    //
    
      ob = Iframe;
      } catch(err){alert(err.message+'  in CreateBasicIFrame');};
    Result = ob;
    return Result;
  };
  this.DoCreateFrameWidget = function (MyNode, ParentNode, ScreenObjectName, position) {
    var NodeType = "";
    var ht = 0;
    var wd = 0;
    NodeType = MyNode.NodeType;
    try{
    
          var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,NodeType,position);
    
          var MyObjectName=ScreenObjectName+'Contents';
          var Iframe = pas.XIFrame.CreateBasicIFrame(ScreenObjectName,MyObjectName);
    
          }
          catch(err) { alert(err.message+'  in XIFrame.DoCreateFrameWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    ht = MyNode.GetActualHeight();
    wd = MyNode.GetActualWidth();
  };
  this.dummyvar = 0;
  this.ResetHWAttributes = function (myNode) {
    var h = 0;
    var w = 0;
    h = myNode.ScreenObject.GetActualHeight();
    w = myNode.ScreenObject.GetActualWidth();
  };
  rtl.createClass($mod,"TXIFrame",pas.WrapperPanel.TWrapperPanel,function () {
    this.$init = function () {
      pas.WrapperPanel.TWrapperPanel.$init.call(this);
      this.BrowserHandle = 0;
      this.BrowserPage = null;
    };
    this.$final = function () {
      this.BrowserPage = undefined;
      pas.WrapperPanel.TWrapperPanel.$final.call(this);
    };
    this.GetHTMLSource = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("HTMLSource",true).AttribValue;
      return Result;
    };
    this.GetFrameWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("FrameWidth",true).AttribValue;
      return Result;
    };
    this.GetFrameHeight = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("FrameHeight",true).AttribValue;
      return Result;
    };
    this.GetActualWidth = function () {
      var Result = 0;
      var wd = 0;
      wd = pas.HTMLUtils.GetCurrentWidth(this.NodeName);
      this.myNode.SetAttributeValue("ActualWidth",pas.SysUtils.IntToStr(wd),"Integer",true);
      Result = wd;
      return Result;
    };
    this.GetActualHeight = function () {
      var Result = 0;
      var h = 0;
      h = pas.HTMLUtils.GetCurrentHeight(this.NodeName);
      this.myNode.SetAttributeValue("ActualHeight",pas.SysUtils.IntToStr(h),"Integer",true);
      Result = h;
      return Result;
    };
    this.GetSuspendRefresh = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("SuspendRefresh",true).AttribValue);
      return Result;
    };
    this.SetHTMLSource = function (AValue) {
      var IsChanged = false;
      var oldval = "";
      IsChanged = false;
      oldval = this.myNode.GetAttribute("HTMLSource",true).AttribValue;
      if (AValue !== this.myNode.GetAttribute("HTMLSource",true).AttribValue) IsChanged = true;
      this.myNode.SetAttributeValue$2("HTMLSource",AValue);
      if (this.GetSuspendRefresh()) return;
      if ((((pas.StringUtils.FoundString(AValue,":\/\/") > 0) && (pas.StringUtils.FoundString(AValue,"http") === 1)) || (pas.StringUtils.FoundString(AValue,"\/\/") === 1)) || (pas.StringUtils.FoundString(AValue,"about:") === 1)) {
        var ob = document.getElementById(this.NodeName+'Contents');
        if (ob!=null) {
          ob.src = AValue;
        };
      } else {
        this.LoadDataURL(AValue);
      };
    };
    this.SetFrameWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("FrameWidth",AValue);
      var ob = document.getElementById(this.NodeName);
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.SetFrameHeight = function (AValue) {
      this.myNode.SetAttributeValue$2("FrameHeight",AValue);
      var ob = document.getElementById(this.NodeName);
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'H',AValue);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = "TXIFrame";
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.IFrameDefaultAttribs);
    };
    this.SetSuspendRefresh = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("SuspendRefresh",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
        if (AValue === false) this.RedisplayFrame();
      };
    };
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("IFrameExternalBrowserClosed");
    };
    this.LoadDataURL = function (DataString) {
      if (DataString !== "") {
        this.myNode.SetAttributeValue$2("HTMLSource",DataString);
        this.RedisplayFrame();
      };
    };
    this.RunJavaScript = function (JSString) {
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
      alert('!!!! need to write code to handle this in TXIFrame.RunJavaScript (send message into iframe???)');
      };
    };
    this.RedisplayFrame = function () {
      var sup = false;
      var SourceString = "";
      if (this.GetSuspendRefresh()) return;
      SourceString = this.myNode.GetAttribute("HTMLSource",false).AttribValue;
      sup = pas.NodeUtils.StartingUp;
      var ob = document.getElementById(this.NodeName+'Contents');
          if (ob!=null) {
             // SADLY.....Once instantiated, the frame will not refresh when the src attribute is changed.
            // So, we will have to delete the frame object and re-create with its new src.
            var myFrame = ob; // get frame
            var originalId = myFrame.id; // retain the original id of the frame
            var newFrameId = myFrame.id + new Date().getTime(); // create a new temporary id
            var newIframe = pas.XIFrame.CreateBasicIFrame(this.NodeName,newFrameId);
            newIframe.id = originalId; // change id back
            ob = document.getElementById(originalId);
            var uri='data:text/html,   ' + encodeURIComponent(SourceString);
            ob.src=uri;
      
          }
          else {if (sup==false) {alert('cannot find object '+this.NodeName+'Contents');}};
      this.SetLabelText(this.GetLabelText());
    };
    this.LaunchHTML = function (URLType, myURL, title) {
      var objid=this.NodeName;
      //alert('open window with name '+objid);
      var win=window.open("",objid,"");                  // third (blank) parameter makes a new window
      win.document.write(myURL);
      this.BrowserPage=win;
      win.onunload = function(event) {win.opener.postMessage({"objid":win.name, "mtype":"titleChange", "mdata":""},"*"); };
    };
    this.CloseBrowserWindow = function () {
    };
    var $r = this.$rtti;
    $r.addProperty("HTMLSource",3,rtl.string,"GetHTMLSource","SetHTMLSource");
    $r.addProperty("FrameHeight",3,rtl.string,"GetFrameHeight","SetFrameHeight");
    $r.addProperty("FrameWidth",3,rtl.string,"GetFrameWidth","SetFrameWidth");
    $r.addProperty("SuspendRefresh",3,rtl.boolean,"GetSuspendRefresh","SetSuspendRefresh");
    $r.addProperty("ActualHeight",1,rtl.longint,"GetActualHeight","");
    $r.addProperty("ActualWidth",1,rtl.longint,"GetActualWidth","");
  });
  $mod.$rtti.$DynArray("TIntArray",{eltype: rtl.longint});
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"SuspendRefresh","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"ActualHeight","Integer","","",true,false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"ActualWidth","Integer","","",true,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"FrameWidth","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"FrameHeight","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"LabelPos","String","Top","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"LabelText","String","IFrame","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"BgColor","Color","#FFFFFF","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.IFrameDefaultAttribs;
      }, set: function (v) {
        this.p.IFrameDefaultAttribs = v;
      }},"HTMLSource","String","","",false);
    pas.NodeUtils.AddDefaultsToTable("TXIFrame",$impl.IFrameDefaultAttribs);
    pas.NodeUtils.AddAttribOptions("TXIFrame","Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions("TXIFrame","LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup("TXIFrame",$impl.CreateinterfaceObjIF,$impl.CreateIFWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXIFrame","ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty("TXIFrame","ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.IFrameDefaultAttribs = [];
  $impl.CreateIFWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    $mod.DoCreateFrameWidget(MyNode,ParentNode,ScreenObjectName,position);
    MyNode.SetHTMLSource(MyNode.GetHTMLSource());
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObjIF = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXIFrame.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XCode",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TTextContext = function (s) {
    if (s) {
      this.IsInMultiLineCommentString = s.IsInMultiLineCommentString;
      this.IsInAltMultiLineCommentString = s.IsInAltMultiLineCommentString;
      this.IsInASMMultiLineCommentString = s.IsInASMMultiLineCommentString;
      this.MultiLineCommentChangedStatus = s.MultiLineCommentChangedStatus;
    } else {
      this.IsInMultiLineCommentString = false;
      this.IsInAltMultiLineCommentString = false;
      this.IsInASMMultiLineCommentString = false;
      this.MultiLineCommentChangedStatus = false;
    };
    this.$equal = function (b) {
      return (this.IsInMultiLineCommentString === b.IsInMultiLineCommentString) && ((this.IsInAltMultiLineCommentString === b.IsInAltMultiLineCommentString) && ((this.IsInASMMultiLineCommentString === b.IsInASMMultiLineCommentString) && (this.MultiLineCommentChangedStatus === b.MultiLineCommentChangedStatus)));
    };
  };
  $mod.$rtti.$Record("TTextContext",{}).addFields("IsInMultiLineCommentString",rtl.boolean,"IsInAltMultiLineCommentString",rtl.boolean,"IsInASMMultiLineCommentString",rtl.boolean,"MultiLineCommentChangedStatus",rtl.boolean);
  rtl.createClass($mod,"TXCode",pas.WrapperPanel.TWrapperPanel,function () {
    this.$init = function () {
      pas.WrapperPanel.TWrapperPanel.$init.call(this);
      this.context = new $mod.TTextContext();
      this.blackoutline = [];
      this.boldoutline = [];
      this.redoutline = [];
      this.greenoutline = [];
      this.blueoutline = [];
      this.IsInitalised = false;
      this.LengthOfRangeSelected = 0;
      this.SavedLineContextArray = [];
    };
    this.$final = function () {
      this.context = undefined;
      this.blackoutline = undefined;
      this.boldoutline = undefined;
      this.redoutline = undefined;
      this.greenoutline = undefined;
      this.blueoutline = undefined;
      this.SavedLineContextArray = undefined;
      pas.WrapperPanel.TWrapperPanel.$final.call(this);
    };
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
      this.myEventTypes.Add("ClickMessage");
    };
    this.GetItemValue = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ItemValue",true).AttribValue;
      return Result;
    };
    this.GetReadOnly = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("ReadOnly",true).AttribValue);
      return Result;
    };
    this.GetMessagesHeight = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("MessagesHeight",true).AttribValue;
      return Result;
    };
    this.GetMessageLines = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("MessageLines",true).AttribValue;
      return Result;
    };
    this.SetItemValue = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$2("ItemValue",AValue);
        var ob = document.getElementById(this.NodeName+'ContentsReal');
        if (ob!=null) {
           //alert('set item value for '+ this.NodeName+'ContentsReal to '+AValue);
           ob.value=AValue;
           pas.XCode.DoKeyUp(this.NodeName+'Contents',this.NodeName,null); };
      };
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'ContentsReal');
      if (ob!=null) {
        ob.readOnly = AValue  };
    };
    this.SetMessagesHeight = function (AValue) {
      this.myNode.SetAttributeValue$2("MessagesHeight",AValue);
      var ob = document.getElementById(this.NodeName+'ContentsMessages');
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'H',AValue);
    };
    this.SetMessageLines = function (AValue) {
      var lines = null;
      this.myNode.SetAttributeValue$2("MessageLines",AValue);
      lines = pas.Classes.TStringList.$create("Create$1");
      lines.FStrictDelimiter = true;
      lines.SetLineBreak(pas.System.LineEnding);
      lines.SetTextStr(AValue);
      var ob = document.getElementById(this.NodeName+'ContentsMessages');
      if (ob!=null) {
         ob.value=AValue;  };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    this.GetFileNameLineNumAndCharPos = function (MessageFound, SelectedLine, delim, FileName, LineNum, CharNum) {
      var List1 = null;
      var List2 = null;
      var tempstr = "";
      var i = 0;
      MessageFound.set(false);
      List1 = pas.Classes.TStringList.$create("Create$1");
      List2 = pas.Classes.TStringList.$create("Create$1");
      try {
        List1.SetLineBreak(delim);
        List1.SetTextStr(SelectedLine);
        if (List1.GetCount() > 1) {
          FileName.set(List1.Get(0));
          tempstr = List1.Get(1);
          List2.SetLineBreak("tempinc\\");
          List2.SetTextStr(FileName.get());
          if (List2.GetCount() > 1) FileName.set(List2.Get(1));
          i = 1;
          while (((tempstr.charAt(i - 1) !== ",") && (tempstr.charAt(i - 1) !== ")")) && (i < tempstr.length)) {
            LineNum.set(LineNum.get() + tempstr.charAt(i - 1));
            i = i + 1;
          };
          if (tempstr.charAt(i - 1) !== ")") {
            i = i + 1;
            while ((tempstr.charAt(i - 1) !== ")") && (i < tempstr.length)) {
              CharNum.set(CharNum.get() + tempstr.charAt(i - 1));
              i = i + 1;
            };
          };
          if ((LineNum.get() !== "") && (CharNum.get() !== "")) MessageFound.set(true);
        };
      } finally {
        List1 = rtl.freeLoc(List1);
        List2 = rtl.freeLoc(List2);
      };
    };
    this.GoToLineCharPos = function (LineNum, CharPos) {
      //     alert('LineNum='+LineNum+' CharPos='+CharPos+' looking for '+this.NodeName+'ContentsReal');
             var elem = document.getElementById(this.NodeName+'ContentsReal');
      
             if(elem != null) {
               elem.focus();
                 var LinesArray = elem.value.split("\n");
                 var charcount=0;
                 if (LineNum<LinesArray.length) {
                   for (var i=0; i<LineNum-1; i++ ) {
                     charcount=charcount+LinesArray[i].length+1;
                   }
                 }
                 charcount=charcount+CharPos-1;
      
                 if(elem.createTextRange) {
                     var range = elem.createTextRange();
                     range.move('character', charcount);
                     range.select();
                 }
                 else {
                     if(elem.selectionStart) {
                       elem.setSelectionRange(charcount, (charcount+1));
                     }
                  }
                  elem.blur();
                  elem.focus();
             };
    };
    var $r = this.$rtti;
    $r.addProperty("ItemValue",3,rtl.string,"GetItemValue","SetItemValue");
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
    $r.addProperty("MessagesHeight",3,rtl.string,"GetMessagesHeight","SetMessagesHeight");
    $r.addProperty("MessageLines",3,rtl.string,"GetMessageLines","SetMessageLines");
  });
  this.AddCodeEditorStyles = function () {
    var StyleHTML = "";
    var StandardOverlayStyle = "";
    StandardOverlayStyle = (((((((((((("        margin: 0;" + pas.System.LineEnding) + "        padding: 0;") + pas.System.LineEnding) + "        background: transparent;") + pas.System.LineEnding) + "        position: absolute;") + pas.System.LineEnding) + "        left: 45px;") + pas.System.LineEnding) + "        width:calc(100% - 50px);") + pas.System.LineEnding) + "        white-space: pre;") + pas.System.LineEnding;
    StyleHTML = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("<style>" + pas.System.LineEnding) + "    .noscrollbar::-webkit-scrollbar {") + pas.System.LineEnding) + "        display: none;") + pas.System.LineEnding) + "    }") + pas.System.LineEnding) + "    .textarea {") + pas.System.LineEnding) + "        font-family: monospace; font-size: 14px;") + pas.System.LineEnding) + "        border: 0;") + pas.System.LineEnding) + "        height: 100%;") + pas.System.LineEnding) + "    }") + pas.System.LineEnding) + "    .textAreaBorder {") + pas.System.LineEnding) + "        border: groove 1px #ccc;") + pas.System.LineEnding) + "        padding: 0px 0px 0px 0px") + pas.System.LineEnding) + "    }") + pas.System.LineEnding) + "    .messagesarea {") + pas.System.LineEnding) + "        font-family: monospace; font-size: 12px;") + pas.System.LineEnding) + "        border: 0;") + pas.System.LineEnding) + "        height: 20%;") + pas.System.LineEnding) + "    }") + pas.System.LineEnding) + "    .LineNumberTextArea {") + pas.System.LineEnding) + "        margin: 0;") + pas.System.LineEnding) + "        background: #DDDDDD;") + pas.System.LineEnding) + "        position: absolute;") + pas.System.LineEnding) + "        z-index: 998;") + pas.System.LineEnding) + "        width: 43px;") + pas.System.LineEnding) + "        left: 0px;") + pas.System.LineEnding) + "        white-space: pre;") + pas.System.LineEnding) + "    }") + pas.System.LineEnding) + "    .WhiteTextArea {") + pas.System.LineEnding) + "        color: transparent;") + pas.System.LineEnding) + "        caret-color: black;") + pas.System.LineEnding) + "        z-index: 999;") + pas.System.LineEnding) + StandardOverlayStyle) + "    }") + pas.System.LineEnding) + "    .BlackTextArea {") + pas.System.LineEnding) + "        z-index: 998;") + pas.System.LineEnding) + StandardOverlayStyle) + "    }") + pas.System.LineEnding) + "    .BoldTextArea {") + pas.System.LineEnding) + "        z-index: 997;") + pas.System.LineEnding) + "        font-weight: bold;") + pas.System.LineEnding) + StandardOverlayStyle) + "    }") + pas.System.LineEnding) + "    .BlueTextArea {") + pas.System.LineEnding) + "        color: blue;") + pas.System.LineEnding) + "        z-index: 996;") + pas.System.LineEnding) + StandardOverlayStyle) + "    }") + pas.System.LineEnding) + "    .RedTextArea {") + pas.System.LineEnding) + "        color: red;") + pas.System.LineEnding) + "        z-index: 995;") + pas.System.LineEnding) + "        text-decoration: underline;") + pas.System.LineEnding) + StandardOverlayStyle) + "    }") + pas.System.LineEnding) + "    .GreenTextArea {") + pas.System.LineEnding) + "        color: green;") + pas.System.LineEnding) + "        font-style: italic;") + pas.System.LineEnding) + "        z-index: 994;") + pas.System.LineEnding) + StandardOverlayStyle) + "    }") + pas.System.LineEnding) + "<\/style>";
    try{
         // ----------------------------------------check if the style has already been set
         var x = document.getElementsByTagName("STYLE");
         var StyleIsSet = false;
         // check all the existing style blocks...
         if (x.length>0){
           for (var i=0; i<x.length; i++){
             var y= x[i].innerHTML;
             if (y.indexOf(".GreenTextArea") !=-1) { StyleIsSet =true}
           }
         }
         if (StyleIsSet == false){
            //----------------------------- now append the style declarations to the head of the HTML page
            document.head.innerHTML = document.head.innerHTML+StyleHTML;
         }
    }catch(err) {alert('Error in XCode.addCodeEditorStyles '+ err.message);};
  };
  this.DoKeyUp = function (myId, NodeId, event) {
    var myNode = null;
    myNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,NodeId,false);
    if (myNode !== null) {
      //alert('DoKeyUp.  Id='+myId);
        var ReservedWords = [];
        // assume all reserved words start and end with a space
        ReservedWords[1] = ["absolute", "abstract", "alias", "and", "array", "as", "asm", "assembler"];
        ReservedWords[2] = ["begin", "break"];
        ReservedWords[3] = ["case", "cdecl", "class", "const", "constructor", "continue", "cppdecl"];
        ReservedWords[4] = ["default", "destructor", "dispose", "div", "do", "downto"];
        ReservedWords[5] = ["else", "end", "except", "exit", "export", "exports", "external"];
        ReservedWords[6] = ["false", "file", "for", "forward", "function"];
        ReservedWords[7] = ["generic", "goto"];
        ReservedWords[8] = [""];
        ReservedWords[9] = ["if", "implementation", "in", "index", "inherited", "initialization", "inline", "interface", "is"];
        ReservedWords[10] = [""];
        ReservedWords[11] = [""];
        ReservedWords[12] = ["label", "library", "local"];
        ReservedWords[13] = ["mod"];
        ReservedWords[14] = ["name", "new", "nil", "nostackframe", "not"];
        ReservedWords[15] = ["object", "of", "oldfpccall", "on", "operator", "or", "out", "override"];
        ReservedWords[16] = ["packed", "private", "procedure", "program", "property", "protected", "published"];
        ReservedWords[17] = [""];
        ReservedWords[18] = ["raise", "read", "record", "register", "repeat"];
        ReservedWords[19] = ["safecall", "self", "set", "shl", "shr", "softfloat", "specialize", "stdcall", "string"];
        ReservedWords[20] = ["then", "threadvar", "to", "true", "try", "type"];
        ReservedWords[21] = ["unit", "until", "uses"];
        ReservedWords[22] = ["var", "virtual"];
        ReservedWords[23] = ["while", "with", "write"];
        ReservedWords[24] = ["xor"];
        ReservedWords[25] = [""];
        ReservedWords[26] = [""];
      
        var StringDelimiter = "'";
        var StartOfSingleLineCommentdelimiter = "/";
        var StartOfMultiLineComment = "{";
        var EndOfMultiLineComment = "}";
        var EndOfLine = "\n";
      
        function isDelimiter(inChar)
        {
            var isadelimiter = false;
            if ((inChar == " ") || (inChar == ";") || (inChar == "=") || (inChar == "(") || (inChar == "-") || (inChar == "/") || (inChar == "*") ||
                (inChar == ")") || (inChar == "}") || (inChar == "]") || (inChar == "+") || (inChar == "{") || (inChar == "[") ||
                (inChar == "&") || (inChar == "|") || (inChar == "!") ) {
                isadelimiter = true;        }
            return isadelimiter;
        }
      
        function matchReservedWord(lineString, firstcharpos, charindex) {
            var ReservedWordlength = 0;
            var foundstring = "";
            try {
                // for all reserved words starting with the first letter
                for (var k = 0; k < ReservedWords[charindex].length; k++) {
                    var testWord = ReservedWords[charindex][k];
                    var followingChar = firstcharpos + testWord.length;
                    if (isDelimiter(lineString[followingChar])){
                        var match = true;
                        for (var m = 0; m < testWord.length; m++) {
                            if (lineString[firstcharpos + m] != testWord[m]) { match = false; };
                        }
                        if (match == true) { ReservedWordlength = testWord.length; foundstring = testWord};
                    }
                }
            }
            catch (err) { alert("Error -- " + err.message); };
            return ReservedWordlength;
        };
      
        //-------------------------------------------------------------------------------------------------------------------------
        //                  core line parser called by both ParseThisLine(....) and ParseWholeDocumaent();
        //-------------------------------------------------------------------------------------------------------------------------
      
        function ParseLine(j,line,localcontext,SyntaxText)
        {
                    var IsInSingleLineCommentString = false;
                    var IsInStringLiteral = false;
                    var ReservedWordCharCount = 0;
                    var SavedIsInMultiLineCommentString=localcontext.IsInMultiLineCommentString;
      
                    for (var i =0; i < line.length; i++)
                    {
                        //---------------------------------------------------------
                        //          Find start and end of comments and asm blocks
                        //---------------------------------------------------------
      
                        if (IsInStringLiteral==false)
                        {
                              // find multi line comment markers
                              if (IsInSingleLineCommentString == false)
                              {
                                  // Note there are two types of multi line marker and they need to be matched up
                                  if ((localcontext.IsInAltMultiLineCommentString == false)&&(localcontext.IsInASMMultiLineCommentString == false))
                                  {
                                      if(line[i] == EndOfMultiLineComment)
                                      { localcontext.IsInMultiLineCommentString = false; }
                                      if (line[i] == StartOfMultiLineComment)
                                      { localcontext.IsInMultiLineCommentString = true;}
                                  };
                                  if (localcontext.IsInAltMultiLineCommentString == true)
                                  {
                                      if((line[i] == "*")&&(line[i+1] == ")"))
                                      { localcontext.IsInMultiLineCommentString = false;
                                        localcontext.IsInAltMultiLineCommentString = false;
                                      }
                                  };
      
                                  if (localcontext.IsInASMMultiLineCommentString == true)
                                  {
                                      if((line[i] == "e")&&(line[i+1] == "n")&&(line[i+2] == "d")&&(line[i+3] == ";") )
                                      { localcontext.IsInMultiLineCommentString = false;
                                        localcontext.IsInASMMultiLineCommentString = false;
                                      }
                                  };
      
                                  if (localcontext.IsInMultiLineCommentString == false)
                                  {
                                      if((line[i] == "(")&&(line[i+1] == "*"))
                                      { localcontext.IsInMultiLineCommentString = true;
                                        localcontext.IsInAltMultiLineCommentString = true;
                                      }
      
                                      if((line[i-4] == " ")&&(line[i-3] == "a")&&(line[i-2] == "s")&&(line[i-1] == "m")&&(line[i] == " ") )
                                      { localcontext.IsInMultiLineCommentString = true;
                                        localcontext.IsInASMMultiLineCommentString = true;
                                      }
                                  }
                              }
      
                              if (localcontext.IsInMultiLineCommentString == false)
                              {
                                    // find single line comment marker pair "//"
                                    if((line[i] == StartOfSingleLineCommentdelimiter)&&(line[i + 1] == StartOfSingleLineCommentdelimiter))
                                      { IsInSingleLineCommentString = true };
                              }
                        }
      
                        //---------------------------------------------------------
                        // mark the chars with the appropriate colour highlighting
                        //---------------------------------------------------------
      
                        if ((localcontext.IsInMultiLineCommentString == true)||(IsInSingleLineCommentString == true))
                            { SyntaxText.newgreenline = SyntaxText.newgreenline + line[i] }
                            else { SyntaxText.newgreenline = SyntaxText.newgreenline + " " };
      
                        if ((localcontext.IsInMultiLineCommentString == false) && (IsInSingleLineCommentString == false)&& (IsInStringLiteral == false)&&(ReservedWordCharCount<1))
                            { SyntaxText.newblackline = SyntaxText.newblackline + line[i] }
                            else { SyntaxText.newblackline = SyntaxText.newblackline + " " };
      
                        if ((localcontext.IsInMultiLineCommentString == false) && (IsInSingleLineCommentString == false) && (IsInStringLiteral == false)&&(ReservedWordCharCount>0))
                            { SyntaxText.newboldline = SyntaxText.newboldline + line[i]}
                            else { SyntaxText.newboldline = SyntaxText.newboldline + " " };
      
                        if (IsInStringLiteral == true)
                            { SyntaxText.newblueline = SyntaxText.newblueline + line[i] }
                            else {  SyntaxText.newblueline = SyntaxText.newblueline + " " } ;
      
                        //---------------------------------------------------------
                        //          Find strings and reserved words
                        //---------------------------------------------------------
      
                        if ((localcontext.IsInMultiLineCommentString == false) && (IsInSingleLineCommentString == false))
                        {
                           // find start and end of string
                           if(line[i] == StringDelimiter)
                           {
                             if (IsInStringLiteral == false)
                             {
                               IsInStringLiteral = true;
                             }
                             else { IsInStringLiteral = false };
                           }
      
                           // find reserved words
                           if (ReservedWordCharCount > 0) { ReservedWordCharCount = ReservedWordCharCount - 1; };
                           var lowercaseline = line.toLowerCase() + " ";
                           if ((IsInStringLiteral == false)&& isDelimiter(line[i])
                               && (lowercaseline.charCodeAt(i + 1) > 96) && (lowercaseline.charCodeAt(i + 1) < 123)) // space follwed by a lower case letter
                           {
                               var charindex = lowercaseline.charCodeAt(i + 1) - 96;
                               ReservedWordCharCount = matchReservedWord(lowercaseline, i + 1, charindex);
                           }
                        }
                    }
                    var MultilineChanges = true;
                    if (SavedIsInMultiLineCommentString == localcontext.IsInMultiLineCommentString){MultilineChanges = false};
                    localcontext.MultiLineCommentChangedStatus=MultilineChanges;
             return  MultilineChanges; // true if any of the changes on this line have consequences for the next line(s)
        }
      
        function ParseThisLine(startAtLine,mycontext,
             blackoutline,boldoutline,redoutline,greenoutline, blueoutline)  // the string arrays for each colour
        // function to parse the document if the number of lines change has not changed so we can limit our changes to a subset of the lines in the document
        {
            try {
                 var mylocalContext= JSON.parse(JSON.stringify(mycontext));
                var blackstring = "";
                var boldstring = "";
                var redstring = "";
                var greenstring = "";
                var bluestring = "";
                var linenumoutline = [""];
      
                var stringArray = document.getElementById(myId+"Real").value.split("\n");
                for (var j = startAtLine; j < stringArray.length; j++)
                {
                    var MultiLineCommentChangedStatus = mylocalContext.MultiLineCommentChangedStatus;
                    var line =" "+ stringArray[j]; // add a leading space so all reserved words always have a space in front of them
                    var SyntaxText ={ newblackline : "", newboldline : "",newredline : "", newgreenline : "", newblueline : ""};
      
                    // parse the line
                    MultiLineCommentChangedStatus=ParseLine(j,line,mylocalContext,SyntaxText );
                    mylocalContext.MultiLineCommentChangedStatus = MultiLineCommentChangedStatus;
                    // save the new context and savee its old value to see if we need to do the next lines or not
                    if (myNode.SavedLineContextArray[j+1] != undefined)
                    {var oldcontext = JSON.parse(JSON.stringify(myNode.SavedLineContextArray[j+1]));}
                    else {var oldcontext = JSON.parse(JSON.stringify(myNode.SavedLineContextArray[j]));}; // this is just to keep the compiler happy
                    myNode.SavedLineContextArray[j+1]= JSON.parse(JSON.stringify(mylocalContext));
      
                    // take away the leading char padding each line (which is there to make sure reserved words have a space preceeding them)
                    blackoutline[j] = SyntaxText.newblackline.slice(1);
                    boldoutline[j] = SyntaxText.newboldline.slice(1);
                    redoutline[j] = SyntaxText.newredline.slice(1);
                    greenoutline[j] = SyntaxText.newgreenline.slice(1);
                    blueoutline[j] = SyntaxText.newblueline.slice(1);
               //     myNode.SavedLineContextArray[j]
                   if (mylocalContext.IsInMultiLineCommentString == oldcontext.IsInMultiLineCommentString)
                      {  break; }
                }
                // avoid repainting between updating the different layers
                document.getElementById(myId+"Real").style.visibility="hidden";
      
                document.getElementById(myId+"Black").value =blackoutline.join("\n");
                document.getElementById(myId+"Bold").value = boldoutline.join("\n");
                document.getElementById(myId+"Red").value = redoutline.join("\n");
                document.getElementById(myId+"Green").value = greenoutline.join("\n");
                document.getElementById(myId+"Blue").value = blueoutline.join("\n");
      
                // restore having avoided repainting between updating the different layers
                document.getElementById(myId+"Real").style.visibility="visible";
      
            }
            catch(err) {  alert("Error in ParseThisLine syntax highlighting -- "+ err.message); };
        }
      
      
        // code to apply syntax highlighting .... myTextArea (the bottom one) holds the full text...the overlays only have the non standard chars
        // Remember to synchronize the scroll position for all the edit boxes
      
        function ParseWholeDocument()
        // function to parse the document if the number of lines change (or this is the first pass)
        {
            try {
                var blackstring = "";
                var boldstring = "";
                var redstring = "";
                var greenstring = "";
                var bluestring = "";
      
                myNode.blackoutline = [];
                myNode.boldoutline =  [];
                myNode.redoutline = [];
                myNode.greenoutline =  [];
                myNode.blueoutline =  [];
      
                var linenumoutline = [""];
      
                myNode.context.IsInMultiLineCommentString=false;
                myNode.context.IsInAltMultiLineCommentString=false;
                myNode.context.IsInASMMultiLineCommentString=false;
      
                var stringArray = document.getElementById(myId+"Real").value.split("\n");
                for (var j = 0; j < stringArray.length; j++)
                {
                    var line =" "+ stringArray[j]+" "; // add a leading and trailing space so all reserved words always have a space in front of them (and after them if they are at the end of a line)
                    var SyntaxText ={ newblackline : "", newboldline : "",newredline : "", newgreenline : "", newblueline : ""};
                    myNode.SavedLineContextArray[j] = JSON.parse(JSON.stringify(myNode.context));
      
                    ParseLine(j,line,myNode.context,SyntaxText );
      
                    // take away the leading char padding each line (which is there to make sure reserved words have a space preceeding them)
                    myNode.blackoutline[j] = SyntaxText.newblackline.slice(1);
                    myNode.boldoutline[j] = SyntaxText.newboldline.slice(1);
                    myNode.redoutline[j] = SyntaxText.newredline.slice(1);
                    myNode.greenoutline[j] = SyntaxText.newgreenline.slice(1);
                    myNode.blueoutline[j] = SyntaxText.newblueline.slice(1);
                }
                // avoid repainting between updating the different layers
                document.getElementById(myId+"Real").style.visibility="hidden";
      
                document.getElementById(myId+"Black").value =myNode.blackoutline.join("\n");
                document.getElementById(myId+"Bold").value = myNode.boldoutline.join("\n");
                document.getElementById(myId+"Red").value = myNode.redoutline.join("\n");
                document.getElementById(myId+"Green").value = myNode.greenoutline.join("\n");
                document.getElementById(myId+"Blue").value = myNode.blueoutline.join("\n");
      
                // restore having avoided repainting between updating the different layers
                document.getElementById(myId+"Real").style.visibility="visible";
      
                // now add line numbers
                for (var j = 0; j < stringArray.length; j++)
                {
                    linenumoutline[j] = (j+1).toString();
                    var strLen = 4 - linenumoutline[j].length;
                    for (var k = 0; k < strLen; k++) { linenumoutline[j] = " "+ linenumoutline[j]; };
                }
                document.getElementById(myId+"LineNumbers").value = linenumoutline.join("\n");
            }
            catch(err) {  alert("Error in ParseWholeDocument syntax highlighting --- "+ err.message); };
        }
      
        function CurrentLine()
        {
           var CursorPosition = document.getElementById(myId+"Real").selectionStart;
           var stringarray = document.getElementById(myId+"Real").value.substring(0,CursorPosition).split("\n");
           return stringarray.length -1;
        }
      
        function chooseParser(event)
        {
        //alert('chooseParser');
           if (event!=null)
             {var x = event.which || event.keyCode; }// firefox does not support event.which but it does suppoert event.keyCode;
           else
             {x = 0; myNode.IsInitalised = false;}
      
           //detect backspace,CursorUp,CursorDown,delete,return and cntrl V keys or non zero range - then redo the whole document as it could have changed the number of lines
           if ((myNode.IsInitalised == false) ||(x==8)||(x==38)||(x==40) ||(x==46) ||(x==13) ||(x==86)||(myNode.LengthOfRangeSelected !=0))
           {
               myNode.IsInitalised = true;
               ParseWholeDocument();
           }
           else
           {
           //alert('parse one line');
               var Selectedline = CurrentLine();
               //alert('Selectedline='+Selectedline);
               ParseThisLine(Selectedline,
                               myNode.SavedLineContextArray[Selectedline],
                               myNode.blackoutline,  // the string arrays for each colour
                           myNode.boldoutline,
                           myNode.redoutline,
                           myNode.greenoutline,
                               myNode.blueoutline);
           };
           myNode.LengthOfRangeSelected = 0;
           pas.XCode.SyncScroll(myId);
        }
        chooseParser(event);
    };
  };
  this.DoKeyDown = function (myId, event) {
    function CursorGotoXY(x,y)
      {  var charcount = 0;
         const mydoc = document.getElementById(myId+"Real");
         var stringArray = mydoc.value.split("\n");
         for (var j = 0; j < stringArray.length; j++)
         {
           if (j< y){ charcount = charcount + stringArray[j].length +1;};
         }
         charcount = charcount + x;
         mydoc.focus();
         mydoc.setSelectionRange(charcount,(charcount + 1));
      }
    
      function SuppressTabKey(event)
      // code to suppress the tab key default behavior on KeyDown
      {
         var myElement = document.getElementById(myId+"Real")
             LengthOfRangeSelected = Math.abs(myElement.selectionStart - myElement.selectionEnd);
         var x = event.which || event.keyCode; // firefox does not support event.which but it does suppoert event.keyCode;
         //detect 'tab' key
         if(x == 9)
         {
           //prevent focusing on next element
           event.preventDefault();
         }
      }
      SuppressTabKey(event);
  };
  this.SyncScroll = function (myId) {
    {
              var myscrollTop = document.getElementById(myId+"Real").scrollTop;
              var myscrollLeft =  document.getElementById(myId+"Real").scrollLeft;
    
              document.getElementById(myId+"Black").scrollTop = myscrollTop;
              document.getElementById(myId+"Bold").scrollTop = myscrollTop;
              document.getElementById(myId+"Red").scrollTop = myscrollTop;
              document.getElementById(myId+"Green").scrollTop = myscrollTop;
              document.getElementById(myId+"Blue").scrollTop = myscrollTop;
              document.getElementById(myId+"LineNumbers").scrollTop = myscrollTop;
    
              document.getElementById(myId+"Black").scrollLeft = myscrollLeft;
              document.getElementById(myId+"Bold").scrollLeft = myscrollLeft;
              document.getElementById(myId+"Red").scrollLeft = myscrollLeft;
              document.getElementById(myId+"Green").scrollLeft = myscrollLeft;
              document.getElementById(myId+"Blue").scrollLeft = myscrollLeft;
              document.getElementById(myId+"LineNumbers").scrollLeft = myscrollLeft;
              };
  };
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerWidth","String","400","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerHeight","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Code Editor","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Top","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ItemValue","String","...text...","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MessagesHeight","String","1","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXCode","BgColor");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXCode";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var LabelText = "";
    var ReadOnly = false;
    var OnChangeString = "";
    var OnClickString = "";
    var OnKeyUpString = "";
    var OnScrollString = "";
    var MsgClickString = "";
    var OnKeyDownString = "";
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    ReadOnly = pas.SysUtils.StrToBool(MyNode.GetAttribute("ReadOnly",true).AttribValue);
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', \'\');" ';
    OnChangeString = (((('onchange="pas.NodeUtils.SetInterfaceProperty(\'' + ScreenObjectName) + "','ItemValue',event.target.value); ") + "pas.Events.handleEvent(null,'Change','") + ScreenObjectName) + '\', event.target.value, \'ItemValue\');" ';
    OnScrollString = 'onscroll="var p = event.target.parentNode.parentNode;pas.XCode.SyncScroll(p.id);"';
    OnKeyUpString = (('onkeyup="var p = event.target.parentNode.parentNode;' + "pas.XCode.DoKeyUp(p.id,'") + ScreenObjectName) + '\',event);" ';
    OnKeyDownString = 'onkeydown="var p = event.target.parentNode.parentNode; pas.XCode.DoKeyDown(p.id,event);"';
    MsgClickString = (((('onmouseup="event.stopPropagation(); ' + "var lnum=this.value.substr(0, event.target.selectionStart).split('\\n').length; ") + "var slnum=lnum.toString(); ") + "pas.Events.handleEvent(null,'ClickMessage','") + ScreenObjectName) + '\', slnum);" ';
    $mod.AddCodeEditorStyles();
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
        wrapper.classList.add("textAreaBorder");
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var ReadOnlyString = ' ';
        if (ReadOnly==true) { ReadOnlyString = ' readonly ';}
    
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
    
    
        var editorString =
        '<div id='+MyObjectName+' style=" background-color:#FFFFFF; height:100%; width:100%; z-index: 1;" class="vbox" '+
        //        OnClickString +
            '>'+
            '<div id='+MyObjectName+'Panel style="display:inline-block; height:100%; width:100%;  position:relative; z-index: 1;" >' +
            '<textarea id='+MyObjectName+'LineNumbers readonly '+
                'class="textarea noscrollbar LineNumberTextArea" ; spellcheck="false"; contenteditable="false" ></textarea> <!â€“â€“  Line Numbers   -->' +
            '<textarea id='+MyObjectName+'Real  '+
               OnChangeString +
               OnKeyUpString +
               OnKeyDownString +
               OnScrollString +
               ReadOnlyString +
               ' class="textarea WhiteTextArea " ; spellcheck="false" ; contenteditable="true" >' +
            '</textarea> ' +
    
            // Place transparent editboxes on top of each other so that the colour can be changed by selecting which layer to place the chars
            //    ....only the bottom one is editable directly
            '<textarea id="'+MyObjectName+'Bold" class="textarea BoldTextArea BlackTextArea" ;spellcheck="false" ; contenteditable="false" ></textarea>  <!â€“â€“  keywords       -->' +
            '<textarea id="'+MyObjectName+'Red" class="textarea RedTextArea" ; spellcheck="false" ;contenteditable="false" ></textarea>                  <!â€“â€“  Errors         -->' +
            '<textarea id="'+MyObjectName+'Green" class="textarea GreenTextArea" ; spellcheck="false" ;contenteditable="false" ></textarea>              <!â€“â€“  Comments       -->' +
            '<textarea id="'+MyObjectName+'Blue" class="textarea BlueTextArea" ; spellcheck="false" ;contenteditable="false" ></textarea>                <!â€“â€“  Strings        -->' +
            '<textarea id="'+MyObjectName+'Black" class="textarea BlackTextArea" ; spellcheck="false" ;contenteditable="false" ></textarea>             <!â€“â€“  Normal Code    -->' +
          '</div>' +
          '<textarea id='+MyObjectName+'Messages readonly class="messagesarea" '+
            MsgClickString +
          '></textarea>'+
          '</div>' ;
         HTMLString = labelstring+editorString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
      }
      catch(err) { alert(err.message+'  in XCode.CreateXCode');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    MyNode.context.IsInMultiLineCommentString = false;
    MyNode.context.IsInAltMultiLineCommentString = false;
    MyNode.context.IsInASMMultiLineCommentString = false;
    MyNode.context.MultiLineCommentChangedStatus = false;
    MyNode.blackoutline = rtl.arraySetLength(MyNode.blackoutline,"",0);
    MyNode.boldoutline = rtl.arraySetLength(MyNode.boldoutline,"",0);
    MyNode.redoutline = rtl.arraySetLength(MyNode.redoutline,"",0);
    MyNode.greenoutline = rtl.arraySetLength(MyNode.greenoutline,"",0);
    MyNode.blueoutline = rtl.arraySetLength(MyNode.blueoutline,"",0);
    MyNode.IsInitalised = false;
    MyNode.LengthOfRangeSelected = 0;
    MyNode.SavedLineContextArray = rtl.arraySetLength(MyNode.SavedLineContextArray,"",0);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXCode.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("Web",["System","Types","JS"],function () {
  "use strict";
  var $mod = this;
  $mod.$rtti.$RefToProcVar("TJSEventHandler",{procsig: rtl.newTIProcSig([["Event",$mod.$rtti["TEventListenerEvent"]]],rtl.boolean)});
  $mod.$rtti.$ProcVar("TJSNodeListCallBack",{procsig: rtl.newTIProcSig([["currentValue",$mod.$rtti["TJSNode"]],["currentIndex",rtl.nativeint],["list",$mod.$rtti["TJSNodeList"]]])});
  $mod.$rtti.$MethodVar("TJSNodeListEvent",{procsig: rtl.newTIProcSig([["currentValue",$mod.$rtti["TJSNode"]],["currentIndex",rtl.nativeint],["list",$mod.$rtti["TJSNodeList"]]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TDOMTokenlistCallBack",{procsig: rtl.newTIProcSig([["Current",rtl.jsvalue],["currentIndex",rtl.nativeint],["list",$mod.$rtti["TJSDOMTokenList"]]])});
  this.TJSClientRect = function (s) {
    if (s) {
      this.left = s.left;
      this.top = s.top;
      this.right = s.right;
      this.bottom = s.bottom;
    } else {
      this.left = 0.0;
      this.top = 0.0;
      this.right = 0.0;
      this.bottom = 0.0;
    };
    this.$equal = function (b) {
      return (this.left === b.left) && ((this.top === b.top) && ((this.right === b.right) && (this.bottom === b.bottom)));
    };
  };
  $mod.$rtti.$Record("TJSClientRect",{}).addFields("left",rtl.double,"top",rtl.double,"right",rtl.double,"bottom",rtl.double);
  this.TJSElementCreationOptions = function (s) {
    if (s) {
      this.named = s.named;
    } else {
      this.named = "";
    };
    this.$equal = function (b) {
      return this.named === b.named;
    };
  };
  $mod.$rtti.$Record("TJSElementCreationOptions",{}).addFields("named",rtl.string);
  this.TJSEventInit = function (s) {
    if (s) {
      this.bubbles = s.bubbles;
      this.cancelable = s.cancelable;
      this.scoped = s.scoped;
      this.composed = s.composed;
    } else {
      this.bubbles = false;
      this.cancelable = false;
      this.scoped = false;
      this.composed = false;
    };
    this.$equal = function (b) {
      return (this.bubbles === b.bubbles) && ((this.cancelable === b.cancelable) && ((this.scoped === b.scoped) && (this.composed === b.composed)));
    };
  };
  $mod.$rtti.$Record("TJSEventInit",{}).addFields("bubbles",rtl.boolean,"cancelable",rtl.boolean,"scoped",rtl.boolean,"composed",rtl.boolean);
  $mod.$rtti.$ProcVar("TJSNameSpaceMapperCallback",{procsig: rtl.newTIProcSig([["aNameSpace",rtl.string]],rtl.string)});
  $mod.$rtti.$RefToProcVar("TJSDataTransferItemCallBack",{procsig: rtl.newTIProcSig([["aData",rtl.string]])});
  $mod.$rtti.$RefToProcVar("TJSDragDropEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSDragEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("THTMLClickEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSMouseEvent"]]],rtl.boolean)});
  rtl.createClassExt($mod,"TJSAnimationEvent",Event,"",function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
  });
  rtl.createClassExt($mod,"TJSLoadEvent",Event,"",function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
  });
  rtl.createClassExt($mod,"TJsPageTransitionEvent",Event,"",function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
  });
  $mod.$rtti.$RefToProcVar("TJSPageTransitionEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJsPageTransitionEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSHashChangeEventhandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSHashChangeEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSMouseWheelEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSWheelEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSMouseEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSMouseEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("THTMLAnimationEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSAnimationEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSErrorEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSErrorEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSFocusEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSKeyEventhandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSKeyboardEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSLoadEventhandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSLoadEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSPointerEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSPointerEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSUIEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSUIEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSPopStateEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSPopStateEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSStorageEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSStorageEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSProgressEventhandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSProgressEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSTouchEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSTouchEvent"]]],rtl.boolean)});
  rtl.createClass($mod,"TJSIDBTransactionMode",pas.System.TObject,function () {
    this.readonly = "readonly";
    this.readwrite = "readwrite";
    this.versionchange = "versionchange";
  });
  this.TJSIDBIndexParameters = function (s) {
    if (s) {
      this.unique = s.unique;
      this.multiEntry = s.multiEntry;
      this.locale = s.locale;
    } else {
      this.unique = false;
      this.multiEntry = false;
      this.locale = "";
    };
    this.$equal = function (b) {
      return (this.unique === b.unique) && ((this.multiEntry === b.multiEntry) && (this.locale === b.locale));
    };
  };
  $mod.$rtti.$Record("TJSIDBIndexParameters",{}).addFields("unique",rtl.boolean,"multiEntry",rtl.boolean,"locale",rtl.string);
  this.TJSCreateObjectStoreOptions = function (s) {
    if (s) {
      this.keyPath = s.keyPath;
      this.autoIncrement = s.autoIncrement;
    } else {
      this.keyPath = undefined;
      this.autoIncrement = false;
    };
    this.$equal = function (b) {
      return (this.keyPath === b.keyPath) && (this.autoIncrement === b.autoIncrement);
    };
  };
  $mod.$rtti.$Record("TJSCreateObjectStoreOptions",{}).addFields("keyPath",rtl.jsvalue,"autoIncrement",rtl.boolean);
  this.TJSPositionError = function (s) {
    if (s) {
      this.code = s.code;
      this.message = s.message;
    } else {
      this.code = 0;
      this.message = "";
    };
    this.$equal = function (b) {
      return (this.code === b.code) && (this.message === b.message);
    };
  };
  $mod.$rtti.$Record("TJSPositionError",{}).addFields("code",rtl.longint,"message",rtl.string);
  this.TJSPositionOptions = function (s) {
    if (s) {
      this.enableHighAccuracy = s.enableHighAccuracy;
      this.timeout = s.timeout;
      this.maximumAge = s.maximumAge;
    } else {
      this.enableHighAccuracy = false;
      this.timeout = 0;
      this.maximumAge = 0;
    };
    this.$equal = function (b) {
      return (this.enableHighAccuracy === b.enableHighAccuracy) && ((this.timeout === b.timeout) && (this.maximumAge === b.maximumAge));
    };
  };
  $mod.$rtti.$Record("TJSPositionOptions",{}).addFields("enableHighAccuracy",rtl.boolean,"timeout",rtl.longint,"maximumAge",rtl.longint);
  this.TJSCoordinates = function (s) {
    if (s) {
      this.latitude = s.latitude;
      this.longitude = s.longitude;
      this.altitude = s.altitude;
      this.accuracy = s.accuracy;
      this.altitudeAccuracy = s.altitudeAccuracy;
      this.heading = s.heading;
      this.speed = s.speed;
    } else {
      this.latitude = 0.0;
      this.longitude = 0.0;
      this.altitude = 0.0;
      this.accuracy = 0.0;
      this.altitudeAccuracy = 0.0;
      this.heading = 0.0;
      this.speed = 0.0;
    };
    this.$equal = function (b) {
      return (this.latitude === b.latitude) && ((this.longitude === b.longitude) && ((this.altitude === b.altitude) && ((this.accuracy === b.accuracy) && ((this.altitudeAccuracy === b.altitudeAccuracy) && ((this.heading === b.heading) && (this.speed === b.speed))))));
    };
  };
  $mod.$rtti.$Record("TJSCoordinates",{}).addFields("latitude",rtl.double,"longitude",rtl.double,"altitude",rtl.double,"accuracy",rtl.double,"altitudeAccuracy",rtl.double,"heading",rtl.double,"speed",rtl.double);
  this.TJSPosition = function (s) {
    if (s) {
      this.coords = new $mod.TJSCoordinates(s.coords);
      this.timestamp = s.timestamp;
    } else {
      this.coords = new $mod.TJSCoordinates();
      this.timestamp = "";
    };
    this.$equal = function (b) {
      return this.coords.$equal(b.coords) && (this.timestamp === b.timestamp);
    };
  };
  $mod.$rtti.$Record("TJSPosition",{}).addFields("coords",$mod.$rtti["TJSCoordinates"],"timestamp",rtl.string);
  $mod.$rtti.$ProcVar("TJSGeoLocationCallback",{procsig: rtl.newTIProcSig([["aPosition",$mod.$rtti["TJSPosition"]]])});
  $mod.$rtti.$MethodVar("TJSGeoLocationEvent",{procsig: rtl.newTIProcSig([["aPosition",$mod.$rtti["TJSPosition"]]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TJSGeoLocationErrorCallback",{procsig: rtl.newTIProcSig([["aValue",$mod.$rtti["TJSPositionError"]]])});
  $mod.$rtti.$MethodVar("TJSGeoLocationErrorEvent",{procsig: rtl.newTIProcSig([["aValue",$mod.$rtti["TJSPositionError"]]]), methodkind: 0});
  this.TJSServiceWorkerContainerOptions = function (s) {
    if (s) {
      this.scope = s.scope;
    } else {
      this.scope = "";
    };
    this.$equal = function (b) {
      return this.scope === b.scope;
    };
  };
  $mod.$rtti.$Record("TJSServiceWorkerContainerOptions",{}).addFields("scope",rtl.string);
  $mod.$rtti.$RefToProcVar("TJSTimerCallBack",{procsig: rtl.newTIProcSig(null)});
  $mod.$rtti.$ProcVar("TFrameRequestCallback",{procsig: rtl.newTIProcSig([["aTime",rtl.double]])});
  $mod.$rtti.$DynArray("TJSWindowArray",{eltype: $mod.$rtti["TJSWindow"]});
  $mod.$rtti.$RefToProcVar("THTMLCanvasToBlobCallback",{procsig: rtl.newTIProcSig([["aBlob",$mod.$rtti["TJSBlob"]]],rtl.boolean)});
  this.TJSTextMetrics = function (s) {
    if (s) {
      this.width = s.width;
      this.actualBoundingBoxLeft = s.actualBoundingBoxLeft;
      this.actualBoundingBoxRight = s.actualBoundingBoxRight;
      this.fontBoundingBoxAscent = s.fontBoundingBoxAscent;
      this.fontBoundingBoxDescent = s.fontBoundingBoxDescent;
      this.actualBoundingBoxAscent = s.actualBoundingBoxAscent;
      this.actualBoundingBoxDescent = s.actualBoundingBoxDescent;
      this.emHeightAscent = s.emHeightAscent;
      this.emHeightDescent = s.emHeightDescent;
      this.hangingBaseline = s.hangingBaseline;
      this.alphabeticBaseline = s.alphabeticBaseline;
      this.ideographicBaseline = s.ideographicBaseline;
    } else {
      this.width = 0.0;
      this.actualBoundingBoxLeft = 0.0;
      this.actualBoundingBoxRight = 0.0;
      this.fontBoundingBoxAscent = 0.0;
      this.fontBoundingBoxDescent = 0.0;
      this.actualBoundingBoxAscent = 0.0;
      this.actualBoundingBoxDescent = 0.0;
      this.emHeightAscent = 0.0;
      this.emHeightDescent = 0.0;
      this.hangingBaseline = 0.0;
      this.alphabeticBaseline = 0.0;
      this.ideographicBaseline = 0.0;
    };
    this.$equal = function (b) {
      return (this.width === b.width) && ((this.actualBoundingBoxLeft === b.actualBoundingBoxLeft) && ((this.actualBoundingBoxRight === b.actualBoundingBoxRight) && ((this.fontBoundingBoxAscent === b.fontBoundingBoxAscent) && ((this.fontBoundingBoxDescent === b.fontBoundingBoxDescent) && ((this.actualBoundingBoxAscent === b.actualBoundingBoxAscent) && ((this.actualBoundingBoxDescent === b.actualBoundingBoxDescent) && ((this.emHeightAscent === b.emHeightAscent) && ((this.emHeightDescent === b.emHeightDescent) && ((this.hangingBaseline === b.hangingBaseline) && ((this.alphabeticBaseline === b.alphabeticBaseline) && (this.ideographicBaseline === b.ideographicBaseline)))))))))));
    };
  };
  $mod.$rtti.$Record("TJSTextMetrics",{}).addFields("width",rtl.double,"actualBoundingBoxLeft",rtl.double,"actualBoundingBoxRight",rtl.double,"fontBoundingBoxAscent",rtl.double,"fontBoundingBoxDescent",rtl.double,"actualBoundingBoxAscent",rtl.double,"actualBoundingBoxDescent",rtl.double,"emHeightAscent",rtl.double,"emHeightDescent",rtl.double,"hangingBaseline",rtl.double,"alphabeticBaseline",rtl.double,"ideographicBaseline",rtl.double);
  $mod.$rtti.$RefToProcVar("TJSOnReadyStateChangeHandler",{procsig: rtl.newTIProcSig(null)});
  this.TJSWheelEventInit = function (s) {
    if (s) {
      this.deltaX = s.deltaX;
      this.deltaY = s.deltaY;
      this.deltaZ = s.deltaZ;
      this.deltaMode = s.deltaMode;
    } else {
      this.deltaX = 0.0;
      this.deltaY = 0.0;
      this.deltaZ = 0.0;
      this.deltaMode = 0;
    };
    this.$equal = function (b) {
      return (this.deltaX === b.deltaX) && ((this.deltaY === b.deltaY) && ((this.deltaZ === b.deltaZ) && (this.deltaMode === b.deltaMode)));
    };
  };
  $mod.$rtti.$Record("TJSWheelEventInit",{}).addFields("deltaX",rtl.double,"deltaY",rtl.double,"deltaZ",rtl.double,"deltaMode",rtl.nativeint);
  rtl.createClass($mod,"TJSKeyNames",pas.System.TObject,function () {
    this.Alt = "Alt";
    this.AltGraph = "AltGraph";
    this.CapsLock = "CapsLock";
    this.Control = "Control";
    this.Fn = "Fn";
    this.FnLock = "FnLock";
    this.Hyper = "Hyper";
    this.Meta = "Meta";
    this.NumLock = "NumLock";
    this.ScrollLock = "ScrollLock";
    this.Shift = "Shift";
    this.Super = "Super";
    this.Symbol = "Symbol";
    this.SymbolLock = "SymbolLock";
    this.Enter = "Enter";
    this.Tab = "Tab";
    this.Space = " ";
    this.ArrowDown = "ArrowDown";
    this.ArrowLeft = "ArrowLeft";
    this.ArrowRight = "ArrowRight";
    this.ArrowUp = "ArrowUp";
    this._End = "End";
    this.Home = "Home";
    this.PageDown = "PageDown";
    this.PageUp = "PageUp";
    this.BackSpace = "Backspace";
    this.Clear = "Clear";
    this.Copy = "Copy";
    this.CrSel = "CrSel";
    this.Cut = "Cut";
    this.Delete = "Delete";
    this.EraseEof = "EraseEof";
    this.ExSel = "ExSel";
    this.Insert = "Insert";
    this.Paste = "Paste";
    this.Redo = "Redo";
    this.Undo = "Undo";
    this.Accept = "Accept";
    this.Again = "Again";
    this.Attn = "Attn";
    this.Cancel = "Cancel";
    this.ContextMenu = "Contextmenu";
    this.Escape = "Escape";
    this.Execute = "Execute";
    this.Find = "Find";
    this.Finish = "Finish";
    this.Help = "Help";
    this.Pause = "Pause";
    this.Play = "Play";
    this.Props = "Props";
    this.Select = "Select";
    this.ZoomIn = "ZoomIn";
    this.ZoomOut = "ZoomOut";
    this.BrightnessDown = "BrightnessDown";
    this.BrightnessUp = "BrightnessUp";
    this.Eject = "Eject";
    this.LogOff = "LogOff";
    this.Power = "Power";
    this.PowerOff = "PowerOff";
    this.PrintScreen = "PrintScreen";
    this.Hibernate = "Hibernate";
    this.Standby = "Standby";
    this.WakeUp = "WakeUp";
    this.AllCandidates = "AllCandidates";
    this.Alphanumeric = "Alphanumeric";
    this.CodeInput = "CodeInput";
    this.Compose = "Compose";
    this.Convert = "Convert";
    this.Dead = "Dead";
    this.FinalMode = "FinalMode";
    this.GroupFirst = "GroupFirst";
    this.GroupLast = "GroupLast";
    this.GroupNext = "GroupNext";
    this.GroupPrevious = "GroupPrevious";
    this.ModelChange = "ModelChange";
    this.NextCandidate = "NextCandidate";
    this.NonConvert = "NonConvert";
    this.PreviousCandidate = "PreviousCandidate";
    this.Process = "Process";
    this.SingleCandidate = "SingleCandidate";
    this.HangulMode = "HangulMode";
    this.HanjaMode = "HanjaMode";
    this.JunjaMode = "JunjaMode";
    this.Eisu = "Eisu";
    this.Hankaku = "Hankaku";
    this.Hiranga = "Hiranga";
    this.HirangaKatakana = "HirangaKatakana";
    this.KanaMode = "KanaMode";
    this.Katakana = "Katakana";
    this.Romaji = "Romaji";
    this.Zenkaku = "Zenkaku";
    this.ZenkakuHanaku = "ZenkakuHanaku";
    this.F1 = "F1";
    this.F2 = "F2";
    this.F3 = "F3";
    this.F4 = "F4";
    this.F5 = "F5";
    this.F6 = "F6";
    this.F7 = "F7";
    this.F8 = "F8";
    this.F9 = "F9";
    this.F10 = "F10";
    this.F11 = "F11";
    this.F12 = "F12";
    this.F13 = "F13";
    this.F14 = "F14";
    this.F15 = "F15";
    this.F16 = "F16";
    this.F17 = "F17";
    this.F18 = "F18";
    this.F19 = "F19";
    this.F20 = "F20";
    this.Soft1 = "Soft1";
    this.Soft2 = "Soft2";
    this.Soft3 = "Soft3";
    this.Soft4 = "Soft4";
    this.Decimal = "Decimal";
    this.Key11 = "Key11";
    this.Key12 = "Key12";
    this.Multiply = "Multiply";
    this.Add = "Add";
    this.NumClear = "Clear";
    this.Divide = "Divide";
    this.Subtract = "Subtract";
    this.Separator = "Separator";
    this.AppSwitch = "AppSwitch";
    this.Call = "Call";
    this.Camera = "Camera";
    this.CameraFocus = "CameraFocus";
    this.EndCall = "EndCall";
    this.GoBack = "GoBack";
    this.GoHome = "GoHome";
    this.HeadsetHook = "HeadsetHook";
    this.LastNumberRedial = "LastNumberRedial";
    this.Notification = "Notification";
    this.MannerMode = "MannerMode";
    this.VoiceDial = "VoiceDial";
  });
  this.TJSMutationRecord = function (s) {
    if (s) {
      this.type_ = s.type_;
      this.target = s.target;
      this.addedNodes = s.addedNodes;
      this.removedNodes = s.removedNodes;
      this.previousSibling = s.previousSibling;
      this.nextSibling = s.nextSibling;
      this.attributeName = s.attributeName;
      this.attributeNamespace = s.attributeNamespace;
      this.oldValue = s.oldValue;
    } else {
      this.type_ = "";
      this.target = null;
      this.addedNodes = null;
      this.removedNodes = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributeName = "";
      this.attributeNamespace = "";
      this.oldValue = "";
    };
    this.$equal = function (b) {
      return (this.type_ === b.type_) && ((this.target === b.target) && ((this.addedNodes === b.addedNodes) && ((this.removedNodes === b.removedNodes) && ((this.previousSibling === b.previousSibling) && ((this.nextSibling === b.nextSibling) && ((this.attributeName === b.attributeName) && ((this.attributeNamespace === b.attributeNamespace) && (this.oldValue === b.oldValue))))))));
    };
  };
  $mod.$rtti.$Record("TJSMutationRecord",{}).addFields("type_",rtl.string,"target",$mod.$rtti["TJSNode"],"addedNodes",$mod.$rtti["TJSNodeList"],"removedNodes",$mod.$rtti["TJSNodeList"],"previousSibling",$mod.$rtti["TJSNode"],"nextSibling",$mod.$rtti["TJSNode"],"attributeName",rtl.string,"attributeNamespace",rtl.string,"oldValue",rtl.string);
  $mod.$rtti.$DynArray("TJSMutationRecordArray",{eltype: $mod.$rtti["TJSMutationRecord"]});
  $mod.$rtti.$RefToProcVar("TJSMutationCallback",{procsig: rtl.newTIProcSig([["mutations",$mod.$rtti["TJSMutationRecordArray"]],["observer",$mod.$rtti["TJSMutationObserver"]]])});
  this.TJSMutationObserverInit = function (s) {
    if (s) {
      this.attributes = s.attributes;
      this.attributeOldValue = s.attributeOldValue;
      this.characterData = s.characterData;
      this.characterDataOldValue = s.characterDataOldValue;
      this.childList = s.childList;
      this.subTree = s.subTree;
      this.attributeFilter = s.attributeFilter;
    } else {
      this.attributes = false;
      this.attributeOldValue = false;
      this.characterData = false;
      this.characterDataOldValue = false;
      this.childList = false;
      this.subTree = false;
      this.attributeFilter = null;
    };
    this.$equal = function (b) {
      return (this.attributes === b.attributes) && ((this.attributeOldValue === b.attributeOldValue) && ((this.characterData === b.characterData) && ((this.characterDataOldValue === b.characterDataOldValue) && ((this.childList === b.childList) && ((this.subTree === b.subTree) && (this.attributeFilter === b.attributeFilter))))));
    };
  };
  $mod.$rtti.$Record("TJSMutationObserverInit",{}).addFields("attributes",rtl.boolean,"attributeOldValue",rtl.boolean,"characterData",rtl.boolean,"characterDataOldValue",rtl.boolean,"childList",rtl.boolean,"subTree",rtl.boolean,"attributeFilter",pas.JS.$rtti["TJSArray"]);
});
rtl.module("contnrs",["System","SysUtils","Classes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$RefToProcVar("TObjectListCallback",{procsig: rtl.newTIProcSig([["data",pas.System.$rtti["TObject"]],["arg",rtl.jsvalue]])});
  rtl.createClass($mod,"TFPObjectList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FFreeObjects = false;
      this.FList = null;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FList.FCount;
      return Result;
    };
    this.SetCount = function (AValue) {
      if (this.FList.FCount !== AValue) this.FList.SetCount(AValue);
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.FList.Get(Index));
      return Result;
    };
    this.SetItem = function (Index, AObject) {
      var O = null;
      if (this.FFreeObjects) {
        O = rtl.getObject(this.FList.Get(Index));
        this.FList.Put(Index,AObject);
        O = rtl.freeLoc(O);
      } else this.FList.Put(Index,AObject);
    };
    this.SetCapacity = function (NewCapacity) {
      this.FList.SetCapacity(NewCapacity);
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = this.FList.FCapacity;
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FList = pas.Classes.TFPList.$create("Create");
      this.FFreeObjects = true;
    };
    this.Create$2 = function (FreeObjects) {
      this.Create$1();
      this.FFreeObjects = FreeObjects;
    };
    this.Destroy = function () {
      if (this.FList !== null) {
        this.Clear();
        this.FList.$destroy("Destroy");
      };
      pas.System.TObject.Destroy.call(this);
    };
    this.Clear = function () {
      var i = 0;
      var O = null;
      if (this.FFreeObjects) for (var $l1 = this.FList.FCount - 1; $l1 >= 0; $l1--) {
        i = $l1;
        O = rtl.getObject(this.FList.Get(i));
        this.FList.Put(i,null);
        O = rtl.freeLoc(O);
      };
      this.FList.Clear();
    };
    this.Add = function (AObject) {
      var Result = 0;
      Result = this.FList.Add(AObject);
      return Result;
    };
    this.Delete = function (Index) {
      var O = null;
      if (this.FFreeObjects) {
        O = rtl.getObject(this.FList.Get(Index));
        this.FList.Put(Index,null);
        O = rtl.freeLoc(O);
      };
      this.FList.Delete(Index);
    };
    this.Exchange = function (Index1, Index2) {
      this.FList.Exchange(Index1,Index2);
    };
    this.Expand = function () {
      var Result = null;
      this.FList.Expand();
      Result = this;
      return Result;
    };
    this.Extract = function (Item) {
      var Result = null;
      Result = rtl.getObject(this.FList.Extract(Item));
      return Result;
    };
    this.Remove = function (AObject) {
      var Result = 0;
      var O = null;
      Result = this.IndexOf(AObject);
      if (Result !== -1) {
        if (this.FFreeObjects) {
          O = rtl.getObject(this.FList.Get(Result));
          this.FList.Put(Result,null);
          O = rtl.freeLoc(O);
        };
        this.FList.Delete(Result);
      };
      return Result;
    };
    this.IndexOf = function (AObject) {
      var Result = 0;
      Result = this.FList.IndexOf(rtl.getObject(AObject));
      return Result;
    };
    this.FindInstanceOf = function (AClass, AExact, AStartAt) {
      var Result = 0;
      var I = 0;
      I = AStartAt;
      Result = -1;
      if (AExact) {
        while ((I < this.GetCount()) && (Result === -1)) if (this.GetItem(I).$class.ClassType() === AClass) {
          Result = I}
         else I += 1}
       else while ((I < this.GetCount()) && (Result === -1)) if (this.GetItem(I).$class.InheritsFrom(AClass)) {
        Result = I}
       else I += 1;
      return Result;
    };
    this.Insert = function (Index, AObject) {
      this.FList.Insert(Index,rtl.getObject(AObject));
    };
    this.First = function () {
      var Result = null;
      Result = rtl.getObject(this.FList.First());
      return Result;
    };
    this.Last = function () {
      var Result = null;
      Result = rtl.getObject(this.FList.Last());
      return Result;
    };
    this.Move = function (CurIndex, NewIndex) {
      this.FList.Move(CurIndex,NewIndex);
    };
    this.Assign = function (Obj) {
      var i = 0;
      this.Clear();
      for (var $l1 = 0, $end2 = Obj.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.Add(Obj.GetItem(i));
      };
    };
    this.Pack = function () {
      this.FList.Pack();
    };
    this.Sort = function (Compare) {
      this.FList.Sort(Compare);
    };
    this.ForEachCall = function (proc2call, arg) {
      this.FList.ForEachCall(proc2call,arg);
    };
  });
  rtl.createClass($mod,"TObjectList",pas.Classes.TList,function () {
    this.$init = function () {
      pas.Classes.TList.$init.call(this);
      this.FFreeObjects = false;
    };
    this.Notify = function (Ptr, Action) {
      var O = null;
      if (this.FFreeObjects) if (Action === pas.Classes.TListNotification.lnDeleted) {
        O = rtl.getObject(Ptr);
        O = rtl.freeLoc(O);
      };
      pas.Classes.TList.Notify.call(this,Ptr,Action);
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Get.call(this,Index));
      return Result;
    };
    this.SetItem = function (Index, AObject) {
      this.Put(Index,rtl.getObject(AObject));
    };
    this.Create$2 = function () {
      pas.Classes.TList.Create$1.call(this);
      this.FFreeObjects = true;
    };
    this.Create$3 = function (FreeObjects) {
      pas.Classes.TList.Create$1.call(this);
      this.FFreeObjects = FreeObjects;
    };
    this.Add$1 = function (AObject) {
      var Result = 0;
      Result = pas.Classes.TList.Add.call(this,rtl.getObject(AObject));
      return Result;
    };
    this.Extract$1 = function (Item) {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Extract.call(this,rtl.getObject(Item)));
      return Result;
    };
    this.Remove$1 = function (AObject) {
      var Result = 0;
      Result = pas.Classes.TList.Remove.call(this,rtl.getObject(AObject));
      return Result;
    };
    this.IndexOf$1 = function (AObject) {
      var Result = 0;
      Result = pas.Classes.TList.IndexOf.call(this,rtl.getObject(AObject));
      return Result;
    };
    this.FindInstanceOf = function (AClass, AExact, AStartAt) {
      var Result = 0;
      var I = 0;
      I = AStartAt;
      Result = -1;
      if (AExact) {
        while ((I < this.GetCount()) && (Result === -1)) if (this.GetItem(I).$class.ClassType() === AClass) {
          Result = I}
         else I += 1}
       else while ((I < this.GetCount()) && (Result === -1)) if (this.GetItem(I).$class.InheritsFrom(AClass)) {
        Result = I}
       else I += 1;
      return Result;
    };
    this.Insert$1 = function (Index, AObject) {
      pas.Classes.TList.Insert.call(this,Index,rtl.getObject(AObject));
    };
    this.First$1 = function () {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.First.call(this));
      return Result;
    };
    this.Last$1 = function () {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Last.call(this));
      return Result;
    };
  });
  rtl.createClass($mod,"TComponentList",$mod.TObjectList,function () {
    this.$init = function () {
      $mod.TObjectList.$init.call(this);
      this.FNotifier = null;
    };
    this.$final = function () {
      this.FNotifier = undefined;
      $mod.TObjectList.$final.call(this);
    };
    this.Notify = function (Ptr, Action) {
      if (this.FNotifier === null) {
        this.FNotifier = $impl.TlistComponent.$create("Create$1",[null]);
        this.FNotifier.Flist = this;
      };
      if (pas.System.Assigned(Ptr)) {
        var $with1 = rtl.getObject(Ptr);
        var $tmp2 = Action;
        if ($tmp2 === pas.Classes.TListNotification.lnAdded) {
          $with1.FreeNotification(this.FNotifier)}
         else if (($tmp2 === pas.Classes.TListNotification.lnExtracted) || ($tmp2 === pas.Classes.TListNotification.lnDeleted)) $with1.RemoveFreeNotification(this.FNotifier);
      };
      $mod.TObjectList.Notify.call(this,Ptr,Action);
    };
    this.GetItems = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItems = function (Index, AComponent) {
      this.Put(Index,AComponent);
    };
    this.HandleFreeNotify = function (Sender, AComponent) {
      this.Extract$2(AComponent);
      if (Sender === null) ;
    };
    this.Destroy = function () {
      pas.Classes.TList.Destroy.apply(this,arguments);
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FNotifier;
        }, set: function (v) {
          this.p.FNotifier = v;
        }});
    };
    this.Add$2 = function (AComponent) {
      var Result = 0;
      Result = $mod.TObjectList.Add$1.call(this,AComponent);
      return Result;
    };
    this.Extract$2 = function (Item) {
      var Result = null;
      Result = $mod.TObjectList.Extract$1.call(this,Item);
      return Result;
    };
    this.Remove$2 = function (AComponent) {
      var Result = 0;
      Result = $mod.TObjectList.Remove$1.call(this,AComponent);
      return Result;
    };
    this.IndexOf$2 = function (AComponent) {
      var Result = 0;
      Result = $mod.TObjectList.IndexOf$1.call(this,AComponent);
      return Result;
    };
    this.First$2 = function () {
      var Result = null;
      Result = $mod.TObjectList.First$1.call(this);
      return Result;
    };
    this.Last$2 = function () {
      var Result = null;
      Result = $mod.TObjectList.Last$1.call(this);
      return Result;
    };
    this.Insert$2 = function (Index, AComponent) {
      $mod.TObjectList.Insert$1.call(this,Index,AComponent);
    };
  });
  rtl.createClass($mod,"TClassList",pas.Classes.TList,function () {
    this.GetItems = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.Get(Index));
      return Result;
    };
    this.SetItems = function (Index, AClass) {
      this.Put(Index,AClass);
    };
    this.Add$1 = function (AClass) {
      var Result = 0;
      Result = pas.Classes.TList.Add.call(this,AClass);
      return Result;
    };
    this.Extract$1 = function (Item) {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Extract.call(this,Item));
      return Result;
    };
    this.Remove$1 = function (AClass) {
      var Result = 0;
      Result = pas.Classes.TList.Remove.call(this,AClass);
      return Result;
    };
    this.IndexOf$1 = function (AClass) {
      var Result = 0;
      Result = pas.Classes.TList.IndexOf.call(this,AClass);
      return Result;
    };
    this.First$1 = function () {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.First.call(this));
      return Result;
    };
    this.Last$1 = function () {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Last.call(this));
      return Result;
    };
    this.Insert$1 = function (Index, AClass) {
      pas.Classes.TList.Insert.call(this,Index,AClass);
    };
  });
  rtl.createClass($mod,"TOrderedList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = null;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.PopItem = function () {
      var Result = undefined;
      var $with1 = this.FList;
      if ($with1.GetCount() > 0) {
        Result = $with1.Get($with1.GetCount() - 1);
        $with1.Delete($with1.GetCount() - 1);
      } else Result = null;
      return Result;
    };
    this.PeekItem = function () {
      var Result = undefined;
      var $with1 = this.FList;
      Result = $with1.Get($with1.GetCount() - 1);
      return Result;
    };
    this.Create$1 = function () {
      this.FList = pas.Classes.TList.$create("Create$1");
    };
    this.Destroy = function () {
      rtl.free(this,"FList");
    };
    this.Count = function () {
      var Result = 0;
      Result = this.FList.GetCount();
      return Result;
    };
    this.AtLeast = function (ACount) {
      var Result = false;
      Result = this.FList.GetCount() >= ACount;
      return Result;
    };
    this.Push = function (AItem) {
      var Result = undefined;
      this.PushItem(AItem);
      Result = AItem;
      return Result;
    };
    this.Pop = function () {
      var Result = undefined;
      if (this.AtLeast(1)) {
        Result = this.PopItem()}
       else Result = null;
      return Result;
    };
    this.Peek = function () {
      var Result = undefined;
      if (this.AtLeast(1)) {
        Result = this.PeekItem()}
       else Result = null;
      return Result;
    };
  });
  rtl.createClass($mod,"TStack",$mod.TOrderedList,function () {
    this.PushItem = function (AItem) {
      this.FList.Add(AItem);
    };
  });
  rtl.createClass($mod,"TObjectStack",$mod.TStack,function () {
    this.Push$1 = function (AObject) {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Push.call(this,rtl.getObject(AObject)));
      return Result;
    };
    this.Pop$1 = function () {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Pop.call(this));
      return Result;
    };
    this.Peek$1 = function () {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Peek.call(this));
      return Result;
    };
  });
  rtl.createClass($mod,"TQueue",$mod.TOrderedList,function () {
    this.PushItem = function (AItem) {
      var $with1 = this.FList;
      $with1.Insert(0,AItem);
    };
  });
  rtl.createClass($mod,"TObjectQueue",$mod.TQueue,function () {
    this.Push$1 = function (AObject) {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Push.call(this,rtl.getObject(AObject)));
      return Result;
    };
    this.Pop$1 = function () {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Pop.call(this));
      return Result;
    };
    this.Peek$1 = function () {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Peek.call(this));
      return Result;
    };
  });
  $mod.$rtti.$ProcVar("THashFunction",{procsig: rtl.newTIProcSig([["S",rtl.string,2],["TableSize",rtl.longword,2]],rtl.longword)});
  rtl.createClass($mod,"THTCustomNode",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FKey = "";
    };
    this.CreateWith = function (AString) {
      pas.System.TObject.Create.call(this);
      this.FKey = AString;
    };
    this.HasKey = function (AKey) {
      var Result = false;
      Result = AKey === this.FKey;
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("THTCustomNodeClass",{instancetype: $mod.$rtti["THTCustomNode"]});
  rtl.createClass($mod,"TFPCustomHashTable",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FHashTable = null;
      this.FHashFunction = null;
      this.FCount = 0;
      this.FHashTableSize = 0;
    };
    this.$final = function () {
      this.FHashTable = undefined;
      this.FHashFunction = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetDensity = function () {
      var Result = 0;
      Result = this.FHashTableSize - this.GetVoidSlots();
      return Result;
    };
    this.GetNumberOfCollisions = function () {
      var Result = 0;
      Result = this.FCount - (this.FHashTableSize - this.GetVoidSlots());
      return Result;
    };
    this.SetHashTableSize = function (Value) {
      var i = 0;
      var newSize = 0;
      if (Value !== this.FHashTableSize) {
        i = 0;
        while (($impl.PRIMELIST[i] < Value) && (i < 27)) i += 1;
        newSize = $impl.PRIMELIST[i];
        if (this.FCount === 0) {
          this.FHashTableSize = newSize;
          this.InitializeHashTable();
        } else this.ChangeTableSize(newSize);
      };
    };
    this.InitializeHashTable = function () {
      var i = 0;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.FHashTable.Add(null);
      };
      this.FCount = 0;
    };
    this.GetVoidSlots = function () {
      var Result = 0;
      var i = 0;
      var num = 0;
      num = 0;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (!(this.Chain(i) != null)) num += 1;
      };
      Result = num;
      return Result;
    };
    this.GetLoadFactor = function () {
      var Result = 0.0;
      Result = this.FCount / this.FHashTableSize;
      return Result;
    };
    this.GetAVGChainLen = function () {
      var Result = 0.0;
      Result = this.FCount / (this.FHashTableSize - this.GetVoidSlots());
      return Result;
    };
    this.GetMaxChainLength = function () {
      var Result = 0;
      var i = 0;
      Result = 0;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.ChainLength(i) > Result) Result = this.ChainLength(i);
      };
      return Result;
    };
    this.Chain = function (index) {
      var Result = null;
      Result = this.FHashTable.GetItem(index);
      return Result;
    };
    this.ChainLength = function (ChainIndex) {
      var Result = 0;
      if (this.Chain(ChainIndex) != null) {
        Result = this.Chain(ChainIndex).GetCount()}
       else Result = 0;
      return Result;
    };
    this.FindOrCreateNew = function (aKey) {
      var Result = null;
      var hashCode = 0;
      var chn = null;
      var i = 0;
      hashCode = this.FHashFunction(aKey,this.FHashTableSize);
      chn = this.Chain(hashCode);
      if (chn != null) {
        if (chn.GetCount() > 0) for (var $l1 = 0, $end2 = chn.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (chn.GetItem(i).FKey === aKey) return chn.GetItem(i);
        };
      } else {
        this.FHashTable.SetItem(hashCode,$mod.TFPObjectList.$create("Create$2",[true]));
        chn = this.Chain(hashCode);
      };
      this.FCount += 1;
      Result = this.CreateNewNode(aKey);
      chn.Add(Result);
      return Result;
    };
    this.SetHashFunction = function (AHashFunction) {
      if (this.IsEmpty()) {
        this.FHashFunction = AHashFunction}
       else throw pas.SysUtils.Exception.$create("Create$1",[rtl.getResStr(pas.contnrs,"NotEmptyMsg")]);
    };
    this.FindChainForAdd = function (aKey) {
      var Result = null;
      var hashCode = 0;
      var i = 0;
      hashCode = this.FHashFunction(aKey,this.FHashTableSize);
      Result = this.Chain(hashCode);
      if (Result != null) {
        if (Result.GetCount() > 0) for (var $l1 = 0, $end2 = Result.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (Result.GetItem(i).FKey === aKey) throw $mod.EDuplicate.$create("CreateFmt",[rtl.getResStr(pas.contnrs,"DuplicateMsg"),[aKey]]);
        };
      } else {
        this.FHashTable.SetItem(hashCode,$mod.TFPObjectList.$create("Create$2",[true]));
        Result = this.Chain(hashCode);
      };
      this.FCount += 1;
      return Result;
    };
    this.Create$1 = function () {
      this.CreateWith(196613,$mod.RSHash);
    };
    this.CreateWith = function (AHashTableSize, aHashFunc) {
      pas.System.TObject.Create.call(this);
      this.FHashTable = $mod.TFPObjectList.$create("Create$2",[true]);
      this.SetHashTableSize(AHashTableSize);
      this.FHashFunction = aHashFunc;
    };
    this.Destroy = function () {
      rtl.free(this,"FHashTable");
      pas.System.TObject.Destroy.call(this);
    };
    this.ChangeTableSize = function (ANewSize) {
      var SavedTable = null;
      var List = null;
      var SavedTableSize = 0;
      var i = 0;
      var j = 0;
      var temp = null;
      SavedTable = this.FHashTable;
      SavedTableSize = this.FHashTableSize;
      this.FHashTableSize = ANewSize;
      this.FHashTable = $mod.TFPObjectList.$create("Create$2",[true]);
      this.InitializeHashTable();
      if (SavedTableSize > 0) for (var $l1 = 0, $end2 = SavedTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        List = SavedTable.GetItem(i);
        if (List != null) for (var $l3 = 0, $end4 = List.GetCount() - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          temp = List.GetItem(j);
          this.AddNode(temp);
        };
      };
      SavedTable = rtl.freeLoc(SavedTable);
    };
    this.Clear = function () {
      var i = 0;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.Chain(i) != null) this.Chain(i).Clear();
      };
      this.FCount = 0;
    };
    this.Delete = function (aKey) {
      var hashCode = 0;
      var chn = null;
      var i = 0;
      hashCode = this.FHashFunction(aKey,this.FHashTableSize);
      chn = this.Chain(hashCode);
      if (chn != null) if (chn.GetCount() > 0) for (var $l1 = 0, $end2 = chn.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (chn.GetItem(i).FKey === aKey) {
          chn.Delete(i);
          this.FCount -= 1;
          return;
        };
      };
    };
    this.Find = function (aKey) {
      var Result = null;
      var hashCode = 0;
      var chn = null;
      var i = 0;
      hashCode = this.FHashFunction(aKey,this.FHashTableSize);
      chn = this.Chain(hashCode);
      if (chn != null) if (chn.GetCount() > 0) for (var $l1 = 0, $end2 = chn.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (chn.GetItem(i).FKey === aKey) return chn.GetItem(i);
      };
      Result = null;
      return Result;
    };
    this.IsEmpty = function () {
      var Result = false;
      Result = this.FCount === 0;
      return Result;
    };
  });
  rtl.createClass($mod,"THTDataNode",$mod.THTCustomNode,function () {
    this.$init = function () {
      $mod.THTCustomNode.$init.call(this);
      this.FData = undefined;
    };
  });
  $mod.$rtti.$MethodVar("TDataIteratorMethod",{procsig: rtl.newTIProcSig([["Item",rtl.jsvalue],["Key",rtl.string,2],["Continue",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TDataIteratorCallBack",{procsig: rtl.newTIProcSig([["Item",rtl.jsvalue],["Key",rtl.string,2],["Continue",rtl.boolean,1]])});
  rtl.createClass($mod,"TFPDataHashTable",$mod.TFPCustomHashTable,function () {
    this.$init = function () {
      $mod.TFPCustomHashTable.$init.call(this);
      this.FIteratorCallBack = null;
    };
    this.$final = function () {
      this.FIteratorCallBack = undefined;
      $mod.TFPCustomHashTable.$final.call(this);
    };
    this.CallbackIterator = function (Item, Key, Continue) {
      this.FIteratorCallBack(Item,Key,Continue);
    };
    this.CreateNewNode = function (aKey) {
      var Result = null;
      Result = $mod.THTDataNode.$create("CreateWith",[aKey]);
      return Result;
    };
    this.AddNode = function (ANode) {
      this.Add(ANode.FKey,ANode.FData);
    };
    this.SetData = function (index, AValue) {
      this.FindOrCreateNew(index).FData = AValue;
    };
    this.GetData = function (index) {
      var Result = undefined;
      var node = null;
      node = this.Find(index);
      if (node != null) {
        Result = node.FData}
       else Result = null;
      return Result;
    };
    this.ForEachCall = function (aMethod) {
      var Result = null;
      var i = 0;
      var j = 0;
      var Continue = false;
      Result = null;
      Continue = true;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.Chain(i) != null) if (this.Chain(i).GetCount() > 0) for (var $l3 = 0, $end4 = this.Chain(i).GetCount() - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          aMethod(this.Chain(i).GetItem(j).FData,this.Chain(i).GetItem(j).FKey,{get: function () {
              return Continue;
            }, set: function (v) {
              Continue = v;
            }});
          if (!Continue) {
            Result = this.Chain(i).GetItem(j);
            return Result;
          };
        };
      };
      return Result;
    };
    this.Iterate = function (aMethod) {
      var Result = undefined;
      var N = null;
      N = this.ForEachCall(aMethod);
      if (N != null) {
        Result = N.FData}
       else Result = null;
      return Result;
    };
    this.Iterate$1 = function (aMethod) {
      var Result = undefined;
      this.FIteratorCallBack = aMethod;
      Result = this.Iterate(rtl.createCallback(this,"CallbackIterator"));
      return Result;
    };
    this.Add = function (aKey, AItem) {
      var chn = null;
      var NewNode = null;
      chn = this.FindChainForAdd(aKey);
      NewNode = this.CreateNewNode(aKey);
      NewNode.FData = AItem;
      chn.Add(NewNode);
    };
  });
  rtl.createClass($mod,"THTStringNode",$mod.THTCustomNode,function () {
    this.$init = function () {
      $mod.THTCustomNode.$init.call(this);
      this.FData = "";
    };
  });
  $mod.$rtti.$MethodVar("TStringIteratorMethod",{procsig: rtl.newTIProcSig([["Item",rtl.string],["Key",rtl.string,2],["Continue",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TStringIteratorCallback",{procsig: rtl.newTIProcSig([["Item",rtl.string],["Key",rtl.string,2],["Continue",rtl.boolean,1]])});
  rtl.createClass($mod,"TFPStringHashTable",$mod.TFPCustomHashTable,function () {
    this.$init = function () {
      $mod.TFPCustomHashTable.$init.call(this);
      this.FIteratorCallBack = null;
    };
    this.$final = function () {
      this.FIteratorCallBack = undefined;
      $mod.TFPCustomHashTable.$final.call(this);
    };
    this.CallbackIterator = function (Item, Key, Continue) {
      this.FIteratorCallBack(Item,Key,Continue);
    };
    this.CreateNewNode = function (aKey) {
      var Result = null;
      Result = $mod.THTStringNode.$create("CreateWith",[aKey]);
      return Result;
    };
    this.AddNode = function (ANode) {
      this.Add(ANode.FKey,ANode.FData);
    };
    this.SetData = function (Index, AValue) {
      this.FindOrCreateNew(Index).FData = AValue;
    };
    this.GetData = function (index) {
      var Result = "";
      var node = null;
      node = this.Find(index);
      if (node != null) {
        Result = node.FData}
       else Result = "";
      return Result;
    };
    this.ForEachCall = function (aMethod) {
      var Result = null;
      var i = 0;
      var j = 0;
      var Continue = false;
      Result = null;
      Continue = true;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.Chain(i) != null) if (this.Chain(i).GetCount() > 0) for (var $l3 = 0, $end4 = this.Chain(i).GetCount() - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          aMethod(this.Chain(i).GetItem(j).FData,this.Chain(i).GetItem(j).FKey,{get: function () {
              return Continue;
            }, set: function (v) {
              Continue = v;
            }});
          if (!Continue) {
            Result = this.Chain(i).GetItem(j);
            return Result;
          };
        };
      };
      return Result;
    };
    this.Iterate = function (aMethod) {
      var Result = "";
      var N = null;
      N = this.ForEachCall(aMethod);
      if (N != null) {
        Result = N.FData}
       else Result = "";
      return Result;
    };
    this.Iterate$1 = function (aMethod) {
      var Result = "";
      this.FIteratorCallBack = aMethod;
      Result = this.Iterate(rtl.createCallback(this,"CallbackIterator"));
      return Result;
    };
    this.Add = function (aKey, aItem) {
      var chn = null;
      var NewNode = null;
      chn = this.FindChainForAdd(aKey);
      NewNode = this.CreateNewNode(aKey);
      NewNode.FData = aItem;
      chn.Add(NewNode);
    };
  });
  rtl.createClass($mod,"THTObjectNode",$mod.THTCustomNode,function () {
    this.$init = function () {
      $mod.THTCustomNode.$init.call(this);
      this.FData = null;
    };
    this.$final = function () {
      this.FData = undefined;
      $mod.THTCustomNode.$final.call(this);
    };
  });
  rtl.createClass($mod,"THTOwnedObjectNode",$mod.THTObjectNode,function () {
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FData;
        }, set: function (v) {
          this.p.FData = v;
        }});
      pas.System.TObject.Destroy.apply(this,arguments);
    };
  });
  $mod.$rtti.$MethodVar("TObjectIteratorMethod",{procsig: rtl.newTIProcSig([["Item",pas.System.$rtti["TObject"]],["Key",rtl.string,2],["Continue",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TObjectIteratorCallback",{procsig: rtl.newTIProcSig([["Item",pas.System.$rtti["TObject"]],["Key",rtl.string,2],["Continue",rtl.boolean,1]])});
  rtl.createClass($mod,"TFPObjectHashTable",$mod.TFPCustomHashTable,function () {
    this.$init = function () {
      $mod.TFPCustomHashTable.$init.call(this);
      this.FOwnsObjects = false;
      this.FIteratorCallBack = null;
    };
    this.$final = function () {
      this.FIteratorCallBack = undefined;
      $mod.TFPCustomHashTable.$final.call(this);
    };
    this.CallbackIterator = function (Item, Key, Continue) {
      this.FIteratorCallBack(Item,Key,Continue);
    };
    this.CreateNewNode = function (aKey) {
      var Result = null;
      if (this.FOwnsObjects) {
        Result = $mod.THTOwnedObjectNode.$create("CreateWith",[aKey])}
       else Result = $mod.THTObjectNode.$create("CreateWith",[aKey]);
      return Result;
    };
    this.AddNode = function (ANode) {
      this.Add(ANode.FKey,ANode.FData);
    };
    this.SetData = function (Index, AObject) {
      this.FindOrCreateNew(Index).FData = AObject;
    };
    this.GetData = function (index) {
      var Result = null;
      var node = null;
      node = this.Find(index);
      if (node != null) {
        Result = node.FData}
       else Result = null;
      return Result;
    };
    this.ForEachCall = function (aMethod) {
      var Result = null;
      var i = 0;
      var j = 0;
      var Continue = false;
      Result = null;
      Continue = true;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.Chain(i) != null) if (this.Chain(i).GetCount() > 0) for (var $l3 = 0, $end4 = this.Chain(i).GetCount() - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          aMethod(this.Chain(i).GetItem(j).FData,this.Chain(i).GetItem(j).FKey,{get: function () {
              return Continue;
            }, set: function (v) {
              Continue = v;
            }});
          if (!Continue) {
            Result = this.Chain(i).GetItem(j);
            return Result;
          };
        };
      };
      return Result;
    };
    this.Create$2 = function (AOwnsObjects) {
      $mod.TFPCustomHashTable.Create$1.call(this);
      this.FOwnsObjects = AOwnsObjects;
    };
    this.CreateWith$1 = function (AHashTableSize, aHashFunc, AOwnsObjects) {
      $mod.TFPCustomHashTable.CreateWith.call(this,AHashTableSize,aHashFunc);
      this.FOwnsObjects = AOwnsObjects;
    };
    this.Iterate = function (aMethod) {
      var Result = null;
      var N = null;
      N = this.ForEachCall(aMethod);
      if (N != null) {
        Result = N.FData}
       else Result = null;
      return Result;
    };
    this.Iterate$1 = function (aMethod) {
      var Result = null;
      this.FIteratorCallBack = aMethod;
      Result = this.Iterate(rtl.createCallback(this,"CallbackIterator"));
      return Result;
    };
    this.Add = function (aKey, AItem) {
      var chn = null;
      var NewNode = null;
      chn = this.FindChainForAdd(aKey);
      NewNode = this.CreateNewNode(aKey);
      NewNode.FData = AItem;
      chn.Add(NewNode);
    };
  });
  rtl.createClass($mod,"EDuplicate",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EKeyNotFound",pas.SysUtils.Exception,function () {
  });
  var b = 378551;
  this.RSHash = function (S, TableSize) {
    var Result = 0;
    var a = 0;
    var i = 0;
    a = 63689;
    Result = 0;
    if (S.length > 0) for (var $l1 = 1, $end2 = S.length; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = (Result * a) + S.charCodeAt(i - 1);
      a = a * 378551;
    };
    Result = (Result & 0x7FFFFFFF) % TableSize;
    return Result;
  };
  this.TBucketItem = function (s) {
    if (s) {
      this.Item = s.Item;
      this.Data = s.Data;
    } else {
      this.Item = undefined;
      this.Data = undefined;
    };
    this.$equal = function (b) {
      return (this.Item === b.Item) && (this.Data === b.Data);
    };
  };
  $mod.$rtti.$Record("TBucketItem",{}).addFields("Item",rtl.jsvalue,"Data",rtl.jsvalue);
  $mod.$rtti.$DynArray("TBucketItemArray",{eltype: $mod.$rtti["TBucketItem"]});
  this.TBucket = function (s) {
    if (s) {
      this.Count = s.Count;
      this.Items = s.Items;
    } else {
      this.Count = 0;
      this.Items = [];
    };
    this.$equal = function (b) {
      return (this.Count === b.Count) && (this.Items === b.Items);
    };
  };
  $mod.$rtti.$Record("TBucket",{}).addFields("Count",rtl.longint,"Items",$mod.$rtti["TBucketItemArray"]);
  $mod.$rtti.$DynArray("TBucketArray",{eltype: $mod.$rtti["TBucket"]});
  $mod.$rtti.$RefToProcVar("TBucketProc",{procsig: rtl.newTIProcSig([["AInfo",rtl.jsvalue],["AItem",rtl.jsvalue],["AData",rtl.jsvalue],["AContinue",rtl.boolean,4]])});
  rtl.createClass($mod,"TCustomBucketList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FBuckets = [];
    };
    this.$final = function () {
      this.FBuckets = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetBucketCount = function () {
      var Result = 0;
      Result = rtl.length(this.FBuckets);
      return Result;
    };
    this.GetData = function (AItem) {
      var Result = undefined;
      var B = 0;
      var I = 0;
      this.GetBucketItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }});
      Result = this.FBuckets[B].Items[I].Data;
      return Result;
    };
    this.SetData = function (AItem, AData) {
      var B = 0;
      var I = 0;
      this.GetBucketItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }});
      this.FBuckets[B].Items[I].Data = AData;
    };
    this.SetBucketCount = function (Value) {
      if (Value !== this.GetBucketCount()) this.FBuckets = rtl.arraySetLength(this.FBuckets,$mod.TBucket,Value);
    };
    this.GetBucketItem = function (AItem, ABucket, AIndex) {
      if (!this.FindItem(AItem,ABucket,AIndex)) this.Error(rtl.getResStr(pas.contnrs,"SErrNoSuchItem"),[AItem]);
    };
    this.AddItem = function (ABucket, AItem, AData) {
      var Result = undefined;
      var L = 0;
      L = rtl.length(this.FBuckets[ABucket].Items);
      if (this.FBuckets[ABucket].Count === L) {
        if (L < 8) {
          L = 8}
         else L = L + Math.floor(L / 2);
        this.FBuckets[ABucket].Items = rtl.arraySetLength(this.FBuckets[ABucket].Items,$mod.TBucketItem,L);
      };
      var $with1 = this.FBuckets[ABucket];
      $with1.Items[$with1.Count].Item = AItem;
      $with1.Items[$with1.Count].Data = AData;
      Result = AData;
      $with1.Count += 1;
      return Result;
    };
    this.DeleteItem = function (ABucket, AIndex) {
      var Result = undefined;
      var I = 0;
      var L = 0;
      Result = this.FBuckets[ABucket].Items[AIndex].Data;
      if (this.FBuckets[ABucket].Count === 1) {
        this.FBuckets[ABucket].Items = rtl.arraySetLength(this.FBuckets[ABucket].Items,$mod.TBucketItem,0)}
       else {
        L = (this.FBuckets[ABucket].Count - AIndex) - 1;
        for (var $l1 = 0, $end2 = L - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          this.FBuckets[ABucket].Items[AIndex + I] = new $mod.TBucketItem(this.FBuckets[ABucket].Items[(AIndex + I) + 1]);
        };
      };
      this.FBuckets[ABucket].Count -= 1;
      return Result;
    };
    this.Error = function (Msg, Args) {
      throw pas.Classes.EListError.$create("CreateFmt",[Msg,Args]);
    };
    this.FindItem = function (AItem, ABucket, AIndex) {
      var Result = false;
      var I = 0;
      var B = new $mod.TBucket();
      ABucket.set(this.BucketFor(AItem));
      B = new $mod.TBucket(this.FBuckets[ABucket.get()]);
      I = B.Count - 1;
      while ((I >= 0) && (B.Items[I].Item != AItem)) I -= 1;
      Result = I >= 0;
      if (Result) AIndex.set(I);
      return Result;
    };
    this.Destroy = function () {
      this.Clear();
      pas.System.TObject.Destroy.call(this);
    };
    this.Clear = function () {
      var B = new $mod.TBucket();
      var I = 0;
      var J = 0;
      for (var $l1 = 0, $end2 = rtl.length(this.FBuckets) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        B = new $mod.TBucket(this.FBuckets[I]);
        for (var $l3 = B.Count - 1; $l3 >= 0; $l3--) {
          J = $l3;
          this.DeleteItem(I,J);
        };
      };
      this.FBuckets = rtl.arraySetLength(this.FBuckets,$mod.TBucket,0);
    };
    this.Add = function (AItem, AData) {
      var Result = undefined;
      var B = 0;
      var I = 0;
      if (this.FindItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }})) this.Error(rtl.getResStr(pas.contnrs,"SDuplicateItem"),[AItem]);
      Result = this.AddItem(B,AItem,AData);
      return Result;
    };
    this.Assign = function (AList) {
      var I = 0;
      var J = 0;
      this.Clear();
      this.FBuckets = rtl.arraySetLength(this.FBuckets,$mod.TBucket,rtl.length(AList.FBuckets));
      for (var $l1 = 0, $end2 = this.GetBucketCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.FBuckets[I].Items = rtl.arraySetLength(this.FBuckets[I].Items,$mod.TBucketItem,rtl.length(AList.FBuckets[I].Items));
        for (var $l3 = 0, $end4 = AList.FBuckets[I].Count - 1; $l3 <= $end4; $l3++) {
          J = $l3;
          var $with5 = AList.FBuckets[I].Items[J];
          this.AddItem(I,$with5.Item,$with5.Data);
        };
      };
    };
    this.Exists = function (AItem) {
      var Result = false;
      var B = 0;
      var I = 0;
      Result = this.FindItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }});
      return Result;
    };
    this.Find = function (AItem, AData) {
      var Result = false;
      var B = 0;
      var I = 0;
      Result = this.FindItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }});
      if (Result) AData.set(this.FBuckets[B].Items[I].Data);
      return Result;
    };
    this.ForEach = function (AProc, AInfo) {
      var Result = false;
      var I = 0;
      var J = 0;
      var S = 0;
      var Bu = new $mod.TBucket();
      I = 0;
      Result = true;
      S = this.GetBucketCount();
      while (Result && (I < S)) {
        J = 0;
        Bu = new $mod.TBucket(this.FBuckets[I]);
        while (Result && (J < Bu.Count)) {
          var $with1 = Bu.Items[J];
          AProc(AInfo,$with1.Item,$with1.Data,{get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }});
          J += 1;
        };
        I += 1;
      };
      return Result;
    };
    this.ForEach$1 = function (AProc) {
      var Result = false;
      Result = this.ForEach(AProc,null);
      return Result;
    };
    this.Remove = function (AItem) {
      var Result = undefined;
      var B = 0;
      var I = 0;
      if (this.FindItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }})) {
        Result = this.FBuckets[B].Items[I].Data;
        this.DeleteItem(B,I);
      } else Result = null;
      return Result;
    };
  });
  this.TBucketListSizes = {"0": "bl2", bl2: 0, "1": "bl4", bl4: 1, "2": "bl8", bl8: 2, "3": "bl16", bl16: 3, "4": "bl32", bl32: 4, "5": "bl64", bl64: 5, "6": "bl128", bl128: 6, "7": "bl256", bl256: 7};
  $mod.$rtti.$Enum("TBucketListSizes",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TBucketListSizes});
  rtl.createClass($mod,"TBucketList",$mod.TCustomBucketList,function () {
    this.$init = function () {
      $mod.TCustomBucketList.$init.call(this);
      this.FBucketMask = 0;
    };
    this.BucketFor = function (AItem) {
      var Result = 0;
      Result = (Math.floor(AItem) >>> 2) & this.FBucketMask;
      return Result;
    };
    this.Create$1 = function (ABuckets) {
      var L = 0;
      pas.System.TObject.Create.call(this);
      L = 1 << (ABuckets + 1);
      this.SetBucketCount(L);
      this.FBucketMask = L - 1;
    };
  });
  rtl.createClass($mod,"TObjectBucketList",$mod.TBucketList,function () {
    this.GetData$1 = function (AItem) {
      var Result = null;
      Result = rtl.getObject($mod.TCustomBucketList.GetData.call(this,AItem));
      return Result;
    };
    this.SetData$1 = function (AItem, AData) {
      $mod.TCustomBucketList.SetData.call(this,rtl.getObject(AItem),rtl.getObject(AData));
    };
    this.Add$1 = function (AItem, AData) {
      var Result = null;
      Result = rtl.getObject($mod.TCustomBucketList.Add.call(this,rtl.getObject(AItem),rtl.getObject(AData)));
      return Result;
    };
    this.Remove$1 = function (AItem) {
      var Result = null;
      Result = rtl.getObject($mod.TCustomBucketList.Remove.call(this,rtl.getObject(AItem)));
      return Result;
    };
  });
},["JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.NPRIMES = 28;
  $impl.PRIMELIST = [53,97,193,389,769,1543,3079,6151,12289,24593,49157,98317,196613,393241,786433,1572869,3145739,6291469,12582917,25165843,50331653,100663319,201326611,402653189,805306457,1610612741,3221225473,4294967291];
  rtl.createClass($impl,"TlistComponent",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.Flist = null;
    };
    this.$final = function () {
      this.Flist = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.Notification = function (AComponent, Operation) {
      if (Operation === pas.Classes.TOperation.opRemove) this.Flist.HandleFreeNotify(this,AComponent);
      pas.Classes.TComponent.Notification.apply(this,arguments);
    };
  });
  $mod.$resourcestrings = {DuplicateMsg: {org: "An item with key %0:s already exists"}, NotEmptyMsg: {org: "Hash table not empty."}, SErrNoSuchItem: {org: "No item in list for %p"}, SDuplicateItem: {org: "Item already exists in list: %p"}};
});
rtl.module("fpjson",["System","JS","RTLConsts","Types","SysUtils","Classes","contnrs"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TJSONtype = {"0": "jtUnknown", jtUnknown: 0, "1": "jtNumber", jtNumber: 1, "2": "jtString", jtString: 2, "3": "jtBoolean", jtBoolean: 3, "4": "jtNull", jtNull: 4, "5": "jtArray", jtArray: 5, "6": "jtObject", jtObject: 6};
  $mod.$rtti.$Enum("TJSONtype",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TJSONtype});
  this.TJSONInstanceType = {"0": "jitUnknown", jitUnknown: 0, "1": "jitNumberInteger", jitNumberInteger: 1, "2": "jitNumberFloat", jitNumberFloat: 2, "3": "jitString", jitString: 3, "4": "jitBoolean", jitBoolean: 4, "5": "jitNull", jitNull: 5, "6": "jitArray", jitArray: 6, "7": "jitObject", jitObject: 7};
  $mod.$rtti.$Enum("TJSONInstanceType",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TJSONInstanceType});
  this.TFormatOption = {"0": "foSingleLineArray", foSingleLineArray: 0, "1": "foSingleLineObject", foSingleLineObject: 1, "2": "foDoNotQuoteMembers", foDoNotQuoteMembers: 2, "3": "foUseTabchar", foUseTabchar: 3, "4": "foSkipWhiteSpace", foSkipWhiteSpace: 4, "5": "foSkipWhiteSpaceOnlyLeading", foSkipWhiteSpaceOnlyLeading: 5};
  $mod.$rtti.$Enum("TFormatOption",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TFormatOption});
  $mod.$rtti.$Set("TFormatOptions",{comptype: $mod.$rtti["TFormatOption"]});
  this.DefaultIndentSize = 2;
  this.DefaultFormat = {};
  this.AsJSONFormat = rtl.createSet($mod.TFormatOption.foSingleLineArray,$mod.TFormatOption.foSingleLineObject);
  this.AsCompressedJSON = rtl.createSet($mod.TFormatOption.foSingleLineArray,$mod.TFormatOption.foSingleLineObject,$mod.TFormatOption.foSkipWhiteSpace);
  this.AsCompactJSON = rtl.createSet($mod.TFormatOption.foSingleLineArray,$mod.TFormatOption.foSingleLineObject,$mod.TFormatOption.foSkipWhiteSpace,$mod.TFormatOption.foDoNotQuoteMembers);
  this.ValueJSONTypes = rtl.createSet($mod.TJSONtype.jtNumber,$mod.TJSONtype.jtString,$mod.TJSONtype.jtBoolean,$mod.TJSONtype.jtNull);
  this.ActualValueJSONTypes = rtl.diffSet($mod.ValueJSONTypes,rtl.createSet($mod.TJSONtype.jtNull));
  this.StructuredJSONTypes = rtl.createSet($mod.TJSONtype.jtArray,$mod.TJSONtype.jtObject);
  $mod.$rtti.$Class("TJSONData");
  this.TJSONEnum = function (s) {
    if (s) {
      this.Key = s.Key;
      this.KeyNum = s.KeyNum;
      this.Value = s.Value;
    } else {
      this.Key = "";
      this.KeyNum = 0;
      this.Value = null;
    };
    this.$equal = function (b) {
      return (this.Key === b.Key) && ((this.KeyNum === b.KeyNum) && (this.Value === b.Value));
    };
  };
  $mod.$rtti.$Record("TJSONEnum",{}).addFields("Key",rtl.string,"KeyNum",rtl.longint,"Value",$mod.$rtti["TJSONData"]);
  rtl.createClass($mod,"TBaseJSONEnumerator",pas.System.TObject,function () {
  });
  rtl.createClass($mod,"TJSONData",pas.System.TObject,function () {
    this.ElementSeps = [", ",","];
    this.FCompressedJSON = false;
    this.FElementSep = "";
    this.DetermineElementSeparators = function () {
      $mod.TJSONData.FElementSep = this.ElementSeps[+this.FCompressedJSON];
    };
    this.GetCompressedJSON = function () {
      var Result = false;
      Result = this.FCompressedJSON;
      return Result;
    };
    this.SetCompressedJSON = function (AValue) {
      if (AValue === this.FCompressedJSON) return;
      $mod.TJSONData.FCompressedJSON = AValue;
      this.DetermineElementSeparators();
      $mod.TJSONObject.DetermineElementQuotes();
    };
    this.DoError = function (Msg) {
      throw $mod.EJSON.$create("Create$1",[Msg]);
    };
    this.DoError$1 = function (Fmt, Args) {
      throw $mod.EJSON.$create("CreateFmt",[Fmt,Args]);
    };
    this.DoFindPath = function (APath, NotFound) {
      var Result = null;
      if (APath !== "") {
        NotFound.set(APath);
        Result = null;
      } else Result = this;
      return Result;
    };
    this.GetIsNull = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = null;
      if (Index > 0) ;
      return Result;
    };
    this.SetItem = function (Index, AValue) {
      if (Index > 0) ;
      if (AValue !== null) ;
    };
    this.DoFormatJSON = function (Options, CurrentIndent, Indent) {
      var Result = "";
      Result = this.GetAsJSON();
      if (rtl.eqSet(Options,{})) ;
      if (CurrentIndent === 0) ;
      if (Indent > 0) ;
      return Result;
    };
    this.GetCount = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.JSONType = function () {
      var Result = 0;
      Result = $mod.TJSONtype.jtUnknown;
      return Result;
    };
    this.Create$1 = function () {
      this.Clear();
    };
    this.DumpJSON = function (S) {
      var Self = this;
      function W(T) {
        if (T === "") return;
        S.push(T);
      };
      var I = 0;
      var O = null;
      var $tmp1 = Self.$class.JSONType();
      if ($tmp1 === $mod.TJSONtype.jtObject) {
        O = Self;
        W("{");
        for (var $l2 = 0, $end3 = O.GetCount() - 1; $l2 <= $end3; $l2++) {
          I = $l2;
          if (I > 0) W(",");
          W('"');
          W($mod.StringToJSONString(O.GetNameOf(I),false));
          W('":');
          O.GetItem(I).DumpJSON(S);
        };
        W("}");
      } else if ($tmp1 === $mod.TJSONtype.jtArray) {
        W("[");
        for (var $l4 = 0, $end5 = Self.GetCount() - 1; $l4 <= $end5; $l4++) {
          I = $l4;
          if (I > 0) W(",");
          Self.GetItem(I).DumpJSON(S);
        };
        W("]");
      } else {
        W(Self.GetAsJSON());
      };
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $impl.TJSONEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.FindPath = function (APath) {
      var Result = null;
      var M = "";
      Result = this.DoFindPath(APath,{get: function () {
          return M;
        }, set: function (v) {
          M = v;
        }});
      return Result;
    };
    this.GetPath = function (APath) {
      var Result = null;
      var M = "";
      Result = this.DoFindPath(APath,{get: function () {
          return M;
        }, set: function (v) {
          M = v;
        }});
      if (Result === null) this.$class.DoError$1(rtl.getResStr(pas.fpjson,"SErrPathElementNotFound"),[APath,M]);
      return Result;
    };
    this.FormatJSON = function (Options, Indentsize) {
      var Result = "";
      Result = this.DoFormatJSON(rtl.refSet(Options),0,Indentsize);
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("TJSONDataClass",{instancetype: $mod.$rtti["TJSONData"]});
  this.TJSONNumberType = {"0": "ntFloat", ntFloat: 0, "1": "ntInteger", ntInteger: 1};
  $mod.$rtti.$Enum("TJSONNumberType",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TJSONNumberType});
  rtl.createClass($mod,"TJSONNumber",$mod.TJSONData,function () {
    this.JSONType = function () {
      var Result = 0;
      Result = $mod.TJSONtype.jtNumber;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONFloatNumber",$mod.TJSONNumber,function () {
    this.$init = function () {
      $mod.TJSONNumber.$init.call(this);
      this.FValue = 0.0;
    };
    this.GetAsBoolean = function () {
      var Result = false;
      Result = this.FValue !== 0;
      return Result;
    };
    this.GetAsFloat = function () {
      var Result = 0.0;
      Result = this.FValue;
      return Result;
    };
    this.GetAsInteger = function () {
      var Result = 0;
      Result = Math.round(this.FValue);
      return Result;
    };
    this.SetAsBoolean = function (AValue) {
      this.FValue = AValue + 0;
    };
    this.SetAsFloat = function (AValue) {
      this.FValue = AValue;
    };
    this.SetAsInteger = function (AValue) {
      this.FValue = AValue;
    };
    this.GetAsJSON = function () {
      var Result = "";
      Result = this.GetAsString();
      return Result;
    };
    this.GetAsString = function () {
      var Result = "";
      Result = rtl.floatToStr(this.FValue);
      if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},1,1);
      return Result;
    };
    this.SetAsString = function (AValue) {
      var C = 0;
      pas.System.val$8(AValue,{p: this, get: function () {
          return this.p.FValue;
        }, set: function (v) {
          this.p.FValue = v;
        }},{get: function () {
          return C;
        }, set: function (v) {
          C = v;
        }});
      if (C !== 0) throw pas.SysUtils.EConvertError.$create("CreateFmt",[rtl.getResStr(pas.fpjson,"SErrInvalidFloat"),[AValue]]);
    };
    this.GetValue = function () {
      var Result = undefined;
      Result = this.FValue;
      return Result;
    };
    this.SetValue = function (AValue) {
      this.FValue = rtl.getNumber(AValue);
    };
    this.Create$2 = function (AValue) {
      this.FValue = AValue;
    };
    this.NumberType = function () {
      var Result = 0;
      Result = $mod.TJSONNumberType.ntFloat;
      return Result;
    };
    this.Clear = function () {
      this.FValue = 0;
    };
    this.Clone = function () {
      var Result = null;
      Result = this.$class.ClassType().$create("Create$2",[this.FValue]);
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONIntegerNumber",$mod.TJSONNumber,function () {
    this.$init = function () {
      $mod.TJSONNumber.$init.call(this);
      this.FValue = 0;
    };
    this.GetAsBoolean = function () {
      var Result = false;
      Result = this.FValue !== 0;
      return Result;
    };
    this.GetAsFloat = function () {
      var Result = 0.0;
      Result = this.FValue;
      return Result;
    };
    this.GetAsInteger = function () {
      var Result = 0;
      Result = this.FValue;
      return Result;
    };
    this.SetAsBoolean = function (AValue) {
      this.FValue = AValue + 0;
    };
    this.SetAsFloat = function (AValue) {
      this.FValue = Math.round(AValue);
    };
    this.SetAsInteger = function (AValue) {
      this.FValue = AValue;
    };
    this.GetAsJSON = function () {
      var Result = "";
      Result = this.GetAsString();
      return Result;
    };
    this.GetAsString = function () {
      var Result = "";
      Result = pas.SysUtils.IntToStr(this.FValue);
      return Result;
    };
    this.SetAsString = function (AValue) {
      this.FValue = pas.SysUtils.StrToInt(AValue);
    };
    this.GetValue = function () {
      var Result = undefined;
      Result = this.FValue;
      return Result;
    };
    this.SetValue = function (AValue) {
      this.FValue = Math.floor(AValue);
    };
    this.Create$2 = function (AValue) {
      this.FValue = AValue;
    };
    this.NumberType = function () {
      var Result = 0;
      Result = $mod.TJSONNumberType.ntInteger;
      return Result;
    };
    this.Clear = function () {
      this.FValue = 0;
    };
    this.Clone = function () {
      var Result = null;
      Result = this.$class.ClassType().$create("Create$2",[this.FValue]);
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONString",$mod.TJSONData,function () {
    this.StrictEscaping = false;
    this.$init = function () {
      $mod.TJSONData.$init.call(this);
      this.FValue = "";
    };
    this.GetValue = function () {
      var Result = undefined;
      Result = this.FValue;
      return Result;
    };
    this.SetValue = function (AValue) {
      this.FValue = "" + AValue;
    };
    this.GetAsBoolean = function () {
      var Result = false;
      Result = pas.SysUtils.StrToBool(this.FValue);
      return Result;
    };
    this.GetAsFloat = function () {
      var Result = 0.0;
      var C = 0;
      pas.System.val$8(this.FValue,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},{get: function () {
          return C;
        }, set: function (v) {
          C = v;
        }});
      if (C !== 0) if (!pas.SysUtils.TryStrToFloat(this.FValue,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }})) throw pas.SysUtils.EConvertError.$create("CreateFmt",[rtl.getResStr(pas.fpjson,"SErrInvalidFloat"),[this.FValue]]);
      return Result;
    };
    this.GetAsInteger = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.FValue);
      return Result;
    };
    this.SetAsBoolean = function (AValue) {
      this.FValue = pas.SysUtils.BoolToStr(AValue,false);
    };
    this.SetAsFloat = function (AValue) {
      this.FValue = pas.SysUtils.FloatToStr(AValue);
    };
    this.SetAsInteger = function (AValue) {
      this.FValue = pas.SysUtils.IntToStr(AValue);
    };
    this.GetAsJSON = function () {
      var Result = "";
      Result = ('"' + $mod.StringToJSONString(this.FValue,this.StrictEscaping)) + '"';
      return Result;
    };
    this.GetAsString = function () {
      var Result = "";
      Result = this.FValue;
      return Result;
    };
    this.SetAsString = function (AValue) {
      this.FValue = AValue;
    };
    this.Create$2 = function (AValue) {
      this.FValue = AValue;
    };
    this.JSONType = function () {
      var Result = 0;
      Result = $mod.TJSONtype.jtString;
      return Result;
    };
    this.Clear = function () {
      this.FValue = "";
    };
    this.Clone = function () {
      var Result = null;
      Result = this.$class.ClassType().$create("Create$2",[this.FValue]);
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONBoolean",$mod.TJSONData,function () {
    this.$init = function () {
      $mod.TJSONData.$init.call(this);
      this.FValue = false;
    };
    this.GetValue = function () {
      var Result = undefined;
      Result = this.FValue;
      return Result;
    };
    this.SetValue = function (AValue) {
      this.FValue = !(AValue == false);
    };
    this.GetAsBoolean = function () {
      var Result = false;
      Result = this.FValue;
      return Result;
    };
    this.GetAsFloat = function () {
      var Result = 0.0;
      Result = this.FValue + 0;
      return Result;
    };
    this.GetAsInteger = function () {
      var Result = 0;
      Result = this.FValue + 0;
      return Result;
    };
    this.SetAsBoolean = function (AValue) {
      this.FValue = AValue;
    };
    this.SetAsFloat = function (AValue) {
      this.FValue = AValue !== 0;
    };
    this.SetAsInteger = function (AValue) {
      this.FValue = AValue !== 0;
    };
    this.GetAsJSON = function () {
      var Result = "";
      if (this.FValue) {
        Result = "true"}
       else Result = "false";
      return Result;
    };
    this.GetAsString = function () {
      var Result = "";
      Result = pas.SysUtils.BoolToStr(this.FValue,true);
      return Result;
    };
    this.SetAsString = function (AValue) {
      this.FValue = pas.SysUtils.StrToBool(AValue);
    };
    this.Create$2 = function (AValue) {
      this.FValue = AValue;
    };
    this.JSONType = function () {
      var Result = 0;
      Result = $mod.TJSONtype.jtBoolean;
      return Result;
    };
    this.Clear = function () {
      this.FValue = false;
    };
    this.Clone = function () {
      var Result = null;
      Result = this.$class.ClassType().$create("Create$2",[this.FValue]);
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONNull",$mod.TJSONData,function () {
    this.Converterror = function (From) {
      if (From) {
        this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotConvertFromNull"))}
       else this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotConvertToNull"));
    };
    this.GetAsBoolean = function () {
      var Result = false;
      this.Converterror(true);
      Result = false;
      return Result;
    };
    this.GetAsFloat = function () {
      var Result = 0.0;
      this.Converterror(true);
      Result = 0.0;
      return Result;
    };
    this.GetAsInteger = function () {
      var Result = 0;
      this.Converterror(true);
      Result = 0;
      return Result;
    };
    this.GetIsNull = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.SetAsBoolean = function (AValue) {
      this.Converterror(false);
      if (AValue) ;
    };
    this.SetAsFloat = function (AValue) {
      this.Converterror(false);
      if (AValue > 0) ;
    };
    this.SetAsInteger = function (AValue) {
      this.Converterror(false);
      if (AValue > 0) ;
    };
    this.GetAsJSON = function () {
      var Result = "";
      Result = "null";
      return Result;
    };
    this.GetAsString = function () {
      var Result = "";
      this.Converterror(true);
      Result = "";
      return Result;
    };
    this.SetAsString = function (AValue) {
      this.Converterror(true);
      if (AValue === "") ;
    };
    this.GetValue = function () {
      var Result = undefined;
      Result = null;
      return Result;
    };
    this.SetValue = function (AValue) {
      this.Converterror(false);
      if (AValue == 0) ;
    };
    this.JSONType = function () {
      var Result = 0;
      Result = $mod.TJSONtype.jtNull;
      return Result;
    };
    this.Clear = function () {
    };
    this.Clone = function () {
      var Result = null;
      Result = this.$class.ClassType().$create("Create$1");
      return Result;
    };
  });
  $mod.$rtti.$MethodVar("TJSONArrayIterator",{procsig: rtl.newTIProcSig([["Item",$mod.$rtti["TJSONData"]],["Data",pas.System.$rtti["TObject"]],["Continue",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$Class("TJSONObject");
  rtl.createClass($mod,"TJSONArray",$mod.TJSONData,function () {
    this.$init = function () {
      $mod.TJSONData.$init.call(this);
      this.FList = null;
    };
    this.$final = function () {
      this.FList = undefined;
      $mod.TJSONData.$final.call(this);
    };
    this.GetArrays = function (Index) {
      var Result = null;
      Result = rtl.as(this.GetItem(Index),$mod.TJSONArray);
      return Result;
    };
    this.GetBooleans = function (Index) {
      var Result = false;
      Result = this.GetItem(Index).GetAsBoolean();
      return Result;
    };
    this.GetFloats = function (Index) {
      var Result = 0.0;
      Result = this.GetItem(Index).GetAsFloat();
      return Result;
    };
    this.GetIntegers = function (Index) {
      var Result = 0;
      Result = this.GetItem(Index).GetAsInteger();
      return Result;
    };
    this.GetNulls = function (Index) {
      var Result = false;
      Result = this.GetItem(Index).GetIsNull();
      return Result;
    };
    this.GetObjects = function (Index) {
      var Result = null;
      Result = rtl.as(this.GetItem(Index),$mod.TJSONObject);
      return Result;
    };
    this.GetStrings = function (Index) {
      var Result = "";
      Result = this.GetItem(Index).GetAsString();
      return Result;
    };
    this.GetTypes = function (Index) {
      var Result = 0;
      Result = this.GetItem(Index).$class.JSONType();
      return Result;
    };
    this.SetArrays = function (Index, AValue) {
      this.SetItem(Index,AValue);
    };
    this.SetBooleans = function (Index, AValue) {
      this.SetItem(Index,$mod.CreateJSON$1(AValue));
    };
    this.SetFloats = function (Index, AValue) {
      this.SetItem(Index,$mod.CreateJSON$3(AValue));
    };
    this.SetIntegers = function (Index, AValue) {
      this.SetItem(Index,$mod.CreateJSON$2(AValue));
    };
    this.SetObjects = function (Index, AValue) {
      this.SetItem(Index,AValue);
    };
    this.SetStrings = function (Index, AValue) {
      this.SetItem(Index,$mod.CreateJSON$4(AValue));
    };
    this.DoFindPath = function (APath, NotFound) {
      var Result = null;
      var P = 0;
      var I = 0;
      var E = "";
      if ((APath !== "") && (APath.charAt(0) === "[")) {
        P = pas.System.Pos("]",APath);
        I = -1;
        if (P > 2) I = pas.SysUtils.StrToIntDef(pas.System.Copy(APath,2,P - 2),-1);
        if ((I >= 0) && (I < this.GetCount())) {
          E = APath;
          pas.System.Delete({get: function () {
              return E;
            }, set: function (v) {
              E = v;
            }},1,P);
          Result = this.GetItem(I).DoFindPath(E,NotFound);
        } else {
          Result = null;
          if (P > 0) {
            NotFound.set(pas.System.Copy(APath,1,P))}
           else NotFound.set(APath);
        };
      } else Result = $mod.TJSONData.DoFindPath.call(this,APath,NotFound);
      return Result;
    };
    this.Converterror = function (From) {
      if (From) {
        this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotConvertFromArray"))}
       else this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotConvertToArray"));
    };
    this.GetAsBoolean = function () {
      var Result = false;
      this.Converterror(true);
      Result = false;
      return Result;
    };
    this.GetAsFloat = function () {
      var Result = 0.0;
      this.Converterror(true);
      Result = 0.0;
      return Result;
    };
    this.GetAsInteger = function () {
      var Result = 0;
      this.Converterror(true);
      Result = 0;
      return Result;
    };
    this.SetAsBoolean = function (AValue) {
      this.Converterror(false);
      if (AValue) ;
    };
    this.SetAsFloat = function (AValue) {
      this.Converterror(false);
      if (AValue > 0) ;
    };
    this.SetAsInteger = function (AValue) {
      this.Converterror(false);
      if (AValue > 0) ;
    };
    this.GetAsJSON = function () {
      var Result = "";
      var I = 0;
      var Sep = "";
      var D = null;
      var V = "";
      Sep = $mod.TJSONData.FElementSep;
      Result = "[";
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        D = this.GetItem(I);
        if (D !== null) {
          V = D.GetAsJSON()}
         else V = "null";
        Result = Result + V;
        if (I < (this.GetCount() - 1)) Result = Result + Sep;
      };
      Result = Result + "]";
      return Result;
    };
    this.GetAsString = function () {
      var Result = "";
      this.Converterror(true);
      Result = "";
      return Result;
    };
    this.SetAsString = function (AValue) {
      this.Converterror(false);
      if (AValue === "") ;
    };
    this.GetValue = function () {
      var Result = undefined;
      this.Converterror(true);
      Result = 0;
      return Result;
    };
    this.SetValue = function (AValue) {
      this.Converterror(false);
      if (AValue == 0) ;
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FList.GetCount();
      return Result;
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.as(this.FList.GetItem(Index),$mod.TJSONData);
      return Result;
    };
    this.SetItem = function (Index, AValue) {
      if (Index === this.FList.GetCount()) {
        this.FList.Add(AValue)}
       else this.FList.SetItem(Index,AValue);
    };
    this.DoFormatJSON = function (Options, CurrentIndent, Indent) {
      var Result = "";
      var I = 0;
      var MultiLine = false;
      var SkipWhiteSpace = false;
      var Ind = "";
      Result = "[";
      MultiLine = !($mod.TFormatOption.foSingleLineArray in Options);
      SkipWhiteSpace = $mod.TFormatOption.foSkipWhiteSpace in Options;
      Ind = $impl.IndentString(rtl.refSet(Options),CurrentIndent + Indent);
      if (MultiLine) Result = Result + pas.System.sLineBreak;
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (MultiLine) Result = Result + Ind;
        if (this.GetItem(I) === null) {
          Result = Result + "null"}
         else Result = Result + this.GetItem(I).DoFormatJSON(rtl.refSet(Options),CurrentIndent + Indent,Indent);
        if (I < (this.GetCount() - 1)) if (MultiLine) {
          Result = Result + ","}
         else Result = Result + this.ElementSeps[+SkipWhiteSpace];
        if (MultiLine) Result = Result + pas.System.sLineBreak;
      };
      if (MultiLine) Result = Result + $impl.IndentString(rtl.refSet(Options),CurrentIndent);
      Result = Result + "]";
      return Result;
    };
    this.Create$2 = function () {
      this.FList = pas.contnrs.TFPObjectList.$create("Create$2",[true]);
    };
    this.Create$3 = function (Elements) {
      var I = 0;
      var J = null;
      this.Create$2();
      for (var $l1 = 0, $end2 = rtl.length(Elements) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        J = $impl.VarRecToJSON(Elements[I],"Array");
        this.Add(J);
      };
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FList;
        }, set: function (v) {
          this.p.FList = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.JSONType = function () {
      var Result = 0;
      Result = $mod.TJSONtype.jtArray;
      return Result;
    };
    this.Clone = function () {
      var Result = null;
      var A = null;
      var I = 0;
      A = this.$class.ClassType().$create("Create$2");
      try {
        for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          A.Add(this.GetItem(I).Clone());
        };
        Result = A;
      } catch ($e) {
        A = rtl.freeLoc(A);
        throw $e;
      };
      return Result;
    };
    this.Iterate = function (Iterator, Data) {
      var I = 0;
      var Cont = false;
      I = 0;
      Cont = true;
      while ((I < this.FList.GetCount()) && Cont) {
        Iterator(this.GetItem(I),Data,{get: function () {
            return Cont;
          }, set: function (v) {
            Cont = v;
          }});
        I += 1;
      };
    };
    this.IndexOf = function (obj) {
      var Result = 0;
      Result = this.FList.IndexOf(obj);
      return Result;
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $impl.TJSONArrayEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.Clear = function () {
      this.FList.Clear();
    };
    this.Add = function (Item) {
      var Result = 0;
      Result = this.FList.Add(Item);
      return Result;
    };
    this.Add$1 = function (I) {
      var Result = 0;
      Result = this.Add($mod.CreateJSON$2(I));
      return Result;
    };
    this.Add$2 = function (S) {
      var Result = 0;
      Result = this.Add($mod.CreateJSON$4(S));
      return Result;
    };
    this.Add$3 = function () {
      var Result = 0;
      Result = this.Add($mod.CreateJSON());
      return Result;
    };
    this.Add$4 = function (F) {
      var Result = 0;
      Result = this.Add($mod.CreateJSON$3(F));
      return Result;
    };
    this.Add$5 = function (B) {
      var Result = 0;
      Result = this.Add($mod.CreateJSON$1(B));
      return Result;
    };
    this.Add$6 = function (AnArray) {
      var Result = 0;
      if (this.IndexOf(AnArray) !== -1) this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotAddArrayTwice"));
      Result = this.Add(AnArray);
      return Result;
    };
    this.Add$7 = function (AnObject) {
      var Result = 0;
      if (this.IndexOf(AnObject) !== -1) this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotAddObjectTwice"));
      Result = this.Add(AnObject);
      return Result;
    };
    this.Delete = function (Index) {
      this.FList.Delete(Index);
    };
    this.Exchange = function (Index1, Index2) {
      this.FList.Exchange(Index1,Index2);
    };
    this.Extract = function (Item) {
      var Result = null;
      Result = this.FList.Extract(Item);
      return Result;
    };
    this.Extract$1 = function (Index) {
      var Result = null;
      Result = this.FList.Extract(this.FList.GetItem(Index));
      return Result;
    };
    this.Insert = function (Index) {
      this.Insert$1(Index,$mod.CreateJSON());
    };
    this.Insert$1 = function (Index, Item) {
      this.FList.Insert(Index,Item);
    };
    this.Insert$2 = function (Index, I) {
      this.FList.Insert(Index,$mod.CreateJSON$2(I));
    };
    this.Insert$3 = function (Index, S) {
      this.FList.Insert(Index,$mod.CreateJSON$4(S));
    };
    this.Insert$4 = function (Index, F) {
      this.FList.Insert(Index,$mod.CreateJSON$3(F));
    };
    this.Insert$5 = function (Index, B) {
      this.FList.Insert(Index,$mod.CreateJSON$1(B));
    };
    this.Insert$6 = function (Index, AnArray) {
      if (this.IndexOf(AnArray) !== -1) this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotAddArrayTwice"));
      this.FList.Insert(Index,AnArray);
    };
    this.Insert$7 = function (Index, AnObject) {
      if (this.IndexOf(AnObject) !== -1) this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotAddObjectTwice"));
      this.FList.Insert(Index,AnObject);
    };
    this.Move = function (CurIndex, NewIndex) {
      this.FList.Move(CurIndex,NewIndex);
    };
    this.Remove = function (Item) {
      this.FList.Remove(Item);
    };
    this.Sort = function (Compare) {
      this.FList.Sort(Compare);
    };
  });
  $mod.$rtti.$MethodVar("TJSONObjectIterator",{procsig: rtl.newTIProcSig([["AName",rtl.string,2],["Item",$mod.$rtti["TJSONData"]],["Data",pas.System.$rtti["TObject"]],["Continue",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TJSONObject",$mod.TJSONData,function () {
    this.ElementStart = ['"',""];
    this.SpacedQuoted = ['" : '," : "];
    this.UnSpacedQuoted = ['":',":"];
    this.ObjStartSeps = ["{ ","{"];
    this.ObjEndSeps = [" }","}"];
    this.FUnquotedMemberNames = false;
    this.FObjStartSep = "";
    this.FObjEndSep = "";
    this.FElementEnd = "";
    this.FElementStart = "";
    this.$init = function () {
      $mod.TJSONData.$init.call(this);
      this.FCount = 0;
      this.FHash = null;
      this.FNames = [];
    };
    this.$final = function () {
      this.FHash = undefined;
      this.FNames = undefined;
      $mod.TJSONData.$final.call(this);
    };
    this.DoAdd = function (AName, AValue, FreeOnError) {
      var Result = 0;
      if (this.FHash.hasOwnProperty("%" + AName)) {
        if (FreeOnError) pas.SysUtils.FreeAndNil({get: function () {
            return AValue;
          }, set: function (v) {
            AValue = v;
          }});
        this.$class.DoError$1(rtl.getResStr(pas.fpjson,"SErrDuplicateValue"),[AName]);
      };
      this.FHash["%" + AName] = AValue;
      this.FNames = [];
      this.FCount += 1;
      Result = this.FCount;
      return Result;
    };
    this.DetermineElementQuotes = function () {
      $mod.TJSONObject.FObjStartSep = this.ObjStartSeps[+$mod.TJSONData.FCompressedJSON];
      $mod.TJSONObject.FObjEndSep = this.ObjEndSeps[+$mod.TJSONData.FCompressedJSON];
      if ($mod.TJSONData.FCompressedJSON) {
        $mod.TJSONObject.FElementEnd = this.UnSpacedQuoted[+this.FUnquotedMemberNames]}
       else $mod.TJSONObject.FElementEnd = this.SpacedQuoted[+this.FUnquotedMemberNames];
      $mod.TJSONObject.FElementStart = this.ElementStart[+this.FUnquotedMemberNames];
    };
    this.GetArrays = function (AName) {
      var Result = null;
      Result = rtl.as(this.GetElements(AName),$mod.TJSONArray);
      return Result;
    };
    this.GetBooleans = function (AName) {
      var Result = false;
      Result = this.GetElements(AName).GetAsBoolean();
      return Result;
    };
    this.GetElements = function (AName) {
      var Result = null;
      if (this.FHash.hasOwnProperty("%" + AName)) {
        Result = rtl.getObject(this.FHash["%" + AName])}
       else this.$class.DoError$1(rtl.getResStr(pas.fpjson,"SErrNonexistentElement"),[AName]);
      return Result;
    };
    this.GetFloats = function (AName) {
      var Result = 0.0;
      Result = this.GetElements(AName).GetAsFloat();
      return Result;
    };
    this.GetIntegers = function (AName) {
      var Result = 0;
      Result = this.GetElements(AName).GetAsInteger();
      return Result;
    };
    this.GetIsNull$1 = function (AName) {
      var Result = false;
      Result = this.GetElements(AName).GetIsNull();
      return Result;
    };
    this.GetNameOf = function (Index) {
      var Result = "";
      if (rtl.length(this.FNames) === 0) this.FNames = Object.getOwnPropertyNames(this.FHash);
      if ((Index < 0) || (Index >= this.FCount)) this.$class.DoError$1(pas.RTLConsts.SListIndexError,[Index]);
      Result = pas.System.Copy$1(this.FNames[Index],2);
      return Result;
    };
    this.GetObjects = function (AName) {
      var Result = null;
      Result = rtl.as(this.GetElements(AName),$mod.TJSONObject);
      return Result;
    };
    this.GetStrings = function (AName) {
      var Result = "";
      Result = this.GetElements(AName).GetAsString();
      return Result;
    };
    this.GetTypes = function (AName) {
      var Result = 0;
      Result = this.GetElements(AName).$class.JSONType();
      return Result;
    };
    this.SetArrays = function (AName, AValue) {
      this.SetElements(AName,AValue);
    };
    this.SetBooleans = function (AName, AValue) {
      this.SetElements(AName,$mod.CreateJSON$1(AValue));
    };
    this.SetElements = function (AName, AValue) {
      if (!this.FHash.hasOwnProperty("%" + AName)) this.FCount += 1;
      this.FHash["%" + AName] = AValue;
      this.FNames = [];
    };
    this.SetFloats = function (AName, AValue) {
      this.SetElements(AName,$mod.CreateJSON$3(AValue));
    };
    this.SetIntegers = function (AName, AValue) {
      this.SetElements(AName,$mod.CreateJSON$2(AValue));
    };
    this.SetIsNull = function (AName, AValue) {
      if (!AValue) this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotSetNotIsNull"));
      this.SetElements(AName,$mod.CreateJSON());
    };
    this.SetObjects = function (AName, AValue) {
      this.SetElements(AName,AValue);
    };
    this.SetStrings = function (AName, AValue) {
      this.SetElements(AName,$mod.CreateJSON$4(AValue));
    };
    this.GetUnquotedMemberNames = function () {
      var Result = false;
      Result = this.FUnquotedMemberNames;
      return Result;
    };
    this.SetUnquotedMemberNames = function (AValue) {
      if (this.FUnquotedMemberNames === AValue) return;
      $mod.TJSONObject.FUnquotedMemberNames = AValue;
      this.DetermineElementQuotes();
    };
    this.DoFindPath = function (APath, NotFound) {
      var Result = null;
      var N = "";
      var L = 0;
      var P = 0;
      var P2 = 0;
      if (APath === "") return this;
      N = APath;
      L = N.length;
      P = 1;
      while ((P < L) && (N.charAt(P - 1) === ".")) P += 1;
      P2 = P;
      while ((P2 <= L) && !(N.charCodeAt(P2 - 1) in rtl.createSet(46,91))) P2 += 1;
      N = pas.System.Copy(APath,P,P2 - P);
      if (N === "") {
        Result = this}
       else {
        Result = this.Find(N);
        if (Result === null) {
          NotFound.set(N + pas.System.Copy(APath,P2,L - P2))}
         else {
          N = pas.System.Copy(APath,P2,(L - P2) + 1);
          Result = Result.DoFindPath(N,NotFound);
        };
      };
      return Result;
    };
    this.Converterror = function (From) {
      if (From) {
        this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotConvertFromObject"))}
       else this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrCannotConvertToObject"));
    };
    this.GetAsBoolean = function () {
      var Result = false;
      this.Converterror(true);
      Result = false;
      return Result;
    };
    this.GetAsFloat = function () {
      var Result = 0.0;
      this.Converterror(true);
      Result = 0.0;
      return Result;
    };
    this.GetAsInteger = function () {
      var Result = 0;
      this.Converterror(true);
      Result = 0;
      return Result;
    };
    this.SetAsBoolean = function (AValue) {
      this.Converterror(false);
      if (AValue) ;
    };
    this.SetAsFloat = function (AValue) {
      this.Converterror(false);
      if (AValue > 0) ;
    };
    this.SetAsInteger = function (AValue) {
      this.Converterror(false);
      if (AValue > 0) ;
    };
    this.GetAsJSON = function () {
      var Result = "";
      var I = 0;
      var Sep = "";
      var V = "";
      var D = null;
      Sep = $mod.TJSONData.FElementSep;
      Result = "";
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (Result !== "") Result = Result + Sep;
        D = this.GetItem(I);
        if (D != null) {
          V = this.GetItem(I).GetAsJSON()}
         else V = "null";
        Result = (((Result + this.FElementStart) + $mod.StringToJSONString(this.GetNameOf(I),false)) + this.FElementEnd) + V;
      };
      if (Result !== "") {
        Result = (this.FObjStartSep + Result) + this.FObjEndSep}
       else Result = "{}";
      return Result;
    };
    this.GetAsString = function () {
      var Result = "";
      this.Converterror(true);
      Result = "";
      return Result;
    };
    this.SetAsString = function (AValue) {
      this.Converterror(false);
      if (AValue === "") ;
    };
    this.GetValue = function () {
      var Result = undefined;
      this.Converterror(true);
      Result = 0;
      return Result;
    };
    this.SetValue = function (AValue) {
      this.Converterror(false);
      if (AValue == 0) ;
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FCount;
      return Result;
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = this.GetElements(this.GetNameOf(Index));
      return Result;
    };
    this.SetItem = function (Index, AValue) {
      this.SetElements(this.GetNameOf(Index),AValue);
    };
    this.DoFormatJSON = function (Options, CurrentIndent, Indent) {
      var Result = "";
      var i = 0;
      var S = "";
      var MultiLine = false;
      var UseQuotes = false;
      var SkipWhiteSpace = false;
      var SkipWhiteSpaceOnlyLeading = false;
      var NSep = "";
      var Sep = "";
      var Ind = "";
      var V = "";
      var D = null;
      Result = "";
      UseQuotes = !($mod.TFormatOption.foDoNotQuoteMembers in Options);
      MultiLine = !($mod.TFormatOption.foSingleLineObject in Options);
      SkipWhiteSpace = $mod.TFormatOption.foSkipWhiteSpace in Options;
      SkipWhiteSpaceOnlyLeading = $mod.TFormatOption.foSkipWhiteSpaceOnlyLeading in Options;
      CurrentIndent = CurrentIndent + Indent;
      Ind = $impl.IndentString(rtl.refSet(Options),CurrentIndent);
      if (SkipWhiteSpace) {
        if (SkipWhiteSpaceOnlyLeading) {
          NSep = ": "}
         else NSep = ":";
      } else NSep = " : ";
      if (MultiLine) {
        Sep = ("," + pas.System.sLineBreak) + Ind}
       else if (SkipWhiteSpace) {
        Sep = ","}
       else Sep = ", ";
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (i > 0) {
          Result = Result + Sep}
         else if (MultiLine) Result = Result + Ind;
        S = $mod.StringToJSONString(this.GetNameOf(i),false);
        if (UseQuotes) S = ('"' + S) + '"';
        D = this.GetItem(i);
        if (D === null) {
          V = "null"}
         else V = this.GetItem(i).DoFormatJSON(rtl.refSet(Options),CurrentIndent,Indent);
        Result = ((Result + S) + NSep) + V;
      };
      if (Result !== "") {
        if (MultiLine) {
          Result = (((("{" + pas.System.sLineBreak) + Result) + pas.System.sLineBreak) + $impl.IndentString(rtl.refSet(Options),CurrentIndent - Indent)) + "}"}
         else Result = (this.ObjStartSeps[+SkipWhiteSpace] + Result) + this.ObjEndSeps[+SkipWhiteSpace];
      } else Result = "{}";
      return Result;
    };
    this.Create$2 = function () {
      this.FHash = new Object();
    };
    this.Create$3 = function (Elements) {
      var I = 0;
      var AName = "";
      var J = null;
      this.Create$2();
      if ((((rtl.length(Elements) - 1) - 0) % 2) === 0) this.$class.DoError(rtl.getResStr(pas.fpjson,"SErrOddNumber"));
      I = 0;
      while (I <= (rtl.length(Elements) - 1)) {
        if (rtl.isString(Elements[I])) {
          AName = "" + Elements[I]}
         else this.$class.DoError$1(rtl.getResStr(pas.fpjson,"SErrNameMustBeString"),[I + 1]);
        if (AName === "") this.$class.DoError$1(rtl.getResStr(pas.fpjson,"SErrNameMustBeString"),[I + 1]);
        I += 1;
        J = $impl.VarRecToJSON(Elements[I],"Object");
        this.Add(AName,J);
        I += 1;
      };
    };
    this.Destroy = function () {
      this.FHash = null;
      pas.System.TObject.Destroy.call(this);
    };
    this.JSONType = function () {
      var Result = 0;
      Result = $mod.TJSONtype.jtObject;
      return Result;
    };
    this.Clone = function () {
      var Result = null;
      var O = null;
      var I = 0;
      O = this.$class.ClassType().$create("Create$2");
      try {
        for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          O.Add(this.GetNameOf(I),this.GetItem(I).Clone());
        };
        Result = O;
      } catch ($e) {
        pas.SysUtils.FreeAndNil({get: function () {
            return O;
          }, set: function (v) {
            O = v;
          }});
        throw $e;
      };
      return Result;
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $impl.TJSONObjectEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.Iterate = function (Iterator, Data) {
      var i = 0;
      var Cont = false;
      if (rtl.length(this.FNames) === 0) this.FNames = Object.getOwnPropertyNames(this.FHash);
      Cont = true;
      for (var $l1 = 0, $end2 = rtl.length(this.FNames); $l1 <= $end2; $l1++) {
        i = $l1;
        Iterator(pas.System.Copy$1(this.FNames[i],2),rtl.getObject(this.FHash[this.FNames[i]]),Data,{get: function () {
            return Cont;
          }, set: function (v) {
            Cont = v;
          }});
        if (!Cont) break;
      };
    };
    this.IndexOf = function (Item) {
      var Result = 0;
      if (rtl.length(this.FNames) === 0) this.FNames = Object.getOwnPropertyNames(this.FHash);
      for (var $l1 = 0, $end2 = rtl.length(this.FNames) - 1; $l1 <= $end2; $l1++) {
        Result = $l1;
        if (rtl.getObject(this.FHash[this.FNames[Result]]) === Item) return Result;
      };
      Result = -1;
      return Result;
    };
    this.IndexOfName = function (AName, CaseInsensitive) {
      var Result = 0;
      if (rtl.length(this.FNames) === 0) this.FNames = Object.getOwnPropertyNames(this.FHash);
      Result = this.FNames.indexOf("%" + AName);
      if ((Result < 0) && CaseInsensitive) {
        Result = this.GetCount() - 1;
        while ((Result >= 0) && (pas.SysUtils.CompareText(this.GetNameOf(Result),AName) !== 0)) Result -= 1;
      };
      return Result;
    };
    this.Find = function (AName) {
      var Result = null;
      if (this.FHash.hasOwnProperty("%" + AName)) {
        Result = rtl.getObject(this.FHash["%" + AName])}
       else Result = null;
      return Result;
    };
    this.Find$1 = function (AName, AType) {
      var Result = null;
      Result = this.Find(AName);
      if ((Result != null) && (Result.$class.JSONType() !== AType)) Result = null;
      return Result;
    };
    this.Find$2 = function (key, AValue) {
      var Result = false;
      AValue.set(this.Find(key));
      Result = AValue.get() != null;
      return Result;
    };
    this.Find$3 = function (key, AValue) {
      var Result = false;
      var v = null;
      v = this.Find(key);
      Result = (v != null) && (v.$class.JSONType() === $mod.TJSONtype.jtObject);
      if (Result) AValue.set(v);
      return Result;
    };
    this.Find$4 = function (key, AValue) {
      var Result = false;
      var v = null;
      v = this.Find(key);
      Result = (v != null) && (v.$class.JSONType() === $mod.TJSONtype.jtArray);
      if (Result) AValue.set(v);
      return Result;
    };
    this.Find$5 = function (key, AValue) {
      var Result = false;
      var v = null;
      v = this.Find(key);
      Result = (v != null) && (v.$class.JSONType() === $mod.TJSONtype.jtString);
      if (Result) AValue.set(v);
      return Result;
    };
    this.Find$6 = function (key, AValue) {
      var Result = false;
      var v = null;
      v = this.Find(key);
      Result = (v != null) && (v.$class.JSONType() === $mod.TJSONtype.jtBoolean);
      if (Result) AValue.set(v);
      return Result;
    };
    this.Find$7 = function (key, AValue) {
      var Result = false;
      var v = null;
      v = this.Find(key);
      Result = (v != null) && (v.$class.JSONType() === $mod.TJSONtype.jtNumber);
      if (Result) AValue.set(v);
      return Result;
    };
    this.Get = function (AName) {
      var Result = undefined;
      if (this.FHash.hasOwnProperty("%" + AName)) {
        Result = rtl.getObject(this.FHash["%" + AName]).GetValue()}
       else Result = null;
      return Result;
    };
    this.Get$1 = function (AName, ADefault) {
      var Result = 0.0;
      var D = null;
      D = this.Find$1(AName,$mod.TJSONtype.jtNumber);
      if (D !== null) {
        Result = D.GetAsFloat()}
       else Result = ADefault;
      return Result;
    };
    this.Get$2 = function (AName, ADefault) {
      var Result = 0;
      var D = null;
      D = this.Find$1(AName,$mod.TJSONtype.jtNumber);
      if (D !== null) {
        Result = D.GetAsInteger()}
       else Result = ADefault;
      return Result;
    };
    this.Get$3 = function (AName, ADefault) {
      var Result = false;
      var D = null;
      D = this.Find$1(AName,$mod.TJSONtype.jtBoolean);
      if (D !== null) {
        Result = D.GetAsBoolean()}
       else Result = ADefault;
      return Result;
    };
    this.Get$4 = function (AName, ADefault) {
      var Result = "";
      var D = null;
      D = this.Find$1(AName,$mod.TJSONtype.jtString);
      if (D !== null) {
        Result = D.GetAsString()}
       else Result = ADefault;
      return Result;
    };
    this.Get$5 = function (AName, ADefault) {
      var Result = null;
      var D = null;
      D = this.Find$1(AName,$mod.TJSONtype.jtArray);
      if (D !== null) {
        Result = D}
       else Result = ADefault;
      return Result;
    };
    this.Get$6 = function (AName, ADefault) {
      var Result = null;
      var D = null;
      D = this.Find$1(AName,$mod.TJSONtype.jtObject);
      if (D !== null) {
        Result = D}
       else Result = ADefault;
      return Result;
    };
    this.Clear = function () {
      this.FCount = 0;
      this.FHash = new Object();
      this.FNames = [];
    };
    this.Add = function (AName, AValue) {
      var Result = 0;
      Result = this.DoAdd(AName,AValue,false);
      return Result;
    };
    this.Add$1 = function (AName, AValue) {
      var Result = 0;
      Result = this.DoAdd(AName,$mod.CreateJSON$1(AValue),true);
      return Result;
    };
    this.Add$2 = function (AName, AValue) {
      var Result = 0;
      Result = this.DoAdd(AName,$mod.CreateJSON$3(AValue),true);
      return Result;
    };
    this.Add$3 = function (AName, AValue) {
      var Result = 0;
      Result = this.DoAdd(AName,$mod.CreateJSON$4(AValue),true);
      return Result;
    };
    this.Add$4 = function (AName, Avalue) {
      var Result = 0;
      Result = this.DoAdd(AName,$mod.CreateJSON$2(Avalue),true);
      return Result;
    };
    this.Add$5 = function (AName) {
      var Result = 0;
      Result = this.DoAdd(AName,$mod.CreateJSON(),true);
      return Result;
    };
    this.Add$6 = function (AName, AValue) {
      var Result = 0;
      Result = this.DoAdd(AName,AValue,false);
      return Result;
    };
    this.Delete = function (Index) {
      if ((Index < 0) || (Index >= this.FCount)) this.$class.DoError$1(pas.RTLConsts.SListIndexError,[Index]);
      pas.JS.JSDelete(this.FHash,"%" + this.GetNameOf(Index));
      this.FNames = [];
      this.FCount -= 1;
    };
    this.Delete$1 = function (AName) {
      if (!this.FHash.hasOwnProperty("%" + AName)) return;
      pas.JS.JSDelete(this.FHash,"%" + AName);
      this.FNames = [];
      this.FCount -= 1;
    };
    this.Remove = function (Item) {
      var AName = "";
      for (AName in this.FHash) if (this.FHash.hasOwnProperty(AName) && (this.FHash[AName] == Item)) {
        pas.JS.JSDelete(this.FHash,AName);
        this.FNames = [];
        this.FCount -= 1;
        return;
      };
    };
  });
  rtl.createClass($mod,"EJSON",pas.SysUtils.Exception,function () {
  });
  this.SetJSONInstanceType = function (AType, AClass) {
    var Result = null;
    if (AClass === null) $mod.TJSONData.DoError$1(rtl.getResStr(pas.fpjson,"SErrWrongInstanceClass"),["Nil",$impl.MinJSONInstanceTypes[AType].$classname]);
    if (!AClass.InheritsFrom($impl.MinJSONInstanceTypes[AType])) $mod.TJSONData.DoError$1(rtl.getResStr(pas.fpjson,"SErrWrongInstanceClass"),[AClass.$classname,$impl.MinJSONInstanceTypes[AType].$classname]);
    Result = $impl.DefaultJSONInstanceTypes[AType];
    $impl.DefaultJSONInstanceTypes[AType] = AClass;
    return Result;
  };
  this.GetJSONInstanceType = function (AType) {
    var Result = null;
    Result = $impl.DefaultJSONInstanceTypes[AType];
    return Result;
  };
  this.StringToJSONString = function (S, Strict) {
    var Result = "";
    var I = 0;
    var J = 0;
    var L = 0;
    var C = "";
    I = 1;
    J = 1;
    Result = "";
    L = S.length;
    while (I <= L) {
      C = S.charAt(I - 1);
      if (C.charCodeAt() in rtl.createSet(34,47,92,null,0,31)) {
        Result = Result + pas.System.Copy(S,J,I - J);
        var $tmp1 = C;
        if ($tmp1 === "\\") {
          Result = Result + "\\\\"}
         else if ($tmp1 === "\/") {
          if (Strict) {
            Result = Result + "\\\/"}
           else Result = Result + "\/"}
         else if ($tmp1 === '"') {
          Result = Result + '\\"'}
         else if ($tmp1 === "\b") {
          Result = Result + "\\b"}
         else if ($tmp1 === "\t") {
          Result = Result + "\\t"}
         else if ($tmp1 === "\n") {
          Result = Result + "\\n"}
         else if ($tmp1 === "\f") {
          Result = Result + "\\f"}
         else if ($tmp1 === "\r") {
          Result = Result + "\\r"}
         else {
          Result = (Result + "\\u") + rtl.hexStr(C.charCodeAt(),4);
        };
        J = I + 1;
      };
      I += 1;
    };
    Result = Result + pas.System.Copy(S,J,I - 1);
    return Result;
  };
  this.JSONStringToString = function (S) {
    var Result = "";
    var I = 0;
    var J = 0;
    var L = 0;
    var U1 = 0;
    var U2 = 0;
    var App = "";
    var W = "";
    function MaybeAppendUnicode() {
      var U = "";
      if (U1 !== 0) {
        U = String.fromCharCode(U1);
        Result = Result + U;
        U1 = 0;
      };
    };
    I = 1;
    J = 1;
    L = S.length;
    Result = "";
    U1 = 0;
    while (I <= L) {
      if (S.charAt(I - 1) === "\\") {
        Result = Result + pas.System.Copy(S,J,I - J);
        if (I < L) {
          I += 1;
          App = "";
          var $tmp1 = S.charAt(I - 1);
          if ((($tmp1 === "\\") || ($tmp1 === '"')) || ($tmp1 === "\/")) {
            App = S.charAt(I - 1)}
           else if ($tmp1 === "b") {
            App = "\b"}
           else if ($tmp1 === "t") {
            App = "\t"}
           else if ($tmp1 === "n") {
            App = "\n"}
           else if ($tmp1 === "f") {
            App = "\f"}
           else if ($tmp1 === "r") {
            App = "\r"}
           else if ($tmp1 === "u") {
            W = pas.System.Copy(S,I + 1,4);
            I += 4;
            U2 = pas.SysUtils.StrToInt("$" + W);
            if (U1 !== 0) {
              App = String.fromCharCode(U1) + String.fromCharCode(U2);
              U2 = 0;
            } else U1 = U2;
          };
          if (App !== "") {
            MaybeAppendUnicode();
            Result = Result + App;
          };
        };
        J = I + 1;
      } else MaybeAppendUnicode();
      I += 1;
    };
    MaybeAppendUnicode();
    Result = Result + pas.System.Copy(S,J,(I - J) + 1);
    return Result;
  };
  this.JSONTypeName = function (JSONType) {
    var Result = "";
    Result = pas.TypInfo.GetEnumName($mod.$rtti["TJSONtype"],JSONType);
    return Result;
  };
  this.CreateJSON = function () {
    var Result = null;
    Result = $impl.DefaultJSONInstanceTypes[$mod.TJSONInstanceType.jitNull].$create("Create$1");
    return Result;
  };
  this.CreateJSON$1 = function (Data) {
    var Result = null;
    Result = $impl.DefaultJSONInstanceTypes[$mod.TJSONInstanceType.jitBoolean].$create("Create$2",[Data]);
    return Result;
  };
  this.CreateJSON$2 = function (Data) {
    var Result = null;
    Result = $impl.DefaultJSONInstanceTypes[$mod.TJSONInstanceType.jitNumberInteger].$create("Create$2",[Data]);
    return Result;
  };
  this.CreateJSON$3 = function (Data) {
    var Result = null;
    Result = $impl.DefaultJSONInstanceTypes[$mod.TJSONInstanceType.jitNumberFloat].$create("Create$2",[Data]);
    return Result;
  };
  this.CreateJSON$4 = function (Data) {
    var Result = null;
    Result = $impl.DefaultJSONInstanceTypes[$mod.TJSONInstanceType.jitString].$create("Create$2",[Data]);
    return Result;
  };
  this.CreateJSONArray = function (Data) {
    var Result = null;
    Result = $impl.DefaultJSONInstanceTypes[$mod.TJSONInstanceType.jitArray].$create("Create$3",[Data]);
    return Result;
  };
  this.CreateJSONObject = function (Data) {
    var Result = null;
    Result = $impl.DefaultJSONInstanceTypes[$mod.TJSONInstanceType.jitObject].$create("Create$3",[Data]);
    return Result;
  };
  $mod.$init = function () {
    $mod.TJSONData.DetermineElementSeparators();
    $mod.TJSONObject.DetermineElementQuotes();
  };
},["TypInfo"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.DefaultJSONInstanceTypes = [$mod.TJSONData,$mod.TJSONIntegerNumber,$mod.TJSONFloatNumber,$mod.TJSONString,$mod.TJSONBoolean,$mod.TJSONNull,$mod.TJSONArray,$mod.TJSONObject];
  $impl.MinJSONInstanceTypes = [$mod.TJSONData,$mod.TJSONIntegerNumber,$mod.TJSONFloatNumber,$mod.TJSONString,$mod.TJSONBoolean,$mod.TJSONNull,$mod.TJSONArray,$mod.TJSONObject];
  rtl.createClass($impl,"TJSONEnumerator",$mod.TBaseJSONEnumerator,function () {
    this.$init = function () {
      $mod.TBaseJSONEnumerator.$init.call(this);
      this.FData = null;
    };
    this.$final = function () {
      this.FData = undefined;
      $mod.TBaseJSONEnumerator.$final.call(this);
    };
    this.Create$1 = function (AData) {
      this.FData = AData;
    };
    this.GetCurrent = function () {
      var Result = new $mod.TJSONEnum();
      Result.Key = "";
      Result.KeyNum = 0;
      Result.Value = this.FData;
      this.FData = null;
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      Result = this.FData !== null;
      return Result;
    };
  });
  rtl.createClass($impl,"TJSONArrayEnumerator",$mod.TBaseJSONEnumerator,function () {
    this.$init = function () {
      $mod.TBaseJSONEnumerator.$init.call(this);
      this.FData = null;
      this.FCurrent = 0;
    };
    this.$final = function () {
      this.FData = undefined;
      $mod.TBaseJSONEnumerator.$final.call(this);
    };
    this.Create$1 = function (AData) {
      this.FData = AData;
      this.FCurrent = -1;
    };
    this.GetCurrent = function () {
      var Result = new $mod.TJSONEnum();
      Result.KeyNum = this.FCurrent;
      Result.Key = pas.SysUtils.IntToStr(this.FCurrent);
      Result.Value = this.FData.GetItem(this.FCurrent);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FCurrent += 1;
      Result = this.FCurrent < this.FData.GetCount();
      return Result;
    };
  });
  rtl.createClass($impl,"TJSONObjectEnumerator",$mod.TBaseJSONEnumerator,function () {
    this.$init = function () {
      $mod.TBaseJSONEnumerator.$init.call(this);
      this.FData = null;
      this.FCurrent = 0;
    };
    this.$final = function () {
      this.FData = undefined;
      $mod.TBaseJSONEnumerator.$final.call(this);
    };
    this.Create$1 = function (AData) {
      this.FData = AData;
      this.FCurrent = -1;
    };
    this.GetCurrent = function () {
      var Result = new $mod.TJSONEnum();
      Result.KeyNum = this.FCurrent;
      Result.Key = this.FData.GetNameOf(this.FCurrent);
      Result.Value = this.FData.GetItem(this.FCurrent);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FCurrent += 1;
      Result = this.FCurrent < this.FData.GetCount();
      return Result;
    };
  });
  $impl.IndentString = function (Options, Indent) {
    var Result = "";
    if ($mod.TFormatOption.foUseTabchar in Options) {
      Result = pas.System.StringOfChar("\t",Indent)}
     else Result = pas.System.StringOfChar(" ",Indent);
    return Result;
  };
  $impl.VarRecToJSON = function (Element, SourceType) {
    var Result = null;
    var i = 0;
    var VObject = null;
    Result = null;
    if (Element == null) {
      Result = $mod.CreateJSON()}
     else if (pas.JS.isBoolean(Element)) {
      Result = $mod.CreateJSON$1(!(Element == false))}
     else if (rtl.isString(Element)) {
      Result = $mod.CreateJSON$4("" + Element)}
     else if (rtl.isNumber(Element)) {
      if (pas.JS.isInteger(Element)) {
        i = Math.floor(Element);
        if ((i >= -2147483648) && (i <= 2147483647)) {
          Result = $mod.CreateJSON$2(Math.floor(Element))}
         else Result = $mod.CreateJSON$3(rtl.getNumber(Element));
      } else Result = $mod.CreateJSON$3(rtl.getNumber(Element));
    } else if (rtl.isObject(Element) && rtl.isExt(Element,pas.System.TObject,1)) {
      VObject = rtl.getObject(Element);
      if ($mod.TJSONData.isPrototypeOf(VObject)) {
        Result = VObject}
       else $mod.TJSONData.DoError$1(rtl.getResStr(pas.fpjson,"SErrNotJSONData"),[VObject.$classname,SourceType]);
    } else $mod.TJSONData.DoError$1(rtl.getResStr(pas.fpjson,"SErrUnknownTypeInConstructor"),[SourceType,typeof(Element)]);
    return Result;
  };
  $mod.$resourcestrings = {SErrCannotConvertFromNull: {org: "Cannot convert data from Null value"}, SErrCannotConvertToNull: {org: "Cannot convert data to Null value"}, SErrCannotConvertFromArray: {org: "Cannot convert data from array value"}, SErrCannotConvertToArray: {org: "Cannot convert data to array value"}, SErrCannotConvertFromObject: {org: "Cannot convert data from object value"}, SErrCannotConvertToObject: {org: "Cannot convert data to object value"}, SErrInvalidFloat: {org: "Invalid float value : %s"}, SErrCannotSetNotIsNull: {org: "IsNull cannot be set to False"}, SErrCannotAddArrayTwice: {org: "Adding an array object to an array twice is not allowed"}, SErrCannotAddObjectTwice: {org: "Adding an object to an array twice is not allowed"}, SErrUnknownTypeInConstructor: {org: "Unknown type in JSON%s constructor: %d"}, SErrNotJSONData: {org: "Cannot add object of type %s to TJSON%s"}, SErrOddNumber: {org: "TJSONObject must be constructed with name,value pairs"}, SErrNameMustBeString: {org: "TJSONObject constructor element name at pos %d is not a string"}, SErrNonexistentElement: {org: 'Unknown object member: "%s"'}, SErrDuplicateValue: {org: 'Duplicate object member: "%s"'}, SErrPathElementNotFound: {org: 'Path "%s" invalid: element "%s" not found.'}, SErrWrongInstanceClass: {org: "Cannot set instance class: %s does not descend from %s."}};
});
rtl.module("PScanner",["System","JS","Types","SysUtils","Classes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.nErrInvalidCharacter = 1001;
  this.nErrOpenString = 1002;
  this.nErrIncludeFileNotFound = 1003;
  this.nErrIfXXXNestingLimitReached = 1004;
  this.nErrInvalidPPElse = 1005;
  this.nErrInvalidPPEndif = 1006;
  this.nLogOpeningFile = 1007;
  this.nLogLineNumber = 1008;
  this.nLogIFDefAccepted = 1009;
  this.nLogIFDefRejected = 1010;
  this.nLogIFNDefAccepted = 1011;
  this.nLogIFNDefRejected = 1012;
  this.nLogIFAccepted = 1013;
  this.nLogIFRejected = 1014;
  this.nLogIFOptAccepted = 1015;
  this.nLogIFOptRejected = 1016;
  this.nLogELSEIFAccepted = 1017;
  this.nLogELSEIFRejected = 1018;
  this.nErrInvalidMode = 1019;
  this.nErrInvalidModeSwitch = 1020;
  this.nErrXExpectedButYFound = 1021;
  this.nErrRangeCheck = 1022;
  this.nErrDivByZero = 1023;
  this.nErrOperandAndOperatorMismatch = 1024;
  this.nUserDefined = 1025;
  this.nLogMacroDefined = 1026;
  this.nLogMacroUnDefined = 1027;
  this.nWarnIllegalCompilerDirectiveX = 1028;
  this.nIllegalStateForWarnDirective = 1027;
  this.nErrIncludeLimitReached = 1028;
  this.nMisplacedGlobalCompilerSwitch = 1029;
  this.TMessageType = {"0": "mtFatal", mtFatal: 0, "1": "mtError", mtError: 1, "2": "mtWarning", mtWarning: 2, "3": "mtNote", mtNote: 3, "4": "mtHint", mtHint: 4, "5": "mtInfo", mtInfo: 5, "6": "mtDebug", mtDebug: 6};
  $mod.$rtti.$Enum("TMessageType",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TMessageType});
  $mod.$rtti.$Set("TMessageTypes",{comptype: $mod.$rtti["TMessageType"]});
  $mod.$rtti.$DynArray("TMessageArgs",{eltype: rtl.string});
  this.TToken = {"0": "tkEOF", tkEOF: 0, "1": "tkWhitespace", tkWhitespace: 1, "2": "tkComment", tkComment: 2, "3": "tkIdentifier", tkIdentifier: 3, "4": "tkString", tkString: 4, "5": "tkNumber", tkNumber: 5, "6": "tkChar", tkChar: 6, "7": "tkBraceOpen", tkBraceOpen: 7, "8": "tkBraceClose", tkBraceClose: 8, "9": "tkMul", tkMul: 9, "10": "tkPlus", tkPlus: 10, "11": "tkComma", tkComma: 11, "12": "tkMinus", tkMinus: 12, "13": "tkDot", tkDot: 13, "14": "tkDivision", tkDivision: 14, "15": "tkColon", tkColon: 15, "16": "tkSemicolon", tkSemicolon: 16, "17": "tkLessThan", tkLessThan: 17, "18": "tkEqual", tkEqual: 18, "19": "tkGreaterThan", tkGreaterThan: 19, "20": "tkAt", tkAt: 20, "21": "tkSquaredBraceOpen", tkSquaredBraceOpen: 21, "22": "tkSquaredBraceClose", tkSquaredBraceClose: 22, "23": "tkCaret", tkCaret: 23, "24": "tkBackslash", tkBackslash: 24, "25": "tkDotDot", tkDotDot: 25, "26": "tkAssign", tkAssign: 26, "27": "tkNotEqual", tkNotEqual: 27, "28": "tkLessEqualThan", tkLessEqualThan: 28, "29": "tkGreaterEqualThan", tkGreaterEqualThan: 29, "30": "tkPower", tkPower: 30, "31": "tkSymmetricalDifference", tkSymmetricalDifference: 31, "32": "tkAssignPlus", tkAssignPlus: 32, "33": "tkAssignMinus", tkAssignMinus: 33, "34": "tkAssignMul", tkAssignMul: 34, "35": "tkAssignDivision", tkAssignDivision: 35, "36": "tkAtAt", tkAtAt: 36, "37": "tkabsolute", tkabsolute: 37, "38": "tkand", tkand: 38, "39": "tkarray", tkarray: 39, "40": "tkas", tkas: 40, "41": "tkasm", tkasm: 41, "42": "tkbegin", tkbegin: 42, "43": "tkbitpacked", tkbitpacked: 43, "44": "tkcase", tkcase: 44, "45": "tkclass", tkclass: 45, "46": "tkconst", tkconst: 46, "47": "tkconstref", tkconstref: 47, "48": "tkconstructor", tkconstructor: 48, "49": "tkdestructor", tkdestructor: 49, "50": "tkdispinterface", tkdispinterface: 50, "51": "tkdiv", tkdiv: 51, "52": "tkdo", tkdo: 52, "53": "tkdownto", tkdownto: 53, "54": "tkelse", tkelse: 54, "55": "tkend", tkend: 55, "56": "tkexcept", tkexcept: 56, "57": "tkexports", tkexports: 57, "58": "tkfalse", tkfalse: 58, "59": "tkfile", tkfile: 59, "60": "tkfinalization", tkfinalization: 60, "61": "tkfinally", tkfinally: 61, "62": "tkfor", tkfor: 62, "63": "tkfunction", tkfunction: 63, "64": "tkgeneric", tkgeneric: 64, "65": "tkgoto", tkgoto: 65, "66": "tkif", tkif: 66, "67": "tkimplementation", tkimplementation: 67, "68": "tkin", tkin: 68, "69": "tkinherited", tkinherited: 69, "70": "tkinitialization", tkinitialization: 70, "71": "tkinline", tkinline: 71, "72": "tkinterface", tkinterface: 72, "73": "tkis", tkis: 73, "74": "tklabel", tklabel: 74, "75": "tklibrary", tklibrary: 75, "76": "tkmod", tkmod: 76, "77": "tknil", tknil: 77, "78": "tknot", tknot: 78, "79": "tkobject", tkobject: 79, "80": "tkof", tkof: 80, "81": "tkoperator", tkoperator: 81, "82": "tkor", tkor: 82, "83": "tkpacked", tkpacked: 83, "84": "tkprocedure", tkprocedure: 84, "85": "tkprogram", tkprogram: 85, "86": "tkproperty", tkproperty: 86, "87": "tkraise", tkraise: 87, "88": "tkrecord", tkrecord: 88, "89": "tkrepeat", tkrepeat: 89, "90": "tkResourceString", tkResourceString: 90, "91": "tkself", tkself: 91, "92": "tkset", tkset: 92, "93": "tkshl", tkshl: 93, "94": "tkshr", tkshr: 94, "95": "tkspecialize", tkspecialize: 95, "96": "tkthen", tkthen: 96, "97": "tkthreadvar", tkthreadvar: 97, "98": "tkto", tkto: 98, "99": "tktrue", tktrue: 99, "100": "tktry", tktry: 100, "101": "tktype", tktype: 101, "102": "tkunit", tkunit: 102, "103": "tkuntil", tkuntil: 103, "104": "tkuses", tkuses: 104, "105": "tkvar", tkvar: 105, "106": "tkwhile", tkwhile: 106, "107": "tkwith", tkwith: 107, "108": "tkxor", tkxor: 108, "109": "tkLineEnding", tkLineEnding: 109, "110": "tkTab", tkTab: 110};
  $mod.$rtti.$Enum("TToken",{minvalue: 0, maxvalue: 110, ordtype: 1, enumtype: this.TToken});
  $mod.$rtti.$Set("TTokens",{comptype: $mod.$rtti["TToken"]});
  this.TModeSwitch = {"0": "msNone", msNone: 0, "1": "msFpc", msFpc: 1, "2": "msObjfpc", msObjfpc: 2, "3": "msDelphi", msDelphi: 3, "4": "msDelphiUnicode", msDelphiUnicode: 4, "5": "msTP7", msTP7: 5, "6": "msMac", msMac: 6, "7": "msIso", msIso: 7, "8": "msExtpas", msExtpas: 8, "9": "msGPC", msGPC: 9, "10": "msClass", msClass: 10, "11": "msObjpas", msObjpas: 11, "12": "msResult", msResult: 12, "13": "msStringPchar", msStringPchar: 13, "14": "msCVarSupport", msCVarSupport: 14, "15": "msNestedComment", msNestedComment: 15, "16": "msTPProcVar", msTPProcVar: 16, "17": "msMacProcVar", msMacProcVar: 17, "18": "msRepeatForward", msRepeatForward: 18, "19": "msPointer2Procedure", msPointer2Procedure: 19, "20": "msAutoDeref", msAutoDeref: 20, "21": "msInitFinal", msInitFinal: 21, "22": "msDefaultAnsistring", msDefaultAnsistring: 22, "23": "msOut", msOut: 23, "24": "msDefaultPara", msDefaultPara: 24, "25": "msHintDirective", msHintDirective: 25, "26": "msDuplicateNames", msDuplicateNames: 26, "27": "msProperty", msProperty: 27, "28": "msDefaultInline", msDefaultInline: 28, "29": "msExcept", msExcept: 29, "30": "msObjectiveC1", msObjectiveC1: 30, "31": "msObjectiveC2", msObjectiveC2: 31, "32": "msNestedProcVars", msNestedProcVars: 32, "33": "msNonLocalGoto", msNonLocalGoto: 33, "34": "msAdvancedRecords", msAdvancedRecords: 34, "35": "msISOLikeUnaryMinus", msISOLikeUnaryMinus: 35, "36": "msSystemCodePage", msSystemCodePage: 36, "37": "msFinalFields", msFinalFields: 37, "38": "msDefaultUnicodestring", msDefaultUnicodestring: 38, "39": "msTypeHelpers", msTypeHelpers: 39, "40": "msCBlocks", msCBlocks: 40, "41": "msISOLikeIO", msISOLikeIO: 41, "42": "msISOLikeProgramsPara", msISOLikeProgramsPara: 42, "43": "msISOLikeMod", msISOLikeMod: 43, "44": "msArrayOperators", msArrayOperators: 44, "45": "msExternalClass", msExternalClass: 45, "46": "msPrefixedAttributes", msPrefixedAttributes: 46, "47": "msIgnoreAttributes", msIgnoreAttributes: 47, "48": "msOmitRTTI", msOmitRTTI: 48};
  $mod.$rtti.$Enum("TModeSwitch",{minvalue: 0, maxvalue: 48, ordtype: 1, enumtype: this.TModeSwitch});
  $mod.$rtti.$Set("TModeSwitches",{comptype: $mod.$rtti["TModeSwitch"]});
  this.TBoolSwitch = {"0": "bsNone", bsNone: 0, "1": "bsAlign", bsAlign: 1, "2": "bsBoolEval", bsBoolEval: 2, "3": "bsAssertions", bsAssertions: 3, "4": "bsDebugInfo", bsDebugInfo: 4, "5": "bsExtension", bsExtension: 5, "6": "bsImportedData", bsImportedData: 6, "7": "bsLongStrings", bsLongStrings: 7, "8": "bsIOChecks", bsIOChecks: 8, "9": "bsWriteableConst", bsWriteableConst: 9, "10": "bsLocalSymbols", bsLocalSymbols: 10, "11": "bsTypeInfo", bsTypeInfo: 11, "12": "bsOptimization", bsOptimization: 12, "13": "bsOpenStrings", bsOpenStrings: 13, "14": "bsOverflowChecks", bsOverflowChecks: 14, "15": "bsRangeChecks", bsRangeChecks: 15, "16": "bsTypedAddress", bsTypedAddress: 16, "17": "bsSafeDivide", bsSafeDivide: 17, "18": "bsVarStringChecks", bsVarStringChecks: 18, "19": "bsStackframes", bsStackframes: 19, "20": "bsExtendedSyntax", bsExtendedSyntax: 20, "21": "bsReferenceInfo", bsReferenceInfo: 21, "22": "bsHints", bsHints: 22, "23": "bsNotes", bsNotes: 23, "24": "bsWarnings", bsWarnings: 24, "25": "bsMacro", bsMacro: 25, "26": "bsScopedEnums", bsScopedEnums: 26, "27": "bsObjectChecks", bsObjectChecks: 27, "28": "bsPointerMath", bsPointerMath: 28};
  $mod.$rtti.$Enum("TBoolSwitch",{minvalue: 0, maxvalue: 28, ordtype: 1, enumtype: this.TBoolSwitch});
  $mod.$rtti.$Set("TBoolSwitches",{comptype: $mod.$rtti["TBoolSwitch"]});
  this.LetterToBoolSwitch = [$mod.TBoolSwitch.bsAlign,$mod.TBoolSwitch.bsBoolEval,$mod.TBoolSwitch.bsAssertions,$mod.TBoolSwitch.bsDebugInfo,$mod.TBoolSwitch.bsExtension,$mod.TBoolSwitch.bsNone,$mod.TBoolSwitch.bsImportedData,$mod.TBoolSwitch.bsLongStrings,$mod.TBoolSwitch.bsIOChecks,$mod.TBoolSwitch.bsWriteableConst,$mod.TBoolSwitch.bsNone,$mod.TBoolSwitch.bsLocalSymbols,$mod.TBoolSwitch.bsTypeInfo,$mod.TBoolSwitch.bsNone,$mod.TBoolSwitch.bsOptimization,$mod.TBoolSwitch.bsOpenStrings,$mod.TBoolSwitch.bsOverflowChecks,$mod.TBoolSwitch.bsRangeChecks,$mod.TBoolSwitch.bsNone,$mod.TBoolSwitch.bsTypedAddress,$mod.TBoolSwitch.bsSafeDivide,$mod.TBoolSwitch.bsVarStringChecks,$mod.TBoolSwitch.bsStackframes,$mod.TBoolSwitch.bsExtendedSyntax,$mod.TBoolSwitch.bsReferenceInfo,$mod.TBoolSwitch.bsNone];
  this.bsAll = rtl.createSet(null,$mod.TBoolSwitch.bsNone,$mod.TBoolSwitch.bsPointerMath);
  this.bsFPCMode = rtl.createSet($mod.TBoolSwitch.bsPointerMath,$mod.TBoolSwitch.bsWriteableConst);
  this.bsObjFPCMode = rtl.createSet($mod.TBoolSwitch.bsPointerMath,$mod.TBoolSwitch.bsWriteableConst);
  this.bsDelphiMode = rtl.createSet($mod.TBoolSwitch.bsWriteableConst);
  this.bsDelphiUnicodeMode = rtl.createSet($mod.TBoolSwitch.bsWriteableConst);
  this.bsMacPasMode = rtl.createSet($mod.TBoolSwitch.bsPointerMath,$mod.TBoolSwitch.bsWriteableConst);
  this.TValueSwitch = {"0": "vsInterfaces", vsInterfaces: 0};
  $mod.$rtti.$Enum("TValueSwitch",{minvalue: 0, maxvalue: 0, ordtype: 1, enumtype: this.TValueSwitch});
  $mod.$rtti.$Set("TValueSwitches",{comptype: $mod.$rtti["TValueSwitch"]});
  $mod.$rtti.$StaticArray("TValueSwitchArray",{dims: [1], eltype: rtl.string});
  this.vsAllValueSwitches = rtl.createSet(null,$mod.TValueSwitch.vsInterfaces,$mod.TValueSwitch.vsInterfaces);
  this.DefaultVSInterfaces = "com";
  this.DefaultMaxIncludeStackDepth = 20;
  this.TWarnMsgState = {"0": "wmsDefault", wmsDefault: 0, "1": "wmsOn", wmsOn: 1, "2": "wmsOff", wmsOff: 2, "3": "wmsError", wmsError: 3};
  $mod.$rtti.$Enum("TWarnMsgState",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TWarnMsgState});
  this.TTokenOption = {"0": "toForceCaret", toForceCaret: 0, "1": "toOperatorToken", toOperatorToken: 1};
  $mod.$rtti.$Enum("TTokenOption",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTokenOption});
  $mod.$rtti.$Set("TTokenOptions",{comptype: $mod.$rtti["TTokenOption"]});
  rtl.createClass($mod,"TMacroDef",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FName = "";
      this.FValue = "";
    };
    this.Create$1 = function (AName, AValue) {
      this.FName = AName;
      this.FValue = AValue;
    };
  });
  rtl.createClass($mod,"TLineReader",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FFilename = "";
    };
    this.Create$1 = function (AFilename) {
      this.FFilename = AFilename;
    };
  });
  rtl.createClass($mod,"TFileLineReader",$mod.TLineReader,function () {
    this.Create$1 = function (AFilename) {
      $mod.TLineReader.Create$1.call(this,AFilename);
      throw pas.SysUtils.Exception.$create("Create$1",["ToDo TFileLineReader.Create"]);
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.IsEOF = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.ReadLine = function () {
      var Result = "";
      Result = "";
      return Result;
    };
  });
  rtl.createClass($mod,"TStreamLineReader",$mod.TLineReader,function () {
    this.$init = function () {
      $mod.TLineReader.$init.call(this);
      this.FContent = "";
      this.FPos = 0;
    };
    this.InitFromString = function (s) {
      this.FContent = s;
      this.FPos = 0;
    };
    this.IsEOF = function () {
      var Result = false;
      Result = this.FPos >= this.FContent.length;
      return Result;
    };
    this.ReadLine = function () {
      var Result = "";
      var LPos = 0;
      var EOL = false;
      if (this.IsEOF()) return "";
      LPos = this.FPos + 1;
      do {
        this.FPos += 1;
        EOL = this.FContent.charCodeAt(this.FPos - 1) in rtl.createSet(10,13);
      } while (!(this.IsEOF() || EOL));
      if (EOL) {
        Result = pas.System.Copy(this.FContent,LPos,this.FPos - LPos)}
       else Result = pas.System.Copy(this.FContent,LPos,(this.FPos - LPos) + 1);
      if ((!this.IsEOF() && (this.FContent.charAt(this.FPos - 1) === "\r")) && (this.FContent.charAt((this.FPos + 1) - 1) === "\n")) this.FPos += 1;
      return Result;
    };
  });
  rtl.createClass($mod,"TFileStreamLineReader",$mod.TStreamLineReader,function () {
    this.Create$1 = function (AFilename) {
      $mod.TLineReader.Create$1.call(this,AFilename);
      throw pas.SysUtils.Exception.$create("Create$1",["TFileStreamLineReader.Create"]);
    };
  });
  rtl.createClass($mod,"TStringStreamLineReader",$mod.TStreamLineReader,function () {
    this.Create$2 = function (AFilename, ASource) {
      $mod.TLineReader.Create$1.call(this,AFilename);
      this.InitFromString(ASource);
    };
  });
  rtl.createClass($mod,"TMacroReader",$mod.TStringStreamLineReader,function () {
    this.$init = function () {
      $mod.TStringStreamLineReader.$init.call(this);
      this.FCurCol = 0;
      this.FCurRow = 0;
    };
  });
  rtl.createClass($mod,"TBaseFileResolver",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FBaseDirectory = "";
      this.FIncludePaths = null;
      this.FStrictFileCase = false;
    };
    this.$final = function () {
      this.FIncludePaths = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.FindIncludeFileName = function (AName) {
      var Result = "";
      Result = AName;
      return Result;
    };
    this.SetBaseDirectory = function (AValue) {
      if (this.FBaseDirectory === AValue) return;
      this.FBaseDirectory = AValue;
    };
    this.SetStrictFileCase = function (AValue) {
      if (this.FStrictFileCase === AValue) return;
      this.FStrictFileCase = AValue;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FIncludePaths = pas.Classes.TStringList.$create("Create$1");
    };
    this.Destroy = function () {
      rtl.free(this,"FIncludePaths");
      pas.System.TObject.Destroy.call(this);
    };
    this.AddIncludePath = function (APath) {
      var FP = "";
      if (APath === "") {
        this.FIncludePaths.Add(".\/")}
       else {
        FP = APath;
        this.FIncludePaths.Add(FP);
      };
    };
  });
  $mod.$rtti.$ClassRef("TBaseFileResolverClass",{instancetype: $mod.$rtti["TBaseFileResolver"]});
  this.CondDirectiveBool = ["0","1"];
  $mod.$rtti.$Class("TCondDirectiveEvaluator");
  $mod.$rtti.$MethodVar("TCEEvalVarEvent",{procsig: rtl.newTIProcSig([["Sender",$mod.$rtti["TCondDirectiveEvaluator"]],["Name",rtl.string],["Value",rtl.string,4]],rtl.boolean), methodkind: 1});
  $mod.$rtti.$MethodVar("TCEEvalFunctionEvent",{procsig: rtl.newTIProcSig([["Sender",$mod.$rtti["TCondDirectiveEvaluator"]],["Name",rtl.string],["Param",rtl.string],["Value",rtl.string,4]],rtl.boolean), methodkind: 1});
  $mod.$rtti.$MethodVar("TCELogEvent",{procsig: rtl.newTIProcSig([["Sender",$mod.$rtti["TCondDirectiveEvaluator"]],["Args",rtl.jsvalue,8]]), methodkind: 0});
  rtl.createClass($mod,"TCondDirectiveEvaluator",pas.System.TObject,function () {
    this.TPrecedenceLevel = {"0": "ceplFirst", ceplFirst: 0, "1": "ceplSecond", ceplSecond: 1, "2": "ceplThird", ceplThird: 2, "3": "ceplFourth", ceplFourth: 3};
    $mod.$rtti.$Enum("TCondDirectiveEvaluator.TPrecedenceLevel",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TPrecedenceLevel});
    this.TStackItem = function (s) {
      if (s) {
        this.Level = s.Level;
        this.Operathor = s.Operathor;
        this.Operand = s.Operand;
        this.OperandPos = s.OperandPos;
      } else {
        this.Level = 0;
        this.Operathor = 0;
        this.Operand = "";
        this.OperandPos = 0;
      };
      this.$equal = function (b) {
        return (this.Level === b.Level) && ((this.Operathor === b.Operathor) && ((this.Operand === b.Operand) && (this.OperandPos === b.OperandPos)));
      };
    };
    $mod.$rtti.$Record("TCondDirectiveEvaluator.TStackItem",{}).addFields("Level",$mod.$rtti["TCondDirectiveEvaluator.TPrecedenceLevel"],"Operathor",$mod.$rtti["TToken"],"Operand",rtl.string,"OperandPos",rtl.longint);
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FOnEvalFunction = null;
      this.FOnEvalVariable = null;
      this.FOnLog = null;
      this.FTokenStart = 0;
      this.FTokenEnd = 0;
      this.FToken = 0;
      this.FStack = [];
      this.FStackTop = 0;
      this.Expression = "";
      this.MsgPos = 0;
      this.MsgNumber = 0;
      this.MsgType = 0;
      this.MsgPattern = "";
    };
    this.$final = function () {
      this.FOnEvalFunction = undefined;
      this.FOnEvalVariable = undefined;
      this.FOnLog = undefined;
      this.FStack = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.IsFalse = function (Value) {
      var Result = false;
      Result = Value === $mod.CondDirectiveBool[0];
      return Result;
    };
    this.IsTrue = function (Value) {
      var Result = false;
      Result = Value !== $mod.CondDirectiveBool[0];
      return Result;
    };
    this.IsInteger = function (Value, i) {
      var Result = false;
      var Code = 0;
      pas.System.val(Value,i,{get: function () {
          return Code;
        }, set: function (v) {
          Code = v;
        }});
      Result = Code === 0;
      return Result;
    };
    this.IsExtended = function (Value, e) {
      var Result = false;
      var Code = 0;
      pas.System.val$8(Value,e,{get: function () {
          return Code;
        }, set: function (v) {
          Code = v;
        }});
      Result = Code === 0;
      return Result;
    };
    var IdentChars$1 = rtl.createSet(null,97,122,null,65,90,95,null,48,57);
    var AllSpaces = rtl.createSet(9,10,13,32);
    var Digits$1 = rtl.createSet(null,48,57);
    var HexDigits$1 = rtl.createSet(null,48,57);
    this.NextToken = function () {
      var Self = this;
      function ReadIdentifier() {
        var Result = 0;
        Result = $mod.TToken.tkIdentifier;
        var $tmp1 = pas.SysUtils.LowerCase(pas.System.Copy(Self.Expression,Self.FTokenStart,Self.FTokenEnd - Self.FTokenStart));
        if ($tmp1 === "or") {
          Result = $mod.TToken.tkor}
         else if ($tmp1 === "not") {
          Result = $mod.TToken.tknot}
         else if ($tmp1 === "and") {
          Result = $mod.TToken.tkand}
         else if ($tmp1 === "xor") {
          Result = $mod.TToken.tkxor}
         else if ($tmp1 === "shl") {
          Result = $mod.TToken.tkshl}
         else if ($tmp1 === "shr") {
          Result = $mod.TToken.tkshr}
         else if ($tmp1 === "mod") {
          Result = $mod.TToken.tkmod}
         else if ($tmp1 === "div") Result = $mod.TToken.tkdiv;
        return Result;
      };
      var l = 0;
      var Src = "";
      Self.FTokenStart = Self.FTokenEnd;
      Src = Self.Expression;
      l = Src.length;
      while ((Self.FTokenStart <= l) && (Src.charCodeAt(Self.FTokenStart - 1) in AllSpaces)) Self.FTokenStart += 1;
      if (Self.FTokenStart > l) {
        Self.FToken = $mod.TToken.tkEOF;
        Self.FTokenEnd = Self.FTokenStart;
        return;
      };
      Self.FTokenEnd = Self.FTokenStart;
      var $tmp1 = Src.charAt(Self.FTokenEnd - 1);
      if (((($tmp1 >= "a") && ($tmp1 <= "z")) || (($tmp1 >= "A") && ($tmp1 <= "Z"))) || ($tmp1 === "_")) {
        Self.FTokenEnd += 1;
        while ((Self.FTokenEnd <= l) && (Src.charCodeAt(Self.FTokenEnd - 1) in IdentChars$1)) Self.FTokenEnd += 1;
        Self.FToken = ReadIdentifier();
      } else if (($tmp1 >= "0") && ($tmp1 <= "9")) {
        Self.FToken = $mod.TToken.tkNumber;
        Self.FTokenEnd += 1;
        while ((Self.FTokenEnd <= l) && (Src.charCodeAt(Self.FTokenEnd - 1) in Digits$1)) Self.FTokenEnd += 1;
        if (((Self.FTokenEnd <= l) && (Src.charAt(Self.FTokenEnd - 1) === ".")) && ((Self.FTokenEnd === l) || (Src.charAt((Self.FTokenEnd + 1) - 1) !== "."))) {
          Self.FTokenEnd += 1;
          while ((Self.FTokenEnd <= l) && (Src.charCodeAt(Self.FTokenEnd - 1) in Digits$1)) Self.FTokenEnd += 1;
        };
        if ((Self.FTokenEnd <= l) && (Src.charCodeAt(Self.FTokenEnd - 1) in rtl.createSet(101,69))) {
          Self.FTokenEnd += 1;
          if ((Self.FTokenEnd <= l) && (Src.charCodeAt(Self.FTokenEnd - 1) in rtl.createSet(45,43))) Self.FTokenEnd += 1;
          while ((Self.FTokenEnd <= l) && (Src.charCodeAt(Self.FTokenEnd - 1) in Digits$1)) Self.FTokenEnd += 1;
        };
      } else if ($tmp1 === "$") {
        Self.FToken = $mod.TToken.tkNumber;
        while ((Self.FTokenEnd <= l) && (Src.charCodeAt(Self.FTokenEnd - 1) in HexDigits$1)) Self.FTokenEnd += 1;
      } else if ($tmp1 === "%") {
        Self.FToken = $mod.TToken.tkNumber;
        while ((Self.FTokenEnd <= l) && (Src.charCodeAt(Self.FTokenEnd - 1) in rtl.createSet(48,49))) Self.FTokenEnd += 1;
      } else if ($tmp1 === "(") {
        Self.FToken = $mod.TToken.tkBraceOpen;
        Self.FTokenEnd += 1;
      } else if ($tmp1 === ")") {
        Self.FToken = $mod.TToken.tkBraceClose;
        Self.FTokenEnd += 1;
      } else if ($tmp1 === "=") {
        Self.FToken = $mod.TToken.tkEqual;
        Self.FTokenEnd += 1;
      } else if ($tmp1 === "<") {
        Self.FTokenEnd += 1;
        var $tmp2 = pas.System.Copy(Src,Self.FTokenEnd,1);
        if ($tmp2 === "=") {
          Self.FToken = $mod.TToken.tkLessEqualThan;
          Self.FTokenEnd += 1;
        } else if ($tmp2 === "<") {
          Self.FToken = $mod.TToken.tkshl;
          Self.FTokenEnd += 1;
        } else if ($tmp2 === ">") {
          Self.FToken = $mod.TToken.tkNotEqual;
          Self.FTokenEnd += 1;
        } else {
          Self.FToken = $mod.TToken.tkLessThan;
        };
      } else if ($tmp1 === ">") {
        Self.FTokenEnd += 1;
        var $tmp3 = pas.System.Copy(Src,Self.FTokenEnd,1);
        if ($tmp3 === "=") {
          Self.FToken = $mod.TToken.tkGreaterEqualThan;
          Self.FTokenEnd += 1;
        } else if ($tmp3 === ">") {
          Self.FToken = $mod.TToken.tkshr;
          Self.FTokenEnd += 1;
        } else {
          Self.FToken = $mod.TToken.tkGreaterThan;
        };
      } else if ($tmp1 === "+") {
        Self.FToken = $mod.TToken.tkPlus;
        Self.FTokenEnd += 1;
      } else if ($tmp1 === "-") {
        Self.FToken = $mod.TToken.tkMinus;
        Self.FTokenEnd += 1;
      } else if ($tmp1 === "*") {
        Self.FToken = $mod.TToken.tkMul;
        Self.FTokenEnd += 1;
      } else if ($tmp1 === "\/") {
        Self.FToken = $mod.TToken.tkDivision;
        Self.FTokenEnd += 1;
      } else if ($tmp1 === "'") {
        Self.FToken = $mod.TToken.tkString;
        do {
          Self.FTokenEnd += 1;
          if (Self.FTokenEnd > l) Self.Log($mod.TMessageType.mtError,1002,rtl.getResStr(pas.PScanner,"SErrOpenString"),[],0);
          var $tmp4 = Src.charAt(Self.FTokenEnd - 1);
          if ($tmp4 === "'") {
            Self.FTokenEnd += 1;
            if ((Self.FTokenEnd > l) || (Src.charAt(Self.FTokenEnd - 1) !== "'")) break;
          } else if (($tmp4 === "\n") || ($tmp4 === "\r")) Self.Log($mod.TMessageType.mtError,1002,rtl.getResStr(pas.PScanner,"SErrOpenString"),[],0);
        } while (!false);
      } else {
        Self.FToken = $mod.TToken.tkEOF;
      };
    };
    this.Log = function (aMsgType, aMsgNumber, aMsgFmt, Args, MsgPos) {
      if (MsgPos < 1) MsgPos = this.FTokenEnd;
      this.MsgType = aMsgType;
      this.MsgNumber = aMsgNumber;
      this.MsgPattern = aMsgFmt;
      if (this.FOnLog != null) {
        this.FOnLog(this,Args);
        if (!(aMsgType in rtl.createSet($mod.TMessageType.mtError,$mod.TMessageType.mtFatal))) return;
      };
      throw $mod.EScannerError.$create("CreateFmt",[(this.MsgPattern + " at ") + pas.SysUtils.IntToStr(MsgPos),Args]);
    };
    this.LogXExpectedButTokenFound = function (X, ErrorPos) {
      this.Log($mod.TMessageType.mtError,1021,rtl.getResStr(pas.PScanner,"SErrXExpectedButYFound"),[X,$mod.TokenInfos[this.FToken]],ErrorPos);
    };
    this.ReadOperand = function (Skip) {
      var i = 0;
      var e = 0.0;
      var S = "";
      var aName = "";
      var Param = "";
      var Code = 0;
      var NameStartP = 0;
      var p = 0;
      var Lvl = 0;
      var $tmp1 = this.FToken;
      if ($tmp1 === $mod.TToken.tknot) {
        this.NextToken();
        this.ReadOperand(Skip);
        if (!Skip) this.FStack[this.FStackTop].Operand = $mod.CondDirectiveBool[+this.IsFalse(this.FStack[this.FStackTop].Operand)];
      } else if ($tmp1 === $mod.TToken.tkMinus) {
        this.NextToken();
        this.ReadOperand(Skip);
        if (!Skip) {
          i = pas.SysUtils.StrToInt64Def(this.FStack[this.FStackTop].Operand,0);
          this.FStack[this.FStackTop].Operand = pas.SysUtils.IntToStr(-i);
        };
      } else if ($tmp1 === $mod.TToken.tkPlus) {
        this.NextToken();
        this.ReadOperand(Skip);
        if (!Skip) {
          i = pas.SysUtils.StrToInt64Def(this.FStack[this.FStackTop].Operand,0);
          this.FStack[this.FStackTop].Operand = pas.SysUtils.IntToStr(i);
        };
      } else if ($tmp1 === $mod.TToken.tkNumber) {
        if (!Skip) {
          S = this.GetTokenString();
          pas.System.val(S,{get: function () {
              return i;
            }, set: function (v) {
              i = v;
            }},{get: function () {
              return Code;
            }, set: function (v) {
              Code = v;
            }});
          if (Code === 0) {
            this.Push(pas.SysUtils.IntToStr(i),this.FTokenStart);
          } else {
            pas.System.val$8(S,{get: function () {
                return e;
              }, set: function (v) {
                e = v;
              }},{get: function () {
                return Code;
              }, set: function (v) {
                Code = v;
              }});
            if (Code > 0) this.Log($mod.TMessageType.mtError,1022,rtl.getResStr(pas.PScanner,"SErrRangeCheck"),[],0);
            if (e === 0) ;
            this.Push(S,this.FTokenStart);
          };
        };
        this.NextToken();
      } else if ($tmp1 === $mod.TToken.tkString) {
        if (!Skip) this.Push(this.GetStringLiteralValue(),this.FTokenStart);
        this.NextToken();
      } else if ($tmp1 === $mod.TToken.tkIdentifier) {
        if (Skip) {
          this.NextToken();
          if (this.FToken === $mod.TToken.tkBraceOpen) {
            this.NextToken();
            if (this.FToken === $mod.TToken.tkIdentifier) this.NextToken();
            if (this.FToken !== $mod.TToken.tkBraceClose) this.LogXExpectedButTokenFound(")",0);
            this.NextToken();
          };
        } else {
          aName = this.GetTokenString();
          p = this.FTokenStart;
          this.NextToken();
          if (this.FToken === $mod.TToken.tkBraceOpen) {
            NameStartP = this.FTokenStart;
            this.NextToken();
            Param = "";
            if (this.FToken === $mod.TToken.tkIdentifier) {
              Param = this.GetTokenString();
              this.NextToken();
            };
            if (this.FToken !== $mod.TToken.tkBraceClose) this.LogXExpectedButTokenFound(")",0);
            if (!this.FOnEvalFunction(this,aName,Param,{get: function () {
                return S;
              }, set: function (v) {
                S = v;
              }})) {
              this.FTokenStart = NameStartP;
              this.FTokenEnd = this.FTokenStart + aName.length;
              this.LogXExpectedButTokenFound("function",0);
            };
            this.Push(S,p);
            this.NextToken();
          } else {
            if (this.FOnEvalVariable(this,aName,{get: function () {
                return S;
              }, set: function (v) {
                S = v;
              }})) {
              this.Push(S,p)}
             else {
              this.Push($mod.CondDirectiveBool[0],p);
            };
          };
        }}
       else if ($tmp1 === $mod.TToken.tkBraceOpen) {
        this.NextToken();
        if (Skip) {
          Lvl = 1;
          do {
            var $tmp2 = this.FToken;
            if ($tmp2 === $mod.TToken.tkEOF) {
              this.LogXExpectedButTokenFound(")",0)}
             else if ($tmp2 === $mod.TToken.tkBraceOpen) {
              Lvl += 1}
             else if ($tmp2 === $mod.TToken.tkBraceClose) {
              Lvl -= 1;
              if (Lvl === 0) break;
            };
            this.NextToken();
          } while (!false);
        } else {
          this.ReadExpression();
          if (this.FToken !== $mod.TToken.tkBraceClose) this.LogXExpectedButTokenFound(")",0);
        };
        this.NextToken();
      } else {
        this.LogXExpectedButTokenFound("identifier",0);
      };
    };
    this.ReadExpression = function () {
      var Self = this;
      var OldStackTop = 0;
      function ReadBinary(Level, NewOperator) {
        Self.ResolveStack(OldStackTop,Level,NewOperator);
        Self.NextToken();
        Self.ReadOperand(false);
      };
      OldStackTop = Self.FStackTop;
      Self.ReadOperand(false);
      do {
        var $tmp1 = Self.FToken;
        if (($tmp1 === $mod.TToken.tkEOF) || ($tmp1 === $mod.TToken.tkBraceClose)) {
          Self.ResolveStack(OldStackTop,Self.TPrecedenceLevel.ceplFourth,$mod.TToken.tkEOF);
          return;
        } else if ($tmp1 === $mod.TToken.tkand) {
          Self.ResolveStack(OldStackTop,$mod.TCondDirectiveEvaluator.TPrecedenceLevel.ceplSecond,$mod.TToken.tkand);
          Self.NextToken();
          if ((Self.FStackTop === (OldStackTop + 1)) && Self.IsFalse(Self.FStack[Self.FStackTop].Operand)) {
            do {
              Self.ReadOperand(true);
              if (Self.FToken !== $mod.TToken.tkand) break;
              Self.NextToken();
            } while (!false);
            Self.FStack[Self.FStackTop].Operathor = $mod.TToken.tkEOF;
          } else Self.ReadOperand(false);
        } else if (((((($tmp1 === $mod.TToken.tkMul) || ($tmp1 === $mod.TToken.tkDivision)) || ($tmp1 === $mod.TToken.tkdiv)) || ($tmp1 === $mod.TToken.tkmod)) || ($tmp1 === $mod.TToken.tkshl)) || ($tmp1 === $mod.TToken.tkshr)) {
          ReadBinary($mod.TCondDirectiveEvaluator.TPrecedenceLevel.ceplSecond,Self.FToken)}
         else if ($tmp1 === $mod.TToken.tkor) {
          Self.ResolveStack(OldStackTop,$mod.TCondDirectiveEvaluator.TPrecedenceLevel.ceplThird,$mod.TToken.tkor);
          Self.NextToken();
          if ((Self.FStackTop === (OldStackTop + 1)) && Self.IsTrue(Self.FStack[Self.FStackTop].Operand)) {
            do {
              Self.ReadOperand(true);
              if (!(Self.FToken in rtl.createSet($mod.TToken.tkand,$mod.TToken.tkor))) break;
              Self.NextToken();
            } while (!false);
            Self.FStack[Self.FStackTop].Operathor = $mod.TToken.tkEOF;
          } else Self.ReadOperand(false);
        } else if ((($tmp1 === $mod.TToken.tkPlus) || ($tmp1 === $mod.TToken.tkMinus)) || ($tmp1 === $mod.TToken.tkxor)) {
          ReadBinary($mod.TCondDirectiveEvaluator.TPrecedenceLevel.ceplThird,Self.FToken)}
         else if (((((($tmp1 === $mod.TToken.tkEqual) || ($tmp1 === $mod.TToken.tkNotEqual)) || ($tmp1 === $mod.TToken.tkLessThan)) || ($tmp1 === $mod.TToken.tkGreaterThan)) || ($tmp1 === $mod.TToken.tkLessEqualThan)) || ($tmp1 === $mod.TToken.tkGreaterEqualThan)) {
          ReadBinary($mod.TCondDirectiveEvaluator.TPrecedenceLevel.ceplFourth,Self.FToken)}
         else {
          Self.LogXExpectedButTokenFound("operator",0);
        };
      } while (!false);
    };
    this.ResolveStack = function (MinStackLvl, Level, NewOperator) {
      var A = "";
      var B = "";
      var R = "";
      var Op = 0;
      var AInt = 0;
      var BInt = 0;
      var AFloat = 0.0;
      var BFloat = 0.0;
      var BPos = 0;
      while ((this.FStackTop > (MinStackLvl + 1)) && (this.FStack[this.FStackTop - 1].Level <= Level)) {
        B = this.FStack[this.FStackTop].Operand;
        BPos = this.FStack[this.FStackTop].OperandPos;
        this.FStackTop -= 1;
        Op = this.FStack[this.FStackTop].Operathor;
        A = this.FStack[this.FStackTop].Operand;
        try {
          var $tmp1 = Op;
          if ($tmp1 === $mod.TToken.tkand) {
            R = $mod.CondDirectiveBool[+(this.IsTrue(A) && this.IsTrue(B))]}
           else if ($tmp1 === $mod.TToken.tkor) {
            R = $mod.CondDirectiveBool[+(this.IsTrue(A) || this.IsTrue(B))]}
           else if ($tmp1 === $mod.TToken.tkxor) {
            R = $mod.CondDirectiveBool[+(this.IsTrue(A) ^ this.IsTrue(B))]}
           else if ((((((($tmp1 === $mod.TToken.tkMul) || ($tmp1 === $mod.TToken.tkdiv)) || ($tmp1 === $mod.TToken.tkmod)) || ($tmp1 === $mod.TToken.tkshl)) || ($tmp1 === $mod.TToken.tkshr)) || ($tmp1 === $mod.TToken.tkPlus)) || ($tmp1 === $mod.TToken.tkMinus)) {
            if (this.IsInteger(A,{get: function () {
                return AInt;
              }, set: function (v) {
                AInt = v;
              }})) {
              if (this.IsInteger(B,{get: function () {
                  return BInt;
                }, set: function (v) {
                  BInt = v;
                }})) {
                var $tmp2 = Op;
                if ($tmp2 === $mod.TToken.tkMul) {
                  R = pas.SysUtils.IntToStr(AInt * BInt)}
                 else if ($tmp2 === $mod.TToken.tkdiv) {
                  R = pas.SysUtils.IntToStr(Math.floor(AInt / BInt))}
                 else if ($tmp2 === $mod.TToken.tkmod) {
                  R = pas.SysUtils.IntToStr(AInt % BInt)}
                 else if ($tmp2 === $mod.TToken.tkshl) {
                  R = pas.SysUtils.IntToStr(AInt << BInt)}
                 else if ($tmp2 === $mod.TToken.tkshr) {
                  R = pas.SysUtils.IntToStr(AInt >>> BInt)}
                 else if ($tmp2 === $mod.TToken.tkPlus) {
                  R = pas.SysUtils.IntToStr(AInt + BInt)}
                 else if ($tmp2 === $mod.TToken.tkMinus) R = pas.SysUtils.IntToStr(AInt - BInt);
              } else if (this.IsExtended(B,{get: function () {
                  return BFloat;
                }, set: function (v) {
                  BFloat = v;
                }})) {
                var $tmp3 = Op;
                if ($tmp3 === $mod.TToken.tkMul) {
                  R = pas.SysUtils.FloatToStr(AInt * BFloat)}
                 else if ($tmp3 === $mod.TToken.tkPlus) {
                  R = pas.SysUtils.FloatToStr(AInt + BFloat)}
                 else if ($tmp3 === $mod.TToken.tkMinus) {
                  R = pas.SysUtils.FloatToStr(AInt - BFloat)}
                 else {
                  this.LogXExpectedButTokenFound("integer",BPos);
                };
              } else this.LogXExpectedButTokenFound("integer",BPos);
            } else if (this.IsExtended(A,{get: function () {
                return AFloat;
              }, set: function (v) {
                AFloat = v;
              }})) {
              if (this.IsExtended(B,{get: function () {
                  return BFloat;
                }, set: function (v) {
                  BFloat = v;
                }})) {
                var $tmp4 = Op;
                if ($tmp4 === $mod.TToken.tkMul) {
                  R = pas.SysUtils.FloatToStr(AFloat * BFloat)}
                 else if ($tmp4 === $mod.TToken.tkPlus) {
                  R = pas.SysUtils.FloatToStr(AFloat + BFloat)}
                 else if ($tmp4 === $mod.TToken.tkMinus) {
                  R = pas.SysUtils.FloatToStr(AFloat - BFloat)}
                 else {
                  this.LogXExpectedButTokenFound("float",BPos);
                };
              } else this.LogXExpectedButTokenFound("float",BPos);
            } else this.Log($mod.TMessageType.mtError,1024,rtl.getResStr(pas.PScanner,"SErrOperandAndOperatorMismatch"),[],0)}
           else if ($tmp1 === $mod.TToken.tkDivision) {
            if (this.IsExtended(A,{get: function () {
                return AFloat;
              }, set: function (v) {
                AFloat = v;
              }})) {
              if (this.IsExtended(B,{get: function () {
                  return BFloat;
                }, set: function (v) {
                  BFloat = v;
                }})) {
                R = pas.SysUtils.FloatToStr(AFloat / BFloat)}
               else this.LogXExpectedButTokenFound("float",BPos);
            } else this.Log($mod.TMessageType.mtError,1024,rtl.getResStr(pas.PScanner,"SErrOperandAndOperatorMismatch"),[],0)}
           else if (((((($tmp1 === $mod.TToken.tkEqual) || ($tmp1 === $mod.TToken.tkNotEqual)) || ($tmp1 === $mod.TToken.tkLessThan)) || ($tmp1 === $mod.TToken.tkGreaterThan)) || ($tmp1 === $mod.TToken.tkLessEqualThan)) || ($tmp1 === $mod.TToken.tkGreaterEqualThan)) {
            if (this.IsInteger(A,{get: function () {
                return AInt;
              }, set: function (v) {
                AInt = v;
              }}) && this.IsInteger(B,{get: function () {
                return BInt;
              }, set: function (v) {
                BInt = v;
              }})) {
              var $tmp5 = Op;
              if ($tmp5 === $mod.TToken.tkEqual) {
                R = $mod.CondDirectiveBool[+(AInt === BInt)]}
               else if ($tmp5 === $mod.TToken.tkNotEqual) {
                R = $mod.CondDirectiveBool[+(AInt !== BInt)]}
               else if ($tmp5 === $mod.TToken.tkLessThan) {
                R = $mod.CondDirectiveBool[+(AInt < BInt)]}
               else if ($tmp5 === $mod.TToken.tkGreaterThan) {
                R = $mod.CondDirectiveBool[+(AInt > BInt)]}
               else if ($tmp5 === $mod.TToken.tkLessEqualThan) {
                R = $mod.CondDirectiveBool[+(AInt <= BInt)]}
               else if ($tmp5 === $mod.TToken.tkGreaterEqualThan) R = $mod.CondDirectiveBool[+(AInt >= BInt)];
            } else if (this.IsExtended(A,{get: function () {
                return AFloat;
              }, set: function (v) {
                AFloat = v;
              }}) && this.IsExtended(B,{get: function () {
                return BFloat;
              }, set: function (v) {
                BFloat = v;
              }})) {
              var $tmp6 = Op;
              if ($tmp6 === $mod.TToken.tkEqual) {
                R = $mod.CondDirectiveBool[+(AFloat === BFloat)]}
               else if ($tmp6 === $mod.TToken.tkNotEqual) {
                R = $mod.CondDirectiveBool[+(AFloat !== BFloat)]}
               else if ($tmp6 === $mod.TToken.tkLessThan) {
                R = $mod.CondDirectiveBool[+(AFloat < BFloat)]}
               else if ($tmp6 === $mod.TToken.tkGreaterThan) {
                R = $mod.CondDirectiveBool[+(AFloat > BFloat)]}
               else if ($tmp6 === $mod.TToken.tkLessEqualThan) {
                R = $mod.CondDirectiveBool[+(AFloat <= BFloat)]}
               else if ($tmp6 === $mod.TToken.tkGreaterEqualThan) R = $mod.CondDirectiveBool[+(AFloat >= BFloat)];
            } else {
              var $tmp7 = Op;
              if ($tmp7 === $mod.TToken.tkEqual) {
                R = $mod.CondDirectiveBool[+(A === B)]}
               else if ($tmp7 === $mod.TToken.tkNotEqual) {
                R = $mod.CondDirectiveBool[+(A !== B)]}
               else if ($tmp7 === $mod.TToken.tkLessThan) {
                R = $mod.CondDirectiveBool[+(A < B)]}
               else if ($tmp7 === $mod.TToken.tkGreaterThan) {
                R = $mod.CondDirectiveBool[+(A > B)]}
               else if ($tmp7 === $mod.TToken.tkLessEqualThan) {
                R = $mod.CondDirectiveBool[+(A <= B)]}
               else if ($tmp7 === $mod.TToken.tkGreaterEqualThan) R = $mod.CondDirectiveBool[+(A >= B)];
            };
          } else {
            this.Log($mod.TMessageType.mtError,1024,rtl.getResStr(pas.PScanner,"SErrOperandAndOperatorMismatch"),[],0);
          };
        } catch ($e) {
          if (pas.SysUtils.EDivByZero.isPrototypeOf($e)) {
            var E = $e;
            this.Log($mod.TMessageType.mtError,1023,rtl.getResStr(pas.PScanner,"SErrDivByZero"),[],0);
          } else if (pas.SysUtils.EZeroDivide.isPrototypeOf($e)) {
            var E = $e;
            this.Log($mod.TMessageType.mtError,1023,rtl.getResStr(pas.PScanner,"SErrDivByZero"),[],0);
          } else if (pas.SysUtils.EMathError.isPrototypeOf($e)) {
            var E = $e;
            this.Log($mod.TMessageType.mtError,1022,(rtl.getResStr(pas.PScanner,"SErrRangeCheck") + " ") + E.fMessage,[],0);
          } else if (pas.SysUtils.EIntError.isPrototypeOf($e)) {
            var E = $e;
            this.Log($mod.TMessageType.mtError,1022,(rtl.getResStr(pas.PScanner,"SErrRangeCheck") + " ") + E.fMessage,[],0);
          } else throw $e
        };
        this.FStack[this.FStackTop].Operand = R;
        this.FStack[this.FStackTop].OperandPos = BPos;
      };
      this.FStack[this.FStackTop].Operathor = NewOperator;
      this.FStack[this.FStackTop].Level = Level;
    };
    this.GetTokenString = function () {
      var Result = "";
      Result = pas.System.Copy(this.Expression,this.FTokenStart,this.FTokenEnd - this.FTokenStart);
      return Result;
    };
    this.GetStringLiteralValue = function () {
      var Result = "";
      var Src = "";
      var p = 0;
      var l = 0;
      var StartP = 0;
      Result = "";
      p = this.FTokenStart;
      Src = this.Expression;
      l = Src.length;
      do {
        if ((p > l) || (Src.charAt(p - 1) !== "'")) {
          this.Log($mod.TMessageType.mtError,1001,rtl.getResStr(pas.PScanner,"SErrInvalidCharacter"),["#0"],0)}
         else {
          p += 1;
          StartP = p;
          do {
            if (p > l) {
              this.Log($mod.TMessageType.mtError,1001,rtl.getResStr(pas.PScanner,"SErrInvalidCharacter"),["#0"],0)}
             else if (Src.charAt(p - 1) === "'") {
              break}
             else p += 1;
          } while (!false);
          if (p > StartP) Result = Result + pas.System.Copy(this.Expression,StartP,p - StartP);
          p += 1;
        };
      } while (!false);
      return Result;
    };
    this.Push = function (AnOperand, OperandPosition) {
      this.FStackTop += 1;
      if (this.FStackTop >= rtl.length(this.FStack)) this.FStack = rtl.arraySetLength(this.FStack,this.TStackItem,(rtl.length(this.FStack) * 2) + 4);
      var $with1 = this.FStack[this.FStackTop];
      $with1.Operand = AnOperand;
      $with1.OperandPos = OperandPosition;
      $with1.Operathor = $mod.TToken.tkEOF;
      $with1.Level = $mod.TCondDirectiveEvaluator.TPrecedenceLevel.ceplFourth;
    };
    this.Create$1 = function () {
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.Eval = function (Expr) {
      var Result = false;
      this.Expression = Expr;
      this.MsgType = $mod.TMessageType.mtInfo;
      this.MsgNumber = 0;
      this.MsgPattern = "";
      if (Expr === "") return false;
      this.FTokenStart = 1;
      this.FTokenEnd = this.FTokenStart;
      this.FStackTop = -1;
      this.NextToken();
      this.ReadExpression();
      Result = this.IsTrue(this.FStack[0].Operand);
      return Result;
    };
  });
  rtl.createClass($mod,"EScannerError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EFileNotFoundError",pas.SysUtils.Exception,function () {
  });
  this.TPascalScannerPPSkipMode = {"0": "ppSkipNone", ppSkipNone: 0, "1": "ppSkipIfBranch", ppSkipIfBranch: 1, "2": "ppSkipElseBranch", ppSkipElseBranch: 2, "3": "ppSkipAll", ppSkipAll: 3};
  $mod.$rtti.$Enum("TPascalScannerPPSkipMode",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TPascalScannerPPSkipMode});
  this.TPOption = {"0": "po_delphi", po_delphi: 0, "1": "po_KeepScannerError", po_KeepScannerError: 1, "2": "po_CAssignments", po_CAssignments: 2, "3": "po_ResolveStandardTypes", po_ResolveStandardTypes: 3, "4": "po_AsmWhole", po_AsmWhole: 4, "5": "po_NoOverloadedProcs", po_NoOverloadedProcs: 5, "6": "po_KeepClassForward", po_KeepClassForward: 6, "7": "po_ArrayRangeExpr", po_ArrayRangeExpr: 7, "8": "po_SelfToken", po_SelfToken: 8, "9": "po_CheckModeSwitches", po_CheckModeSwitches: 9, "10": "po_CheckCondFunction", po_CheckCondFunction: 10, "11": "po_StopOnErrorDirective", po_StopOnErrorDirective: 11, "12": "po_ExtConstWithoutExpr", po_ExtConstWithoutExpr: 12, "13": "po_StopOnUnitInterface", po_StopOnUnitInterface: 13};
  $mod.$rtti.$Enum("TPOption",{minvalue: 0, maxvalue: 13, ordtype: 1, enumtype: this.TPOption});
  $mod.$rtti.$Set("TPOptions",{comptype: $mod.$rtti["TPOption"]});
  this.TPasSourcePos = function (s) {
    if (s) {
      this.FileName = s.FileName;
      this.Row = s.Row;
      this.Column = s.Column;
    } else {
      this.FileName = "";
      this.Row = 0;
      this.Column = 0;
    };
    this.$equal = function (b) {
      return (this.FileName === b.FileName) && ((this.Row === b.Row) && (this.Column === b.Column));
    };
  };
  $mod.$rtti.$Record("TPasSourcePos",{}).addFields("FileName",rtl.string,"Row",rtl.longword,"Column",rtl.longword);
  this.DefPasSourcePos = new $mod.TPasSourcePos({FileName: "", Row: 0, Column: 0});
  $mod.$rtti.$MethodVar("TPScannerLogHandler",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Msg",rtl.string,2]]), methodkind: 0});
  this.TPScannerLogEvent = {"0": "sleFile", sleFile: 0, "1": "sleLineNumber", sleLineNumber: 1, "2": "sleConditionals", sleConditionals: 2, "3": "sleDirective", sleDirective: 3};
  $mod.$rtti.$Enum("TPScannerLogEvent",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TPScannerLogEvent});
  $mod.$rtti.$Set("TPScannerLogEvents",{comptype: $mod.$rtti["TPScannerLogEvent"]});
  $mod.$rtti.$MethodVar("TPScannerDirectiveEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Directive",rtl.string],["Param",rtl.string],["Handled",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TPScannerFormatPathEvent",{procsig: rtl.newTIProcSig([["aPath",rtl.string,2]],rtl.string), methodkind: 1});
  $mod.$rtti.$MethodVar("TPScannerWarnEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Identifier",rtl.string],["State",$mod.$rtti["TWarnMsgState"]],["Handled",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TPScannerModeDirective",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["NewMode",$mod.$rtti["TModeSwitch"]],["Before",rtl.boolean],["Handled",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TPascalScanner",pas.System.TObject,function () {
    this.TWarnMsgNumberState = function (s) {
      if (s) {
        this.Number = s.Number;
        this.State = s.State;
      } else {
        this.Number = 0;
        this.State = 0;
      };
      this.$equal = function (b) {
        return (this.Number === b.Number) && (this.State === b.State);
      };
    };
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FAllowedBoolSwitches = {};
      this.FAllowedModeSwitches = {};
      this.FAllowedValueSwitches = {};
      this.FConditionEval = null;
      this.FCurrentBoolSwitches = {};
      this.FCurrentModeSwitches = {};
      this.FCurrentValueSwitches = rtl.arraySetLength(null,"",1);
      this.FCurTokenPos = new $mod.TPasSourcePos();
      this.FLastMsg = "";
      this.FLastMsgArgs = [];
      this.FLastMsgNumber = 0;
      this.FLastMsgPattern = "";
      this.FLastMsgType = 0;
      this.FFileResolver = null;
      this.FCurSourceFile = null;
      this.FCurFilename = "";
      this.FCurRow = 0;
      this.FCurColumnOffset = 0;
      this.FCurToken = 0;
      this.FCurTokenString = "";
      this.FCurLine = "";
      this.FMaxIncludeStackDepth = 0;
      this.FModuleRow = 0;
      this.FMacros = null;
      this.FDefines = null;
      this.FNonTokens = {};
      this.FOnDirective = null;
      this.FOnEvalFunction = null;
      this.FOnEvalVariable = null;
      this.FOnFormatPath = null;
      this.FOnModeChanged = null;
      this.FOnWarnDirective = null;
      this.FOptions = {};
      this.FLogEvents = {};
      this.FOnLog = null;
      this.FPreviousToken = 0;
      this.FReadOnlyBoolSwitches = {};
      this.FReadOnlyModeSwitches = {};
      this.FReadOnlyValueSwitches = {};
      this.FSkipComments = false;
      this.FSkipGlobalSwitches = false;
      this.FSkipWhiteSpace = false;
      this.FTokenOptions = {};
      this.FTokenPos = 0;
      this.FIncludeStack = null;
      this.FFiles = null;
      this.FWarnMsgStates = [];
      this.PPSkipMode = 0;
      this.PPIsSkipping = false;
      this.PPSkipStackIndex = 0;
      this.PPSkipModeStack = rtl.arraySetLength(null,0,256);
      this.PPIsSkippingStack = rtl.arraySetLength(null,false,256);
    };
    this.$final = function () {
      this.FAllowedBoolSwitches = undefined;
      this.FAllowedModeSwitches = undefined;
      this.FAllowedValueSwitches = undefined;
      this.FConditionEval = undefined;
      this.FCurrentBoolSwitches = undefined;
      this.FCurrentModeSwitches = undefined;
      this.FCurrentValueSwitches = undefined;
      this.FCurTokenPos = undefined;
      this.FLastMsgArgs = undefined;
      this.FFileResolver = undefined;
      this.FCurSourceFile = undefined;
      this.FMacros = undefined;
      this.FDefines = undefined;
      this.FNonTokens = undefined;
      this.FOnDirective = undefined;
      this.FOnEvalFunction = undefined;
      this.FOnEvalVariable = undefined;
      this.FOnFormatPath = undefined;
      this.FOnModeChanged = undefined;
      this.FOnWarnDirective = undefined;
      this.FOptions = undefined;
      this.FLogEvents = undefined;
      this.FOnLog = undefined;
      this.FReadOnlyBoolSwitches = undefined;
      this.FReadOnlyModeSwitches = undefined;
      this.FReadOnlyValueSwitches = undefined;
      this.FTokenOptions = undefined;
      this.FIncludeStack = undefined;
      this.FFiles = undefined;
      this.FWarnMsgStates = undefined;
      this.PPSkipModeStack = undefined;
      this.PPIsSkippingStack = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetCurColumn = function () {
      var Result = 0;
      if (this.FTokenPos > 0) {
        Result = (this.FTokenPos - 1) + this.FCurColumnOffset}
       else Result = this.FCurColumnOffset;
      return Result;
    };
    this.GetCurrentValueSwitch = function (V) {
      var Result = "";
      Result = this.FCurrentValueSwitches[V];
      return Result;
    };
    this.GetForceCaret = function () {
      var Result = false;
      Result = $mod.TTokenOption.toForceCaret in this.FTokenOptions;
      return Result;
    };
    this.GetMacrosOn = function () {
      var Result = false;
      Result = $mod.TBoolSwitch.bsMacro in this.FCurrentBoolSwitches;
      return Result;
    };
    this.IndexOfWarnMsgState = function (number, InsertPos) {
      var Result = 0;
      var l = 0;
      var r = 0;
      var m = 0;
      var CurNumber = 0;
      l = 0;
      r = rtl.length(this.FWarnMsgStates) - 1;
      m = 0;
      while (l <= r) {
        m = Math.floor((l + r) / 2);
        CurNumber = this.FWarnMsgStates[m].Number;
        if (number > CurNumber) {
          l = m + 1}
         else if (number < CurNumber) {
          r = m - 1}
         else return m;
      };
      if (!InsertPos) return -1;
      if (rtl.length(this.FWarnMsgStates) === 0) return 0;
      if ((m < rtl.length(this.FWarnMsgStates)) && (this.FWarnMsgStates[m].Number <= number)) m += 1;
      Result = m;
      return Result;
    };
    this.OnCondEvalFunction = function (Sender, Name, Param, Value) {
      var Result = false;
      if (pas.SysUtils.CompareText(Name,"defined") === 0) {
        if (!pas.SysUtils.IsValidIdent(Param,false,false)) Sender.Log($mod.TMessageType.mtError,1021,rtl.getResStr(pas.PScanner,"SErrXExpectedButYFound"),["identifier",Param],0);
        Value.set($mod.CondDirectiveBool[+this.IsDefined(Param)]);
        return true;
      } else if (pas.SysUtils.CompareText(Name,"undefined") === 0) {
        if (!pas.SysUtils.IsValidIdent(Param,false,false)) Sender.Log($mod.TMessageType.mtError,1021,rtl.getResStr(pas.PScanner,"SErrXExpectedButYFound"),["identifier",Param],0);
        Value.set($mod.CondDirectiveBool[+!this.IsDefined(Param)]);
        return true;
      } else if (pas.SysUtils.CompareText(Name,"option") === 0) {
        if ((Param.length !== 1) || !(Param.charCodeAt(0) in rtl.createSet(null,97,122,null,65,90))) Sender.Log($mod.TMessageType.mtError,1021,rtl.getResStr(pas.PScanner,"SErrXExpectedButYFound"),["letter",Param],0);
        Value.set($mod.CondDirectiveBool[+this.IfOpt(Param.charAt(0))]);
        return true;
      };
      if (this.FOnEvalFunction != null) {
        Result = this.FOnEvalFunction(Sender,Name,Param,Value);
        if (!($mod.TPOption.po_CheckCondFunction in this.FOptions)) {
          Value.set("0");
          Result = true;
        };
        return Result;
      };
      if ($mod.TPOption.po_CheckCondFunction in this.FOptions) {
        Value.set("");
        Result = false;
      } else {
        Value.set("0");
        Result = true;
      };
      return Result;
    };
    this.OnCondEvalLog = function (Sender, Args) {
      if (Sender.MsgType <= $mod.TMessageType.mtError) {
        this.SetCurMsg(Sender.MsgType,Sender.MsgNumber,Sender.MsgPattern,Args);
        throw $mod.EScannerError.$create("Create$1",[this.FLastMsg]);
      } else this.DoLog$1(Sender.MsgType,Sender.MsgNumber,Sender.MsgPattern,Args,true);
    };
    this.OnCondEvalVar = function (Sender, Name, Value) {
      var Result = false;
      var i = 0;
      var M = null;
      if (this.FDefines.IndexOf(Name) >= 0) {
        Value.set("1");
        return true;
      };
      i = this.FMacros.IndexOf(Name);
      if (i >= 0) {
        M = rtl.as(this.FMacros.GetObject(i),$mod.TMacroDef);
        Value.set(M.FValue);
        return true;
      };
      if (this.FOnEvalVariable != null) {
        Result = this.FOnEvalVariable(Sender,Name,Value);
        return Result;
      };
      Value.set("");
      Result = false;
      return Result;
    };
    this.SetAllowedBoolSwitches = function (AValue) {
      if (rtl.eqSet(this.FAllowedBoolSwitches,AValue)) return;
      this.FAllowedBoolSwitches = rtl.refSet(AValue);
    };
    this.SetAllowedModeSwitches = function (AValue) {
      if (rtl.eqSet(this.FAllowedModeSwitches,AValue)) return;
      this.FAllowedModeSwitches = rtl.refSet(AValue);
      this.SetCurrentModeSwitches(rtl.intersectSet(this.FCurrentModeSwitches,this.FAllowedModeSwitches));
    };
    this.SetAllowedValueSwitches = function (AValue) {
      if (rtl.eqSet(this.FAllowedValueSwitches,AValue)) return;
      this.FAllowedValueSwitches = rtl.refSet(AValue);
    };
    this.SetMacrosOn = function (AValue) {
      if (AValue) {
        this.FCurrentBoolSwitches = rtl.includeSet(this.FCurrentBoolSwitches,$mod.TBoolSwitch.bsMacro)}
       else this.FCurrentBoolSwitches = rtl.excludeSet(this.FCurrentBoolSwitches,$mod.TBoolSwitch.bsMacro);
    };
    this.SetOptions = function (AValue) {
      var isModeSwitch = false;
      if (rtl.eqSet(this.FOptions,AValue)) return;
      isModeSwitch = ($mod.TPOption.po_delphi in AValue) !== ($mod.TPOption.po_delphi in this.FOptions);
      this.FOptions = rtl.refSet(AValue);
      if (isModeSwitch) if ($mod.TPOption.po_delphi in this.FOptions) {
        this.SetCurrentModeSwitches(rtl.refSet($mod.DelphiModeSwitches))}
       else this.SetCurrentModeSwitches(rtl.refSet($mod.FPCModeSwitches));
    };
    this.SetReadOnlyBoolSwitches = function (AValue) {
      if (rtl.eqSet(this.FReadOnlyBoolSwitches,AValue)) return;
      this.FReadOnlyBoolSwitches = rtl.refSet(AValue);
    };
    this.SetReadOnlyModeSwitches = function (AValue) {
      if (rtl.eqSet(this.FReadOnlyModeSwitches,AValue)) return;
      this.FReadOnlyModeSwitches = rtl.refSet(AValue);
      this.FAllowedModeSwitches = rtl.unionSet(this.FAllowedModeSwitches,this.FReadOnlyModeSwitches);
      this.FCurrentModeSwitches = rtl.unionSet(this.FCurrentModeSwitches,this.FReadOnlyModeSwitches);
    };
    this.SetReadOnlyValueSwitches = function (AValue) {
      if (rtl.eqSet(this.FReadOnlyValueSwitches,AValue)) return;
      this.FReadOnlyValueSwitches = rtl.refSet(AValue);
    };
    this.FetchLine = function () {
      var Result = false;
      if (this.FCurSourceFile.IsEOF()) {
        if (this.FTokenPos > 0) {
          this.FCurLine = "";
          this.FTokenPos = -1;
          this.FCurRow += 1;
          this.FModuleRow += 1;
          this.FCurColumnOffset = 1;
        };
        Result = false;
      } else {
        this.FCurLine = this.FCurSourceFile.ReadLine();
        this.FTokenPos = 1;
        Result = true;
        this.FCurRow += 1;
        this.FModuleRow += 1;
        this.FCurColumnOffset = 1;
        if ($mod.TMacroReader.isPrototypeOf(this.FCurSourceFile) && (this.FCurRow === 1)) {
          this.FCurRow = this.FCurSourceFile.FCurRow;
          this.FCurColumnOffset = this.FCurSourceFile.FCurCol;
        };
        if (this.LogEvent($mod.TPScannerLogEvent.sleLineNumber) && (((this.FCurRow % 100) === 0) || this.FCurSourceFile.IsEOF())) this.DoLog$1($mod.TMessageType.mtInfo,1008,rtl.getResStr(pas.PScanner,"SLogLineNumber"),[this.FCurRow],true);
      };
      return Result;
    };
    this.AddFile = function (aFilename) {
      var i = 0;
      for (var $l1 = 0, $end2 = this.FFiles.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.FFiles.Get(i) === aFilename) return;
      };
      this.FFiles.Add(aFilename);
    };
    this.GetMacroName = function (Param) {
      var Result = "";
      var p = 0;
      Result = pas.SysUtils.Trim(Param);
      p = 1;
      while ((p <= Result.length) && (Result.charCodeAt(p - 1) in rtl.createSet(null,97,122,null,65,90,null,48,57,95))) p += 1;
      Result = rtl.strSetLength(Result,p - 1);
      return Result;
    };
    this.SetCurMsg = function (MsgType, MsgNumber, Fmt, Args) {
      this.FLastMsgType = MsgType;
      this.FLastMsgNumber = MsgNumber;
      this.FLastMsgPattern = Fmt;
      this.FLastMsg = $mod.SafeFormat(Fmt,Args);
      $mod.CreateMsgArgs({p: this, get: function () {
          return this.p.FLastMsgArgs;
        }, set: function (v) {
          this.p.FLastMsgArgs = v;
        }},Args);
    };
    this.DoLog = function (MsgType, MsgNumber, Msg, SkipSourceInfo) {
      this.DoLog$1(MsgType,MsgNumber,Msg,[],SkipSourceInfo);
    };
    this.DoLog$1 = function (MsgType, MsgNumber, Fmt, Args, SkipSourceInfo) {
      var Msg = "";
      if (this.IgnoreMsgType(MsgType)) return;
      this.SetCurMsg(MsgType,MsgNumber,Fmt,Args);
      if (this.FOnLog != null) {
        Msg = $mod.MessageTypeNames[MsgType] + ": ";
        if (SkipSourceInfo) {
          Msg = Msg + this.FLastMsg}
         else Msg = Msg + pas.SysUtils.Format("%s(%d,%d) : %s",[this.FormatPath(this.FCurFilename),this.FCurRow,this.GetCurColumn(),this.FLastMsg]);
        this.FOnLog(this,Msg);
      };
    };
    this.Error = function (MsgNumber, Msg) {
      this.SetCurMsg($mod.TMessageType.mtError,MsgNumber,Msg,[]);
      throw $mod.EScannerError.$create("CreateFmt",["%s(%d,%d) Error: %s",[this.FormatPath(this.FCurFilename),this.FCurRow,this.GetCurColumn(),this.FLastMsg]]);
    };
    this.Error$1 = function (MsgNumber, Fmt, Args) {
      this.SetCurMsg($mod.TMessageType.mtError,MsgNumber,Fmt,Args);
      throw $mod.EScannerError.$create("CreateFmt",["%s(%d,%d) Error: %s",[this.FormatPath(this.FCurFilename),this.FCurRow,this.GetCurColumn(),this.FLastMsg]]);
    };
    this.PushSkipMode = function () {
      if (this.PPSkipStackIndex === 255) this.Error(1004,rtl.getResStr(pas.PScanner,"SErrIfXXXNestingLimitReached"));
      this.PPSkipModeStack[this.PPSkipStackIndex] = this.PPSkipMode;
      this.PPIsSkippingStack[this.PPSkipStackIndex] = this.PPIsSkipping;
      this.PPSkipStackIndex += 1;
    };
    this.HandleDirective = function (ADirectiveText) {
      var Self = this;
      var Result = 0;
      var Directive = "";
      var Param = "";
      var P = 0;
      var Handled = false;
      function DoBoolDirective(bs) {
        if (bs in Self.FAllowedBoolSwitches) {
          Handled = true;
          Self.HandleBoolDirective(bs,Param);
        } else Handled = false;
      };
      Result = $mod.TToken.tkComment;
      P = pas.System.Pos(" ",ADirectiveText);
      if (P === 0) P = ADirectiveText.length + 1;
      Directive = pas.System.Copy(ADirectiveText,2,P - 2);
      Param = ADirectiveText;
      pas.System.Delete({get: function () {
          return Param;
        }, set: function (v) {
          Param = v;
        }},1,P);
      var $tmp1 = pas.SysUtils.UpperCase(Directive);
      if ($tmp1 === "IFDEF") {
        Self.HandleIFDEF(Param)}
       else if ($tmp1 === "IFNDEF") {
        Self.HandleIFNDEF(Param)}
       else if ($tmp1 === "IFOPT") {
        Self.HandleIFOPT(Param)}
       else if ($tmp1 === "IF") {
        Self.HandleIF(Param)}
       else if ($tmp1 === "ELSEIF") {
        Self.HandleELSEIF(Param)}
       else if ($tmp1 === "ELSE") {
        Self.HandleELSE(Param)}
       else if ($tmp1 === "ENDIF") {
        Self.HandleENDIF(Param)}
       else if ($tmp1 === "IFEND") {
        Self.HandleENDIF(Param)}
       else {
        if (Self.PPIsSkipping) return Result;
        Handled = false;
        if (((Directive.length === 2) && (Directive.charCodeAt(0) in rtl.createSet(null,97,122,null,65,90))) && (Directive.charCodeAt(1) in rtl.createSet(45,43))) {
          Handled = true;
          Result = Self.HandleLetterDirective(Directive.charAt(0),Directive.charAt(1) === "+");
        };
        if (!Handled) {
          Handled = true;
          var $tmp2 = pas.SysUtils.UpperCase(Directive);
          if ($tmp2 === "ASSERTIONS") {
            DoBoolDirective($mod.TBoolSwitch.bsAssertions)}
           else if ($tmp2 === "DEFINE") {
            Self.HandleDefine(Param)}
           else if ($tmp2 === "ERROR") {
            Self.HandleError(Param)}
           else if ($tmp2 === "HINT") {
            Self.DoLog$1($mod.TMessageType.mtHint,1025,rtl.getResStr(pas.PScanner,"SUserDefined"),[Param],false)}
           else if ($tmp2 === "HINTS") {
            DoBoolDirective($mod.TBoolSwitch.bsHints)}
           else if (($tmp2 === "I") || ($tmp2 === "INCLUDE")) {
            Result = Self.HandleInclude(Param)}
           else if ($tmp2 === "INTERFACES") {
            Self.HandleInterfaces(Param)}
           else if ($tmp2 === "LONGSTRINGS") {
            DoBoolDirective($mod.TBoolSwitch.bsLongStrings)}
           else if ($tmp2 === "MACRO") {
            DoBoolDirective($mod.TBoolSwitch.bsMacro)}
           else if ($tmp2 === "MESSAGE") {
            Self.HandleMessageDirective(Param)}
           else if ($tmp2 === "MODE") {
            Self.HandleMode(Param)}
           else if ($tmp2 === "MODESWITCH") {
            Self.HandleModeSwitch(Param)}
           else if ($tmp2 === "NOTE") {
            Self.DoLog$1($mod.TMessageType.mtNote,1025,rtl.getResStr(pas.PScanner,"SUserDefined"),[Param],false)}
           else if ($tmp2 === "NOTES") {
            DoBoolDirective($mod.TBoolSwitch.bsNotes)}
           else if ($tmp2 === "OBJECTCHECKS") {
            DoBoolDirective($mod.TBoolSwitch.bsObjectChecks)}
           else if (($tmp2 === "OVERFLOWCHECKS") || ($tmp2 === "OV")) {
            DoBoolDirective($mod.TBoolSwitch.bsOverflowChecks)}
           else if ($tmp2 === "POINTERMATH") {
            DoBoolDirective($mod.TBoolSwitch.bsPointerMath)}
           else if ($tmp2 === "RANGECHECKS") {
            DoBoolDirective($mod.TBoolSwitch.bsRangeChecks)}
           else if ($tmp2 === "SCOPEDENUMS") {
            DoBoolDirective($mod.TBoolSwitch.bsScopedEnums)}
           else if ($tmp2 === "TYPEDADDRESS") {
            DoBoolDirective($mod.TBoolSwitch.bsTypedAddress)}
           else if ($tmp2 === "TYPEINFO") {
            DoBoolDirective($mod.TBoolSwitch.bsTypeInfo)}
           else if ($tmp2 === "UNDEF") {
            Self.HandleUnDefine(Param)}
           else if ($tmp2 === "WARN") {
            Self.HandleWarn(Param)}
           else if ($tmp2 === "WARNING") {
            Self.DoLog$1($mod.TMessageType.mtWarning,1025,rtl.getResStr(pas.PScanner,"SUserDefined"),[Param],false)}
           else if ($tmp2 === "WARNINGS") {
            DoBoolDirective($mod.TBoolSwitch.bsWarnings)}
           else if ($tmp2 === "WRITEABLECONST") {
            DoBoolDirective($mod.TBoolSwitch.bsWriteableConst)}
           else {
            Handled = false;
          };
        };
        if (Self.FOnDirective != null) Self.FOnDirective(Self,Directive,Param,{get: function () {
            return Handled;
          }, set: function (v) {
            Handled = v;
          }});
        if (!Handled) if (Self.LogEvent($mod.TPScannerLogEvent.sleDirective)) Self.DoLog$1($mod.TMessageType.mtWarning,1028,rtl.getResStr(pas.PScanner,"SWarnIllegalCompilerDirectiveX"),[Directive],false);
      };
      return Result;
    };
    this.HandleLetterDirective = function (Letter, Enable) {
      var Result = 0;
      var bs = 0;
      Result = $mod.TToken.tkComment;
      Letter = pas.System.upcase(Letter);
      bs = $mod.LetterToBoolSwitch[Letter.charCodeAt() - 65];
      if (bs === $mod.TBoolSwitch.bsNone) this.DoLog$1($mod.TMessageType.mtWarning,1028,rtl.getResStr(pas.PScanner,"SWarnIllegalCompilerDirectiveX"),[Letter],false);
      if (!(bs in this.FAllowedBoolSwitches)) {
        this.DoLog$1($mod.TMessageType.mtWarning,1028,rtl.getResStr(pas.PScanner,"SWarnIllegalCompilerDirectiveX"),[Letter],false);
      };
      if ((bs in this.FCurrentBoolSwitches) !== Enable) {
        if (bs in this.FReadOnlyBoolSwitches) {
          this.DoLog$1($mod.TMessageType.mtWarning,1028,rtl.getResStr(pas.PScanner,"SWarnIllegalCompilerDirectiveX"),[Letter + pas.SysUtils.BoolToStr$1(Enable,"+","-")],false);
          return Result;
        };
        if (Enable) {
          this.AddDefine($mod.LetterSwitchNames[Letter.charCodeAt() - 65],false);
          this.FCurrentBoolSwitches = rtl.includeSet(this.FCurrentBoolSwitches,bs);
        } else {
          this.UnDefine($mod.LetterSwitchNames[Letter.charCodeAt() - 65],false);
          this.FCurrentBoolSwitches = rtl.excludeSet(this.FCurrentBoolSwitches,bs);
        };
      };
      return Result;
    };
    this.HandleBoolDirective = function (bs, Param) {
      var NewValue = false;
      if (pas.SysUtils.CompareText(Param,"on") === 0) {
        NewValue = true}
       else if (pas.SysUtils.CompareText(Param,"off") === 0) {
        NewValue = false}
       else this.Error$1(1021,rtl.getResStr(pas.PScanner,"SErrXExpectedButYFound"),["on",Param]);
      if ((bs in this.FCurrentBoolSwitches) === NewValue) return;
      if (bs in this.FReadOnlyBoolSwitches) {
        this.DoLog$1($mod.TMessageType.mtWarning,1028,rtl.getResStr(pas.PScanner,"SWarnIllegalCompilerDirectiveX"),[$mod.BoolSwitchNames[bs]],false)}
       else if (NewValue) {
        this.FCurrentBoolSwitches = rtl.includeSet(this.FCurrentBoolSwitches,bs)}
       else this.FCurrentBoolSwitches = rtl.excludeSet(this.FCurrentBoolSwitches,bs);
    };
    this.HandleIFDEF = function (AParam) {
      this.PushSkipMode();
      if (this.PPIsSkipping) {
        this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipAll}
       else {
        if (this.IsDefined(AParam)) {
          this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipElseBranch}
         else {
          this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipIfBranch;
          this.PPIsSkipping = true;
        };
        if (this.LogEvent($mod.TPScannerLogEvent.sleConditionals)) if (this.PPSkipMode === $mod.TPascalScannerPPSkipMode.ppSkipElseBranch) {
          this.DoLog$1($mod.TMessageType.mtInfo,1009,rtl.getResStr(pas.PScanner,"SLogIFDefAccepted"),[AParam],false)}
         else this.DoLog$1($mod.TMessageType.mtInfo,1010,rtl.getResStr(pas.PScanner,"SLogIFDefRejected"),[AParam],false);
      };
    };
    this.HandleIFNDEF = function (AParam) {
      this.PushSkipMode();
      if (this.PPIsSkipping) {
        this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipAll}
       else {
        if (this.IsDefined(AParam)) {
          this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipIfBranch;
          this.PPIsSkipping = true;
        } else this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipElseBranch;
        if (this.LogEvent($mod.TPScannerLogEvent.sleConditionals)) if (this.PPSkipMode === $mod.TPascalScannerPPSkipMode.ppSkipElseBranch) {
          this.DoLog$1($mod.TMessageType.mtInfo,1011,rtl.getResStr(pas.PScanner,"SLogIFNDefAccepted"),[AParam],false)}
         else this.DoLog$1($mod.TMessageType.mtInfo,1012,rtl.getResStr(pas.PScanner,"SLogIFNDefRejected"),[AParam],false);
      };
    };
    this.HandleIFOPT = function (AParam) {
      this.PushSkipMode();
      if (this.PPIsSkipping) {
        this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipAll}
       else {
        if (((AParam.length !== 2) || !(AParam.charCodeAt(0) in rtl.createSet(null,97,122,null,65,90))) || !(AParam.charCodeAt(1) in rtl.createSet(43,45))) this.Error$1(1021,rtl.getResStr(pas.PScanner,"SErrXExpectedButYFound"),["letter[+|-]",AParam]);
        if (this.IfOpt(AParam.charAt(0)) === (AParam.charAt(1) === "+")) {
          this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipElseBranch}
         else {
          this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipIfBranch;
          this.PPIsSkipping = true;
        };
        if (this.LogEvent($mod.TPScannerLogEvent.sleConditionals)) if (this.PPSkipMode === $mod.TPascalScannerPPSkipMode.ppSkipElseBranch) {
          this.DoLog$1($mod.TMessageType.mtInfo,1015,rtl.getResStr(pas.PScanner,"SLogIFOptAccepted"),[AParam],false)}
         else this.DoLog$1($mod.TMessageType.mtInfo,1016,rtl.getResStr(pas.PScanner,"SLogIFOptRejected"),[AParam],false);
      };
    };
    this.HandleIF = function (AParam) {
      this.PushSkipMode();
      if (this.PPIsSkipping) {
        this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipAll}
       else {
        if (this.FConditionEval.Eval(AParam)) {
          this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipElseBranch}
         else {
          this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipIfBranch;
          this.PPIsSkipping = true;
        };
        if (this.LogEvent($mod.TPScannerLogEvent.sleConditionals)) if (this.PPSkipMode === $mod.TPascalScannerPPSkipMode.ppSkipElseBranch) {
          this.DoLog$1($mod.TMessageType.mtInfo,1013,rtl.getResStr(pas.PScanner,"SLogIFAccepted"),[AParam],false)}
         else this.DoLog$1($mod.TMessageType.mtInfo,1014,rtl.getResStr(pas.PScanner,"SLogIFRejected"),[AParam],false);
      };
    };
    this.HandleELSEIF = function (AParam) {
      if (this.PPSkipStackIndex === 0) this.Error(1005,rtl.getResStr(pas.PScanner,"SErrInvalidPPElse"));
      if (this.PPSkipMode === $mod.TPascalScannerPPSkipMode.ppSkipIfBranch) {
        if (this.FConditionEval.Eval(AParam)) {
          this.PPSkipMode = $mod.TPascalScannerPPSkipMode.ppSkipElseBranch;
          this.PPIsSkipping = false;
        } else this.PPIsSkipping = true;
        if (this.LogEvent($mod.TPScannerLogEvent.sleConditionals)) if (this.PPSkipMode === $mod.TPascalScannerPPSkipMode.ppSkipElseBranch) {
          this.DoLog$1($mod.TMessageType.mtInfo,1017,rtl.getResStr(pas.PScanner,"SLogELSEIFAccepted"),[AParam],false)}
         else this.DoLog$1($mod.TMessageType.mtInfo,1018,rtl.getResStr(pas.PScanner,"SLogELSEIFRejected"),[AParam],false);
      } else if (this.PPSkipMode === $mod.TPascalScannerPPSkipMode.ppSkipElseBranch) {
        this.PPIsSkipping = true;
      };
    };
    this.HandleELSE = function (AParam) {
      if (AParam === "") ;
      if (this.PPSkipStackIndex === 0) this.Error(1005,rtl.getResStr(pas.PScanner,"SErrInvalidPPElse"));
      if (this.PPSkipMode === $mod.TPascalScannerPPSkipMode.ppSkipIfBranch) {
        this.PPIsSkipping = false}
       else if (this.PPSkipMode === $mod.TPascalScannerPPSkipMode.ppSkipElseBranch) this.PPIsSkipping = true;
    };
    this.HandleENDIF = function (AParam) {
      if (AParam === "") ;
      if (this.PPSkipStackIndex === 0) this.Error(1006,rtl.getResStr(pas.PScanner,"SErrInvalidPPEndif"));
      this.PPSkipStackIndex -= 1;
      this.PPSkipMode = this.PPSkipModeStack[this.PPSkipStackIndex];
      this.PPIsSkipping = this.PPIsSkippingStack[this.PPSkipStackIndex];
    };
    this.HandleDefine = function (Param) {
      var Index = 0;
      var MName = "";
      var MValue = "";
      Param = pas.SysUtils.UpperCase(Param);
      Index = pas.System.Pos(":=",Param);
      if (Index === 0) {
        this.AddDefine(this.GetMacroName(Param),false)}
       else {
        MValue = pas.SysUtils.Trim(Param);
        MName = pas.SysUtils.Trim(pas.System.Copy(MValue,1,Index - 1));
        pas.System.Delete({get: function () {
            return MValue;
          }, set: function (v) {
            MValue = v;
          }},1,Index + 1);
        this.AddMacro(MName,MValue,false);
      };
    };
    this.HandleError = function (Param) {
      if ($mod.TPOption.po_StopOnErrorDirective in this.FOptions) {
        this.Error$1(1025,rtl.getResStr(pas.PScanner,"SUserDefined"),[Param])}
       else this.DoLog$1($mod.TMessageType.mtWarning,1025,rtl.getResStr(pas.PScanner,"SUserDefined") + " error",[Param],false);
    };
    this.HandleMessageDirective = function (Param) {
      var p = 0;
      var Kind = "";
      var MsgType = 0;
      if (Param === "") return;
      p = 1;
      while ((p <= Param.length) && (Param.charCodeAt(p - 1) in rtl.createSet(null,97,122,null,65,90))) p += 1;
      Kind = pas.SysUtils.LeftStr(Param,p - 1);
      MsgType = $mod.TMessageType.mtHint;
      var $tmp1 = pas.SysUtils.UpperCase(Kind);
      if ($tmp1 === "HINT") {
        MsgType = $mod.TMessageType.mtHint}
       else if ($tmp1 === "NOTE") {
        MsgType = $mod.TMessageType.mtNote}
       else if ($tmp1 === "WARN") {
        MsgType = $mod.TMessageType.mtWarning}
       else if ($tmp1 === "ERROR") {
        MsgType = $mod.TMessageType.mtError}
       else if ($tmp1 === "FATAL") {
        MsgType = $mod.TMessageType.mtFatal}
       else {
        p = 1;
      };
      while ((p <= Param.length) && (Param.charCodeAt(p - 1) in rtl.createSet(32,9))) p += 1;
      pas.System.Delete({get: function () {
          return Param;
        }, set: function (v) {
          Param = v;
        }},1,p - 1);
      if (MsgType in rtl.createSet($mod.TMessageType.mtFatal,$mod.TMessageType.mtError)) {
        this.HandleError(Param)}
       else this.DoLog$1(MsgType,1025,rtl.getResStr(pas.PScanner,"SUserDefined"),[Param],false);
    };
    this.HandleIncludeFile = function (Param) {
      var NewSourceFile = null;
      if (Param.length > 1) {
        if (Param.charAt(0) === "'") {
          if (Param.charAt(Param.length - 1) !== "'") this.Error$1(1002,rtl.getResStr(pas.PScanner,"SErrOpenString"),[]);
          Param = pas.System.Copy(Param,2,Param.length - 2);
        };
      };
      NewSourceFile = this.FFileResolver.FindIncludeFile(Param);
      if (!(NewSourceFile != null)) this.Error$1(1003,rtl.getResStr(pas.PScanner,"SErrIncludeFileNotFound"),[Param]);
      this.PushStackItem();
      this.FCurSourceFile = NewSourceFile;
      this.FCurFilename = Param;
      if ($mod.TFileLineReader.isPrototypeOf(this.FCurSourceFile)) this.FCurFilename = this.FCurSourceFile.FFilename;
      this.AddFile(this.FCurFilename);
      if (this.LogEvent($mod.TPScannerLogEvent.sleFile)) this.DoLog$1($mod.TMessageType.mtInfo,1007,rtl.getResStr(pas.PScanner,"SLogOpeningFile"),[this.FormatPath(this.FCurFilename)],true);
    };
    this.HandleUnDefine = function (Param) {
      this.UnDefine(this.GetMacroName(Param),false);
    };
    this.HandleInclude = function (Param) {
      var Result = 0;
      Result = $mod.TToken.tkComment;
      if ((Param !== "") && (Param.charAt(0) === "%")) {
        this.FCurTokenString = ("'" + Param) + "'";
        this.FCurToken = $mod.TToken.tkString;
        Result = this.FCurToken;
      } else this.HandleIncludeFile(Param);
      return Result;
    };
    this.HandleMode = function (Param) {
      var Self = this;
      function SetMode(LangMode, NewModeSwitches, IsDelphi, AddBoolSwitches, RemoveBoolSwitches) {
        var Handled = false;
        if (!(LangMode in Self.FAllowedModeSwitches)) Self.Error$1(1019,rtl.getResStr(pas.PScanner,"SErrInvalidMode"),[Param]);
        Handled = false;
        if (Self.FOnModeChanged != null) Self.FOnModeChanged(Self,LangMode,true,{get: function () {
            return Handled;
          }, set: function (v) {
            Handled = v;
          }});
        if (!Handled) {
          Self.SetCurrentModeSwitches(rtl.intersectSet(rtl.unionSet(NewModeSwitches,Self.FReadOnlyModeSwitches),Self.FAllowedModeSwitches));
          Self.SetCurrentBoolSwitches(rtl.diffSet(rtl.unionSet(Self.FCurrentBoolSwitches,rtl.intersectSet(AddBoolSwitches,Self.FAllowedBoolSwitches)),rtl.intersectSet(RemoveBoolSwitches,Self.FAllowedBoolSwitches)));
          if (IsDelphi) {
            Self.FOptions = rtl.unionSet(Self.FOptions,rtl.createSet($mod.TPOption.po_delphi))}
           else Self.FOptions = rtl.diffSet(Self.FOptions,rtl.createSet($mod.TPOption.po_delphi));
        };
        Handled = false;
        if (Self.FOnModeChanged != null) Self.FOnModeChanged(Self,LangMode,false,{get: function () {
            return Handled;
          }, set: function (v) {
            Handled = v;
          }});
      };
      var P = "";
      if (Self.FSkipGlobalSwitches) {
        Self.DoLog$1($mod.TMessageType.mtWarning,1029,rtl.getResStr(pas.PScanner,"SMisplacedGlobalCompilerSwitch"),[],false);
        return;
      };
      P = pas.SysUtils.UpperCase(Param);
      var $tmp1 = P;
      if (($tmp1 === "FPC") || ($tmp1 === "DEFAULT")) {
        SetMode($mod.TModeSwitch.msFpc,$mod.FPCModeSwitches,false,$mod.bsFPCMode,{})}
       else if ($tmp1 === "OBJFPC") {
        SetMode($mod.TModeSwitch.msObjfpc,$mod.OBJFPCModeSwitches,true,$mod.bsObjFPCMode,{})}
       else if ($tmp1 === "DELPHI") {
        SetMode($mod.TModeSwitch.msDelphi,$mod.DelphiModeSwitches,true,$mod.bsDelphiMode,rtl.createSet($mod.TBoolSwitch.bsPointerMath))}
       else if ($tmp1 === "DELPHIUNICODE") {
        SetMode($mod.TModeSwitch.msDelphiUnicode,$mod.DelphiUnicodeModeSwitches,true,$mod.bsDelphiUnicodeMode,rtl.createSet($mod.TBoolSwitch.bsPointerMath))}
       else if ($tmp1 === "TP") {
        SetMode($mod.TModeSwitch.msTP7,$mod.TPModeSwitches,false,{},{})}
       else if ($tmp1 === "MACPAS") {
        SetMode($mod.TModeSwitch.msMac,$mod.MacModeSwitches,false,$mod.bsMacPasMode,{})}
       else if ($tmp1 === "ISO") {
        SetMode($mod.TModeSwitch.msIso,$mod.ISOModeSwitches,false,{},{})}
       else if ($tmp1 === "EXTENDED") {
        SetMode($mod.TModeSwitch.msExtpas,$mod.ExtPasModeSwitches,false,{},{})}
       else if ($tmp1 === "GPC") {
        SetMode($mod.TModeSwitch.msGPC,$mod.GPCModeSwitches,false,{},{})}
       else {
        Self.Error$1(1019,rtl.getResStr(pas.PScanner,"SErrInvalidMode"),[Param]);
      };
    };
    this.HandleModeSwitch = function (Param) {
      var MS = 0;
      var MSN = "";
      var PM = "";
      var P = 0;
      MSN = pas.SysUtils.UpperCase(Param);
      P = pas.System.Pos(" ",MSN);
      if (P !== 0) {
        PM = pas.SysUtils.Trim(pas.System.Copy(MSN,P + 1,MSN.length - P));
        MSN = pas.System.Copy(MSN,1,P - 1);
      };
      MS = $mod.StrToModeSwitch(MSN);
      if ((MS === $mod.TModeSwitch.msNone) || !(MS in this.FAllowedModeSwitches)) {
        if ($mod.TPOption.po_CheckModeSwitches in this.FOptions) {
          this.Error$1(1020,rtl.getResStr(pas.PScanner,"SErrInvalidModeSwitch"),[Param])}
         else return;
      };
      if ((PM === "-") || (PM === "OFF")) {
        if (MS in this.FReadOnlyModeSwitches) this.Error$1(1020,rtl.getResStr(pas.PScanner,"SErrInvalidModeSwitch"),[Param]);
        this.SetCurrentModeSwitches(rtl.diffSet(this.FCurrentModeSwitches,rtl.createSet(MS)));
      } else this.SetCurrentModeSwitches(rtl.unionSet(this.FCurrentModeSwitches,rtl.createSet(MS)));
    };
    this.HandleMacro = function (AIndex) {
      var Result = 0;
      var M = null;
      var ML = null;
      var OldRow = 0;
      var OldCol = 0;
      OldRow = this.FCurRow;
      OldCol = this.GetCurColumn();
      this.PushStackItem();
      M = rtl.as(this.FMacros.GetObject(AIndex),$mod.TMacroDef);
      ML = $mod.TMacroReader.$create("Create$2",[this.FCurFilename,M.FValue]);
      ML.FCurRow = OldRow;
      ML.FCurCol = OldCol - M.FName.length;
      this.FCurSourceFile = ML;
      Result = this.DoFetchToken();
      return Result;
    };
    this.HandleInterfaces = function (Param) {
      var s = "";
      var NewValue = "";
      var p = 0;
      if (!($mod.TValueSwitch.vsInterfaces in this.FAllowedValueSwitches)) this.Error$1(1028,rtl.getResStr(pas.PScanner,"SWarnIllegalCompilerDirectiveX"),["interfaces"]);
      s = pas.SysUtils.UpperCase(Param);
      p = pas.System.Pos(" ",s);
      if (p > 0) s = pas.SysUtils.LeftStr(s,p - 1);
      var $tmp1 = s;
      if (($tmp1 === "COM") || ($tmp1 === "DEFAULT")) {
        NewValue = "COM"}
       else if ($tmp1 === "CORBA") {
        NewValue = "CORBA"}
       else {
        this.Error$1(1028,rtl.getResStr(pas.PScanner,"SWarnIllegalCompilerDirectiveX"),["interfaces " + s]);
        return;
      };
      if (pas.SysUtils.SameText(NewValue,this.GetCurrentValueSwitch($mod.TValueSwitch.vsInterfaces))) return;
      if ($mod.TValueSwitch.vsInterfaces in this.FReadOnlyValueSwitches) {
        this.Error$1(1028,rtl.getResStr(pas.PScanner,"SWarnIllegalCompilerDirectiveX"),["interfaces"]);
        return;
      };
      this.SetCurrentValueSwitch($mod.TValueSwitch.vsInterfaces,NewValue);
    };
    this.HandleWarn = function (Param) {
      var p = 0;
      var StartPos = 0;
      var Identifier = "";
      var Value = "";
      p = 1;
      while ((p <= Param.length) && (Param.charCodeAt(p - 1) in rtl.createSet(32,9))) p += 1;
      StartPos = p;
      while ((p <= Param.length) && (Param.charCodeAt(p - 1) in rtl.createSet(null,97,122,null,65,90,null,48,57,95))) p += 1;
      Identifier = pas.System.Copy(Param,StartPos,p - StartPos);
      while ((p <= Param.length) && (Param.charCodeAt(p - 1) in rtl.createSet(32,9))) p += 1;
      StartPos = p;
      while ((p <= Param.length) && (Param.charCodeAt(p - 1) in rtl.createSet(null,97,122,null,65,90,95))) p += 1;
      Value = pas.System.Copy(Param,StartPos,p - StartPos);
      this.HandleWarnIdentifier(Identifier,Value);
    };
    this.HandleWarnIdentifier = function (Identifier, Value) {
      var number = 0;
      var State = 0;
      var Handled = false;
      if (Identifier === "") this.Error$1(1027,rtl.getResStr(pas.PScanner,"SIllegalStateForWarnDirective"),[""]);
      if (Value === "") {
        this.DoLog$1($mod.TMessageType.mtWarning,1027,rtl.getResStr(pas.PScanner,"SIllegalStateForWarnDirective"),[""],false);
        return;
      };
      var $tmp1 = pas.SysUtils.LowerCase(Value);
      if ($tmp1 === "on") {
        State = $mod.TWarnMsgState.wmsOn}
       else if ($tmp1 === "off") {
        State = $mod.TWarnMsgState.wmsOff}
       else if ($tmp1 === "default") {
        State = $mod.TWarnMsgState.wmsDefault}
       else if ($tmp1 === "error") {
        State = $mod.TWarnMsgState.wmsError}
       else {
        this.DoLog$1($mod.TMessageType.mtWarning,1027,rtl.getResStr(pas.PScanner,"SIllegalStateForWarnDirective"),[Value],false);
        return;
      };
      if (this.FOnWarnDirective != null) {
        Handled = false;
        this.FOnWarnDirective(this,Identifier,State,{get: function () {
            return Handled;
          }, set: function (v) {
            Handled = v;
          }});
        if (Handled) return;
      };
      if (Identifier.charCodeAt(0) in rtl.createSet(null,48,57)) {
        number = pas.SysUtils.StrToIntDef(Identifier,-1);
        if (number < 0) {
          this.DoLog$1($mod.TMessageType.mtWarning,1027,rtl.getResStr(pas.PScanner,"SIllegalStateForWarnDirective"),[Identifier],false);
          return;
        };
      };
      if (number >= 0) this.SetWarnMsgState(number,State);
    };
    this.PushStackItem = function () {
      var SI = null;
      if (this.FIncludeStack.FCount >= this.FMaxIncludeStackDepth) this.Error(1028,rtl.getResStr(pas.PScanner,"SErrIncludeLimitReached"));
      SI = $impl.TIncludeStackItem.$create("Create");
      SI.SourceFile = this.FCurSourceFile;
      SI.Filename = this.FCurFilename;
      SI.Token = this.FCurToken;
      SI.TokenString = this.FCurTokenString;
      SI.Line = this.FCurLine;
      SI.Row = this.FCurRow;
      SI.ColumnOffset = this.FCurColumnOffset;
      SI.TokenPos = this.FTokenPos;
      this.FIncludeStack.Add(SI);
      this.FTokenPos = -1;
      this.FCurRow = 0;
      this.FCurColumnOffset = 1;
    };
    this.DoFetchTextToken = function () {
      var Result = 0;
      var OldLength = 0;
      var TokenStart = 0;
      var SectionLength = 0;
      var s = "";
      var l = 0;
      Result = $mod.TToken.tkEOF;
      OldLength = 0;
      this.FCurTokenString = "";
      s = this.FCurLine;
      l = s.length;
      do {
        if (this.FTokenPos > l) break;
        var $tmp1 = s.charAt(this.FTokenPos - 1);
        if ($tmp1 === "^") {
          TokenStart = this.FTokenPos;
          this.FTokenPos += 1;
          if ((this.FTokenPos < l) && (s.charCodeAt(this.FTokenPos - 1) in $impl.Letters)) this.FTokenPos += 1;
          if (Result === $mod.TToken.tkEOF) {
            Result = $mod.TToken.tkChar}
           else Result = $mod.TToken.tkString;
        } else if ($tmp1 === "#") {
          TokenStart = this.FTokenPos;
          this.FTokenPos += 1;
          if ((this.FTokenPos < l) && (s.charAt(this.FTokenPos - 1) === "$")) {
            this.FTokenPos += 1;
            do {
              this.FTokenPos += 1;
            } while (!((this.FTokenPos > l) || !(s.charCodeAt(this.FTokenPos - 1) in $impl.HexDigits)));
          } else do {
            this.FTokenPos += 1;
          } while (!((this.FTokenPos > l) || !(s.charCodeAt(this.FTokenPos - 1) in $impl.Digits)));
          if (Result === $mod.TToken.tkEOF) {
            Result = $mod.TToken.tkChar}
           else Result = $mod.TToken.tkString;
        } else if ($tmp1 === "'") {
          TokenStart = this.FTokenPos;
          this.FTokenPos += 1;
          while (true) {
            if ((this.FTokenPos <= l) && (s.charAt(this.FTokenPos - 1) === "'")) if ((this.FTokenPos < l) && (s.charAt((this.FTokenPos + 1) - 1) === "'")) {
              this.FTokenPos += 1}
             else break;
            if (this.FTokenPos > l) this.Error(1002,rtl.getResStr(pas.PScanner,"SErrOpenString"));
            this.FTokenPos += 1;
          };
          this.FTokenPos += 1;
          if ((this.FTokenPos - TokenStart) === 3) {
            Result = $mod.TToken.tkChar}
           else Result = $mod.TToken.tkString;
        } else {
          break;
        };
        SectionLength = this.FTokenPos - TokenStart;
        this.FCurTokenString = this.FCurTokenString + pas.System.Copy(this.FCurLine,TokenStart,SectionLength);
        OldLength += SectionLength;
      } while (!false);
      return Result;
    };
    this.DoFetchToken = function () {
      var Self = this;
      var Result = 0;
      var TokenStart = 0;
      var i = 0;
      var SectionLength = 0;
      var NestingLevel = 0;
      var Index = 0;
      var s = "";
      var l = 0;
      function FetchCurTokenString() {
        Self.FCurTokenString = pas.System.Copy(Self.FCurLine,TokenStart,SectionLength);
      };
      function FetchLocalLine() {
        var Result = false;
        Result = Self.FetchLine();
        if (!Result) return Result;
        s = Self.FCurLine;
        l = s.length;
        return Result;
      };
      Result = $mod.TToken.tkLineEnding;
      if (Self.FTokenPos < 1) if (!Self.FetchLine()) {
        Result = $mod.TToken.tkEOF;
        Self.FCurToken = Result;
        return Result;
      };
      Self.FCurTokenString = "";
      Self.FCurTokenPos.FileName = Self.FCurFilename;
      Self.FCurTokenPos.Row = Self.FCurRow;
      Self.FCurTokenPos.Column = Self.GetCurColumn();
      s = Self.FCurLine;
      l = s.length;
      if (Self.FTokenPos > l) {
        Self.FetchLine();
        Result = $mod.TToken.tkLineEnding;
        Self.FCurToken = Result;
        return Result;
      };
      var $tmp1 = s.charAt(Self.FTokenPos - 1);
      if ($tmp1 === " ") {
        Result = $mod.TToken.tkWhitespace;
        do {
          Self.FTokenPos += 1;
          if (Self.FTokenPos > l) if (!FetchLocalLine()) {
            Self.FCurToken = Result;
            return Result;
          };
        } while (s.charAt(Self.FTokenPos - 1) === " ");
      } else if ($tmp1 === "\t") {
        Result = $mod.TToken.tkTab;
        do {
          Self.FTokenPos += 1;
          if (Self.FTokenPos > l) if (!FetchLocalLine()) {
            Self.FCurToken = Result;
            return Result;
          };
        } while (s.charAt(Self.FTokenPos - 1) === "\t");
      } else if (($tmp1 === "#") || ($tmp1 === "'")) {
        Result = Self.DoFetchTextToken()}
       else if ($tmp1 === "&") {
        TokenStart = Self.FTokenPos;
        do {
          Self.FTokenPos += 1;
        } while (!((Self.FTokenPos > l) || !(s.charCodeAt(Self.FTokenPos - 1) in rtl.createSet(null,48,55))));
        SectionLength = Self.FTokenPos - TokenStart;
        if ((SectionLength === 1) && (s.charCodeAt(Self.FTokenPos - 1) in $impl.IdentChars)) {
          Self.DoFetchToken();
          Result = $mod.TToken.tkIdentifier;
        } else {
          FetchCurTokenString();
          Result = $mod.TToken.tkNumber;
        };
      } else if ($tmp1 === "$") {
        TokenStart = Self.FTokenPos;
        do {
          Self.FTokenPos += 1;
        } while (!((Self.FTokenPos > l) || !(s.charCodeAt(Self.FTokenPos - 1) in $impl.HexDigits)));
        SectionLength = Self.FTokenPos - TokenStart;
        FetchCurTokenString();
        Result = $mod.TToken.tkNumber;
      } else if ($tmp1 === "%") {
        TokenStart = Self.FTokenPos;
        do {
          Self.FTokenPos += 1;
        } while (!((Self.FTokenPos > l) || !(s.charCodeAt(Self.FTokenPos - 1) in rtl.createSet(48,49))));
        SectionLength = Self.FTokenPos - TokenStart;
        FetchCurTokenString();
        Result = $mod.TToken.tkNumber;
      } else if ($tmp1 === "(") {
        Self.FTokenPos += 1;
        if ((Self.FTokenPos > l) || (s.charAt(Self.FTokenPos - 1) !== "*")) {
          Result = $mod.TToken.tkBraceOpen}
         else {
          Self.FTokenPos += 1;
          TokenStart = Self.FTokenPos;
          Self.FCurTokenString = "";
          NestingLevel = 0;
          do {
            if (Self.FTokenPos > l) {
              SectionLength = Self.FTokenPos - TokenStart;
              Self.FCurTokenString = (Self.FCurTokenString + pas.System.Copy(Self.FCurLine,TokenStart,SectionLength)) + "\n";
              if (!FetchLocalLine()) {
                Result = $mod.TToken.tkEOF;
                Self.FCurToken = Result;
                return Result;
              };
              TokenStart = Self.FTokenPos;
            } else if (((Self.FTokenPos < l) && (s.charAt(Self.FTokenPos - 1) === "*")) && (s.charAt((Self.FTokenPos + 1) - 1) === ")")) {
              NestingLevel -= 1;
              if (NestingLevel < 0) break;
              Self.FTokenPos += 2;
            } else if (((($mod.TModeSwitch.msNestedComment in Self.FCurrentModeSwitches) && (Self.FTokenPos < l)) && (s.charAt(Self.FTokenPos - 1) === "(")) && (s.charAt((Self.FTokenPos + 1) - 1) === "*")) {
              Self.FTokenPos += 2;
              NestingLevel += 1;
            } else Self.FTokenPos += 1;
          } while (!false);
          SectionLength = Self.FTokenPos - TokenStart;
          Self.FCurTokenString = Self.FCurTokenString + pas.System.Copy(Self.FCurLine,TokenStart,SectionLength);
          Self.FTokenPos += 2;
          Result = $mod.TToken.tkComment;
          if (pas.System.Copy(Self.FCurTokenString,1,1) === "$") Result = Self.HandleDirective(Self.FCurTokenString);
        };
      } else if ($tmp1 === ")") {
        Self.FTokenPos += 1;
        Result = $mod.TToken.tkBraceClose;
      } else if ($tmp1 === "*") {
        Result = $mod.TToken.tkMul;
        Self.FTokenPos += 1;
        if ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === "*")) {
          Self.FTokenPos += 1;
          Result = $mod.TToken.tkPower;
        } else if ($mod.TPOption.po_CAssignments in Self.FOptions) {
          if ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === "=")) {
            Self.FTokenPos += 1;
            Result = $mod.TToken.tkAssignMul;
          };
        };
      } else if ($tmp1 === "+") {
        Result = $mod.TToken.tkPlus;
        Self.FTokenPos += 1;
        if ($mod.TPOption.po_CAssignments in Self.FOptions) {
          if ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === "=")) {
            Self.FTokenPos += 1;
            Result = $mod.TToken.tkAssignPlus;
          };
        };
      } else if ($tmp1 === ",") {
        Self.FTokenPos += 1;
        Result = $mod.TToken.tkComma;
      } else if ($tmp1 === "-") {
        Result = $mod.TToken.tkMinus;
        Self.FTokenPos += 1;
        if ($mod.TPOption.po_CAssignments in Self.FOptions) {
          if ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === "=")) {
            Self.FTokenPos += 1;
            Result = $mod.TToken.tkAssignMinus;
          };
        };
      } else if ($tmp1 === ".") {
        Self.FTokenPos += 1;
        if ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === ".")) {
          Self.FTokenPos += 1;
          Result = $mod.TToken.tkDotDot;
        } else Result = $mod.TToken.tkDot;
      } else if ($tmp1 === "\/") {
        Result = $mod.TToken.tkDivision;
        Self.FTokenPos += 1;
        if ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === "\/")) {
          Self.FTokenPos += 1;
          TokenStart = Self.FTokenPos;
          Self.FCurTokenString = "";
          while ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) !== "\x00")) Self.FTokenPos += 1;
          SectionLength = Self.FTokenPos - TokenStart;
          FetchCurTokenString();
          if ($mod.TMacroReader.isPrototypeOf(Self.FCurSourceFile)) {
            do {
              i = Self.FetchToken();
            } while (!(i !== $mod.TToken.tkLineEnding));
            FetchLocalLine();
          };
          Result = $mod.TToken.tkComment;
        } else if ($mod.TPOption.po_CAssignments in Self.FOptions) {
          if ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === "=")) {
            Self.FTokenPos += 1;
            Result = $mod.TToken.tkAssignDivision;
          };
        };
      } else if (($tmp1 >= "0") && ($tmp1 <= "9")) {
        TokenStart = Self.FTokenPos;
        do {
          Self.FTokenPos += 1;
        } while (!((Self.FTokenPos > l) || !(s.charCodeAt(Self.FTokenPos - 1) in $impl.Digits)));
        if (((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === ".")) && ((Self.FTokenPos === l) || (s.charAt((Self.FTokenPos + 1) - 1) !== "."))) {
          Self.FTokenPos += 1;
          while ((Self.FTokenPos <= l) && (s.charCodeAt(Self.FTokenPos - 1) in $impl.Digits)) Self.FTokenPos += 1;
        };
        if ((Self.FTokenPos <= l) && (s.charCodeAt(Self.FTokenPos - 1) in rtl.createSet(101,69))) {
          Self.FTokenPos += 1;
          if ((Self.FTokenPos <= l) && (s.charCodeAt(Self.FTokenPos - 1) in rtl.createSet(45,43))) Self.FTokenPos += 1;
          while ((Self.FTokenPos <= l) && (s.charCodeAt(Self.FTokenPos - 1) in $impl.Digits)) Self.FTokenPos += 1;
        };
        SectionLength = Self.FTokenPos - TokenStart;
        FetchCurTokenString();
        Result = $mod.TToken.tkNumber;
      } else if ($tmp1 === ":") {
        Self.FTokenPos += 1;
        if ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === "=")) {
          Self.FTokenPos += 1;
          Result = $mod.TToken.tkAssign;
        } else Result = $mod.TToken.tkColon;
      } else if ($tmp1 === ";") {
        Self.FTokenPos += 1;
        Result = $mod.TToken.tkSemicolon;
      } else if ($tmp1 === "<") {
        Self.FTokenPos += 1;
        if (Self.FTokenPos > l) {
          Result = $mod.TToken.tkLessThan}
         else {
          var $tmp2 = s.charAt(Self.FTokenPos - 1);
          if ($tmp2 === ">") {
            Self.FTokenPos += 1;
            Result = $mod.TToken.tkNotEqual;
          } else if ($tmp2 === "=") {
            Self.FTokenPos += 1;
            Result = $mod.TToken.tkLessEqualThan;
          } else if ($tmp2 === "<") {
            Self.FTokenPos += 1;
            Result = $mod.TToken.tkshl;
          } else {
            Result = $mod.TToken.tkLessThan;
          };
        };
      } else if ($tmp1 === "=") {
        Self.FTokenPos += 1;
        Result = $mod.TToken.tkEqual;
      } else if ($tmp1 === ">") {
        Self.FTokenPos += 1;
        if (Self.FTokenPos > l) {
          Result = $mod.TToken.tkGreaterThan}
         else {
          var $tmp3 = s.charAt(Self.FTokenPos - 1);
          if ($tmp3 === "=") {
            Self.FTokenPos += 1;
            Result = $mod.TToken.tkGreaterEqualThan;
          } else if ($tmp3 === "<") {
            Self.FTokenPos += 1;
            Result = $mod.TToken.tkSymmetricalDifference;
          } else if ($tmp3 === ">") {
            Self.FTokenPos += 1;
            Result = $mod.TToken.tkshr;
          } else {
            Result = $mod.TToken.tkGreaterThan;
          };
        };
      } else if ($tmp1 === "@") {
        Self.FTokenPos += 1;
        Result = $mod.TToken.tkAt;
        if ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === "@")) {
          Self.FTokenPos += 1;
          Result = $mod.TToken.tkAtAt;
        };
      } else if ($tmp1 === "[") {
        Self.FTokenPos += 1;
        Result = $mod.TToken.tkSquaredBraceOpen;
      } else if ($tmp1 === "]") {
        Self.FTokenPos += 1;
        Result = $mod.TToken.tkSquaredBraceClose;
      } else if ($tmp1 === "^") {
        if ((Self.GetForceCaret() || Self.PPIsSkipping) || (Self.FPreviousToken in rtl.createSet($mod.TToken.tkEOF,$mod.TToken.tkTab,$mod.TToken.tkLineEnding,$mod.TToken.tkComment,$mod.TToken.tkIdentifier,$mod.TToken.tknil,$mod.TToken.tkoperator,$mod.TToken.tkBraceClose,$mod.TToken.tkSquaredBraceClose,$mod.TToken.tkCaret,$mod.TToken.tkWhitespace))) {
          Self.FTokenPos += 1;
          Result = $mod.TToken.tkCaret;
        } else Result = Self.DoFetchTextToken();
      } else if ($tmp1 === "\\") {
        Self.FTokenPos += 1;
        Result = $mod.TToken.tkBackslash;
      } else if ($tmp1 === "{") {
        Self.FTokenPos += 1;
        TokenStart = Self.FTokenPos;
        Self.FCurTokenString = "";
        NestingLevel = 0;
        do {
          if (Self.FTokenPos > l) {
            SectionLength = Self.FTokenPos - TokenStart;
            Self.FCurTokenString = (Self.FCurTokenString + pas.System.Copy(Self.FCurLine,TokenStart,SectionLength)) + "\n";
            if (!FetchLocalLine()) {
              Result = $mod.TToken.tkEOF;
              Self.FCurToken = Result;
              return Result;
            };
            TokenStart = Self.FTokenPos;
          } else if (s.charAt(Self.FTokenPos - 1) === "}") {
            NestingLevel -= 1;
            if (NestingLevel < 0) break;
            Self.FTokenPos += 1;
          } else if ((s.charAt(Self.FTokenPos - 1) === "{") && ($mod.TModeSwitch.msNestedComment in Self.FCurrentModeSwitches)) {
            Self.FTokenPos += 1;
            NestingLevel += 1;
          } else Self.FTokenPos += 1;
        } while (!false);
        SectionLength = Self.FTokenPos - TokenStart;
        Self.FCurTokenString = Self.FCurTokenString + pas.System.Copy(s,TokenStart,SectionLength);
        Self.FTokenPos += 1;
        Result = $mod.TToken.tkComment;
        if (pas.System.Copy(Self.FCurTokenString,1,1) === "$") Result = Self.HandleDirective(Self.FCurTokenString);
      } else if (((($tmp1 >= "A") && ($tmp1 <= "Z")) || (($tmp1 >= "a") && ($tmp1 <= "z"))) || ($tmp1 === "_")) {
        TokenStart = Self.FTokenPos;
        do {
          Self.FTokenPos += 1;
        } while (!((Self.FTokenPos > l) || !(s.charCodeAt(Self.FTokenPos - 1) in $impl.IdentChars)));
        SectionLength = Self.FTokenPos - TokenStart;
        FetchCurTokenString();
        Result = $mod.TToken.tkIdentifier;
        for (i = 37; i <= 108; i++) {
          if (pas.SysUtils.CompareText(Self.FCurTokenString,$mod.TokenInfos[i]) === 0) {
            Result = i;
            break;
          };
        };
        if ((Result !== $mod.TToken.tkIdentifier) && (Result in Self.FNonTokens)) Result = $mod.TToken.tkIdentifier;
        Self.FCurToken = Result;
        if (Self.GetMacrosOn()) {
          Index = Self.FMacros.IndexOf(Self.FCurTokenString);
          if (Index >= 0) Result = Self.HandleMacro(Index);
        };
      } else {
        if (Self.PPIsSkipping) {
          Self.FTokenPos += 1}
         else Self.Error$1(1001,rtl.getResStr(pas.PScanner,"SErrInvalidCharacter"),[s.charAt(Self.FTokenPos - 1)]);
      };
      Self.FCurToken = Result;
      return Result;
    };
    this.ClearFiles = function () {
      while (this.FIncludeStack.FCount > 1) {
        rtl.getObject(this.FIncludeStack.Get(1)).$destroy("Destroy");
        this.FIncludeStack.Delete(1);
      };
      this.FIncludeStack.Clear();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FCurSourceFile;
        }, set: function (v) {
          this.p.FCurSourceFile = v;
        }});
      this.FFiles.Clear();
      this.FModuleRow = 0;
    };
    this.ClearMacros = function () {
      var I = 0;
      for (var $l1 = 0, $end2 = this.FMacros.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.FMacros.GetObject(I).$destroy("Destroy");
      };
      this.FMacros.Clear();
    };
    this.SetCurToken = function (AValue) {
      this.FCurToken = AValue;
    };
    this.SetCurTokenString = function (AValue) {
      this.FCurTokenString = AValue;
    };
    this.SetCurrentBoolSwitches = function (AValue) {
      if (rtl.eqSet(this.FCurrentBoolSwitches,AValue)) return;
      this.FCurrentBoolSwitches = rtl.refSet(AValue);
    };
    this.SetCurrentModeSwitches = function (AValue) {
      var Old = {};
      var AddedMS = {};
      var RemovedMS = {};
      AValue = rtl.intersectSet(AValue,this.FAllowedModeSwitches);
      if (rtl.eqSet(this.FCurrentModeSwitches,AValue)) return;
      Old = rtl.refSet(this.FCurrentModeSwitches);
      this.FCurrentModeSwitches = rtl.refSet(AValue);
      AddedMS = rtl.diffSet(this.FCurrentModeSwitches,Old);
      RemovedMS = rtl.diffSet(Old,this.FCurrentModeSwitches);
      if ($mod.TModeSwitch.msDefaultUnicodestring in AddedMS) {
        this.AddDefine("UNICODE",false);
        this.AddDefine("FPC_UNICODESTRINGS",false);
      } else if ($mod.TModeSwitch.msDefaultUnicodestring in RemovedMS) {
        this.UnDefine("UNICODE",false);
        this.UnDefine("FPC_UNICODESTRINGS",false);
      };
      if ($mod.TModeSwitch.msDefaultAnsistring in AddedMS) {
        this.AddDefine($mod.LetterSwitchNames[7],true);
        this.FCurrentBoolSwitches = rtl.includeSet(this.FCurrentBoolSwitches,$mod.TBoolSwitch.bsLongStrings);
      } else if ($mod.TModeSwitch.msDefaultAnsistring in RemovedMS) {
        this.UnDefine($mod.LetterSwitchNames[7],true);
        this.FCurrentBoolSwitches = rtl.excludeSet(this.FCurrentBoolSwitches,$mod.TBoolSwitch.bsLongStrings);
      };
    };
    this.SetCurrentValueSwitch = function (V, AValue) {
      if (!(V in this.FAllowedValueSwitches)) return;
      if (this.FCurrentValueSwitches[V] === AValue) return;
      this.FCurrentValueSwitches[V] = AValue;
    };
    this.SetWarnMsgState = function (number, State) {
      var i = 0;
      var Item = new this.TWarnMsgNumberState();
      i = this.IndexOfWarnMsgState(number,true);
      if ((i < rtl.length(this.FWarnMsgStates)) && (this.FWarnMsgStates[i].Number === number)) {
        if (State === $mod.TWarnMsgState.wmsDefault) {
          this.FWarnMsgStates.splice(i,1)}
         else this.FWarnMsgStates[i].State = State;
      } else if (State !== $mod.TWarnMsgState.wmsDefault) {
        Item.Number = number;
        Item.State = State;
        this.FWarnMsgStates.splice(i,0,Item);
      };
    };
    this.GetWarnMsgState = function (number) {
      var Result = 0;
      var i = 0;
      i = this.IndexOfWarnMsgState(number,false);
      if (i < 0) {
        Result = $mod.TWarnMsgState.wmsDefault}
       else Result = this.FWarnMsgStates[i].State;
      return Result;
    };
    this.LogEvent = function (E) {
      var Result = false;
      Result = E in this.FLogEvents;
      return Result;
    };
    this.Create$1 = function (AFileResolver) {
      var Self = this;
      function CS() {
        var Result = null;
        Result = pas.Classes.TStringList.$create("Create$1");
        Result.SetSorted(true);
        Result.FDuplicates = pas.Types.TDuplicates.dupError;
        return Result;
      };
      pas.System.TObject.Create.call(Self);
      Self.FFileResolver = AFileResolver;
      Self.FFiles = pas.Classes.TStringList.$create("Create$1");
      Self.FIncludeStack = pas.Classes.TFPList.$create("Create");
      Self.FDefines = CS();
      Self.FMacros = CS();
      Self.FMaxIncludeStackDepth = 20;
      Self.FCurrentModeSwitches = rtl.refSet($mod.FPCModeSwitches);
      Self.FAllowedModeSwitches = rtl.refSet($mod.msAllFPCModeSwitches);
      Self.FCurrentBoolSwitches = rtl.refSet($mod.bsFPCMode);
      Self.FAllowedBoolSwitches = rtl.refSet($mod.bsAll);
      Self.FAllowedValueSwitches = rtl.refSet($mod.vsAllValueSwitches);
      Self.FCurrentValueSwitches[$mod.TValueSwitch.vsInterfaces] = $mod.DefaultVSInterfaces;
      Self.FConditionEval = $mod.TCondDirectiveEvaluator.$create("Create$1");
      Self.FConditionEval.FOnLog = rtl.createCallback(Self,"OnCondEvalLog");
      Self.FConditionEval.FOnEvalVariable = rtl.createCallback(Self,"OnCondEvalVar");
      Self.FConditionEval.FOnEvalFunction = rtl.createCallback(Self,"OnCondEvalFunction");
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FConditionEval;
        }, set: function (v) {
          this.p.FConditionEval = v;
        }});
      this.ClearMacros();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FMacros;
        }, set: function (v) {
          this.p.FMacros = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FDefines;
        }, set: function (v) {
          this.p.FDefines = v;
        }});
      this.ClearFiles();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FFiles;
        }, set: function (v) {
          this.p.FFiles = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FIncludeStack;
        }, set: function (v) {
          this.p.FIncludeStack = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.OpenFile = function (AFilename) {
      this.ClearFiles();
      this.FCurSourceFile = this.FFileResolver.FindSourceFile(AFilename);
      this.FCurFilename = AFilename;
      this.AddFile(this.FCurFilename);
      if (this.LogEvent($mod.TPScannerLogEvent.sleFile)) this.DoLog$1($mod.TMessageType.mtInfo,1007,rtl.getResStr(pas.PScanner,"SLogOpeningFile"),[this.FormatPath(AFilename)],true);
    };
    this.FinishedModule = function () {
      if ((($mod.TPScannerLogEvent.sleLineNumber in this.FLogEvents) && !this.FCurSourceFile.IsEOF()) && ((this.FCurRow % 100) > 0)) this.DoLog$1($mod.TMessageType.mtInfo,1008,rtl.getResStr(pas.PScanner,"SLogLineNumber"),[this.FCurRow],true);
    };
    this.FormatPath = function (aFilename) {
      var Result = "";
      if (this.FOnFormatPath != null) {
        Result = this.FOnFormatPath(aFilename)}
       else Result = aFilename;
      return Result;
    };
    this.SetNonToken = function (aToken) {
      this.FNonTokens = rtl.includeSet(this.FNonTokens,aToken);
    };
    this.UnsetNonToken = function (aToken) {
      this.FNonTokens = rtl.excludeSet(this.FNonTokens,aToken);
    };
    this.SetTokenOption = function (aOption) {
      this.FTokenOptions = rtl.includeSet(this.FTokenOptions,aOption);
    };
    this.UnSetTokenOption = function (aOption) {
      this.FTokenOptions = rtl.excludeSet(this.FTokenOptions,aOption);
    };
    this.CheckToken = function (aToken, ATokenString) {
      var Result = 0;
      Result = aToken;
      if ((aToken === $mod.TToken.tkIdentifier) && (pas.SysUtils.CompareText(ATokenString,"operator") === 0)) if ($mod.TTokenOption.toOperatorToken in this.FTokenOptions) Result = $mod.TToken.tkoperator;
      return Result;
    };
    this.FetchToken = function () {
      var Result = 0;
      var IncludeStackItem = null;
      this.FPreviousToken = this.FCurToken;
      while (true) {
        Result = this.DoFetchToken();
        var $tmp1 = this.FCurToken;
        if ($tmp1 === $mod.TToken.tkEOF) {
          if (this.FIncludeStack.FCount > 0) {
            IncludeStackItem = rtl.getObject(this.FIncludeStack.Get(this.FIncludeStack.FCount - 1));
            this.FIncludeStack.Delete(this.FIncludeStack.FCount - 1);
            this.FCurSourceFile.$destroy("Destroy");
            this.FCurSourceFile = IncludeStackItem.SourceFile;
            this.FCurFilename = IncludeStackItem.Filename;
            this.FCurToken = IncludeStackItem.Token;
            this.FCurTokenString = IncludeStackItem.TokenString;
            this.FCurLine = IncludeStackItem.Line;
            this.FCurRow = IncludeStackItem.Row;
            this.FCurColumnOffset = IncludeStackItem.ColumnOffset;
            this.FTokenPos = IncludeStackItem.TokenPos;
            IncludeStackItem = rtl.freeLoc(IncludeStackItem);
            Result = this.FCurToken;
          } else break;
        } else if (($tmp1 === $mod.TToken.tkWhitespace) || ($tmp1 === $mod.TToken.tkLineEnding)) {
          if (!(this.FSkipWhiteSpace || this.PPIsSkipping)) break}
         else if ($tmp1 === $mod.TToken.tkComment) {
          if (!(this.FSkipComments || this.PPIsSkipping)) break}
         else if ($tmp1 === $mod.TToken.tkself) {
          if (!($mod.TPOption.po_SelfToken in this.FOptions)) {
            this.FCurToken = $mod.TToken.tkIdentifier;
            Result = this.FCurToken;
          };
          if (!(this.FSkipComments || this.PPIsSkipping)) break;
        } else if ($tmp1 === $mod.TToken.tkoperator) {
          if (!($mod.TTokenOption.toOperatorToken in this.FTokenOptions)) {
            this.FCurToken = $mod.TToken.tkIdentifier;
            Result = this.FCurToken;
          };
          if (!(this.FSkipComments || this.PPIsSkipping)) break;
        } else {
          if (!this.PPIsSkipping) break;
        };
      };
      return Result;
    };
    this.ReadNonPascalTillEndToken = function (StopAtLineEnd) {
      var Self = this;
      var Result = 0;
      var StartPos = 0;
      var s = "";
      var l = 0;
      function Add() {
        var AddLen = 0;
        AddLen = Self.FTokenPos - StartPos;
        if (AddLen === 0) {
          Self.FCurTokenString = ""}
         else {
          Self.FCurTokenString = Self.FCurTokenString + pas.System.Copy(Self.FCurLine,StartPos,AddLen);
          StartPos = Self.FTokenPos;
        };
      };
      function DoEndOfLine() {
        var Result$1 = false;
        Add();
        if (StopAtLineEnd) {
          Result = $mod.TToken.tkLineEnding;
          Self.FCurToken = $mod.TToken.tkLineEnding;
          Self.FetchLine();
          return true;
        };
        if (!Self.FetchLine()) {
          Result = $mod.TToken.tkEOF;
          Self.FCurToken = $mod.TToken.tkEOF;
          return true;
        };
        s = Self.FCurLine;
        l = s.length;
        StartPos = Self.FTokenPos;
        Result$1 = false;
        return Result$1;
      };
      Self.FCurTokenString = "";
      StartPos = Self.FTokenPos;
      s = Self.FCurLine;
      l = s.length;
      do {
        if (Self.FTokenPos > l) if (DoEndOfLine()) return Result;
        var $tmp1 = s.charAt(Self.FTokenPos - 1);
        if ($tmp1 === "'") {
          Self.FTokenPos += 1;
          do {
            if (Self.FTokenPos > l) Self.Error(1002,rtl.getResStr(pas.PScanner,"SErrOpenString"));
            var $tmp2 = s.charAt(Self.FTokenPos - 1);
            if ($tmp2 === "'") {
              Self.FTokenPos += 1;
              break;
            } else if (($tmp2 === "\n") || ($tmp2 === "\r")) {
              break;
            } else {
              Self.FTokenPos += 1;
            };
          } while (!false);
        } else if ($tmp1 === "\/") {
          Self.FTokenPos += 1;
          if ((Self.FTokenPos <= l) && (s.charAt(Self.FTokenPos - 1) === "\/")) {
            do {
              Self.FTokenPos += 1;
            } while (!((Self.FTokenPos > l) || (s.charCodeAt(Self.FTokenPos - 1) in rtl.createSet(10,13))));
          };
        } else if ((((($tmp1 >= "0") && ($tmp1 <= "9")) || (($tmp1 >= "A") && ($tmp1 <= "Z"))) || (($tmp1 >= "a") && ($tmp1 <= "z"))) || ($tmp1 === "_")) {
          if ((pas.System.Copy(s,Self.FTokenPos,3).toLowerCase() === "end") && (((Self.FTokenPos + 3) > l) || !(s.charCodeAt((Self.FTokenPos + 3) - 1) in $impl.IdentChars))) {
            Add();
            if (Self.FCurTokenString !== "") {
              Result = $mod.TToken.tkWhitespace;
              Self.FCurToken = Result;
              return Result;
            };
            Result = $mod.TToken.tkend;
            Self.FCurTokenString = pas.System.Copy(s,Self.FTokenPos,3);
            Self.FTokenPos += 3;
            Self.FCurToken = Result;
            return Result;
          } else {
            while ((Self.FTokenPos <= l) && (s.charCodeAt(Self.FTokenPos - 1) in $impl.IdentChars)) Self.FTokenPos += 1;
          };
        } else {
          Self.FTokenPos += 1;
        };
      } while (!false);
      return Result;
    };
    this.AddDefine = function (aName, Quiet) {
      var Result = false;
      if (this.FDefines.IndexOf(aName) >= 0) return false;
      Result = true;
      this.FDefines.Add(aName);
      if (!Quiet && this.LogEvent($mod.TPScannerLogEvent.sleConditionals)) this.DoLog$1($mod.TMessageType.mtInfo,1026,rtl.getResStr(pas.PScanner,"SLogMacroDefined"),[aName],false);
      return Result;
    };
    this.RemoveDefine = function (aName, Quiet) {
      var Result = false;
      var I = 0;
      I = this.FDefines.IndexOf(aName);
      if (I < 0) return false;
      Result = true;
      this.FDefines.Delete(I);
      if (!Quiet && this.LogEvent($mod.TPScannerLogEvent.sleConditionals)) this.DoLog$1($mod.TMessageType.mtInfo,1027,rtl.getResStr(pas.PScanner,"SLogMacroUnDefined"),[aName],false);
      return Result;
    };
    this.UnDefine = function (aName, Quiet) {
      var Result = false;
      Result = this.RemoveDefine(aName,Quiet);
      if (this.RemoveMacro(aName,Quiet)) Result = true;
      return Result;
    };
    this.IsDefined = function (aName) {
      var Result = false;
      Result = (this.FDefines.IndexOf(aName) >= 0) || (this.FMacros.IndexOf(aName) >= 0);
      return Result;
    };
    this.IfOpt = function (Letter) {
      var Result = false;
      Letter = pas.System.upcase(Letter);
      Result = ((Letter.charCodeAt() in rtl.createSet(null,65,90)) && ($mod.LetterSwitchNames[Letter.charCodeAt() - 65] !== "")) && this.IsDefined($mod.LetterSwitchNames[Letter.charCodeAt() - 65]);
      return Result;
    };
    this.AddMacro = function (aName, aValue, Quiet) {
      var Result = false;
      var Index = 0;
      Index = this.FMacros.IndexOf(aName);
      if (Index === -1) {
        this.FMacros.AddObject(aName,$mod.TMacroDef.$create("Create$1",[aName,aValue]))}
       else {
        if (this.FMacros.GetObject(Index).FValue === aValue) return false;
        this.FMacros.GetObject(Index).FValue = aValue;
      };
      Result = true;
      if (!Quiet && this.LogEvent($mod.TPScannerLogEvent.sleConditionals)) this.DoLog$1($mod.TMessageType.mtInfo,1026,rtl.getResStr(pas.PScanner,"SLogMacroDefined"),[aName],false);
      return Result;
    };
    this.RemoveMacro = function (aName, Quiet) {
      var Result = false;
      var Index = 0;
      Index = this.FMacros.IndexOf(aName);
      if (Index < 0) return false;
      Result = true;
      this.FMacros.GetObject(Index).$destroy("Destroy");
      this.FMacros.Delete(Index);
      if (!Quiet && this.LogEvent($mod.TPScannerLogEvent.sleConditionals)) this.DoLog$1($mod.TMessageType.mtInfo,1027,rtl.getResStr(pas.PScanner,"SLogMacroUnDefined"),[aName],false);
      return Result;
    };
    this.SetCompilerMode = function (S) {
      this.HandleMode(S);
    };
    this.CurSourcePos = function () {
      var Result = new $mod.TPasSourcePos();
      Result.FileName = this.FCurFilename;
      Result.Row = this.FCurRow;
      Result.Column = this.GetCurColumn();
      return Result;
    };
    this.SetForceCaret = function (AValue) {
      var Result = false;
      Result = $mod.TTokenOption.toForceCaret in this.FTokenOptions;
      if (AValue) {
        this.FTokenOptions = rtl.includeSet(this.FTokenOptions,$mod.TTokenOption.toForceCaret)}
       else this.FTokenOptions = rtl.excludeSet(this.FTokenOptions,$mod.TTokenOption.toForceCaret);
      return Result;
    };
    this.IgnoreMsgType = function (MsgType) {
      var Result = false;
      var $tmp1 = MsgType;
      if ($tmp1 === $mod.TMessageType.mtWarning) {
        if (!($mod.TBoolSwitch.bsWarnings in this.FCurrentBoolSwitches)) return true}
       else if ($tmp1 === $mod.TMessageType.mtNote) {
        if (!($mod.TBoolSwitch.bsNotes in this.FCurrentBoolSwitches)) return true}
       else if ($tmp1 === $mod.TMessageType.mtHint) if (!($mod.TBoolSwitch.bsHints in this.FCurrentBoolSwitches)) return true;
      Result = false;
      return Result;
    };
  });
  this.TokenInfos = ["EOF","Whitespace","Comment","Identifier","string","Number","Character","(",")","*","+",",","-",".","\/",":",";","<","=",">","@","[","]","^","\\","..",":=","<>","<=",">=","**","><","+=","-=","*=","\/=","@@","absolute","and","array","as","asm","begin","bitpacked","case","class","const","constref","constructor","destructor","dispinterface","div","do","downto","else","end","except","exports","false","file","finalization","finally","for","function","generic","goto","if","implementation","in","inherited","initialization","inline","interface","is","label","library","mod","nil","not","object","of","operator","or","packed","procedure","program","property","raise","record","repeat","resourcestring","self","set","shl","shr","specialize","then","threadvar","to","true","try","type","unit","until","uses","var","while","with","xor","LineEnding","Tab"];
  this.SModeSwitchNames = ["","","","","","","","","","","CLASS","OBJPAS","RESULT","PCHARTOSTRING","CVAR","NESTEDCOMMENTS","CLASSICPROCVARS","MACPROCVARS","REPEATFORWARD","POINTERTOPROCVAR","AUTODEREF","INITFINAL","ANSISTRINGS","OUT","DEFAULTPARAMETERS","HINTDIRECTIVE","DUPLICATELOCALS","PROPERTIES","ALLOWINLINE","EXCEPTIONS","OBJECTIVEC1","OBJECTIVEC2","NESTEDPROCVARS","NONLOCALGOTO","ADVANCEDRECORDS","ISOUNARYMINUS","SYSTEMCODEPAGE","FINALFIELDS","UNICODESTRINGS","TYPEHELPERS","CBLOCKS","ISOIO","ISOPROGRAMPARAS","ISOMOD","ARRAYOPERATORS","EXTERNALCLASS","PREFIXEDATTRIBUTES","IGNOREATTRIBUTES","OMITRTTI"];
  this.LetterSwitchNames = ["ALIGN","BOOLEVAL","ASSERTIONS","DEBUGINFO","EXTENSION","","IMPORTEDDATA","LONGSTRINGS","IOCHECKS","WRITEABLECONST","","LOCALSYMBOLS","TYPEINFO","","OPTIMIZATION","OPENSTRINGS","OVERFLOWCHECKS","RANGECHECKS","","TYPEDADDRESS","SAFEDIVIDE","VARSTRINGCHECKS","STACKFRAMES","EXTENDEDSYNTAX","REFERENCEINFO",""];
  this.BoolSwitchNames = ["None","Align","BoolEval","Assertions","DebugInfo","Extension","ImportedData","LongStrings","IOChecks","WriteableConst","LocalSymbols","TypeInfo","Optimization","OpenStrings","OverflowChecks","RangeChecks","TypedAddress","SafeDivide","VarStringChecks","Stackframes","ExtendedSyntax","ReferenceInfo","Hints","Notes","Warnings","Macro","ScopedEnums","ObjectChecks","PointerMath"];
  this.ValueSwitchNames = ["Interfaces"];
  this.AllLanguageModes = rtl.createSet($mod.TModeSwitch.msFpc,$mod.TModeSwitch.msObjfpc,$mod.TModeSwitch.msDelphi,$mod.TModeSwitch.msTP7,$mod.TModeSwitch.msMac,$mod.TModeSwitch.msIso,$mod.TModeSwitch.msExtpas);
  this.MessageTypeNames = ["Fatal","Error","Warning","Note","Hint","Info","Debug"];
  this.msAllFPCModeSwitches = rtl.createSet(null,$mod.TModeSwitch.msNone,$mod.TModeSwitch.msOmitRTTI);
  this.DelphiModeSwitches = rtl.createSet($mod.TModeSwitch.msDelphi,$mod.TModeSwitch.msClass,$mod.TModeSwitch.msObjpas,$mod.TModeSwitch.msResult,$mod.TModeSwitch.msStringPchar,$mod.TModeSwitch.msPointer2Procedure,$mod.TModeSwitch.msAutoDeref,$mod.TModeSwitch.msTPProcVar,$mod.TModeSwitch.msInitFinal,$mod.TModeSwitch.msDefaultAnsistring,$mod.TModeSwitch.msOut,$mod.TModeSwitch.msDefaultPara,$mod.TModeSwitch.msDuplicateNames,$mod.TModeSwitch.msHintDirective,$mod.TModeSwitch.msProperty,$mod.TModeSwitch.msDefaultInline,$mod.TModeSwitch.msExcept,$mod.TModeSwitch.msAdvancedRecords,$mod.TModeSwitch.msTypeHelpers,$mod.TModeSwitch.msPrefixedAttributes,$mod.TModeSwitch.msArrayOperators);
  this.DelphiUnicodeModeSwitches = rtl.unionSet($mod.DelphiModeSwitches,rtl.createSet($mod.TModeSwitch.msSystemCodePage,$mod.TModeSwitch.msDefaultUnicodestring));
  this.FPCModeSwitches = rtl.createSet($mod.TModeSwitch.msFpc,$mod.TModeSwitch.msStringPchar,$mod.TModeSwitch.msNestedComment,$mod.TModeSwitch.msRepeatForward,$mod.TModeSwitch.msCVarSupport,$mod.TModeSwitch.msInitFinal,$mod.TModeSwitch.msHintDirective,$mod.TModeSwitch.msProperty,$mod.TModeSwitch.msDefaultInline);
  this.OBJFPCModeSwitches = rtl.createSet($mod.TModeSwitch.msObjfpc,$mod.TModeSwitch.msClass,$mod.TModeSwitch.msObjpas,$mod.TModeSwitch.msResult,$mod.TModeSwitch.msStringPchar,$mod.TModeSwitch.msNestedComment,$mod.TModeSwitch.msRepeatForward,$mod.TModeSwitch.msCVarSupport,$mod.TModeSwitch.msInitFinal,$mod.TModeSwitch.msOut,$mod.TModeSwitch.msDefaultPara,$mod.TModeSwitch.msHintDirective,$mod.TModeSwitch.msProperty,$mod.TModeSwitch.msDefaultInline,$mod.TModeSwitch.msExcept);
  this.TPModeSwitches = rtl.createSet($mod.TModeSwitch.msTP7,$mod.TModeSwitch.msTPProcVar,$mod.TModeSwitch.msDuplicateNames);
  this.GPCModeSwitches = rtl.createSet($mod.TModeSwitch.msGPC,$mod.TModeSwitch.msTPProcVar);
  this.MacModeSwitches = rtl.createSet($mod.TModeSwitch.msMac,$mod.TModeSwitch.msCVarSupport,$mod.TModeSwitch.msMacProcVar,$mod.TModeSwitch.msNestedProcVars,$mod.TModeSwitch.msNonLocalGoto,$mod.TModeSwitch.msISOLikeUnaryMinus,$mod.TModeSwitch.msDefaultInline);
  this.ISOModeSwitches = rtl.createSet($mod.TModeSwitch.msIso,$mod.TModeSwitch.msTPProcVar,$mod.TModeSwitch.msDuplicateNames,$mod.TModeSwitch.msNestedProcVars,$mod.TModeSwitch.msNonLocalGoto,$mod.TModeSwitch.msISOLikeUnaryMinus,$mod.TModeSwitch.msISOLikeIO,$mod.TModeSwitch.msISOLikeProgramsPara,$mod.TModeSwitch.msISOLikeMod);
  this.ExtPasModeSwitches = rtl.createSet($mod.TModeSwitch.msExtpas,$mod.TModeSwitch.msTPProcVar,$mod.TModeSwitch.msDuplicateNames,$mod.TModeSwitch.msNestedProcVars,$mod.TModeSwitch.msNonLocalGoto,$mod.TModeSwitch.msISOLikeUnaryMinus,$mod.TModeSwitch.msISOLikeIO,$mod.TModeSwitch.msISOLikeProgramsPara,$mod.TModeSwitch.msISOLikeMod);
  this.StrToModeSwitch = function (aName) {
    var Result = 0;
    var ms = 0;
    aName = pas.SysUtils.UpperCase(aName);
    if (aName === "") return $mod.TModeSwitch.msNone;
    for (ms = 0; ms <= 48; ms++) if ($mod.SModeSwitchNames[ms] === aName) return ms;
    Result = $mod.TModeSwitch.msNone;
    return Result;
  };
  this.ModeSwitchesToStr = function (Switches) {
    var Result = "";
    var ms = 0;
    Result = "";
    for (var $l1 in Switches) {
      ms = +$l1;
      Result = (Result + $mod.SModeSwitchNames[ms]) + ",";
    };
    Result = ("[" + pas.SysUtils.LeftStr(Result,Result.length - 1)) + "]";
    return Result;
  };
  this.BoolSwitchesToStr = function (Switches) {
    var Result = "";
    var bs = 0;
    Result = "";
    for (var $l1 in Switches) {
      bs = +$l1;
      Result = (Result + $mod.BoolSwitchNames[bs]) + ",";
    };
    Result = ("[" + pas.SysUtils.LeftStr(Result,Result.length - 1)) + "]";
    return Result;
  };
  this.FilenameIsAbsolute = function (TheFilename) {
    var Result = false;
    Result = $mod.FilenameIsUnixAbsolute(TheFilename);
    return Result;
  };
  this.FilenameIsWinAbsolute = function (TheFilename) {
    var Result = false;
    Result = (((TheFilename.length >= 2) && (TheFilename.charCodeAt(0) in rtl.createSet(null,65,90,null,97,122))) && (TheFilename.charAt(1) === ":")) || (((TheFilename.length >= 2) && (TheFilename.charAt(0) === "\\")) && (TheFilename.charAt(1) === "\\"));
    return Result;
  };
  this.FilenameIsUnixAbsolute = function (TheFilename) {
    var Result = false;
    Result = (TheFilename !== "") && (TheFilename.charAt(0) === "\/");
    return Result;
  };
  this.IsNamedToken = function (AToken, T) {
    var Result = false;
    var I = 0;
    if (rtl.length($impl.SortedTokens) === 0) $impl.SortTokenInfo();
    I = $impl.IndexOfToken(pas.SysUtils.LowerCase(AToken));
    Result = I !== -1;
    if (Result) T.set($impl.SortedTokens[I]);
    return Result;
  };
  this.ExtractFilenameOnly = function (AFileName) {
    var Result = "";
    Result = pas.SysUtils.ChangeFileExt(pas.SysUtils.ExtractFileName(AFileName),"");
    return Result;
  };
  this.CreateMsgArgs = function (MsgArgs, Args) {
    var i = 0;
    var v = undefined;
    MsgArgs.set(rtl.arraySetLength(MsgArgs.get(),"",((rtl.length(Args) - 1) - 0) + 1));
    for (var $l1 = 0, $end2 = rtl.length(Args) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      v = Args[i];
      if (pas.JS.isBoolean(v)) {
        MsgArgs.get()[i] = pas.SysUtils.BoolToStr(!(v == false),false)}
       else if (rtl.isString(v)) {
        MsgArgs.get()[i] = "" + v}
       else if (rtl.isNumber(v)) {
        if (pas.JS.isInteger(v)) {
          MsgArgs.get()[i] = "" + Math.floor(v)}
         else MsgArgs.get()[i] = rtl.floatToStr(rtl.getNumber(v));
      } else MsgArgs.get()[i] = "";
    };
  };
  this.SafeFormat = function (Fmt, Args) {
    var Result = "";
    var MsgArgs = [];
    var i = 0;
    try {
      Result = pas.SysUtils.Format(Fmt,Args);
    } catch ($e) {
      Result = "";
      MsgArgs = [];
      $mod.CreateMsgArgs({get: function () {
          return MsgArgs;
        }, set: function (v) {
          MsgArgs = v;
        }},Args);
      for (var $l1 = 0, $end2 = rtl.length(MsgArgs) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (i > 0) Result = Result + ",";
        Result = Result + MsgArgs[i];
      };
      Result = ((("{" + Fmt) + "}[") + Result) + "]";
    };
    return Result;
  };
  $mod.$resourcestrings = {SErrInvalidCharacter: {org: "Invalid character '%s'"}, SErrOpenString: {org: "string exceeds end of line"}, SErrIncludeFileNotFound: {org: "Could not find include file '%s'"}, SErrIfXXXNestingLimitReached: {org: "Nesting of $IFxxx too deep"}, SErrInvalidPPElse: {org: "$ELSE without matching $IFxxx"}, SErrInvalidPPEndif: {org: "$ENDIF without matching $IFxxx"}, SLogOpeningFile: {org: 'Opening source file "%s".'}, SLogLineNumber: {org: "Reading line %d."}, SLogIFDefAccepted: {org: "IFDEF %s found, accepting."}, SLogIFDefRejected: {org: "IFDEF %s found, rejecting."}, SLogIFNDefAccepted: {org: "IFNDEF %s found, accepting."}, SLogIFNDefRejected: {org: "IFNDEF %s found, rejecting."}, SLogIFAccepted: {org: "IF %s found, accepting."}, SLogIFRejected: {org: "IF %s found, rejecting."}, SLogIFOptAccepted: {org: "IFOpt %s found, accepting."}, SLogIFOptRejected: {org: "IFOpt %s found, rejecting."}, SLogELSEIFAccepted: {org: "ELSEIF %s found, accepting."}, SLogELSEIFRejected: {org: "ELSEIF %s found, rejecting."}, SErrInvalidMode: {org: 'Invalid mode: "%s"'}, SErrInvalidModeSwitch: {org: 'Invalid mode switch: "%s"'}, SErrXExpectedButYFound: {org: '"%s" expected, but "%s" found'}, SErrRangeCheck: {org: "range check failed"}, SErrDivByZero: {org: "division by zero"}, SErrOperandAndOperatorMismatch: {org: "operand and operator mismatch"}, SUserDefined: {org: 'User defined: "%s"'}, SLogMacroDefined: {org: "Macro defined: %s"}, SLogMacroUnDefined: {org: "Macro undefined: %s"}, SWarnIllegalCompilerDirectiveX: {org: 'Illegal compiler directive "%s"'}, SIllegalStateForWarnDirective: {org: 'Illegal state "%s" for $WARN directive'}, SErrIncludeLimitReached: {org: "Include file limit reached"}, SMisplacedGlobalCompilerSwitch: {org: "Misplaced global compiler switch, ignored"}};
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.IdentChars = rtl.createSet(null,48,57,null,65,90,null,97,122,95);
  $impl.Digits = rtl.createSet(null,48,57);
  $impl.Letters = rtl.createSet(null,97,122,null,65,90);
  $impl.HexDigits = rtl.createSet(null,48,57,null,97,102,null,65,70);
  $impl.SortedTokens = [];
  $impl.LowerCaseTokens = rtl.arraySetLength(null,"",111);
  $impl.SortTokenInfo = function () {
    var tk = 0;
    var I = 0;
    var J = 0;
    var K = 0;
    var l = 0;
    for (tk = 0; tk <= 110; tk++) $impl.LowerCaseTokens[tk] = pas.SysUtils.LowerCase($mod.TokenInfos[tk]);
    $impl.SortedTokens = rtl.arraySetLength($impl.SortedTokens,0,($mod.TToken.tkxor - $mod.TToken.tkabsolute) + 1);
    I = 0;
    for (tk = 37; tk <= 108; tk++) {
      $impl.SortedTokens[I] = tk;
      I += 1;
    };
    l = rtl.length($impl.SortedTokens) - 1;
    K = l >>> 1;
    while (K > 0) {
      for (var $l1 = 0, $end2 = l - K; $l1 <= $end2; $l1++) {
        I = $l1;
        J = I;
        while ((J >= 0) && ($impl.LowerCaseTokens[$impl.SortedTokens[J]] > $impl.LowerCaseTokens[$impl.SortedTokens[J + K]])) {
          tk = $impl.SortedTokens[J];
          $impl.SortedTokens[J] = $impl.SortedTokens[J + K];
          $impl.SortedTokens[J + K] = tk;
          if (J > K) {
            J -= K}
           else J = 0;
        };
      };
      K = K >>> 1;
    };
  };
  $impl.IndexOfToken = function (AToken) {
    var Result = 0;
    var B = 0;
    var T = 0;
    var M = 0;
    var N = "";
    B = 0;
    T = rtl.length($impl.SortedTokens) - 1;
    while (B <= T) {
      M = Math.floor((B + T) / 2);
      N = $impl.LowerCaseTokens[$impl.SortedTokens[M]];
      if (AToken < N) {
        T = M - 1}
       else if (AToken === N) {
        return M}
       else B = M + 1;
    };
    Result = -1;
    return Result;
  };
  rtl.createClass($impl,"TIncludeStackItem",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.SourceFile = null;
      this.Filename = "";
      this.Token = 0;
      this.TokenString = "";
      this.Line = "";
      this.Row = 0;
      this.ColumnOffset = 0;
      this.TokenPos = 0;
    };
    this.$final = function () {
      this.SourceFile = undefined;
      pas.System.TObject.$final.call(this);
    };
  });
});
rtl.module("pas2jsfs",["System","Classes","SysUtils","PScanner","fpjson"],function () {
  "use strict";
  var $mod = this;
  this.nIncludeSearch = 201;
  this.sIncludeSearch = "Include file search: %s";
  this.nUnitSearch = 202;
  this.sUnitSearch = "Unitsearch: %s";
  this.nSearchingFileFound = 203;
  this.sSearchingFileFound = "Searching file: %s... found";
  this.nSearchingFileNotFound = 204;
  this.sSearchingFileNotFound = "Searching file: %s... not found";
  this.nDuplicateFileFound = 205;
  this.sDuplicateFileFound = 'Duplicate file found: "%s" and "%s"';
  this.nCustomJSFileNotFound = 206;
  this.sCustomJSFileNotFound = 'custom JS file not found: "%s"';
  this.nUsingPath = 104;
  this.sUsingPath = 'Using %s: "%s"';
  this.nFolderNotFound = 105;
  this.sFolderNotFound = "%s not found: %s";
  rtl.createClass($mod,"EPas2jsFS",pas.SysUtils.Exception,function () {
  });
  $mod.$rtti.$Class("TPas2jsFile");
  $mod.$rtti.$Class("TSourceLineReader");
  $mod.$rtti.$Class("TPas2jsFSResolver");
  $mod.$rtti.$Class("TPas2JSFS");
  rtl.createClass($mod,"TSourceLineReader",pas.PScanner.TLineReader,function () {
    this.$init = function () {
      pas.PScanner.TLineReader.$init.call(this);
      this.FIsEOF = false;
      this.FLineNumber = 0;
      this.FSource = "";
      this.FSrcPos = 0;
    };
    this.IncLineNumber = function () {
      this.FLineNumber += 1;
    };
    this.Create$2 = function (aFileName, aSource) {
      pas.PScanner.TLineReader.Create$1.call(this,aFileName);
      this.FSource = aSource;
      this.FSrcPos = 1;
      this.FIsEOF = this.FSource === "";
    };
    this.IsEOF = function () {
      var Result = false;
      Result = this.FIsEOF;
      return Result;
    };
    this.ReadLine = function () {
      var Self = this;
      var Result = "";
      var S = "";
      var p = 0;
      var SrcLen = 0;
      function GetLine() {
        var l = 0;
        l = p - Self.FSrcPos;
        Result = pas.System.Copy(S,Self.FSrcPos,l);
        Self.FSrcPos = p;
        Self.IncLineNumber();
      };
      if (Self.FIsEOF) return "";
      S = Self.FSource;
      SrcLen = S.length;
      p = Self.FSrcPos;
      while (p <= SrcLen) {
        var $tmp1 = S.charAt(p - 1);
        if (($tmp1 === "\n") || ($tmp1 === "\r")) {
          GetLine();
          p += 1;
          if (((p <= SrcLen) && (S.charCodeAt(p - 1) in rtl.createSet(10,13))) && (S.charAt(p - 1) !== S.charAt((p - 1) - 1))) p += 1;
          if (p > SrcLen) Self.FIsEOF = true;
          Self.FSrcPos = p;
          return Result;
        } else {
          p += 1;
        };
      };
      Self.FIsEOF = true;
      GetLine();
      return Result;
    };
  });
  this.TP2jsFSOption = {"0": "caoShowFullFilenames", caoShowFullFilenames: 0, "1": "caoShowTriedUsedFiles", caoShowTriedUsedFiles: 1, "2": "caoSearchLikeFPC", caoSearchLikeFPC: 2, "3": "caoStrictFileCase", caoStrictFileCase: 3};
  this.TKeyCompareType = {"0": "kcFilename", kcFilename: 0, "1": "kcUnitName", kcUnitName: 1};
  $mod.$rtti.$Enum("TKeyCompareType",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TKeyCompareType});
  rtl.createClass($mod,"TPas2JSFS",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FOptions = {};
      this.FReadLineCounter = 0;
      this.FDefaultOutputPath = "";
      this.FUnitOutputPath = "";
    };
    this.$final = function () {
      this.FOptions = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetOptionFromIndex = function (AIndex, AValue) {
      this.SetOption(AIndex,AValue);
    };
    this.SetDefaultOutputPath = function (AValue) {
      AValue = this.ExpandDirectory(AValue);
      if (this.FDefaultOutputPath === AValue) return;
      this.FDefaultOutputPath = AValue;
    };
    this.SetUnitOutputPath = function (AValue) {
      AValue = this.ExpandDirectory(AValue);
      if (this.FUnitOutputPath === AValue) return;
      this.FUnitOutputPath = AValue;
    };
    this.SetOption = function (Flag, Enable) {
      if (Enable) {
        this.FOptions = rtl.includeSet(this.FOptions,Flag)}
       else this.FOptions = rtl.excludeSet(this.FOptions,Flag);
    };
    this.OptionIsSet = function (Index) {
      var Result = false;
      Result = Index in this.FOptions;
      return Result;
    };
    this.PCUExists = function (aFileName) {
      var Result = false;
      Result = this.FileExists(aFileName.get());
      return Result;
    };
    this.GetPCUDirs = function (aList, aBaseDir) {
      if (this.FUnitOutputPath !== "") aList.Add(this.FUnitOutputPath);
      aList.Add(aBaseDir);
    };
    this.SameFileName = function (File1, File2) {
      var Result = false;
      Result = pas.SysUtils.CompareText(File1,File2) === 0;
      return Result;
    };
    this.File1IsNewer = function (File1, File2) {
      var Result = false;
      Result = false;
      return Result;
    };
    this.ExpandDirectory = function (Filename) {
      var Result = "";
      Result = Filename;
      return Result;
    };
    this.ExpandFileName = function (Filename) {
      var Result = "";
      Result = Filename;
      return Result;
    };
    this.ExpandExecutable = function (Filename) {
      var Result = "";
      Result = Filename;
      return Result;
    };
    this.FormatPath = function (aFileName) {
      var Result = "";
      Result = aFileName;
      return Result;
    };
    this.DirectoryExists = function (aDirectory) {
      var Result = false;
      Result = false;
      return Result;
    };
    this.TryCreateRelativePath = function (Filename, BaseDirectory, UsePointDirectory, RelPath) {
      var Result = false;
      Result = true;
      RelPath.set(Filename);
      return Result;
    };
    this.WriteFoldersAndSearchPaths = function () {
    };
    this.CreateResolver = function () {
      var Result = null;
      Result = $mod.TPas2jsFSResolver.$create("Create$2",[this]);
      return Result;
    };
    this.AddForeignUnitPath = function (aValue, FromCmdLine) {
      var Result = "";
      Result = "";
      return Result;
    };
    this.HandleOptionPaths = function (C, aValue, FromCmdLine) {
      var Result = "";
      Result = ("Invalid parameter : -F" + C) + aValue;
      return Result;
    };
    this.Create$1 = function () {
      this.FOptions = rtl.refSet($mod.DefaultPas2jsFSOptions);
    };
    this.Reset = function () {
      this.FReadLineCounter = 0;
      this.FUnitOutputPath = "";
      this.FDefaultOutputPath = "";
    };
    this.IncReadLineCounter = function () {
      this.FReadLineCounter += 1;
    };
  });
  rtl.createClass($mod,"TPas2jsFile",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FFilename = "";
      this.FFS = null;
      this.FSource = "";
    };
    this.$final = function () {
      this.FFS = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetSource = function (aSource) {
      this.FSource = aSource;
    };
    this.Create$1 = function (aFS, aFilename) {
      this.FFS = aFS;
      this.FFilename = aFilename;
    };
  });
  rtl.createClass($mod,"TPas2jsFSResolver",pas.PScanner.TBaseFileResolver,function () {
    this.$init = function () {
      pas.PScanner.TBaseFileResolver.$init.call(this);
      this.FFS = null;
    };
    this.$final = function () {
      this.FFS = undefined;
      pas.PScanner.TBaseFileResolver.$final.call(this);
    };
    this.Create$2 = function (aFS) {
      this.FFS = aFS;
    };
    this.FindIncludeFileName = function (aFilename) {
      var Result = "";
      Result = this.FFS.FindIncludeFileName(aFilename);
      return Result;
    };
    this.FindIncludeFile = function (aFilename) {
      var Result = null;
      var Filename = "";
      Result = null;
      Filename = this.FFS.FindIncludeFileName(aFilename);
      if (Filename === "") return Result;
      try {
        Result = this.FindSourceFile(Filename);
      } catch ($e) {
      };
      return Result;
    };
    this.FindSourceFile = function (aFilename) {
      var Result = null;
      var CurFilename = "";
      CurFilename = this.FFS.FindSourceFileName(aFilename);
      Result = this.FFS.LoadFile(CurFilename,false).CreateLineReader(false);
      return Result;
    };
  });
  this.p2jsfcoCaption = ["Show full filenames","Show tried\/used files","Search files like FPC","Strict file case"];
  this.EncodingBinary = "Binary";
  this.DefaultPas2jsFSOptions = {};
});
rtl.module("webfilecache",["System","Classes","SysUtils","JS","Web","fpjson","pas2jsfs","PScanner","contnrs"],function () {
  "use strict";
  var $mod = this;
  $mod.$rtti.$Class("TPas2jsWebFS");
  rtl.createClass($mod,"TWebFileContent",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FContents = "";
      this.FFileName = "";
      this.FModified = false;
    };
    this.SetContents = function (AValue) {
      if (this.FContents === AValue) return;
      this.FContents = AValue;
      this.FModified = true;
    };
    this.Create$1 = function (aFileName, aContents) {
      this.FContents = aContents;
      this.FFileName = aFileName;
    };
  });
  rtl.createClass($mod,"TWebFilesCache",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FFiles = null;
    };
    this.$final = function () {
      this.FFiles = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.FindFile = function (aFileName) {
      var Result = null;
      var N = null;
      N = this.FFiles.Find(aFileName);
      if (N === null) {
        Result = null}
       else Result = N.FData;
      return Result;
    };
    this.Create$1 = function () {
      this.FFiles = pas.contnrs.TFPObjectHashTable.$create("Create$2",[true]);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FFiles;
        }, set: function (v) {
          this.p.FFiles = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.HasFile = function (aFileName) {
      var Result = false;
      Result = this.FindFile(aFileName) !== null;
      return Result;
    };
    this.GetFileContent = function (aFileName) {
      var Result = "";
      var W = null;
      W = this.FindFile(aFileName);
      if (W != null) {
        Result = W.FContents}
       else throw pas.PScanner.EFileNotFoundError.$create("Create$1",["No such file " + aFileName]);
      return Result;
    };
    this.SetFileContent = function (aFileName, aContent) {
      var Result = false;
      var W = null;
      W = this.FindFile(aFileName);
      Result = W != null;
      if (Result) {
        W.SetContents(aContent)}
       else this.FFiles.Add(aFileName,$mod.TWebFileContent.$create("Create$1",[aFileName,aContent]));
      return Result;
    };
  });
  rtl.createClass($mod,"TPas2jsWebFile",pas.pas2jsfs.TPas2jsFile,function () {
    this.CreateLineReader = function (RaiseOnError) {
      var Result = null;
      if (this.Load(RaiseOnError,false)) {
        Result = $mod.TWebSourceLineReader.$create("Create$2",[this.FFilename,this.FSource]);
        Result.FFS = this.FFS;
      } else Result = null;
      return Result;
    };
    this.Load = function (RaiseOnError, Binary) {
      var Result = false;
      Result = false;
      var $with1 = rtl.as(this.FFS,$mod.TPas2jsWebFS).FCache;
      if ($with1.HasFile(this.FFilename)) {
        this.SetSource($with1.GetFileContent(this.FFilename));
        Result = true;
      };
      if (!Result) if (RaiseOnError) throw pas.PScanner.EFileNotFoundError.$create("Create$1",["File not loaded " + this.FFilename]);
      return Result;
    };
  });
  rtl.createClass($mod,"TWebSourceLineReader",pas.pas2jsfs.TSourceLineReader,function () {
    this.$init = function () {
      pas.pas2jsfs.TSourceLineReader.$init.call(this);
      this.FFS = null;
    };
    this.$final = function () {
      this.FFS = undefined;
      pas.pas2jsfs.TSourceLineReader.$final.call(this);
    };
    this.IncLineNumber = function () {
      if (this.FFS !== null) this.FFS.IncReadLineCounter();
      pas.pas2jsfs.TSourceLineReader.IncLineNumber.call(this);
    };
  });
  $mod.$rtti.$RefToProcVar("TLoadFileEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["aFileName",rtl.string],["aError",rtl.string]])});
  rtl.createClass($mod,"TLoadFileRequest",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FFS = null;
      this.FFileName = "";
      this.FXML = null;
      this.FOnLoaded = null;
    };
    this.$final = function () {
      this.FFS = undefined;
      this.FXML = undefined;
      this.FOnLoaded = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.DoChange = function () {
      var Err = "";
      var $tmp1 = this.FXML.readyState;
      if ($tmp1 === 0) {}
      else if ($tmp1 === 1) {}
      else if ($tmp1 === 2) {}
      else if ($tmp1 === 3) {}
      else if ($tmp1 === 4) {
        if (Math.floor(this.FXML.status / 100) === 2) {
          Err = "";
          this.FFS.SetFileContent(this.FFileName,this.FXML.responseText);
        } else Err = "Error loading file: " + this.FXML.statusText;
        if (this.FOnLoaded != null) this.FOnLoaded(this.FFS,this.FFileName,Err);
        if (this.FFS.FOnLoadedFile != null) this.FFS.FOnLoadedFile(this.FFS,this.FFileName,Err);
        this.Free();
      };
    };
    this.Create$1 = function (aFS, aFileName, aOnLoaded) {
      this.FFS = aFS;
      this.FOnLoaded = aOnLoaded;
      this.FFileName = aFileName;
    };
    this.DoLoad = function (aURL) {
      this.FXML = new XMLHttpRequest();
      this.FXML.onreadystatechange = rtl.createCallback(this,"DoChange");
      this.FXML.open("GET",aURL);
      this.FXML.send();
    };
  });
  rtl.createClass($mod,"TPas2jsWebFS",pas.pas2jsfs.TPas2JSFS,function () {
    this.$init = function () {
      pas.pas2jsfs.TPas2JSFS.$init.call(this);
      this.FCache = null;
      this.FLoadBaseURL = "";
      this.FOnLoadedFile = null;
    };
    this.$final = function () {
      this.FCache = undefined;
      this.FOnLoadedFile = undefined;
      pas.pas2jsfs.TPas2JSFS.$final.call(this);
    };
    this.NormalizeFileName = function (aFileName) {
      var Result = "";
      Result = pas.SysUtils.LowerCase(pas.SysUtils.ExtractFileName(aFileName));
      return Result;
    };
    this.FindSourceFileName = function (aFilename) {
      var Result = "";
      Result = this.$class.NormalizeFileName(aFilename);
      if (!this.FCache.HasFile(Result)) Result = "";
      return Result;
    };
    this.Create$1 = function () {
      pas.pas2jsfs.TPas2JSFS.Create$1.call(this);
      this.FCache = $mod.TWebFilesCache.$create("Create$1");
    };
    this.CreateResolver = function () {
      var Result = null;
      Result = $mod.TPas2jsWebResolver.$create("Create$2",[this]);
      return Result;
    };
    this.FileExists = function (aFileName) {
      var Result = false;
      Result = this.FCache.HasFile(this.$class.NormalizeFileName(aFileName));
      return Result;
    };
    this.FindCustomJSFileName = function (aFilename) {
      var Result = "";
      Result = this.$class.NormalizeFileName(aFilename);
      if (!this.FCache.HasFile(Result)) Result = "";
      return Result;
    };
    this.FindIncludeFileName = function (aFilename) {
      var Result = "";
      Result = this.$class.NormalizeFileName(aFilename);
      if (!this.FCache.HasFile(Result)) Result = "";
      return Result;
    };
    this.FindUnitFileName = function (aUnitname, InFilename, IsForeign) {
      var Result = "";
      Result = this.$class.NormalizeFileName(aUnitname + ".pas");
      IsForeign.set(false);
      return Result;
    };
    this.FindUnitJSFileName = function (aUnitFilename) {
      var Result = "";
      Result = this.$class.NormalizeFileName(aUnitFilename);
      return Result;
    };
    this.LoadFile = function (Filename, Binary) {
      var Result = null;
      Result = $mod.TPas2jsWebFile.$create("Create$1",[this,Filename]);
      Result.Load(true,false);
      return Result;
    };
    this.SaveToFile = function (ms, Filename) {
      var aContent = "";
      var i = 0;
      var v = undefined;
      aContent = "";
      for (var $l1 = 0, $end2 = ms.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        v = ms[i];
        pas.System.Writeln("Char ",i,"(",v,") : ",String.fromCharCode(v));
        aContent = aContent + String.fromCharCode(ms[i]);
      };
      this.SetFileContent(Filename,aContent);
    };
    this.SetFileContent = function (aFileName, aContents) {
      var Result = false;
      Result = this.FCache.SetFileContent(this.$class.NormalizeFileName(aFileName),aContents);
      return Result;
    };
    this.GetFileContent = function (aFileName) {
      var Result = "";
      Result = this.FCache.GetFileContent(this.$class.NormalizeFileName(aFileName));
      return Result;
    };
    this.LoadFile$2 = function (aFileName, OnLoaded) {
      var Result = false;
      var FN = "";
      var aURL = "";
      var LF = null;
      FN = this.$class.NormalizeFileName(aFileName);
      Result = !this.FCache.HasFile(FN);
      if (!Result) {
        if (OnLoaded != null) OnLoaded(this,aFileName,"");
      } else {
        aURL = pas.SysUtils.IncludeTrailingPathDelimiter(this.FLoadBaseURL) + FN;
        LF = $mod.TLoadFileRequest.$create("Create$1",[this,aFileName,OnLoaded]);
        LF.DoLoad(aURL);
      };
      return Result;
    };
    this.LoadFiles = function (aList, OnLoaded) {
      var Result = 0;
      var i = 0;
      Result = 0;
      for (var $l1 = 0, $end2 = aList.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.LoadFile$2(aList.Get(i),OnLoaded)) Result += 1;
      };
      return Result;
    };
    this.LoadFiles$1 = function (aList, OnLoaded) {
      var Result = 0;
      var i = 0;
      Result = 0;
      for (var $l1 = 0, $end2 = rtl.length(aList) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.LoadFile$2(aList[i],OnLoaded)) Result += 1;
      };
      return Result;
    };
  });
  rtl.createClass($mod,"TPas2jsWebResolver",pas.pas2jsfs.TPas2jsFSResolver,function () {
    this.GetWebFS = function () {
      var Result = null;
      Result = this.FFS;
      return Result;
    };
  });
});
rtl.module("PasTree",["System","Classes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$Class("TPassTreeVisitor");
  rtl.createClass($mod,"TPasElementBase",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FData = null;
    };
    this.$final = function () {
      this.FData = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Accept = function (Visitor) {
      if (Visitor === null) ;
    };
  });
  $mod.$rtti.$ClassRef("TPasElementBaseClass",{instancetype: $mod.$rtti["TPasElementBase"]});
  $mod.$rtti.$Class("TPasModule");
  this.TPasMemberVisibility = {"0": "visDefault", visDefault: 0, "1": "visPrivate", visPrivate: 1, "2": "visProtected", visProtected: 2, "3": "visPublic", visPublic: 3, "4": "visPublished", visPublished: 4, "5": "visAutomated", visAutomated: 5, "6": "visStrictPrivate", visStrictPrivate: 6, "7": "visStrictProtected", visStrictProtected: 7};
  $mod.$rtti.$Enum("TPasMemberVisibility",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TPasMemberVisibility});
  this.TCallingConvention = {"0": "ccDefault", ccDefault: 0, "1": "ccRegister", ccRegister: 1, "2": "ccPascal", ccPascal: 2, "3": "ccCDecl", ccCDecl: 3, "4": "ccStdCall", ccStdCall: 4, "5": "ccOldFPCCall", ccOldFPCCall: 5, "6": "ccSafeCall", ccSafeCall: 6, "7": "ccSysCall", ccSysCall: 7};
  $mod.$rtti.$Enum("TCallingConvention",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TCallingConvention});
  this.TProcTypeModifier = {"0": "ptmOfObject", ptmOfObject: 0, "1": "ptmIsNested", ptmIsNested: 1, "2": "ptmStatic", ptmStatic: 2, "3": "ptmVarargs", ptmVarargs: 3, "4": "ptmReferenceTo", ptmReferenceTo: 4};
  $mod.$rtti.$Enum("TProcTypeModifier",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TProcTypeModifier});
  $mod.$rtti.$Set("TProcTypeModifiers",{comptype: $mod.$rtti["TProcTypeModifier"]});
  this.TPackMode = {"0": "pmNone", pmNone: 0, "1": "pmPacked", pmPacked: 1, "2": "pmBitPacked", pmBitPacked: 2};
  $mod.$rtti.$Enum("TPackMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TPackMode});
  $mod.$rtti.$Set("TPasMemberVisibilities",{comptype: $mod.$rtti["TPasMemberVisibility"]});
  this.TPasMemberHint = {"0": "hDeprecated", hDeprecated: 0, "1": "hLibrary", hLibrary: 1, "2": "hPlatform", hPlatform: 2, "3": "hExperimental", hExperimental: 3, "4": "hUnimplemented", hUnimplemented: 4};
  $mod.$rtti.$Enum("TPasMemberHint",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TPasMemberHint});
  $mod.$rtti.$Set("TPasMemberHints",{comptype: $mod.$rtti["TPasMemberHint"]});
  $mod.$rtti.$Class("TPasElement");
  $mod.$rtti.$ClassRef("TPTreeElement",{instancetype: $mod.$rtti["TPasElement"]});
  $mod.$rtti.$MethodVar("TOnForEachPasElement",{procsig: rtl.newTIProcSig([["El",$mod.$rtti["TPasElement"]],["arg",rtl.pointer]]), methodkind: 0});
  rtl.createClass($mod,"TPasElement",$mod.TPasElementBase,function () {
    this.FLastPasElementId = 0;
    this.$init = function () {
      $mod.TPasElementBase.$init.call(this);
      this.FDocComment = "";
      this.FRefCount = 0;
      this.FName = "";
      this.FParent = null;
      this.FHints = {};
      this.FHintMessage = "";
      this.FPasElementId = 0;
      this.SourceFilename = "";
      this.SourceLinenumber = 0;
      this.SourceEndLinenumber = 0;
      this.Visibility = 0;
    };
    this.$final = function () {
      this.FParent = undefined;
      this.FHints = undefined;
      $mod.TPasElementBase.$final.call(this);
    };
    this.ProcessHints = function (ASemiColonPrefix, AResult) {
      var S = "";
      if (rtl.neSet(this.FHints,{})) {
        if (ASemiColonPrefix) AResult.set(AResult.get() + ";");
        S = this.HintsString();
        if (S !== "") AResult.set((AResult.get() + " ") + S);
        if (ASemiColonPrefix) AResult.set(AResult.get() + ";");
      };
    };
    this.SetParent = function (AValue) {
      this.FParent = AValue;
    };
    this.Create$1 = function (AName, AParent) {
      pas.System.TObject.Create.call(this);
      this.FName = AName;
      this.FParent = AParent;
      $mod.TPasElement.FLastPasElementId += 1;
      this.FPasElementId = this.FLastPasElementId;
    };
    this.Destroy = function () {
      if ((this.FRefCount > 0) && (this.FRefCount < 4294967295)) {
        throw pas.SysUtils.Exception.$create("Create$1",[""]);
      };
      this.FParent = null;
      pas.System.TObject.Destroy.call(this);
    };
    this.AddRef = function () {
      this.FRefCount += 1;
    };
    this.Release = function () {
      if (this.FRefCount === 0) {
        this.FRefCount = 4294967295;
        this.$destroy("Destroy");
      } else if (this.FRefCount === 4294967295) {
        throw pas.SysUtils.Exception.$create("Create$1",[""]);
      } else {
        this.FRefCount -= 1;
      };
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      aMethodCall(this,Arg);
    };
    this.ForEachChildCall = function (aMethodCall, Arg, Child, CheckParent) {
      if (Child === null) return;
      if (CheckParent && !Child.HasParent(this)) return;
      Child.ForEachCall(aMethodCall,Arg);
    };
    this.FullPath = function () {
      var Result = "";
      var p = null;
      Result = "";
      p = this.FParent;
      while ((p != null) && !p.$class.InheritsFrom($mod.TPasDeclarations)) {
        if ((p.FName !== "") && !$mod.TPasOverloadedProc.isPrototypeOf(p)) if (Result.length > 0) {
          Result = (p.FName + ".") + Result}
         else Result = p.FName;
        p = p.FParent;
      };
      return Result;
    };
    this.ParentPath = function () {
      var Result = "";
      var p = null;
      Result = "";
      p = this.FParent;
      while (p != null) {
        if ((p.FName !== "") && !$mod.TPasOverloadedProc.isPrototypeOf(p)) if (Result.length > 0) {
          Result = (p.FName + ".") + Result}
         else Result = p.FName;
        p = p.FParent;
      };
      return Result;
    };
    this.FullName = function () {
      var Result = "";
      Result = this.FullPath();
      if (Result !== "") {
        Result = (Result + ".") + this.FName}
       else Result = this.FName;
      return Result;
    };
    this.PathName = function () {
      var Result = "";
      Result = this.ParentPath();
      if (Result !== "") {
        Result = (Result + ".") + this.FName}
       else Result = this.FName;
      return Result;
    };
    this.GetModule = function () {
      var Result = null;
      var p = null;
      if ($mod.TPasPackage.isPrototypeOf(this)) {
        Result = null}
       else {
        p = this;
        while ((p !== null) && !$mod.TPasModule.isPrototypeOf(p)) p = p.FParent;
        Result = p;
      };
      return Result;
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeElement");
      return Result;
    };
    this.HintsString = function () {
      var Result = "";
      var H = 0;
      Result = "";
      for (H = 0; H <= 4; H++) if (H in this.FHints) {
        if (Result !== "") Result = Result + "; ";
        Result = Result + $mod.cPasMemberHint[H];
      };
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      if (full) {
        Result = this.FName}
       else Result = "";
      return Result;
    };
    this.Accept = function (Visitor) {
      Visitor.Visit(this);
    };
    this.ClearTypeReferences = function (aType) {
      if (aType === null) ;
    };
    this.HasParent = function (aParent) {
      var Result = false;
      var El = null;
      El = this.FParent;
      while (El !== null) {
        if (El === aParent) return true;
        El = El.FParent;
      };
      Result = false;
      return Result;
    };
  });
  this.TPasExprKind = {"0": "pekIdent", pekIdent: 0, "1": "pekNumber", pekNumber: 1, "2": "pekString", pekString: 2, "3": "pekSet", pekSet: 3, "4": "pekNil", pekNil: 4, "5": "pekBoolConst", pekBoolConst: 5, "6": "pekRange", pekRange: 6, "7": "pekUnary", pekUnary: 7, "8": "pekBinary", pekBinary: 8, "9": "pekFuncParams", pekFuncParams: 9, "10": "pekArrayParams", pekArrayParams: 10, "11": "pekListOfExp", pekListOfExp: 11, "12": "pekInherited", pekInherited: 12, "13": "pekSelf", pekSelf: 13, "14": "pekSpecialize", pekSpecialize: 14};
  $mod.$rtti.$Enum("TPasExprKind",{minvalue: 0, maxvalue: 14, ordtype: 1, enumtype: this.TPasExprKind});
  this.TExprOpCode = {"0": "eopNone", eopNone: 0, "1": "eopAdd", eopAdd: 1, "2": "eopSubtract", eopSubtract: 2, "3": "eopMultiply", eopMultiply: 3, "4": "eopDivide", eopDivide: 4, "5": "eopDiv", eopDiv: 5, "6": "eopMod", eopMod: 6, "7": "eopPower", eopPower: 7, "8": "eopShr", eopShr: 8, "9": "eopShl", eopShl: 9, "10": "eopNot", eopNot: 10, "11": "eopAnd", eopAnd: 11, "12": "eopOr", eopOr: 12, "13": "eopXor", eopXor: 13, "14": "eopEqual", eopEqual: 14, "15": "eopNotEqual", eopNotEqual: 15, "16": "eopLessThan", eopLessThan: 16, "17": "eopGreaterThan", eopGreaterThan: 17, "18": "eopLessthanEqual", eopLessthanEqual: 18, "19": "eopGreaterThanEqual", eopGreaterThanEqual: 19, "20": "eopIn", eopIn: 20, "21": "eopIs", eopIs: 21, "22": "eopAs", eopAs: 22, "23": "eopSymmetricaldifference", eopSymmetricaldifference: 23, "24": "eopAddress", eopAddress: 24, "25": "eopDeref", eopDeref: 25, "26": "eopMemAddress", eopMemAddress: 26, "27": "eopSubIdent", eopSubIdent: 27};
  $mod.$rtti.$Enum("TExprOpCode",{minvalue: 0, maxvalue: 27, ordtype: 1, enumtype: this.TExprOpCode});
  rtl.createClass($mod,"TPasExpr",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.Kind = 0;
      this.OpCode = 0;
      this.format1 = null;
      this.format2 = null;
    };
    this.$final = function () {
      this.format1 = undefined;
      this.format2 = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Create$2 = function (AParent, AKind, AOpCode) {
      $mod.TPasElement.Create$1.call(this,this.$classname,AParent);
      this.Kind = AKind;
      this.OpCode = AOpCode;
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.format1;
        }, set: function (v) {
          this.p.format1 = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.format2;
        }, set: function (v) {
          this.p.format2 = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TUnaryExpr",$mod.TPasExpr,function () {
    this.$init = function () {
      $mod.TPasExpr.$init.call(this);
      this.Operand = null;
    };
    this.$final = function () {
      this.Operand = undefined;
      $mod.TPasExpr.$final.call(this);
    };
    this.Create$3 = function (AParent, AOperand, AOpCode) {
      $mod.TPasExpr.Create$2.call(this,AParent,$mod.TPasExprKind.pekUnary,AOpCode);
      this.Operand = AOperand;
      this.Operand.SetParent(this);
    };
    var WordOpcodes = rtl.createSet($mod.TExprOpCode.eopDiv,$mod.TExprOpCode.eopMod,$mod.TExprOpCode.eopShr,$mod.TExprOpCode.eopShl,$mod.TExprOpCode.eopNot,$mod.TExprOpCode.eopAnd,$mod.TExprOpCode.eopOr,$mod.TExprOpCode.eopXor);
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = $mod.OpcodeStrings[this.OpCode];
      if (this.OpCode in WordOpcodes) Result = Result + " ";
      if (this.Operand != null) Result = (Result + " ") + this.Operand.GetDeclaration(full);
      return Result;
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Operand;
        }, set: function (v) {
          this.p.Operand = v;
        }});
      $mod.TPasExpr.Destroy.call(this);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.Operand,false);
    };
  });
  rtl.createClass($mod,"TBinaryExpr",$mod.TPasExpr,function () {
    this.$init = function () {
      $mod.TPasExpr.$init.call(this);
      this.left = null;
      this.right = null;
    };
    this.$final = function () {
      this.left = undefined;
      this.right = undefined;
      $mod.TPasExpr.$final.call(this);
    };
    this.Create$3 = function (AParent, xleft, xright, AOpCode) {
      $mod.TPasExpr.Create$2.call(this,AParent,$mod.TPasExprKind.pekBinary,AOpCode);
      this.left = xleft;
      this.left.SetParent(this);
      this.right = xright;
      this.right.SetParent(this);
    };
    this.CreateRange = function (AParent, xleft, xright) {
      $mod.TPasExpr.Create$2.call(this,AParent,$mod.TPasExprKind.pekRange,$mod.TExprOpCode.eopNone);
      this.left = xleft;
      this.left.SetParent(this);
      this.right = xright;
      this.right.SetParent(this);
    };
    this.GetDeclaration = function (full) {
      var Self = this;
      var Result = "";
      function OpLevel(op) {
        var Result = 0;
        var $tmp1 = op.OpCode;
        if (($tmp1 === $mod.TExprOpCode.eopNot) || ($tmp1 === $mod.TExprOpCode.eopAddress)) {
          Result = 4}
         else if ((((((((($tmp1 === $mod.TExprOpCode.eopMultiply) || ($tmp1 === $mod.TExprOpCode.eopDivide)) || ($tmp1 === $mod.TExprOpCode.eopDiv)) || ($tmp1 === $mod.TExprOpCode.eopMod)) || ($tmp1 === $mod.TExprOpCode.eopAnd)) || ($tmp1 === $mod.TExprOpCode.eopShl)) || ($tmp1 === $mod.TExprOpCode.eopShr)) || ($tmp1 === $mod.TExprOpCode.eopAs)) || ($tmp1 === $mod.TExprOpCode.eopPower)) {
          Result = 3}
         else if (((($tmp1 === $mod.TExprOpCode.eopAdd) || ($tmp1 === $mod.TExprOpCode.eopSubtract)) || ($tmp1 === $mod.TExprOpCode.eopOr)) || ($tmp1 === $mod.TExprOpCode.eopXor)) {
          Result = 2}
         else if (((((((($tmp1 === $mod.TExprOpCode.eopEqual) || ($tmp1 === $mod.TExprOpCode.eopNotEqual)) || ($tmp1 === $mod.TExprOpCode.eopLessThan)) || ($tmp1 === $mod.TExprOpCode.eopLessthanEqual)) || ($tmp1 === $mod.TExprOpCode.eopGreaterThan)) || ($tmp1 === $mod.TExprOpCode.eopGreaterThanEqual)) || ($tmp1 === $mod.TExprOpCode.eopIn)) || ($tmp1 === $mod.TExprOpCode.eopIs)) {
          Result = 1}
         else {
          Result = 5;
        };
        return Result;
      };
      var op = "";
      if (Self.Kind === $mod.TPasExprKind.pekRange) {
        Result = ".."}
       else {
        Result = $mod.OpcodeStrings[Self.OpCode];
        if (!(Self.OpCode in rtl.createSet($mod.TExprOpCode.eopAddress,$mod.TExprOpCode.eopDeref,$mod.TExprOpCode.eopSubIdent))) Result = (" " + Result) + " ";
      };
      if (Self.left != null) {
        op = Self.left.GetDeclaration(full);
        if (OpLevel(Self.left) < OpLevel(Self)) {
          Result = (("(" + op) + ")") + Result}
         else Result = op + Result;
      };
      if (Self.right != null) {
        op = Self.right.GetDeclaration(full);
        if (OpLevel(Self.left) < OpLevel(Self)) {
          Result = ((Result + "(") + op) + ")"}
         else Result = Result + op;
      };
      return Result;
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.left;
        }, set: function (v) {
          this.p.left = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.right;
        }, set: function (v) {
          this.p.right = v;
        }});
      $mod.TPasExpr.Destroy.call(this);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.left,false);
      this.ForEachChildCall(aMethodCall,Arg,this.right,false);
    };
    this.IsRightSubIdent = function (El) {
      var Result = false;
      var Bin = null;
      if ((El === null) || !$mod.TBinaryExpr.isPrototypeOf(El.FParent)) return false;
      Bin = El.FParent;
      Result = (Bin.right === El) && (Bin.OpCode === $mod.TExprOpCode.eopSubIdent);
      return Result;
    };
  });
  rtl.createClass($mod,"TPrimitiveExpr",$mod.TPasExpr,function () {
    this.$init = function () {
      $mod.TPasExpr.$init.call(this);
      this.Value = "";
    };
    this.Create$3 = function (AParent, AKind, AValue) {
      $mod.TPasExpr.Create$2.call(this,AParent,AKind,$mod.TExprOpCode.eopNone);
      this.Value = AValue;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = this.Value;
      if (full) ;
      return Result;
    };
  });
  rtl.createClass($mod,"TBoolConstExpr",$mod.TPasExpr,function () {
    this.$init = function () {
      $mod.TPasExpr.$init.call(this);
      this.Value = false;
    };
    this.Create$3 = function (AParent, AKind, ABoolValue) {
      $mod.TPasExpr.Create$2.call(this,AParent,AKind,$mod.TExprOpCode.eopNone);
      this.Value = ABoolValue;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      if (this.Value) {
        Result = "True"}
       else Result = "False";
      if (full) ;
      return Result;
    };
  });
  rtl.createClass($mod,"TNilExpr",$mod.TPasExpr,function () {
    this.Create$3 = function (AParent) {
      $mod.TPasExpr.Create$2.call(this,AParent,$mod.TPasExprKind.pekNil,$mod.TExprOpCode.eopNone);
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = "Nil";
      if (full) ;
      return Result;
    };
  });
  rtl.createClass($mod,"TInheritedExpr",$mod.TPasExpr,function () {
    this.Create$3 = function (AParent) {
      $mod.TPasExpr.Create$2.call(this,AParent,$mod.TPasExprKind.pekInherited,$mod.TExprOpCode.eopNone);
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = "Inherited";
      if (full) ;
      return Result;
    };
  });
  rtl.createClass($mod,"TSelfExpr",$mod.TPasExpr,function () {
    this.Create$3 = function (AParent) {
      $mod.TPasExpr.Create$2.call(this,AParent,$mod.TPasExprKind.pekSelf,$mod.TExprOpCode.eopNone);
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = "Self";
      if (full) ;
      return Result;
    };
  });
  $mod.$rtti.$DynArray("TPasExprArray",{eltype: $mod.$rtti["TPasExpr"]});
  rtl.createClass($mod,"TParamsExpr",$mod.TPasExpr,function () {
    this.$init = function () {
      $mod.TPasExpr.$init.call(this);
      this.Value = null;
      this.Params = [];
    };
    this.$final = function () {
      this.Value = undefined;
      this.Params = undefined;
      $mod.TPasExpr.$final.call(this);
    };
    this.Create$3 = function (AParent, AKind) {
      $mod.TPasExpr.Create$2.call(this,AParent,AKind,$mod.TExprOpCode.eopNone);
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var I = 0;
      Result = "";
      for (var $l1 = 0, $end2 = rtl.length(this.Params) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (Result !== "") Result = Result + ", ";
        Result = Result + this.Params[I].GetDeclaration(full);
      };
      if (this.Kind === $mod.TPasExprKind.pekSet) {
        Result = ("[" + Result) + "]"}
       else Result = ("(" + Result) + ")";
      if (full && (this.Value != null)) Result = this.Value.GetDeclaration(true) + Result;
      return Result;
    };
    this.Destroy = function () {
      var i = 0;
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Value;
        }, set: function (v) {
          this.p.Value = v;
        }});
      for (var $l1 = 0, $end2 = rtl.length(this.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.Params[i].Release();
      };
      $mod.TPasExpr.Destroy.call(this);
    };
    this.AddParam = function (xp) {
      var i = 0;
      i = rtl.length(this.Params);
      this.Params = rtl.arraySetLength(this.Params,null,i + 1);
      this.Params[i] = xp;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.Value,false);
      for (var $l1 = 0, $end2 = rtl.length(this.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,this.Params[i],false);
      };
    };
  });
  this.TRecordValuesItem = function (s) {
    if (s) {
      this.Name = s.Name;
      this.NameExp = s.NameExp;
      this.ValueExp = s.ValueExp;
    } else {
      this.Name = "";
      this.NameExp = null;
      this.ValueExp = null;
    };
    this.$equal = function (b) {
      return (this.Name === b.Name) && ((this.NameExp === b.NameExp) && (this.ValueExp === b.ValueExp));
    };
  };
  $mod.$rtti.$Record("TRecordValuesItem",{}).addFields("Name",rtl.string,"NameExp",$mod.$rtti["TPrimitiveExpr"],"ValueExp",$mod.$rtti["TPasExpr"]);
  $mod.$rtti.$inherited("PRecordValuesItem",{comptype: $mod.$rtti["TRecordValuesItem"]});
  $mod.$rtti.$DynArray("TRecordValuesItemArray",{eltype: $mod.$rtti["TRecordValuesItem"]});
  rtl.createClass($mod,"TRecordValues",$mod.TPasExpr,function () {
    this.$init = function () {
      $mod.TPasExpr.$init.call(this);
      this.Fields = [];
    };
    this.$final = function () {
      this.Fields = undefined;
      $mod.TPasExpr.$final.call(this);
    };
    this.Create$3 = function (AParent) {
      $mod.TPasExpr.Create$2.call(this,AParent,$mod.TPasExprKind.pekListOfExp,$mod.TExprOpCode.eopNone);
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = rtl.length(this.Fields) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.Fields[i].NameExp.Release();
        this.Fields[i].ValueExp.Release();
      };
      this.Fields = [];
      $mod.TPasExpr.Destroy.call(this);
    };
    this.AddField = function (AName, Value) {
      var i = 0;
      i = rtl.length(this.Fields);
      this.Fields = rtl.arraySetLength(this.Fields,$mod.TRecordValuesItem,i + 1);
      this.Fields[i].Name = AName.Value;
      this.Fields[i].NameExp = AName;
      AName.SetParent(this);
      this.Fields[i].ValueExp = Value;
      Value.SetParent(this);
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var I = 0;
      Result = "";
      for (var $l1 = 0, $end2 = rtl.length(this.Fields) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (Result !== "") Result = Result + "; ";
        Result = ((Result + this.Fields[I].Name) + ": ") + this.Fields[I].ValueExp.GetDeclaration(full);
      };
      Result = ("(" + Result) + ")";
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = rtl.length(this.Fields) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        var $with3 = this.Fields[i];
        if ($with3.NameExp !== null) this.ForEachChildCall(aMethodCall,Arg,$with3.NameExp,false);
        if ($with3.ValueExp !== null) this.ForEachChildCall(aMethodCall,Arg,$with3.ValueExp,false);
      };
    };
  });
  rtl.createClass($mod,"TArrayValues",$mod.TPasExpr,function () {
    this.$init = function () {
      $mod.TPasExpr.$init.call(this);
      this.Values = [];
    };
    this.$final = function () {
      this.Values = undefined;
      $mod.TPasExpr.$final.call(this);
    };
    this.Create$3 = function (AParent) {
      $mod.TPasExpr.Create$2.call(this,AParent,$mod.TPasExprKind.pekListOfExp,$mod.TExprOpCode.eopNone);
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = rtl.length(this.Values) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.Values[i].Release();
      };
      this.Values = [];
      $mod.TPasExpr.Destroy.call(this);
    };
    this.AddValues = function (AValue) {
      var i = 0;
      i = rtl.length(this.Values);
      this.Values = rtl.arraySetLength(this.Values,null,i + 1);
      this.Values[i] = AValue;
      AValue.SetParent(this);
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var I = 0;
      Result = "";
      for (var $l1 = 0, $end2 = rtl.length(this.Values) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (Result !== "") Result = Result + ", ";
        Result = Result + this.Values[I].GetDeclaration(full);
      };
      Result = ("(" + Result) + ")";
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = rtl.length(this.Values) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,this.Values[i],false);
      };
    };
  });
  rtl.createClass($mod,"TPasDeclarations",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.Declarations = null;
      this.ResStrings = null;
      this.Types = null;
      this.Consts = null;
      this.Classes$1 = null;
      this.Functions = null;
      this.Variables = null;
      this.Properties = null;
      this.ExportSymbols = null;
    };
    this.$final = function () {
      this.Declarations = undefined;
      this.ResStrings = undefined;
      this.Types = undefined;
      this.Consts = undefined;
      this.Classes$1 = undefined;
      this.Functions = undefined;
      this.Variables = undefined;
      this.Properties = undefined;
      this.ExportSymbols = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Declarations = pas.Classes.TFPList.$create("Create");
      this.ResStrings = pas.Classes.TFPList.$create("Create");
      this.Types = pas.Classes.TFPList.$create("Create");
      this.Consts = pas.Classes.TFPList.$create("Create");
      this.Classes$1 = pas.Classes.TFPList.$create("Create");
      this.Functions = pas.Classes.TFPList.$create("Create");
      this.Variables = pas.Classes.TFPList.$create("Create");
      this.Properties = pas.Classes.TFPList.$create("Create");
      this.ExportSymbols = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      var Child = null;
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.ExportSymbols;
        }, set: function (v) {
          this.p.ExportSymbols = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Properties;
        }, set: function (v) {
          this.p.Properties = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Variables;
        }, set: function (v) {
          this.p.Variables = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Functions;
        }, set: function (v) {
          this.p.Functions = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Classes$1;
        }, set: function (v) {
          this.p.Classes$1 = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Consts;
        }, set: function (v) {
          this.p.Consts = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Types;
        }, set: function (v) {
          this.p.Types = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.ResStrings;
        }, set: function (v) {
          this.p.ResStrings = v;
        }});
      for (var $l1 = 0, $end2 = this.Declarations.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Child = rtl.getObject(this.Declarations.Get(i));
        Child.SetParent(null);
        Child.Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Declarations;
        }, set: function (v) {
          this.p.Declarations = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeSection");
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = this.Declarations.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Declarations.Get(i)),false);
      };
    };
  });
  rtl.createClass($mod,"TPasUsesUnit",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.Expr = null;
      this.InFilename = null;
      this.Module = null;
    };
    this.$final = function () {
      this.Expr = undefined;
      this.InFilename = undefined;
      this.Module = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Expr;
        }, set: function (v) {
          this.p.Expr = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.InFilename;
        }, set: function (v) {
          this.p.InFilename = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Module;
        }, set: function (v) {
          this.p.Module = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeUsesUnit");
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.Expr,false);
      this.ForEachChildCall(aMethodCall,Arg,this.InFilename,false);
      this.ForEachChildCall(aMethodCall,Arg,this.Module,true);
    };
  });
  rtl.createClass($mod,"TPasSection",$mod.TPasDeclarations,function () {
    this.$init = function () {
      $mod.TPasDeclarations.$init.call(this);
      this.UsesList = null;
      this.UsesClause = [];
      this.PendingUsedIntf = null;
    };
    this.$final = function () {
      this.UsesList = undefined;
      this.UsesClause = undefined;
      this.PendingUsedIntf = undefined;
      $mod.TPasDeclarations.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasDeclarations.Create$1.call(this,AName,AParent);
      this.UsesList = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      this.ReleaseUsedUnits();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.UsesList;
        }, set: function (v) {
          this.p.UsesList = v;
        }});
      $mod.TPasDeclarations.Destroy.call(this);
    };
    this.AddUnitToUsesList = function (AUnitName, aName, InFilename, aModule, UsesUnit) {
      var Result = null;
      var l = 0;
      if ((InFilename !== null) && (InFilename.Kind !== $mod.TPasExprKind.pekString)) throw pas.SysUtils.Exception.$create("Create$1",[""]);
      if (aModule === null) aModule = $mod.TPasUnresolvedUnitRef.$create("Create$1",[AUnitName,this]);
      l = rtl.length(this.UsesClause);
      this.UsesClause = rtl.arraySetLength(this.UsesClause,null,l + 1);
      if (UsesUnit === null) {
        UsesUnit = $mod.TPasUsesUnit.$create("Create$1",[AUnitName,this]);
        if (aName !== null) {
          Result.SourceFilename = aName.SourceFilename;
          Result.SourceLinenumber = aName.SourceLinenumber;
        };
      };
      this.UsesClause[l] = UsesUnit;
      UsesUnit.Expr = aName;
      UsesUnit.InFilename = InFilename;
      UsesUnit.Module = aModule;
      Result = UsesUnit;
      this.UsesList.Add(aModule);
      aModule.AddRef();
      return Result;
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeSection");
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasDeclarations.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = rtl.length(this.UsesClause) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,this.UsesClause[i],false);
      };
    };
    this.ReleaseUsedUnits = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.UsesList.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.UsesList.Get(i)).Release();
      };
      this.UsesList.Clear();
      for (var $l3 = 0, $end4 = rtl.length(this.UsesClause) - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        this.UsesClause[i].Release();
      };
      this.UsesClause = rtl.arraySetLength(this.UsesClause,null,0);
      this.PendingUsedIntf = null;
    };
  });
  $mod.$rtti.$ClassRef("TPasSectionClass",{instancetype: $mod.$rtti["TPasSection"]});
  rtl.createClass($mod,"TInterfaceSection",$mod.TPasSection,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeInterfaceSection");
      return Result;
    };
  });
  rtl.createClass($mod,"TImplementationSection",$mod.TPasSection,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeImplementationSection");
      return Result;
    };
  });
  rtl.createClass($mod,"TProgramSection",$mod.TImplementationSection,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeProgramSection");
      return Result;
    };
  });
  rtl.createClass($mod,"TLibrarySection",$mod.TImplementationSection,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeLibrarySection");
      return Result;
    };
  });
  $mod.$rtti.$Class("TPasImplCommandBase");
  $mod.$rtti.$Class("TInitializationSection");
  $mod.$rtti.$Class("TFinalizationSection");
  rtl.createClass($mod,"TPasModule",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.GlobalDirectivesSection = null;
      this.InterfaceSection = null;
      this.ImplementationSection = null;
      this.InitializationSection = null;
      this.FinalizationSection = null;
      this.PackageName = "";
      this.Filename = "";
    };
    this.$final = function () {
      this.GlobalDirectivesSection = undefined;
      this.InterfaceSection = undefined;
      this.ImplementationSection = undefined;
      this.InitializationSection = undefined;
      this.FinalizationSection = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Destroy = function () {
      this.ReleaseUsedUnits();
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.GlobalDirectivesSection;
        }, set: function (v) {
          this.p.GlobalDirectivesSection = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.InterfaceSection;
        }, set: function (v) {
          this.p.InterfaceSection = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ImplementationSection;
        }, set: function (v) {
          this.p.ImplementationSection = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.InitializationSection;
        }, set: function (v) {
          this.p.InitializationSection = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.FinalizationSection;
        }, set: function (v) {
          this.p.FinalizationSection = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeModule");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = "Unit " + this.FName;
      if (full) ;
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.InterfaceSection,false);
      this.ForEachChildCall(aMethodCall,Arg,this.ImplementationSection,false);
      this.ForEachChildCall(aMethodCall,Arg,this.InitializationSection,false);
      this.ForEachChildCall(aMethodCall,Arg,this.FinalizationSection,false);
    };
    this.ReleaseUsedUnits = function () {
      if (this.InterfaceSection !== null) this.InterfaceSection.ReleaseUsedUnits();
      if (this.ImplementationSection !== null) this.ImplementationSection.ReleaseUsedUnits();
    };
  });
  rtl.createClass($mod,"TPasUnitModule",$mod.TPasModule,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeUnit");
      return Result;
    };
  });
  rtl.createClass($mod,"TPasProgram",$mod.TPasModule,function () {
    this.$init = function () {
      $mod.TPasModule.$init.call(this);
      this.ProgramSection = null;
      this.InputFile = "";
      this.OutPutFile = "";
    };
    this.$final = function () {
      this.ProgramSection = undefined;
      $mod.TPasModule.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ProgramSection;
        }, set: function (v) {
          this.p.ProgramSection = v;
        }});
      $mod.TPasModule.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = $mod.TPasModule.ElementTypeName.call(this);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      this.ForEachChildCall(aMethodCall,Arg,this.ProgramSection,false);
      $mod.TPasModule.ForEachCall.call(this,aMethodCall,Arg);
    };
    this.ReleaseUsedUnits = function () {
      if (this.ProgramSection !== null) this.ProgramSection.ReleaseUsedUnits();
      $mod.TPasModule.ReleaseUsedUnits.call(this);
    };
  });
  rtl.createClass($mod,"TPasLibrary",$mod.TPasModule,function () {
    this.$init = function () {
      $mod.TPasModule.$init.call(this);
      this.LibrarySection = null;
      this.InputFile = "";
      this.OutPutFile = "";
    };
    this.$final = function () {
      this.LibrarySection = undefined;
      $mod.TPasModule.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.LibrarySection;
        }, set: function (v) {
          this.p.LibrarySection = v;
        }});
      $mod.TPasModule.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = $mod.TPasModule.ElementTypeName.call(this);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      this.ForEachChildCall(aMethodCall,Arg,this.LibrarySection,false);
      $mod.TPasModule.ForEachCall.call(this,aMethodCall,Arg);
    };
    this.ReleaseUsedUnits = function () {
      if (this.LibrarySection !== null) this.LibrarySection.ReleaseUsedUnits();
      $mod.TPasModule.ReleaseUsedUnits.call(this);
    };
  });
  rtl.createClass($mod,"TPasPackage",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.Modules = null;
    };
    this.$final = function () {
      this.Modules = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      if ((AName.length > 0) && (AName.charAt(0) !== "#")) {
        $mod.TPasElement.Create$1.call(this,"#" + AName,AParent)}
       else $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Modules = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.Modules.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.Modules.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Modules;
        }, set: function (v) {
          this.p.Modules = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreePackage");
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = this.Modules.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Modules.Get(i)),true);
      };
    };
  });
  rtl.createClass($mod,"TPasResString",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.Expr = null;
    };
    this.$final = function () {
      this.Expr = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Expr;
        }, set: function (v) {
          this.p.Expr = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeResString");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = this.Expr.GetDeclaration(true);
      if (full) {
        Result = (this.FName + " = ") + Result;
        this.ProcessHints(false,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      };
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.Expr,false);
    };
  });
  rtl.createClass($mod,"TPasType",$mod.TPasElement,function () {
    this.FixTypeDecl = function (aDecl) {
      var Result = "";
      Result = aDecl;
      if (this.FName !== "") Result = (this.FName + " = ") + Result;
      this.ProcessHints(false,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeType");
      return Result;
    };
  });
  rtl.createClass($mod,"TPasAliasType",$mod.TPasType,function () {
    this.$init = function () {
      $mod.TPasType.$init.call(this);
      this.DestType = null;
      this.Expr = null;
    };
    this.$final = function () {
      this.DestType = undefined;
      this.Expr = undefined;
      $mod.TPasType.$final.call(this);
    };
    this.SetParent = function (AValue) {
      if ((((AValue === null) && (this.FParent !== null)) && (this.DestType !== null)) && ((this.DestType.FParent === this.FParent) || (this.DestType === this))) {
        this.DestType.Release();
        this.DestType = null;
      };
      $mod.TPasElement.SetParent.call(this,AValue);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.DestType;
        }, set: function (v) {
          this.p.DestType = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Expr;
        }, set: function (v) {
          this.p.Expr = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeAliasType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = this.DestType.FName;
      if (full) Result = this.FixTypeDecl(Result);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.DestType,true);
    };
    this.ClearTypeReferences = function (aType) {
      if (this.DestType === aType) $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.DestType;
        }, set: function (v) {
          this.p.DestType = v;
        }});
    };
  });
  rtl.createClass($mod,"TPasPointerType",$mod.TPasType,function () {
    this.$init = function () {
      $mod.TPasType.$init.call(this);
      this.DestType = null;
    };
    this.$final = function () {
      this.DestType = undefined;
      $mod.TPasType.$final.call(this);
    };
    this.SetParent = function (AValue) {
      if ((((AValue === null) && (this.FParent !== null)) && (this.DestType !== null)) && ((this.DestType.FParent === this.FParent) || (this.DestType === this))) {
        this.DestType.Release();
        this.DestType = null;
      };
      $mod.TPasElement.SetParent.call(this,AValue);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.DestType;
        }, set: function (v) {
          this.p.DestType = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreePointerType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = "^" + this.DestType.FName;
      if (full) {
        Result = (this.FName + " = ") + Result;
        this.ProcessHints(false,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      };
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.DestType,true);
    };
    this.ClearTypeReferences = function (aType) {
      if (this.DestType === aType) $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.DestType;
        }, set: function (v) {
          this.p.DestType = v;
        }});
    };
  });
  rtl.createClass($mod,"TPasTypeAliasType",$mod.TPasAliasType,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeTypeAliasType");
      return Result;
    };
  });
  rtl.createClass($mod,"TPasClassOfType",$mod.TPasAliasType,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeClassOfType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = "Class of " + this.DestType.FName;
      if (full) Result = this.FixTypeDecl(Result);
      return Result;
    };
  });
  rtl.createClass($mod,"TPasSpecializeType",$mod.TPasAliasType,function () {
    this.$init = function () {
      $mod.TPasAliasType.$init.call(this);
      this.Params = null;
    };
    this.$final = function () {
      this.Params = undefined;
      $mod.TPasAliasType.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Params = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.Params.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.Params.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Params;
        }, set: function (v) {
          this.p.Params = v;
        }});
      $mod.TPasAliasType.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeSpecializedType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var i = 0;
      Result = ("specialize " + this.DestType.FName) + "<";
      for (var $l1 = 0, $end2 = this.Params.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (i > 0) Result = Result + ",";
        Result = Result + rtl.getObject(this.Params.Get(i)).GetDeclaration(false);
      };
      if (full) {
        Result = (this.FName + " = ") + Result;
        this.ProcessHints(false,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      };
      return Result;
    };
    this.AddParam = function (El) {
      this.Params.Add(El);
    };
  });
  rtl.createClass($mod,"TInlineTypeExpr",$mod.TPasExpr,function () {
    this.$init = function () {
      $mod.TPasExpr.$init.call(this);
      this.DestType = null;
    };
    this.$final = function () {
      this.DestType = undefined;
      $mod.TPasExpr.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.DestType;
        }, set: function (v) {
          this.p.DestType = v;
        }});
      $mod.TPasExpr.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = this.DestType.ElementTypeName();
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = this.DestType.GetDeclaration(full);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      this.DestType.ForEachChildCall(aMethodCall,Arg,this.DestType,true);
    };
    this.ClearTypeReferences = function (aType) {
      if (this.DestType === aType) $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.DestType;
        }, set: function (v) {
          this.p.DestType = v;
        }});
    };
  });
  rtl.createClass($mod,"TInlineSpecializeExpr",$mod.TInlineTypeExpr,function () {
  });
  rtl.createClass($mod,"TPasRangeType",$mod.TPasType,function () {
    this.$init = function () {
      $mod.TPasType.$init.call(this);
      this.RangeExpr = null;
    };
    this.$final = function () {
      this.RangeExpr = undefined;
      $mod.TPasType.$final.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeRangeType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = (this.RangeStart() + "..") + this.RangeEnd();
      if (full) Result = this.FixTypeDecl(Result);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.RangeExpr,false);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.RangeExpr;
        }, set: function (v) {
          this.p.RangeExpr = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.RangeStart = function () {
      var Result = "";
      Result = this.RangeExpr.left.GetDeclaration(false);
      return Result;
    };
    this.RangeEnd = function () {
      var Result = "";
      Result = this.RangeExpr.right.GetDeclaration(false);
      return Result;
    };
  });
  rtl.createClass($mod,"TPasArrayType",$mod.TPasType,function () {
    this.$init = function () {
      $mod.TPasType.$init.call(this);
      this.IndexRange = "";
      this.Ranges = [];
      this.PackMode = 0;
      this.ElType = null;
    };
    this.$final = function () {
      this.Ranges = undefined;
      this.ElType = undefined;
      $mod.TPasType.$final.call(this);
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = rtl.length(this.Ranges) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.Ranges[i].Release();
      };
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ElType;
        }, set: function (v) {
          this.p.ElType = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeArrayType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = "Array";
      if (this.IndexRange !== "") Result = ((Result + "[") + this.IndexRange) + "]";
      Result = Result + " of ";
      if (this.IsPacked()) Result = "packed " + Result;
      if (this.ElType != null) {
        Result = Result + this.ElType.FName}
       else Result = Result + "const";
      if (full) Result = this.FixTypeDecl(Result);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.ElType,true);
    };
    this.IsGenericArray = function () {
      var Result = false;
      Result = $mod.TPasGenericTemplateType.isPrototypeOf(this.ElType);
      return Result;
    };
    this.IsPacked = function () {
      var Result = false;
      Result = this.PackMode === $mod.TPackMode.pmPacked;
      return Result;
    };
    this.AddRange = function (Range) {
      var i = 0;
      i = rtl.length(this.Ranges);
      this.Ranges = rtl.arraySetLength(this.Ranges,null,i + 1);
      this.Ranges[i] = Range;
    };
  });
  rtl.createClass($mod,"TPasFileType",$mod.TPasType,function () {
    this.$init = function () {
      $mod.TPasType.$init.call(this);
      this.ElType = null;
    };
    this.$final = function () {
      this.ElType = undefined;
      $mod.TPasType.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ElType;
        }, set: function (v) {
          this.p.ElType = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeFileType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = "File";
      if (this.ElType != null) Result = (Result + " of ") + this.ElType.FName;
      if (full) Result = this.FixTypeDecl(Result);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.ElType,true);
    };
  });
  rtl.createClass($mod,"TPasEnumValue",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.Value = null;
    };
    this.$final = function () {
      this.Value = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeEnumValue");
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.Value,false);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Value;
        }, set: function (v) {
          this.p.Value = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.AssignedValue = function () {
      var Result = "";
      if (this.Value != null) {
        Result = this.Value.GetDeclaration(true)}
       else Result = "";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasEnumType",$mod.TPasType,function () {
    this.$init = function () {
      $mod.TPasType.$init.call(this);
      this.Values = null;
    };
    this.$final = function () {
      this.Values = undefined;
      $mod.TPasType.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Values = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.Values.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.Values.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Values;
        }, set: function (v) {
          this.p.Values = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeEnumType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var S = null;
      S = pas.Classes.TStringList.$create("Create$1");
      try {
        if (full && (this.FName !== "")) {
          S.Add(this.FName + " = (")}
         else S.Add("(");
        this.GetEnumNames(S);
        S.Put(S.GetCount() - 1,S.Get(S.GetCount() - 1) + ")");
        if (full) {
          Result = $impl.IndentStrings(S,this.FName.length + 4)}
         else Result = $impl.IndentStrings(S,1);
        if (full) this.ProcessHints(false,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      } finally {
        S = rtl.freeLoc(S);
      };
      return Result;
    };
    this.GetEnumNames = function (Names) {
      var i = 0;
      var $with1 = this.Values;
      for (var $l2 = 0, $end3 = $with1.FCount - 2; $l2 <= $end3; $l2++) {
        i = $l2;
        Names.Add(rtl.getObject($with1.Get(i)).FName + ",");
      };
      if ($with1.FCount > 0) Names.Add(rtl.getObject($with1.Get($with1.FCount - 1)).FName);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = this.Values.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Values.Get(i)),false);
      };
    };
  });
  rtl.createClass($mod,"TPasSetType",$mod.TPasType,function () {
    this.$init = function () {
      $mod.TPasType.$init.call(this);
      this.EnumType = null;
      this.IsPacked = false;
    };
    this.$final = function () {
      this.EnumType = undefined;
      $mod.TPasType.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.EnumType;
        }, set: function (v) {
          this.p.EnumType = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeSetType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var S = null;
      var i = 0;
      if ($mod.TPasEnumType.isPrototypeOf(this.EnumType) && (this.EnumType.FName === "")) {
        S = pas.Classes.TStringList.$create("Create$1");
        try {
          if (full && (this.FName !== "")) {
            S.Add(this.FName + "= Set of (")}
           else S.Add("Set of (");
          this.EnumType.GetEnumNames(S);
          S.Put(S.GetCount() - 1,S.Get(S.GetCount() - 1) + ")");
          i = pas.System.Pos("(",S.Get(0));
          Result = $impl.IndentStrings(S,i);
        } finally {
          S = rtl.freeLoc(S);
        };
      } else {
        Result = "Set of " + this.EnumType.FName;
        if (full) Result = (this.FName + " = ") + Result;
      };
      if (full) this.ProcessHints(false,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.EnumType,true);
    };
  });
  $mod.$rtti.$Class("TPasRecordType");
  rtl.createClass($mod,"TPasVariant",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.Values = null;
      this.Members = null;
    };
    this.$final = function () {
      this.Values = undefined;
      this.Members = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Values = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var I = 0;
      for (var $l1 = 0, $end2 = this.Values.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        rtl.getObject(this.Values.Get(I)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Values;
        }, set: function (v) {
          this.p.Values = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Members;
        }, set: function (v) {
          this.p.Members = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var i = 0;
      var S = null;
      Result = "";
      for (var $l1 = 0, $end2 = this.Values.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (Result !== "") Result = Result + ", ";
        Result = Result + rtl.getObject(this.Values.Get(i)).GetDeclaration(false);
        Result = (Result + ": (") + pas.System.sLineBreak;
        S = pas.Classes.TStringList.$create("Create$1");
        try {
          this.Members.GetMembers(S);
          Result = Result + S.GetTextStr();
        } finally {
          S = rtl.freeLoc(S);
        };
        Result = Result + ");";
        if (full) ;
      };
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = this.Values.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Values.Get(i)),false);
      };
      this.ForEachChildCall(aMethodCall,Arg,this.Members,false);
    };
  });
  rtl.createClass($mod,"TPasRecordType",$mod.TPasType,function () {
    this.$init = function () {
      $mod.TPasType.$init.call(this);
      this.PackMode = 0;
      this.Members = null;
      this.VariantEl = null;
      this.Variants = null;
      this.GenericTemplateTypes = null;
    };
    this.$final = function () {
      this.Members = undefined;
      this.VariantEl = undefined;
      this.Variants = undefined;
      this.GenericTemplateTypes = undefined;
      $mod.TPasType.$final.call(this);
    };
    this.ClearChildReferences = function (El, arg) {
      El.ClearTypeReferences(this);
      if (arg === null) ;
    };
    this.GetMembers = function (S) {
      var T = null;
      var temp = "";
      var I = 0;
      var J = 0;
      var E = null;
      var CV = 0;
      T = pas.Classes.TStringList.$create("Create$1");
      try {
        CV = $mod.TPasMemberVisibility.visDefault;
        for (var $l1 = 0, $end2 = this.Members.FCount - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          E = rtl.getObject(this.Members.Get(I));
          if (E.Visibility !== CV) {
            CV = E.Visibility;
            if (CV !== $mod.TPasMemberVisibility.visDefault) S.Add($mod.VisibilityNames[CV]);
          };
          temp = E.GetDeclaration(true);
          if ($mod.TPasProperty.isPrototypeOf(E)) temp = "property " + temp;
          if (pas.System.Pos(pas.System.LineEnding,temp) > 0) {
            T.SetTextStr(temp);
            for (var $l3 = 0, $end4 = T.GetCount() - 1; $l3 <= $end4; $l3++) {
              J = $l3;
              if (J === (T.GetCount() - 1)) {
                S.Add(("  " + T.Get(J)) + ";")}
               else S.Add("  " + T.Get(J));
            };
          } else S.Add(("  " + temp) + ";");
        };
        if (this.Variants !== null) {
          temp = "case ";
          if ($mod.TPasVariable.isPrototypeOf(this.VariantEl)) {
            temp = ((temp + this.VariantEl.FName) + " : ") + this.VariantEl.VarType.FName}
           else if (this.VariantEl !== null) temp = temp + this.VariantEl.FName;
          S.Add(temp + " of");
          T.Clear();
          for (var $l5 = 0, $end6 = this.Variants.FCount - 1; $l5 <= $end6; $l5++) {
            I = $l5;
            T.Add(rtl.getObject(this.Variants.Get(I)).GetDeclaration(true));
          };
          S.AddStrings(T);
        };
      } finally {
        T = rtl.freeLoc(T);
      };
    };
    this.SetParent = function (AValue) {
      if ((AValue === null) && (this.FParent !== null)) {
        this.ForEachCall(rtl.createCallback(this,"ClearChildReferences"),null);
      };
      $mod.TPasElement.SetParent.call(this,AValue);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Members = pas.Classes.TFPList.$create("Create");
      this.GenericTemplateTypes = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.GenericTemplateTypes.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.GenericTemplateTypes.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.GenericTemplateTypes;
        }, set: function (v) {
          this.p.GenericTemplateTypes = v;
        }});
      for (var $l3 = 0, $end4 = this.Members.FCount - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        rtl.getObject(this.Members.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Members;
        }, set: function (v) {
          this.p.Members = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.VariantEl;
        }, set: function (v) {
          this.p.VariantEl = v;
        }});
      if (this.Variants != null) {
        for (var $l5 = 0, $end6 = this.Variants.FCount - 1; $l5 <= $end6; $l5++) {
          i = $l5;
          rtl.getObject(this.Variants.Get(i)).Release();
        };
        pas.SysUtils.FreeAndNil({p: this, get: function () {
            return this.p.Variants;
          }, set: function (v) {
            this.p.Variants = v;
          }});
      };
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeRecordType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var S = null;
      var temp = "";
      S = pas.Classes.TStringList.$create("Create$1");
      try {
        temp = "record";
        if (this.IsPacked()) if (this.IsBitPacked()) {
          temp = "bitpacked " + temp}
         else temp = "packed " + temp;
        if (full && (this.FName !== "")) temp = (this.FName + " = ") + temp;
        S.Add(temp);
        this.GetMembers(S);
        S.Add("end");
        Result = S.GetTextStr();
        if (full) this.ProcessHints(false,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      } finally {
        S = rtl.freeLoc(S);
      };
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = this.GenericTemplateTypes.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.GenericTemplateTypes.Get(i)),true);
      };
      for (var $l3 = 0, $end4 = this.Members.FCount - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Members.Get(i)),false);
      };
      this.ForEachChildCall(aMethodCall,Arg,this.VariantEl,true);
      if (this.Variants !== null) for (var $l5 = 0, $end6 = this.Variants.FCount - 1; $l5 <= $end6; $l5++) {
        i = $l5;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Variants.Get(i)),false);
      };
    };
    this.IsPacked = function () {
      var Result = false;
      Result = this.PackMode !== $mod.TPackMode.pmNone;
      return Result;
    };
    this.IsBitPacked = function () {
      var Result = false;
      Result = this.PackMode === $mod.TPackMode.pmBitPacked;
      return Result;
    };
    this.IsAdvancedRecord = function () {
      var Result = false;
      var I = 0;
      Result = false;
      I = 0;
      while (!Result && (I < this.Members.FCount)) {
        Result = rtl.getObject(this.Members.Get(I)).$class.InheritsFrom($mod.TPasProcedureBase) || rtl.getObject(this.Members.Get(I)).$class.InheritsFrom($mod.TPasProperty);
        I += 1;
      };
      return Result;
    };
    this.SetGenericTemplates = function (AList) {
      var I = 0;
      for (var $l1 = 0, $end2 = AList.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        rtl.getObject(AList.Get(I)).SetParent(this);
        this.GenericTemplateTypes.Add(AList.Get(I));
      };
      AList.Clear();
    };
  });
  rtl.createClass($mod,"TPasGenericTemplateType",$mod.TPasType,function () {
  });
  this.TPasObjKind = {"0": "okObject", okObject: 0, "1": "okClass", okClass: 1, "2": "okInterface", okInterface: 2, "3": "okGeneric", okGeneric: 3, "4": "okClassHelper", okClassHelper: 4, "5": "okRecordHelper", okRecordHelper: 5, "6": "okTypeHelper", okTypeHelper: 6, "7": "okDispInterface", okDispInterface: 7};
  $mod.$rtti.$Enum("TPasObjKind",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TPasObjKind});
  this.TPasClassInterfaceType = {"0": "citCom", citCom: 0, "1": "citCorba", citCorba: 1};
  $mod.$rtti.$Enum("TPasClassInterfaceType",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TPasClassInterfaceType});
  rtl.createClass($mod,"TPasClassType",$mod.TPasType,function () {
    this.$init = function () {
      $mod.TPasType.$init.call(this);
      this.PackMode = 0;
      this.ObjKind = 0;
      this.AncestorType = null;
      this.HelperForType = null;
      this.IsForward = false;
      this.IsExternal = false;
      this.IsShortDefinition = false;
      this.GUIDExpr = null;
      this.Members = null;
      this.Modifiers = null;
      this.Interfaces = null;
      this.GenericTemplateTypes = null;
      this.ExternalNameSpace = "";
      this.ExternalName = "";
      this.InterfaceType = 0;
    };
    this.$final = function () {
      this.AncestorType = undefined;
      this.HelperForType = undefined;
      this.GUIDExpr = undefined;
      this.Members = undefined;
      this.Modifiers = undefined;
      this.Interfaces = undefined;
      this.GenericTemplateTypes = undefined;
      $mod.TPasType.$final.call(this);
    };
    this.ClearChildReferences = function (El, arg) {
      El.ClearTypeReferences(this);
      if (arg === null) ;
    };
    this.SetParent = function (AValue) {
      if ((AValue === null) && (this.FParent !== null)) {
        this.ForEachCall(rtl.createCallback(this,"ClearChildReferences"),null);
        if (this.AncestorType === this) $mod.ReleaseAndNil({p: this, get: function () {
            return this.p.AncestorType;
          }, set: function (v) {
            this.p.AncestorType = v;
          }});
        if (this.HelperForType === this) $mod.ReleaseAndNil({p: this, get: function () {
            return this.p.HelperForType;
          }, set: function (v) {
            this.p.HelperForType = v;
          }});
      };
      $mod.TPasElement.SetParent.call(this,AValue);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.PackMode = $mod.TPackMode.pmNone;
      this.IsShortDefinition = false;
      this.Members = pas.Classes.TFPList.$create("Create");
      this.Modifiers = pas.Classes.TStringList.$create("Create$1");
      this.Interfaces = pas.Classes.TFPList.$create("Create");
      this.GenericTemplateTypes = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      var El = null;
      for (var $l1 = 0, $end2 = this.Members.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        El = rtl.getObject(this.Members.Get(i));
        El.SetParent(null);
        El.Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Members;
        }, set: function (v) {
          this.p.Members = v;
        }});
      for (var $l3 = 0, $end4 = this.Interfaces.FCount - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        rtl.getObject(this.Interfaces.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Interfaces;
        }, set: function (v) {
          this.p.Interfaces = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.AncestorType;
        }, set: function (v) {
          this.p.AncestorType = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.HelperForType;
        }, set: function (v) {
          this.p.HelperForType = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.GUIDExpr;
        }, set: function (v) {
          this.p.GUIDExpr = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Modifiers;
        }, set: function (v) {
          this.p.Modifiers = v;
        }});
      for (var $l5 = 0, $end6 = this.GenericTemplateTypes.FCount - 1; $l5 <= $end6; $l5++) {
        i = $l5;
        rtl.getObject(this.GenericTemplateTypes.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.GenericTemplateTypes;
        }, set: function (v) {
          this.p.GenericTemplateTypes = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      var $tmp1 = this.ObjKind;
      if ($tmp1 === $mod.TPasObjKind.okObject) {
        Result = rtl.getResStr(pas.PasTree,"SPasTreeObjectType")}
       else if ($tmp1 === $mod.TPasObjKind.okClass) {
        Result = rtl.getResStr(pas.PasTree,"SPasTreeClassType")}
       else if ($tmp1 === $mod.TPasObjKind.okInterface) {
        Result = rtl.getResStr(pas.PasTree,"SPasTreeInterfaceType")}
       else if ($tmp1 === $mod.TPasObjKind.okGeneric) {
        Result = rtl.getResStr(pas.PasTree,"SPasTreeGenericType")}
       else if ($tmp1 === $mod.TPasObjKind.okClassHelper) {
        Result = rtl.getResStr(pas.PasTree,"SPasClassHelperType")}
       else if ($tmp1 === $mod.TPasObjKind.okRecordHelper) {
        Result = rtl.getResStr(pas.PasTree,"SPasRecordHelperType")}
       else {
        Result = ("ObjKind(" + pas.SysUtils.IntToStr(this.ObjKind)) + ")";
      };
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.AncestorType,true);
      for (var $l1 = 0, $end2 = this.Interfaces.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Interfaces.Get(i)),true);
      };
      this.ForEachChildCall(aMethodCall,Arg,this.HelperForType,true);
      this.ForEachChildCall(aMethodCall,Arg,this.GUIDExpr,false);
      for (var $l3 = 0, $end4 = this.Members.FCount - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Members.Get(i)),false);
      };
      for (var $l5 = 0, $end6 = this.GenericTemplateTypes.FCount - 1; $l5 <= $end6; $l5++) {
        i = $l5;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.GenericTemplateTypes.Get(i)),false);
      };
    };
    this.SetGenericTemplates = function (AList) {
      var I = 0;
      this.ObjKind = $mod.TPasObjKind.okGeneric;
      for (var $l1 = 0, $end2 = AList.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        rtl.getObject(AList.Get(I)).SetParent(this);
        this.GenericTemplateTypes.Add(AList.Get(I));
      };
      AList.Clear();
      this.ObjKind = $mod.TPasObjKind.okGeneric;
    };
    this.FindMember = function (MemberClass, MemberName) {
      var Result = null;
      var I = 0;
      Result = null;
      I = 0;
      while ((Result === null) && (I < this.Members.FCount)) {
        Result = rtl.getObject(this.Members.Get(I));
        if ((Result.$class.ClassType() !== MemberClass) || (pas.SysUtils.CompareText(Result.FName,MemberName) !== 0)) Result = null;
        I += 1;
      };
      return Result;
    };
    this.FindMemberInAncestors = function (MemberClass, MemberName) {
      var Self = this;
      var Result = null;
      function A(C) {
        var Result = null;
        if ($mod.TPasClassType.isPrototypeOf(C.AncestorType)) {
          Result = C.AncestorType}
         else Result = null;
        return Result;
      };
      var C = null;
      Result = null;
      C = A(Self);
      while ((Result === null) && (C !== null)) {
        Result = C.FindMember(MemberClass,MemberName);
        C = A(C);
      };
      return Result;
    };
    this.IsPacked = function () {
      var Result = false;
      Result = this.PackMode !== $mod.TPackMode.pmNone;
      return Result;
    };
    this.InterfaceGUID = function () {
      var Result = "";
      if (this.GUIDExpr != null) {
        Result = this.GUIDExpr.GetDeclaration(true)}
       else Result = "";
      return Result;
    };
    this.IsSealed = function () {
      var Result = false;
      Result = this.HasModifier("sealed");
      return Result;
    };
    this.IsAbstract = function () {
      var Result = false;
      Result = this.HasModifier("abstract");
      return Result;
    };
    this.HasModifier = function (aModifier) {
      var Result = false;
      var i = 0;
      for (var $l1 = 0, $end2 = this.Modifiers.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.CompareText(aModifier,this.Modifiers.Get(i)) === 0) return true;
      };
      Result = false;
      return Result;
    };
  });
  this.TArgumentAccess = {"0": "argDefault", argDefault: 0, "1": "argConst", argConst: 1, "2": "argVar", argVar: 2, "3": "argOut", argOut: 3, "4": "argConstRef", argConstRef: 4};
  rtl.createClass($mod,"TPasArgument",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.Access = 0;
      this.ArgType = null;
      this.ValueExpr = null;
    };
    this.$final = function () {
      this.ArgType = undefined;
      this.ValueExpr = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ArgType;
        }, set: function (v) {
          this.p.ArgType = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ValueExpr;
        }, set: function (v) {
          this.p.ValueExpr = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeArgument");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      if (this.ArgType != null) {
        if (this.ArgType.FName !== "") {
          Result = this.ArgType.FName}
         else Result = this.ArgType.GetDeclaration(false);
        if (full && (this.FName !== "")) Result = (this.FName + ": ") + Result;
      } else if (full) {
        Result = this.FName}
       else Result = "";
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.ArgType,true);
      this.ForEachChildCall(aMethodCall,Arg,this.ValueExpr,false);
    };
    this.ClearTypeReferences = function (aType) {
      if (this.ArgType === aType) $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ArgType;
        }, set: function (v) {
          this.p.ArgType = v;
        }});
    };
    this.Value = function () {
      var Result = "";
      if (this.ValueExpr != null) {
        Result = this.ValueExpr.GetDeclaration(true)}
       else Result = "";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasProcedureType",$mod.TPasType,function () {
    this.$init = function () {
      $mod.TPasType.$init.call(this);
      this.Args = null;
      this.CallingConvention = 0;
      this.Modifiers = {};
    };
    this.$final = function () {
      this.Args = undefined;
      this.Modifiers = undefined;
      $mod.TPasType.$final.call(this);
    };
    this.GetIsNested = function () {
      var Result = false;
      Result = $mod.TProcTypeModifier.ptmIsNested in this.Modifiers;
      return Result;
    };
    this.GetIsOfObject = function () {
      var Result = false;
      Result = $mod.TProcTypeModifier.ptmOfObject in this.Modifiers;
      return Result;
    };
    this.GetIsReference = function () {
      var Result = false;
      Result = $mod.TProcTypeModifier.ptmReferenceTo in this.Modifiers;
      return Result;
    };
    this.SetIsNested = function (AValue) {
      if (AValue) {
        this.Modifiers = rtl.includeSet(this.Modifiers,$mod.TProcTypeModifier.ptmIsNested)}
       else this.Modifiers = rtl.excludeSet(this.Modifiers,$mod.TProcTypeModifier.ptmIsNested);
    };
    this.SetIsOfObject = function (AValue) {
      if (AValue) {
        this.Modifiers = rtl.includeSet(this.Modifiers,$mod.TProcTypeModifier.ptmOfObject)}
       else this.Modifiers = rtl.excludeSet(this.Modifiers,$mod.TProcTypeModifier.ptmOfObject);
    };
    this.SetIsReference = function (AValue) {
      if (AValue) {
        this.Modifiers = rtl.includeSet(this.Modifiers,$mod.TProcTypeModifier.ptmReferenceTo)}
       else this.Modifiers = rtl.excludeSet(this.Modifiers,$mod.TProcTypeModifier.ptmReferenceTo);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Args = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.Args.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.Args.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Args;
        }, set: function (v) {
          this.p.Args = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.TypeName = function () {
      var Result = "";
      Result = "procedure";
      return Result;
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeProcedureType");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var S = null;
      S = pas.Classes.TStringList.$create("Create$1");
      try {
        if (full) S.Add(pas.SysUtils.Format("%s = ",[this.FName]));
        S.Add(this.$class.TypeName());
        this.GetArguments(S);
        if (this.GetIsOfObject()) {
          S.Add(" of object")}
         else if (this.GetIsNested()) S.Add(" is nested");
        if (full) {
          Result = $impl.IndentStrings(S,(S.Get(0).length + S.Get(1).length) + 1)}
         else Result = $impl.IndentStrings(S,S.Get(0).length + 1);
      } finally {
        S = rtl.freeLoc(S);
      };
      return Result;
    };
    this.GetArguments = function (List) {
      var T = "";
      var I = 0;
      for (var $l1 = 0, $end2 = this.Args.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        T = $mod.AccessNames[rtl.getObject(this.Args.Get(I)).Access];
        T = T + rtl.getObject(this.Args.Get(I)).GetDeclaration(true);
        if (I === 0) T = "(" + T;
        if (I < (this.Args.FCount - 1)) {
          List.Add(T + "; ")}
         else List.Add(T + ")");
      };
    };
    this.CreateArgument = function (AName, AUnresolvedTypeName) {
      var Result = null;
      Result = $mod.TPasArgument.$create("Create$1",[AName,this]);
      this.Args.Add(Result);
      if (AUnresolvedTypeName !== "") Result.ArgType = $mod.TPasUnresolvedTypeRef.$create("Create$1",[AUnresolvedTypeName,Result]);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = this.Args.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Args.Get(i)),false);
      };
    };
  });
  $mod.$rtti.$ClassRef("TPasProcedureTypeClass",{instancetype: $mod.$rtti["TPasProcedureType"]});
  rtl.createClass($mod,"TPasResultElement",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.ResultType = null;
    };
    this.$final = function () {
      this.ResultType = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Destroy = function () {
      if (this.ResultType != null) $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ResultType;
        }, set: function (v) {
          this.p.ResultType = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeResultElement");
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.ResultType,true);
    };
    this.ClearTypeReferences = function (aType) {
      if (this.ResultType === aType) $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ResultType;
        }, set: function (v) {
          this.p.ResultType = v;
        }});
    };
  });
  rtl.createClass($mod,"TPasFunctionType",$mod.TPasProcedureType,function () {
    this.$init = function () {
      $mod.TPasProcedureType.$init.call(this);
      this.ResultEl = null;
    };
    this.$final = function () {
      this.ResultEl = undefined;
      $mod.TPasProcedureType.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ResultEl;
        }, set: function (v) {
          this.p.ResultEl = v;
        }});
      $mod.TPasProcedureType.Destroy.call(this);
    };
    this.TypeName = function () {
      var Result = "";
      Result = "function";
      return Result;
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeFunctionType");
      return Result;
    };
    this.GetDeclaration = function (Full) {
      var Result = "";
      var S = null;
      var T = "";
      S = pas.Classes.TStringList.$create("Create$1");
      try {
        if (Full) S.Add(pas.SysUtils.Format("%s = ",[this.FName]));
        S.Add(this.$class.TypeName());
        this.GetArguments(S);
        if (this.ResultEl != null) {
          T = " : ";
          if (this.ResultEl.ResultType.FName !== "") {
            T = T + this.ResultEl.ResultType.FName}
           else T = T + this.ResultEl.ResultType.GetDeclaration(false);
          S.Add(T);
        };
        if (this.GetIsOfObject()) S.Add(" of object");
        if (Full) {
          Result = $impl.IndentStrings(S,(S.Get(0).length + S.Get(1).length) + 1)}
         else Result = $impl.IndentStrings(S,S.Get(0).length + 1);
      } finally {
        S = rtl.freeLoc(S);
      };
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasProcedureType.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.ResultEl,false);
    };
  });
  rtl.createClass($mod,"TPasUnresolvedSymbolRef",$mod.TPasType,function () {
  });
  rtl.createClass($mod,"TPasUnresolvedTypeRef",$mod.TPasUnresolvedSymbolRef,function () {
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,null);
      if (AParent === null) ;
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeUnresolvedTypeRef");
      return Result;
    };
  });
  rtl.createClass($mod,"TPasUnresolvedUnitRef",$mod.TPasUnresolvedSymbolRef,function () {
    this.$init = function () {
      $mod.TPasUnresolvedSymbolRef.$init.call(this);
      this.FileName = "";
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeUnit");
      return Result;
    };
  });
  rtl.createClass($mod,"TPasStringType",$mod.TPasUnresolvedTypeRef,function () {
    this.$init = function () {
      $mod.TPasUnresolvedTypeRef.$init.call(this);
      this.LengthExpr = "";
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasStringType");
      return Result;
    };
  });
  rtl.createClass($mod,"TPasTypeRef",$mod.TPasUnresolvedTypeRef,function () {
    this.$init = function () {
      $mod.TPasUnresolvedTypeRef.$init.call(this);
      this.RefType = null;
    };
    this.$final = function () {
      this.RefType = undefined;
      $mod.TPasUnresolvedTypeRef.$final.call(this);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.RefType,true);
    };
  });
  this.TVariableModifier = {"0": "vmCVar", vmCVar: 0, "1": "vmExternal", vmExternal: 1, "2": "vmPublic", vmPublic: 2, "3": "vmExport", vmExport: 3, "4": "vmClass", vmClass: 4, "5": "vmStatic", vmStatic: 5};
  $mod.$rtti.$Enum("TVariableModifier",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TVariableModifier});
  $mod.$rtti.$Set("TVariableModifiers",{comptype: $mod.$rtti["TVariableModifier"]});
  rtl.createClass($mod,"TPasVariable",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.VarType = null;
      this.VarModifiers = {};
      this.LibraryName = null;
      this.ExportName = null;
      this.Modifiers = "";
      this.AbsoluteLocation = "";
      this.AbsoluteExpr = null;
      this.Expr = null;
    };
    this.$final = function () {
      this.VarType = undefined;
      this.VarModifiers = undefined;
      this.LibraryName = undefined;
      this.ExportName = undefined;
      this.AbsoluteExpr = undefined;
      this.Expr = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.VarType;
        }, set: function (v) {
          this.p.VarType = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Expr;
        }, set: function (v) {
          this.p.Expr = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.LibraryName;
        }, set: function (v) {
          this.p.LibraryName = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ExportName;
        }, set: function (v) {
          this.p.ExportName = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.AbsoluteExpr;
        }, set: function (v) {
          this.p.AbsoluteExpr = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeVariable");
      return Result;
    };
    var Seps = ["=",":"];
    this.GetDeclaration = function (full) {
      var Result = "";
      if (this.VarType != null) {
        if (this.VarType.FName === "") {
          Result = this.VarType.GetDeclaration(false)}
         else Result = this.VarType.FName;
        Result = Result + this.Modifiers;
        if (this.Value() !== "") Result = (Result + " = ") + this.Value();
      } else Result = this.Value();
      if (full) {
        Result = (((this.FName + " ") + Seps[+(this.VarType != null)]) + " ") + Result;
        Result = Result + this.HintsString();
      };
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.VarType,true);
      this.ForEachChildCall(aMethodCall,Arg,this.Expr,false);
      this.ForEachChildCall(aMethodCall,Arg,this.LibraryName,false);
      this.ForEachChildCall(aMethodCall,Arg,this.ExportName,false);
      this.ForEachChildCall(aMethodCall,Arg,this.AbsoluteExpr,false);
    };
    this.ClearTypeReferences = function (aType) {
      if (this.VarType === aType) $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.VarType;
        }, set: function (v) {
          this.p.VarType = v;
        }});
    };
    this.Value = function () {
      var Result = "";
      if (this.Expr != null) Result = this.Expr.GetDeclaration(true);
      return Result;
    };
  });
  rtl.createClass($mod,"TPasExportSymbol",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.ExportName = null;
      this.ExportIndex = null;
    };
    this.$final = function () {
      this.ExportName = undefined;
      this.ExportIndex = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ExportName;
        }, set: function (v) {
          this.p.ExportName = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ExportIndex;
        }, set: function (v) {
          this.p.ExportIndex = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = "Export";
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      Result = this.FName;
      if (this.ExportName !== null) {
        Result = (Result + " name ") + this.ExportName.GetDeclaration(full)}
       else if (this.ExportIndex !== null) Result = (Result + " index ") + this.ExportIndex.GetDeclaration(full);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.ExportName,false);
      this.ForEachChildCall(aMethodCall,Arg,this.ExportIndex,false);
    };
  });
  rtl.createClass($mod,"TPasConst",$mod.TPasVariable,function () {
    this.$init = function () {
      $mod.TPasVariable.$init.call(this);
      this.IsConst = false;
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeConst");
      return Result;
    };
  });
  rtl.createClass($mod,"TPasProperty",$mod.TPasVariable,function () {
    this.$init = function () {
      $mod.TPasVariable.$init.call(this);
      this.FArgs = null;
      this.FResolvedType = null;
      this.IndexExpr = null;
      this.ReadAccessor = null;
      this.WriteAccessor = null;
      this.DispIDExpr = null;
      this.Implements = [];
      this.StoredAccessor = null;
      this.DefaultExpr = null;
      this.ReadAccessorName = "";
      this.WriteAccessorName = "";
      this.ImplementsName = "";
      this.StoredAccessorName = "";
      this.DispIDReadOnly = false;
      this.IsDefault = false;
      this.IsNodefault = false;
    };
    this.$final = function () {
      this.FArgs = undefined;
      this.FResolvedType = undefined;
      this.IndexExpr = undefined;
      this.ReadAccessor = undefined;
      this.WriteAccessor = undefined;
      this.DispIDExpr = undefined;
      this.Implements = undefined;
      this.StoredAccessor = undefined;
      this.DefaultExpr = undefined;
      $mod.TPasVariable.$final.call(this);
    };
    this.GetIsClass = function () {
      var Result = false;
      Result = $mod.TVariableModifier.vmClass in this.VarModifiers;
      return Result;
    };
    this.SetIsClass = function (AValue) {
      if (AValue) {
        this.VarModifiers = rtl.includeSet(this.VarModifiers,$mod.TVariableModifier.vmClass)}
       else this.VarModifiers = rtl.excludeSet(this.VarModifiers,$mod.TVariableModifier.vmClass);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.FArgs = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.FArgs.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.FArgs.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FArgs;
        }, set: function (v) {
          this.p.FArgs = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.IndexExpr;
        }, set: function (v) {
          this.p.IndexExpr = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ReadAccessor;
        }, set: function (v) {
          this.p.ReadAccessor = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.WriteAccessor;
        }, set: function (v) {
          this.p.WriteAccessor = v;
        }});
      for (var $l3 = 0, $end4 = rtl.length(this.Implements) - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        this.Implements[i].Release();
      };
      this.Implements = rtl.arraySetLength(this.Implements,null,0);
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.StoredAccessor;
        }, set: function (v) {
          this.p.StoredAccessor = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.DefaultExpr;
        }, set: function (v) {
          this.p.DefaultExpr = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.DispIDExpr;
        }, set: function (v) {
          this.p.DispIDExpr = v;
        }});
      $mod.TPasVariable.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeProperty");
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var S = "";
      var I = 0;
      if (this.VarType != null) {
        if (this.VarType.FName === "") {
          Result = this.VarType.GetDeclaration(false)}
         else Result = this.VarType.FName;
      } else if (this.Expr != null) Result = this.Expr.GetDeclaration(true);
      S = "";
      if ((this.FArgs != null) && (this.FArgs.FCount > 0)) {
        for (var $l1 = 0, $end2 = this.FArgs.FCount - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if (S !== "") S = S + ";";
          S = S + rtl.getObject(this.FArgs.Get(I)).GetDeclaration(true);
        };
      };
      if (S !== "") {
        S = ("[" + S) + "]"}
       else S = " ";
      if (full) {
        Result = ((this.FName + S) + ": ") + Result;
        if (this.ImplementsName !== "") Result = (Result + " implements ") + this.ImplementsName;
      };
      if (this.IsDefault) Result = Result + "; default";
      this.ProcessHints(true,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasVariable.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.IndexExpr,false);
      for (var $l1 = 0, $end2 = this.FArgs.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.FArgs.Get(i)),false);
      };
      this.ForEachChildCall(aMethodCall,Arg,this.ReadAccessor,false);
      this.ForEachChildCall(aMethodCall,Arg,this.WriteAccessor,false);
      for (var $l3 = 0, $end4 = rtl.length(this.Implements) - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        this.ForEachChildCall(aMethodCall,Arg,this.Implements[i],false);
      };
      this.ForEachChildCall(aMethodCall,Arg,this.StoredAccessor,false);
      this.ForEachChildCall(aMethodCall,Arg,this.DefaultExpr,false);
    };
    this.ResolvedType = function () {
      var Self = this;
      var Result = null;
      function GC(P) {
        var Result = null;
        if (((P != null) && (P.FParent != null)) && $mod.TPasClassType.isPrototypeOf(P.FParent)) {
          Result = rtl.as(P.FParent,$mod.TPasClassType)}
         else Result = null;
        return Result;
      };
      var P = null;
      var C = null;
      Result = Self.FResolvedType;
      if (Result === null) Result = Self.VarType;
      P = Self;
      while ((Result === null) && (P !== null)) {
        C = GC(P);
        P = C.FindMemberInAncestors($mod.TPasProperty,Self.FName);
        if (P != null) {
          Result = P.ResolvedType();
        };
      };
      return Result;
    };
    this.IndexValue = function () {
      var Result = "";
      if (this.IndexExpr != null) {
        Result = this.IndexExpr.GetDeclaration(true)}
       else Result = "";
      return Result;
    };
    this.DefaultValue = function () {
      var Result = "";
      if (this.DefaultExpr != null) {
        Result = this.DefaultExpr.GetDeclaration(true)}
       else Result = "";
      return Result;
    };
  });
  this.TProcType = {"0": "ptProcedure", ptProcedure: 0, "1": "ptFunction", ptFunction: 1, "2": "ptOperator", ptOperator: 2, "3": "ptClassOperator", ptClassOperator: 3, "4": "ptConstructor", ptConstructor: 4, "5": "ptDestructor", ptDestructor: 5, "6": "ptClassProcedure", ptClassProcedure: 6, "7": "ptClassFunction", ptClassFunction: 7, "8": "ptClassConstructor", ptClassConstructor: 8, "9": "ptClassDestructor", ptClassDestructor: 9};
  $mod.$rtti.$Enum("TProcType",{minvalue: 0, maxvalue: 9, ordtype: 1, enumtype: this.TProcType});
  rtl.createClass($mod,"TPasProcedureBase",$mod.TPasElement,function () {
  });
  rtl.createClass($mod,"TPasOverloadedProc",$mod.TPasProcedureBase,function () {
    this.$init = function () {
      $mod.TPasProcedureBase.$init.call(this);
      this.Overloads = null;
    };
    this.$final = function () {
      this.Overloads = undefined;
      $mod.TPasProcedureBase.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Overloads = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.Overloads.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.Overloads.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Overloads;
        }, set: function (v) {
          this.p.Overloads = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeOverloadedProcedure");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      if (rtl.getObject(this.Overloads.Get(0)).ProcType != null) {
        Result = rtl.getObject(this.Overloads.Get(0)).ProcType.$class.TypeName()}
       else Result = rtl.strSetLength(Result,0);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = this.Overloads.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Overloads.Get(i)),false);
      };
    };
  });
  this.TProcedureModifier = {"0": "pmVirtual", pmVirtual: 0, "1": "pmDynamic", pmDynamic: 1, "2": "pmAbstract", pmAbstract: 2, "3": "pmOverride", pmOverride: 3, "4": "pmExport", pmExport: 4, "5": "pmOverload", pmOverload: 5, "6": "pmMessage", pmMessage: 6, "7": "pmReintroduce", pmReintroduce: 7, "8": "pmInline", pmInline: 8, "9": "pmAssembler", pmAssembler: 9, "10": "pmPublic", pmPublic: 10, "11": "pmCompilerProc", pmCompilerProc: 11, "12": "pmExternal", pmExternal: 12, "13": "pmForward", pmForward: 13, "14": "pmDispId", pmDispId: 14, "15": "pmNoReturn", pmNoReturn: 15, "16": "pmFar", pmFar: 16, "17": "pmFinal", pmFinal: 17};
  this.TProcedureMessageType = {"0": "pmtNone", pmtNone: 0, "1": "pmtInteger", pmtInteger: 1, "2": "pmtString", pmtString: 2};
  $mod.$rtti.$Enum("TProcedureMessageType",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TProcedureMessageType});
  $mod.$rtti.$Class("TProcedureBody");
  rtl.createClass($mod,"TPasProcedure",$mod.TPasProcedureBase,function () {
    this.$init = function () {
      $mod.TPasProcedureBase.$init.call(this);
      this.FModifiers = {};
      this.FMessageName = "";
      this.FMessageType = 0;
      this.ProcType = null;
      this.Body = null;
      this.PublicName = null;
      this.LibrarySymbolName = null;
      this.LibraryExpr = null;
      this.DispIDExpr = null;
      this.AliasName = "";
    };
    this.$final = function () {
      this.FModifiers = undefined;
      this.ProcType = undefined;
      this.Body = undefined;
      this.PublicName = undefined;
      this.LibrarySymbolName = undefined;
      this.LibraryExpr = undefined;
      this.DispIDExpr = undefined;
      $mod.TPasProcedureBase.$final.call(this);
    };
    this.GetCallingConvention = function () {
      var Result = 0;
      Result = $mod.TCallingConvention.ccDefault;
      if (this.ProcType != null) Result = this.ProcType.CallingConvention;
      return Result;
    };
    this.SetCallingConvention = function (AValue) {
      if (this.ProcType != null) this.ProcType.CallingConvention = AValue;
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ProcType;
        }, set: function (v) {
          this.p.ProcType = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Body;
        }, set: function (v) {
          this.p.Body = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.PublicName;
        }, set: function (v) {
          this.p.PublicName = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.LibraryExpr;
        }, set: function (v) {
          this.p.LibraryExpr = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.LibrarySymbolName;
        }, set: function (v) {
          this.p.LibrarySymbolName = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.DispIDExpr;
        }, set: function (v) {
          this.p.DispIDExpr = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeProcedure");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "procedure";
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var S = null;
      S = pas.Classes.TStringList.$create("Create$1");
      try {
        if (full) S.Add((this.TypeName() + " ") + this.FName);
        this.ProcType.GetArguments(S);
        this.GetModifiers(S);
        Result = $impl.IndentStrings(S,S.Get(0).length);
      } finally {
        S = rtl.freeLoc(S);
      };
      return Result;
    };
    this.GetModifiers = function (List) {
      var Self = this;
      function DoAdd(B, S) {
        if (B) List.Add("; " + S);
      };
      DoAdd(Self.IsVirtual()," Virtual");
      DoAdd(Self.IsDynamic()," Dynamic");
      DoAdd(Self.IsOverride()," Override");
      DoAdd(Self.IsAbstract()," Abstract");
      DoAdd(Self.IsOverload()," Overload");
      DoAdd(Self.IsReintroduced()," Reintroduce");
      DoAdd(Self.IsStatic()," Static");
      DoAdd(Self.IsMessage()," Message");
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.PublicName,false);
      this.ForEachChildCall(aMethodCall,Arg,this.ProcType,false);
      this.ForEachChildCall(aMethodCall,Arg,this.LibraryExpr,false);
      this.ForEachChildCall(aMethodCall,Arg,this.LibrarySymbolName,false);
      this.ForEachChildCall(aMethodCall,Arg,this.Body,false);
    };
    this.AddModifier = function (AModifier) {
      this.FModifiers = rtl.includeSet(this.FModifiers,AModifier);
    };
    this.IsVirtual = function () {
      var Result = false;
      Result = $mod.TProcedureModifier.pmVirtual in this.FModifiers;
      return Result;
    };
    this.IsDynamic = function () {
      var Result = false;
      Result = $mod.TProcedureModifier.pmDynamic in this.FModifiers;
      return Result;
    };
    this.IsAbstract = function () {
      var Result = false;
      Result = $mod.TProcedureModifier.pmAbstract in this.FModifiers;
      return Result;
    };
    this.IsOverride = function () {
      var Result = false;
      Result = $mod.TProcedureModifier.pmOverride in this.FModifiers;
      return Result;
    };
    this.IsExported = function () {
      var Result = false;
      Result = $mod.TProcedureModifier.pmExport in this.FModifiers;
      return Result;
    };
    this.IsExternal = function () {
      var Result = false;
      Result = $mod.TProcedureModifier.pmExternal in this.FModifiers;
      return Result;
    };
    this.IsOverload = function () {
      var Result = false;
      Result = $mod.TProcedureModifier.pmOverload in this.FModifiers;
      return Result;
    };
    this.IsMessage = function () {
      var Result = false;
      Result = $mod.TProcedureModifier.pmMessage in this.FModifiers;
      return Result;
    };
    this.IsReintroduced = function () {
      var Result = false;
      Result = $mod.TProcedureModifier.pmReintroduce in this.FModifiers;
      return Result;
    };
    this.IsStatic = function () {
      var Result = false;
      Result = $mod.TProcTypeModifier.ptmStatic in this.ProcType.Modifiers;
      return Result;
    };
    this.IsForward = function () {
      var Result = false;
      Result = $mod.TProcedureModifier.pmForward in this.FModifiers;
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("TPasProcedureClass",{instancetype: $mod.$rtti["TPasProcedure"]});
  $mod.$rtti.$DynArray("TArrayOfPasProcedure",{eltype: $mod.$rtti["TPasProcedure"]});
  rtl.createClass($mod,"TPasFunction",$mod.TPasProcedure,function () {
    this.GetFT = function () {
      var Result = null;
      Result = rtl.as(this.ProcType,$mod.TPasFunctionType);
      return Result;
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeFunction");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "function";
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var S = null;
      var T = "";
      S = pas.Classes.TStringList.$create("Create$1");
      try {
        if (full) S.Add((this.TypeName() + " ") + this.FName);
        this.ProcType.GetArguments(S);
        if (rtl.as(this.ProcType,$mod.TPasFunctionType).ResultEl != null) {
          var $with1 = this.ProcType.ResultEl.ResultType;
          T = " : ";
          if ($with1.FName !== "") {
            T = T + $with1.FName}
           else T = T + $with1.GetDeclaration(false);
          S.Add(T);
        };
        this.GetModifiers(S);
        Result = $impl.IndentStrings(S,S.Get(0).length);
      } finally {
        S = rtl.freeLoc(S);
      };
      return Result;
    };
  });
  this.TOperatorType = {"0": "otUnknown", otUnknown: 0, "1": "otImplicit", otImplicit: 1, "2": "otExplicit", otExplicit: 2, "3": "otMul", otMul: 3, "4": "otPlus", otPlus: 4, "5": "otMinus", otMinus: 5, "6": "otDivision", otDivision: 6, "7": "otLessThan", otLessThan: 7, "8": "otEqual", otEqual: 8, "9": "otGreaterThan", otGreaterThan: 9, "10": "otAssign", otAssign: 10, "11": "otNotEqual", otNotEqual: 11, "12": "otLessEqualThan", otLessEqualThan: 12, "13": "otGreaterEqualThan", otGreaterEqualThan: 13, "14": "otPower", otPower: 14, "15": "otSymmetricalDifference", otSymmetricalDifference: 15, "16": "otInc", otInc: 16, "17": "otDec", otDec: 17, "18": "otMod", otMod: 18, "19": "otNegative", otNegative: 19, "20": "otPositive", otPositive: 20, "21": "otBitWiseOr", otBitWiseOr: 21, "22": "otDiv", otDiv: 22, "23": "otLeftShift", otLeftShift: 23, "24": "otLogicalOr", otLogicalOr: 24, "25": "otBitwiseAnd", otBitwiseAnd: 25, "26": "otbitwiseXor", otbitwiseXor: 26, "27": "otLogicalAnd", otLogicalAnd: 27, "28": "otLogicalNot", otLogicalNot: 28, "29": "otLogicalXor", otLogicalXor: 29, "30": "otRightShift", otRightShift: 30, "31": "otEnumerator", otEnumerator: 31};
  $mod.$rtti.$Enum("TOperatorType",{minvalue: 0, maxvalue: 31, ordtype: 1, enumtype: this.TOperatorType});
  $mod.$rtti.$Set("TOperatorTypes",{comptype: $mod.$rtti["TOperatorType"]});
  rtl.createClass($mod,"TPasOperator",$mod.TPasFunction,function () {
    this.$init = function () {
      $mod.TPasFunction.$init.call(this);
      this.FOperatorType = 0;
      this.FTokenBased = false;
    };
    this.NameSuffix = function () {
      var Result = "";
      var I = 0;
      Result = "(";
      if ((this.ProcType != null) && (this.ProcType.Args != null)) for (var $l1 = 0, $end2 = this.ProcType.Args.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (I > 0) Result = Result + ",";
        Result = Result + rtl.getObject(this.ProcType.Args.Get(I)).ArgType.FName;
      };
      Result = Result + ")";
      if (((this.ProcType != null) && (this.ProcType.ResultEl != null)) && (this.ProcType.ResultEl.ResultType != null)) Result = (Result + ":") + this.ProcType.ResultEl.ResultType.FName;
      return Result;
    };
    this.OperatorTypeToToken = function (T) {
      var Result = "";
      Result = $mod.OperatorTokens[T];
      return Result;
    };
    this.OperatorTypeToOperatorName = function (T) {
      var Result = "";
      Result = $mod.OperatorNames[T];
      return Result;
    };
    this.TokenToOperatorType = function (S) {
      var Result = 0;
      Result = $mod.TOperatorType.otEnumerator;
      while ((Result > $mod.TOperatorType.otUnknown) && (pas.SysUtils.CompareText(S,$mod.OperatorTokens[Result]) !== 0)) Result = Result - 1;
      return Result;
    };
    this.NameToOperatorType = function (S) {
      var Result = 0;
      Result = $mod.TOperatorType.otEnumerator;
      while ((Result > $mod.TOperatorType.otUnknown) && (pas.SysUtils.CompareText(S,$mod.OperatorNames[Result]) !== 0)) Result = Result - 1;
      return Result;
    };
    this.CorrectName = function () {
      this.FName = $mod.OperatorNames[this.FOperatorType] + this.NameSuffix();
    };
    this.GetOperatorDeclaration = function (Full) {
      var Result = "";
      if (Full) {
        Result = this.FullPath();
        if (Result !== "") Result = Result + ".";
      } else Result = "";
      if (this.FTokenBased) {
        Result = ((Result + this.TypeName()) + " ") + this.$class.OperatorTypeToToken(this.FOperatorType)}
       else Result = ((Result + this.TypeName()) + " ") + this.$class.OperatorTypeToOperatorName(this.FOperatorType);
      return Result;
    };
    this.OldName = function (WithPath) {
      var Result = "";
      var I = 0;
      var S = "";
      Result = (this.TypeName() + " ") + $mod.OperatorTokens[this.FOperatorType];
      Result = Result + "(";
      if (this.ProcType != null) {
        for (var $l1 = 0, $end2 = this.ProcType.Args.FCount - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if (I > 0) Result = Result + ", ";
          Result = Result + rtl.getObject(this.ProcType.Args.Get(I)).ArgType.FName;
        };
        Result = (Result + "): ") + this.ProcType.ResultEl.ResultType.FName;
        if (WithPath) {
          S = this.ParentPath();
          if (S !== "") Result = (S + ".") + Result;
        };
      };
      return Result;
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeOperator");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "operator";
      return Result;
    };
    this.GetDeclaration = function (full) {
      var Result = "";
      var S = null;
      var T = "";
      S = pas.Classes.TStringList.$create("Create$1");
      try {
        if (full) S.Add(this.GetOperatorDeclaration(full));
        this.ProcType.GetArguments(S);
        if (rtl.as(this.ProcType,$mod.TPasFunctionType).ResultEl != null) {
          var $with1 = this.ProcType.ResultEl.ResultType;
          T = " : ";
          if ($with1.FName !== "") {
            T = T + $with1.FName}
           else T = T + $with1.GetDeclaration(false);
          S.Add(T);
        };
        this.GetModifiers(S);
        Result = $impl.IndentStrings(S,S.Get(0).length);
      } finally {
        S = rtl.freeLoc(S);
      };
      return Result;
    };
  });
  rtl.createClass($mod,"TPasClassOperator",$mod.TPasOperator,function () {
    this.TypeName = function () {
      var Result = "";
      Result = "class operator";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasConstructor",$mod.TPasProcedure,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeConstructor");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "constructor";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasClassConstructor",$mod.TPasConstructor,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeClassConstructor");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "class " + $mod.TPasConstructor.TypeName.call(this);
      return Result;
    };
  });
  rtl.createClass($mod,"TPasDestructor",$mod.TPasProcedure,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeDestructor");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "destructor";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasClassDestructor",$mod.TPasDestructor,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeClassDestructor");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "destructor";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasClassProcedure",$mod.TPasProcedure,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeClassProcedure");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "class procedure";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasClassFunction",$mod.TPasFunction,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeClassFunction");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "class function";
      return Result;
    };
  });
  $mod.$rtti.$Class("TPasImplBlock");
  rtl.createClass($mod,"TProcedureBody",$mod.TPasDeclarations,function () {
    this.$init = function () {
      $mod.TPasDeclarations.$init.call(this);
      this.Body = null;
    };
    this.$final = function () {
      this.Body = undefined;
      $mod.TPasDeclarations.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasDeclarations.Create$1.call(this,AName,AParent);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Body;
        }, set: function (v) {
          this.p.Body = v;
        }});
      $mod.TPasDeclarations.Destroy.call(this);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasDeclarations.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.Body,false);
    };
  });
  rtl.createClass($mod,"TPasMethodResolution",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.ProcClass = null;
      this.InterfaceName = null;
      this.InterfaceProc = null;
      this.ImplementationProc = null;
    };
    this.$final = function () {
      this.ProcClass = undefined;
      this.InterfaceName = undefined;
      this.InterfaceProc = undefined;
      this.ImplementationProc = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.InterfaceName;
        }, set: function (v) {
          this.p.InterfaceName = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.InterfaceProc;
        }, set: function (v) {
          this.p.InterfaceProc = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ImplementationProc;
        }, set: function (v) {
          this.p.ImplementationProc = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TPasProcedureImpl",$mod.TPasElement,function () {
    this.$init = function () {
      $mod.TPasElement.$init.call(this);
      this.ProcType = null;
      this.Locals = null;
      this.Body = null;
      this.IsClassMethod = false;
    };
    this.$final = function () {
      this.ProcType = undefined;
      this.Locals = undefined;
      this.Body = undefined;
      $mod.TPasElement.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Locals = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Body;
        }, set: function (v) {
          this.p.Body = v;
        }});
      for (var $l1 = 0, $end2 = this.Locals.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.Locals.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Locals;
        }, set: function (v) {
          this.p.Locals = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ProcType;
        }, set: function (v) {
          this.p.ProcType = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeProcedureImpl");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = this.ProcType.$class.TypeName();
      return Result;
    };
  });
  rtl.createClass($mod,"TPasConstructorImpl",$mod.TPasProcedureImpl,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeConstructorImpl");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "constructor";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasDestructorImpl",$mod.TPasProcedureImpl,function () {
    this.ElementTypeName = function () {
      var Result = "";
      Result = rtl.getResStr(pas.PasTree,"SPasTreeDestructorImpl");
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      Result = "destructor";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasImplElement",$mod.TPasElement,function () {
  });
  rtl.createClass($mod,"TPasImplCommandBase",$mod.TPasImplElement,function () {
    this.$init = function () {
      $mod.TPasImplElement.$init.call(this);
      this.SemicolonAtEOL = false;
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.SemicolonAtEOL = true;
    };
  });
  rtl.createClass($mod,"TPasImplCommand",$mod.TPasImplCommandBase,function () {
    this.$init = function () {
      $mod.TPasImplCommandBase.$init.call(this);
      this.Command = "";
    };
  });
  rtl.createClass($mod,"TPasImplCommands",$mod.TPasImplCommandBase,function () {
    this.$init = function () {
      $mod.TPasImplCommandBase.$init.call(this);
      this.Commands = null;
    };
    this.$final = function () {
      this.Commands = undefined;
      $mod.TPasImplCommandBase.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasImplCommandBase.Create$1.call(this,AName,AParent);
      this.Commands = pas.Classes.TStringList.$create("Create$1");
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Commands;
        }, set: function (v) {
          this.p.Commands = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TPasLabels",$mod.TPasImplElement,function () {
    this.$init = function () {
      $mod.TPasImplElement.$init.call(this);
      this.Labels = null;
    };
    this.$final = function () {
      this.Labels = undefined;
      $mod.TPasImplElement.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Labels = pas.Classes.TStringList.$create("Create$1");
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Labels;
        }, set: function (v) {
          this.p.Labels = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
  });
  $mod.$rtti.$Class("TPasImplBeginBlock");
  $mod.$rtti.$Class("TPasImplRepeatUntil");
  $mod.$rtti.$Class("TPasImplIfElse");
  $mod.$rtti.$Class("TPasImplWhileDo");
  $mod.$rtti.$Class("TPasImplWithDo");
  $mod.$rtti.$Class("TPasImplCaseOf");
  $mod.$rtti.$Class("TPasImplForLoop");
  $mod.$rtti.$Class("TPasImplTry");
  $mod.$rtti.$Class("TPasImplExceptOn");
  $mod.$rtti.$Class("TPasImplRaise");
  $mod.$rtti.$Class("TPasImplAssign");
  $mod.$rtti.$Class("TPasImplSimple");
  $mod.$rtti.$Class("TPasImplLabelMark");
  rtl.createClass($mod,"TPasImplBlock",$mod.TPasImplElement,function () {
    this.$init = function () {
      $mod.TPasImplElement.$init.call(this);
      this.Elements = null;
    };
    this.$final = function () {
      this.Elements = undefined;
      $mod.TPasImplElement.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasElement.Create$1.call(this,AName,AParent);
      this.Elements = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.Elements.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.Elements.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Elements;
        }, set: function (v) {
          this.p.Elements = v;
        }});
      $mod.TPasElement.Destroy.call(this);
    };
    this.AddElement = function (Element) {
      this.Elements.Add(Element);
    };
    this.AddCommand = function (ACommand) {
      var Result = null;
      Result = $mod.TPasImplCommand.$create("Create$1",["",this]);
      Result.Command = ACommand;
      this.AddElement(Result);
      return Result;
    };
    this.AddCommands = function () {
      var Result = null;
      Result = $mod.TPasImplCommands.$create("Create$1",["",this]);
      this.AddElement(Result);
      return Result;
    };
    this.AddBeginBlock = function () {
      var Result = null;
      Result = $mod.TPasImplBeginBlock.$create("Create$1",["",this]);
      this.AddElement(Result);
      return Result;
    };
    this.AddRepeatUntil = function () {
      var Result = null;
      Result = $mod.TPasImplRepeatUntil.$create("Create$1",["",this]);
      this.AddElement(Result);
      return Result;
    };
    this.AddIfElse = function (ACondition) {
      var Result = null;
      Result = $mod.TPasImplIfElse.$create("Create$1",["",this]);
      Result.ConditionExpr = ACondition;
      this.AddElement(Result);
      return Result;
    };
    this.AddWhileDo = function (ACondition) {
      var Result = null;
      Result = $mod.TPasImplWhileDo.$create("Create$1",["",this]);
      Result.ConditionExpr = ACondition;
      this.AddElement(Result);
      return Result;
    };
    this.AddWithDo = function (Expression) {
      var Result = null;
      Result = $mod.TPasImplWithDo.$create("Create$1",["",this]);
      Result.AddExpression(Expression);
      this.AddElement(Result);
      return Result;
    };
    this.AddCaseOf = function (Expression) {
      var Result = null;
      Result = $mod.TPasImplCaseOf.$create("Create$1",["",this]);
      Result.CaseExpr = Expression;
      this.AddElement(Result);
      return Result;
    };
    this.AddForLoop = function (AVar, AStartValue, AEndValue) {
      var Result = null;
      Result = $mod.TPasImplForLoop.$create("Create$1",["",this]);
      Result.Variable = AVar;
      Result.StartExpr = AStartValue;
      Result.EndExpr = AEndValue;
      this.AddElement(Result);
      return Result;
    };
    this.AddForLoop$1 = function (AVarName, AStartValue, AEndValue, ADownTo) {
      var Result = null;
      Result = $mod.TPasImplForLoop.$create("Create$1",["",this]);
      Result.VariableName = AVarName;
      Result.StartExpr = AStartValue;
      Result.EndExpr = AEndValue;
      if (ADownTo) Result.LoopType = $mod.TLoopType.ltDown;
      this.AddElement(Result);
      return Result;
    };
    this.AddTry = function () {
      var Result = null;
      Result = $mod.TPasImplTry.$create("Create$1",["",this]);
      this.AddElement(Result);
      return Result;
    };
    this.AddExceptOn = function (VarName, TypeName) {
      var Result = null;
      Result = this.AddExceptOn$1(VarName,$mod.TPasUnresolvedTypeRef.$create("Create$1",[TypeName,null]));
      return Result;
    };
    this.AddExceptOn$1 = function (VarName, VarType) {
      var Result = null;
      var V = null;
      V = $mod.TPasVariable.$create("Create$1",[VarName,null]);
      V.VarType = VarType;
      Result = this.AddExceptOn$2(V);
      return Result;
    };
    this.AddExceptOn$2 = function (VarEl) {
      var Result = null;
      Result = $mod.TPasImplExceptOn.$create("Create$1",["",this]);
      Result.VarEl = VarEl;
      Result.TypeEl = VarEl.VarType;
      Result.TypeEl.AddRef();
      this.AddElement(Result);
      return Result;
    };
    this.AddExceptOn$3 = function (TypeEl) {
      var Result = null;
      Result = $mod.TPasImplExceptOn.$create("Create$1",["",this]);
      Result.TypeEl = TypeEl;
      this.AddElement(Result);
      return Result;
    };
    this.AddRaise = function () {
      var Result = null;
      Result = $mod.TPasImplRaise.$create("Create$1",["",this]);
      this.AddElement(Result);
      return Result;
    };
    this.AddLabelMark = function (Id) {
      var Result = null;
      Result = $mod.TPasImplLabelMark.$create("Create$1",["",this]);
      Result.LabelId = Id;
      this.AddElement(Result);
      return Result;
    };
    this.AddAssign = function (left, right) {
      var Result = null;
      Result = $mod.TPasImplAssign.$create("Create$1",["",this]);
      Result.left = left;
      Result.right = right;
      this.AddElement(Result);
      return Result;
    };
    this.AddSimple = function (exp) {
      var Result = null;
      Result = $mod.TPasImplSimple.$create("Create$1",["",this]);
      Result.Expr = exp;
      this.AddElement(Result);
      return Result;
    };
    this.CloseOnSemicolon = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      $mod.TPasElement.ForEachCall.call(this,aMethodCall,Arg);
      for (var $l1 = 0, $end2 = this.Elements.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Elements.Get(i)),false);
      };
    };
  });
  $mod.$rtti.$ClassRef("TPasImplBlockClass",{instancetype: $mod.$rtti["TPasImplBlock"]});
  rtl.createClass($mod,"TPasImplStatement",$mod.TPasImplBlock,function () {
    this.CloseOnSemicolon = function () {
      var Result = false;
      Result = true;
      return Result;
    };
  });
  rtl.createClass($mod,"TPasImplBeginBlock",$mod.TPasImplBlock,function () {
  });
  rtl.createClass($mod,"TInitializationSection",$mod.TPasImplBlock,function () {
  });
  rtl.createClass($mod,"TFinalizationSection",$mod.TPasImplBlock,function () {
  });
  rtl.createClass($mod,"TPasImplAsmStatement",$mod.TPasImplStatement,function () {
    this.$init = function () {
      $mod.TPasImplStatement.$init.call(this);
      this.FTokens = null;
    };
    this.$final = function () {
      this.FTokens = undefined;
      $mod.TPasImplStatement.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasImplBlock.Create$1.call(this,AName,AParent);
      this.FTokens = pas.Classes.TStringList.$create("Create$1");
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FTokens;
        }, set: function (v) {
          this.p.FTokens = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TPasImplRepeatUntil",$mod.TPasImplBlock,function () {
    this.$init = function () {
      $mod.TPasImplBlock.$init.call(this);
      this.ConditionExpr = null;
    };
    this.$final = function () {
      this.ConditionExpr = undefined;
      $mod.TPasImplBlock.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ConditionExpr;
        }, set: function (v) {
          this.p.ConditionExpr = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.Condition = function () {
      var Result = "";
      if (this.ConditionExpr != null) {
        Result = this.ConditionExpr.GetDeclaration(true)}
       else Result = "";
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.ConditionExpr,false);
    };
  });
  rtl.createClass($mod,"TPasImplIfElse",$mod.TPasImplBlock,function () {
    this.$init = function () {
      $mod.TPasImplBlock.$init.call(this);
      this.ConditionExpr = null;
      this.IfBranch = null;
      this.ElseBranch = null;
    };
    this.$final = function () {
      this.ConditionExpr = undefined;
      this.IfBranch = undefined;
      this.ElseBranch = undefined;
      $mod.TPasImplBlock.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ConditionExpr;
        }, set: function (v) {
          this.p.ConditionExpr = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.IfBranch;
        }, set: function (v) {
          this.p.IfBranch = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ElseBranch;
        }, set: function (v) {
          this.p.ElseBranch = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.AddElement = function (Element) {
      $mod.TPasImplBlock.AddElement.call(this,Element);
      if (this.IfBranch === null) {
        this.IfBranch = Element;
        Element.AddRef();
      } else if (this.ElseBranch === null) {
        this.ElseBranch = Element;
        Element.AddRef();
      } else throw pas.SysUtils.Exception.$create("Create$1",["TPasImplIfElse.AddElement if and else already set - please report this bug"]);
    };
    this.CloseOnSemicolon = function () {
      var Result = false;
      Result = this.ElseBranch !== null;
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      this.ForEachChildCall(aMethodCall,Arg,this.ConditionExpr,false);
      if (this.Elements.IndexOf(this.IfBranch) < 0) this.ForEachChildCall(aMethodCall,Arg,this.IfBranch,false);
      if (this.Elements.IndexOf(this.ElseBranch) < 0) this.ForEachChildCall(aMethodCall,Arg,this.ElseBranch,false);
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
    };
    this.Condition = function () {
      var Result = "";
      if (this.ConditionExpr != null) Result = this.ConditionExpr.GetDeclaration(true);
      return Result;
    };
  });
  rtl.createClass($mod,"TPasImplWhileDo",$mod.TPasImplStatement,function () {
    this.$init = function () {
      $mod.TPasImplStatement.$init.call(this);
      this.ConditionExpr = null;
      this.Body = null;
    };
    this.$final = function () {
      this.ConditionExpr = undefined;
      this.Body = undefined;
      $mod.TPasImplStatement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ConditionExpr;
        }, set: function (v) {
          this.p.ConditionExpr = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Body;
        }, set: function (v) {
          this.p.Body = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.AddElement = function (Element) {
      $mod.TPasImplBlock.AddElement.call(this,Element);
      if (this.Body === null) {
        this.Body = Element;
        this.Body.AddRef();
      } else throw pas.SysUtils.Exception.$create("Create$1",["TPasImplWhileDo.AddElement body already set"]);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      this.ForEachChildCall(aMethodCall,Arg,this.ConditionExpr,false);
      if (this.Elements.IndexOf(this.Body) < 0) this.ForEachChildCall(aMethodCall,Arg,this.Body,false);
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
    };
    this.Condition = function () {
      var Result = "";
      if (this.ConditionExpr != null) Result = this.ConditionExpr.GetDeclaration(true);
      return Result;
    };
  });
  rtl.createClass($mod,"TPasImplWithDo",$mod.TPasImplStatement,function () {
    this.$init = function () {
      $mod.TPasImplStatement.$init.call(this);
      this.Expressions = null;
      this.Body = null;
    };
    this.$final = function () {
      this.Expressions = undefined;
      this.Body = undefined;
      $mod.TPasImplStatement.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasImplBlock.Create$1.call(this,AName,AParent);
      this.Expressions = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var I = 0;
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Body;
        }, set: function (v) {
          this.p.Body = v;
        }});
      for (var $l1 = 0, $end2 = this.Expressions.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        rtl.getObject(this.Expressions.Get(I)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Expressions;
        }, set: function (v) {
          this.p.Expressions = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.AddElement = function (Element) {
      $mod.TPasImplBlock.AddElement.call(this,Element);
      if (this.Body === null) {
        this.Body = Element;
        this.Body.AddRef();
      } else throw pas.SysUtils.Exception.$create("Create$1",["TPasImplWithDo.AddElement body already set"]);
    };
    this.AddExpression = function (Expression) {
      this.Expressions.Add(Expression);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      for (var $l1 = 0, $end2 = this.Expressions.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Expressions.Get(i)),false);
      };
      if (this.Elements.IndexOf(this.Body) < 0) this.ForEachChildCall(aMethodCall,Arg,this.Body,false);
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
    };
  });
  $mod.$rtti.$Class("TPasImplCaseStatement");
  $mod.$rtti.$Class("TPasImplCaseElse");
  rtl.createClass($mod,"TPasImplCaseOf",$mod.TPasImplBlock,function () {
    this.$init = function () {
      $mod.TPasImplBlock.$init.call(this);
      this.CaseExpr = null;
      this.ElseBranch = null;
    };
    this.$final = function () {
      this.CaseExpr = undefined;
      this.ElseBranch = undefined;
      $mod.TPasImplBlock.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.CaseExpr;
        }, set: function (v) {
          this.p.CaseExpr = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ElseBranch;
        }, set: function (v) {
          this.p.ElseBranch = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.AddElement = function (Element) {
      if ((this.ElseBranch !== null) && (Element === this.ElseBranch)) this.ElseBranch.AddRef();
      $mod.TPasImplBlock.AddElement.call(this,Element);
    };
    this.AddCase = function (Expression) {
      var Result = null;
      Result = $mod.TPasImplCaseStatement.$create("Create$1",["",this]);
      Result.AddExpression(Expression);
      this.AddElement(Result);
      return Result;
    };
    this.AddElse = function () {
      var Result = null;
      Result = $mod.TPasImplCaseElse.$create("Create$1",["",this]);
      this.ElseBranch = Result;
      this.AddElement(Result);
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      this.ForEachChildCall(aMethodCall,Arg,this.CaseExpr,false);
      if (this.Elements.IndexOf(this.ElseBranch) < 0) this.ForEachChildCall(aMethodCall,Arg,this.ElseBranch,false);
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
    };
    this.Expression = function () {
      var Result = "";
      if (this.CaseExpr != null) {
        Result = this.CaseExpr.GetDeclaration(true)}
       else Result = "";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasImplCaseStatement",$mod.TPasImplStatement,function () {
    this.$init = function () {
      $mod.TPasImplStatement.$init.call(this);
      this.Expressions = null;
      this.Body = null;
    };
    this.$final = function () {
      this.Expressions = undefined;
      this.Body = undefined;
      $mod.TPasImplStatement.$final.call(this);
    };
    this.Create$1 = function (AName, AParent) {
      $mod.TPasImplBlock.Create$1.call(this,AName,AParent);
      this.Expressions = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var I = 0;
      for (var $l1 = 0, $end2 = this.Expressions.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        rtl.getObject(this.Expressions.Get(I)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Expressions;
        }, set: function (v) {
          this.p.Expressions = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Body;
        }, set: function (v) {
          this.p.Body = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.AddElement = function (Element) {
      $mod.TPasImplBlock.AddElement.call(this,Element);
      if (this.Body === null) {
        this.Body = Element;
        this.Body.AddRef();
      } else throw pas.SysUtils.Exception.$create("Create$1",["TPasImplCaseStatement.AddElement body already set"]);
    };
    this.AddExpression = function (Expr) {
      this.Expressions.Add(Expr);
      Expr.SetParent(this);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      var i = 0;
      for (var $l1 = 0, $end2 = this.Expressions.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ForEachChildCall(aMethodCall,Arg,rtl.getObject(this.Expressions.Get(i)),false);
      };
      if (this.Elements.IndexOf(this.Body) < 0) this.ForEachChildCall(aMethodCall,Arg,this.Body,false);
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
    };
  });
  rtl.createClass($mod,"TPasImplCaseElse",$mod.TPasImplBlock,function () {
  });
  this.TLoopType = {"0": "ltNormal", ltNormal: 0, "1": "ltDown", ltDown: 1, "2": "ltIn", ltIn: 2};
  rtl.createClass($mod,"TPasImplForLoop",$mod.TPasImplStatement,function () {
    this.$init = function () {
      $mod.TPasImplStatement.$init.call(this);
      this.VariableName = null;
      this.LoopType = 0;
      this.StartExpr = null;
      this.EndExpr = null;
      this.Body = null;
      this.Variable = null;
    };
    this.$final = function () {
      this.VariableName = undefined;
      this.StartExpr = undefined;
      this.EndExpr = undefined;
      this.Body = undefined;
      this.Variable = undefined;
      $mod.TPasImplStatement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.VariableName;
        }, set: function (v) {
          this.p.VariableName = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.StartExpr;
        }, set: function (v) {
          this.p.StartExpr = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.EndExpr;
        }, set: function (v) {
          this.p.EndExpr = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Variable;
        }, set: function (v) {
          this.p.Variable = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Body;
        }, set: function (v) {
          this.p.Body = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.AddElement = function (Element) {
      $mod.TPasImplBlock.AddElement.call(this,Element);
      if (this.Body === null) {
        this.Body = Element;
        this.Body.AddRef();
      } else throw pas.SysUtils.Exception.$create("Create$1",["TPasImplForLoop.AddElement body already set - please report this bug"]);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      this.ForEachChildCall(aMethodCall,Arg,this.VariableName,false);
      this.ForEachChildCall(aMethodCall,Arg,this.Variable,false);
      this.ForEachChildCall(aMethodCall,Arg,this.StartExpr,false);
      this.ForEachChildCall(aMethodCall,Arg,this.EndExpr,false);
      if (this.Elements.IndexOf(this.Body) < 0) this.ForEachChildCall(aMethodCall,Arg,this.Body,false);
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
    };
    this.Down = function () {
      var Result = false;
      Result = this.LoopType === $mod.TLoopType.ltDown;
      return Result;
    };
    this.StartValue = function () {
      var Result = "";
      if (this.StartExpr != null) {
        Result = this.StartExpr.GetDeclaration(true)}
       else Result = "";
      return Result;
    };
    this.EndValue = function () {
      var Result = "";
      if (this.EndExpr != null) {
        Result = this.EndExpr.GetDeclaration(true)}
       else Result = "";
      return Result;
    };
  });
  this.TAssignKind = {"0": "akDefault", akDefault: 0, "1": "akAdd", akAdd: 1, "2": "akMinus", akMinus: 2, "3": "akMul", akMul: 3, "4": "akDivision", akDivision: 4};
  rtl.createClass($mod,"TPasImplAssign",$mod.TPasImplStatement,function () {
    this.$init = function () {
      $mod.TPasImplStatement.$init.call(this);
      this.left = null;
      this.right = null;
      this.Kind = 0;
    };
    this.$final = function () {
      this.left = undefined;
      this.right = undefined;
      $mod.TPasImplStatement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.left;
        }, set: function (v) {
          this.p.left = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.right;
        }, set: function (v) {
          this.p.right = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.left,false);
      this.ForEachChildCall(aMethodCall,Arg,this.right,false);
    };
  });
  rtl.createClass($mod,"TPasImplSimple",$mod.TPasImplStatement,function () {
    this.$init = function () {
      $mod.TPasImplStatement.$init.call(this);
      this.Expr = null;
    };
    this.$final = function () {
      this.Expr = undefined;
      $mod.TPasImplStatement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Expr;
        }, set: function (v) {
          this.p.Expr = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.Expr,false);
    };
  });
  $mod.$rtti.$Class("TPasImplTryHandler");
  $mod.$rtti.$Class("TPasImplTryFinally");
  $mod.$rtti.$Class("TPasImplTryExcept");
  $mod.$rtti.$Class("TPasImplTryExceptElse");
  rtl.createClass($mod,"TPasImplTry",$mod.TPasImplBlock,function () {
    this.$init = function () {
      $mod.TPasImplBlock.$init.call(this);
      this.FinallyExcept = null;
      this.ElseBranch = null;
    };
    this.$final = function () {
      this.FinallyExcept = undefined;
      this.ElseBranch = undefined;
      $mod.TPasImplBlock.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.FinallyExcept;
        }, set: function (v) {
          this.p.FinallyExcept = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ElseBranch;
        }, set: function (v) {
          this.p.ElseBranch = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.AddFinally = function () {
      var Result = null;
      Result = $mod.TPasImplTryFinally.$create("Create$1",["",this]);
      this.FinallyExcept = Result;
      return Result;
    };
    this.AddExcept = function () {
      var Result = null;
      Result = $mod.TPasImplTryExcept.$create("Create$1",["",this]);
      this.FinallyExcept = Result;
      return Result;
    };
    this.AddExceptElse = function () {
      var Result = null;
      Result = $mod.TPasImplTryExceptElse.$create("Create$1",["",this]);
      this.ElseBranch = Result;
      return Result;
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.FinallyExcept,false);
      this.ForEachChildCall(aMethodCall,Arg,this.ElseBranch,false);
    };
  });
  rtl.createClass($mod,"TPasImplTryHandler",$mod.TPasImplBlock,function () {
  });
  rtl.createClass($mod,"TPasImplTryFinally",$mod.TPasImplTryHandler,function () {
  });
  rtl.createClass($mod,"TPasImplTryExcept",$mod.TPasImplTryHandler,function () {
  });
  rtl.createClass($mod,"TPasImplTryExceptElse",$mod.TPasImplTryHandler,function () {
  });
  rtl.createClass($mod,"TPasImplExceptOn",$mod.TPasImplStatement,function () {
    this.$init = function () {
      $mod.TPasImplStatement.$init.call(this);
      this.VarEl = null;
      this.TypeEl = null;
      this.Body = null;
    };
    this.$final = function () {
      this.VarEl = undefined;
      this.TypeEl = undefined;
      this.Body = undefined;
      $mod.TPasImplStatement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.VarEl;
        }, set: function (v) {
          this.p.VarEl = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.TypeEl;
        }, set: function (v) {
          this.p.TypeEl = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.Body;
        }, set: function (v) {
          this.p.Body = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.AddElement = function (Element) {
      $mod.TPasImplBlock.AddElement.call(this,Element);
      if (this.Body === null) {
        this.Body = Element;
        this.Body.AddRef();
      };
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      this.ForEachChildCall(aMethodCall,Arg,this.VarEl,false);
      this.ForEachChildCall(aMethodCall,Arg,this.TypeEl,true);
      if (this.Elements.IndexOf(this.Body) < 0) this.ForEachChildCall(aMethodCall,Arg,this.Body,false);
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
    };
    this.ClearTypeReferences = function (aType) {
      if (this.TypeEl === aType) $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.TypeEl;
        }, set: function (v) {
          this.p.TypeEl = v;
        }});
    };
    this.VariableName = function () {
      var Result = "";
      if (this.VarEl != null) {
        Result = this.VarEl.FName}
       else Result = "";
      return Result;
    };
    this.TypeName = function () {
      var Result = "";
      if (this.TypeEl != null) {
        Result = this.TypeEl.GetDeclaration(true)}
       else Result = "";
      return Result;
    };
  });
  rtl.createClass($mod,"TPasImplRaise",$mod.TPasImplStatement,function () {
    this.$init = function () {
      $mod.TPasImplStatement.$init.call(this);
      this.ExceptObject = null;
      this.ExceptAddr = null;
    };
    this.$final = function () {
      this.ExceptObject = undefined;
      this.ExceptAddr = undefined;
      $mod.TPasImplStatement.$final.call(this);
    };
    this.Destroy = function () {
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ExceptObject;
        }, set: function (v) {
          this.p.ExceptObject = v;
        }});
      $mod.ReleaseAndNil({p: this, get: function () {
          return this.p.ExceptAddr;
        }, set: function (v) {
          this.p.ExceptAddr = v;
        }});
      $mod.TPasImplBlock.Destroy.call(this);
    };
    this.ForEachCall = function (aMethodCall, Arg) {
      $mod.TPasImplBlock.ForEachCall.call(this,aMethodCall,Arg);
      this.ForEachChildCall(aMethodCall,Arg,this.ExceptObject,false);
      this.ForEachChildCall(aMethodCall,Arg,this.ExceptAddr,false);
    };
  });
  rtl.createClass($mod,"TPasImplLabelMark",$mod.TPasImplElement,function () {
    this.$init = function () {
      $mod.TPasImplElement.$init.call(this);
      this.LabelId = "";
    };
  });
  rtl.createClass($mod,"TPassTreeVisitor",pas.System.TObject,function () {
    this.Visit = function (obj) {
      if (obj === null) ;
    };
  });
  this.AccessNames = ["","const ","var ","out ","constref "];
  this.AccessDescriptions = ["default","const","var","out","constref"];
  this.AllVisibilities = rtl.createSet($mod.TPasMemberVisibility.visDefault,$mod.TPasMemberVisibility.visPrivate,$mod.TPasMemberVisibility.visProtected,$mod.TPasMemberVisibility.visPublic,$mod.TPasMemberVisibility.visPublished,$mod.TPasMemberVisibility.visAutomated);
  this.VisibilityNames = ["default","private","protected","public","published","automated","strict private","strict protected"];
  this.ObjKindNames = ["object","class","interface","class","class helper","record helper","type helper","dispinterface"];
  this.InterfaceTypeNames = ["COM","Corba"];
  this.ExprKindNames = ["Ident","Number","String","Set","Nil","BoolConst","Range","Unary","Binary","FuncParams","ArrayParams","ListOfExp","Inherited","Self","Specialize"];
  this.OpcodeStrings = ["","+","-","*","\/","div","mod","**","shr","shl","not","and","or","xor","=","<>","<",">","<=",">=","in","is","as","><","@","^","@@","."];
  this.UnaryOperators = rtl.createSet($mod.TOperatorType.otImplicit,$mod.TOperatorType.otExplicit,$mod.TOperatorType.otAssign,$mod.TOperatorType.otNegative,$mod.TOperatorType.otPositive,$mod.TOperatorType.otEnumerator);
  this.OperatorTokens = ["","","","*","+","-","\/","<","=",">",":=","<>","<=",">=","**","><","Inc","Dec","mod","-","+","Or","div","shl","or","and","xor","and","not","xor","shr","enumerator"];
  this.OperatorNames = ["","implicit","explicit","multiply","add","subtract","divide","lessthan","equal","greaterthan","assign","notequal","lessthanorequal","greaterthanorequal","power","symmetricaldifference","inc","dec","modulus","negative","positive","bitwiseor","intdivide","leftshift","logicalor","bitwiseand","bitwisexor","logicaland","logicalnot","logicalxor","rightshift","enumerator"];
  this.AssignKindNames = [":=","+=","-=","*=","\/="];
  this.cPasMemberHint = ["deprecated","library","platform","experimental","unimplemented"];
  this.cCallingConventions = ["","Register","Pascal","CDecl","StdCall","OldFPCCall","SafeCall","SysCall"];
  this.ProcTypeModifiers = ["of Object","is nested","static","varargs","reference to"];
  this.ModifierNames = ["virtual","dynamic","abstract","override","export","overload","message","reintroduce","inline","assembler","public","compilerproc","external","forward","dispid","noreturn","far","final"];
  this.VariableModifierNames = ["cvar","external","public","export","class","static"];
  this.ReleaseAndNil = function (El) {
    if (El.get() === null) return;
    El.get().Release();
    El.set(null);
  };
  $mod.$resourcestrings = {SPasTreeElement: {org: "generic element"}, SPasTreeSection: {org: "unit section"}, SPasTreeProgramSection: {org: "program section"}, SPasTreeLibrarySection: {org: "library section"}, SPasTreeInterfaceSection: {org: "interface section"}, SPasTreeImplementationSection: {org: "implementation section"}, SPasTreeUsesUnit: {org: "uses unit"}, SPasTreeModule: {org: "module"}, SPasTreeUnit: {org: "unit"}, SPasTreeProgram: {org: "program"}, SPasTreePackage: {org: "package"}, SPasTreeResString: {org: "resource string"}, SPasTreeType: {org: "generic type"}, SPasTreePointerType: {org: "pointer type"}, SPasTreeAliasType: {org: "alias type"}, SPasTreeTypeAliasType: {org: '"type" alias type'}, SPasTreeClassOfType: {org: '"class of" type'}, SPasTreeRangeType: {org: "range type"}, SPasTreeArrayType: {org: "array type"}, SPasTreeFileType: {org: "file type"}, SPasTreeEnumValue: {org: "enumeration value"}, SPasTreeEnumType: {org: "enumeration type"}, SPasTreeSetType: {org: "set type"}, SPasTreeRecordType: {org: "record type"}, SPasStringType: {org: "string type"}, SPasTreeObjectType: {org: "object"}, SPasTreeClassType: {org: "class"}, SPasTreeInterfaceType: {org: "interface"}, SPasTreeGenericType: {org: "generic class"}, SPasTreeSpecializedType: {org: "specialized class type"}, SPasClassHelperType: {org: "Class helper type"}, SPasRecordHelperType: {org: "Record helper type"}, SPasTreeArgument: {org: "argument"}, SPasTreeProcedureType: {org: "procedure type"}, SPasTreeResultElement: {org: "function result"}, SPasTreeConstructorType: {org: "constructor type"}, SPasTreeDestructorType: {org: "destructor type"}, SPasTreeFunctionType: {org: "function type"}, SPasTreeUnresolvedTypeRef: {org: "unresolved type reference"}, SPasTreeVariable: {org: "variable"}, SPasTreeConst: {org: "constant"}, SPasTreeProperty: {org: "property"}, SPasTreeOverloadedProcedure: {org: "overloaded procedure"}, SPasTreeProcedure: {org: "procedure"}, SPasTreeFunction: {org: "function"}, SPasTreeOperator: {org: "operator"}, SPasTreeClassOperator: {org: "class operator"}, SPasTreeClassProcedure: {org: "class procedure"}, SPasTreeClassFunction: {org: "class function"}, SPasTreeClassConstructor: {org: "class constructor"}, SPasTreeClassDestructor: {org: "class destructor"}, SPasTreeConstructor: {org: "constructor"}, SPasTreeDestructor: {org: "destructor"}, SPasTreeProcedureImpl: {org: "procedure\/function implementation"}, SPasTreeConstructorImpl: {org: "constructor implementation"}, SPasTreeDestructorImpl: {org: "destructor implementation"}};
},["SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.IndentStrings = function (S, indent) {
    var Result = "";
    var I = 0;
    var CurrLen = 0;
    var CurrPos = 0;
    Result = "";
    CurrLen = 0;
    CurrPos = 0;
    for (var $l1 = 0, $end2 = S.GetCount() - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      CurrLen = S.Get(I).length;
      if ((CurrLen + CurrPos) > 72) {
        Result = (Result + pas.System.LineEnding) + pas.System.StringOfChar(" ",indent);
        CurrPos = indent;
      };
      Result = Result + S.Get(I);
      CurrPos = CurrPos + CurrLen;
    };
    return Result;
  };
});
rtl.module("PasResolveEval",["System","SysUtils","Math","PasTree","PScanner"],function () {
  "use strict";
  var $mod = this;
  this.nIdentifierNotFound = 3001;
  this.nNotYetImplemented = 3002;
  this.nIllegalQualifier = 3003;
  this.nSyntaxErrorExpectedButFound = 3004;
  this.nWrongNumberOfParametersForCallTo = 3005;
  this.nIncompatibleTypeArgNo = 3006;
  this.nIncompatibleTypeArgNoVarParamMustMatchExactly = 3007;
  this.nVariableIdentifierExpected = 3008;
  this.nDuplicateIdentifier = 3009;
  this.nXExpectedButYFound = 3010;
  this.nAncestorCycleDetected = 3011;
  this.nCantUseForwardDeclarationAsAncestor = 3012;
  this.nCantDetermineWhichOverloadedFunctionToCall = 3013;
  this.nForwardTypeNotResolved = 3014;
  this.nForwardProcNotResolved = 3015;
  this.nInvalidXModifierY = 3016;
  this.nAbstractMethodsMustNotHaveImplementation = 3017;
  this.nCallingConventionMismatch = 3018;
  this.nResultTypeMismatchExpectedButFound = 3019;
  this.nFunctionHeaderMismatchForwardVarName = 3020;
  this.nFunctionHidesIdentifier_NonVirtualMethod = 3021;
  this.nNoMethodInAncestorToOverride = 3022;
  this.nInheritedOnlyWorksInMethods = 3023;
  this.nInheritedNeedsAncestor = 3024;
  this.nNoPropertyFoundToOverride = 3025;
  this.nExprTypeMustBeClassOrRecordTypeGot = 3026;
  this.nPropertyNotWritable = 3027;
  this.nIncompatibleTypesGotExpected = 3028;
  this.nTypesAreNotRelatedXY = 3029;
  this.nAbstractMethodsCannotBeCalledDirectly = 3030;
  this.nMissingParameterX = 3031;
  this.nCannotAccessThisMemberFromAX = 3032;
  this.nInOperatorExpectsSetElementButGot = 3033;
  this.nWrongNumberOfParametersForTypeCast = 3034;
  this.nIllegalTypeConversionTo = 3035;
  this.nConstantExpressionExpected = 3036;
  this.nLeftSideOfIsOperatorExpectsAClassButGot = 3037;
  this.nNotReadable = 3038;
  this.nClassPropertyAccessorMustBeStatic = 3039;
  this.nClassPropertyAccessorMustNotBeStatic = 3040;
  this.nOnlyOneDefaultPropertyIsAllowed = 3041;
  this.nWrongNumberOfParametersForArray = 3042;
  this.nCantAssignValuesToAnAddress = 3043;
  this.nIllegalExpression = 3044;
  this.nCantAccessPrivateMember = 3045;
  this.nMustBeInsideALoop = 3046;
  this.nExpectXArrayElementsButFoundY = 3047;
  this.nCannotCreateADescendantOfTheSealedXY = 3048;
  this.nAncestorIsNotExternal = 3049;
  this.nPropertyMustHaveReadOrWrite = 3050;
  this.nExternalClassInstanceCannotAccessStaticX = 3051;
  this.nXModifierMismatchY = 3052;
  this.nSymbolCannotBePublished = 3053;
  this.nCannotTypecastAType = 3054;
  this.nTypeIdentifierExpected = 3055;
  this.nCannotNestAnonymousX = 3056;
  this.nFoundCallCandidateX = 3057;
  this.nTextAfterFinalIgnored = 3058;
  this.nNoMemberIsProvidedToAccessProperty = 3059;
  this.nRangeCheckError = 3064;
  this.nHighRangeLimitLTLowRangeLimit = 3065;
  this.nRangeCheckEvaluatingConstantsVMinMax = 3066;
  this.nIllegalChar = 3067;
  this.nOverflowInArithmeticOperation = 3068;
  this.nDivByZero = 3069;
  this.nRangeCheckInSetConstructor = 3070;
  this.nIncompatibleTypesGotParametersExpected = 3071;
  this.nAddingIndexSpecifierRequiresNewX = 3072;
  this.nCantFindUnitX = 3073;
  this.nCannotFindEnumeratorForType = 3074;
  this.nPreviousDeclMissesOverload = 3075;
  this.nOverloadedProcMissesOverload = 3076;
  this.nMethodHidesMethodOfBaseType = 3077;
  this.nContextExpectedXButFoundY = 3078;
  this.nContextXInvalidY = 3079;
  this.nXIsNotSupported = 3081;
  this.nOperatorIsNotOverloadedAOpB = 3082;
  this.nIllegalQualifierAfter = 3084;
  this.nIllegalQualifierInFrontOf = 3085;
  this.nIllegalQualifierWithin = 3086;
  this.nMethodClassXInOtherUnitY = 3087;
  this.nCannotMixMethodResolutionAndDelegationAtX = 3089;
  this.nImplementsDoesNotSupportArrayProperty = 3101;
  this.nImplementsDoesNotSupportIndex = 3102;
  this.nImplementsUsedOnUnimplIntf = 3103;
  this.nDuplicateImplementsForIntf = 3103;
  this.nImplPropMustHaveReadSpec = 3104;
  this.nDoesNotImplementInterface = 3105;
  this.nTypeCycleFound = 3106;
  this.nTypeXIsNotYetCompletelyDefined = 3107;
  this.nDuplicateCaseValueXatY = 3108;
  this.nMissingFieldsX = 3109;
  this.nCantAssignValuesToConstVariable = 3110;
  this.nIllegalAssignmentToForLoopVar = 3111;
  this.nFunctionHidesIdentifier_NonProc = 3112;
  this.nVirtualMethodXHasLowerVisibility = 3250;
  this.nConstructingClassXWithAbstractMethodY = 4046;
  this.nNoMatchingImplForIntfMethodXFound = 5042;
  this.nSymbolXIsDeprecated = 5043;
  this.nSymbolXBelongsToALibrary = 5065;
  this.nSymbolXIsDeprecatedY = 5066;
  this.nSymbolXIsNotPortable = 5076;
  this.nSymbolXIsNotImplemented = 5078;
  this.nSymbolXIsExperimental = 5079;
  rtl.createClass($mod,"TResolveData",pas.PasTree.TPasElementBase,function () {
    this.$init = function () {
      pas.PasTree.TPasElementBase.$init.call(this);
      this.FElement = null;
      this.Owner = null;
      this.Next = null;
    };
    this.$final = function () {
      this.FElement = undefined;
      this.Owner = undefined;
      this.Next = undefined;
      pas.PasTree.TPasElementBase.$final.call(this);
    };
    this.SetElement = function (AValue) {
      if (this.FElement === AValue) return;
      if (this.FElement !== null) this.FElement.Release();
      this.FElement = AValue;
      if (this.FElement !== null) this.FElement.AddRef();
    };
    this.Create$1 = function () {
    };
    this.Destroy = function () {
      this.SetElement(null);
      this.Owner = null;
      this.Next = null;
      pas.System.TObject.Destroy.call(this);
    };
  });
  $mod.$rtti.$ClassRef("TResolveDataClass",{instancetype: $mod.$rtti["TResolveData"]});
  this.HighIntAsUInt = 4503599627370495;
  this.MinSafeIntCurrency = -922337203685477;
  this.MaxSafeIntCurrency = 922337203685477;
  this.MinSafeIntSingle = -16777216;
  this.MaxSafeIntSingle = 16777216;
  this.MaskUIntSingle = 0x3fffff;
  this.MinSafeIntDouble = -0x10000000000000;
  this.MaxSafeIntDouble = 0xfffffffffffff;
  this.MaskUIntDouble = 0xfffffffffffff;
  this.TREVKind = {"0": "revkNone", revkNone: 0, "1": "revkCustom", revkCustom: 1, "2": "revkNil", revkNil: 2, "3": "revkBool", revkBool: 3, "4": "revkInt", revkInt: 4, "5": "revkUInt", revkUInt: 5, "6": "revkFloat", revkFloat: 6, "7": "revkCurrency", revkCurrency: 7, "8": "revkUnicodeString", revkUnicodeString: 8, "9": "revkEnum", revkEnum: 9, "10": "revkRangeInt", revkRangeInt: 10, "11": "revkRangeUInt", revkRangeUInt: 11, "12": "revkSetOfInt", revkSetOfInt: 12, "13": "revkExternal", revkExternal: 13};
  $mod.$rtti.$Enum("TREVKind",{minvalue: 0, maxvalue: 13, ordtype: 1, enumtype: this.TREVKind});
  this.revkAllStrings = rtl.createSet($mod.TREVKind.revkUnicodeString);
  rtl.createClass($mod,"TResEvalValue",$mod.TResolveData,function () {
    this.$init = function () {
      $mod.TResolveData.$init.call(this);
      this.Kind = 0;
      this.IdentEl = null;
    };
    this.$final = function () {
      this.IdentEl = undefined;
      $mod.TResolveData.$final.call(this);
    };
    this.CreateKind = function (aKind) {
      this.Create$1();
      this.Kind = aKind;
    };
    this.Clone = function () {
      var Result = null;
      Result = this.$class.ClassType().$create("Create$1");
      Result.Kind = this.Kind;
      Result.IdentEl = this.IdentEl;
      return Result;
    };
    this.AsDebugString = function () {
      var Result = "";
      Result = $mod.TREVKind[this.Kind];
      Result = (Result + "=") + this.AsString();
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      var $tmp1 = this.Kind;
      if ($tmp1 === $mod.TREVKind.revkNone) {
        Result = "<None>"}
       else if ($tmp1 === $mod.TREVKind.revkNil) {
        Result = "nil"}
       else {
        Result = $mod.TREVKind[this.Kind];
      };
      return Result;
    };
  });
  rtl.createClass($mod,"TResEvalBool",$mod.TResEvalValue,function () {
    this.$init = function () {
      $mod.TResEvalValue.$init.call(this);
      this.B = false;
    };
    this.Create$1 = function () {
      $mod.TResolveData.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkBool;
    };
    this.CreateValue = function (aValue) {
      this.Create$1();
      this.B = aValue;
    };
    this.Clone = function () {
      var Result = null;
      Result = $mod.TResEvalValue.Clone.call(this);
      Result.B = this.B;
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      if (this.B) {
        Result = "true"}
       else Result = "false";
      return Result;
    };
  });
  this.TResEvalTypedInt = {"0": "reitNone", reitNone: 0, "1": "reitByte", reitByte: 1, "2": "reitShortInt", reitShortInt: 2, "3": "reitWord", reitWord: 3, "4": "reitSmallInt", reitSmallInt: 4, "5": "reitUIntSingle", reitUIntSingle: 5, "6": "reitIntSingle", reitIntSingle: 6, "7": "reitLongWord", reitLongWord: 7, "8": "reitLongInt", reitLongInt: 8, "9": "reitUIntDouble", reitUIntDouble: 9, "10": "reitIntDouble", reitIntDouble: 10};
  $mod.$rtti.$Enum("TResEvalTypedInt",{minvalue: 0, maxvalue: 10, ordtype: 1, enumtype: this.TResEvalTypedInt});
  $mod.$rtti.$Set("TResEvalTypedInts",{comptype: $mod.$rtti["TResEvalTypedInt"]});
  this.reitDefaults = rtl.createSet($mod.TResEvalTypedInt.reitNone,$mod.TResEvalTypedInt.reitByte,$mod.TResEvalTypedInt.reitShortInt,$mod.TResEvalTypedInt.reitWord,$mod.TResEvalTypedInt.reitSmallInt,$mod.TResEvalTypedInt.reitLongWord,$mod.TResEvalTypedInt.reitLongInt);
  this.reitAllSigned = rtl.createSet($mod.TResEvalTypedInt.reitNone,$mod.TResEvalTypedInt.reitShortInt,$mod.TResEvalTypedInt.reitSmallInt,$mod.TResEvalTypedInt.reitIntSingle,$mod.TResEvalTypedInt.reitLongInt,$mod.TResEvalTypedInt.reitIntDouble);
  this.reitAllUnsigned = rtl.createSet($mod.TResEvalTypedInt.reitByte,$mod.TResEvalTypedInt.reitWord,$mod.TResEvalTypedInt.reitUIntSingle,$mod.TResEvalTypedInt.reitLongWord,$mod.TResEvalTypedInt.reitUIntDouble);
  this.reitLow = [-4503599627370496,0,-128,0,-32768,0,-16777216,0,-2147483648,0,-4503599627370496];
  this.reitHigh = [4503599627370495,255,127,65535,32767,16777216,16777216,4294967295,2147483647,4503599627370495,4503599627370495];
  rtl.createClass($mod,"TResEvalInt",$mod.TResEvalValue,function () {
    this.$init = function () {
      $mod.TResEvalValue.$init.call(this);
      this.Int = 0;
      this.Typed = 0;
    };
    this.Create$1 = function () {
      $mod.TResolveData.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkInt;
    };
    this.CreateValue = function (aValue) {
      this.Create$1();
      this.Int = aValue;
    };
    this.CreateValue$1 = function (aValue, aTyped) {
      this.Create$1();
      this.Int = aValue;
      this.Typed = aTyped;
    };
    this.Clone = function () {
      var Result = null;
      Result = $mod.TResEvalValue.Clone.call(this);
      Result.Int = this.Int;
      Result.Typed = this.Typed;
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      Result = pas.SysUtils.IntToStr(this.Int);
      return Result;
    };
    this.AsDebugString = function () {
      var Result = "";
      if (this.Typed === $mod.TResEvalTypedInt.reitNone) {
        Result = $mod.TResEvalValue.AsDebugString.call(this)}
       else {
        Result = $mod.TREVKind[this.Kind];
        var $tmp1 = this.Typed;
        if ($tmp1 === $mod.TResEvalTypedInt.reitByte) {
          Result = Result + ":byte"}
         else if ($tmp1 === $mod.TResEvalTypedInt.reitShortInt) {
          Result = Result + ":shortint"}
         else if ($tmp1 === $mod.TResEvalTypedInt.reitWord) {
          Result = Result + ":word"}
         else if ($tmp1 === $mod.TResEvalTypedInt.reitSmallInt) {
          Result = Result + ":smallint"}
         else if ($tmp1 === $mod.TResEvalTypedInt.reitUIntSingle) {
          Result = Result + ":uintsingle"}
         else if ($tmp1 === $mod.TResEvalTypedInt.reitIntSingle) {
          Result = Result + ":intsingle"}
         else if ($tmp1 === $mod.TResEvalTypedInt.reitLongWord) {
          Result = Result + ":longword"}
         else if ($tmp1 === $mod.TResEvalTypedInt.reitLongInt) {
          Result = Result + ":longint"}
         else if ($tmp1 === $mod.TResEvalTypedInt.reitUIntDouble) {
          Result = Result + ":uintdouble"}
         else if ($tmp1 === $mod.TResEvalTypedInt.reitIntDouble) Result = Result + ":intdouble";
        Result = (Result + "=") + this.AsString();
      };
      return Result;
    };
  });
  rtl.createClass($mod,"TResEvalUInt",$mod.TResEvalValue,function () {
    this.$init = function () {
      $mod.TResEvalValue.$init.call(this);
      this.UInt = 0;
    };
    this.Create$1 = function () {
      $mod.TResolveData.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkUInt;
    };
    this.CreateValue = function (aValue) {
      this.Create$1();
      this.UInt = aValue;
    };
    this.Clone = function () {
      var Result = null;
      Result = $mod.TResEvalValue.Clone.call(this);
      Result.UInt = this.UInt;
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      Result = pas.SysUtils.IntToStr(this.UInt);
      return Result;
    };
  });
  rtl.createClass($mod,"TResEvalFloat",$mod.TResEvalValue,function () {
    this.$init = function () {
      $mod.TResEvalValue.$init.call(this);
      this.FloatValue = 0.0;
    };
    this.Create$1 = function () {
      $mod.TResolveData.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkFloat;
    };
    this.CreateValue = function (aValue) {
      this.Create$1();
      this.FloatValue = aValue;
    };
    this.Clone = function () {
      var Result = null;
      Result = $mod.TResEvalValue.Clone.call(this);
      Result.FloatValue = this.FloatValue;
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      Result = rtl.floatToStr(this.FloatValue);
      return Result;
    };
    this.IsInt = function (Int) {
      var Result = false;
      Int.set(0);
      if (pas.System.Frac(this.FloatValue) !== 0) return false;
      if (this.FloatValue < -4503599627370496) return false;
      if (this.FloatValue > 4503599627370495) return false;
      Int.set(pas.System.Trunc(this.FloatValue));
      Result = true;
      return Result;
    };
  });
  rtl.createClass($mod,"TResEvalCurrency",$mod.TResEvalValue,function () {
    this.$init = function () {
      $mod.TResEvalValue.$init.call(this);
      this.Value = 0;
    };
    this.Create$1 = function () {
      $mod.TResolveData.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkCurrency;
    };
    this.CreateValue = function (aValue) {
      this.Create$1();
      this.Value = aValue;
    };
    this.Clone = function () {
      var Result = null;
      Result = $mod.TResEvalValue.Clone.call(this);
      Result.Value = this.Value;
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      Result = rtl.floatToStr(this.Value / 10000);
      return Result;
    };
    this.IsInt = function (Int) {
      var Result = false;
      var i = 0;
      i = this.AsInt();
      Result = (i % 10000) === 0;
      Int.set(Math.floor(i / 10000));
      return Result;
    };
    this.AsInt = function () {
      var Result = 0;
      Result = Math.floor(this.Value / 10000);
      return Result;
    };
  });
  rtl.createClass($mod,"TResEvalUTF16",$mod.TResEvalValue,function () {
    this.$init = function () {
      $mod.TResEvalValue.$init.call(this);
      this.S = "";
    };
    this.Create$1 = function () {
      $mod.TResolveData.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkUnicodeString;
    };
    this.CreateValue = function (aValue) {
      this.Create$1();
      this.S = aValue;
    };
    this.Clone = function () {
      var Result = null;
      Result = $mod.TResEvalValue.Clone.call(this);
      Result.S = this.S;
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      Result = $mod.UnicodeStrToCaption(this.S,60);
      return Result;
    };
  });
  rtl.createClass($mod,"TResEvalEnum",$mod.TResEvalValue,function () {
    this.$init = function () {
      $mod.TResEvalValue.$init.call(this);
      this.Index = 0;
      this.ElType = null;
    };
    this.$final = function () {
      this.ElType = undefined;
      $mod.TResEvalValue.$final.call(this);
    };
    this.Create$1 = function () {
      $mod.TResolveData.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkEnum;
    };
    this.CreateValue = function (aValue, aIdentEl) {
      this.Create$1();
      this.Index = aValue;
      this.IdentEl = aIdentEl;
      this.ElType = rtl.as(this.IdentEl.FParent,pas.PasTree.TPasEnumType);
      if (this.ElType === null) throw pas.SysUtils.Exception.$create("Create$1",[""]);
    };
    this.GetEnumValue = function () {
      var Result = null;
      Result = null;
      if (this.ElType !== null) if ((this.Index >= 0) && (this.Index < this.ElType.Values.FCount)) Result = rtl.as(rtl.getObject(this.ElType.Values.Get(this.Index)),pas.PasTree.TPasEnumValue);
      return Result;
    };
    this.GetEnumName = function () {
      var Result = "";
      var V = null;
      V = this.GetEnumValue();
      if (V !== null) {
        Result = V.FName}
       else Result = "";
      return Result;
    };
    this.Clone = function () {
      var Result = null;
      Result = $mod.TResEvalValue.Clone.call(this);
      Result.Index = this.Index;
      Result.ElType = this.ElType;
      return Result;
    };
    this.AsDebugString = function () {
      var Result = "";
      Result = $mod.TREVKind[this.Kind];
      Result = (((Result + "=") + this.AsString()) + "=") + pas.SysUtils.IntToStr(this.Index);
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      if (this.IdentEl !== null) {
        Result = this.IdentEl.FName;
        if (Result !== "") return Result;
      };
      Result = this.GetEnumName();
      if (Result !== "") return Result;
      Result = ((this.ElType.FName + "(") + pas.SysUtils.IntToStr(this.Index)) + ")";
      return Result;
    };
  });
  this.TRESetElKind = {"0": "revskNone", revskNone: 0, "1": "revskEnum", revskEnum: 1, "2": "revskInt", revskInt: 2, "3": "revskChar", revskChar: 3, "4": "revskBool", revskBool: 4};
  $mod.$rtti.$Enum("TRESetElKind",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TRESetElKind});
  rtl.createClass($mod,"TResEvalRangeInt",$mod.TResEvalValue,function () {
    this.$init = function () {
      $mod.TResEvalValue.$init.call(this);
      this.ElKind = 0;
      this.RangeStart = 0;
      this.RangeEnd = 0;
      this.ElType = null;
    };
    this.$final = function () {
      this.ElType = undefined;
      $mod.TResEvalValue.$final.call(this);
    };
    this.Create$1 = function () {
      $mod.TResolveData.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkRangeInt;
    };
    this.CreateValue = function (aElKind, aElType, aRangeStart, aRangeEnd) {
      this.Create$1();
      this.ElKind = aElKind;
      this.ElType = aElType;
      this.RangeStart = aRangeStart;
      this.RangeEnd = aRangeEnd;
    };
    this.Clone = function () {
      var Result = null;
      Result = $mod.TResEvalValue.Clone.call(this);
      Result.ElKind = this.ElKind;
      Result.RangeStart = this.RangeStart;
      Result.RangeEnd = this.RangeEnd;
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      Result = (this.ElementAsString(this.RangeStart) + "..") + this.ElementAsString(this.RangeEnd);
      return Result;
    };
    this.AsDebugString = function () {
      var Result = "";
      var s = "";
      Result = $mod.TREVKind[this.Kind];
      s = $mod.TRESetElKind[this.ElKind];
      Result = (((((Result + "\/") + s) + ":") + $mod.GetObjName(this.ElType)) + "=") + this.AsString();
      return Result;
    };
    this.ElementAsString = function (El) {
      var Result = "";
      var EnumValue = null;
      var EnumType = null;
      var $tmp1 = this.ElKind;
      if ($tmp1 === $mod.TRESetElKind.revskBool) {
        if (El === 0) {
          Result = "false"}
         else Result = "true"}
       else if ($tmp1 === $mod.TRESetElKind.revskEnum) {
        EnumType = rtl.as(this.ElType,pas.PasTree.TPasEnumType);
        if ((El >= 0) && (El < EnumType.Values.FCount)) {
          EnumValue = rtl.getObject(EnumType.Values.Get(El));
          Result = EnumValue.FName;
        } else Result = ((this.ElType.FName + "(") + pas.SysUtils.IntToStr(El)) + ")";
      } else if ($tmp1 === $mod.TRESetElKind.revskInt) {
        Result = pas.SysUtils.IntToStr(El)}
       else if ($tmp1 === $mod.TRESetElKind.revskChar) if (((El >= 32) && (El <= 38)) || ((El >= 40) && (El <= 126))) {
        Result = ("'" + String.fromCharCode(El)) + "'"}
       else Result = "#" + pas.SysUtils.IntToStr(El);
      return Result;
    };
  });
  rtl.createClass($mod,"TResEvalRangeUInt",$mod.TResEvalValue,function () {
    this.$init = function () {
      $mod.TResEvalValue.$init.call(this);
      this.RangeStart = 0;
      this.RangeEnd = 0;
    };
    this.Create$1 = function () {
      $mod.TResolveData.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkRangeInt;
    };
    this.CreateValue = function (aRangeStart, aRangeEnd) {
      this.Create$1();
      this.RangeStart = aRangeStart;
      this.RangeEnd = aRangeEnd;
    };
    this.Clone = function () {
      var Result = null;
      Result = $mod.TResEvalValue.Clone.call(this);
      Result.RangeStart = this.RangeStart;
      Result.RangeEnd = this.RangeEnd;
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      Result = (pas.SysUtils.IntToStr(this.RangeStart) + "..") + pas.SysUtils.IntToStr(this.RangeEnd);
      return Result;
    };
  });
  rtl.createClass($mod,"TResEvalSet",$mod.TResEvalRangeInt,function () {
    this.MaxCount = 0xffff;
    this.TItem = function (s) {
      if (s) {
        this.RangeStart = s.RangeStart;
        this.RangeEnd = s.RangeEnd;
      } else {
        this.RangeStart = 0;
        this.RangeEnd = 0;
      };
      this.$equal = function (b) {
        return (this.RangeStart === b.RangeStart) && (this.RangeEnd === b.RangeEnd);
      };
    };
    $mod.$rtti.$Record("TResEvalSet.TItem",{}).addFields("RangeStart",rtl.nativeint,"RangeEnd",rtl.nativeint);
    $mod.$rtti.$DynArray("TResEvalSet.TItems",{eltype: $mod.$rtti["TResEvalSet.TItem"]});
    this.$init = function () {
      $mod.TResEvalRangeInt.$init.call(this);
      this.Ranges = [];
    };
    this.$final = function () {
      this.Ranges = undefined;
      $mod.TResEvalRangeInt.$final.call(this);
    };
    this.Create$1 = function () {
      $mod.TResEvalRangeInt.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkSetOfInt;
    };
    this.CreateEmpty = function (aElKind, aElType) {
      this.Create$1();
      this.ElKind = aElKind;
      this.ElType = aElType;
    };
    this.CreateEmptySameKind = function (aSet) {
      this.Create$1();
      this.IdentEl = aSet.IdentEl;
      this.ElKind = aSet.ElKind;
      this.ElType = aSet.ElType;
    };
    this.CreateValue = function (aElKind, aElType, aRangeStart, aRangeEnd) {
      $mod.TResEvalRangeInt.CreateValue.call(this,aElKind,aElType,aRangeStart,aRangeEnd);
      this.Add(aRangeStart,aRangeEnd);
    };
    this.Clone = function () {
      var Result = null;
      var RS = null;
      var i = 0;
      Result = $mod.TResEvalRangeInt.Clone.call(this);
      RS = Result;
      RS.ElKind = this.ElKind;
      RS.ElType = this.ElType;
      RS.Ranges = rtl.arraySetLength(RS.Ranges,this.TItem,rtl.length(this.Ranges));
      for (var $l1 = 0, $end2 = rtl.length(this.Ranges) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        RS.Ranges[i] = new this.TItem(this.Ranges[i]);
      };
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      var i = 0;
      Result = "[";
      for (var $l1 = 0, $end2 = rtl.length(this.Ranges) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (i > 0) Result = Result + ",";
        Result = Result + this.ElementAsString(this.Ranges[i].RangeStart);
        if (this.Ranges[i].RangeStart !== this.Ranges[i].RangeEnd) Result = (Result + "..") + this.ElementAsString(this.Ranges[i].RangeEnd);
      };
      Result = Result + "]";
      return Result;
    };
    this.Add = function (aRangeStart, aRangeEnd) {
      var Self = this;
      var Result = false;
      function Insert(Item, Items, Index) {
        var i = 0;
        Items.set(rtl.arraySetLength(Items.get(),Self.TItem,rtl.length(Items.get()) + 1));
        for (var $l1 = rtl.length(Items.get()) - 1, $end2 = Index + 1; $l1 >= $end2; $l1--) {
          i = $l1;
          Items.get()[i] = new Self.TItem(Items.get()[i - 1]);
        };
        Items.get()[Index] = new Self.TItem(Item);
      };
      function Delete(Items, Start, Size) {
        var i = 0;
        if (Size === 0) return;
        for (var $l1 = Start + Size, $end2 = rtl.length(Items.get()) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Items.get()[i - Size] = new Self.TItem(Items.get()[i]);
        };
        Items.set(rtl.arraySetLength(Items.get(),Self.TItem,rtl.length(Items.get()) - Size));
      };
      var StartIndex = 0;
      var l = 0;
      var EndIndex = 0;
      var Item = new Self.TItem();
      Result = false;
      if (aRangeStart > aRangeEnd) throw pas.SysUtils.Exception.$create("Create$1",[""]);
      if (Self.ElKind === $mod.TRESetElKind.revskNone) throw pas.SysUtils.Exception.$create("Create$1",[""]);
      l = rtl.length(Self.Ranges);
      if (l === 0) {
        Self.RangeStart = aRangeStart;
        Self.RangeEnd = aRangeEnd;
        Self.Ranges = rtl.arraySetLength(Self.Ranges,Self.TItem,1);
        Self.Ranges[0].RangeStart = aRangeStart;
        Self.Ranges[0].RangeEnd = aRangeEnd;
        return true;
      };
      if (Self.RangeStart > aRangeStart) Self.RangeStart = aRangeStart;
      if (Self.RangeEnd < aRangeEnd) Self.RangeEnd = aRangeEnd;
      StartIndex = Self.IndexOfRange(aRangeStart,true);
      if ((StartIndex > 0) && (Self.Ranges[StartIndex - 1].RangeEnd === (aRangeStart - 1))) StartIndex -= 1;
      if (StartIndex === l) {
        Item.RangeStart = aRangeStart;
        Item.RangeEnd = aRangeEnd;
        Insert(Item,{p: Self, get: function () {
            return this.p.Ranges;
          }, set: function (v) {
            this.p.Ranges = v;
          }},StartIndex);
        Result = true;
      } else {
        EndIndex = Self.IndexOfRange(aRangeEnd,true);
        if (EndIndex > StartIndex) if ((EndIndex === l) || (Self.Ranges[EndIndex].RangeStart > (aRangeEnd + 1))) EndIndex -= 1;
        if (StartIndex > EndIndex) throw pas.SysUtils.Exception.$create("Create$1",[""]);
        if (StartIndex === EndIndex) {
          if (Self.Ranges[StartIndex].RangeStart > aRangeEnd) {
            if (Self.Ranges[StartIndex].RangeStart > (aRangeEnd + 1)) {
              Item.RangeStart = aRangeStart;
              Item.RangeEnd = aRangeEnd;
              Insert(Item,{p: Self, get: function () {
                  return this.p.Ranges;
                }, set: function (v) {
                  this.p.Ranges = v;
                }},StartIndex);
              Result = true;
            } else {
              Self.Ranges[StartIndex].RangeStart = aRangeStart;
              Result = true;
            };
          } else if (Self.Ranges[StartIndex].RangeEnd < aRangeStart) {
            if ((Self.Ranges[StartIndex].RangeEnd + 1) < aRangeStart) {
              Item.RangeStart = aRangeStart;
              Item.RangeEnd = aRangeEnd;
              Insert(Item,{p: Self, get: function () {
                  return this.p.Ranges;
                }, set: function (v) {
                  this.p.Ranges = v;
                }},StartIndex + 1);
              Result = true;
            } else {
              Self.Ranges[StartIndex].RangeEnd = aRangeEnd;
              Result = true;
            };
          } else {
            Result = false;
            if (Self.Ranges[StartIndex].RangeStart > aRangeStart) Self.Ranges[StartIndex].RangeStart = aRangeStart;
            if (Self.Ranges[StartIndex].RangeEnd < aRangeEnd) Self.Ranges[StartIndex].RangeEnd = aRangeEnd;
          };
        } else {
          Result = false;
          if (Self.Ranges[StartIndex].RangeStart > aRangeStart) Self.Ranges[StartIndex].RangeStart = aRangeStart;
          if (aRangeEnd < Self.Ranges[EndIndex].RangeEnd) aRangeEnd = Self.Ranges[EndIndex].RangeEnd;
          Self.Ranges[StartIndex].RangeEnd = aRangeEnd;
          Delete({p: Self, get: function () {
              return this.p.Ranges;
            }, set: function (v) {
              this.p.Ranges = v;
            }},StartIndex + 1,EndIndex - StartIndex);
        };
      };
      return Result;
    };
    this.IndexOfRange = function (Index, FindInsertPos) {
      var Result = 0;
      var l = 0;
      var r = 0;
      var m = 0;
      l = 0;
      r = rtl.length(this.Ranges) - 1;
      while (l <= r) {
        m = Math.floor((l + r) / 2);
        if (this.Ranges[m].RangeStart > Index) {
          r = m - 1}
         else if (this.Ranges[m].RangeEnd < Index) {
          l = m + 1}
         else return m;
      };
      if (!FindInsertPos) return -1;
      if (rtl.length(this.Ranges) === 0) {
        return 0}
       else if (l > m) {
        return l}
       else return m;
      Result = -1;
      return Result;
    };
    this.Intersects = function (aRangeStart, aRangeEnd) {
      var Result = 0;
      var Index = 0;
      Index = this.IndexOfRange(aRangeStart,true);
      if ((Index === rtl.length(this.Ranges)) || (this.Ranges[Index].RangeStart > aRangeEnd)) {
        Result = -1}
       else Result = Index;
      return Result;
    };
    this.ConsistencyCheck = function () {
      var Self = this;
      function E(Msg) {
        throw pas.SysUtils.Exception.$create("Create$1",[Msg]);
      };
      var i = 0;
      if ((Self.ElKind === $mod.TRESetElKind.revskNone) && (rtl.length(Self.Ranges) > 0)) E("");
      for (var $l1 = 0, $end2 = rtl.length(Self.Ranges) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (Self.Ranges[i].RangeStart > Self.Ranges[i].RangeEnd) E("");
        if ((i > 0) && ((Self.Ranges[i - 1].RangeEnd + 1) >= Self.Ranges[i].RangeStart)) E("missing gap");
        if (Self.RangeStart > Self.Ranges[i].RangeStart) E("wrong RangeStart=" + pas.SysUtils.IntToStr(Self.RangeStart));
        if (Self.RangeEnd < Self.Ranges[i].RangeEnd) E("wrong RangeEnd=" + pas.SysUtils.IntToStr(Self.RangeEnd));
      };
    };
  });
  rtl.createClass($mod,"TResEvalExternal",$mod.TResEvalValue,function () {
    this.Create$1 = function () {
      $mod.TResolveData.Create$1.call(this);
      this.Kind = $mod.TREVKind.revkExternal;
    };
    this.Clone = function () {
      var Result = null;
      Result = $mod.TResEvalValue.Clone.call(this);
      return Result;
    };
    this.AsString = function () {
      var Result = "";
      Result = $mod.TResEvalValue.AsString.call(this);
      return Result;
    };
  });
  this.TResEvalFlag = {"0": "refConst", refConst: 0, "1": "refConstExt", refConstExt: 1, "2": "refAutoConst", refAutoConst: 2, "3": "refAutoConstExt", refAutoConstExt: 3};
  $mod.$rtti.$Enum("TResEvalFlag",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TResEvalFlag});
  $mod.$rtti.$Set("TResEvalFlags",{comptype: $mod.$rtti["TResEvalFlag"]});
  $mod.$rtti.$Class("TResExprEvaluator");
  $mod.$rtti.$MethodVar("TPasResEvalLogHandler",{procsig: rtl.newTIProcSig([["Sender",$mod.$rtti["TResExprEvaluator"]],["id",rtl.nativeint,2],["MsgType",pas.PScanner.$rtti["TMessageType"]],["MsgNumber",rtl.longint],["Fmt",rtl.string,2],["Args",rtl.jsvalue,8],["PosEl",pas.PasTree.$rtti["TPasElement"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TPasResEvalIdentHandler",{procsig: rtl.newTIProcSig([["Sender",$mod.$rtti["TResExprEvaluator"]],["Expr",pas.PasTree.$rtti["TPrimitiveExpr"]],["Flags",$mod.$rtti["TResEvalFlags"]]],$mod.$rtti["TResEvalValue"]), methodkind: 1});
  $mod.$rtti.$MethodVar("TPasResEvalParamsHandler",{procsig: rtl.newTIProcSig([["Sender",$mod.$rtti["TResExprEvaluator"]],["Params",pas.PasTree.$rtti["TParamsExpr"]],["Flags",$mod.$rtti["TResEvalFlags"]]],$mod.$rtti["TResEvalValue"]), methodkind: 1});
  $mod.$rtti.$MethodVar("TPasResEvalRangeCheckElHandler",{procsig: rtl.newTIProcSig([["Sender",$mod.$rtti["TResExprEvaluator"]],["El",pas.PasTree.$rtti["TPasElement"]],["MsgType",pas.PScanner.$rtti["TMessageType"],1]]), methodkind: 0});
  rtl.createClass($mod,"TResExprEvaluator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FAllowedInts = {};
      this.FOnEvalIdentifier = null;
      this.FOnEvalParams = null;
      this.FOnLog = null;
      this.FOnRangeCheckEl = null;
    };
    this.$final = function () {
      this.FAllowedInts = undefined;
      this.FOnEvalIdentifier = undefined;
      this.FOnEvalParams = undefined;
      this.FOnLog = undefined;
      this.FOnRangeCheckEl = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.LogMsg = function (id, MsgType, MsgNumber, Fmt, Args, PosEl) {
      this.FOnLog(this,id,MsgType,MsgNumber,Fmt,Args,PosEl);
    };
    this.RaiseMsg = function (Id, MsgNumber, Fmt, Args, ErrorPosEl) {
      this.LogMsg(Id,pas.PScanner.TMessageType.mtError,MsgNumber,Fmt,Args,ErrorPosEl);
      throw pas.SysUtils.Exception.$create("Create$1",[(((("[" + pas.SysUtils.IntToStr(Id)) + "] (") + pas.SysUtils.IntToStr(MsgNumber)) + ") ") + pas.PScanner.SafeFormat(Fmt,Args)]);
    };
    this.RaiseNotYetImplemented = function (id, El, Msg) {
      var s = "";
      s = ((rtl.getResStr(pas.PasResolveEval,"sNotYetImplemented") + " [") + pas.SysUtils.IntToStr(id)) + "]";
      if (Msg !== "") s = (s + " ") + Msg;
      this.RaiseMsg(id,3002,s,[$mod.GetObjName(El)],El);
    };
    this.RaiseInternalError = function (id, Msg) {
      throw pas.SysUtils.Exception.$create("Create$1",[(("Internal error: [" + pas.SysUtils.IntToStr(id)) + "] ") + Msg]);
    };
    this.RaiseConstantExprExp = function (id, ErrorEl) {
      this.RaiseMsg(id,3036,rtl.getResStr(pas.PasResolveEval,"sConstantExpressionExpected"),[],ErrorEl);
    };
    this.RaiseRangeCheck = function (id, ErrorEl) {
      this.RaiseMsg(id,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],ErrorEl);
    };
    this.RaiseOverflowArithmetic = function (id, ErrorEl) {
      this.RaiseMsg(id,3068,rtl.getResStr(pas.PasResolveEval,"sOverflowInArithmeticOperation"),[],ErrorEl);
    };
    this.RaiseDivByZero = function (id, ErrorEl) {
      this.RaiseMsg(id,3069,rtl.getResStr(pas.PasResolveEval,"sDivByZero"),[],ErrorEl);
    };
    this.EvalUnaryExpr = function (Expr, Flags) {
      var Result = null;
      var Int = 0;
      var UInt = 0;
      Result = this.Eval(Expr.Operand,rtl.refSet(Flags));
      if (Result === null) return Result;
      var $tmp1 = Expr.OpCode;
      if ($tmp1 === pas.PasTree.TExprOpCode.eopAdd) {}
      else if ($tmp1 === pas.PasTree.TExprOpCode.eopSubtract) {
        var $tmp2 = Result.Kind;
        if ($tmp2 === $mod.TREVKind.revkInt) {
          Int = Result.Int;
          if (Int === 0) return Result;
          if (Result.FElement !== null) Result = Result.Clone();
          if (Result.Typed in $mod.reitAllSigned) {
            if (Int === $mod.reitLow[Result.Typed]) {
              if (Result.Typed !== $mod.TResEvalTypedInt.reitNone) {
                Result.Typed = $mod.TResEvalTypedInt.reitNone}
               else {
                $mod.ReleaseEvalValue({get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }});
                Result = $mod.TResEvalFloat.$create("CreateValue",[- -4503599627370496]);
                return Result;
              };
            };
          } else {
            Result.Typed = $mod.TResEvalTypedInt.reitNone;
          };
          Result.Int = -Int;
        } else if ($tmp2 === $mod.TREVKind.revkUInt) {
          UInt = Result.UInt;
          if (UInt === 0) return Result;
          if (UInt <= 4503599627370495) {
            $mod.ReleaseEvalValue({get: function () {
                return Result;
              }, set: function (v) {
                Result = v;
              }});
            Result = $mod.TResEvalInt.$create("CreateValue",[-UInt]);
          } else {
            $mod.ReleaseEvalValue({get: function () {
                return Result;
              }, set: function (v) {
                Result = v;
              }});
            Result = $mod.TResEvalFloat.$create("CreateValue",[-UInt]);
          };
        } else if ($tmp2 === $mod.TREVKind.revkFloat) {
          if (Result.FloatValue === 0) return Result;
          if (Result.FElement !== null) Result = Result.Clone();
          Result.FloatValue = -Result.FloatValue;
        } else if ($tmp2 === $mod.TREVKind.revkCurrency) {
          if (Result.Value === 0) return Result;
          if (Result.FElement !== null) Result = Result.Clone();
          Result.Value = -Result.Value;
        } else if ($tmp2 === $mod.TREVKind.revkExternal) {
          return Result}
         else {
          if (Result.FElement === null) Result = rtl.freeLoc(Result);
          this.RaiseNotYetImplemented(20170518230738,Expr,"");
        };
      } else if ($tmp1 === pas.PasTree.TExprOpCode.eopNot) {
        var $tmp3 = Result.Kind;
        if ($tmp3 === $mod.TREVKind.revkBool) {
          if (Result.FElement !== null) Result = Result.Clone();
          Result.B = !Result.B;
        } else if ($tmp3 === $mod.TREVKind.revkInt) {
          if (Result.FElement !== null) Result = Result.Clone();
          var $tmp4 = Result.Typed;
          if ($tmp4 === $mod.TResEvalTypedInt.reitByte) {
            Result.Int = ~(Result.Int & 255)}
           else if ($tmp4 === $mod.TResEvalTypedInt.reitShortInt) {
            Result.Int = ~(((Result.Int & 255) << 24) >> 24)}
           else if ($tmp4 === $mod.TResEvalTypedInt.reitWord) {
            Result.Int = ~(Result.Int & 65535)}
           else if ($tmp4 === $mod.TResEvalTypedInt.reitSmallInt) {
            Result.Int = ~(((Result.Int & 65535) << 16) >> 16)}
           else if ($tmp4 === $mod.TResEvalTypedInt.reitUIntSingle) {
            Result.Int = ~Result.Int & 0x3fffff}
           else if ($tmp4 === $mod.TResEvalTypedInt.reitIntSingle) {
            Result.Int = ~Result.Int & 0x7fffff}
           else if ($tmp4 === $mod.TResEvalTypedInt.reitLongWord) {
            Result.Int = ~(Result.Int >>> 0)}
           else if ($tmp4 === $mod.TResEvalTypedInt.reitLongInt) {
            Result.Int = ~(Result.Int & 0xFFFFFFFF)}
           else if ($tmp4 === $mod.TResEvalTypedInt.reitUIntDouble) {
            Result.Int = ~Result.Int & 0xfffffffffffff}
           else if ($tmp4 === $mod.TResEvalTypedInt.reitIntDouble) {
            Result.Int = ~Result.Int & 0x1fffffffffffff}
           else {
            Result.Int = ~Result.Int;
          };
        } else if ($tmp3 === $mod.TREVKind.revkUInt) {
          if (Result.FElement !== null) Result = Result.Clone();
          Result.UInt = ~Result.UInt;
        } else if ($tmp3 === $mod.TREVKind.revkExternal) {
          return Result}
         else {
          if (Result.FElement === null) Result = rtl.freeLoc(Result);
          this.RaiseNotYetImplemented(20170518232804,Expr,"");
        };
      } else if ($tmp1 === pas.PasTree.TExprOpCode.eopAddress) {
        if (Result.FElement === null) Result = rtl.freeLoc(Result);
        Result = $mod.TResEvalValue.$create("CreateKind",[$mod.TREVKind.revkNil]);
      } else {
        this.RaiseNotYetImplemented(20170518232823,Expr,"operator=" + pas.PasTree.OpcodeStrings[Expr.OpCode]);
      };
      return Result;
    };
    this.EvalBinaryExpr = function (Expr, Flags) {
      var Result = null;
      var LeftValue = null;
      var RightValue = null;
      Result = null;
      if ((Expr.Kind === pas.PasTree.TPasExprKind.pekBinary) && (Expr.OpCode === pas.PasTree.TExprOpCode.eopSubIdent)) {
        Result = this.Eval(Expr.right,rtl.refSet(Flags));
        return Result;
      };
      LeftValue = null;
      RightValue = null;
      try {
        LeftValue = this.Eval(Expr.left,rtl.refSet(Flags));
        if (LeftValue === null) return Result;
        RightValue = this.Eval(Expr.right,rtl.refSet(Flags));
        if (RightValue === null) return Result;
        if (LeftValue.Kind === $mod.TREVKind.revkExternal) {
          if (rtl.eqSet(rtl.intersectSet(rtl.createSet($mod.TResEvalFlag.refConst,$mod.TResEvalFlag.refConstExt),Flags),rtl.createSet($mod.TResEvalFlag.refConst))) this.RaiseConstantExprExp(20181024134508,Expr.left);
          Result = LeftValue;
          LeftValue = null;
          return Result;
        };
        if (RightValue.Kind === $mod.TREVKind.revkExternal) {
          if (rtl.eqSet(rtl.intersectSet(rtl.createSet($mod.TResEvalFlag.refConst,$mod.TResEvalFlag.refConstExt),Flags),rtl.createSet($mod.TResEvalFlag.refConst))) this.RaiseConstantExprExp(20181024134545,Expr.right);
          Result = RightValue;
          RightValue = null;
          return Result;
        };
        var $tmp1 = Expr.Kind;
        if ($tmp1 === pas.PasTree.TPasExprKind.pekRange) {
          Result = this.EvalBinaryRangeExpr(Expr,LeftValue,RightValue)}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekBinary) {
          var $tmp2 = Expr.OpCode;
          if ($tmp2 === pas.PasTree.TExprOpCode.eopAdd) {
            Result = this.EvalBinaryAddExpr(Expr,LeftValue,RightValue)}
           else if ($tmp2 === pas.PasTree.TExprOpCode.eopSubtract) {
            Result = this.EvalBinarySubExpr(Expr,LeftValue,RightValue)}
           else if ($tmp2 === pas.PasTree.TExprOpCode.eopMultiply) {
            Result = this.EvalBinaryMulExpr(Expr,LeftValue,RightValue)}
           else if ($tmp2 === pas.PasTree.TExprOpCode.eopDivide) {
            Result = this.EvalBinaryDivideExpr(Expr,LeftValue,RightValue)}
           else if ($tmp2 === pas.PasTree.TExprOpCode.eopDiv) {
            Result = this.EvalBinaryDivExpr(Expr,LeftValue,RightValue)}
           else if ($tmp2 === pas.PasTree.TExprOpCode.eopMod) {
            Result = this.EvalBinaryModExpr(Expr,LeftValue,RightValue)}
           else if ($tmp2 === pas.PasTree.TExprOpCode.eopPower) {
            Result = this.EvalBinaryPowerExpr(Expr,LeftValue,RightValue)}
           else if (($tmp2 === pas.PasTree.TExprOpCode.eopShl) || ($tmp2 === pas.PasTree.TExprOpCode.eopShr)) {
            Result = this.EvalBinaryShiftExpr(Expr,LeftValue,RightValue)}
           else if ((($tmp2 === pas.PasTree.TExprOpCode.eopAnd) || ($tmp2 === pas.PasTree.TExprOpCode.eopOr)) || ($tmp2 === pas.PasTree.TExprOpCode.eopXor)) {
            Result = this.EvalBinaryBoolOpExpr(Expr,LeftValue,RightValue)}
           else if (($tmp2 === pas.PasTree.TExprOpCode.eopEqual) || ($tmp2 === pas.PasTree.TExprOpCode.eopNotEqual)) {
            Result = this.EvalBinaryNEqualExpr(Expr,LeftValue,RightValue)}
           else if (((($tmp2 === pas.PasTree.TExprOpCode.eopLessThan) || ($tmp2 === pas.PasTree.TExprOpCode.eopGreaterThan)) || ($tmp2 === pas.PasTree.TExprOpCode.eopLessthanEqual)) || ($tmp2 === pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
            Result = this.EvalBinaryLessGreaterExpr(Expr,LeftValue,RightValue)}
           else if ($tmp2 === pas.PasTree.TExprOpCode.eopIn) {
            Result = this.EvalBinaryInExpr(Expr,LeftValue,RightValue)}
           else if ($tmp2 === pas.PasTree.TExprOpCode.eopSymmetricaldifference) {
            Result = this.EvalBinarySymmetricaldifferenceExpr(Expr,LeftValue,RightValue)}
           else {
            this.RaiseNotYetImplemented(20170530100823,Expr,"");
          };
        } else {
          this.RaiseNotYetImplemented(20170530100827,Expr,"");
        };
      } finally {
        $mod.ReleaseEvalValue({get: function () {
            return LeftValue;
          }, set: function (v) {
            LeftValue = v;
          }});
        $mod.ReleaseEvalValue({get: function () {
            return RightValue;
          }, set: function (v) {
            RightValue = v;
          }});
      };
      return Result;
    };
    this.EvalBinaryRangeExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var LeftInt = 0;
      var RightInt = 0;
      var $tmp1 = LeftValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkBool) {
        if (RightValue.Kind !== $mod.TREVKind.revkBool) {
          this.RaiseRangeCheck(20170714133017,Expr.right)}
         else {
          LeftInt = LeftValue.B + 0;
          RightInt = RightValue.B + 0;
          if (LeftInt > RightInt) this.RaiseMsg(20170714133540,3065,rtl.getResStr(pas.PasResolveEval,"sHighRangeLimitLTLowRangeLimit"),[],Expr.right);
          Result = $mod.TResEvalRangeInt.$create("CreateValue",[$mod.TRESetElKind.revskBool,null,LeftInt,RightInt]);
          return Result;
        }}
       else if ($tmp1 === $mod.TREVKind.revkInt) {
        if (RightValue.Kind === $mod.TREVKind.revkInt) {
          LeftInt = LeftValue.Int;
          RightInt = RightValue.Int;
          if (LeftInt > RightInt) this.RaiseMsg(20170518222939,3065,rtl.getResStr(pas.PasResolveEval,"sHighRangeLimitLTLowRangeLimit"),[],Expr.right);
          Result = $mod.TResEvalRangeInt.$create("CreateValue",[$mod.TRESetElKind.revskInt,null,LeftInt,RightInt]);
          return Result;
        } else if (RightValue.Kind === $mod.TREVKind.revkUInt) {
          if (RightValue.UInt <= 4503599627370495) {
            if (LeftValue.Int > RightValue.UInt) this.RaiseMsg(20170519000235,3065,rtl.getResStr(pas.PasResolveEval,"sHighRangeLimitLTLowRangeLimit"),[],Expr.right);
            Result = $mod.TResEvalRangeInt.$create("CreateValue",[$mod.TRESetElKind.revskInt,null,LeftValue.Int,RightValue.UInt]);
            return Result;
          } else if (LeftValue.Int < 0) {
            this.RaiseRangeCheck(20170522151629,Expr.right)}
           else if (LeftValue.Int > RightValue.UInt) this.RaiseMsg(20170522151708,3065,rtl.getResStr(pas.PasResolveEval,"sHighRangeLimitLTLowRangeLimit"),[],Expr.right);
          Result = $mod.TResEvalRangeUInt.$create("CreateValue",[LeftValue.Int,RightValue.UInt]);
          return Result;
        } else this.RaiseRangeCheck(20170518222812,Expr.right)}
       else if ($tmp1 === $mod.TREVKind.revkUInt) {
        if (RightValue.Kind === $mod.TREVKind.revkInt) {
          if (LeftValue.UInt > 4503599627370495) {
            if (RightValue.Int < 0) {
              this.RaiseRangeCheck(20170522152608,Expr.right)}
             else if (LeftValue.UInt > RightValue.Int) this.RaiseMsg(20170522152648,3065,rtl.getResStr(pas.PasResolveEval,"sHighRangeLimitLTLowRangeLimit"),[],Expr.right);
            Result = $mod.TResEvalRangeUInt.$create("CreateValue",[LeftValue.UInt,RightValue.Int]);
            return Result;
          } else if (LeftValue.UInt > RightValue.Int) this.RaiseMsg(20170522152804,3065,rtl.getResStr(pas.PasResolveEval,"sHighRangeLimitLTLowRangeLimit"),[],Expr.right);
          Result = $mod.TResEvalRangeInt.$create("CreateValue",[$mod.TRESetElKind.revskInt,null,LeftValue.UInt,RightValue.Int]);
          return Result;
        } else if (RightValue.Kind === $mod.TREVKind.revkUInt) {
          if (LeftValue.UInt > RightValue.UInt) this.RaiseMsg(20170519000240,3065,rtl.getResStr(pas.PasResolveEval,"sHighRangeLimitLTLowRangeLimit"),[],Expr.right);
          Result = $mod.TResEvalRangeUInt.$create("CreateValue",[LeftValue.UInt,RightValue.UInt]);
          return Result;
        } else this.RaiseRangeCheck(20170522123106,Expr.right)}
       else if ($tmp1 === $mod.TREVKind.revkEnum) {
        if (RightValue.Kind !== $mod.TREVKind.revkEnum) {
          this.RaiseRangeCheck(20170522153003,Expr.right)}
         else if (LeftValue.ElType !== RightValue.ElType) {
          this.RaiseRangeCheck(20170522123241,Expr.right);
        } else if (LeftValue.Index > RightValue.Index) {
          this.RaiseMsg(20170522123320,3065,rtl.getResStr(pas.PasResolveEval,"sHighRangeLimitLTLowRangeLimit"),[],Expr.right)}
         else {
          Result = $mod.TResEvalRangeInt.$create("CreateValue",[$mod.TRESetElKind.revskEnum,rtl.as(LeftValue.ElType,pas.PasTree.TPasEnumType),LeftValue.Index,RightValue.Index]);
          return Result;
        }}
       else if ($tmp1 === $mod.TREVKind.revkUnicodeString) {
        LeftInt = this.ExprStringToOrd(LeftValue,Expr.left);
        if (RightValue.Kind in $mod.revkAllStrings) {
          RightInt = this.ExprStringToOrd(RightValue,Expr.right);
          if (LeftInt > RightInt) this.RaiseMsg(20170523151508,3065,rtl.getResStr(pas.PasResolveEval,"sHighRangeLimitLTLowRangeLimit"),[],Expr.right);
          Result = $mod.TResEvalRangeInt.$create("CreateValue",[$mod.TRESetElKind.revskChar,null,LeftInt,RightInt]);
          return Result;
        } else this.RaiseRangeCheck(20170522123106,Expr.right);
      };
      return Result;
    };
    this.EvalBinaryAddExpr = function (Expr, LeftValue, RightValue) {
      var Self = this;
      var Result = null;
      function IntAddUInt(i, u) {
        var Int = 0;
        var UInt = 0;
        if (i >= 0) {
          UInt = i + u;
          Result = Self.CreateResEvalInt(UInt);
        } else if (u <= 4503599627370495) {
          Int = i + u;
          Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
        } else Self.RaiseRangeCheck(20170601140523,Expr);
      };
      var Int = 0;
      var UInt = 0;
      var Flo = 0.0;
      var aCurrency = 0;
      var LeftSet = null;
      var RightSet = null;
      var i = 0;
      Result = null;
      try {
        var $tmp1 = LeftValue.Kind;
        if ($tmp1 === $mod.TREVKind.revkInt) {
          Int = rtl.rc(LeftValue.Int,-4503599627370496,4503599627370495);
          var $tmp2 = RightValue.Kind;
          if ($tmp2 === $mod.TREVKind.revkInt) {
            if ((Int > 0) && (RightValue.Int > 0)) {
              UInt = rtl.rc(rtl.rc(Int,0,4503599627370495) + rtl.rc(RightValue.Int,0,4503599627370495),0,4503599627370495);
              Result = Self.CreateResEvalInt(UInt);
            } else {
              Int = rtl.rc(Int + RightValue.Int,-4503599627370496,4503599627370495);
              Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
            }}
           else if ($tmp2 === $mod.TREVKind.revkUInt) {
            IntAddUInt(Int,RightValue.UInt)}
           else if ($tmp2 === $mod.TREVKind.revkFloat) {
            Result = $mod.TResEvalFloat.$create("CreateValue",[Int + RightValue.FloatValue])}
           else if ($tmp2 === $mod.TREVKind.revkCurrency) {
            Result = $mod.TResEvalCurrency.$create("CreateValue",[(Int * 10000) + RightValue.Value])}
           else {
            Self.RaiseNotYetImplemented(20170525115537,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkUInt) {
          UInt = rtl.rc(LeftValue.UInt,0,4503599627370495);
          var $tmp3 = RightValue.Kind;
          if ($tmp3 === $mod.TREVKind.revkInt) {
            IntAddUInt(UInt,RightValue.Int)}
           else if ($tmp3 === $mod.TREVKind.revkUInt) {
            UInt = rtl.rc(UInt + RightValue.UInt,0,4503599627370495);
            Result = $mod.TResEvalUInt.$create("CreateValue",[UInt]);
          } else if ($tmp3 === $mod.TREVKind.revkFloat) {
            Result = $mod.TResEvalFloat.$create("CreateValue",[UInt + RightValue.FloatValue])}
           else if ($tmp3 === $mod.TREVKind.revkCurrency) {
            Result = $mod.TResEvalCurrency.$create("CreateValue",[(UInt * 10000) + RightValue.Value])}
           else {
            Self.RaiseNotYetImplemented(20170601141031,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkFloat) {
          Flo = LeftValue.FloatValue;
          var $tmp4 = RightValue.Kind;
          if ($tmp4 === $mod.TREVKind.revkInt) {
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo + RightValue.Int])}
           else if ($tmp4 === $mod.TREVKind.revkUInt) {
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo + RightValue.UInt])}
           else if ($tmp4 === $mod.TREVKind.revkFloat) {
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo + RightValue.FloatValue])}
           else if ($tmp4 === $mod.TREVKind.revkCurrency) {
            Result = $mod.TResEvalCurrency.$create("CreateValue",[(Flo * 10000) + RightValue.Value])}
           else {
            Self.RaiseNotYetImplemented(20170711145637,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkCurrency) {
          aCurrency = rtl.rc(LeftValue.Value,-922337203685477,922337203685477);
          var $tmp5 = RightValue.Kind;
          if ($tmp5 === $mod.TREVKind.revkInt) {
            Result = $mod.TResEvalFloat.$create("CreateValue",[(aCurrency + (RightValue.Int * 10000)) / 10000])}
           else if ($tmp5 === $mod.TREVKind.revkUInt) {
            Result = $mod.TResEvalFloat.$create("CreateValue",[(aCurrency + (RightValue.UInt * 10000)) / 10000])}
           else if ($tmp5 === $mod.TREVKind.revkFloat) {
            Result = $mod.TResEvalFloat.$create("CreateValue",[(aCurrency + (RightValue.FloatValue * 10000)) / 10000])}
           else if ($tmp5 === $mod.TREVKind.revkCurrency) {
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency + RightValue.Value])}
           else {
            Self.RaiseNotYetImplemented(20180421163819,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkUnicodeString) {
          var $tmp6 = RightValue.Kind;
          if ($tmp6 === $mod.TREVKind.revkUnicodeString) {
            Result = $mod.TResEvalUTF16.$create("Create$1");
            Result.S = LeftValue.S + RightValue.S;
          } else {
            Self.RaiseNotYetImplemented(20170601141811,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkSetOfInt) {
          var $tmp7 = RightValue.Kind;
          if ($tmp7 === $mod.TREVKind.revkSetOfInt) {
            LeftSet = LeftValue;
            RightSet = RightValue;
            if (LeftSet.ElKind === $mod.TRESetElKind.revskNone) {
              Result = RightSet.Clone()}
             else if (RightSet.ElKind === $mod.TRESetElKind.revskNone) {
              Result = LeftSet.Clone()}
             else {
              Result = RightSet.Clone();
              for (var $l8 = 0, $end9 = rtl.length(LeftSet.Ranges) - 1; $l8 <= $end9; $l8++) {
                i = $l8;
                Int = rtl.rc(LeftSet.Ranges[i].RangeStart,-4503599627370496,4503599627370495);
                while (Int <= LeftSet.Ranges[i].RangeEnd) {
                  Result.Add(Int,Int);
                  Int += 1;
                };
              };
            };
          } else {
            Self.RaiseNotYetImplemented(20170714114055,Expr,"");
          };
        } else {
          Self.RaiseNotYetImplemented(20170525115548,Expr,"");
        };
      } catch ($e) {
        if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
          Self.RaiseOverflowArithmetic(20170601140130,Expr)}
         else if (pas.SysUtils.ERangeError.isPrototypeOf($e)) {
          Self.RaiseRangeCheck(20170601140132,Expr)}
         else throw $e
      };
      return Result;
    };
    this.EvalBinarySubExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var Int = 0;
      var UInt = 0;
      var Flo = 0.0;
      var aCurrency = 0;
      var LeftSet = null;
      var RightSet = null;
      var i = 0;
      Result = null;
      var $tmp1 = LeftValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkInt) {
        Int = rtl.rc(LeftValue.Int,-4503599627370496,4503599627370495);
        var $tmp2 = RightValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkInt) {
          try {
            Int = rtl.rc(Int - RightValue.Int,-4503599627370496,4503599627370495);
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              if ((Int > 0) && (RightValue.Int < 0)) {
                UInt = rtl.rc(rtl.rc(Int,0,4503599627370495) + rtl.rc(-RightValue.Int,0,4503599627370495),0,4503599627370495);
                Result = this.CreateResEvalInt(UInt);
              } else this.RaiseOverflowArithmetic(20170525230247,Expr);
            } else throw $e
          }}
         else if ($tmp2 === $mod.TREVKind.revkUInt) {
          try {
            Int = rtl.rc(Int - RightValue.UInt,-4503599627370496,4503599627370495);
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20170711151201,Expr);
            } else throw $e
          }}
         else if ($tmp2 === $mod.TREVKind.revkFloat) {
          try {
            Flo = Int - RightValue.FloatValue;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20170711151313,Expr);
            } else throw $e
          }}
         else if ($tmp2 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc(rtl.rc(Int * 10000,-922337203685477,922337203685477) - RightValue.Value,-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20180421164011,Expr);
            } else throw $e
          }}
         else {
          this.RaiseNotYetImplemented(20170525230028,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkUInt) {
        UInt = rtl.rc(LeftValue.UInt,0,4503599627370495);
        var $tmp3 = RightValue.Kind;
        if ($tmp3 === $mod.TREVKind.revkInt) {
          try {
            UInt = rtl.rc(UInt - RightValue.Int,0,4503599627370495);
            Result = $mod.TResEvalUInt.$create("CreateValue",[UInt]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20170711151405,Expr);
            } else throw $e
          }}
         else if ($tmp3 === $mod.TREVKind.revkUInt) {
          try {
            UInt = rtl.rc(UInt - RightValue.UInt,0,4503599627370495);
            Result = $mod.TResEvalUInt.$create("CreateValue",[UInt]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20170711151419,Expr);
            } else throw $e
          }}
         else if ($tmp3 === $mod.TREVKind.revkFloat) {
          try {
            Flo = UInt - RightValue.FloatValue;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20170711151428,Expr);
            } else throw $e
          }}
         else if ($tmp3 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc(rtl.rc(UInt * 10000,-922337203685477,922337203685477) - RightValue.Value,-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20180421164005,Expr);
            } else throw $e
          }}
         else {
          this.RaiseNotYetImplemented(20170711151435,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkFloat) {
        Flo = LeftValue.FloatValue;
        var $tmp4 = RightValue.Kind;
        if ($tmp4 === $mod.TREVKind.revkInt) {
          try {
            Flo = Flo - RightValue.Int;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20170711151519,Expr);
            } else throw $e
          }}
         else if ($tmp4 === $mod.TREVKind.revkUInt) {
          try {
            Flo = Flo - RightValue.UInt;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20170711151538,Expr);
            } else throw $e
          }}
         else if ($tmp4 === $mod.TREVKind.revkFloat) {
          try {
            Flo = Flo - RightValue.FloatValue;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20170711151552,Expr);
            } else throw $e
          }}
         else if ($tmp4 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc(aCurrency - RightValue.Value,-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20180421164054,Expr);
            } else throw $e
          }}
         else {
          this.RaiseNotYetImplemented(20170711151600,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkCurrency) {
        aCurrency = rtl.rc(LeftValue.Value,-922337203685477,922337203685477);
        var $tmp5 = RightValue.Kind;
        if ($tmp5 === $mod.TREVKind.revkInt) {
          try {
            aCurrency = rtl.rc(aCurrency - (RightValue.Int * 10000),-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20180421164200,Expr);
            } else throw $e
          }}
         else if ($tmp5 === $mod.TREVKind.revkUInt) {
          try {
            aCurrency = rtl.rc(aCurrency - (RightValue.UInt * 10000),-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20180421164218,Expr);
            } else throw $e
          }}
         else if ($tmp5 === $mod.TREVKind.revkFloat) {
          try {
            aCurrency = rtl.rc(aCurrency - (RightValue.FloatValue * 10000),-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20180421164250,Expr);
            } else throw $e
          }}
         else if ($tmp5 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc(aCurrency - RightValue.Value,-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20180421164258,Expr);
            } else throw $e
          }}
         else {
          this.RaiseNotYetImplemented(20180421164312,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkSetOfInt) {
        var $tmp6 = RightValue.Kind;
        if ($tmp6 === $mod.TREVKind.revkSetOfInt) {
          LeftSet = LeftValue;
          RightSet = RightValue;
          if (LeftSet.ElKind === $mod.TRESetElKind.revskNone) {
            Result = $mod.TResEvalSet.$create("CreateEmptySameKind",[RightSet])}
           else {
            Result = $mod.TResEvalSet.$create("CreateEmptySameKind",[LeftSet]);
            for (var $l7 = 0, $end8 = rtl.length(LeftSet.Ranges) - 1; $l7 <= $end8; $l7++) {
              i = $l7;
              Int = rtl.rc(LeftSet.Ranges[i].RangeStart,-4503599627370496,4503599627370495);
              while (Int <= LeftSet.Ranges[i].RangeEnd) {
                if (RightSet.IndexOfRange(Int,false) < 0) Result.Add(Int,Int);
                Int += 1;
              };
            };
          };
        } else {
          this.RaiseNotYetImplemented(20170714114101,Expr,"");
        };
      } else {
        this.RaiseNotYetImplemented(20170525225946,Expr,"");
      };
      return Result;
    };
    this.EvalBinaryMulExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var Int = 0;
      var UInt = 0;
      var Flo = 0.0;
      var aCurrency = 0;
      var LeftSet = null;
      var RightSet = null;
      var i = 0;
      Result = null;
      var $tmp1 = LeftValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkInt) {
        Int = rtl.rc(LeftValue.Int,-4503599627370496,4503599627370495);
        var $tmp2 = RightValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkInt) {
          try {
            Int = rtl.rc(Int * RightValue.Int,-4503599627370496,4503599627370495);
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              if ((Int > 0) && (RightValue.Int > 0)) {
                try {
                  UInt = rtl.rc(rtl.rc(Int,0,4503599627370495) * rtl.rc(RightValue.Int,0,4503599627370495),0,4503599627370495);
                  Result = this.CreateResEvalInt(UInt);
                } catch ($e) {
                  if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
                    var E = $e;
                    this.RaiseOverflowArithmetic(20170530101616,Expr);
                  } else throw $e
                }}
               else this.RaiseOverflowArithmetic(20170525230247,Expr);
            } else throw $e
          }}
         else if ($tmp2 === $mod.TREVKind.revkUInt) {
          try {
            Int = rtl.rc(Int * RightValue.UInt,-4503599627370496,4503599627370495);
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170711164445,Expr);
          }}
         else if ($tmp2 === $mod.TREVKind.revkFloat) {
          try {
            Flo = Int * RightValue.FloatValue;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170711164541,Expr);
          }}
         else if ($tmp2 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc(Int * RightValue.Value,-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421164426,Expr);
          }}
         else {
          this.RaiseNotYetImplemented(20170525230028,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkUInt) {
        UInt = rtl.rc(LeftValue.UInt,0,4503599627370495);
        var $tmp3 = RightValue.Kind;
        if ($tmp3 === $mod.TREVKind.revkInt) {
          if (RightValue.Int >= 0) {
            try {
              UInt = rtl.rc(UInt * RightValue.Int,0,4503599627370495);
              Result = $mod.TResEvalUInt.$create("CreateValue",[UInt]);
            } catch ($e) {
              if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
                var E = $e;
                this.RaiseOverflowArithmetic(20170711164714,Expr);
              } else throw $e
            }}
           else try {
            Int = rtl.rc(UInt * RightValue.Int,-4503599627370496,4503599627370495);
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20170711164736,Expr);
            } else throw $e
          }}
         else if ($tmp3 === $mod.TREVKind.revkUInt) {
          try {
            UInt = rtl.rc(UInt * RightValue.UInt,0,4503599627370495);
            Result = $mod.TResEvalUInt.$create("CreateValue",[UInt]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170711164751,Expr);
          }}
         else if ($tmp3 === $mod.TREVKind.revkFloat) {
          try {
            Flo = UInt * RightValue.FloatValue;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170711164800,Expr);
          }}
         else if ($tmp3 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc(UInt * RightValue.Value,-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421164500,Expr);
          }}
         else {
          this.RaiseNotYetImplemented(20170711164810,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkFloat) {
        Flo = LeftValue.FloatValue;
        var $tmp4 = RightValue.Kind;
        if ($tmp4 === $mod.TREVKind.revkInt) {
          try {
            Flo = Flo * RightValue.Int;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20170711164920,Expr);
            } else throw $e
          }}
         else if ($tmp4 === $mod.TREVKind.revkUInt) {
          try {
            Flo = Flo * RightValue.UInt;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170711164940,Expr);
          }}
         else if ($tmp4 === $mod.TREVKind.revkFloat) {
          try {
            Flo = Flo * RightValue.FloatValue;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170711164955,Expr);
          }}
         else if ($tmp4 === $mod.TREVKind.revkCurrency) {
          try {
            Flo = (Flo * RightValue.Value) / 10000;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421164542,Expr);
          }}
         else {
          this.RaiseNotYetImplemented(20170711165004,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkCurrency) {
        aCurrency = rtl.rc(LeftValue.Value,-922337203685477,922337203685477);
        var $tmp5 = RightValue.Kind;
        if ($tmp5 === $mod.TREVKind.revkInt) {
          try {
            aCurrency = rtl.rc(aCurrency * RightValue.Int,-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
              var E = $e;
              this.RaiseOverflowArithmetic(20180421164636,Expr);
            } else throw $e
          }}
         else if ($tmp5 === $mod.TREVKind.revkUInt) {
          try {
            aCurrency = rtl.rc(aCurrency * RightValue.UInt,-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421164654,Expr);
          }}
         else if ($tmp5 === $mod.TREVKind.revkFloat) {
          try {
            Flo = (aCurrency * RightValue.FloatValue) / 10000;
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421164718,Expr);
          }}
         else if ($tmp5 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc((aCurrency * RightValue.Value) / 10000,-922337203685477,922337203685477);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421164806,Expr);
          }}
         else {
          this.RaiseNotYetImplemented(20180421164817,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkSetOfInt) {
        var $tmp6 = RightValue.Kind;
        if ($tmp6 === $mod.TREVKind.revkSetOfInt) {
          LeftSet = LeftValue;
          RightSet = RightValue;
          if (LeftSet.ElKind === $mod.TRESetElKind.revskNone) {
            Result = $mod.TResEvalSet.$create("CreateEmptySameKind",[RightSet])}
           else {
            Result = $mod.TResEvalSet.$create("CreateEmptySameKind",[LeftSet]);
            for (var $l7 = 0, $end8 = rtl.length(LeftSet.Ranges) - 1; $l7 <= $end8; $l7++) {
              i = $l7;
              Int = rtl.rc(LeftSet.Ranges[i].RangeStart,-4503599627370496,4503599627370495);
              while (Int <= LeftSet.Ranges[i].RangeEnd) {
                if (RightSet.IndexOfRange(Int,false) >= 0) Result.Add(Int,Int);
                Int += 1;
              };
            };
          };
        } else {
          this.RaiseNotYetImplemented(20170714110420,Expr,"");
        };
      } else {
        this.RaiseNotYetImplemented(20170525225946,Expr,"");
      };
      return Result;
    };
    this.EvalBinaryDivideExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var Int = 0;
      var UInt = 0;
      var Flo = 0.0;
      var aCurrency = 0;
      Result = null;
      var $tmp1 = LeftValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkInt) {
        Int = rtl.rc(LeftValue.Int,-4503599627370496,4503599627370495);
        var $tmp2 = RightValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkInt) {
          if (RightValue.Int === 0) {
            this.RaiseDivByZero(20170711143925,Expr)}
           else Result = $mod.TResEvalFloat.$create("CreateValue",[Int / RightValue.Int])}
         else if ($tmp2 === $mod.TREVKind.revkUInt) {
          if (RightValue.UInt === 0) {
            this.RaiseDivByZero(20170711144013,Expr)}
           else Result = $mod.TResEvalFloat.$create("CreateValue",[Int / RightValue.UInt])}
         else if ($tmp2 === $mod.TREVKind.revkFloat) {
          try {
            Flo = Int / RightValue.FloatValue;
          } catch ($e) {
            this.RaiseMsg(20170711144525,3069,rtl.getResStr(pas.PasResolveEval,"sDivByZero"),[],Expr);
          };
          Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
        } else if ($tmp2 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc(Math.floor(Math.floor(Int / RightValue.Value) * 10000),-922337203685477,922337203685477);
          } catch ($e) {
            this.RaiseMsg(20180421164915,3069,rtl.getResStr(pas.PasResolveEval,"sDivByZero"),[],Expr);
          };
          Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
        } else {
          this.RaiseNotYetImplemented(20170711144057,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkUInt) {
        UInt = rtl.rc(LeftValue.UInt,0,4503599627370495);
        var $tmp3 = RightValue.Kind;
        if ($tmp3 === $mod.TREVKind.revkInt) {
          if (RightValue.Int === 0) {
            this.RaiseDivByZero(20170711144103,Expr)}
           else Result = $mod.TResEvalFloat.$create("CreateValue",[UInt / RightValue.Int])}
         else if ($tmp3 === $mod.TREVKind.revkUInt) {
          if (RightValue.UInt === 0) {
            this.RaiseDivByZero(20170711144203,Expr)}
           else Result = $mod.TResEvalFloat.$create("CreateValue",[UInt / RightValue.UInt])}
         else if ($tmp3 === $mod.TREVKind.revkFloat) {
          try {
            Flo = UInt / RightValue.FloatValue;
          } catch ($e) {
            this.RaiseMsg(20170711144912,3069,rtl.getResStr(pas.PasResolveEval,"sDivByZero"),[],Expr);
          };
          Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
        } else if ($tmp3 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc(Math.floor(Math.floor(UInt / RightValue.Value) * 10000),-922337203685477,922337203685477);
          } catch ($e) {
            this.RaiseMsg(20180421164959,3069,rtl.getResStr(pas.PasResolveEval,"sDivByZero"),[],Expr);
          };
          Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
        } else {
          this.RaiseNotYetImplemented(20170711144239,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkFloat) {
        Flo = LeftValue.FloatValue;
        var $tmp4 = RightValue.Kind;
        if ($tmp4 === $mod.TREVKind.revkInt) {
          if (RightValue.Int === 0) {
            this.RaiseDivByZero(20170711144954,Expr)}
           else Result = $mod.TResEvalFloat.$create("CreateValue",[Flo / RightValue.Int])}
         else if ($tmp4 === $mod.TREVKind.revkUInt) {
          if (RightValue.UInt === 0) {
            this.RaiseDivByZero(20170711145023,Expr)}
           else Result = $mod.TResEvalFloat.$create("CreateValue",[Flo / RightValue.UInt])}
         else if ($tmp4 === $mod.TREVKind.revkFloat) {
          try {
            Flo = Flo / RightValue.FloatValue;
          } catch ($e) {
            this.RaiseMsg(20170711145040,3069,rtl.getResStr(pas.PasResolveEval,"sDivByZero"),[],Expr);
          };
          Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
        } else if ($tmp4 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc(Math.floor(Flo / RightValue.Value),-922337203685477,922337203685477);
          } catch ($e) {
            this.RaiseMsg(20180421165058,3069,rtl.getResStr(pas.PasResolveEval,"sDivByZero"),[],Expr);
          };
          Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
        } else {
          this.RaiseNotYetImplemented(20170711145050,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkCurrency) {
        aCurrency = rtl.rc(LeftValue.Value,-922337203685477,922337203685477);
        var $tmp5 = RightValue.Kind;
        if ($tmp5 === $mod.TREVKind.revkInt) {
          if (RightValue.Int === 0) {
            this.RaiseDivByZero(20180421165154,Expr)}
           else Result = $mod.TResEvalCurrency.$create("CreateValue",[Math.floor(aCurrency / RightValue.Int)])}
         else if ($tmp5 === $mod.TREVKind.revkUInt) {
          if (RightValue.UInt === 0) {
            this.RaiseDivByZero(20180421165205,Expr)}
           else Result = $mod.TResEvalCurrency.$create("CreateValue",[Math.floor(aCurrency / RightValue.UInt)])}
         else if ($tmp5 === $mod.TREVKind.revkFloat) {
          try {
            aCurrency = rtl.rc(Math.floor(aCurrency / RightValue.FloatValue),-922337203685477,922337203685477);
          } catch ($e) {
            this.RaiseMsg(20180421165237,3069,rtl.getResStr(pas.PasResolveEval,"sDivByZero"),[],Expr);
          };
          Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
        } else if ($tmp5 === $mod.TREVKind.revkCurrency) {
          try {
            aCurrency = rtl.rc(Math.floor((aCurrency / RightValue.Value) * 10000),-922337203685477,922337203685477);
          } catch ($e) {
            this.RaiseMsg(20180421165252,3069,rtl.getResStr(pas.PasResolveEval,"sDivByZero"),[],Expr);
          };
          Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
        } else {
          this.RaiseNotYetImplemented(20180421165301,Expr,"");
        };
      } else {
        this.RaiseNotYetImplemented(20170530102352,Expr,"");
      };
      return Result;
    };
    this.EvalBinaryDivExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var Int = 0;
      var UInt = 0;
      Result = null;
      var $tmp1 = LeftValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkInt) {
        var $tmp2 = RightValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkInt) {
          if (RightValue.Int === 0) {
            this.RaiseDivByZero(20170530102619,Expr)}
           else {
            Int = rtl.rc(Math.floor(LeftValue.Int / RightValue.Int),-4503599627370496,4503599627370495);
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          }}
         else if ($tmp2 === $mod.TREVKind.revkUInt) {
          if (RightValue.UInt === 0) {
            this.RaiseDivByZero(20170530102745,Expr)}
           else {
            if (RightValue.UInt > 4503599627370495) {
              Int = 0}
             else Int = rtl.rc(Math.floor(LeftValue.Int / RightValue.UInt),-4503599627370496,4503599627370495);
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          }}
         else {
          this.RaiseNotYetImplemented(20170530102403,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkUInt) {
        var $tmp3 = RightValue.Kind;
        if ($tmp3 === $mod.TREVKind.revkInt) {
          if (RightValue.Int === 0) {
            this.RaiseDivByZero(20170530103026,Expr)}
           else if (LeftValue.UInt <= 4503599627370495) {
            Int = rtl.rc(Math.floor(LeftValue.UInt / RightValue.Int),-4503599627370496,4503599627370495);
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } else if (RightValue.Int > 0) {
            UInt = rtl.rc(Math.floor(LeftValue.UInt / rtl.rc(RightValue.Int,0,4503599627370495)),0,4503599627370495);
            Result = this.CreateResEvalInt(UInt);
          } else this.RaiseOverflowArithmetic(20170530104315,Expr)}
         else if ($tmp3 === $mod.TREVKind.revkUInt) {
          if (RightValue.Int === 0) {
            this.RaiseDivByZero(20170530103026,Expr)}
           else {
            UInt = rtl.rc(Math.floor(LeftValue.UInt / RightValue.UInt),0,4503599627370495);
            Result = this.CreateResEvalInt(UInt);
          }}
         else {
          this.RaiseNotYetImplemented(20170530102403,Expr,"");
        };
      } else {
        this.RaiseNotYetImplemented(20170530102352,Expr,"");
      };
      return Result;
    };
    this.EvalBinaryModExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var Int = 0;
      var UInt = 0;
      Result = null;
      var $tmp1 = LeftValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkInt) {
        var $tmp2 = RightValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkInt) {
          if (RightValue.Int === 0) {
            this.RaiseDivByZero(20170530104638,Expr)}
           else {
            Int = rtl.rc(LeftValue.Int % RightValue.Int,-4503599627370496,4503599627370495);
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          }}
         else if ($tmp2 === $mod.TREVKind.revkUInt) {
          if (RightValue.UInt === 0) {
            this.RaiseDivByZero(20170530104758,Expr)}
           else {
            if (LeftValue.Int < 0) {
              UInt = rtl.rc(rtl.rc(-LeftValue.Int,0,4503599627370495) % RightValue.UInt,0,4503599627370495)}
             else UInt = rtl.rc(rtl.rc(LeftValue.Int,0,4503599627370495) % RightValue.UInt,0,4503599627370495);
            Result = this.CreateResEvalInt(UInt);
          }}
         else {
          this.RaiseNotYetImplemented(20170530110057,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkUInt) {
        var $tmp3 = RightValue.Kind;
        if ($tmp3 === $mod.TREVKind.revkInt) {
          if (RightValue.Int === 0) {
            this.RaiseDivByZero(20170530110110,Expr)}
           else if (LeftValue.UInt <= 4503599627370495) {
            Int = rtl.rc(LeftValue.UInt % RightValue.Int,-4503599627370496,4503599627370495);
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } else if (RightValue.Int > 0) {
            UInt = rtl.rc(LeftValue.UInt % rtl.rc(RightValue.Int,0,4503599627370495),0,4503599627370495);
            Result = this.CreateResEvalInt(UInt);
          } else this.RaiseOverflowArithmetic(20170530110602,Expr)}
         else if ($tmp3 === $mod.TREVKind.revkUInt) {
          if (RightValue.Int === 0) {
            this.RaiseDivByZero(20170530110609,Expr)}
           else {
            UInt = rtl.rc(LeftValue.UInt % RightValue.UInt,0,4503599627370495);
            Result = this.CreateResEvalInt(UInt);
          }}
         else {
          this.RaiseNotYetImplemented(20170530110633,Expr,"");
        };
      } else {
        this.RaiseNotYetImplemented(20170530110644,Expr,"");
      };
      return Result;
    };
    this.EvalBinaryPowerExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var Int = 0;
      var Flo = 0.0;
      var aCurrency = 0;
      Result = null;
      var $tmp1 = LeftValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkInt) {
        var $tmp2 = RightValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkInt) {
          try {
            Int = pas.System.Trunc(Math.pow(LeftValue.Int,RightValue.Int));
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170530210533,Expr);
          }}
         else if ($tmp2 === $mod.TREVKind.revkUInt) {
          try {
            Int = pas.System.Trunc(Math.pow(LeftValue.Int,RightValue.UInt));
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170530211028,Expr);
          }}
         else if ($tmp2 === $mod.TREVKind.revkFloat) {
          try {
            Flo = Math.pow(LeftValue.Int,RightValue.FloatValue);
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170816154223,Expr);
          }}
         else if ($tmp2 === $mod.TREVKind.revkCurrency) {
          try {
            Flo = Math.pow(LeftValue.Int,RightValue.Value / 10000);
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421165906,Expr);
          }}
         else {
          this.RaiseNotYetImplemented(20170530205640,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkUInt) {
        var $tmp3 = RightValue.Kind;
        if ($tmp3 === $mod.TREVKind.revkInt) {
          try {
            Int = pas.System.Trunc(Math.pow(LeftValue.UInt,RightValue.Int));
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170530211102,Expr);
          }}
         else if ($tmp3 === $mod.TREVKind.revkUInt) {
          try {
            Int = pas.System.Trunc(Math.pow(LeftValue.UInt,RightValue.UInt));
            Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170530211121,Expr);
          }}
         else if ($tmp3 === $mod.TREVKind.revkFloat) {
          try {
            Flo = Math.pow(LeftValue.UInt,RightValue.FloatValue);
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170816154241,Expr);
          }}
         else if ($tmp3 === $mod.TREVKind.revkCurrency) {
          try {
            Flo = Math.pow(LeftValue.UInt,RightValue.Value / 10000);
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421165948,Expr);
          }}
         else {
          this.RaiseNotYetImplemented(20170530211140,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkFloat) {
        var $tmp4 = RightValue.Kind;
        if ($tmp4 === $mod.TREVKind.revkInt) {
          try {
            Flo = Math.pow(LeftValue.FloatValue,RightValue.Int);
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170816153950,Expr);
          }}
         else if ($tmp4 === $mod.TREVKind.revkUInt) {
          try {
            Flo = Math.pow(LeftValue.FloatValue,RightValue.UInt);
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170816154012,Expr);
          }}
         else if ($tmp4 === $mod.TREVKind.revkFloat) {
          try {
            Flo = Math.pow(LeftValue.FloatValue,RightValue.FloatValue);
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20170816154012,Expr);
          }}
         else if ($tmp4 === $mod.TREVKind.revkCurrency) try {
          Flo = Math.pow(LeftValue.FloatValue,RightValue.Value / 10000);
          Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
        } catch ($e) {
          this.RaiseOverflowArithmetic(20180421170016,Expr);
        };
      } else if ($tmp1 === $mod.TREVKind.revkCurrency) {
        var $tmp5 = RightValue.Kind;
        if ($tmp5 === $mod.TREVKind.revkInt) {
          try {
            aCurrency = Math.floor(Math.pow(LeftValue.Value / 10000,RightValue.Int) * 10000);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421170235,Expr);
          }}
         else if ($tmp5 === $mod.TREVKind.revkUInt) {
          try {
            aCurrency = Math.floor(Math.pow(LeftValue.Value / 10000,RightValue.UInt) * 10000);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421170240,Expr);
          }}
         else if ($tmp5 === $mod.TREVKind.revkFloat) {
          try {
            aCurrency = Math.floor(Math.pow(LeftValue.Value / 10000,RightValue.FloatValue) * 10000);
            Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
          } catch ($e) {
            this.RaiseOverflowArithmetic(20180421170254,Expr);
          }}
         else if ($tmp5 === $mod.TREVKind.revkCurrency) try {
          aCurrency = Math.floor(Math.pow(LeftValue.Value / 10000,RightValue.Value / 10000) * 10000);
          Result = $mod.TResEvalCurrency.$create("CreateValue",[aCurrency]);
        } catch ($e) {
          this.RaiseOverflowArithmetic(20180421170311,Expr);
        };
      } else {
        this.RaiseNotYetImplemented(20170816153813,Expr,"");
      };
      return Result;
    };
    this.EvalBinaryShiftExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var Int = 0;
      var UInt = 0;
      var ShiftLeft = false;
      Result = null;
      ShiftLeft = Expr.OpCode === pas.PasTree.TExprOpCode.eopShl;
      var $tmp1 = LeftValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkInt) {
        var $tmp2 = RightValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkInt) {
          if ((RightValue.Int < 0) || (RightValue.Int > 63)) this.EmitRangeCheckConst$1(20170530203840,pas.SysUtils.IntToStr(RightValue.Int),0,63,Expr,pas.PScanner.TMessageType.mtWarning);
          if (ShiftLeft) {
            Int = rtl.rc(LeftValue.Int << rtl.rc(RightValue.Int,0,255),-4503599627370496,4503599627370495)}
           else Int = rtl.rc(LeftValue.Int >>> rtl.rc(RightValue.Int,0,255),-4503599627370496,4503599627370495);
          Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
        } else if ($tmp2 === $mod.TREVKind.revkUInt) {
          if (RightValue.UInt > 63) this.EmitRangeCheckConst$1(20170530203840,pas.SysUtils.IntToStr(RightValue.UInt),0,63,Expr,pas.PScanner.TMessageType.mtWarning);
          if (ShiftLeft) {
            Int = rtl.rc(LeftValue.Int << rtl.rc(RightValue.UInt,0,255),-4503599627370496,4503599627370495)}
           else Int = rtl.rc(LeftValue.Int >>> rtl.rc(RightValue.UInt,0,255),-4503599627370496,4503599627370495);
          Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
        } else {
          this.RaiseNotYetImplemented(20170530205332,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkUInt) {
        var $tmp3 = RightValue.Kind;
        if ($tmp3 === $mod.TREVKind.revkInt) {
          if ((RightValue.Int < 0) || (RightValue.Int > 63)) this.EmitRangeCheckConst$1(20170530205414,pas.SysUtils.IntToStr(RightValue.Int),0,63,Expr,pas.PScanner.TMessageType.mtWarning);
          if (ShiftLeft) {
            UInt = rtl.rc(LeftValue.UInt << rtl.rc(RightValue.Int,0,255),0,4503599627370495)}
           else UInt = rtl.rc(LeftValue.UInt >>> rtl.rc(RightValue.Int,0,255),0,4503599627370495);
          Result = this.CreateResEvalInt(UInt);
        } else if ($tmp3 === $mod.TREVKind.revkUInt) {
          if (RightValue.UInt > 63) this.EmitRangeCheckConst$1(20170530205601,pas.SysUtils.IntToStr(RightValue.UInt),0,63,Expr,pas.PScanner.TMessageType.mtWarning);
          if (ShiftLeft) {
            UInt = rtl.rc(LeftValue.UInt << rtl.rc(RightValue.UInt,0,255),0,4503599627370495)}
           else UInt = rtl.rc(LeftValue.UInt >>> rtl.rc(RightValue.UInt,0,255),0,4503599627370495);
          Result = this.CreateResEvalInt(UInt);
        } else {
          this.RaiseNotYetImplemented(20170530205640,Expr,"");
        };
      } else {
        this.RaiseNotYetImplemented(20170530205646,Expr,"");
      };
      return Result;
    };
    this.EvalBinaryBoolOpExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      Result = null;
      var $tmp1 = LeftValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkBool) {
        var $tmp2 = RightValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkBool) {
          Result = $mod.TResEvalBool.$create("Create$1");
          var $tmp3 = Expr.OpCode;
          if ($tmp3 === pas.PasTree.TExprOpCode.eopAnd) {
            Result.B = LeftValue.B && RightValue.B}
           else if ($tmp3 === pas.PasTree.TExprOpCode.eopOr) {
            Result.B = LeftValue.B || RightValue.B}
           else if ($tmp3 === pas.PasTree.TExprOpCode.eopXor) Result.B = LeftValue.B ^ RightValue.B;
        } else {
          this.RaiseNotYetImplemented(20170531011502,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkInt) {
        var $tmp4 = RightValue.Kind;
        if ($tmp4 === $mod.TREVKind.revkInt) {
          Result = $mod.TResEvalInt.$create("Create$1");
          var $tmp5 = Expr.OpCode;
          if ($tmp5 === pas.PasTree.TExprOpCode.eopAnd) {
            Result.Int = rtl.rc(LeftValue.Int & RightValue.Int,-4503599627370496,4503599627370495)}
           else if ($tmp5 === pas.PasTree.TExprOpCode.eopOr) {
            Result.Int = rtl.rc(LeftValue.Int | RightValue.Int,-4503599627370496,4503599627370495)}
           else if ($tmp5 === pas.PasTree.TExprOpCode.eopXor) Result.Int = rtl.rc(LeftValue.Int ^ RightValue.Int,-4503599627370496,4503599627370495);
        } else {
          this.RaiseNotYetImplemented(20170530211140,Expr,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkUInt) {
        var $tmp6 = RightValue.Kind;
        if ($tmp6 === $mod.TREVKind.revkUInt) {
          Result = $mod.TResEvalUInt.$create("Create$1");
          var $tmp7 = Expr.OpCode;
          if ($tmp7 === pas.PasTree.TExprOpCode.eopAnd) {
            Result.UInt = rtl.rc(LeftValue.UInt & RightValue.UInt,0,4503599627370495)}
           else if ($tmp7 === pas.PasTree.TExprOpCode.eopOr) {
            Result.UInt = rtl.rc(LeftValue.UInt | RightValue.UInt,0,4503599627370495)}
           else if ($tmp7 === pas.PasTree.TExprOpCode.eopXor) Result.UInt = rtl.rc(LeftValue.UInt ^ RightValue.UInt,0,4503599627370495);
        } else {
          this.RaiseNotYetImplemented(20170530211140,Expr,"");
        };
      } else {
        this.RaiseNotYetImplemented(20170530205938,Expr,"");
      };
      return Result;
    };
    this.EvalBinaryNEqualExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var UInt = 0;
      var LeftSet = null;
      var RightSet = null;
      var i = 0;
      Result = $mod.TResEvalBool.$create("Create$1");
      try {
        var $tmp1 = LeftValue.Kind;
        if ($tmp1 === $mod.TREVKind.revkBool) {
          var $tmp2 = RightValue.Kind;
          if ($tmp2 === $mod.TREVKind.revkBool) {
            Result.B = LeftValue.B === RightValue.B}
           else {
            Result = rtl.freeLoc(Result);
            this.RaiseNotYetImplemented(20170531011937,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkInt) {
          var $tmp3 = RightValue.Kind;
          if ($tmp3 === $mod.TREVKind.revkInt) {
            Result.B = LeftValue.Int === RightValue.Int}
           else if ($tmp3 === $mod.TREVKind.revkUInt) {
            Result.B = LeftValue.Int === RightValue.UInt}
           else if ($tmp3 === $mod.TREVKind.revkFloat) {
            Result.B = LeftValue.Int === RightValue.FloatValue}
           else if ($tmp3 === $mod.TREVKind.revkCurrency) {
            Result.B = (LeftValue.Int * 10000) === RightValue.Value}
           else {
            Result = rtl.freeLoc(Result);
            this.RaiseNotYetImplemented(20170531012412,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkUInt) {
          UInt = LeftValue.UInt;
          var $tmp4 = RightValue.Kind;
          if ($tmp4 === $mod.TREVKind.revkInt) {
            Result.B = (UInt <= 4503599627370495) && (UInt === RightValue.Int)}
           else if ($tmp4 === $mod.TREVKind.revkUInt) {
            Result.B = UInt === RightValue.UInt}
           else if ($tmp4 === $mod.TREVKind.revkFloat) {
            Result.B = UInt === RightValue.FloatValue}
           else if ($tmp4 === $mod.TREVKind.revkCurrency) {
            Result.B = (UInt * 10000) === RightValue.Value}
           else {
            Result = rtl.freeLoc(Result);
            this.RaiseNotYetImplemented(20170601122803,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkFloat) {
          var $tmp5 = RightValue.Kind;
          if ($tmp5 === $mod.TREVKind.revkInt) {
            Result.B = LeftValue.FloatValue === RightValue.Int}
           else if ($tmp5 === $mod.TREVKind.revkUInt) {
            Result.B = LeftValue.FloatValue === RightValue.UInt}
           else if ($tmp5 === $mod.TREVKind.revkFloat) {
            Result.B = LeftValue.FloatValue === RightValue.FloatValue}
           else if ($tmp5 === $mod.TREVKind.revkCurrency) {
            Result.B = (LeftValue.FloatValue * 10000) === RightValue.Value}
           else {
            Result = rtl.freeLoc(Result);
            this.RaiseNotYetImplemented(20170601122806,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkCurrency) {
          var $tmp6 = RightValue.Kind;
          if ($tmp6 === $mod.TREVKind.revkInt) {
            Result.B = LeftValue.Value === (RightValue.Int * 10000)}
           else if ($tmp6 === $mod.TREVKind.revkUInt) {
            Result.B = LeftValue.Value === (RightValue.UInt * 10000)}
           else if ($tmp6 === $mod.TREVKind.revkFloat) {
            Result.B = LeftValue.Value === (RightValue.FloatValue * 10000)}
           else if ($tmp6 === $mod.TREVKind.revkCurrency) {
            Result.B = LeftValue.Value === RightValue.Value}
           else {
            Result = rtl.freeLoc(Result);
            this.RaiseNotYetImplemented(20180421165438,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkUnicodeString) {
          var $tmp7 = RightValue.Kind;
          if ($tmp7 === $mod.TREVKind.revkUnicodeString) {
            Result.B = LeftValue.S === RightValue.S}
           else {
            Result = rtl.freeLoc(Result);
            this.RaiseNotYetImplemented(20170711175409,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkSetOfInt) {
          var $tmp8 = RightValue.Kind;
          if ($tmp8 === $mod.TREVKind.revkSetOfInt) {
            LeftSet = LeftValue;
            RightSet = RightValue;
            if (LeftSet.ElKind === $mod.TRESetElKind.revskNone) {
              Result.B = rtl.length(RightSet.Ranges) === 0}
             else if (RightSet.ElKind === $mod.TRESetElKind.revskNone) {
              Result.B = rtl.length(LeftSet.Ranges) === 0}
             else if (rtl.length(LeftSet.Ranges) !== rtl.length(RightSet.Ranges)) {
              Result.B = false}
             else {
              Result.B = true;
              for (var $l9 = 0, $end10 = rtl.length(LeftSet.Ranges) - 1; $l9 <= $end10; $l9++) {
                i = $l9;
                if ((LeftSet.Ranges[i].RangeStart !== RightSet.Ranges[i].RangeStart) || (LeftSet.Ranges[i].RangeEnd !== RightSet.Ranges[i].RangeEnd)) {
                  Result.B = false;
                  break;
                };
              };
            };
          } else {
            this.RaiseNotYetImplemented(20170714120756,Expr,"");
          };
        } else {
          Result = rtl.freeLoc(Result);
          this.RaiseNotYetImplemented(20170531011931,Expr,"");
        };
      } catch ($e) {
        if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
          this.RaiseOverflowArithmetic(20170601132729,Expr)}
         else if (pas.SysUtils.ERangeError.isPrototypeOf($e)) {
          this.RaiseRangeCheck(20170601132740,Expr)}
         else throw $e
      };
      if (Expr.OpCode === pas.PasTree.TExprOpCode.eopNotEqual) Result.B = !Result.B;
      return Result;
    };
    this.EvalBinaryLessGreaterExpr = function (Expr, LeftValue, RightValue) {
      var Self = this;
      var Result = null;
      function CmpUnicode(LeftUnicode, RightUnicode) {
        var $tmp1 = Expr.OpCode;
        if ($tmp1 === pas.PasTree.TExprOpCode.eopLessThan) {
          Result.B = LeftUnicode < RightUnicode}
         else if ($tmp1 === pas.PasTree.TExprOpCode.eopGreaterThan) {
          Result.B = LeftUnicode > RightUnicode}
         else if ($tmp1 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
          Result.B = LeftUnicode <= RightUnicode}
         else if ($tmp1 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftUnicode >= RightUnicode;
      };
      var LeftSet = null;
      var RightSet = null;
      var i = 0;
      var Int = 0;
      Result = $mod.TResEvalBool.$create("Create$1");
      try {
        var $tmp1 = LeftValue.Kind;
        if ($tmp1 === $mod.TREVKind.revkInt) {
          var $tmp2 = RightValue.Kind;
          if ($tmp2 === $mod.TREVKind.revkInt) {
            var $tmp3 = Expr.OpCode;
            if ($tmp3 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.Int < RightValue.Int}
             else if ($tmp3 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.Int > RightValue.Int}
             else if ($tmp3 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.Int <= RightValue.Int}
             else if ($tmp3 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.Int >= RightValue.Int;
          } else if ($tmp2 === $mod.TREVKind.revkUInt) {
            var $tmp4 = Expr.OpCode;
            if ($tmp4 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.Int < RightValue.UInt}
             else if ($tmp4 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.Int > RightValue.UInt}
             else if ($tmp4 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.Int <= RightValue.UInt}
             else if ($tmp4 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.Int >= RightValue.UInt;
          } else if ($tmp2 === $mod.TREVKind.revkFloat) {
            var $tmp5 = Expr.OpCode;
            if ($tmp5 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.Int < RightValue.FloatValue}
             else if ($tmp5 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.Int > RightValue.FloatValue}
             else if ($tmp5 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.Int <= RightValue.FloatValue}
             else if ($tmp5 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.Int >= RightValue.FloatValue;
          } else if ($tmp2 === $mod.TREVKind.revkCurrency) {
            var $tmp6 = Expr.OpCode;
            if ($tmp6 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = (LeftValue.Int * 10000) < RightValue.Value}
             else if ($tmp6 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = (LeftValue.Int * 10000) > RightValue.Value}
             else if ($tmp6 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = (LeftValue.Int * 10000) <= RightValue.Value}
             else if ($tmp6 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = (LeftValue.Int * 10000) >= RightValue.Value;
          } else {
            Result = rtl.freeLoc(Result);
            Self.RaiseNotYetImplemented(20170601122512,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkUInt) {
          var $tmp7 = RightValue.Kind;
          if ($tmp7 === $mod.TREVKind.revkInt) {
            var $tmp8 = Expr.OpCode;
            if ($tmp8 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.UInt < RightValue.Int}
             else if ($tmp8 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.UInt > RightValue.Int}
             else if ($tmp8 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.UInt <= RightValue.Int}
             else if ($tmp8 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.UInt >= RightValue.Int;
          } else if ($tmp7 === $mod.TREVKind.revkUInt) {
            var $tmp9 = Expr.OpCode;
            if ($tmp9 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.UInt < RightValue.UInt}
             else if ($tmp9 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.UInt > RightValue.UInt}
             else if ($tmp9 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.UInt <= RightValue.UInt}
             else if ($tmp9 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.UInt >= RightValue.UInt;
          } else if ($tmp7 === $mod.TREVKind.revkFloat) {
            var $tmp10 = Expr.OpCode;
            if ($tmp10 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.UInt < RightValue.FloatValue}
             else if ($tmp10 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.UInt > RightValue.FloatValue}
             else if ($tmp10 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.UInt <= RightValue.FloatValue}
             else if ($tmp10 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.UInt >= RightValue.FloatValue;
          } else if ($tmp7 === $mod.TREVKind.revkCurrency) {
            var $tmp11 = Expr.OpCode;
            if ($tmp11 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = (LeftValue.UInt * 10000) < RightValue.Value}
             else if ($tmp11 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = (LeftValue.UInt * 10000) > RightValue.Value}
             else if ($tmp11 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = (LeftValue.UInt * 10000) <= RightValue.Value}
             else if ($tmp11 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = (LeftValue.UInt * 10000) >= RightValue.Value;
          } else {
            Result = rtl.freeLoc(Result);
            Self.RaiseNotYetImplemented(20170601133222,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkFloat) {
          var $tmp12 = RightValue.Kind;
          if ($tmp12 === $mod.TREVKind.revkInt) {
            var $tmp13 = Expr.OpCode;
            if ($tmp13 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.FloatValue < RightValue.Int}
             else if ($tmp13 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.FloatValue > RightValue.Int}
             else if ($tmp13 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.FloatValue <= RightValue.Int}
             else if ($tmp13 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.FloatValue >= RightValue.Int;
          } else if ($tmp12 === $mod.TREVKind.revkUInt) {
            var $tmp14 = Expr.OpCode;
            if ($tmp14 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.FloatValue < RightValue.UInt}
             else if ($tmp14 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.FloatValue > RightValue.UInt}
             else if ($tmp14 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.FloatValue <= RightValue.UInt}
             else if ($tmp14 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.FloatValue >= RightValue.UInt;
          } else if ($tmp12 === $mod.TREVKind.revkFloat) {
            var $tmp15 = Expr.OpCode;
            if ($tmp15 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.FloatValue < RightValue.FloatValue}
             else if ($tmp15 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.FloatValue > RightValue.FloatValue}
             else if ($tmp15 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.FloatValue <= RightValue.FloatValue}
             else if ($tmp15 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.FloatValue >= RightValue.FloatValue;
          } else if ($tmp12 === $mod.TREVKind.revkCurrency) {
            var $tmp16 = Expr.OpCode;
            if ($tmp16 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = (LeftValue.FloatValue * 10000) < RightValue.Value}
             else if ($tmp16 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = (LeftValue.FloatValue * 10000) > RightValue.Value}
             else if ($tmp16 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = (LeftValue.FloatValue * 10000) <= RightValue.Value}
             else if ($tmp16 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = (LeftValue.FloatValue * 10000) >= RightValue.Value;
          } else {
            Result = rtl.freeLoc(Result);
            Self.RaiseNotYetImplemented(20170601133421,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkCurrency) {
          var $tmp17 = RightValue.Kind;
          if ($tmp17 === $mod.TREVKind.revkInt) {
            var $tmp18 = Expr.OpCode;
            if ($tmp18 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.Value < (RightValue.Int * 10000)}
             else if ($tmp18 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.Value > (RightValue.Int * 10000)}
             else if ($tmp18 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.Value <= (RightValue.Int * 10000)}
             else if ($tmp18 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.Value >= (RightValue.Int * 10000);
          } else if ($tmp17 === $mod.TREVKind.revkUInt) {
            var $tmp19 = Expr.OpCode;
            if ($tmp19 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.Value < (RightValue.UInt * 10000)}
             else if ($tmp19 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.Value > (RightValue.UInt * 10000)}
             else if ($tmp19 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.Value <= (RightValue.UInt * 10000)}
             else if ($tmp19 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.Value >= (RightValue.UInt * 10000);
          } else if ($tmp17 === $mod.TREVKind.revkFloat) {
            var $tmp20 = Expr.OpCode;
            if ($tmp20 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.Value < (RightValue.FloatValue * 10000)}
             else if ($tmp20 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.Value > (RightValue.FloatValue * 10000)}
             else if ($tmp20 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.Value <= (RightValue.FloatValue * 10000)}
             else if ($tmp20 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.Value >= (RightValue.FloatValue * 10000);
          } else if ($tmp17 === $mod.TREVKind.revkCurrency) {
            var $tmp21 = Expr.OpCode;
            if ($tmp21 === pas.PasTree.TExprOpCode.eopLessThan) {
              Result.B = LeftValue.Value < RightValue.Value}
             else if ($tmp21 === pas.PasTree.TExprOpCode.eopGreaterThan) {
              Result.B = LeftValue.Value > RightValue.Value}
             else if ($tmp21 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = LeftValue.Value <= RightValue.Value}
             else if ($tmp21 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) Result.B = LeftValue.Value >= RightValue.Value;
          } else {
            Result = rtl.freeLoc(Result);
            Self.RaiseNotYetImplemented(20180421165752,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkUnicodeString) {
          var $tmp22 = RightValue.Kind;
          if ($tmp22 === $mod.TREVKind.revkUnicodeString) {
            CmpUnicode(LeftValue.S,RightValue.S)}
           else {
            Result = rtl.freeLoc(Result);
            Self.RaiseNotYetImplemented(20170711210730,Expr,"");
          };
        } else if ($tmp1 === $mod.TREVKind.revkSetOfInt) {
          var $tmp23 = RightValue.Kind;
          if ($tmp23 === $mod.TREVKind.revkSetOfInt) {
            LeftSet = LeftValue;
            RightSet = RightValue;
            var $tmp24 = Expr.OpCode;
            if ($tmp24 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) {
              Result.B = true;
              for (var $l25 = 0, $end26 = rtl.length(RightSet.Ranges) - 1; $l25 <= $end26; $l25++) {
                i = $l25;
                Int = rtl.rc(RightSet.Ranges[i].RangeStart,-4503599627370496,4503599627370495);
                while (Int <= RightSet.Ranges[i].RangeEnd) {
                  if (LeftSet.IndexOfRange(Int,false) < 0) {
                    Result.B = false;
                    break;
                  };
                  Int += 1;
                };
              };
            } else if ($tmp24 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
              Result.B = true;
              for (var $l27 = 0, $end28 = rtl.length(LeftSet.Ranges) - 1; $l27 <= $end28; $l27++) {
                i = $l27;
                Int = rtl.rc(LeftSet.Ranges[i].RangeStart,-4503599627370496,4503599627370495);
                while (Int <= LeftSet.Ranges[i].RangeEnd) {
                  if (RightSet.IndexOfRange(Int,false) < 0) {
                    Result.B = false;
                    break;
                  };
                  Int += 1;
                };
              };
            } else {
              Result = rtl.freeLoc(Result);
              Self.RaiseNotYetImplemented(20170714122121,Expr,"");
            };
          } else {
            Result = rtl.freeLoc(Result);
            Self.RaiseNotYetImplemented(20170714121925,Expr,"");
          };
        } else {
          Result = rtl.freeLoc(Result);
          Self.RaiseNotYetImplemented(20170601122529,Expr,"");
        };
      } catch ($e) {
        if (pas.SysUtils.EOverflow.isPrototypeOf($e)) {
          Self.RaiseOverflowArithmetic(20170601132956,Expr)}
         else if (pas.SysUtils.ERangeError.isPrototypeOf($e)) {
          Self.RaiseRangeCheck(20170601132958,Expr)}
         else throw $e
      };
      return Result;
    };
    this.EvalBinaryInExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var RightSet = null;
      var Int = 0;
      Result = null;
      var $tmp1 = RightValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkSetOfInt) {
        RightSet = RightValue;
        var $tmp2 = LeftValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkBool) {
          Int = rtl.rc(LeftValue.B + 0,-4503599627370496,4503599627370495)}
         else if ($tmp2 === $mod.TREVKind.revkInt) {
          Int = rtl.rc(LeftValue.Int,-4503599627370496,4503599627370495)}
         else if ($tmp2 === $mod.TREVKind.revkUInt) {
          if (LeftValue.UInt > 4503599627370495) {
            this.RaiseMsg(20170714123700,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],Expr)}
           else Int = rtl.rc(LeftValue.UInt,-4503599627370496,4503599627370495)}
         else if ($tmp2 === $mod.TREVKind.revkUnicodeString) {
          if (LeftValue.S.length !== 1) {
            this.RaiseMsg(20170714124320,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["char","unicodestring"],Expr)}
           else Int = rtl.rc(LeftValue.S.charAt(0).charCodeAt(),-4503599627370496,4503599627370495)}
         else if ($tmp2 === $mod.TREVKind.revkEnum) {
          Int = rtl.rc(LeftValue.Index,-4503599627370496,4503599627370495)}
         else {
          this.RaiseNotYetImplemented(20170714123412,Expr,"");
        };
        Result = $mod.TResEvalBool.$create("CreateValue",[RightSet.IndexOfRange(Int,false) >= 0]);
      } else {
        this.RaiseNotYetImplemented(20170714123409,Expr,"");
      };
      return Result;
    };
    this.EvalBinarySymmetricaldifferenceExpr = function (Expr, LeftValue, RightValue) {
      var Result = null;
      var LeftSet = null;
      var RightSet = null;
      var i = 0;
      var Int = 0;
      var $tmp1 = LeftValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkSetOfInt) {
        var $tmp2 = RightValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkSetOfInt) {
          LeftSet = LeftValue;
          RightSet = RightValue;
          if (LeftSet.ElKind === $mod.TRESetElKind.revskNone) {
            Result = RightSet.Clone()}
           else {
            Result = $mod.TResEvalSet.$create("CreateEmptySameKind",[LeftSet]);
            for (var $l3 = 0, $end4 = rtl.length(LeftSet.Ranges) - 1; $l3 <= $end4; $l3++) {
              i = $l3;
              Int = rtl.rc(LeftSet.Ranges[i].RangeStart,-4503599627370496,4503599627370495);
              while (Int <= LeftSet.Ranges[i].RangeEnd) {
                if (RightSet.IndexOfRange(Int,false) < 0) Result.Add(Int,Int);
                Int += 1;
              };
            };
            for (var $l5 = 0, $end6 = rtl.length(RightSet.Ranges) - 1; $l5 <= $end6; $l5++) {
              i = $l5;
              Int = rtl.rc(RightSet.Ranges[i].RangeStart,-4503599627370496,4503599627370495);
              while (Int <= RightSet.Ranges[i].RangeEnd) {
                if (LeftSet.IndexOfRange(Int,false) < 0) Result.Add(Int,Int);
                Int += 1;
              };
            };
          };
        } else {
          this.RaiseNotYetImplemented(20170714114144,Expr,"");
        };
      } else {
        this.RaiseNotYetImplemented(20170714114119,Expr,"");
      };
      return Result;
    };
    this.EvalParamsExpr = function (Expr, Flags) {
      var Result = null;
      Result = this.FOnEvalParams(this,Expr,rtl.refSet(Flags));
      if (Result !== null) return Result;
      var $tmp1 = Expr.Kind;
      if ($tmp1 === pas.PasTree.TPasExprKind.pekArrayParams) {
        Result = this.EvalArrayParamsExpr(Expr,rtl.refSet(Flags))}
       else if ($tmp1 === pas.PasTree.TPasExprKind.pekSet) Result = this.EvalSetParamsExpr(Expr,rtl.refSet(Flags));
      if (Result === null) {
        if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TResEvalFlag.refConst,$mod.TResEvalFlag.refConstExt),Flags),{})) this.RaiseConstantExprExp(20170713124038,Expr);
        return Result;
      };
      return Result;
    };
    this.EvalArrayParamsExpr = function (Expr, Flags) {
      var Result = null;
      var ArrayValue = null;
      var IndexValue = null;
      var Int = 0;
      var Param0 = null;
      var MaxIndex = 0;
      Result = null;
      ArrayValue = this.Eval(Expr.Value,rtl.refSet(Flags));
      if (ArrayValue === null) {
        if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TResEvalFlag.refConst,$mod.TResEvalFlag.refConstExt),Flags),{})) this.RaiseConstantExprExp(20170711181321,Expr.Value);
        return Result;
      };
      IndexValue = null;
      try {
        var $tmp1 = ArrayValue.Kind;
        if ($tmp1 === $mod.TREVKind.revkUnicodeString) {
          Param0 = Expr.Params[0];
          IndexValue = this.Eval(Param0,rtl.refSet(Flags));
          if (IndexValue === null) {
            if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TResEvalFlag.refConst,$mod.TResEvalFlag.refConstExt),Flags),{})) this.RaiseConstantExprExp(20170711181603,Param0);
            return Result;
          };
          var $tmp2 = IndexValue.Kind;
          if ($tmp2 === $mod.TREVKind.revkInt) {
            Int = rtl.rc(IndexValue.Int,-4503599627370496,4503599627370495)}
           else if ($tmp2 === $mod.TREVKind.revkUInt) {
            if (IndexValue.UInt > 4503599627370495) {
              this.RaiseRangeCheck(20170711182006,Param0)}
             else Int = rtl.rc(IndexValue.UInt,-4503599627370496,4503599627370495)}
           else {
            this.RaiseNotYetImplemented(20170711182100,Expr,"");
          };
          MaxIndex = rtl.rc(ArrayValue.S.length,-2147483648,2147483647);
          if ((Int < 1) || (Int > MaxIndex)) this.EmitRangeCheckConst(20170711183058,pas.SysUtils.IntToStr(Int),"1",pas.SysUtils.IntToStr(MaxIndex),Param0,pas.PScanner.TMessageType.mtError);
          Result = $mod.TResEvalUTF16.$create("CreateValue",[ArrayValue.S.charAt(Int - 1)]);
          return Result;
        } else {
          this.RaiseNotYetImplemented(20170711181507,Expr,"");
        };
        if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TResEvalFlag.refConst,$mod.TResEvalFlag.refConstExt),Flags),{})) this.RaiseConstantExprExp(20170522173150,Expr);
      } finally {
        $mod.ReleaseEvalValue({get: function () {
            return ArrayValue;
          }, set: function (v) {
            ArrayValue = v;
          }});
        $mod.ReleaseEvalValue({get: function () {
            return IndexValue;
          }, set: function (v) {
            IndexValue = v;
          }});
      };
      return Result;
    };
    this.EvalSetParamsExpr = function (Expr, Flags) {
      var Result = null;
      Result = this.EvalSetExpr(Expr,Expr.Params,rtl.refSet(Flags));
      return Result;
    };
    this.EvalSetExpr = function (Expr, ExprArray, Flags) {
      var Result = null;
      var i = 0;
      var RangeStart = 0;
      var RangeEnd = 0;
      var Value = null;
      var ok = false;
      var OnlyConstElements = false;
      var El = null;
      Result = $mod.TResEvalSet.$create("Create$1");
      if (Expr === null) ;
      Value = null;
      OnlyConstElements = true;
      ok = false;
      try {
        for (var $l1 = 0, $end2 = rtl.length(ExprArray) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          El = rtl.rcArrR(ExprArray,i);
          Value = this.Eval(El,rtl.refSet(Flags));
          if (Value === null) {
            OnlyConstElements = false;
            continue;
          };
          var $tmp3 = Value.Kind;
          if ($tmp3 === $mod.TREVKind.revkBool) {
            if (Result.ElKind === $mod.TRESetElKind.revskNone) {
              Result.ElKind = rtl.rc($mod.TRESetElKind.revskBool,0,4)}
             else if (Result.ElKind !== $mod.TRESetElKind.revskBool) this.RaiseNotYetImplemented(20170714132843,El,"");
            RangeStart = rtl.rc(Value.B + 0,-4503599627370496,4503599627370495);
            RangeEnd = rtl.rc(RangeStart,-4503599627370496,4503599627370495);
          } else if ($tmp3 === $mod.TREVKind.revkInt) {
            if (Result.ElKind === $mod.TRESetElKind.revskNone) {
              Result.ElKind = rtl.rc($mod.TRESetElKind.revskInt,0,4)}
             else if (Result.ElKind !== $mod.TRESetElKind.revskInt) this.RaiseNotYetImplemented(20170713201208,El,"");
            RangeStart = rtl.rc(Value.Int,-4503599627370496,4503599627370495);
            RangeEnd = rtl.rc(RangeStart,-4503599627370496,4503599627370495);
          } else if ($tmp3 === $mod.TREVKind.revkUInt) {
            if (Result.ElKind === $mod.TRESetElKind.revskNone) {
              Result.ElKind = rtl.rc($mod.TRESetElKind.revskInt,0,4)}
             else if (Result.ElKind !== $mod.TRESetElKind.revskInt) {
              this.RaiseNotYetImplemented(20170713201230,El,"")}
             else if (Value.UInt > 4503599627370495) this.EmitRangeCheckConst(20170713201306,Value.AsString(),"0",pas.SysUtils.IntToStr(4503599627370495),El,pas.PScanner.TMessageType.mtError);
            RangeStart = rtl.rc(Value.UInt,-4503599627370496,4503599627370495);
            RangeEnd = rtl.rc(RangeStart,-4503599627370496,4503599627370495);
          } else if ($tmp3 === $mod.TREVKind.revkUnicodeString) {
            if (Result.ElKind === $mod.TRESetElKind.revskNone) {
              Result.ElKind = rtl.rc($mod.TRESetElKind.revskChar,0,4)}
             else if (Result.ElKind !== $mod.TRESetElKind.revskChar) this.RaiseNotYetImplemented(20170713201516,El,"");
            if (Value.S.length !== 1) {
              $mod.ReleaseEvalValue({get: function () {
                  return Result;
                }, set: function (v) {
                  Result = v;
                }});
              return Result;
            };
            RangeStart = rtl.rc(Value.S.charAt(0).charCodeAt(),-4503599627370496,4503599627370495);
            RangeEnd = rtl.rc(RangeStart,-4503599627370496,4503599627370495);
          } else if ($tmp3 === $mod.TREVKind.revkEnum) {
            if (Result.ElKind === $mod.TRESetElKind.revskNone) {
              Result.ElKind = rtl.rc($mod.TRESetElKind.revskEnum,0,4);
              Result.ElType = rtl.as(Value.IdentEl.FParent,pas.PasTree.TPasEnumType);
            } else if (Result.ElKind !== $mod.TRESetElKind.revskEnum) {
              this.RaiseNotYetImplemented(20170713143559,El,"")}
             else if (Result.ElType !== Value.ElType) this.RaiseNotYetImplemented(20170713201021,El,"");
            RangeStart = rtl.rc(Value.Index,-4503599627370496,4503599627370495);
            RangeEnd = rtl.rc(RangeStart,-4503599627370496,4503599627370495);
          } else if ($tmp3 === $mod.TREVKind.revkRangeInt) {
            if (Result.ElKind === $mod.TRESetElKind.revskNone) {
              Result.ElKind = rtl.rc(Value.ElKind,0,4);
              if (Result.ElKind === $mod.TRESetElKind.revskEnum) Result.ElType = Value.ElType;
            } else if (Result.ElKind !== Value.ElKind) this.RaiseNotYetImplemented(20170714101910,El,"");
            RangeStart = rtl.rc(Value.RangeStart,-4503599627370496,4503599627370495);
            RangeEnd = rtl.rc(Value.RangeEnd,-4503599627370496,4503599627370495);
          } else if ($tmp3 === $mod.TREVKind.revkRangeUInt) {
            if (Result.ElKind === $mod.TRESetElKind.revskNone) {
              Result.ElKind = rtl.rc($mod.TRESetElKind.revskInt,0,4)}
             else if (Result.ElKind !== $mod.TRESetElKind.revskInt) {
              this.RaiseNotYetImplemented(20170713202934,El,"")}
             else if (Value.RangeEnd > 4503599627370495) this.EmitRangeCheckConst(20170713203034,Value.AsString(),"0",pas.SysUtils.IntToStr(4503599627370495),El,pas.PScanner.TMessageType.mtError);
            RangeStart = rtl.rc(Value.RangeStart,-4503599627370496,4503599627370495);
            RangeEnd = rtl.rc(Value.RangeEnd,-4503599627370496,4503599627370495);
          } else {
            this.RaiseNotYetImplemented(20170713143422,El,"");
          };
          if (Result.Intersects(RangeStart,RangeEnd) >= 0) {
            this.RaiseMsg(20170714141326,3070,rtl.getResStr(pas.PasResolveEval,"sRangeCheckInSetConstructor"),[],El);
          };
          Result.Add(RangeStart,RangeEnd);
          $mod.ReleaseEvalValue({get: function () {
              return Value;
            }, set: function (v) {
              Value = v;
            }});
        };
        ok = OnlyConstElements;
      } finally {
        $mod.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
        if (!ok) $mod.ReleaseEvalValue({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      };
      return Result;
    };
    this.EvalArrayValuesExpr = function (Expr, Flags) {
      var Result = null;
      Result = this.EvalSetExpr(Expr,Expr.Values,rtl.refSet(Flags));
      return Result;
    };
    this.ExprStringToOrd = function (Value, PosEl) {
      var Result = 0;
      var U = "";
      if (Value.Kind === $mod.TREVKind.revkUnicodeString) {
        U = Value.S;
        if (U.length !== 1) {
          this.RaiseMsg(20170522221358,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["char","string"],PosEl)}
         else Result = U.charCodeAt(1 - 1);
      } else this.RaiseNotYetImplemented(20170522220959,PosEl,"");
      return Result;
    };
    this.EvalPrimitiveExprString = function (Expr) {
      var Self = this;
      var Result = null;
      function rangeError(id) {
        Result = rtl.freeLoc(Result);
        Self.RaiseRangeCheck(id,Expr);
      };
      function Add(h) {
        Result.S = Result.S + h;
      };
      function AddHash(u) {
        Result.S = Result.S + String.fromCharCode(u);
      };
      var p = 0;
      var StartP = 0;
      var l = 0;
      var c = "";
      var u = 0;
      var S = "";
      Result = null;
      S = Expr.Value;
      l = S.length;
      if (l === 0) Self.RaiseInternalError(20170523113809,"");
      Result = $mod.TResEvalUTF16.$create("Create$1");
      p = 1;
      while (p <= l) {
        var $tmp1 = S.charAt(p - 1);
        if ($tmp1 === "'") {
          p += 1;
          StartP = p;
          do {
            if (p > l) Self.RaiseInternalError(20170523113938,"");
            c = S.charAt(p - 1);
            var $tmp2 = c;
            if ($tmp2 === "'") {
              if (p > StartP) Add(pas.System.Copy(S,StartP,p - StartP));
              p += 1;
              StartP = p;
              if ((p > l) || (S.charAt(p - 1) !== "'")) break;
              Add("'");
              p += 1;
              StartP = p;
            } else {
              p += 1;
            };
          } while (!false);
          if (p > StartP) Add(pas.System.Copy(S,StartP,p - StartP));
        } else if ($tmp1 === "#") {
          p += 1;
          if (p > l) Self.RaiseInternalError(20181016121354,"");
          if (S.charAt(p - 1) === "$") {
            p += 1;
            StartP = p;
            u = 0;
            while (p <= l) {
              c = S.charAt(p - 1);
              var $tmp3 = c;
              if (($tmp3 >= "0") && ($tmp3 <= "9")) {
                u = ((u * 16) + c.charCodeAt()) - "0".charCodeAt()}
               else if (($tmp3 >= "a") && ($tmp3 <= "f")) {
                u = (((u * 16) + c.charCodeAt()) - "a".charCodeAt()) + 10}
               else if (($tmp3 >= "A") && ($tmp3 <= "F")) {
                u = (((u * 16) + c.charCodeAt()) - "A".charCodeAt()) + 10}
               else {
                break;
              };
              if (u > 0x10FFFF) rangeError(20170523115712);
              p += 1;
            };
            if (p === StartP) Self.RaiseInternalError(20170207164956,"");
            if (u > 0xffff) {
              u -= 0x10000;
              AddHash(0xD800 + (u >>> 10));
              AddHash(0xDC00 + (u & 0x3ff));
            } else AddHash(u);
          } else {
            StartP = p;
            u = 0;
            while (p <= l) {
              c = S.charAt(p - 1);
              var $tmp4 = c;
              if (($tmp4 >= "0") && ($tmp4 <= "9")) {
                u = ((u * 10) + c.charCodeAt()) - "0".charCodeAt()}
               else {
                break;
              };
              if (u > 0xffff) rangeError(20170523123137);
              p += 1;
            };
            if (p === StartP) Self.RaiseInternalError(20170523123806,"");
            AddHash(u);
          };
        } else if ($tmp1 === "^") {
          p += 1;
          if (p > l) Self.RaiseInternalError(20181016121520,"");
          c = S.charAt(p - 1);
          var $tmp5 = c;
          if (($tmp5 >= "a") && ($tmp5 <= "z")) {
            AddHash((c.charCodeAt() - "a".charCodeAt()) + 1)}
           else if (($tmp5 >= "A") && ($tmp5 <= "Z")) {
            AddHash((c.charCodeAt() - "A".charCodeAt()) + 1)}
           else {
            Self.RaiseInternalError(20170523123809,"");
          };
          p += 1;
        } else {
          Self.RaiseNotYetImplemented(20170523123815,Expr,"ord=" + pas.SysUtils.IntToStr(S.charCodeAt(p - 1)));
        };
      };
      return Result;
    };
    this.PredBool = function (Value, ErrorEl) {
      if (Value.B === false) this.EmitRangeCheckConst(20170624140251,Value.AsString(),"true","true",ErrorEl,pas.PScanner.TMessageType.mtWarning);
      Value.B = !Value.B;
    };
    this.SuccBool = function (Value, ErrorEl) {
      if (Value.B === true) this.EmitRangeCheckConst(20170624142316,Value.AsString(),"false","false",ErrorEl,pas.PScanner.TMessageType.mtWarning);
      Value.B = !Value.B;
    };
    this.PredInt = function (Value, ErrorEl) {
      if (Value.Int === -4503599627370496) {
        this.EmitRangeCheckConst(20170624142511,pas.SysUtils.IntToStr(Value.Int),pas.SysUtils.IntToStr(-4503599627370496 + 1),pas.SysUtils.IntToStr(4503599627370495),ErrorEl,pas.PScanner.TMessageType.mtWarning);
        Value.Int = 4503599627370495;
      } else Value.Int -= 1;
    };
    this.SuccInt = function (Value, ErrorEl) {
      if (Value.Int === 4503599627370495) {
        this.EmitRangeCheckConst(20170624142920,pas.SysUtils.IntToStr(Value.Int),pas.SysUtils.IntToStr(-4503599627370496),pas.SysUtils.IntToStr(4503599627370495 - 1),ErrorEl,pas.PScanner.TMessageType.mtWarning);
        Value.Int = -4503599627370496;
      } else Value.Int += 1;
    };
    this.PredUInt = function (Value, ErrorEl) {
      if (Value.UInt === 0) {
        this.EmitRangeCheckConst(20170624143122,pas.SysUtils.IntToStr(Value.UInt),pas.SysUtils.IntToStr(0 + 1),pas.SysUtils.IntToStr(4503599627370495),ErrorEl,pas.PScanner.TMessageType.mtWarning);
        Value.UInt = 4503599627370495;
      } else Value.UInt -= 1;
    };
    this.SuccUInt = function (Value, ErrorEl) {
      if (Value.UInt === 4503599627370495) {
        this.EmitRangeCheckConst(20170624142921,pas.SysUtils.IntToStr(Value.UInt),pas.SysUtils.IntToStr(0),pas.SysUtils.IntToStr(4503599627370495 - 1),ErrorEl,pas.PScanner.TMessageType.mtWarning);
        Value.UInt = 0;
      } else Value.UInt += 1;
    };
    this.PredUnicodeString = function (Value, ErrorEl) {
      if (Value.S.length !== 1) this.RaiseRangeCheck(20170624150703,ErrorEl);
      if (Value.S.charAt(0) === "\x00") {
        this.EmitRangeCheckConst(20170624150710,Value.AsString(),"#1","#65535",ErrorEl,pas.PScanner.TMessageType.mtWarning);
        Value.S = "\uFFFF";
      } else Value.S = String.fromCharCode(Value.S.charAt(0).charCodeAt() - 1);
    };
    this.SuccUnicodeString = function (Value, ErrorEl) {
      if (Value.S.length !== 1) this.RaiseRangeCheck(20170624150849,ErrorEl);
      if (Value.S.charAt(0) === "\uFFFF") {
        this.EmitRangeCheckConst(20170624150910,Value.AsString(),"#0","#65534",ErrorEl,pas.PScanner.TMessageType.mtWarning);
        Value.S = "\x00";
      } else Value.S = String.fromCharCode(Value.S.charAt(0).charCodeAt() + 1);
    };
    this.PredEnum = function (Value, ErrorEl) {
      var EnumType = null;
      EnumType = rtl.as(Value.ElType,pas.PasTree.TPasEnumType);
      if (EnumType === null) this.RaiseInternalError(20170821174038,$mod.dbgs$1(Value));
      if (Value.Index <= 0) {
        this.EmitRangeCheckConst(20170624144332,Value.AsString(),rtl.getObject(EnumType.Values.Get(Math.min(1,EnumType.Values.FCount - 1))).FName,rtl.getObject(EnumType.Values.Get(EnumType.Values.FCount - 1)).FName,ErrorEl,pas.PScanner.TMessageType.mtWarning);
        Value.Index = EnumType.Values.FCount - 1;
      } else Value.Index -= 1;
      Value.IdentEl = rtl.getObject(EnumType.Values.Get(Value.Index));
    };
    this.SuccEnum = function (Value, ErrorEl) {
      var EnumType = null;
      EnumType = rtl.as(Value.ElType,pas.PasTree.TPasEnumType);
      if (EnumType === null) this.RaiseInternalError(20170821174058,$mod.dbgs$1(Value));
      if (Value.Index >= (EnumType.Values.FCount - 1)) {
        this.EmitRangeCheckConst(20170624145013,Value.AsString(),rtl.getObject(EnumType.Values.Get(0)).FName,rtl.getObject(EnumType.Values.Get(Math.max(0,EnumType.Values.FCount - 2))).FName,ErrorEl,pas.PScanner.TMessageType.mtWarning);
        Value.Index = 0;
      } else Value.Index += 1;
      Value.IdentEl = rtl.getObject(EnumType.Values.Get(Value.Index));
    };
    this.CreateResEvalInt = function (UInt) {
      var Result = null;
      if (UInt <= 4503599627370495) {
        Result = $mod.TResEvalInt.$create("CreateValue",[UInt])}
       else Result = $mod.TResEvalUInt.$create("CreateValue",[UInt]);
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FAllowedInts = rtl.refSet($mod.reitDefaults);
    };
    this.Eval = function (Expr, Flags) {
      var Result = null;
      var C = null;
      var Code = 0;
      var Int = 0;
      var UInt = 0;
      var Flo = 0.0;
      Result = null;
      if ($mod.TResEvalValue.isPrototypeOf(Expr.FData)) {
        Result = Expr.FData;
        return Result;
      };
      if ($mod.TResEvalFlag.refAutoConst in Flags) {
        Flags = rtl.excludeSet(Flags,$mod.TResEvalFlag.refAutoConst);
        if (this.IsConst(Expr)) Flags = rtl.includeSet(Flags,$mod.TResEvalFlag.refConst);
      };
      if ($mod.TResEvalFlag.refAutoConstExt in Flags) {
        Flags = rtl.excludeSet(Flags,$mod.TResEvalFlag.refAutoConstExt);
        if (this.IsConst(Expr)) Flags = rtl.includeSet(Flags,$mod.TResEvalFlag.refConstExt);
      };
      C = Expr.$class.ClassType();
      if (C === pas.PasTree.TPrimitiveExpr) {
        var $tmp1 = Expr.Kind;
        if ($tmp1 === pas.PasTree.TPasExprKind.pekIdent) {
          Result = this.FOnEvalIdentifier(this,Expr,rtl.refSet(Flags));
        } else if ($tmp1 === pas.PasTree.TPasExprKind.pekNumber) {
          pas.System.val(Expr.Value,{get: function () {
              return Int;
            }, set: function (v) {
              Int = v;
            }},{get: function () {
              return Code;
            }, set: function (v) {
              Code = v;
            }});
          if (Code === 0) {
            if ((Int < 0) && (pas.System.Pos("-",Expr.Value) < 1)) {}
            else {
              Result = $mod.TResEvalInt.$create("CreateValue",[Int]);
              return Result;
            };
          };
          pas.System.val$1(Expr.Value,{get: function () {
              return UInt;
            }, set: function (v) {
              UInt = v;
            }},{get: function () {
              return Code;
            }, set: function (v) {
              Code = v;
            }});
          if (Code === 0) {
            Result = $mod.TResEvalUInt.$create("CreateValue",[UInt]);
            return Result;
          };
          pas.System.val$8(Expr.Value,{get: function () {
              return Flo;
            }, set: function (v) {
              Flo = v;
            }},{get: function () {
              return Code;
            }, set: function (v) {
              Code = v;
            }});
          if (Code === 0) {
            Result = $mod.TResEvalFloat.$create("CreateValue",[Flo]);
            return Result;
          };
          this.RaiseRangeCheck(20170518202252,Expr);
        } else if ($tmp1 === pas.PasTree.TPasExprKind.pekString) {
          Result = this.EvalPrimitiveExprString(Expr);
          return Result;
        } else {
          this.RaiseNotYetImplemented(20170518200951,Expr,"");
        };
      } else if (C === pas.PasTree.TNilExpr) {
        Result = $mod.TResEvalValue.$create("CreateKind",[$mod.TREVKind.revkNil])}
       else if (C === pas.PasTree.TBoolConstExpr) {
        Result = $mod.TResEvalBool.$create("CreateValue",[Expr.Value])}
       else if (C === pas.PasTree.TUnaryExpr) {
        Result = this.EvalUnaryExpr(Expr,rtl.refSet(Flags))}
       else if (C === pas.PasTree.TBinaryExpr) {
        Result = this.EvalBinaryExpr(Expr,rtl.refSet(Flags))}
       else if (C === pas.PasTree.TParamsExpr) {
        Result = this.EvalParamsExpr(Expr,rtl.refSet(Flags))}
       else if (C === pas.PasTree.TArrayValues) {
        Result = this.EvalArrayValuesExpr(Expr,rtl.refSet(Flags))}
       else if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TResEvalFlag.refConst,$mod.TResEvalFlag.refConstExt),Flags),{})) this.RaiseConstantExprExp(20170518213800,Expr);
      return Result;
    };
    this.IsInRange = function (Expr, RangeExpr, EmitHints) {
      var Result = false;
      var Value = null;
      var RangeValue = null;
      Value = this.Eval(Expr,rtl.createSet($mod.TResEvalFlag.refAutoConst));
      if (Value === null) return true;
      RangeValue = null;
      try {
        RangeValue = this.Eval(RangeExpr,{});
        if (RangeValue === null) this.RaiseNotYetImplemented(20170522171226,RangeExpr,"");
        Result = this.IsInRange$1(Value,Expr,RangeValue,RangeExpr,EmitHints);
      } finally {
        $mod.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
        $mod.ReleaseEvalValue({get: function () {
            return RangeValue;
          }, set: function (v) {
            RangeValue = v;
          }});
      };
      return Result;
    };
    this.IsInRange$1 = function (Value, ValueExpr, RangeValue, RangeExpr, EmitHints) {
      var Result = false;
      var RgInt = null;
      var RgUInt = null;
      var CharIndex = 0;
      Result = false;
      var $tmp1 = RangeValue.Kind;
      if ($tmp1 === $mod.TREVKind.revkRangeInt) {
        RgInt = RangeValue;
        var $tmp2 = RgInt.ElKind;
        if ($tmp2 === $mod.TRESetElKind.revskBool) {
          if (Value.Kind === $mod.TREVKind.revkBool) {
            return true}
           else this.RaiseNotYetImplemented(20170522220104,ValueExpr,"")}
         else if ($tmp2 === $mod.TRESetElKind.revskEnum) {
          if (Value.Kind !== $mod.TREVKind.revkEnum) {
            this.RaiseInternalError(20170522172754,"")}
           else if (Value.ElType !== RgInt.ElType) {
            this.RaiseInternalError(20170522174028,"")}
           else if ((Value.Index < RgInt.RangeStart) || (Value.Index > RgInt.RangeEnd)) {
            if (EmitHints) this.EmitRangeCheckConst(20170522174406,Value.AsString(),RgInt.ElementAsString(RgInt.RangeStart),RgInt.ElementAsString(RgInt.RangeEnd),ValueExpr,pas.PScanner.TMessageType.mtWarning);
            return false;
          } else return true;
        } else if ($tmp2 === $mod.TRESetElKind.revskInt) {
          if (Value.Kind === $mod.TREVKind.revkInt) {
            if ((Value.Int < RgInt.RangeStart) || (Value.Int > RgInt.RangeEnd)) {
              if (EmitHints) this.EmitRangeCheckConst(20170522174958,Value.AsString(),RgInt.ElementAsString(RgInt.RangeStart),RgInt.ElementAsString(RgInt.RangeEnd),ValueExpr,pas.PScanner.TMessageType.mtWarning);
              return false;
            } else return true;
          } else if (Value.Kind === $mod.TREVKind.revkUInt) {
            if (((Value.UInt > 4503599627370495) || (Value.UInt < RgInt.RangeStart)) || (Value.UInt > RgInt.RangeEnd)) {
              if (EmitHints) this.EmitRangeCheckConst(20170522215852,Value.AsString(),RgInt.ElementAsString(RgInt.RangeStart),RgInt.ElementAsString(RgInt.RangeEnd),ValueExpr,pas.PScanner.TMessageType.mtWarning);
              return false;
            } else return true;
          } else {
            this.RaiseNotYetImplemented(20170522215906,ValueExpr,"");
          }}
         else if ($tmp2 === $mod.TRESetElKind.revskChar) {
          if (Value.Kind in $mod.revkAllStrings) {
            CharIndex = this.ExprStringToOrd(Value,ValueExpr);
            if ((CharIndex < RgInt.RangeStart) || (CharIndex > RgInt.RangeEnd)) {
              if (EmitHints) this.EmitRangeCheckConst(20170522221709,Value.AsString(),RgInt.ElementAsString(RgInt.RangeStart),RgInt.ElementAsString(RgInt.RangeEnd),ValueExpr,pas.PScanner.TMessageType.mtWarning);
              return false;
            } else return true;
          } else this.RaiseNotYetImplemented(20170522220210,ValueExpr,"")}
         else {
          this.RaiseInternalError(20170522172630,"");
        };
      } else if ($tmp1 === $mod.TREVKind.revkRangeUInt) {
        if (Value.Kind === $mod.TREVKind.revkInt) {
          RgUInt = RangeValue;
          if (((Value.Int < 0) || (Value.Int < RgUInt.RangeStart)) || (Value.Int > RgUInt.RangeEnd)) {
            if (EmitHints) this.EmitRangeCheckConst(20170522172250,Value.AsString(),pas.SysUtils.IntToStr(RgUInt.RangeStart),pas.SysUtils.IntToStr(RgUInt.RangeEnd),ValueExpr,pas.PScanner.TMessageType.mtWarning);
            return false;
          } else return true;
        } else if (Value.Kind === $mod.TREVKind.revkUInt) {
          RgUInt = RangeValue;
          if ((Value.UInt < RgUInt.RangeStart) || (Value.UInt > RgUInt.RangeEnd)) {
            if (EmitHints) this.EmitRangeCheckConst(20170522172544,pas.SysUtils.IntToStr(Value.UInt),pas.SysUtils.IntToStr(RgUInt.RangeStart),pas.SysUtils.IntToStr(RgUInt.RangeEnd),ValueExpr,pas.PScanner.TMessageType.mtWarning);
            return false;
          } else return true;
        } else {
          this.RaiseNotYetImplemented(20170522171551,ValueExpr,"");
        }}
       else {
        this.RaiseNotYetImplemented(20170522171307,RangeExpr,"");
      };
      return Result;
    };
    this.IsSetCompatible = function (Value, ValueExpr, RangeValue, EmitHints) {
      var Result = false;
      var RightSet = null;
      var LeftRange = null;
      var MinVal = 0;
      var MaxVal = 0;
      Result = true;
      var $tmp1 = Value.Kind;
      if ($tmp1 === $mod.TREVKind.revkSetOfInt) {
        RightSet = Value;
        if (RightSet.ElKind === $mod.TRESetElKind.revskNone) return true;
        var $tmp2 = RangeValue.Kind;
        if ($tmp2 === $mod.TREVKind.revkRangeInt) {
          LeftRange = RangeValue;
          if ((LeftRange.ElKind !== RightSet.ElKind) || (LeftRange.ElType !== RightSet.ElType)) {
            this.RaiseNotYetImplemented(20170714201425,ValueExpr,"");
          };
          if (rtl.length(RightSet.Ranges) === 0) return true;
          MinVal = RightSet.Ranges[0].RangeStart;
          MaxVal = RightSet.Ranges[rtl.length(RightSet.Ranges) - 1].RangeEnd;
          if (MinVal < LeftRange.RangeStart) if (EmitHints) {
            this.EmitRangeCheckConst(20170714202813,RightSet.ElementAsString(MinVal),LeftRange.ElementAsString(LeftRange.RangeStart),LeftRange.ElementAsString(LeftRange.RangeEnd),ValueExpr,pas.PScanner.TMessageType.mtError)}
           else return false;
          if (MaxVal > LeftRange.RangeEnd) if (EmitHints) {
            this.EmitRangeCheckConst(20170714203134,RightSet.ElementAsString(MaxVal),LeftRange.ElementAsString(LeftRange.RangeStart),LeftRange.ElementAsString(LeftRange.RangeEnd),ValueExpr,pas.PScanner.TMessageType.mtError)}
           else return false;
        } else {
          this.RaiseNotYetImplemented(20170714201121,ValueExpr,"");
        };
      } else {
        this.RaiseNotYetImplemented(20170714195815,ValueExpr,"");
      };
      return Result;
    };
    this.IsConst = function (Expr) {
      var Result = false;
      var El = null;
      var C = null;
      El = Expr;
      while (El !== null) {
        C = El.$class.ClassType();
        if (C.InheritsFrom(pas.PasTree.TPasProcedure)) return true;
        if (C.InheritsFrom(pas.PasTree.TPasImplBlock)) return false;
        El = El.FParent;
      };
      Result = true;
      return Result;
    };
    this.IsSimpleExpr = function (Expr) {
      var Result = false;
      var C = null;
      C = Expr.$class.ClassType();
      Result = ((C === pas.PasTree.TNilExpr) || (C === pas.PasTree.TBoolConstExpr)) || (C === pas.PasTree.TPrimitiveExpr);
      return Result;
    };
    this.EmitRangeCheckConst = function (id, aValue, MinVal, MaxVal, PosEl, MsgType) {
      if (this.FOnRangeCheckEl != null) this.FOnRangeCheckEl(this,PosEl,{get: function () {
          return MsgType;
        }, set: function (v) {
          MsgType = v;
        }});
      this.LogMsg(id,MsgType,3066,rtl.getResStr(pas.PasResolveEval,"sRangeCheckEvaluatingConstantsVMinMax"),[aValue,MinVal,MaxVal],PosEl);
    };
    this.EmitRangeCheckConst$1 = function (id, aValue, MinVal, MaxVal, PosEl, MsgType) {
      this.EmitRangeCheckConst(id,aValue,pas.SysUtils.IntToStr(MinVal),pas.SysUtils.IntToStr(MaxVal),PosEl,MsgType);
    };
    this.ChrValue = function (Value, ErrorEl) {
      var Result = null;
      var Int = 0;
      Result = null;
      var $tmp1 = Value.Kind;
      if (($tmp1 === $mod.TREVKind.revkInt) || ($tmp1 === $mod.TREVKind.revkUInt)) {
        if (Value.Kind === $mod.TREVKind.revkUInt) {
          if (Value.UInt > 0xffff) {
            this.EmitRangeCheckConst$1(20170711195605,Value.AsString(),0,0xffff,ErrorEl,pas.PScanner.TMessageType.mtError)}
           else Int = Value.UInt;
        } else Int = Value.Int;
        if ((Int < 0) || (Int > 0xffff)) this.EmitRangeCheckConst$1(20170711195747,Value.AsString(),0,0xffff,ErrorEl,pas.PScanner.TMessageType.mtError);
        Result = $mod.TResEvalUTF16.$create("CreateValue",[String.fromCharCode(Int)]);
      } else {
        this.RaiseNotYetImplemented(20170711195440,ErrorEl,"");
      };
      return Result;
    };
    this.OrdValue = function (Value, ErrorEl) {
      var Result = null;
      var $tmp1 = Value.Kind;
      if ($tmp1 === $mod.TREVKind.revkBool) {
        if (Value.B) {
          Result = $mod.TResEvalInt.$create("CreateValue",[1])}
         else Result = $mod.TResEvalInt.$create("CreateValue",[0])}
       else if (($tmp1 === $mod.TREVKind.revkInt) || ($tmp1 === $mod.TREVKind.revkUInt)) {
        Result = Value}
       else if ($tmp1 === $mod.TREVKind.revkUnicodeString) {
        if (Value.S.length !== 1) {
          this.RaiseRangeCheck(20170624160129,ErrorEl)}
         else Result = $mod.TResEvalInt.$create("CreateValue",[Value.S.charAt(0).charCodeAt()])}
       else if ($tmp1 === $mod.TREVKind.revkEnum) {
        Result = $mod.TResEvalInt.$create("CreateValue",[Value.Index])}
       else {
        this.RaiseNotYetImplemented(20170624155932,ErrorEl,"");
      };
      return Result;
    };
    this.PredValue = function (Value, ErrorEl) {
      var $tmp1 = Value.Kind;
      if ($tmp1 === $mod.TREVKind.revkBool) {
        this.PredBool(Value,ErrorEl)}
       else if ($tmp1 === $mod.TREVKind.revkInt) {
        this.PredInt(Value,ErrorEl)}
       else if ($tmp1 === $mod.TREVKind.revkUInt) {
        this.PredUInt(Value,ErrorEl)}
       else if ($tmp1 === $mod.TREVKind.revkUnicodeString) {
        this.PredUnicodeString(Value,ErrorEl)}
       else if ($tmp1 === $mod.TREVKind.revkEnum) {
        this.PredEnum(Value,ErrorEl)}
       else {
        $mod.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
        this.RaiseNotYetImplemented(20170624135738,ErrorEl,"");
      };
    };
    this.SuccValue = function (Value, ErrorEl) {
      var $tmp1 = Value.Kind;
      if ($tmp1 === $mod.TREVKind.revkBool) {
        this.SuccBool(Value,ErrorEl)}
       else if ($tmp1 === $mod.TREVKind.revkInt) {
        this.SuccInt(Value,ErrorEl)}
       else if ($tmp1 === $mod.TREVKind.revkUInt) {
        this.SuccUInt(Value,ErrorEl)}
       else if ($tmp1 === $mod.TREVKind.revkUnicodeString) {
        this.SuccUnicodeString(Value,ErrorEl)}
       else if ($tmp1 === $mod.TREVKind.revkEnum) {
        this.SuccEnum(Value,ErrorEl)}
       else {
        $mod.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
        this.RaiseNotYetImplemented(20170624151252,ErrorEl,"");
      };
    };
    this.EvalStrFunc = function (Params, Flags) {
      var Self = this;
      var Result = null;
      var AllConst = false;
      function EvalFormat(Expr, MinVal, MaxVal) {
        var Result = 0;
        var Value = null;
        Value = Self.Eval(Expr,rtl.refSet(Flags));
        if (Value === null) {
          AllConst = false;
          return -1;
        };
        if (Value.Kind !== $mod.TREVKind.revkInt) Self.RaiseNotYetImplemented(20170717144010,Expr,"");
        Result = Value.Int;
        if ((Result < MinVal) || (Result > MaxVal)) Self.EmitRangeCheckConst$1(20170717144609,pas.SysUtils.IntToStr(Result),MinVal,MaxVal,Expr,pas.PScanner.TMessageType.mtError);
        return Result;
      };
      var i = 0;
      var Param = null;
      var S = "";
      var ValStr = "";
      var Value = null;
      var Format1 = 0;
      var Format2 = 0;
      Result = null;
      Value = null;
      AllConst = true;
      S = "";
      for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Param = Params.Params[i];
        Value = Self.Eval(Param,rtl.refSet(Flags));
        if (Value === null) {
          AllConst = false;
          continue;
        };
        Format1 = -1;
        Format2 = -1;
        try {
          ValStr = "";
          if (Param.format1 !== null) {
            Format1 = EvalFormat(Param.format1,1,255);
            if (Format1 < 0) continue;
            if (Param.format2 !== null) {
              Format2 = EvalFormat(Param.format2,0,255);
              if (Format2 < 0) continue;
            };
          };
          var $tmp3 = Value.Kind;
          if ($tmp3 === $mod.TREVKind.revkBool) {
            if (Format1 < 0) {
              ValStr = "" + Value.B}
             else ValStr = rtl.spaceLeft("" + Value.B,Format1)}
           else if ($tmp3 === $mod.TREVKind.revkInt) {
            if (Format1 < 0) {
              ValStr = "" + Value.Int}
             else ValStr = rtl.spaceLeft("" + Value.Int,Format1)}
           else if ($tmp3 === $mod.TREVKind.revkUInt) {
            if (Format1 < 0) {
              ValStr = "" + Value.UInt}
             else ValStr = rtl.spaceLeft("" + Value.UInt,Format1)}
           else if ($tmp3 === $mod.TREVKind.revkFloat) {
            if (Format1 < 0) {
              ValStr = rtl.floatToStr(Value.FloatValue)}
             else if (Format2 < 0) {
              ValStr = rtl.floatToStr(Value.FloatValue,Format1)}
             else ValStr = rtl.floatToStr(Value.FloatValue,Format1,Format2)}
           else if ($tmp3 === $mod.TREVKind.revkCurrency) {
            if (Format1 < 0) {
              ValStr = rtl.floatToStr(Value.Value / 10000)}
             else if (Format2 < 0) {
              ValStr = rtl.floatToStr(Value.Value / 10000,Format1)}
             else ValStr = rtl.floatToStr(Value.Value / 10000,Format1,Format2)}
           else if ($tmp3 === $mod.TREVKind.revkEnum) {
            ValStr = Value.AsString();
            if (Format1 > 0) ValStr = pas.System.StringOfChar(" ",Format1) + ValStr;
          } else {
            AllConst = false;
            continue;
          };
        } finally {
          $mod.ReleaseEvalValue({get: function () {
              return Value;
            }, set: function (v) {
              Value = v;
            }});
          $mod.ReleaseEvalValue({get: function () {
              return Value;
            }, set: function (v) {
              Value = v;
            }});
          $mod.ReleaseEvalValue({get: function () {
              return Value;
            }, set: function (v) {
              Value = v;
            }});
        };
        S = S + ValStr;
      };
      if (AllConst) Result = $mod.TResEvalUTF16.$create("CreateValue",[S]);
      return Result;
    };
    this.EnumTypeCast = function (EnumType, Expr, Flags) {
      var Result = null;
      var Value = null;
      var MaxIndex = 0;
      var Index = 0;
      Result = null;
      Value = this.Eval(Expr,rtl.refSet(Flags));
      if (Value === null) return Result;
      try {
        MaxIndex = EnumType.Values.FCount - 1;
        var $tmp1 = Value.Kind;
        if ($tmp1 === $mod.TREVKind.revkInt) {
          if (Value.Int > 2147483647) {
            this.EmitRangeCheckConst(20170713105944,pas.SysUtils.IntToStr(Value.Int),"0",pas.SysUtils.IntToStr(MaxIndex),Expr,pas.PScanner.TMessageType.mtError)}
           else Index = Value.Int}
         else if ($tmp1 === $mod.TREVKind.revkUInt) {
          if (Value.UInt > MaxIndex) {
            this.EmitRangeCheckConst(20170713105944,pas.SysUtils.IntToStr(Value.UInt),"0",pas.SysUtils.IntToStr(MaxIndex),Expr,pas.PScanner.TMessageType.mtError)}
           else Index = Value.UInt}
         else {
          this.RaiseNotYetImplemented(20170713105625,Expr,"");
        };
        if ((Index < 0) || (Index > MaxIndex)) this.EmitRangeCheckConst(20170713110232,pas.SysUtils.IntToStr(Index),"0",pas.SysUtils.IntToStr(MaxIndex),Expr,pas.PScanner.TMessageType.mtError);
        Result = $mod.TResEvalEnum.$create("CreateValue",[Index,rtl.getObject(EnumType.Values.Get(Index))]);
      } finally {
        $mod.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
      };
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("TResExprEvaluatorClass",{instancetype: $mod.$rtti["TResExprEvaluator"]});
  this.ReleaseEvalValue = function (Value) {
    if (Value.get() === null) return;
    if (Value.get().FElement !== null) return;
    Value.get().$destroy("Destroy");
    Value.set(null);
  };
  this.UnicodeStrToCaption = function (u, MaxLength) {
    var Result = "";
    var InLit = false;
    var Len = 0;
    function AddHash(o) {
      var h = "";
      if ((Result !== "") && InLit) {
        Result = Result + "'";
        Len += 1;
        InLit = false;
      };
      h = "#" + pas.SysUtils.IntToStr(o);
      Len += h.length;
      if (Len <= MaxLength) Result = Result + h;
    };
    function AddLit(Lit, CaptionLen) {
      if (!InLit) {
        Result = Result + "'";
        Len += 1;
        InLit = true;
      };
      Result = Result + Lit;
      Len += CaptionLen;
    };
    var p = 0;
    Result = "";
    p = 1;
    Len = 0;
    InLit = false;
    while ((Len < MaxLength) && (p <= u.length)) {
      var $tmp1 = u.charAt(p - 1);
      if ($tmp1 === "'") {
        AddLit("''",2);
        p += 1;
      } else if (((($tmp1 >= "\x00") && ($tmp1 <= "\x1F")) || (($tmp1 >= "") && ($tmp1 <= "ÿ"))) || (($tmp1 >= "\uD800") && ($tmp1 <= "\uFFFF"))) {
        AddHash(u.charCodeAt(p - 1));
        p += 1;
      } else {
        AddLit(u.charAt(p - 1),1);
        p += 1;
      };
    };
    if (InLit) Result = Result + "'";
    return Result;
  };
  this.CodePointToString = function (CodePoint) {
    var Result = "";
    var $tmp1 = CodePoint;
    if (($tmp1 >= 0) && ($tmp1 <= 0x7f)) {
      Result = String.fromCharCode(CodePoint & 255);
    } else if (($tmp1 >= 0x80) && ($tmp1 <= 0x7ff)) {
      Result = String.fromCharCode((0xc0 | (CodePoint >>> 6)) & 255) + String.fromCharCode((0x80 | (CodePoint & 0x3f)) & 255);
    } else if (($tmp1 >= 0x800) && ($tmp1 <= 0xffff)) {
      Result = (String.fromCharCode((0xe0 | (CodePoint >>> 12)) & 255) + String.fromCharCode((((CodePoint >>> 6) & 0x3f) & 255) | 0x80)) + String.fromCharCode(((CodePoint & 0x3f) & 255) | 0x80);
    } else if (($tmp1 >= 0x10000) && ($tmp1 <= 0x10ffff)) {
      Result = ((String.fromCharCode((0xf0 | (CodePoint >>> 18)) & 255) + String.fromCharCode((((CodePoint >>> 12) & 0x3f) & 255) | 0x80)) + String.fromCharCode((((CodePoint >>> 6) & 0x3f) & 255) | 0x80)) + String.fromCharCode(((CodePoint & 0x3f) & 255) | 0x80);
    } else {
      Result = "";
    };
    return Result;
  };
  this.CodePointToUnicodeString = function (u) {
    var Result = "";
    if (u < 0x10000) {
      Result = String.fromCharCode(u)}
     else Result = String.fromCharCode(0xD800 + ((u - 0x10000) >>> 10)) + String.fromCharCode(0xDC00 + ((u - 0x10000) & 0x3ff));
    return Result;
  };
  this.GetObjName = function (o) {
    var Result = "";
    if (o === null) {
      Result = "nil"}
     else if (pas.PasTree.TPasElement.isPrototypeOf(o)) {
      Result = (o.FName + ":") + o.$classname}
     else Result = o.$classname;
    return Result;
  };
  this.dbgs = function (Flags) {
    var Result = "";
    var s = "";
    var f = 0;
    Result = "";
    for (var $l1 in Flags) {
      f = +$l1;
      if (f in Flags) {
        if (Result !== "") Result = Result + ",";
        s = $mod.TResEvalFlag[f];
        Result = Result + s;
      };
    };
    Result = ("[" + Result) + "]";
    return Result;
  };
  this.dbgs$1 = function (v) {
    var Result = "";
    if (v === null) {
      Result = "nil"}
     else Result = v.AsDebugString();
    return Result;
  };
  $mod.$resourcestrings = {sIdentifierNotFound: {org: 'identifier not found "%s"'}, sNotYetImplemented: {org: "not yet implemented: %s"}, sIllegalQualifier: {org: 'illegal qualifier "%s"'}, sSyntaxErrorExpectedButFound: {org: 'Syntax error, "%s" expected but "%s" found'}, sWrongNumberOfParametersForCallTo: {org: 'Wrong number of parameters specified for call to "%s"'}, sIncompatibleTypeArgNo: {org: 'Incompatible type arg no. %s: Got "%s", expected "%s"'}, sIncompatibleTypeArgNoVarParamMustMatchExactly: {org: 'Incompatible type arg no. %s: Got "%s", expected "%s". Var param must match exactly.'}, sVariableIdentifierExpected: {org: "Variable identifier expected"}, sDuplicateIdentifier: {org: 'Duplicate identifier "%s" at %s'}, sXExpectedButYFound: {org: "%s expected, but %s found"}, sAncestorCycleDetected: {org: "Ancestor cycle detected"}, sCantUseForwardDeclarationAsAncestor: {org: 'Can\'t use forward declaration "%s" as ancestor'}, sCantDetermineWhichOverloadedFunctionToCall: {org: "Can't determine which overloaded function to call"}, sForwardTypeNotResolved: {org: 'Forward type not resolved "%s"'}, sForwardProcNotResolved: {org: 'Forward %s not resolved "%s"'}, sInvalidXModifierY: {org: "Invalid %s modifier %s"}, sAbstractMethodsMustNotHaveImplementation: {org: "Abstract method must not have an implementation."}, sCallingConventionMismatch: {org: "Calling convention mismatch"}, sResultTypeMismatchExpectedButFound: {org: "Result type mismatch, expected %s, but found %s"}, sFunctionHeaderMismatchForwardVarName: {org: 'function header "%s" doesn\'t match forward : var name changes %s => %s'}, sFunctionHidesIdentifier: {org: 'function hides identifier at "%s". Use overload or reintroduce'}, sNoMethodInAncestorToOverride: {org: 'There is no method in an ancestor class to be overridden "%s"'}, sInheritedOnlyWorksInMethods: {org: "Inherited works only in methods"}, sInheritedNeedsAncestor: {org: "inherited needs an ancestor"}, sNoPropertyFoundToOverride: {org: "No property found to override"}, sExprTypeMustBeClassOrRecordTypeGot: {org: "Expression type must be class or record type, got %s"}, sPropertyNotWritable: {org: "No member is provided to access property"}, sIncompatibleTypesGotExpected: {org: 'Incompatible types: got "%s" expected "%s"'}, sTypesAreNotRelatedXY: {org: 'Types are not related: "%s" and "%s"'}, sAbstractMethodsCannotBeCalledDirectly: {org: "Abstract methods cannot be called directly"}, sMissingParameterX: {org: "Missing parameter %s"}, sCannotAccessThisMemberFromAX: {org: "Cannot access this member from a %s"}, sInOperatorExpectsSetElementButGot: {org: "the in-operator expects a set element, but got %s"}, sWrongNumberOfParametersForTypeCast: {org: "wrong number of parameters for type cast to %s"}, sIllegalTypeConversionTo: {org: 'Illegal type conversion: "%s" to "%s"'}, sConstantExpressionExpected: {org: "Constant expression expected"}, sLeftSideOfIsOperatorExpectsAClassButGot: {org: 'left side of is-operator expects a class, but got "%s"'}, sNotReadable: {org: "not readable"}, sClassPropertyAccessorMustBeStatic: {org: "class property accessor must be static"}, sClassPropertyAccessorMustNotBeStatic: {org: "class property accessor must not be static"}, sOnlyOneDefaultPropertyIsAllowed: {org: "Only one default property is allowed"}, sWrongNumberOfParametersForArray: {org: "Wrong number of parameters for array"}, sCantAssignValuesToAnAddress: {org: "Can't assign values to an address"}, sIllegalExpression: {org: "Illegal expression"}, sCantAccessPrivateMember: {org: "Can't access %s member %s"}, sMustBeInsideALoop: {org: "%s must be inside a loop"}, sExpectXArrayElementsButFoundY: {org: "Expect %s array elements, but found %s"}, sCannotCreateADescendantOfTheSealedXY: {org: 'Cannot create a descendant of the sealed %s "%s"'}, sAncestorIsNotExternal: {org: 'Ancestor "%s" is not external'}, sPropertyMustHaveReadOrWrite: {org: "Property must have read or write accessor"}, sVirtualMethodXHasLowerVisibility: {org: 'Virtual method "%s" has a lower visibility (%s) than parent class %s (%s)'}, sExternalClassInstanceCannotAccessStaticX: {org: "External class instance cannot access static %s"}, sXModifierMismatchY: {org: '%s modifier "%s" mismatch'}, sSymbolCannotBePublished: {org: "Symbol cannot be published"}, sCannotTypecastAType: {org: "Cannot type cast a type"}, sTypeIdentifierExpected: {org: "Type identifier expected"}, sCannotNestAnonymousX: {org: "Cannot nest anonymous %s"}, sFoundCallCandidateX: {org: "Found call candidate %s"}, sTextAfterFinalIgnored: {org: "Text after final 'end.'. ignored by compiler"}, sNoMemberIsProvidedToAccessProperty: {org: "No member is provided to access property"}, sSymbolXIsNotPortable: {org: 'Symbol "%s" is not portable'}, sSymbolXIsExperimental: {org: 'Symbol "%s" is experimental'}, sSymbolXIsNotImplemented: {org: 'Symbol "%s" is not implemented'}, sSymbolXBelongsToALibrary: {org: 'Symbol "%s" belongs to a library'}, sSymbolXIsDeprecated: {org: 'Symbol "%s" is deprecated'}, sSymbolXIsDeprecatedY: {org: 'Symbol "%s" is deprecated: %s'}, sRangeCheckError: {org: "Range check error"}, sHighRangeLimitLTLowRangeLimit: {org: "High range limit < low range limit"}, sRangeCheckEvaluatingConstantsVMinMax: {org: "range check error while evaluating constants (%s is not between %s and %s)"}, sIllegalChar: {org: "Illegal character"}, sOverflowInArithmeticOperation: {org: "Overflow in arithmetic operation"}, sDivByZero: {org: "Division by zero"}, sRangeCheckInSetConstructor: {org: "range check error in set constructor or duplicate set element"}, sIncompatibleTypesGotParametersExpected: {org: "Incompatible types, got %s parameters, expected %s"}, sAddingIndexSpecifierRequiresNewX: {org: 'adding index specifier requires new "%s" specifier'}, sCantFindUnitX: {org: 'can\'t find unit "%s"'}, sCannotFindEnumeratorForType: {org: 'Cannot find an enumerator for the type "%s"'}, sPreviousDeclMissesOverload: {org: 'Previous declaration of "%s" at %s was not marked with "overload" directive'}, sOverloadedProcMissesOverload: {org: 'Overloaded procedure misses "overload" directive. Previous declaration is at %s'}, sMethodHidesMethodOfBaseType: {org: 'Method "%s" hides method of base type "%s" at %s'}, sContextExpectedXButFoundY: {org: '%s: expected "%s", but found "%s"'}, sContextXInvalidY: {org: "%s: invalid %s"}, sConstructingClassXWithAbstractMethodY: {org: 'Constructing a class "%s" with abstract method "%s"'}, sXIsNotSupported: {org: "%s is not supported"}, sOperatorIsNotOverloadedAOpB: {org: 'Operator is not overloaded: "%s" %s "%s"'}, sIllegalQualifierAfter: {org: 'illegal qualifier "%s" after "%s"'}, sIllegalQualifierInFrontOf: {org: 'illegal qualifier "%s" in front of "%s"'}, sIllegalQualifierWithin: {org: 'illegal qualifier "%s" within "%s"'}, sMethodClassXInOtherUnitY: {org: 'method class "%s" in other unit "%s"'}, sNoMatchingImplForIntfMethodXFound: {org: 'No matching implementation for interface method "%s" found'}, sCannotMixMethodResolutionAndDelegationAtX: {org: "Cannot mix method resolution and delegation at %s"}, sImplementsDoesNotSupportArrayProperty: {org: '"implements" does dot support array property'}, sImplementsDoesNotSupportIndex: {org: '"implements" does not support "index"'}, sImplementsUsedOnUnimplIntf: {org: 'Implements-property used on unimplemented interface: "%"'}, sDuplicateImplementsForIntf: {org: 'Duplicate implements for interface "%s" at %s'}, sImplPropMustHaveReadSpec: {org: "Implements-property must have read specifier"}, sDoesNotImplementInterface: {org: '"%s" does not implement interface "%s"'}, sTypeCycleFound: {org: "Type cycle found"}, sTypeXIsNotYetCompletelyDefined: {org: 'type "%s" is not yet completely defined'}, sDuplicateCaseValueXatY: {org: 'Duplicate case value "%s", other at %s'}, sMissingFieldsX: {org: 'Missing fields: "%s"'}, sCantAssignValuesToConstVariable: {org: "Can't assign values to const variable"}, sIllegalAssignmentToForLoopVar: {org: 'Illegal assignment to for-loop variable "%s"'}};
});
rtl.module("PParser",["System","SysUtils","Classes","PasTree","PScanner"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.nErrNoSourceGiven = 2001;
  this.nErrMultipleSourceFiles = 2002;
  this.nParserError = 2003;
  this.nParserErrorAtToken = 2004;
  this.nParserUngetTokenError = 2005;
  this.nParserExpectTokenError = 2006;
  this.nParserForwardNotInterface = 2007;
  this.nParserExpectVisibility = 2008;
  this.nParserStrangeVisibility = 2009;
  this.nParserExpectToken2Error = 2010;
  this.nParserExpectedCommaRBracket = 2011;
  this.nParserExpectedCommaSemicolon = 2012;
  this.nParserExpectedAssignIn = 2013;
  this.nParserExpectedCommaColon = 2014;
  this.nErrUnknownOperatorType = 2015;
  this.nParserOnlyOneArgumentCanHaveDefault = 2016;
  this.nParserExpectedLBracketColon = 2017;
  this.nParserExpectedSemiColonEnd = 2018;
  this.nParserExpectedConstVarID = 2019;
  this.nParserExpectedNested = 2020;
  this.nParserExpectedColonID = 2021;
  this.nParserSyntaxError = 2022;
  this.nParserTypeSyntaxError = 2023;
  this.nParserArrayTypeSyntaxError = 2024;
  this.nParserExpectedIdentifier = 2026;
  this.nParserNotAProcToken = 2026;
  this.nRangeExpressionExpected = 2027;
  this.nParserExpectCase = 2028;
  this.nParserHelperNotAllowed = 2029;
  this.nLogStartImplementation = 2030;
  this.nLogStartInterface = 2031;
  this.nParserNoConstructorAllowed = 2032;
  this.nParserNoFieldsAllowed = 2033;
  this.nParserInvalidRecordVisibility = 2034;
  this.nErrRecordConstantsNotAllowed = 2035;
  this.nErrRecordMethodsNotAllowed = 2036;
  this.nErrRecordPropertiesNotAllowed = 2037;
  this.nErrRecordVisibilityNotAllowed = 2038;
  this.nParserTypeNotAllowedHere = 2039;
  this.nParserNotAnOperand = 2040;
  this.nParserArrayPropertiesCannotHaveDefaultValue = 2041;
  this.nParserDefaultPropertyMustBeArray = 2042;
  this.nParserUnknownProcedureType = 2043;
  this.nParserGenericArray1Element = 2044;
  this.nParserGenericClassOrArray = 2045;
  this.nParserDuplicateIdentifier = 2046;
  this.nParserDefaultParameterRequiredFor = 2047;
  this.nParserOnlyOneVariableCanBeInitialized = 2048;
  this.nParserExpectedTypeButGot = 2049;
  this.nParserPropertyArgumentsCanNotHaveDefaultValues = 2050;
  this.nParserExpectedExternalClassName = 2051;
  this.nParserNoConstRangeAllowed = 2052;
  this.nErrRecordVariablesNotAllowed = 2053;
  this.nParserResourcestringsMustBeGlobal = 2054;
  this.nParserOnlyOneVariableCanBeAbsolute = 2055;
  this.nParserXNotAllowedInY = 2056;
  this.nFileSystemsNotSupported = 2057;
  this.TPasScopeType = {"0": "stModule", stModule: 0, "1": "stUsesClause", stUsesClause: 1, "2": "stTypeSection", stTypeSection: 2, "3": "stTypeDef", stTypeDef: 3, "4": "stResourceString", stResourceString: 4, "5": "stProcedure", stProcedure: 5, "6": "stProcedureHeader", stProcedureHeader: 6, "7": "stExceptOnExpr", stExceptOnExpr: 7, "8": "stExceptOnStatement", stExceptOnStatement: 8, "9": "stDeclaration", stDeclaration: 9, "10": "stAncestors", stAncestors: 10, "11": "stInitialFinalization", stInitialFinalization: 11};
  $mod.$rtti.$Enum("TPasScopeType",{minvalue: 0, maxvalue: 11, ordtype: 1, enumtype: this.TPasScopeType});
  $mod.$rtti.$Set("TPasScopeTypes",{comptype: $mod.$rtti["TPasScopeType"]});
  $mod.$rtti.$MethodVar("TPasParserLogHandler",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Msg",rtl.string,2]]), methodkind: 0});
  this.TPParserLogEvent = {"0": "pleInterface", pleInterface: 0, "1": "pleImplementation", pleImplementation: 1};
  $mod.$rtti.$Enum("TPParserLogEvent",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TPParserLogEvent});
  $mod.$rtti.$Set("TPParserLogEvents",{comptype: $mod.$rtti["TPParserLogEvent"]});
  $mod.$rtti.$Class("TPasParser");
  rtl.createClass($mod,"TPasTreeContainer",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FCurrentParser = null;
      this.FNeedComments = false;
      this.FOnLog = null;
      this.FPParserLogEvents = {};
      this.FScannerLogEvents = {};
      this.FPackage = null;
      this.FInterfaceOnly = false;
    };
    this.$final = function () {
      this.FCurrentParser = undefined;
      this.FOnLog = undefined;
      this.FPParserLogEvents = undefined;
      this.FScannerLogEvents = undefined;
      this.FPackage = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetCurrentParser = function (AValue) {
      if (this.FCurrentParser === AValue) return;
      this.FCurrentParser = AValue;
    };
    this.CreateElement = function (AClass, AName, AParent, ASourceFilename, ASourceLinenumber) {
      var Result = null;
      Result = this.CreateElement$1(AClass,AName,AParent,pas.PasTree.TPasMemberVisibility.visDefault,ASourceFilename,ASourceLinenumber);
      return Result;
    };
    this.CreateElement$2 = function (AClass, AName, AParent, AVisibility, ASrcPos) {
      var Result = null;
      Result = this.CreateElement$1(AClass,AName,AParent,AVisibility,ASrcPos.FileName,ASrcPos.Row);
      return Result;
    };
    this.CreateFunctionType = function (AName, AResultName, AParent, UseParentAsResultParent, ASrcPos) {
      var Result = null;
      var ResultParent = null;
      Result = this.CreateElement$2(pas.PasTree.TPasFunctionType,AName,AParent,pas.PasTree.TPasMemberVisibility.visDefault,ASrcPos);
      if (UseParentAsResultParent) {
        ResultParent = AParent}
       else ResultParent = Result;
      Result.ResultEl = this.CreateElement$2(pas.PasTree.TPasResultElement,AResultName,ResultParent,pas.PasTree.TPasMemberVisibility.visDefault,ASrcPos);
      return Result;
    };
    this.FinishScope = function (ScopeType, El) {
      if (ScopeType === $mod.TPasScopeType.stModule) ;
      if ((El != null) && (this.FCurrentParser !== null)) El.SourceEndLinenumber = this.FCurrentParser.CurSourcePos().Row;
    };
    this.FinishTypeAlias = function (aType) {
      if (aType.get() === null) ;
    };
    this.FindModule = function (AName) {
      var Result = null;
      if (AName === "") ;
      Result = null;
      return Result;
    };
    this.FindModule$1 = function (AName, NameExpr, InFileExpr) {
      var Result = null;
      Result = this.FindModule(AName);
      if (NameExpr === null) ;
      if (InFileExpr === null) ;
      return Result;
    };
    this.CheckPendingUsedInterface = function (Section) {
      var Result = false;
      if (Section === null) ;
      Result = false;
      return Result;
    };
    this.NeedArrayValues = function (El) {
      var Result = false;
      Result = false;
      if (El === null) ;
      return Result;
    };
    this.GetDefaultClassVisibility = function (AClass) {
      var Result = 0;
      Result = pas.PasTree.TPasMemberVisibility.visDefault;
      if (AClass === null) ;
      return Result;
    };
    this.ModeChanged = function (Sender, NewMode, Before, Handled) {
      if (Sender === null) ;
      if (NewMode === pas.PScanner.TModeSwitch.msDelphi) ;
      if (Before) ;
      if (Handled.get()) ;
    };
  });
  rtl.createClass($mod,"EParserError",pas.SysUtils.Exception,function () {
    this.$init = function () {
      pas.SysUtils.Exception.$init.call(this);
      this.FFilename = "";
      this.FRow = 0;
      this.FColumn = 0;
    };
    this.Create$2 = function (AReason, AFilename, ARow, AColumn) {
      pas.SysUtils.Exception.Create$1.call(this,AReason);
      this.FFilename = AFilename;
      this.FRow = ARow;
      this.FColumn = AColumn;
    };
  });
  this.TExprKind = {"0": "ek_Normal", ek_Normal: 0, "1": "ek_PropertyIndex", ek_PropertyIndex: 1};
  $mod.$rtti.$Enum("TExprKind",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TExprKind});
  this.TIndentAction = {"0": "iaNone", iaNone: 0, "1": "iaIndent", iaIndent: 1, "2": "iaUndent", iaUndent: 2};
  $mod.$rtti.$Enum("TIndentAction",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TIndentAction});
  rtl.createClass($mod,"TPasParser",pas.System.TObject,function () {
    this.FTokenRingSize = 32;
    this.TTokenRec = function (s) {
      if (s) {
        this.Token = s.Token;
        this.AsString = s.AsString;
        this.Comments = s.Comments;
        this.SourcePos = new pas.PScanner.TPasSourcePos(s.SourcePos);
        this.TokenPos = new pas.PScanner.TPasSourcePos(s.TokenPos);
      } else {
        this.Token = 0;
        this.AsString = "";
        this.Comments = null;
        this.SourcePos = new pas.PScanner.TPasSourcePos();
        this.TokenPos = new pas.PScanner.TPasSourcePos();
      };
      this.$equal = function (b) {
        return (this.Token === b.Token) && ((this.AsString === b.AsString) && ((this.Comments === b.Comments) && (this.SourcePos.$equal(b.SourcePos) && this.TokenPos.$equal(b.TokenPos))));
      };
    };
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FCurModule = null;
      this.FFileResolver = null;
      this.FImplicitUses = null;
      this.FLastMsg = "";
      this.FLastMsgArgs = [];
      this.FLastMsgNumber = 0;
      this.FLastMsgPattern = "";
      this.FLastMsgType = 0;
      this.FLogEvents = {};
      this.FOnLog = null;
      this.FOptions = {};
      this.FScanner = null;
      this.FEngine = null;
      this.FCurToken = 0;
      this.FCurTokenString = "";
      this.FSavedComments = "";
      this.FTokenRing = rtl.arraySetLength(null,this.TTokenRec,32);
      this.FTokenRingCur = 0;
      this.FTokenRingStart = 0;
      this.FTokenRingEnd = 0;
    };
    this.$final = function () {
      this.FCurModule = undefined;
      this.FFileResolver = undefined;
      this.FImplicitUses = undefined;
      this.FLastMsgArgs = undefined;
      this.FLogEvents = undefined;
      this.FOnLog = undefined;
      this.FOptions = undefined;
      this.FScanner = undefined;
      this.FEngine = undefined;
      this.FTokenRing = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.CheckOverloadList = function (AList, AName, OldMember) {
      var Result = null;
      var I = 0;
      Result = null;
      I = 0;
      while ((Result === null) && (I < AList.FCount)) {
        OldMember.set(rtl.getObject(AList.Get(I)));
        if (pas.SysUtils.CompareText(OldMember.get().FName,AName) === 0) {
          if (pas.PasTree.TPasOverloadedProc.isPrototypeOf(OldMember.get())) {
            Result = OldMember.get()}
           else {
            Result = this.CreateElement(pas.PasTree.TPasOverloadedProc,AName,OldMember.get().FParent);
            OldMember.get().SetParent(Result);
            Result.Visibility = OldMember.get().Visibility;
            Result.Overloads.Add(OldMember.get());
            Result.SourceFilename = OldMember.get().SourceFilename;
            Result.SourceLinenumber = OldMember.get().SourceLinenumber;
            Result.FDocComment = OldMember.get().FDocComment;
            AList.Put(I,Result);
          };
        };
        I += 1;
      };
      if (Result === null) OldMember.set(null);
      return Result;
    };
    this.DoCheckHint = function (Element) {
      var Result = false;
      var ahint = 0;
      Result = this.IsCurTokenHint({get: function () {
          return ahint;
        }, set: function (v) {
          ahint = v;
        }});
      if (Result) {
        Element.FHints = rtl.unionSet(Element.FHints,rtl.createSet(ahint));
        if (ahint === pas.PasTree.TPasMemberHint.hDeprecated) {
          this.NextToken();
          if (this.FCurToken !== pas.PScanner.TToken.tkString) {
            this.UngetToken()}
           else Element.FHintMessage = this.FCurTokenString;
        };
      };
      return Result;
    };
    this.GetCurrentModeSwitches = function () {
      var Result = {};
      if (this.FScanner != null) {
        Result = rtl.refSet(this.FScanner.FCurrentModeSwitches)}
       else Result = rtl.createSet(pas.PScanner.TModeSwitch.msNone);
      return Result;
    };
    this.SetCurrentModeSwitches = function (AValue) {
      if (this.FScanner != null) this.FScanner.SetCurrentModeSwitches(rtl.refSet(AValue));
    };
    this.GetVariableModifiers = function (Parent, VarMods, LibName, ExportName, AllowedMods) {
      var Result = "";
      var S = "";
      var ExtMod = 0;
      Result = "";
      LibName.set(null);
      ExportName.set(null);
      VarMods.set({});
      this.NextToken();
      if ((pas.PasTree.TVariableModifier.vmCVar in AllowedMods) && this.CurTokenIsIdentifier("cvar")) {
        Result = ";cvar";
        VarMods.set(rtl.includeSet(VarMods.get(),pas.PasTree.TVariableModifier.vmCVar));
        this.ExpectToken(pas.PScanner.TToken.tkSemicolon);
        this.NextToken();
      };
      S = pas.SysUtils.LowerCase(this.CurTokenText());
      if ((pas.PasTree.TVariableModifier.vmExternal in AllowedMods) && (S === "external")) {
        ExtMod = pas.PasTree.TVariableModifier.vmExternal}
       else if ((pas.PasTree.TVariableModifier.vmPublic in AllowedMods) && (S === "public")) {
        ExtMod = pas.PasTree.TVariableModifier.vmPublic}
       else if ((pas.PasTree.TVariableModifier.vmExport in AllowedMods) && (S === "export")) {
        ExtMod = pas.PasTree.TVariableModifier.vmExport}
       else {
        this.UngetToken();
        return Result;
      };
      VarMods.set(rtl.includeSet(VarMods.get(),ExtMod));
      Result = (Result + ";") + this.CurTokenText();
      this.NextToken();
      if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkString,pas.PScanner.TToken.tkIdentifier))) {
        if ((this.FCurToken === pas.PScanner.TToken.tkSemicolon) && (ExtMod in rtl.createSet(pas.PasTree.TVariableModifier.vmExternal,pas.PasTree.TVariableModifier.vmPublic))) return Result;
        this.ParseExcSyntaxError();
      };
      if (((ExtMod === pas.PasTree.TVariableModifier.vmExternal) && (this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkString,pas.PScanner.TToken.tkIdentifier))) && !this.CurTokenIsIdentifier("name")) {
        Result = (Result + " ") + this.CurTokenText();
        LibName.set(this.DoParseExpression(Parent,null,true));
      };
      if (!this.CurTokenIsIdentifier("name")) this.ParseExcSyntaxError();
      this.NextToken();
      if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkChar,pas.PScanner.TToken.tkString,pas.PScanner.TToken.tkIdentifier))) this.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkString]);
      Result = (Result + " ") + this.CurTokenText();
      ExportName.set(this.DoParseExpression(Parent,null,true));
      return Result;
    };
    this.GetVariableValueAndLocation = function (Parent, Value, AbsoluteExpr, Location) {
      var Result = false;
      Value.set(null);
      AbsoluteExpr.set(null);
      Location.set("");
      this.NextToken();
      Result = this.FCurToken === pas.PScanner.TToken.tkEqual;
      if (Result) {
        this.NextToken();
        Value.set(this.DoParseConstValueExpression(Parent));
      };
      if (this.FCurToken === pas.PScanner.TToken.tkabsolute) {
        Result = true;
        this.ExpectIdentifier();
        Location.set(this.CurTokenText());
        AbsoluteExpr.set(this.CreatePrimitiveExpr(Parent,pas.PasTree.TPasExprKind.pekIdent,this.CurTokenText()));
        this.NextToken();
        while (this.FCurToken === pas.PScanner.TToken.tkDot) {
          this.ExpectIdentifier();
          Location.set((Location.get() + ".") + this.CurTokenText());
          AbsoluteExpr.set(this.CreateBinaryExpr(Parent,AbsoluteExpr.get(),this.CreatePrimitiveExpr(Parent,pas.PasTree.TPasExprKind.pekIdent,this.CurTokenText()),pas.PasTree.TExprOpCode.eopSubIdent));
          this.NextToken();
        };
        this.UngetToken();
      } else this.UngetToken();
      return Result;
    };
    this.HandleProcedureModifier = function (Parent, pm) {
      var Self = this;
      var Tok = "";
      var P = null;
      var E = null;
      function AddModifier() {
        if (pm in P.FModifiers) Self.ParseExcSyntaxError();
        P.AddModifier(pm);
      };
      P = Parent;
      if (pm !== pas.PasTree.TProcedureModifier.pmPublic) AddModifier();
      var $tmp1 = pm;
      if ($tmp1 === pas.PasTree.TProcedureModifier.pmExternal) {
        Self.NextToken();
        if (Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkString,pas.PScanner.TToken.tkIdentifier)) {
          Tok = pas.SysUtils.UpperCase(Self.FCurTokenString);
          if (!((Self.FCurToken === pas.PScanner.TToken.tkIdentifier) && (Tok === "NAME"))) {
            E = Self.DoParseExpression(Parent,null,true);
            if (P != null) P.LibraryExpr = E;
          };
          if (Self.FCurToken === pas.PScanner.TToken.tkSemicolon) {
            Self.UngetToken()}
           else {
            Tok = pas.SysUtils.UpperCase(Self.FCurTokenString);
            if ((Self.FCurToken === pas.PScanner.TToken.tkIdentifier) && (Tok === "NAME")) {
              Self.NextToken();
              if (!(Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkChar,pas.PScanner.TToken.tkString,pas.PScanner.TToken.tkIdentifier))) Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkString]);
              E = Self.DoParseExpression(Parent,null,true);
              if (P != null) P.LibrarySymbolName = E;
            };
          };
        } else Self.UngetToken();
      } else if ($tmp1 === pas.PasTree.TProcedureModifier.pmPublic) {
        Self.NextToken();
        if (!Self.CurTokenIsIdentifier("name")) {
          if (pas.PasTree.TPasClassType.isPrototypeOf(P.FParent)) {
            Self.UngetToken();
            Self.UngetToken();
            return;
          };
          AddModifier();
          Self.CheckToken(pas.PScanner.TToken.tkSemicolon);
          return;
        } else {
          AddModifier();
          Self.NextToken();
          if (!(Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkString,pas.PScanner.TToken.tkIdentifier))) Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkString]);
          E = Self.DoParseExpression(Parent,null,true);
          if (pas.PasTree.TPasProcedure.isPrototypeOf(Parent)) Parent.PublicName = E;
          if (Self.FCurToken !== pas.PScanner.TToken.tkSemicolon) Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkSemicolon]);
        };
      } else if ($tmp1 === pas.PasTree.TProcedureModifier.pmForward) {
        if (pas.PasTree.TInterfaceSection.isPrototypeOf(Parent.FParent)) {
          Self.ParseExc(2007,rtl.getResStr(pas.PParser,"SParserForwardNotInterface"));
          Self.UngetToken();
        };
      } else if ($tmp1 === pas.PasTree.TProcedureModifier.pmMessage) {
        do {
          Self.NextToken();
          if (Self.FCurToken !== pas.PScanner.TToken.tkSemicolon) {
            if (pas.PasTree.TPasProcedure.isPrototypeOf(Parent)) Parent.FMessageName = Self.FCurTokenString;
            if ((Self.FCurToken === pas.PScanner.TToken.tkString) && pas.PasTree.TPasProcedure.isPrototypeOf(Parent)) Parent.FMessageType = pas.PasTree.TProcedureMessageType.pmtString;
          };
        } while (!(Self.FCurToken === pas.PScanner.TToken.tkSemicolon));
        Self.UngetToken();
      } else if ($tmp1 === pas.PasTree.TProcedureModifier.pmDispId) {
        Parent.DispIDExpr = Self.DoParseExpression(Parent,null,true);
        if (Self.FCurToken === pas.PScanner.TToken.tkSemicolon) Self.UngetToken();
      };
    };
    this.HandleProcedureTypeModifier = function (ProcType, ptm) {
      if (ptm in ProcType.Modifiers) this.ParseExcSyntaxError();
      ProcType.Modifiers = rtl.includeSet(ProcType.Modifiers,ptm);
    };
    this.ParseClassLocalConsts = function (AType, AVisibility) {
      var C = null;
      var Done = false;
      do {
        C = this.ParseConstDecl(AType);
        C.Visibility = AVisibility;
        AType.Members.Add(C);
        this.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,C);
        this.NextToken();
        Done = (this.FCurToken !== pas.PScanner.TToken.tkIdentifier) || this.CheckVisibility(this.FCurTokenString,{get: function () {
            return AVisibility;
          }, set: function (v) {
            AVisibility = v;
          }});
        if (Done) this.UngetToken();
      } while (!Done);
    };
    this.ParseClassLocalTypes = function (AType, AVisibility) {
      var T = null;
      var Done = false;
      do {
        T = this.ParseTypeDecl(AType);
        T.Visibility = AVisibility;
        AType.Members.Add(T);
        this.NextToken();
        Done = (this.FCurToken !== pas.PScanner.TToken.tkIdentifier) || this.CheckVisibility(this.FCurTokenString,{get: function () {
            return AVisibility;
          }, set: function (v) {
            AVisibility = v;
          }});
        if (Done) this.UngetToken();
      } while (!Done);
    };
    this.ParseVarList = function (Parent, VarList, AVisibility, Full) {
      var i = 0;
      var OldListCount = 0;
      var Value = null;
      var aLibName = null;
      var aExpName = null;
      var AbsoluteExpr = null;
      var VarType = null;
      var VarEl = null;
      var H = {};
      var VarMods = {};
      var AllowedVarMods = {};
      var D = "";
      var Mods = "";
      var AbsoluteLocString = "";
      var OldForceCaret = false;
      var ok = false;
      var ExternalStruct = false;
      Value = null;
      aLibName = null;
      aExpName = null;
      AbsoluteExpr = null;
      AbsoluteLocString = "";
      OldListCount = VarList.FCount;
      ok = false;
      try {
        D = this.SaveComments();
        VarEl = null;
        do {
          VarEl = this.CreateElement$3(pas.PasTree.TPasVariable,this.FCurTokenString,Parent,AVisibility,this.CurTokenPos());
          VarList.Add(VarEl);
          this.NextToken();
          if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkComma,pas.PScanner.TToken.tkColon))) this.ParseExc(2014,rtl.getResStr(pas.PParser,"SParserExpectedCommaColon"));
          if (this.FCurToken === pas.PScanner.TToken.tkComma) this.ExpectIdentifier();
        } while (!(this.FCurToken === pas.PScanner.TToken.tkColon));
        OldForceCaret = this.FScanner.SetForceCaret(true);
        try {
          VarType = this.ParseComplexType(VarEl);
        } finally {
          this.FScanner.SetForceCaret(OldForceCaret);
        };
        for (var $l1 = OldListCount, $end2 = VarList.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          VarEl = rtl.getObject(VarList.Get(i));
          VarEl.VarType = VarType;
          if (i > OldListCount) VarType.AddRef();
        };
        H = rtl.refSet(this.CheckHint(null,false));
        if (Full) this.GetVariableValueAndLocation(VarEl,{get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }},{get: function () {
            return AbsoluteExpr;
          }, set: function (v) {
            AbsoluteExpr = v;
          }},{get: function () {
            return AbsoluteLocString;
          }, set: function (v) {
            AbsoluteLocString = v;
          }});
        if (VarList.FCount > (OldListCount + 1)) {
          if (Value !== null) this.ParseExc(2048,rtl.getResStr(pas.PParser,"SParserOnlyOneVariableCanBeInitialized"));
          if (AbsoluteExpr !== null) this.ParseExc(2055,rtl.getResStr(pas.PParser,"SParserOnlyOneVariableCanBeAbsolute"));
        };
        rtl.getObject(VarList.Get(OldListCount)).Expr = Value;
        Value = null;
        ExternalStruct = (pas.PScanner.TModeSwitch.msExternalClass in this.GetCurrentModeSwitches()) && (pas.PasTree.TPasClassType.isPrototypeOf(Parent) || pas.PasTree.TPasRecordType.isPrototypeOf(Parent));
        H = rtl.unionSet(H,this.CheckHint(null,false));
        if (Full || ExternalStruct) {
          this.NextToken();
          if (this.FCurToken !== pas.PScanner.TToken.tkSemicolon) this.UngetToken();
          VarEl = rtl.getObject(VarList.Get(0));
          AllowedVarMods = {};
          if (ExternalStruct) {
            AllowedVarMods = rtl.createSet(pas.PasTree.TVariableModifier.vmExternal)}
           else AllowedVarMods = rtl.createSet(pas.PasTree.TVariableModifier.vmCVar,pas.PasTree.TVariableModifier.vmExternal,pas.PasTree.TVariableModifier.vmPublic,pas.PasTree.TVariableModifier.vmExport);
          Mods = this.GetVariableModifiers(VarEl,{get: function () {
              return VarMods;
            }, set: function (v) {
              VarMods = v;
            }},{get: function () {
              return aLibName;
            }, set: function (v) {
              aLibName = v;
            }},{get: function () {
              return aExpName;
            }, set: function (v) {
              aExpName = v;
            }},AllowedVarMods);
          if ((Mods === "") && (this.FCurToken !== pas.PScanner.TToken.tkSemicolon)) this.NextToken();
        } else {
          this.NextToken();
          VarMods = {};
          Mods = "";
        };
        this.SaveComments$1(D);
        for (var $l3 = OldListCount, $end4 = VarList.FCount - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          VarEl = rtl.getObject(VarList.Get(i));
          if ((VarType != null) && pas.PasTree.TPasProcedureType.isPrototypeOf(VarType)) {
            VarEl.FHints = rtl.refSet(VarType.FHints)}
           else VarEl.FHints = rtl.refSet(H);
          VarEl.Modifiers = Mods;
          VarEl.VarModifiers = rtl.refSet(VarMods);
          VarEl.AbsoluteLocation = AbsoluteLocString;
          if (AbsoluteExpr !== null) {
            VarEl.AbsoluteExpr = AbsoluteExpr;
            AbsoluteExpr = null;
          };
          if (aLibName !== null) {
            VarEl.LibraryName = aLibName;
            aLibName = null;
          };
          if (aExpName !== null) {
            VarEl.ExportName = aExpName;
            aExpName = null;
          };
        };
        ok = true;
      } finally {
        if (!ok) {
          if (aLibName !== null) aLibName.Release();
          if (aExpName !== null) aExpName.Release();
          if (AbsoluteExpr !== null) AbsoluteExpr.Release();
          if (Value !== null) Value.Release();
          for (var $l5 = OldListCount, $end6 = VarList.FCount - 1; $l5 <= $end6; $l5++) {
            i = $l5;
            rtl.getObject(VarList.Get(i)).Release();
          };
          VarList.SetCount(OldListCount);
        };
      };
    };
    this.SetOptions = function (AValue) {
      if (rtl.eqSet(this.FOptions,AValue)) return;
      this.FOptions = rtl.refSet(AValue);
      if (this.FScanner != null) this.FScanner.SetOptions(rtl.refSet(AValue));
    };
    this.OnScannerModeChanged = function (Sender, NewMode, Before, Handled) {
      this.FEngine.ModeChanged(this,NewMode,Before,Handled);
    };
    this.SaveComments = function () {
      var Result = "";
      if (this.FEngine.FNeedComments) this.FSavedComments = this.CurComments().GetTextStr();
      Result = this.FSavedComments;
      return Result;
    };
    this.SaveComments$1 = function (AValue) {
      var Result = "";
      this.FSavedComments = AValue;
      Result = this.FSavedComments;
      return Result;
    };
    this.LogEvent = function (E) {
      var Result = false;
      Result = E in this.FLogEvents;
      return Result;
    };
    this.DoLog = function (MsgType, MsgNumber, Msg, SkipSourceInfo) {
      this.DoLog$1(MsgType,MsgNumber,Msg,[],SkipSourceInfo);
    };
    this.DoLog$1 = function (MsgType, MsgNumber, Fmt, Args, SkipSourceInfo) {
      var Msg = "";
      if ((this.FScanner !== null) && this.FScanner.IgnoreMsgType(MsgType)) return;
      this.SetLastMsg(MsgType,MsgNumber,Fmt,Args);
      if (this.FOnLog != null) {
        Msg = pas.PScanner.MessageTypeNames[MsgType] + ": ";
        if (SkipSourceInfo || !(this.FScanner != null)) {
          Msg = Msg + this.FLastMsg}
         else Msg = Msg + pas.SysUtils.Format("%s(%d,%d) : %s",[this.FScanner.FCurFilename,this.FScanner.FCurRow,this.FScanner.GetCurColumn(),this.FLastMsg]);
        this.FOnLog(this,Msg);
      };
    };
    this.GetProcTypeFromToken = function (tk, IsClass) {
      var Result = 0;
      var $tmp1 = tk;
      if ($tmp1 === pas.PScanner.TToken.tkprocedure) {
        if (IsClass) {
          Result = pas.PasTree.TProcType.ptClassProcedure}
         else Result = pas.PasTree.TProcType.ptProcedure}
       else if ($tmp1 === pas.PScanner.TToken.tkfunction) {
        if (IsClass) {
          Result = pas.PasTree.TProcType.ptClassFunction}
         else Result = pas.PasTree.TProcType.ptFunction}
       else if ($tmp1 === pas.PScanner.TToken.tkconstructor) {
        if (IsClass) {
          Result = pas.PasTree.TProcType.ptClassConstructor}
         else Result = pas.PasTree.TProcType.ptConstructor}
       else if ($tmp1 === pas.PScanner.TToken.tkdestructor) {
        if (IsClass) {
          Result = pas.PasTree.TProcType.ptClassDestructor}
         else Result = pas.PasTree.TProcType.ptDestructor}
       else if ($tmp1 === pas.PScanner.TToken.tkoperator) {
        if (IsClass) {
          Result = pas.PasTree.TProcType.ptClassOperator}
         else Result = pas.PasTree.TProcType.ptOperator}
       else {
        this.ParseExc(2026,rtl.getResStr(pas.PParser,"SParserNotAProcToken"));
      };
      return Result;
    };
    this.ParseAsmBlock = function (AsmBlock) {
      var Self = this;
      var LastToken = 0;
      var p = null;
      function atEndOfAsm() {
        var Result = false;
        Result = (Self.FCurToken === pas.PScanner.TToken.tkend) && !(LastToken in rtl.createSet(pas.PScanner.TToken.tkAt,pas.PScanner.TToken.tkAtAt));
        return Result;
      };
      if (pas.PScanner.TPOption.po_AsmWhole in Self.FOptions) {
        Self.FTokenRingCur = 0;
        Self.FTokenRingStart = 0;
        Self.FTokenRingEnd = 1;
        p = Self.FTokenRing[0];
        p.Comments.Clear();
        do {
          Self.FScanner.ReadNonPascalTillEndToken(true);
          var $tmp1 = Self.FScanner.FCurToken;
          if (($tmp1 === pas.PScanner.TToken.tkLineEnding) || ($tmp1 === pas.PScanner.TToken.tkWhitespace)) {
            AsmBlock.FTokens.Add(Self.FScanner.FCurTokenString)}
           else if ($tmp1 === pas.PScanner.TToken.tkend) {
            p.Token = pas.PScanner.TToken.tkend;
            p.AsString = Self.FScanner.FCurTokenString;
            break;
          } else {
            p.Token = pas.PScanner.TToken.tkEOF;
            p.AsString = "";
            break;
          };
        } while (!false);
        Self.FCurToken = p.Token;
        Self.FCurTokenString = p.AsString;
        Self.CheckToken(pas.PScanner.TToken.tkend);
      } else {
        LastToken = pas.PScanner.TToken.tkEOF;
        Self.NextToken();
        while (!atEndOfAsm()) {
          AsmBlock.FTokens.Add(Self.CurTokenText());
          LastToken = Self.FCurToken;
          Self.NextToken();
        };
      };
    };
    this.ParseRecordFieldList = function (ARec, AEndToken, AllowMethods) {
      var VariantName = "";
      var v = 0;
      var Proc = null;
      var ProcType = 0;
      var Prop = null;
      var Cons = null;
      var isClass = false;
      var NamePos = new pas.PScanner.TPasSourcePos();
      var OldCount = 0;
      var i = 0;
      v = pas.PasTree.TPasMemberVisibility.visDefault;
      isClass = false;
      while (this.FCurToken !== AEndToken) {
        this.SaveComments();
        var $tmp1 = this.FCurToken;
        if ($tmp1 === pas.PScanner.TToken.tkconst) {
          if (!AllowMethods) this.ParseExc(2035,rtl.getResStr(pas.PParser,"SErrRecordConstantsNotAllowed"));
          this.ExpectToken(pas.PScanner.TToken.tkIdentifier);
          Cons = this.ParseConstDecl(ARec);
          Cons.Visibility = v;
          ARec.Members.Add(Cons);
          this.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,Cons);
        } else if ($tmp1 === pas.PScanner.TToken.tkvar) {
          if (!AllowMethods) this.ParseExc(2053,rtl.getResStr(pas.PParser,"SErrRecordVariablesNotAllowed"));
          this.ExpectToken(pas.PScanner.TToken.tkIdentifier);
          OldCount = ARec.Members.FCount;
          this.ParseInlineVarDecl(ARec,ARec.Members,v,AEndToken === pas.PScanner.TToken.tkBraceClose);
          for (var $l2 = OldCount, $end3 = ARec.Members.FCount - 1; $l2 <= $end3; $l2++) {
            i = $l2;
            if (isClass) {
              var $with4 = rtl.getObject(ARec.Members.Get(i));
              $with4.VarModifiers = rtl.unionSet($with4.VarModifiers,rtl.createSet(pas.PasTree.TVariableModifier.vmClass));
            };
            this.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,rtl.getObject(ARec.Members.Get(i)));
          };
        } else if ($tmp1 === pas.PScanner.TToken.tkclass) {
          if (!AllowMethods) this.ParseExc(2036,rtl.getResStr(pas.PParser,"SErrRecordMethodsNotAllowed"));
          if (isClass) this.ParseExc(2023,rtl.getResStr(pas.PParser,"SParserTypeSyntaxError"));
          isClass = true;
          this.FScanner.SetTokenOption(pas.PScanner.TTokenOption.toOperatorToken);
        } else if ($tmp1 === pas.PScanner.TToken.tkproperty) {
          if (!AllowMethods) this.ParseExc(2037,rtl.getResStr(pas.PParser,"SErrRecordPropertiesNotAllowed"));
          this.ExpectToken(pas.PScanner.TToken.tkIdentifier);
          Prop = this.ParseProperty(ARec,this.FCurTokenString,v,isClass);
          ARec.Members.Add(Prop);
          this.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,Prop);
        } else if (((($tmp1 === pas.PScanner.TToken.tkoperator) || ($tmp1 === pas.PScanner.TToken.tkprocedure)) || ($tmp1 === pas.PScanner.TToken.tkconstructor)) || ($tmp1 === pas.PScanner.TToken.tkfunction)) {
          if (!AllowMethods) this.ParseExc(2036,rtl.getResStr(pas.PParser,"SErrRecordMethodsNotAllowed"));
          ProcType = this.GetProcTypeFromToken(this.FCurToken,isClass);
          Proc = this.ParseProcedureOrFunctionDecl(ARec,ProcType,v);
          if (pas.PasTree.TPasOverloadedProc.isPrototypeOf(Proc.FParent)) {
            Proc.FParent.Overloads.Add(Proc)}
           else ARec.Members.Add(Proc);
        } else if (($tmp1 === pas.PScanner.TToken.tkgeneric) || ($tmp1 === pas.PScanner.TToken.tkIdentifier)) {
          if (this.CheckVisibility(this.FCurTokenString,{get: function () {
              return v;
            }, set: function (w) {
              v = w;
            }})) {
            if (!(pas.PScanner.TModeSwitch.msAdvancedRecords in this.FScanner.FCurrentModeSwitches)) this.ParseExc(2038,rtl.getResStr(pas.PParser,"SErrRecordVisibilityNotAllowed"));
            if (!(v in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPrivate,pas.PasTree.TPasMemberVisibility.visPublic,pas.PasTree.TPasMemberVisibility.visStrictPrivate))) this.ParseExc(2034,rtl.getResStr(pas.PParser,"SParserInvalidRecordVisibility"));
            this.NextToken();
            continue;
          };
          OldCount = ARec.Members.FCount;
          this.ParseInlineVarDecl(ARec,ARec.Members,v,AEndToken === pas.PScanner.TToken.tkBraceClose);
          for (var $l5 = OldCount, $end6 = ARec.Members.FCount - 1; $l5 <= $end6; $l5++) {
            i = $l5;
            this.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,rtl.getObject(ARec.Members.Get(i)));
          };
        } else if ($tmp1 === pas.PScanner.TToken.tkcase) {
          ARec.Variants = pas.Classes.TFPList.$create("Create");
          this.NextToken();
          VariantName = this.FCurTokenString;
          NamePos = new pas.PScanner.TPasSourcePos(this.CurSourcePos());
          this.NextToken();
          if (this.FCurToken === pas.PScanner.TToken.tkColon) {
            ARec.VariantEl = this.CreateElement$1(pas.PasTree.TPasVariable,VariantName,ARec,NamePos);
            ARec.VariantEl.VarType = this.ParseType(ARec,this.CurSourcePos(),"",false,null);
          } else {
            this.UngetToken();
            this.UngetToken();
            ARec.VariantEl = this.ParseType(ARec,this.CurSourcePos(),"",false,null);
          };
          this.ExpectToken(pas.PScanner.TToken.tkof);
          this.ParseRecordVariantParts(ARec,AEndToken);
        } else {
          this.ParseExc(2023,rtl.getResStr(pas.PParser,"SParserTypeSyntaxError"));
        };
        if (this.FCurToken !== pas.PScanner.TToken.tkclass) {
          isClass = false;
          this.FScanner.UnSetTokenOption(pas.PScanner.TTokenOption.toOperatorToken);
        };
        if (this.FCurToken !== AEndToken) this.NextToken();
      };
    };
    this.ParseRecordVariantParts = function (ARec, AEndToken) {
      var M = null;
      var V = null;
      var Done = false;
      do {
        V = this.CreateElement(pas.PasTree.TPasVariant,"",ARec);
        ARec.Variants.Add(V);
        do {
          this.NextToken();
          V.Values.Add(this.DoParseExpression(ARec,null,true));
          if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkComma,pas.PScanner.TToken.tkColon))) this.ParseExc(2014,rtl.getResStr(pas.PParser,"SParserExpectedCommaColon"));
        } while (!(this.FCurToken === pas.PScanner.TToken.tkColon));
        this.ExpectToken(pas.PScanner.TToken.tkBraceOpen);
        this.NextToken();
        M = this.CreateElement(pas.PasTree.TPasRecordType,"",V);
        V.Members = M;
        this.ParseRecordFieldList(M,pas.PScanner.TToken.tkBraceClose,false);
        this.NextToken();
        if (this.FCurToken === pas.PScanner.TToken.tkSemicolon) this.NextToken();
        Done = this.FCurToken === AEndToken;
        if (!Done) this.UngetToken();
      } while (!Done);
    };
    this.GetProcedureClass = function (ProcType) {
      var Result = null;
      var $tmp1 = ProcType;
      if ($tmp1 === pas.PasTree.TProcType.ptFunction) {
        Result = pas.PasTree.TPasFunction}
       else if ($tmp1 === pas.PasTree.TProcType.ptClassFunction) {
        Result = pas.PasTree.TPasClassFunction}
       else if ($tmp1 === pas.PasTree.TProcType.ptClassProcedure) {
        Result = pas.PasTree.TPasClassProcedure}
       else if ($tmp1 === pas.PasTree.TProcType.ptClassConstructor) {
        Result = pas.PasTree.TPasClassConstructor}
       else if ($tmp1 === pas.PasTree.TProcType.ptClassDestructor) {
        Result = pas.PasTree.TPasClassDestructor}
       else if ($tmp1 === pas.PasTree.TProcType.ptProcedure) {
        Result = pas.PasTree.TPasProcedure}
       else if ($tmp1 === pas.PasTree.TProcType.ptConstructor) {
        Result = pas.PasTree.TPasConstructor}
       else if ($tmp1 === pas.PasTree.TProcType.ptDestructor) {
        Result = pas.PasTree.TPasDestructor}
       else if ($tmp1 === pas.PasTree.TProcType.ptOperator) {
        Result = pas.PasTree.TPasOperator}
       else if ($tmp1 === pas.PasTree.TProcType.ptClassOperator) {
        Result = pas.PasTree.TPasClassOperator}
       else {
        this.ParseExc$1(2043,rtl.getResStr(pas.PParser,"SParserUnknownProcedureType"),[ProcType]);
      };
      return Result;
    };
    this.ParseClassFields = function (AType, AVisibility, IsClassField) {
      var VarList = null;
      var Element = null;
      var I = 0;
      var isStatic = false;
      var VarEl = null;
      VarList = pas.Classes.TFPList.$create("Create");
      try {
        this.ParseInlineVarDecl(AType,VarList,AVisibility,false);
        if (this.FCurToken === pas.PScanner.TToken.tkSemicolon) {
          this.NextToken();
          isStatic = this.CurTokenIsIdentifier("static");
          if (isStatic) {
            this.ExpectToken(pas.PScanner.TToken.tkSemicolon)}
           else this.UngetToken();
        };
        for (var $l1 = 0, $end2 = VarList.FCount - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          Element = rtl.getObject(VarList.Get(I));
          Element.Visibility = AVisibility;
          AType.Members.Add(Element);
          if (pas.PasTree.TPasVariable.isPrototypeOf(Element)) {
            VarEl = Element;
            if (IsClassField) VarEl.VarModifiers = rtl.includeSet(VarEl.VarModifiers,pas.PasTree.TVariableModifier.vmClass);
            if (isStatic) VarEl.VarModifiers = rtl.includeSet(VarEl.VarModifiers,pas.PasTree.TVariableModifier.vmStatic);
            this.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,VarEl);
          };
        };
      } finally {
        VarList = rtl.freeLoc(VarList);
      };
    };
    this.ParseClassMembers = function (AType) {
      var TSectionType = {"0": "stNone", stNone: 0, "1": "stConst", stConst: 1, "2": "stType", stType: 2, "3": "stVar", stVar: 3, "4": "stClassVar", stClassVar: 4};
      var CurVisibility = 0;
      var CurSection = 0;
      var haveClass = false;
      var IsMethodResolution = false;
      var LastToken = 0;
      var PropEl = null;
      var MethodRes = null;
      CurSection = TSectionType.stNone;
      haveClass = false;
      if (this.FEngine != null) {
        CurVisibility = this.FEngine.GetDefaultClassVisibility(AType)}
       else CurVisibility = pas.PasTree.TPasMemberVisibility.visPublic;
      LastToken = this.FCurToken;
      while (this.FCurToken !== pas.PScanner.TToken.tkend) {
        var $tmp1 = this.FCurToken;
        if ($tmp1 === pas.PScanner.TToken.tktype) {
          var $tmp2 = AType.ObjKind;
          if (((((($tmp2 === pas.PasTree.TPasObjKind.okClass) || ($tmp2 === pas.PasTree.TPasObjKind.okObject)) || ($tmp2 === pas.PasTree.TPasObjKind.okGeneric)) || ($tmp2 === pas.PasTree.TPasObjKind.okClassHelper)) || ($tmp2 === pas.PasTree.TPasObjKind.okRecordHelper)) || ($tmp2 === pas.PasTree.TPasObjKind.okTypeHelper)) {}
          else {
            this.ParseExc$1(2056,rtl.getResStr(pas.PParser,"SParserXNotAllowedInY"),["TYPE",pas.PasTree.ObjKindNames[AType.ObjKind]]);
          };
          CurSection = TSectionType.stType;
        } else if ($tmp1 === pas.PScanner.TToken.tkconst) {
          if (haveClass) this.ParseExc$1(2010,rtl.getResStr(pas.PParser,"SParserExpectToken2Error"),["Procedure","Var"]);
          var $tmp3 = AType.ObjKind;
          if (((((($tmp3 === pas.PasTree.TPasObjKind.okClass) || ($tmp3 === pas.PasTree.TPasObjKind.okObject)) || ($tmp3 === pas.PasTree.TPasObjKind.okGeneric)) || ($tmp3 === pas.PasTree.TPasObjKind.okClassHelper)) || ($tmp3 === pas.PasTree.TPasObjKind.okRecordHelper)) || ($tmp3 === pas.PasTree.TPasObjKind.okTypeHelper)) {}
          else {
            this.ParseExc$1(2056,rtl.getResStr(pas.PParser,"SParserXNotAllowedInY"),["CONST",pas.PasTree.ObjKindNames[AType.ObjKind]]);
          };
          CurSection = TSectionType.stConst;
        } else if ($tmp1 === pas.PScanner.TToken.tkvar) {
          var $tmp4 = AType.ObjKind;
          if (((((($tmp4 === pas.PasTree.TPasObjKind.okClass) || ($tmp4 === pas.PasTree.TPasObjKind.okObject)) || ($tmp4 === pas.PasTree.TPasObjKind.okGeneric)) || ($tmp4 === pas.PasTree.TPasObjKind.okClassHelper)) || ($tmp4 === pas.PasTree.TPasObjKind.okRecordHelper)) || ($tmp4 === pas.PasTree.TPasObjKind.okTypeHelper)) {}
          else {
            this.ParseExc$1(2056,rtl.getResStr(pas.PParser,"SParserXNotAllowedInY"),["VAR",pas.PasTree.ObjKindNames[AType.ObjKind]]);
          };
          if (LastToken === pas.PScanner.TToken.tkclass) {
            CurSection = TSectionType.stClassVar}
           else CurSection = TSectionType.stVar;
        } else if ($tmp1 === pas.PScanner.TToken.tkIdentifier) {
          if (this.CheckVisibility(this.FCurTokenString,{get: function () {
              return CurVisibility;
            }, set: function (v) {
              CurVisibility = v;
            }})) {
            CurSection = TSectionType.stNone}
           else {
            if (!haveClass) this.SaveComments();
            var $tmp5 = CurSection;
            if ($tmp5 === TSectionType.stType) {
              this.ParseClassLocalTypes(AType,CurVisibility)}
             else if ($tmp5 === TSectionType.stConst) {
              this.ParseClassLocalConsts(AType,CurVisibility)}
             else if ((($tmp5 === TSectionType.stNone) || ($tmp5 === TSectionType.stVar)) || ($tmp5 === TSectionType.stClassVar)) {
              if (AType.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okInterface,pas.PasTree.TPasObjKind.okDispInterface)) this.ParseExc(2033,rtl.getResStr(pas.PParser,"SParserNoFieldsAllowed"));
              this.ParseClassFields(AType,CurVisibility,CurSection === TSectionType.stClassVar);
              haveClass = false;
            } else {
              throw pas.SysUtils.Exception.$create("Create$1",["Internal error 201704251415"]);
            };
          }}
         else if (($tmp1 === pas.PScanner.TToken.tkconstructor) || ($tmp1 === pas.PScanner.TToken.tkdestructor)) {
          CurSection = TSectionType.stNone;
          if (!haveClass) this.SaveComments();
          if (AType.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okInterface,pas.PasTree.TPasObjKind.okDispInterface,pas.PasTree.TPasObjKind.okRecordHelper)) this.ParseExc(2032,rtl.getResStr(pas.PParser,"SParserNoConstructorAllowed"));
          this.ProcessMethod(AType,haveClass,CurVisibility);
          haveClass = false;
        } else if (($tmp1 === pas.PScanner.TToken.tkprocedure) || ($tmp1 === pas.PScanner.TToken.tkfunction)) {
          CurSection = TSectionType.stNone;
          IsMethodResolution = false;
          if (!haveClass) {
            this.SaveComments();
            if (AType.ObjKind === pas.PasTree.TPasObjKind.okClass) {
              this.NextToken();
              if (this.FCurToken === pas.PScanner.TToken.tkIdentifier) {
                this.NextToken();
                IsMethodResolution = this.FCurToken === pas.PScanner.TToken.tkDot;
                this.UngetToken();
              };
              this.UngetToken();
            };
          };
          if (IsMethodResolution) {
            MethodRes = this.ParseMethodResolution(AType);
            AType.Members.Add(MethodRes);
            this.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,MethodRes);
          } else this.ProcessMethod(AType,haveClass,CurVisibility);
          haveClass = false;
        } else if ($tmp1 === pas.PScanner.TToken.tkclass) {
          var $tmp6 = AType.ObjKind;
          if (((((($tmp6 === pas.PasTree.TPasObjKind.okClass) || ($tmp6 === pas.PasTree.TPasObjKind.okObject)) || ($tmp6 === pas.PasTree.TPasObjKind.okGeneric)) || ($tmp6 === pas.PasTree.TPasObjKind.okClassHelper)) || ($tmp6 === pas.PasTree.TPasObjKind.okRecordHelper)) || ($tmp6 === pas.PasTree.TPasObjKind.okTypeHelper)) {}
          else {
            this.ParseExc$1(2056,rtl.getResStr(pas.PParser,"SParserXNotAllowedInY"),["CLASS",pas.PasTree.ObjKindNames[AType.ObjKind]]);
          };
          this.SaveComments();
          haveClass = true;
          CurSection = TSectionType.stNone;
        } else if ($tmp1 === pas.PScanner.TToken.tkproperty) {
          CurSection = TSectionType.stNone;
          if (!haveClass) this.SaveComments();
          this.ExpectIdentifier();
          PropEl = this.ParseProperty(AType,this.FCurTokenString,CurVisibility,haveClass);
          AType.Members.Add(PropEl);
          this.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,PropEl);
          haveClass = false;
        } else if ($tmp1 === pas.PScanner.TToken.tkSquaredBraceOpen) {
          if (rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PScanner.TModeSwitch.msPrefixedAttributes,pas.PScanner.TModeSwitch.msIgnoreAttributes),this.GetCurrentModeSwitches()),{})) {
            this.ParseAttribute(AType)}
           else this.CheckToken(pas.PScanner.TToken.tkIdentifier)}
         else {
          this.CheckToken(pas.PScanner.TToken.tkIdentifier);
        };
        LastToken = this.FCurToken;
        this.NextToken();
      };
    };
    this.ProcessMethod = function (AType, IsClass, AVisibility) {
      var Proc = null;
      var ProcType = 0;
      ProcType = this.GetProcTypeFromToken(this.FCurToken,IsClass);
      Proc = this.ParseProcedureOrFunctionDecl(AType,ProcType,AVisibility);
      if (pas.PasTree.TPasOverloadedProc.isPrototypeOf(Proc.FParent)) {
        Proc.FParent.Overloads.Add(Proc)}
       else AType.Members.Add(Proc);
    };
    this.ReadGenericArguments = function (List, Parent) {
      var N = "";
      this.ExpectToken(pas.PScanner.TToken.tkLessThan);
      do {
        N = this.ExpectIdentifier();
        List.Add(this.CreateElement(pas.PasTree.TPasGenericTemplateType,N,Parent));
        this.NextToken();
        if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkComma,pas.PScanner.TToken.tkGreaterThan))) this.ParseExc$1(2010,rtl.getResStr(pas.PParser,"SParserExpectToken2Error"),[pas.PScanner.TokenInfos[pas.PScanner.TToken.tkComma],pas.PScanner.TokenInfos[pas.PScanner.TToken.tkGreaterThan]]);
      } while (!(this.FCurToken === pas.PScanner.TToken.tkGreaterThan));
    };
    this.ReadSpecializeArguments = function (Spec) {
      var Name = "";
      var Ref = null;
      var IsNested = false;
      var NestedSpec = null;
      var Expr = null;
      this.CheckToken(pas.PScanner.TToken.tkLessThan);
      this.NextToken();
      Expr = null;
      Ref = null;
      NestedSpec = null;
      try {
        do {
          if (!(pas.PScanner.TModeSwitch.msDelphi in this.GetCurrentModeSwitches()) && (this.FCurToken === pas.PScanner.TToken.tkspecialize)) {
            IsNested = true;
            this.NextToken();
          } else IsNested = false;
          this.CheckToken(pas.PScanner.TToken.tkIdentifier);
          Expr = null;
          Name = this.ReadDottedIdentifier(Spec,{get: function () {
              return Expr;
            }, set: function (v) {
              Expr = v;
            }},true);
          if (this.FCurToken === pas.PScanner.TToken.tkLessThan) {
            Ref = this.ResolveTypeReference(Name,Spec);
            NestedSpec = this.CreateElement(pas.PasTree.TPasSpecializeType,"",Spec);
            NestedSpec.DestType = Ref;
            Ref = null;
            NestedSpec.Expr = Expr;
            Expr = null;
            this.ReadSpecializeArguments(NestedSpec);
            Spec.AddParam(NestedSpec);
            NestedSpec = null;
            this.NextToken();
          } else if (IsNested) {
            this.CheckToken(pas.PScanner.TToken.tkLessThan)}
           else {
            Spec.AddParam(Expr);
            Expr = null;
          };
          if (this.FCurToken === pas.PScanner.TToken.tkComma) {
            this.NextToken();
            continue;
          } else if (this.FCurToken === pas.PScanner.TToken.tkshr) {
            this.ChangeToken(pas.PScanner.TToken.tkGreaterThan);
            break;
          } else if (this.FCurToken === pas.PScanner.TToken.tkGreaterThan) {
            break}
           else this.ParseExc$1(2010,rtl.getResStr(pas.PParser,"SParserExpectToken2Error"),[pas.PScanner.TokenInfos[pas.PScanner.TToken.tkComma],pas.PScanner.TokenInfos[pas.PScanner.TToken.tkGreaterThan]]);
        } while (!false);
      } finally {
        Expr = rtl.freeLoc(Expr);
        if (Ref !== null) Ref.Release();
        if (NestedSpec !== null) NestedSpec.Release();
      };
    };
    this.ReadDottedIdentifier = function (Parent, Expr, NeedAsString) {
      var Result = "";
      var SrcPos = new pas.PScanner.TPasSourcePos();
      Expr.set(null);
      if (NeedAsString) {
        Result = this.FCurTokenString}
       else Result = "";
      this.CheckToken(pas.PScanner.TToken.tkIdentifier);
      Expr.set(this.CreatePrimitiveExpr(Parent,pas.PasTree.TPasExprKind.pekIdent,this.FCurTokenString));
      this.NextToken();
      while (this.FCurToken === pas.PScanner.TToken.tkDot) {
        SrcPos = new pas.PScanner.TPasSourcePos(this.CurTokenPos());
        this.ExpectIdentifier();
        if (NeedAsString) Result = (Result + ".") + this.FCurTokenString;
        this.AddToBinaryExprChain(Expr,this.CreatePrimitiveExpr(Parent,pas.PasTree.TPasExprKind.pekIdent,this.FCurTokenString),pas.PasTree.TExprOpCode.eopSubIdent,SrcPos);
        this.NextToken();
      };
      return Result;
    };
    this.CheckProcedureArgs = function (Parent, Args, Mandatory) {
      var Result = false;
      this.NextToken();
      var $tmp1 = this.FCurToken;
      if ($tmp1 === pas.PScanner.TToken.tkBraceOpen) {
        Result = true;
        this.NextToken();
        if (this.FCurToken !== pas.PScanner.TToken.tkBraceClose) {
          this.UngetToken();
          this.ParseArgList(Parent,Args,pas.PScanner.TToken.tkBraceClose);
        };
      } else if ((((($tmp1 === pas.PScanner.TToken.tkSemicolon) || ($tmp1 === pas.PScanner.TToken.tkColon)) || ($tmp1 === pas.PScanner.TToken.tkof)) || ($tmp1 === pas.PScanner.TToken.tkis)) || ($tmp1 === pas.PScanner.TToken.tkIdentifier)) {
        Result = false;
        if (Mandatory) {
          this.ParseExc(2017,rtl.getResStr(pas.PParser,"SParserExpectedLBracketColon"))}
         else this.UngetToken();
      } else {
        this.ParseExcTokenError(";");
      };
      return Result;
    };
    this.CheckVisibility = function (S, AVisibility) {
      var Result = false;
      var B = false;
      S = pas.SysUtils.LowerCase(this.FCurTokenString);
      B = S === "strict";
      if (B) {
        this.NextToken();
        S = pas.SysUtils.LowerCase(this.FCurTokenString);
      };
      Result = $impl.IsVisibility(S,AVisibility);
      if (Result) {
        if ((AVisibility.get() === pas.PasTree.TPasMemberVisibility.visPublished) && (pas.PScanner.TModeSwitch.msOmitRTTI in this.FScanner.FCurrentModeSwitches)) AVisibility.set(pas.PasTree.TPasMemberVisibility.visPublic);
        if (B) {
          var $tmp1 = AVisibility.get();
          if ($tmp1 === pas.PasTree.TPasMemberVisibility.visPrivate) {
            AVisibility.set(pas.PasTree.TPasMemberVisibility.visStrictPrivate)}
           else if ($tmp1 === pas.PasTree.TPasMemberVisibility.visProtected) {
            AVisibility.set(pas.PasTree.TPasMemberVisibility.visStrictProtected)}
           else {
            this.ParseExc$1(2009,rtl.getResStr(pas.PParser,"SParserStrangeVisibility"),[S]);
          };
        };
      } else if (B) this.ParseExc(2008,rtl.getResStr(pas.PParser,"SParserExpectVisibility"));
      return Result;
    };
    this.ParseExc = function (MsgNumber, Msg) {
      this.ParseExc$1(MsgNumber,Msg,[]);
    };
    this.ParseExc$1 = function (MsgNumber, Fmt, Args) {
      var p = new pas.PScanner.TPasSourcePos();
      this.SetLastMsg(pas.PScanner.TMessageType.mtError,MsgNumber,Fmt,Args);
      p = new pas.PScanner.TPasSourcePos(this.FScanner.FCurTokenPos);
      if (p.FileName === "") p = new pas.PScanner.TPasSourcePos(this.FScanner.CurSourcePos());
      if (p.Row === 0) {
        p.Row = 1;
        p.Column = 1;
      };
      throw $mod.EParserError.$create("Create$2",[pas.PScanner.SafeFormat(rtl.getResStr(pas.PParser,"SParserErrorAtToken"),[this.FLastMsg,this.CurTokenName(),p.FileName,p.Row,p.Column]),p.FileName,p.Row,p.Column]);
    };
    this.ParseExcExpectedIdentifier = function () {
      this.ParseExc(2026,rtl.getResStr(pas.PParser,"SParserExpectedIdentifier"));
    };
    this.ParseExcSyntaxError = function () {
      this.ParseExc(2022,rtl.getResStr(pas.PParser,"SParserSyntaxError"));
    };
    this.ParseExcTokenError = function (Arg) {
      this.ParseExc$1(2006,rtl.getResStr(pas.PParser,"SParserExpectTokenError"),[Arg]);
    };
    this.OpLevel = function (t) {
      var Result = 0;
      var $tmp1 = t;
      if ((($tmp1 === pas.PScanner.TToken.tknot) || ($tmp1 === pas.PScanner.TToken.tkAt)) || ($tmp1 === pas.PScanner.TToken.tkAtAt)) {
        Result = 4}
       else if ((((((((($tmp1 === pas.PScanner.TToken.tkMul) || ($tmp1 === pas.PScanner.TToken.tkDivision)) || ($tmp1 === pas.PScanner.TToken.tkdiv)) || ($tmp1 === pas.PScanner.TToken.tkmod)) || ($tmp1 === pas.PScanner.TToken.tkand)) || ($tmp1 === pas.PScanner.TToken.tkshl)) || ($tmp1 === pas.PScanner.TToken.tkshr)) || ($tmp1 === pas.PScanner.TToken.tkas)) || ($tmp1 === pas.PScanner.TToken.tkPower)) {
        Result = 3}
       else if (((($tmp1 === pas.PScanner.TToken.tkPlus) || ($tmp1 === pas.PScanner.TToken.tkMinus)) || ($tmp1 === pas.PScanner.TToken.tkor)) || ($tmp1 === pas.PScanner.TToken.tkxor)) {
        Result = 2}
       else if (((((((($tmp1 === pas.PScanner.TToken.tkEqual) || ($tmp1 === pas.PScanner.TToken.tkNotEqual)) || ($tmp1 === pas.PScanner.TToken.tkLessThan)) || ($tmp1 === pas.PScanner.TToken.tkLessEqualThan)) || ($tmp1 === pas.PScanner.TToken.tkGreaterThan)) || ($tmp1 === pas.PScanner.TToken.tkGreaterEqualThan)) || ($tmp1 === pas.PScanner.TToken.tkin)) || ($tmp1 === pas.PScanner.TToken.tkis)) {
        Result = 1}
       else {
        Result = 0;
      };
      return Result;
    };
    this.TokenToExprOp = function (AToken) {
      var Result = 0;
      var $tmp1 = AToken;
      if ($tmp1 === pas.PScanner.TToken.tkMul) {
        Result = pas.PasTree.TExprOpCode.eopMultiply}
       else if ($tmp1 === pas.PScanner.TToken.tkPlus) {
        Result = pas.PasTree.TExprOpCode.eopAdd}
       else if ($tmp1 === pas.PScanner.TToken.tkMinus) {
        Result = pas.PasTree.TExprOpCode.eopSubtract}
       else if ($tmp1 === pas.PScanner.TToken.tkDivision) {
        Result = pas.PasTree.TExprOpCode.eopDivide}
       else if ($tmp1 === pas.PScanner.TToken.tkLessThan) {
        Result = pas.PasTree.TExprOpCode.eopLessThan}
       else if ($tmp1 === pas.PScanner.TToken.tkEqual) {
        Result = pas.PasTree.TExprOpCode.eopEqual}
       else if ($tmp1 === pas.PScanner.TToken.tkGreaterThan) {
        Result = pas.PasTree.TExprOpCode.eopGreaterThan}
       else if ($tmp1 === pas.PScanner.TToken.tkAt) {
        Result = pas.PasTree.TExprOpCode.eopAddress}
       else if ($tmp1 === pas.PScanner.TToken.tkAtAt) {
        Result = pas.PasTree.TExprOpCode.eopMemAddress}
       else if ($tmp1 === pas.PScanner.TToken.tkNotEqual) {
        Result = pas.PasTree.TExprOpCode.eopNotEqual}
       else if ($tmp1 === pas.PScanner.TToken.tkLessEqualThan) {
        Result = pas.PasTree.TExprOpCode.eopLessthanEqual}
       else if ($tmp1 === pas.PScanner.TToken.tkGreaterEqualThan) {
        Result = pas.PasTree.TExprOpCode.eopGreaterThanEqual}
       else if ($tmp1 === pas.PScanner.TToken.tkPower) {
        Result = pas.PasTree.TExprOpCode.eopPower}
       else if ($tmp1 === pas.PScanner.TToken.tkSymmetricalDifference) {
        Result = pas.PasTree.TExprOpCode.eopSymmetricaldifference}
       else if ($tmp1 === pas.PScanner.TToken.tkis) {
        Result = pas.PasTree.TExprOpCode.eopIs}
       else if ($tmp1 === pas.PScanner.TToken.tkas) {
        Result = pas.PasTree.TExprOpCode.eopAs}
       else if ($tmp1 === pas.PScanner.TToken.tkshr) {
        Result = pas.PasTree.TExprOpCode.eopShr}
       else if ($tmp1 === pas.PScanner.TToken.tkshl) {
        Result = pas.PasTree.TExprOpCode.eopShl}
       else if ($tmp1 === pas.PScanner.TToken.tkand) {
        Result = pas.PasTree.TExprOpCode.eopAnd}
       else if ($tmp1 === pas.PScanner.TToken.tkor) {
        Result = pas.PasTree.TExprOpCode.eopOr}
       else if ($tmp1 === pas.PScanner.TToken.tkxor) {
        Result = pas.PasTree.TExprOpCode.eopXor}
       else if ($tmp1 === pas.PScanner.TToken.tkmod) {
        Result = pas.PasTree.TExprOpCode.eopMod}
       else if ($tmp1 === pas.PScanner.TToken.tkdiv) {
        Result = pas.PasTree.TExprOpCode.eopDiv}
       else if ($tmp1 === pas.PScanner.TToken.tknot) {
        Result = pas.PasTree.TExprOpCode.eopNot}
       else if ($tmp1 === pas.PScanner.TToken.tkin) {
        Result = pas.PasTree.TExprOpCode.eopIn}
       else if ($tmp1 === pas.PScanner.TToken.tkDot) {
        Result = pas.PasTree.TExprOpCode.eopSubIdent}
       else if ($tmp1 === pas.PScanner.TToken.tkCaret) {
        Result = pas.PasTree.TExprOpCode.eopDeref}
       else {
        this.ParseExc$1(2040,rtl.getResStr(pas.PParser,"SParserNotAnOperand"),[AToken,pas.PScanner.TokenInfos[AToken]]);
      };
      return Result;
    };
    this.CreateElement = function (AClass, AName, AParent) {
      var Result = null;
      Result = this.FEngine.CreateElement$2(AClass,AName,AParent,pas.PasTree.TPasMemberVisibility.visDefault,this.CurSourcePos());
      return Result;
    };
    this.CreateElement$1 = function (AClass, AName, AParent, ASrcPos) {
      var Result = null;
      Result = this.FEngine.CreateElement$2(AClass,AName,AParent,pas.PasTree.TPasMemberVisibility.visDefault,ASrcPos);
      return Result;
    };
    this.CreateElement$2 = function (AClass, AName, AParent, AVisibility) {
      var Result = null;
      Result = this.FEngine.CreateElement$2(AClass,AName,AParent,AVisibility,this.CurSourcePos());
      return Result;
    };
    this.CreateElement$3 = function (AClass, AName, AParent, AVisibility, ASrcPos) {
      var Result = null;
      if ((ASrcPos.Row === 0) && (ASrcPos.FileName === "")) {
        Result = this.FEngine.CreateElement$2(AClass,AName,AParent,AVisibility,this.CurSourcePos())}
       else Result = this.FEngine.CreateElement$2(AClass,AName,AParent,AVisibility,ASrcPos);
      return Result;
    };
    this.CreatePrimitiveExpr = function (AParent, AKind, AValue) {
      var Result = null;
      Result = this.CreateElement$1(pas.PasTree.TPrimitiveExpr,"",AParent,this.CurTokenPos());
      Result.Kind = AKind;
      Result.Value = AValue;
      return Result;
    };
    this.CreateBoolConstExpr = function (AParent, AKind, ABoolValue) {
      var Result = null;
      Result = this.CreateElement$1(pas.PasTree.TBoolConstExpr,"",AParent,this.CurTokenPos());
      Result.Kind = AKind;
      Result.Value = ABoolValue;
      return Result;
    };
    this.CreateBinaryExpr = function (AParent, xleft, xright, AOpCode) {
      var Result = null;
      Result = this.CreateBinaryExpr$1(AParent,xleft,xright,AOpCode,this.CurSourcePos());
      return Result;
    };
    this.CreateBinaryExpr$1 = function (AParent, xleft, xright, AOpCode, ASrcPos) {
      var Result = null;
      Result = this.CreateElement$1(pas.PasTree.TBinaryExpr,"",AParent,ASrcPos);
      Result.OpCode = AOpCode;
      Result.Kind = pas.PasTree.TPasExprKind.pekBinary;
      if (xleft !== null) {
        Result.left = xleft;
        xleft.SetParent(Result);
      };
      if (xright !== null) {
        Result.right = xright;
        xright.SetParent(Result);
      };
      return Result;
    };
    this.AddToBinaryExprChain = function (ChainFirst, Element, AOpCode, ASrcPos) {
      if (Element === null) {
        return}
       else if (ChainFirst.get() === null) {
        ChainFirst.set(Element);
      } else {
        ChainFirst.set(this.CreateBinaryExpr$1(ChainFirst.get().FParent,ChainFirst.get(),Element,AOpCode,ASrcPos));
      };
    };
    this.AddParamsToBinaryExprChain = function (ChainFirst, Params) {
      var Bin = null;
      if (Params.Value !== null) this.ParseExcSyntaxError();
      if (ChainFirst.get() === null) this.ParseExcSyntaxError();
      if (pas.PasTree.TBinaryExpr.isPrototypeOf(ChainFirst.get())) {
        Bin = ChainFirst.get();
        if (Bin.left === null) this.ParseExcSyntaxError();
        if (Bin.right === null) this.ParseExcSyntaxError();
        Params.Value = Bin.right;
        Params.Value.SetParent(Params);
        Bin.right = Params;
        Params.SetParent(Bin);
      } else {
        Params.Value = ChainFirst.get();
        Params.SetParent(ChainFirst.get().FParent);
        ChainFirst.get().SetParent(Params);
        ChainFirst.set(Params);
      };
    };
    this.CreateUnaryExpr = function (AParent, AOperand, AOpCode) {
      var Result = null;
      Result = this.CreateUnaryExpr$1(AParent,AOperand,AOpCode,this.CurTokenPos());
      return Result;
    };
    this.CreateUnaryExpr$1 = function (AParent, AOperand, AOpCode, ASrcPos) {
      var Result = null;
      Result = this.CreateElement$1(pas.PasTree.TUnaryExpr,"",AParent,ASrcPos);
      Result.Kind = pas.PasTree.TPasExprKind.pekUnary;
      Result.Operand = AOperand;
      Result.Operand.SetParent(Result);
      Result.OpCode = AOpCode;
      return Result;
    };
    this.CreateArrayValues = function (AParent) {
      var Result = null;
      Result = this.CreateElement(pas.PasTree.TArrayValues,"",AParent);
      Result.Kind = pas.PasTree.TPasExprKind.pekListOfExp;
      return Result;
    };
    this.CreateFunctionType = function (AName, AResultName, AParent, UseParentAsResultParent, NamePos) {
      var Result = null;
      Result = this.FEngine.CreateFunctionType(AName,AResultName,AParent,UseParentAsResultParent,NamePos);
      return Result;
    };
    this.CreateInheritedExpr = function (AParent) {
      var Result = null;
      Result = this.CreateElement$1(pas.PasTree.TInheritedExpr,"",AParent,this.CurTokenPos());
      Result.Kind = pas.PasTree.TPasExprKind.pekInherited;
      return Result;
    };
    this.CreateSelfExpr = function (AParent) {
      var Result = null;
      Result = this.CreateElement$1(pas.PasTree.TSelfExpr,"Self",AParent,this.CurTokenPos());
      Result.Kind = pas.PasTree.TPasExprKind.pekSelf;
      return Result;
    };
    this.CreateNilExpr = function (AParent) {
      var Result = null;
      Result = this.CreateElement$1(pas.PasTree.TNilExpr,"nil",AParent,this.CurTokenPos());
      Result.Kind = pas.PasTree.TPasExprKind.pekNil;
      return Result;
    };
    this.CreateRecordValues = function (AParent) {
      var Result = null;
      Result = this.CreateElement(pas.PasTree.TRecordValues,"",AParent);
      Result.Kind = pas.PasTree.TPasExprKind.pekListOfExp;
      return Result;
    };
    this.IsCurTokenHint = function (AHint) {
      var Result = false;
      Result = this.FCurToken === pas.PScanner.TToken.tklibrary;
      if (Result) {
        AHint.set(pas.PasTree.TPasMemberHint.hLibrary)}
       else if (this.FCurToken === pas.PScanner.TToken.tkIdentifier) Result = $mod.IsHintToken(this.FCurTokenString,AHint);
      return Result;
    };
    this.IsCurTokenHint$1 = function () {
      var Result = false;
      var dummy = 0;
      Result = this.IsCurTokenHint({get: function () {
          return dummy;
        }, set: function (v) {
          dummy = v;
        }});
      return Result;
    };
    this.TokenIsCallingConvention = function (S, CC) {
      var Result = false;
      Result = $mod.IsCallingConvention(S,CC);
      return Result;
    };
    this.TokenIsProcedureModifier = function (Parent, S, PM) {
      var Result = false;
      Result = $mod.IsProcModifier(S,PM);
      if (!Result) return Result;
      while (Parent !== null) {
        if (pas.PasTree.TPasClassType.isPrototypeOf(Parent)) {
          if (PM.get() in rtl.createSet(pas.PasTree.TProcedureModifier.pmPublic,pas.PasTree.TProcedureModifier.pmForward)) return false;
          var $tmp1 = Parent.ObjKind;
          if (($tmp1 === pas.PasTree.TPasObjKind.okInterface) || ($tmp1 === pas.PasTree.TPasObjKind.okDispInterface)) if (!(PM.get() in rtl.createSet(pas.PasTree.TProcedureModifier.pmOverload,pas.PasTree.TProcedureModifier.pmMessage,pas.PasTree.TProcedureModifier.pmDispId,pas.PasTree.TProcedureModifier.pmNoReturn,pas.PasTree.TProcedureModifier.pmFar,pas.PasTree.TProcedureModifier.pmFinal))) return false;
        } else if (pas.PasTree.TPasRecordType.isPrototypeOf(Parent)) {
          if (PM.get() in rtl.createSet(pas.PasTree.TProcedureModifier.pmVirtual,pas.PasTree.TProcedureModifier.pmPublic,pas.PasTree.TProcedureModifier.pmForward)) return false;
        };
        Parent = Parent.FParent;
      };
      return Result;
    };
    this.TokenIsProcedureTypeModifier = function (Parent, S, PTM) {
      var Result = false;
      if (pas.SysUtils.CompareText(S,pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmVarargs]) === 0) {
        Result = true;
        PTM.set(pas.PasTree.TProcTypeModifier.ptmVarargs);
      } else if (pas.SysUtils.CompareText(S,pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmStatic]) === 0) {
        Result = true;
        PTM.set(pas.PasTree.TProcTypeModifier.ptmStatic);
      } else Result = false;
      if (Parent === null) ;
      return Result;
    };
    this.CheckHint = function (Element, ExpectSemiColon) {
      var Result = {};
      var Found = false;
      var h = 0;
      Result = {};
      do {
        this.NextToken();
        Found = this.IsCurTokenHint({get: function () {
            return h;
          }, set: function (v) {
            h = v;
          }});
        if (Found) {
          Result = rtl.includeSet(Result,h);
          if (h === pas.PasTree.TPasMemberHint.hDeprecated) {
            this.NextToken();
            if (this.FCurToken !== pas.PScanner.TToken.tkString) {
              this.UngetToken()}
             else if (Element != null) Element.FHintMessage = this.FCurTokenString;
          };
        };
      } while (Found);
      this.UngetToken();
      if (Element != null) Element.FHints = rtl.refSet(Result);
      if (ExpectSemiColon) this.ExpectToken(pas.PScanner.TToken.tkSemicolon);
      return Result;
    };
    this.ParseParams = function (AParent, ParamsKind, AllowFormatting) {
      var Result = null;
      var Params = null;
      var Expr = null;
      var PClose = 0;
      Result = null;
      if (ParamsKind in rtl.createSet(pas.PasTree.TPasExprKind.pekArrayParams,pas.PasTree.TPasExprKind.pekSet)) {
        if (this.FCurToken !== pas.PScanner.TToken.tkSquaredBraceOpen) this.ParseExc$1(2006,rtl.getResStr(pas.PParser,"SParserExpectTokenError"),["["]);
        PClose = pas.PScanner.TToken.tkSquaredBraceClose;
      } else {
        if (this.FCurToken !== pas.PScanner.TToken.tkBraceOpen) this.ParseExc$1(2006,rtl.getResStr(pas.PParser,"SParserExpectTokenError"),["("]);
        PClose = pas.PScanner.TToken.tkBraceClose;
      };
      Params = this.CreateElement$1(pas.PasTree.TParamsExpr,"",AParent,this.CurTokenPos());
      try {
        Params.Kind = ParamsKind;
        this.NextToken();
        if (!this.isEndOfExp(false,false)) {
          do {
            Expr = this.DoParseExpression(Params,null,true);
            if (!(Expr != null)) this.ParseExcSyntaxError();
            Params.AddParam(Expr);
            if (this.FCurToken === pas.PScanner.TToken.tkColon) if (!AllowFormatting) {
              this.ParseExc$1(2006,rtl.getResStr(pas.PParser,"SParserExpectTokenError"),[","])}
             else {
              this.NextToken();
              Expr.format1 = this.DoParseExpression(Expr,null,true);
              if (this.FCurToken === pas.PScanner.TToken.tkColon) {
                this.NextToken();
                Expr.format2 = this.DoParseExpression(Expr,null,true);
              };
            };
            if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkComma,PClose))) this.ParseExc$1(2006,rtl.getResStr(pas.PParser,"SParserExpectTokenError"),[","]);
            if (this.FCurToken === pas.PScanner.TToken.tkComma) {
              this.NextToken();
              if (this.FCurToken === PClose) {
                this.ParseExcSyntaxError();
              };
            };
          } while (!(this.FCurToken === PClose));
        };
        this.NextToken();
        Result = Params;
      } finally {
        if (Result === null) Params.Release();
      };
      return Result;
    };
    this.ParseExpIdent = function (AParent) {
      var Self = this;
      var Result = null;
      function IsWriteOrStr(P) {
        var Result = false;
        var N = "";
        Result = pas.PasTree.TPrimitiveExpr.isPrototypeOf(P);
        if (Result) {
          N = pas.SysUtils.LowerCase(P.Value);
          Result = (((N === "write") || (N === "str")) || (N === "writeln")) || (N === "writestr");
        };
        return Result;
      };
      function HandleSelf(Last) {
        var b = null;
        var optk = 0;
        Self.NextToken();
        if (Self.FCurToken === pas.PScanner.TToken.tkDot) {
          optk = Self.FCurToken;
          Self.NextToken();
          b = Self.CreateBinaryExpr(AParent,Last.get(),Self.ParseExpIdent(AParent),Self.TokenToExprOp(optk));
          if (!(b.right != null)) {
            b.Release();
            Self.ParseExcExpectedIdentifier();
          };
          Last.set(b);
        };
        Self.UngetToken();
      };
      function IsSpecialize() {
        var Result = false;
        var LookAhead = 0;
        var i = 0;
        function Next() {
          var Result = false;
          if (LookAhead === 32) return false;
          Self.NextToken();
          LookAhead += 1;
          Result = true;
          return Result;
        };
        Result = false;
        LookAhead = 0;
        Self.CheckToken(pas.PScanner.TToken.tkLessThan);
        try {
          Next();
          if (!(Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkIdentifier,pas.PScanner.TToken.tkself))) return Result;
          while (Next()) {
            var $tmp1 = Self.FCurToken;
            if ($tmp1 === pas.PScanner.TToken.tkDot) {
              if (!Next()) return Result;
              if (!(Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkIdentifier,pas.PScanner.TToken.tkself,pas.PScanner.TToken.tktrue,pas.PScanner.TToken.tkfalse))) return Result;
            } else if ($tmp1 === pas.PScanner.TToken.tkComma) {
              if (!Next()) return Result;
              if (!(Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkIdentifier,pas.PScanner.TToken.tkself))) return Result;
            } else if ($tmp1 === pas.PScanner.TToken.tkLessThan) {
              return true;
            } else if ($tmp1 === pas.PScanner.TToken.tkGreaterThan) {
              return true;
            } else {
              return Result;
            };
          };
        } finally {
          for (var $l2 = 1, $end3 = LookAhead; $l2 <= $end3; $l2++) {
            i = $l2;
            Self.UngetToken();
          };
        };
        return Result;
      };
      var Last = null;
      var Func = null;
      var Expr = null;
      var Params = null;
      var Bin = null;
      var ok = false;
      var CanSpecialize = false;
      var aName = "";
      var ISE = null;
      var ST = null;
      var SrcPos = new pas.PScanner.TPasSourcePos();
      var ScrPos = new pas.PScanner.TPasSourcePos();
      Result = null;
      CanSpecialize = false;
      aName = "";
      var $tmp1 = Self.FCurToken;
      if ($tmp1 === pas.PScanner.TToken.tkString) {
        Last = Self.CreatePrimitiveExpr(AParent,pas.PasTree.TPasExprKind.pekString,Self.FCurTokenString)}
       else if ($tmp1 === pas.PScanner.TToken.tkChar) {
        Last = Self.CreatePrimitiveExpr(AParent,pas.PasTree.TPasExprKind.pekString,Self.CurTokenText())}
       else if ($tmp1 === pas.PScanner.TToken.tkNumber) {
        Last = Self.CreatePrimitiveExpr(AParent,pas.PasTree.TPasExprKind.pekNumber,Self.FCurTokenString)}
       else if ($tmp1 === pas.PScanner.TToken.tkIdentifier) {
        CanSpecialize = true;
        aName = Self.CurTokenText();
        if (pas.SysUtils.CompareText(aName,"self") === 0) {
          Last = Self.CreateSelfExpr(AParent);
          HandleSelf({get: function () {
              return Last;
            }, set: function (v) {
              Last = v;
            }});
        } else Last = Self.CreatePrimitiveExpr(AParent,pas.PasTree.TPasExprKind.pekIdent,aName);
      } else if (($tmp1 === pas.PScanner.TToken.tkfalse) || ($tmp1 === pas.PScanner.TToken.tktrue)) {
        Last = Self.CreateBoolConstExpr(AParent,pas.PasTree.TPasExprKind.pekBoolConst,Self.FCurToken === pas.PScanner.TToken.tktrue)}
       else if ($tmp1 === pas.PScanner.TToken.tknil) {
        Last = Self.CreateNilExpr(AParent)}
       else if ($tmp1 === pas.PScanner.TToken.tkSquaredBraceOpen) {
        Last = Self.ParseParams(AParent,pas.PasTree.TPasExprKind.pekSet,false)}
       else if ($tmp1 === pas.PScanner.TToken.tkinherited) {
        Last = Self.CreateInheritedExpr(AParent);
        Self.NextToken();
        if (Self.FCurToken === pas.PScanner.TToken.tkIdentifier) {
          SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
          Bin = Self.CreateBinaryExpr$1(AParent,Last,Self.ParseExpIdent(AParent),pas.PasTree.TExprOpCode.eopNone,SrcPos);
          if (!(Bin.right != null)) {
            Bin.Release();
            Self.ParseExcExpectedIdentifier();
          };
          Result = Bin;
          return Result;
        };
        Self.UngetToken();
      } else if ($tmp1 === pas.PScanner.TToken.tkself) {
        CanSpecialize = true;
        aName = Self.CurTokenText();
        Last = Self.CreateSelfExpr(AParent);
        HandleSelf({get: function () {
            return Last;
          }, set: function (v) {
            Last = v;
          }});
      } else if ($tmp1 === pas.PScanner.TToken.tkCaret) {
        Self.NextToken();
        if (!(Self.CurTokenText().length === 1) || !(Self.CurTokenText().charCodeAt(0) in rtl.createSet(null,65,95))) {
          Self.UngetToken();
          Self.ParseExcExpectedIdentifier();
        };
        Last = Self.CreatePrimitiveExpr(AParent,pas.PasTree.TPasExprKind.pekString,"^" + Self.CurTokenText());
      } else {
        Self.ParseExcExpectedIdentifier();
      };
      Result = Last;
      ok = false;
      ISE = null;
      try {
        if (Last.Kind !== pas.PasTree.TPasExprKind.pekSet) Self.NextToken();
        if (!(Last.Kind in rtl.createSet(pas.PasTree.TPasExprKind.pekNumber,pas.PasTree.TPasExprKind.pekString,pas.PasTree.TPasExprKind.pekSet,pas.PasTree.TPasExprKind.pekIdent,pas.PasTree.TPasExprKind.pekSelf,pas.PasTree.TPasExprKind.pekNil))) {
          ok = true;
          return Result;
        };
        Func = Last;
        do {
          var $tmp2 = Self.FCurToken;
          if ($tmp2 === pas.PScanner.TToken.tkDot) {
            ScrPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
            Self.NextToken();
            if (Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkIdentifier,pas.PScanner.TToken.tktrue,pas.PScanner.TToken.tkfalse,pas.PScanner.TToken.tkself)) {
              aName = (aName + ".") + Self.FCurTokenString;
              Expr = Self.CreatePrimitiveExpr(AParent,pas.PasTree.TPasExprKind.pekIdent,Self.FCurTokenString);
              Self.AddToBinaryExprChain({get: function () {
                  return Result;
                }, set: function (v) {
                  Result = v;
                }},Expr,pas.PasTree.TExprOpCode.eopSubIdent,ScrPos);
              Func = Expr;
              Self.NextToken();
            } else {
              Self.UngetToken();
              Self.ParseExcExpectedIdentifier();
            };
          } else if (($tmp2 === pas.PScanner.TToken.tkBraceOpen) || ($tmp2 === pas.PScanner.TToken.tkSquaredBraceOpen)) {
            if (Self.FCurToken === pas.PScanner.TToken.tkBraceOpen) {
              Params = Self.ParseParams(AParent,pas.PasTree.TPasExprKind.pekFuncParams,IsWriteOrStr(Func))}
             else Params = Self.ParseParams(AParent,pas.PasTree.TPasExprKind.pekArrayParams,false);
            if (!(Params != null)) return Result;
            Self.AddParamsToBinaryExprChain({get: function () {
                return Result;
              }, set: function (v) {
                Result = v;
              }},Params);
            CanSpecialize = false;
          } else if ($tmp2 === pas.PScanner.TToken.tkCaret) {
            Result = Self.CreateUnaryExpr(AParent,Result,Self.TokenToExprOp(Self.FCurToken));
            Self.NextToken();
            CanSpecialize = false;
          } else if ($tmp2 === pas.PScanner.TToken.tkLessThan) {
            SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
            if (!CanSpecialize || !IsSpecialize()) {
              break}
             else {
              ISE = Self.CreateElement$1(pas.PasTree.TInlineSpecializeExpr,"",AParent,SrcPos);
              ISE.Kind = pas.PasTree.TPasExprKind.pekSpecialize;
              ST = Self.CreateElement$1(pas.PasTree.TPasSpecializeType,"",ISE,SrcPos);
              ISE.DestType = ST;
              Self.ReadSpecializeArguments(ST);
              ST.DestType = Self.ResolveTypeReference(aName,ST);
              ST.Expr = Result;
              Result = ISE;
              ISE = null;
              CanSpecialize = false;
              Self.NextToken();
            };
          } else {
            break;
          };
        } while (!false);
        ok = true;
      } finally {
        if (!ok) {
          Result.Release();
          ISE = rtl.freeLoc(ISE);
        };
      };
      return Result;
    };
    this.DoParseClassType = function (AType) {
      var s = "";
      var Expr = null;
      if ((this.FCurToken === pas.PScanner.TToken.tkIdentifier) && (AType.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass,pas.PasTree.TPasObjKind.okGeneric))) {
        s = pas.SysUtils.LowerCase(this.FCurTokenString);
        if ((s === "sealed") || (s === "abstract")) {
          AType.Modifiers.Add(s);
          this.NextToken();
        };
      };
      AType.IsForward = this.FCurToken === pas.PScanner.TToken.tkSemicolon;
      if (this.FCurToken === pas.PScanner.TToken.tkBraceOpen) {
        this.NextToken();
        AType.AncestorType = this.ParseTypeReference(AType,false,{get: function () {
            return Expr;
          }, set: function (v) {
            Expr = v;
          }});
        while (this.FCurToken === pas.PScanner.TToken.tkComma) {
          this.NextToken();
          AType.Interfaces.Add(this.ParseTypeReference(AType,false,{get: function () {
              return Expr;
            }, set: function (v) {
              Expr = v;
            }}));
        };
        this.CheckToken(pas.PScanner.TToken.tkBraceClose);
        this.NextToken();
        AType.IsShortDefinition = this.FCurToken === pas.PScanner.TToken.tkSemicolon;
      };
      if (AType.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClassHelper,pas.PasTree.TPasObjKind.okRecordHelper)) {
        this.CheckToken(pas.PScanner.TToken.tkfor);
        this.NextToken();
        AType.HelperForType = this.ParseTypeReference(AType,false,{get: function () {
            return Expr;
          }, set: function (v) {
            Expr = v;
          }});
      };
      this.FEngine.FinishScope($mod.TPasScopeType.stAncestors,AType);
      if (AType.IsShortDefinition || AType.IsForward) {
        this.UngetToken()}
       else {
        if ((AType.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okInterface,pas.PasTree.TPasObjKind.okDispInterface)) && (this.FCurToken === pas.PScanner.TToken.tkSquaredBraceOpen)) {
          this.NextToken();
          AType.GUIDExpr = this.DoParseExpression(AType,null,true);
          if (this.FCurToken !== pas.PScanner.TToken.tkSquaredBraceClose) this.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkSquaredBraceClose]);
          this.NextToken();
        };
        this.ParseClassMembers(AType);
      };
    };
    var PrefixSym = rtl.createSet(pas.PScanner.TToken.tkPlus,pas.PScanner.TToken.tkMinus,pas.PScanner.TToken.tknot,pas.PScanner.TToken.tkAt,pas.PScanner.TToken.tkAtAt);
    var BinaryOP = rtl.createSet(pas.PScanner.TToken.tkMul,pas.PScanner.TToken.tkDivision,pas.PScanner.TToken.tkdiv,pas.PScanner.TToken.tkmod,pas.PScanner.TToken.tkDotDot,pas.PScanner.TToken.tkand,pas.PScanner.TToken.tkshl,pas.PScanner.TToken.tkshr,pas.PScanner.TToken.tkas,pas.PScanner.TToken.tkPower,pas.PScanner.TToken.tkPlus,pas.PScanner.TToken.tkMinus,pas.PScanner.TToken.tkor,pas.PScanner.TToken.tkxor,pas.PScanner.TToken.tkSymmetricalDifference,pas.PScanner.TToken.tkEqual,pas.PScanner.TToken.tkNotEqual,pas.PScanner.TToken.tkLessThan,pas.PScanner.TToken.tkLessEqualThan,pas.PScanner.TToken.tkGreaterThan,pas.PScanner.TToken.tkGreaterEqualThan,pas.PScanner.TToken.tkin,pas.PScanner.TToken.tkis);
    this.DoParseExpression = function (AParent, InitExpr, AllowEqual) {
      var Self = this;
      var Result = null;
      function TOpStackItem(s) {
        if (s) {
          this.Token = s.Token;
          this.SrcPos = new pas.PScanner.TPasSourcePos(s.SrcPos);
        } else {
          this.Token = 0;
          this.SrcPos = new pas.PScanner.TPasSourcePos();
        };
        this.$equal = function (b) {
          return (this.Token === b.Token) && this.SrcPos.$equal(b.SrcPos);
        };
      };
      var ExpStack = null;
      var OpStack = [];
      var OpStackTop = 0;
      var PrefixCnt = 0;
      var x = null;
      var i = 0;
      var TempOp = 0;
      var NotBinary = false;
      function PopExp() {
        var Result = null;
        if (ExpStack.FCount > 0) {
          Result = rtl.getObject(ExpStack.Get(ExpStack.FCount - 1));
          ExpStack.Delete(ExpStack.FCount - 1);
        } else Result = null;
        return Result;
      };
      function PushOper(Token) {
        OpStackTop += 1;
        if (OpStackTop === rtl.length(OpStack)) OpStack = rtl.arraySetLength(OpStack,TOpStackItem,(rtl.length(OpStack) * 2) + 4);
        OpStack[OpStackTop].Token = Token;
        OpStack[OpStackTop].SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
      };
      function PeekOper() {
        var Result = 0;
        if (OpStackTop >= 0) {
          Result = OpStack[OpStackTop].Token}
         else Result = pas.PScanner.TToken.tkEOF;
        return Result;
      };
      function PopOper(SrcPos) {
        var Result = 0;
        Result = PeekOper();
        if (Result === pas.PScanner.TToken.tkEOF) {
          SrcPos.set(new pas.PScanner.TPasSourcePos(pas.PScanner.DefPasSourcePos))}
         else {
          SrcPos.set(new pas.PScanner.TPasSourcePos(OpStack[OpStackTop].SrcPos));
          OpStackTop -= 1;
        };
        return Result;
      };
      function PopAndPushOperator() {
        var t = 0;
        var xright = null;
        var xleft = null;
        var bin = null;
        var SrcPos = new pas.PScanner.TPasSourcePos();
        t = PopOper({get: function () {
            return SrcPos;
          }, set: function (v) {
            SrcPos = v;
          }});
        xright = PopExp();
        xleft = PopExp();
        if (t === pas.PScanner.TToken.tkDotDot) {
          bin = Self.CreateBinaryExpr$1(AParent,xleft,xright,pas.PasTree.TExprOpCode.eopNone,SrcPos);
          bin.Kind = pas.PasTree.TPasExprKind.pekRange;
        } else bin = Self.CreateBinaryExpr$1(AParent,xleft,xright,Self.TokenToExprOp(t),SrcPos);
        ExpStack.Add(bin);
      };
      var AllowedBinaryOps = {};
      var SrcPos = new pas.PScanner.TPasSourcePos();
      var ArrParams = null;
      AllowedBinaryOps = rtl.refSet(BinaryOP);
      if (!AllowEqual) AllowedBinaryOps = rtl.excludeSet(AllowedBinaryOps,pas.PScanner.TToken.tkEqual);
      Result = null;
      ExpStack = pas.Classes.TFPList.$create("Create");
      OpStack = rtl.arraySetLength(OpStack,TOpStackItem,4);
      OpStackTop = -1;
      try {
        do {
          NotBinary = true;
          PrefixCnt = 0;
          if (!(InitExpr != null)) {
            while (Self.FCurToken in PrefixSym) {
              PushOper(Self.FCurToken);
              PrefixCnt += 1;
              Self.NextToken();
            };
            if (Self.FCurToken === pas.PScanner.TToken.tkBraceOpen) {
              Self.NextToken();
              x = Self.DoParseExpression(AParent,null,true);
              if (!(x != null)) Self.ParseExcSyntaxError();
              if (Self.FCurToken !== pas.PScanner.TToken.tkBraceClose) {
                x.Release();
                Self.CheckToken(pas.PScanner.TToken.tkBraceClose);
              };
              Self.NextToken();
              while (Self.FCurToken === pas.PScanner.TToken.tkCaret) {
                x = Self.CreateUnaryExpr(AParent,x,Self.TokenToExprOp(pas.PScanner.TToken.tkCaret));
                Self.NextToken();
              };
              if (Self.FCurToken === pas.PScanner.TToken.tkSquaredBraceOpen) {
                ArrParams = Self.ParseParams(AParent,pas.PasTree.TPasExprKind.pekArrayParams,false);
                ArrParams.Value = x;
                x.SetParent(ArrParams);
                x = ArrParams;
              };
              if (Self.FCurToken === pas.PScanner.TToken.tkDot) {
                Self.NextToken();
                x = Self.CreateBinaryExpr(AParent,x,Self.ParseExpIdent(AParent),Self.TokenToExprOp(pas.PScanner.TToken.tkDot));
              };
            } else {
              x = Self.ParseExpIdent(AParent);
              if (!(x != null)) Self.ParseExcSyntaxError();
            };
            ExpStack.Add(x);
            for (var $l1 = 1, $end2 = PrefixCnt; $l1 <= $end2; $l1++) {
              i = $l1;
              TempOp = PopOper({get: function () {
                  return SrcPos;
                }, set: function (v) {
                  SrcPos = v;
                }});
              x = PopExp();
              if ((TempOp === pas.PScanner.TToken.tkMinus) && (x.Kind === pas.PasTree.TPasExprKind.pekRange)) {
                x.left = Self.CreateUnaryExpr$1(x,x.left,pas.PasTree.TExprOpCode.eopSubtract,SrcPos);
                ExpStack.Add(x);
              } else ExpStack.Add(Self.CreateUnaryExpr$1(AParent,x,Self.TokenToExprOp(TempOp),SrcPos));
            };
          } else {
            ExpStack.Add(InitExpr);
            InitExpr = null;
          };
          if (Self.FCurToken in AllowedBinaryOps) {
            NotBinary = false;
            TempOp = PeekOper();
            while ((OpStackTop >= 0) && (Self.OpLevel(TempOp) >= Self.OpLevel(Self.FCurToken))) {
              PopAndPushOperator();
              TempOp = PeekOper();
            };
            PushOper(Self.FCurToken);
            Self.NextToken();
          };
        } while (!(NotBinary || Self.isEndOfExp(AllowEqual,NotBinary)));
        if (!NotBinary) Self.ParseExcExpectedIdentifier();
        while (OpStackTop >= 0) PopAndPushOperator();
        if (ExpStack.FCount !== 1) Self.ParseExcSyntaxError();
        Result = rtl.getObject(ExpStack.Get(0));
        Result.SetParent(AParent);
      } finally {
        if (!(Result != null)) {
          for (var $l3 = 0, $end4 = ExpStack.FCount - 1; $l3 <= $end4; $l3++) {
            i = $l3;
            rtl.getObject(ExpStack.Get(i)).Release();
          };
        };
        OpStack = rtl.arraySetLength(OpStack,TOpStackItem,0);
        ExpStack = rtl.freeLoc(ExpStack);
      };
      return Result;
    };
    this.DoParseConstValueExpression = function (AParent) {
      var Self = this;
      var Result = null;
      function lastfield() {
        var Result = false;
        Result = Self.FCurToken !== pas.PScanner.TToken.tkSemicolon;
        if (!Result) {
          Self.NextToken();
          if (Self.FCurToken === pas.PScanner.TToken.tkBraceClose) {
            Result = true}
           else Self.UngetToken();
        };
        return Result;
      };
      function ReadArrayValues(x) {
        var a = null;
        Result = null;
        a = null;
        try {
          a = Self.CreateArrayValues(AParent);
          if (x !== null) {
            a.AddValues(x);
            x = null;
          };
          do {
            Self.NextToken();
            a.AddValues(Self.DoParseConstValueExpression(a));
          } while (!(Self.FCurToken !== pas.PScanner.TToken.tkComma));
          Result = a;
        } finally {
          if (Result === null) {
            a = rtl.freeLoc(a);
            x = rtl.freeLoc(x);
          };
        };
      };
      var x = null;
      var v = null;
      var n = "";
      var r = null;
      if (Self.FCurToken !== pas.PScanner.TToken.tkBraceOpen) {
        Result = Self.DoParseExpression(AParent,null,true)}
       else {
        Result = null;
        if (Self.FEngine.NeedArrayValues(AParent)) {
          ReadArrayValues(null)}
         else {
          Self.NextToken();
          x = Self.DoParseConstValueExpression(AParent);
          var $tmp1 = Self.FCurToken;
          if ($tmp1 === pas.PScanner.TToken.tkComma) {
            ReadArrayValues(x)}
           else if ($tmp1 === pas.PScanner.TToken.tkColon) {
            if (!pas.PasTree.TPrimitiveExpr.isPrototypeOf(x)) Self.CheckToken(pas.PScanner.TToken.tkBraceClose);
            r = null;
            try {
              n = $impl.GetExprIdent(x);
              r = Self.CreateRecordValues(AParent);
              Self.NextToken();
              v = Self.DoParseConstValueExpression(r);
              r.AddField(x,v);
              x = null;
              if (!lastfield()) do {
                n = Self.ExpectIdentifier();
                x = Self.CreatePrimitiveExpr(r,pas.PasTree.TPasExprKind.pekIdent,n);
                Self.ExpectToken(pas.PScanner.TToken.tkColon);
                Self.NextToken();
                v = Self.DoParseConstValueExpression(AParent);
                r.AddField(x,v);
                x = null;
              } while (!lastfield());
              Result = r;
            } finally {
              if (Result === null) {
                r = rtl.freeLoc(r);
                x = rtl.freeLoc(x);
              };
            };
          } else {
            Result = Self.DoParseExpression(AParent,x,true);
            if (Self.FCurToken !== pas.PScanner.TToken.tkBraceClose) {
              pas.PasTree.ReleaseAndNil({get: function () {
                  return Result;
                }, set: function (v) {
                  Result = v;
                }});
              Self.ParseExc(2011,rtl.getResStr(pas.PParser,"SParserExpectedCommaRBracket"));
            };
            Self.NextToken();
            if (Self.FCurToken !== pas.PScanner.TToken.tkSemicolon) Result = Self.DoParseExpression(AParent,Result,true);
            return Result;
          };
        };
        if (Self.FCurToken !== pas.PScanner.TToken.tkBraceClose) {
          pas.PasTree.ReleaseAndNil({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }});
          Self.ParseExc(2011,rtl.getResStr(pas.PParser,"SParserExpectedCommaRBracket"));
        };
        Self.NextToken();
      };
      return Result;
    };
    this.CheckPackMode = function () {
      var Result = 0;
      this.NextToken();
      var $tmp1 = this.FCurToken;
      if ($tmp1 === pas.PScanner.TToken.tkpacked) {
        Result = pas.PasTree.TPackMode.pmPacked}
       else if ($tmp1 === pas.PScanner.TToken.tkbitpacked) {
        Result = pas.PasTree.TPackMode.pmBitPacked}
       else {
        Result = pas.PasTree.TPackMode.pmNone;
      };
      if (Result !== pas.PasTree.TPackMode.pmNone) {
        this.NextToken();
        if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkarray,pas.PScanner.TToken.tkrecord,pas.PScanner.TToken.tkobject,pas.PScanner.TToken.tkclass,pas.PScanner.TToken.tkset))) this.ParseExcTokenError("SET, ARRAY, RECORD, OBJECT or CLASS");
      };
      return Result;
    };
    this.AddUseUnit = function (ASection, NamePos, AUnitName, NameExpr, InFileExpr) {
      var Self = this;
      var Result = null;
      function CheckDuplicateInUsesList(AUnitName, UsesClause) {
        var i = 0;
        if (rtl.length(UsesClause) === 0) return;
        for (var $l1 = 0, $end2 = rtl.length(UsesClause) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (pas.SysUtils.CompareText(AUnitName,UsesClause[i].FName) === 0) Self.ParseExc$1(2046,rtl.getResStr(pas.PParser,"SParserDuplicateIdentifier"),[AUnitName]);
        };
      };
      var UnitRef = null;
      var UsesUnit = null;
      Result = null;
      UsesUnit = null;
      UnitRef = null;
      try {
        if (pas.SysUtils.CompareText(AUnitName,Self.FCurModule.FName) === 0) {
          if (pas.SysUtils.CompareText(AUnitName,"System") === 0) return Result;
          Self.ParseExc$1(2046,rtl.getResStr(pas.PParser,"SParserDuplicateIdentifier"),[AUnitName]);
        };
        CheckDuplicateInUsesList(AUnitName,ASection.UsesClause);
        if (ASection.$class.ClassType() === pas.PasTree.TImplementationSection) CheckDuplicateInUsesList(AUnitName,Self.FCurModule.InterfaceSection.UsesClause);
        UnitRef = Self.FEngine.FindModule$1(AUnitName,NameExpr,InFileExpr);
        if (UnitRef != null) {
          UnitRef.AddRef()}
         else UnitRef = Self.CreateElement$1(pas.PasTree.TPasUnresolvedUnitRef,AUnitName,ASection,NamePos);
        UsesUnit = Self.CreateElement$1(pas.PasTree.TPasUsesUnit,AUnitName,ASection,NamePos);
        Result = ASection.AddUnitToUsesList(AUnitName,NameExpr,InFileExpr,UnitRef,UsesUnit);
        if (InFileExpr !== null) {
          if (pas.PasTree.TPasModule.isPrototypeOf(UnitRef)) {
            if (UnitRef.Filename === "") UnitRef.Filename = InFileExpr.Value;
          } else if (pas.PasTree.TPasUnresolvedUnitRef.isPrototypeOf(UnitRef)) UnitRef.FileName = InFileExpr.Value;
        };
      } finally {
        if (Result === null) {
          if (UsesUnit !== null) UsesUnit.Release();
          if (NameExpr !== null) NameExpr.Release();
          if (InFileExpr !== null) InFileExpr.Release();
          if (UnitRef !== null) UnitRef.Release();
        };
      };
      return Result;
    };
    this.CheckImplicitUsedUnits = function (ASection) {
      var i = 0;
      var NamePos = new pas.PScanner.TPasSourcePos();
      if (!(ASection.$class.ClassType() === pas.PasTree.TImplementationSection)) {
        NamePos = new pas.PScanner.TPasSourcePos(this.CurSourcePos());
        for (var $l1 = 0, $end2 = this.FImplicitUses.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          this.AddUseUnit(ASection,NamePos,this.FImplicitUses.Get(i),null,null);
        };
      };
    };
    this.FinishedModule = function () {
      if (this.FScanner !== null) this.FScanner.FinishedModule();
      this.FEngine.FinishScope($mod.TPasScopeType.stModule,this.FCurModule);
    };
    this.AddProcOrFunction = function (Decs, AProc) {
      var I = 0;
      var OldMember = null;
      var OverloadedProc = null;
      if (!(pas.PScanner.TPOption.po_NoOverloadedProcs in this.FOptions)) {
        OverloadedProc = this.CheckOverloadList(Decs.Functions,AProc.FName,{get: function () {
            return OldMember;
          }, set: function (v) {
            OldMember = v;
          }})}
       else OverloadedProc = null;
      if (OverloadedProc !== null) {
        OverloadedProc.Overloads.Add(AProc);
        if (OldMember !== OverloadedProc) {
          I = Decs.Declarations.IndexOf(OldMember);
          if (I !== -1) Decs.Declarations.Put(I,OverloadedProc);
        };
      } else {
        Decs.Declarations.Add(AProc);
        Decs.Functions.Add(AProc);
      };
    };
    this.CheckIfOverloaded = function (AParent, AName) {
      var Result = null;
      var Member = null;
      var OverloadedProc = null;
      Result = AParent;
      if (!(pas.PScanner.TPOption.po_NoOverloadedProcs in this.FOptions) && pas.PasTree.TPasClassType.isPrototypeOf(AParent)) {
        OverloadedProc = this.CheckOverloadList(AParent.Members,AName,{get: function () {
            return Member;
          }, set: function (v) {
            Member = v;
          }});
        if (OverloadedProc !== null) Result = OverloadedProc;
      };
      return Result;
    };
    this.Create$1 = function (AScanner, AFileResolver, AEngine) {
      pas.System.TObject.Create.call(this);
      this.FScanner = AScanner;
      if (this.FScanner.FOnModeChanged === null) this.FScanner.FOnModeChanged = rtl.createCallback(this,"OnScannerModeChanged");
      this.FFileResolver = AFileResolver;
      this.FTokenRingCur = 31;
      this.FEngine = AEngine;
      if (this.FEngine != null) {
        this.FEngine.SetCurrentParser(this);
        if (this.FEngine.FNeedComments) this.FScanner.FSkipComments = !this.FEngine.FNeedComments;
      };
      this.FImplicitUses = pas.Classes.TStringList.$create("Create$1");
      this.FImplicitUses.Add("System");
    };
    this.Destroy = function () {
      var i = 0;
      if (rtl.eqCallback(this.FScanner.FOnModeChanged,rtl.createCallback(this,"OnScannerModeChanged"))) this.FScanner.FOnModeChanged = null;
      if (this.FEngine != null) {
        this.FEngine.SetCurrentParser(null);
        this.FEngine = null;
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FImplicitUses;
        }, set: function (v) {
          this.p.FImplicitUses = v;
        }});
      for (i = 0; i <= 31; i++) pas.SysUtils.FreeAndNil({p: this.FTokenRing[i], get: function () {
          return this.p.Comments;
        }, set: function (v) {
          this.p.Comments = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.SetLastMsg = function (MsgType, MsgNumber, Fmt, Args) {
      this.FLastMsgType = MsgType;
      this.FLastMsgNumber = MsgNumber;
      this.FLastMsgPattern = Fmt;
      this.FLastMsg = pas.PScanner.SafeFormat(Fmt,Args);
      pas.PScanner.CreateMsgArgs({p: this, get: function () {
          return this.p.FLastMsgArgs;
        }, set: function (v) {
          this.p.FLastMsgArgs = v;
        }},Args);
    };
    this.CurTokenName = function () {
      var Result = "";
      if (this.FCurToken === pas.PScanner.TToken.tkIdentifier) {
        Result = "Identifier " + this.FCurTokenString}
       else Result = pas.PScanner.TokenInfos[this.FCurToken];
      return Result;
    };
    this.CurTokenText = function () {
      var Result = "";
      var $tmp1 = this.FCurToken;
      if (((($tmp1 === pas.PScanner.TToken.tkIdentifier) || ($tmp1 === pas.PScanner.TToken.tkString)) || ($tmp1 === pas.PScanner.TToken.tkNumber)) || ($tmp1 === pas.PScanner.TToken.tkChar)) {
        Result = this.FCurTokenString}
       else {
        Result = pas.PScanner.TokenInfos[this.FCurToken];
      };
      return Result;
    };
    this.CurComments = function () {
      var Result = null;
      if (this.FTokenRingStart === this.FTokenRingEnd) {
        Result = null}
       else Result = this.FTokenRing[this.FTokenRingCur].Comments;
      return Result;
    };
    this.CurTokenPos = function () {
      var Result = new pas.PScanner.TPasSourcePos();
      if (this.HasToken()) {
        Result = new pas.PScanner.TPasSourcePos(this.FTokenRing[this.FTokenRingCur].TokenPos)}
       else if (this.FScanner !== null) {
        Result = new pas.PScanner.TPasSourcePos(this.FScanner.FCurTokenPos)}
       else Result = new pas.PScanner.TPasSourcePos();
      return Result;
    };
    this.CurSourcePos = function () {
      var Result = new pas.PScanner.TPasSourcePos();
      if (this.HasToken()) {
        Result = new pas.PScanner.TPasSourcePos(this.FTokenRing[this.FTokenRingCur].SourcePos)}
       else if (this.FScanner !== null) {
        Result = new pas.PScanner.TPasSourcePos(this.FScanner.CurSourcePos())}
       else Result = new pas.PScanner.TPasSourcePos();
      return Result;
    };
    this.HasToken = function () {
      var Result = false;
      if (this.FTokenRingStart < this.FTokenRingEnd) {
        Result = (this.FTokenRingCur >= this.FTokenRingStart) && (this.FTokenRingCur < this.FTokenRingEnd)}
       else Result = (this.FTokenRingCur >= this.FTokenRingStart) || (this.FTokenRingCur < this.FTokenRingEnd);
      return Result;
    };
    this.SavedComments = function () {
      var Result = "";
      Result = this.FSavedComments;
      return Result;
    };
    this.NextToken = function () {
      var P = null;
      this.FTokenRingCur = (this.FTokenRingCur + 1) % 32;
      P = this.FTokenRing[this.FTokenRingCur];
      if (this.FTokenRingCur !== this.FTokenRingEnd) {
        this.FCurToken = this.FScanner.CheckToken(P.Token,P.AsString);
        this.FCurTokenString = P.AsString;
      } else {
        this.FTokenRingEnd = (this.FTokenRingEnd + 1) % 32;
        if (this.FTokenRingStart === this.FTokenRingEnd) this.FTokenRingStart = (this.FTokenRingStart + 1) % 32;
        try {
          if (P.Comments === null) {
            P.Comments = pas.Classes.TStringList.$create("Create$1")}
           else P.Comments.Clear();
          do {
            this.FCurToken = this.FScanner.FetchToken();
            if (this.FCurToken === pas.PScanner.TToken.tkComment) P.Comments.Add(this.FScanner.FCurTokenString);
          } while (this.FCurToken in $impl.WhitespaceTokensToIgnore);
        } catch ($e) {
          if (pas.PScanner.EScannerError.isPrototypeOf($e)) {
            var e = $e;
            if (pas.PScanner.TPOption.po_KeepScannerError in this.FOptions) {
              throw $e}
             else {
              this.FLastMsgType = pas.PScanner.TMessageType.mtError;
              this.FLastMsgNumber = this.FScanner.FLastMsgNumber;
              this.FLastMsgPattern = this.FScanner.FLastMsgPattern;
              this.FLastMsg = this.FScanner.FLastMsg;
              this.FLastMsgArgs = this.FScanner.FLastMsgArgs;
              throw $mod.EParserError.$create("Create$2",[e.fMessage,this.FScanner.FCurFilename,this.FScanner.FCurRow,this.FScanner.GetCurColumn()]);
            };
          } else throw $e
        };
        P.Token = this.FCurToken;
        this.FCurTokenString = this.FScanner.FCurTokenString;
        P.AsString = this.FCurTokenString;
        P.SourcePos = new pas.PScanner.TPasSourcePos(this.FScanner.CurSourcePos());
        P.TokenPos = new pas.PScanner.TPasSourcePos(this.FScanner.FCurTokenPos);
      };
    };
    this.ChangeToken = function (tk) {
      var Cur = null;
      var Last = null;
      var IsLast = false;
      IsLast = ((this.FTokenRingCur + 1) % 32) === this.FTokenRingEnd;
      if (((this.FCurToken === pas.PScanner.TToken.tkshr) && (tk === pas.PScanner.TToken.tkGreaterThan)) && IsLast) {
        Cur = this.FTokenRing[this.FTokenRingCur];
        Cur.Token = pas.PScanner.TToken.tkGreaterThan;
        Cur.AsString = ">";
        Last = this.FTokenRing[this.FTokenRingEnd];
        Last.Token = pas.PScanner.TToken.tkGreaterThan;
        Last.AsString = ">";
        if (Last.Comments !== null) Last.Comments.Clear();
        Last.SourcePos = new pas.PScanner.TPasSourcePos(Cur.SourcePos);
        Cur.SourcePos.Column -= 1;
        Last.TokenPos = new pas.PScanner.TPasSourcePos(Cur.TokenPos);
        Last.TokenPos.Column += 1;
        this.FTokenRingEnd = (this.FTokenRingEnd + 1) % 32;
        if (this.FTokenRingStart === this.FTokenRingEnd) this.FTokenRingStart = (this.FTokenRingStart + 1) % 32;
        this.FCurToken = pas.PScanner.TToken.tkGreaterThan;
        this.FCurTokenString = ">";
      } else this.CheckToken(tk);
    };
    this.UngetToken = function () {
      var P = null;
      if (this.FTokenRingStart === this.FTokenRingEnd) this.ParseExc(2005,rtl.getResStr(pas.PParser,"SParserUngetTokenError"));
      if (this.FTokenRingCur > 0) {
        this.FTokenRingCur -= 1}
       else this.FTokenRingCur = 31;
      P = this.FTokenRing[this.FTokenRingCur];
      this.FCurToken = P.Token;
      this.FCurTokenString = P.AsString;
    };
    this.CheckToken = function (tk) {
      if (this.FCurToken !== tk) {
        this.ParseExcTokenError(pas.PScanner.TokenInfos[tk]);
      };
    };
    this.CheckTokens = function (tk) {
      var S = "";
      var T = 0;
      if (!(this.FCurToken in tk)) {
        S = "";
        for (T = 0; T <= 110; T++) if (T in tk) {
          if (S !== "") S = S + " or ";
          S = S + pas.PScanner.TokenInfos[T];
        };
        this.ParseExcTokenError(S);
      };
    };
    this.ExpectToken = function (tk) {
      this.NextToken();
      this.CheckToken(tk);
    };
    this.ExpectTokens = function (tk) {
      this.NextToken();
      this.CheckTokens(rtl.refSet(tk));
    };
    this.GetPrevToken = function () {
      var Result = 0;
      var i = 0;
      var P = null;
      if (this.FTokenRingStart === this.FTokenRingEnd) Result = pas.PScanner.TToken.tkEOF;
      i = this.FTokenRingCur;
      if (i > 0) {
        i -= 1}
       else i = 31;
      P = this.FTokenRing[i];
      Result = P.Token;
      return Result;
    };
    this.ExpectIdentifier = function () {
      var Result = "";
      this.ExpectToken(pas.PScanner.TToken.tkIdentifier);
      Result = this.FCurTokenString;
      return Result;
    };
    this.CurTokenIsIdentifier = function (S) {
      var Result = false;
      Result = (this.FCurToken === pas.PScanner.TToken.tkIdentifier) && (pas.SysUtils.CompareText(S,this.CurTokenText()) === 0);
      return Result;
    };
    var EndExprToken = rtl.createSet(pas.PScanner.TToken.tkEOF,pas.PScanner.TToken.tkBraceClose,pas.PScanner.TToken.tkSquaredBraceClose,pas.PScanner.TToken.tkSemicolon,pas.PScanner.TToken.tkComma,pas.PScanner.TToken.tkColon,pas.PScanner.TToken.tkdo,pas.PScanner.TToken.tkdownto,pas.PScanner.TToken.tkelse,pas.PScanner.TToken.tkend,pas.PScanner.TToken.tkof,pas.PScanner.TToken.tkthen,pas.PScanner.TToken.tkto);
    this.isEndOfExp = function (AllowEqual, CheckHints) {
      var Result = false;
      Result = (this.FCurToken in EndExprToken) || (CheckHints && this.IsCurTokenHint$1());
      if (!(Result || AllowEqual)) Result = this.FCurToken === pas.PScanner.TToken.tkEqual;
      return Result;
    };
    this.ExprToText = function (Expr) {
      var Result = "";
      var C = null;
      C = Expr.$class.ClassType();
      if (C === pas.PasTree.TPrimitiveExpr) {
        Result = Expr.Value}
       else if (C === pas.PasTree.TSelfExpr) {
        Result = "self"}
       else if (C === pas.PasTree.TBoolConstExpr) {
        Result = pas.SysUtils.BoolToStr$1(Expr.Value,"true","false")}
       else if (C === pas.PasTree.TNilExpr) {
        Result = "nil"}
       else if (C === pas.PasTree.TInheritedExpr) {
        Result = "inherited"}
       else if (C === pas.PasTree.TUnaryExpr) {
        Result = pas.PasTree.OpcodeStrings[Expr.OpCode] + this.ExprToText(Expr.Operand)}
       else if (C === pas.PasTree.TBinaryExpr) {
        Result = this.ExprToText(Expr.left);
        if (pas.PasTree.OpcodeStrings[Expr.OpCode] !== "") {
          Result = Result + pas.PasTree.OpcodeStrings[Expr.OpCode]}
         else Result = Result + " ";
        Result = Result + this.ExprToText(Expr.right);
      } else if (C === pas.PasTree.TParamsExpr) {
        var $tmp1 = Expr.Kind;
        if ($tmp1 === pas.PasTree.TPasExprKind.pekArrayParams) {
          Result = ((this.ExprToText(Expr.Value) + "[") + this.ArrayExprToText(Expr.Params)) + "]"}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekFuncParams) {
          Result = ((this.ExprToText(Expr.Value) + "(") + this.ArrayExprToText(Expr.Params)) + ")"}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekSet) {
          Result = ("[" + this.ArrayExprToText(Expr.Params)) + "]"}
         else {
          this.ParseExc$1(2015,rtl.getResStr(pas.PParser,"SErrUnknownOperatorType"),[pas.PasTree.ExprKindNames[Expr.Kind]]);
        };
      } else this.ParseExc$1(2015,rtl.getResStr(pas.PParser,"SErrUnknownOperatorType"),["TPasParser.ExprToText: " + Expr.$classname]);
      return Result;
    };
    this.ArrayExprToText = function (Expr) {
      var Result = "";
      var i = 0;
      Result = "";
      for (var $l1 = 0, $end2 = rtl.length(Expr) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (i > 0) Result = Result + ",";
        Result = Result + this.ExprToText(Expr[i]);
      };
      return Result;
    };
    this.ResolveTypeReference = function (Name, Parent) {
      var Result = null;
      var SS = false;
      var Ref = null;
      Ref = null;
      SS = !(pas.PScanner.TPOption.po_ResolveStandardTypes in this.FOptions) && $impl.IsSimpleTypeToken({get: function () {
          return Name;
        }, set: function (v) {
          Name = v;
        }});
      if (!SS) {
        Ref = this.FEngine.FindElement(Name);
        if (Ref === null) {}
        else if (!pas.PasTree.TPasType.isPrototypeOf(Ref)) this.ParseExc$1(2049,rtl.getResStr(pas.PParser,"SParserExpectedTypeButGot"),[Ref.ElementTypeName()]);
      };
      if (Ref === null) {
        Result = this.CreateElement(pas.PasTree.TPasUnresolvedTypeRef,Name,Parent)}
       else {
        Ref.AddRef();
        Result = Ref;
      };
      return Result;
    };
    this.ParseComplexType = function (Parent) {
      var Result = null;
      this.NextToken();
      var $tmp1 = this.FCurToken;
      if ($tmp1 === pas.PScanner.TToken.tkprocedure) {
        Result = this.CreateElement(pas.PasTree.TPasProcedureType,"",Parent);
        this.ParseProcedureOrFunctionHeader(Result,Result,pas.PasTree.TProcType.ptProcedure,true);
        if (this.FCurToken === pas.PScanner.TToken.tkSemicolon) this.UngetToken();
      } else if ($tmp1 === pas.PScanner.TToken.tkfunction) {
        Result = this.CreateFunctionType("","Result",Parent,false,this.CurSourcePos());
        this.ParseProcedureOrFunctionHeader(Result,Result,pas.PasTree.TProcType.ptFunction,true);
        if (this.FCurToken === pas.PScanner.TToken.tkSemicolon) this.UngetToken();
      } else {
        this.UngetToken();
        Result = this.ParseType(Parent,this.CurSourcePos(),"",false,null);
      };
      return Result;
    };
    this.ParseTypeDecl = function (Parent) {
      var Result = null;
      var TypeName = "";
      var NamePos = new pas.PScanner.TPasSourcePos();
      var OldForceCaret = false;
      var List = null;
      var i = 0;
      TypeName = this.FCurTokenString;
      NamePos = new pas.PScanner.TPasSourcePos(this.CurSourcePos());
      List = null;
      OldForceCaret = this.FScanner.SetForceCaret(true);
      try {
        this.NextToken();
        if ((this.FCurToken === pas.PScanner.TToken.tkLessThan) && (pas.PScanner.TModeSwitch.msDelphi in this.GetCurrentModeSwitches())) List = pas.Classes.TFPList.$create("Create");
        this.UngetToken();
        if (List != null) this.ReadGenericArguments(List,Parent);
        this.ExpectToken(pas.PScanner.TToken.tkEqual);
        Result = this.ParseType(Parent,NamePos,TypeName,true,List);
      } finally {
        this.FScanner.SetForceCaret(OldForceCaret);
        if (List !== null) {
          for (var $l1 = 0, $end2 = List.FCount - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            rtl.getObject(List.Get(i)).Release();
          };
          List = rtl.freeLoc(List);
        };
      };
      return Result;
    };
    var FullTypeTokens = rtl.createSet(pas.PScanner.TToken.tkgeneric,pas.PScanner.TToken.tkclass,pas.PScanner.TToken.tkinterface,pas.PScanner.TToken.tkdispinterface,pas.PScanner.TToken.tktype);
    var NoHintTokens = rtl.createSet(pas.PScanner.TToken.tkprocedure,pas.PScanner.TToken.tkfunction);
    this.ParseType = function (Parent, NamePos, TypeName, Full, GenericArgs) {
      var Result = null;
      var PM = 0;
      var CH = false;
      var isHelper = false;
      var ok = false;
      Result = null;
      PM = this.CheckPackMode();
      if (Full) {
        CH = !(this.FCurToken in NoHintTokens)}
       else {
        CH = false;
        if (this.FCurToken in FullTypeTokens) this.ParseExc$1(2039,rtl.getResStr(pas.PParser,"SParserTypeNotAllowedHere"),[this.CurTokenText()]);
      };
      ok = false;
      try {
        var $tmp1 = this.FCurToken;
        if ($tmp1 === pas.PScanner.TToken.tkobject) {
          Result = this.ParseClassDecl(Parent,NamePos,TypeName,pas.PasTree.TPasObjKind.okObject,PM,null)}
         else if ($tmp1 === pas.PScanner.TToken.tkdispinterface) {
          Result = this.ParseClassDecl(Parent,NamePos,TypeName,pas.PasTree.TPasObjKind.okDispInterface,pas.PasTree.TPackMode.pmNone,null)}
         else if ($tmp1 === pas.PScanner.TToken.tkinterface) {
          Result = this.ParseClassDecl(Parent,NamePos,TypeName,pas.PasTree.TPasObjKind.okInterface,pas.PasTree.TPackMode.pmNone,null)}
         else if ($tmp1 === pas.PScanner.TToken.tkspecialize) {
          Result = this.ParseSpecializeType(Parent,TypeName)}
         else if ($tmp1 === pas.PScanner.TToken.tkclass) {
          Result = this.ParseClassDecl(Parent,NamePos,TypeName,pas.PasTree.TPasObjKind.okClass,PM,GenericArgs)}
         else if ($tmp1 === pas.PScanner.TToken.tktype) {
          this.NextToken();
          isHelper = this.CurTokenIsIdentifier("helper");
          this.UngetToken();
          if (isHelper) {
            Result = this.ParseClassDecl(Parent,NamePos,TypeName,pas.PasTree.TPasObjKind.okTypeHelper,PM,null)}
           else Result = this.ParseAliasType(Parent,NamePos,TypeName);
        } else if ($tmp1 === pas.PScanner.TToken.tkIdentifier) {
          if (this.CurTokenIsIdentifier("reference") && !pas.PasTree.TPasPointerType.isPrototypeOf(Parent)) {
            CH = false;
            Result = this.ParseReferenceToProcedureType(Parent,NamePos,TypeName);
          } else Result = this.ParseSimpleType(Parent,NamePos,TypeName,Full);
        } else if ($tmp1 === pas.PScanner.TToken.tkCaret) {
          Result = this.ParsePointerType(Parent,NamePos,TypeName)}
         else if ($tmp1 === pas.PScanner.TToken.tkfile) {
          Result = this.ParseFileType(Parent,NamePos,TypeName)}
         else if ($tmp1 === pas.PScanner.TToken.tkarray) {
          Result = this.ParseArrayType(Parent,NamePos,TypeName,PM)}
         else if ($tmp1 === pas.PScanner.TToken.tkBraceOpen) {
          Result = this.ParseEnumType(Parent,NamePos,TypeName)}
         else if ($tmp1 === pas.PScanner.TToken.tkset) {
          Result = this.ParseSetType(Parent,NamePos,TypeName,PM === pas.PasTree.TPackMode.pmPacked)}
         else if ($tmp1 === pas.PScanner.TToken.tkprocedure) {
          Result = this.ParseProcedureType(Parent,NamePos,TypeName,pas.PasTree.TProcType.ptProcedure)}
         else if ($tmp1 === pas.PScanner.TToken.tkfunction) {
          Result = this.ParseProcedureType(Parent,NamePos,TypeName,pas.PasTree.TProcType.ptFunction)}
         else if ($tmp1 === pas.PScanner.TToken.tkrecord) {
          this.NextToken();
          if (this.CurTokenIsIdentifier("Helper")) {
            this.UngetToken();
            Result = this.ParseClassDecl(Parent,NamePos,TypeName,pas.PasTree.TPasObjKind.okRecordHelper,PM,null);
          } else {
            this.UngetToken();
            Result = this.ParseRecordDecl(Parent,NamePos,TypeName,PM);
          };
        } else if ((($tmp1 === pas.PScanner.TToken.tkNumber) || ($tmp1 === pas.PScanner.TToken.tkMinus)) || ($tmp1 === pas.PScanner.TToken.tkChar)) {
          this.UngetToken();
          Result = this.ParseRangeType(Parent,NamePos,TypeName,Full);
        } else {
          this.ParseExcExpectedIdentifier();
        };
        if (CH) this.CheckHint(Result,true);
        ok = true;
      } finally {
        if (!ok) if (Result !== null) Result.Release();
      };
      return Result;
    };
    this.ParseReferenceToProcedureType = function (Parent, NamePos, TypeName) {
      var Result = null;
      if (!this.CurTokenIsIdentifier("reference")) this.ParseExcTokenError("reference");
      this.ExpectToken(pas.PScanner.TToken.tkto);
      this.NextToken();
      var $tmp1 = this.FCurToken;
      if ($tmp1 === pas.PScanner.TToken.tkprocedure) {
        Result = this.ParseProcedureType(Parent,NamePos,TypeName,pas.PasTree.TProcType.ptProcedure)}
       else if ($tmp1 === pas.PScanner.TToken.tkfunction) {
        Result = this.ParseProcedureType(Parent,NamePos,TypeName,pas.PasTree.TProcType.ptFunction)}
       else {
        this.ParseExcTokenError("procedure or function");
      };
      Result.SetIsReference(true);
      return Result;
    };
    this.ParseProcedureType = function (Parent, NamePos, TypeName, PT) {
      var Result = null;
      var ok = false;
      if (PT in rtl.createSet(pas.PasTree.TProcType.ptFunction,pas.PasTree.TProcType.ptClassFunction)) {
        Result = this.CreateFunctionType(TypeName,"Result",Parent,false,NamePos)}
       else Result = this.CreateElement$1(pas.PasTree.TPasProcedureType,TypeName,Parent,NamePos);
      ok = false;
      try {
        this.ParseProcedureOrFunctionHeader(Result,Result,PT,true);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseStringType = function (Parent, NamePos, TypeName) {
      var Result = null;
      var LengthAsText = "";
      var ok = false;
      var Params = null;
      var LengthExpr = null;
      Result = this.CreateElement$1(pas.PasTree.TPasAliasType,TypeName,Parent,NamePos);
      ok = false;
      try {
        if (Result.FName === "") Result.FName = "string";
        Result.Expr = this.CreatePrimitiveExpr(Result,pas.PasTree.TPasExprKind.pekIdent,TypeName);
        this.NextToken();
        LengthAsText = "";
        if (this.FCurToken === pas.PScanner.TToken.tkSquaredBraceOpen) {
          Params = this.CreateElement(pas.PasTree.TParamsExpr,"",Result);
          Params.Value = Result.Expr;
          Result.Expr = Params;
          LengthAsText = "";
          this.NextToken();
          LengthExpr = this.DoParseExpression(Result,null,false);
          Params.AddParam(LengthExpr);
          this.CheckToken(pas.PScanner.TToken.tkSquaredBraceClose);
          LengthAsText = this.ExprToText(LengthExpr);
        } else this.UngetToken();
        Result.DestType = this.CreateElement(pas.PasTree.TPasStringType,"string",Result);
        Result.DestType.LengthExpr = LengthAsText;
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseSimpleType = function (Parent, NamePos, TypeName, IsFull) {
      var Result = null;
      var TSimpleTypeKind = {"0": "stkAlias", stkAlias: 0, "1": "stkString", stkString: 1, "2": "stkRange", stkRange: 2, "3": "stkSpecialize", stkSpecialize: 3};
      var Ref = null;
      var K = 0;
      var Name = "";
      var ST = null;
      var Expr = null;
      var SrcPos = new pas.PScanner.TPasSourcePos();
      var ok = false;
      Result = null;
      Name = this.FCurTokenString;
      Expr = null;
      Ref = null;
      ST = null;
      try {
        if (IsFull) Expr = this.CreatePrimitiveExpr(Parent,pas.PasTree.TPasExprKind.pekIdent,Name);
        this.NextToken();
        while (this.FCurToken === pas.PScanner.TToken.tkDot) {
          SrcPos = new pas.PScanner.TPasSourcePos(this.CurTokenPos());
          this.ExpectIdentifier();
          Name = (Name + ".") + this.FCurTokenString;
          if (IsFull) this.AddToBinaryExprChain({get: function () {
              return Expr;
            }, set: function (v) {
              Expr = v;
            }},this.CreatePrimitiveExpr(Parent,pas.PasTree.TPasExprKind.pekIdent,this.FCurTokenString),pas.PasTree.TExprOpCode.eopSubIdent,SrcPos);
          this.NextToken();
        };
        if ((IsFull && (this.FCurToken === pas.PScanner.TToken.tkSemicolon)) || this.IsCurTokenHint$1()) {
          K = TSimpleTypeKind.stkAlias;
          this.UngetToken();
        } else if (IsFull && (this.FCurToken === pas.PScanner.TToken.tkSquaredBraceOpen)) {
          if (pas.SysUtils.LowerCase(Name) === "string") {
            K = TSimpleTypeKind.stkString}
           else this.ParseExcSyntaxError();
          this.UngetToken();
        } else if (this.FCurToken === pas.PScanner.TToken.tkLessThan) {
          K = TSimpleTypeKind.stkSpecialize;
        } else if (this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkBraceOpen,pas.PScanner.TToken.tkDotDot)) {
          K = TSimpleTypeKind.stkRange;
          this.UngetToken();
        } else {
          if (IsFull) this.ParseExcTokenError(";");
          K = TSimpleTypeKind.stkAlias;
          if (!(pas.PScanner.TPOption.po_ResolveStandardTypes in this.FOptions) && (pas.SysUtils.LowerCase(Name) === "string")) K = TSimpleTypeKind.stkString;
          this.UngetToken();
        };
        var $tmp1 = K;
        if ($tmp1 === TSimpleTypeKind.stkString) {
          pas.PasTree.ReleaseAndNil({get: function () {
              return Expr;
            }, set: function (v) {
              Expr = v;
            }});
          Result = this.ParseStringType(Parent,NamePos,TypeName);
        } else if ($tmp1 === TSimpleTypeKind.stkSpecialize) {
          ST = this.CreateElement$1(pas.PasTree.TPasSpecializeType,TypeName,Parent,this.CurTokenPos());
          try {
            if (Expr !== null) {
              ST.Expr = Expr;
              Expr.SetParent(ST);
              Expr = null;
            };
            Ref = this.ResolveTypeReference(Name,ST);
            ST.DestType = Ref;
            this.ReadSpecializeArguments(ST);
            if (TypeName !== "") this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,ST);
            Result = ST;
          } finally {
            if (Result === null) ST.Release();
          };
        } else if ($tmp1 === TSimpleTypeKind.stkRange) {
          pas.PasTree.ReleaseAndNil({get: function () {
              return Expr;
            }, set: function (v) {
              Expr = v;
            }});
          this.UngetToken();
          Result = this.ParseRangeType(Parent,NamePos,TypeName,false);
        } else if ($tmp1 === TSimpleTypeKind.stkAlias) {
          Ref = this.ResolveTypeReference(Name,Parent);
          if (IsFull) {
            Result = this.CreateElement$1(pas.PasTree.TPasAliasType,TypeName,Parent,NamePos);
            Result.DestType = Ref;
            Result.Expr = Expr;
            Expr.SetParent(Result);
            if (TypeName !== "") {
              ok = false;
              try {
                this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
                ok = true;
              } finally {
                if (!ok) Result.Release();
              };
            };
          } else Result = Ref;
        };
      } finally {
        if (Result === null) {
          pas.PasTree.ReleaseAndNil({get: function () {
              return Expr;
            }, set: function (v) {
              Expr = v;
            }});
          pas.PasTree.ReleaseAndNil({get: function () {
              return Ref;
            }, set: function (v) {
              Ref = v;
            }});
        };
      };
      return Result;
    };
    this.ParseAliasType = function (Parent, NamePos, TypeName) {
      var Result = null;
      var ok = false;
      Result = this.CreateElement$1(pas.PasTree.TPasTypeAliasType,TypeName,Parent,NamePos);
      ok = false;
      try {
        Result.DestType = this.ParseType(Result,NamePos,"",false,null);
        this.FEngine.FinishTypeAlias({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
        this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseTypeReference = function (Parent, NeedExpr, Expr) {
      var Result = null;
      var Name = "";
      var IsSpecialize = false;
      var ST = null;
      Result = null;
      Expr.set(null);
      ST = null;
      try {
        if (!(pas.PScanner.TModeSwitch.msDelphi in this.GetCurrentModeSwitches()) && (this.FCurToken === pas.PScanner.TToken.tkspecialize)) {
          IsSpecialize = true;
          this.NextToken();
        } else IsSpecialize = false;
        this.CheckToken(pas.PScanner.TToken.tkIdentifier);
        Name = this.ReadDottedIdentifier(Parent,Expr,true);
        Result = this.ResolveTypeReference(Name,Parent);
        if (this.FCurToken === pas.PScanner.TToken.tkLessThan) {
          ST = this.CreateElement(pas.PasTree.TPasSpecializeType,"",Parent);
          ST.DestType = Result;
          Result = null;
          ST.Expr = Expr.get();
          Expr.set(null);
          this.ReadSpecializeArguments(ST);
          Result = ST;
          ST = null;
          this.NextToken();
        } else if (IsSpecialize) {
          this.CheckToken(pas.PScanner.TToken.tkLessThan)}
         else {
          if (!NeedExpr) pas.PasTree.ReleaseAndNil(Expr);
        };
      } finally {
        if (ST !== null) ST.Release();
      };
      return Result;
    };
    this.ParsePointerType = function (Parent, NamePos, TypeName) {
      var Result = null;
      var ok = false;
      Result = this.CreateElement$1(pas.PasTree.TPasPointerType,TypeName,Parent,NamePos);
      ok = false;
      try {
        Result.DestType = this.ParseType(Result,this.CurSourcePos(),"",false,null);
        this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseArrayType = function (Parent, NamePos, TypeName, PackMode) {
      var Result = null;
      var S = "";
      var ok = false;
      var RangeExpr = null;
      Result = this.CreateElement$1(pas.PasTree.TPasArrayType,TypeName,Parent,NamePos);
      ok = false;
      try {
        Result.PackMode = PackMode;
        this.NextToken();
        S = "";
        var $tmp1 = this.FCurToken;
        if ($tmp1 === pas.PScanner.TToken.tkSquaredBraceOpen) {
          do {
            this.NextToken();
            if (pas.PScanner.TPOption.po_ArrayRangeExpr in this.FOptions) {
              RangeExpr = this.DoParseExpression(Result,null,true);
              Result.AddRange(RangeExpr);
            } else if (this.FCurToken !== pas.PScanner.TToken.tkSquaredBraceClose) S = S + this.CurTokenText();
            if (this.FCurToken === pas.PScanner.TToken.tkSquaredBraceClose) {
              break}
             else if (this.FCurToken === pas.PScanner.TToken.tkComma) {
              continue}
             else if (pas.PScanner.TPOption.po_ArrayRangeExpr in this.FOptions) this.ParseExcTokenError("]");
          } while (!false);
          Result.IndexRange = S;
          this.ExpectToken(pas.PScanner.TToken.tkof);
          Result.ElType = this.ParseType(Result,this.CurSourcePos(),"",false,null);
        } else if ($tmp1 === pas.PScanner.TToken.tkof) {
          this.NextToken();
          if (this.FCurToken === pas.PScanner.TToken.tkconst) {}
          else {
            this.UngetToken();
            Result.ElType = this.ParseType(Result,this.CurSourcePos(),"",false,null);
          };
        } else {
          this.ParseExc(2024,rtl.getResStr(pas.PParser,"SParserArrayTypeSyntaxError"));
        };
        if (pas.PasTree.TPasProcedureType.isPrototypeOf(Result.ElType) && (Result.ElType.FParent === Result)) this.UngetToken();
        this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseFileType = function (Parent, NamePos, TypeName) {
      var Result = null;
      Result = this.CreateElement$1(pas.PasTree.TPasFileType,TypeName,Parent,NamePos);
      this.NextToken();
      if (this.FCurToken === pas.PScanner.TToken.tkof) {
        Result.ElType = this.ParseType(Result,this.CurSourcePos(),"",false,null)}
       else this.UngetToken();
      return Result;
    };
    this.ParseRecordDecl = function (Parent, NamePos, TypeName, Packmode) {
      var Result = null;
      var ok = false;
      Result = this.CreateElement$1(pas.PasTree.TPasRecordType,TypeName,Parent,NamePos);
      ok = false;
      try {
        Result.PackMode = Packmode;
        this.NextToken();
        this.ParseRecordFieldList(Result,pas.PScanner.TToken.tkend,true);
        this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseEnumType = function (Parent, NamePos, TypeName) {
      var Result = null;
      var EnumValue = null;
      var ok = false;
      Result = this.CreateElement$1(pas.PasTree.TPasEnumType,TypeName,Parent,NamePos);
      ok = false;
      try {
        while (true) {
          this.NextToken();
          this.SaveComments();
          EnumValue = this.CreateElement(pas.PasTree.TPasEnumValue,this.FCurTokenString,Result);
          Result.Values.Add(EnumValue);
          this.NextToken();
          if (this.FCurToken === pas.PScanner.TToken.tkBraceClose) {
            break}
           else if (this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkEqual,pas.PScanner.TToken.tkAssign)) {
            this.NextToken();
            EnumValue.Value = this.DoParseExpression(Result,null,true);
            if (this.FCurToken === pas.PScanner.TToken.tkBraceClose) {
              break}
             else if (!(this.FCurToken === pas.PScanner.TToken.tkComma)) this.ParseExc(2011,rtl.getResStr(pas.PParser,"SParserExpectedCommaRBracket"));
          } else if (!(this.FCurToken === pas.PScanner.TToken.tkComma)) this.ParseExc(2011,rtl.getResStr(pas.PParser,"SParserExpectedCommaRBracket"));
        };
        this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseSetType = function (Parent, NamePos, TypeName, AIsPacked) {
      var Result = null;
      var ok = false;
      Result = this.CreateElement$1(pas.PasTree.TPasSetType,TypeName,Parent,NamePos);
      Result.IsPacked = AIsPacked;
      ok = false;
      try {
        this.ExpectToken(pas.PScanner.TToken.tkof);
        Result.EnumType = this.ParseType(Result,this.CurSourcePos(),"",false,null);
        this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseSpecializeType = function (Parent, TypeName) {
      var Result = null;
      var ok = false;
      this.NextToken();
      Result = rtl.as(this.ParseSimpleType(Parent,this.CurSourcePos(),TypeName,false),pas.PasTree.TPasSpecializeType);
      ok = false;
      try {
        this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseClassDecl = function (Parent, NamePos, AClassName, AObjKind, PackMode, GenericArgs) {
      var Result = null;
      var ok = false;
      var FT = null;
      var AExternalNameSpace = "";
      var AExternalName = "";
      var PCT = null;
      this.NextToken();
      FT = null;
      if ((AObjKind === pas.PasTree.TPasObjKind.okClass) && (this.FCurToken === pas.PScanner.TToken.tkof)) {
        Result = this.CreateElement$1(pas.PasTree.TPasClassOfType,AClassName,Parent,NamePos);
        ok = false;
        try {
          this.ExpectIdentifier();
          this.UngetToken();
          Result.DestType = this.ParseType(Result,this.CurSourcePos(),"",false,null);
          this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
          ok = true;
        } finally {
          if (!ok) Result.Release();
        };
        return Result;
      };
      if (((AObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass,pas.PasTree.TPasObjKind.okInterface)) && (pas.PScanner.TModeSwitch.msExternalClass in this.GetCurrentModeSwitches())) && this.CurTokenIsIdentifier("external")) {
        this.NextToken();
        if (this.FCurToken !== pas.PScanner.TToken.tkString) {
          this.UngetToken()}
         else AExternalNameSpace = this.FCurTokenString;
        this.ExpectIdentifier();
        if (!this.CurTokenIsIdentifier("Name")) this.ParseExc(2051,rtl.getResStr(pas.PParser,"SParserExpectedExternalClassName"));
        this.NextToken();
        if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkChar,pas.PScanner.TToken.tkString))) this.CheckToken(pas.PScanner.TToken.tkString);
        AExternalName = this.FCurTokenString;
        this.NextToken();
      } else {
        AExternalNameSpace = "";
        AExternalName = "";
      };
      if (this.CurTokenIsIdentifier("Helper")) {
        if (!(AObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass,pas.PasTree.TPasObjKind.okTypeHelper,pas.PasTree.TPasObjKind.okRecordHelper))) this.ParseExc$1(2029,rtl.getResStr(pas.PParser,"SParserHelperNotAllowed"),[pas.PasTree.ObjKindNames[AObjKind]]);
        var $tmp1 = AObjKind;
        if ($tmp1 === pas.PasTree.TPasObjKind.okClass) {
          AObjKind = pas.PasTree.TPasObjKind.okClassHelper}
         else if ($tmp1 === pas.PasTree.TPasObjKind.okTypeHelper) {
          this.ExpectToken(pas.PScanner.TToken.tkfor);
          FT = this.ParseType(Parent,this.CurSourcePos(),"",false,null);
        };
        this.NextToken();
      };
      PCT = this.CreateElement$1(pas.PasTree.TPasClassType,AClassName,Parent,NamePos);
      Result = PCT;
      ok = false;
      try {
        PCT.HelperForType = FT;
        PCT.IsExternal = AExternalName !== "";
        if (AExternalName !== "") PCT.ExternalName = pas.SysUtils.DeQuoteString(AExternalName,"'");
        if (AExternalNameSpace !== "") PCT.ExternalNameSpace = pas.SysUtils.DeQuoteString(AExternalNameSpace,"'");
        PCT.ObjKind = AObjKind;
        PCT.PackMode = PackMode;
        if (AObjKind === pas.PasTree.TPasObjKind.okInterface) {
          if (pas.SysUtils.SameText(this.FScanner.GetCurrentValueSwitch(pas.PScanner.TValueSwitch.vsInterfaces),"CORBA")) PCT.InterfaceType = pas.PasTree.TPasClassInterfaceType.citCorba;
        };
        if (GenericArgs != null) PCT.SetGenericTemplates(GenericArgs);
        this.DoParseClassType(PCT);
        this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
        ok = true;
      } finally {
        if (!ok) {
          PCT.SetParent(null);
          Result.Release();
        };
      };
      return Result;
    };
    this.ParseProperty = function (Parent, AName, AVisibility, IsClassField) {
      var Self = this;
      var Result = null;
      function GetAccessorName(aParent, Expr) {
        var Result = "";
        var Params = null;
        var Param = null;
        var SrcPos = new pas.PScanner.TPasSourcePos();
        Self.ExpectIdentifier();
        Result = Self.FCurTokenString;
        Expr.set(Self.CreatePrimitiveExpr(aParent,pas.PasTree.TPasExprKind.pekIdent,Self.FCurTokenString));
        do {
          Self.NextToken();
          if (Self.FCurToken !== pas.PScanner.TToken.tkDot) break;
          SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
          Self.ExpectIdentifier();
          Result = (Result + ".") + Self.FCurTokenString;
          Self.AddToBinaryExprChain(Expr,Self.CreatePrimitiveExpr(aParent,pas.PasTree.TPasExprKind.pekIdent,Self.FCurTokenString),pas.PasTree.TExprOpCode.eopSubIdent,SrcPos);
        } while (!false);
        if (Self.FCurToken !== pas.PScanner.TToken.tkSquaredBraceOpen) {
          Self.UngetToken()}
         else {
          Result = Result + "[";
          Params = Self.CreateElement(pas.PasTree.TParamsExpr,"",aParent);
          Params.Kind = pas.PasTree.TPasExprKind.pekArrayParams;
          Self.AddParamsToBinaryExprChain(Expr,Params);
          Self.NextToken();
          var $tmp1 = Self.FCurToken;
          if ($tmp1 === pas.PScanner.TToken.tkChar) {
            Param = Self.CreatePrimitiveExpr(aParent,pas.PasTree.TPasExprKind.pekString,Self.CurTokenText())}
           else if ($tmp1 === pas.PScanner.TToken.tkNumber) {
            Param = Self.CreatePrimitiveExpr(aParent,pas.PasTree.TPasExprKind.pekNumber,Self.FCurTokenString)}
           else if ($tmp1 === pas.PScanner.TToken.tkIdentifier) {
            Param = Self.CreatePrimitiveExpr(aParent,pas.PasTree.TPasExprKind.pekIdent,Self.CurTokenText())}
           else if (($tmp1 === pas.PScanner.TToken.tkfalse) || ($tmp1 === pas.PScanner.TToken.tktrue)) {
            Param = Self.CreateBoolConstExpr(aParent,pas.PasTree.TPasExprKind.pekBoolConst,Self.FCurToken === pas.PScanner.TToken.tktrue)}
           else {
            Self.ParseExcExpectedIdentifier();
          };
          Params.AddParam(Param);
          Result = Result + Self.FCurTokenString;
          Self.ExpectToken(pas.PScanner.TToken.tkSquaredBraceClose);
          Result = Result + "]";
        };
        do {
          Self.NextToken();
          if (Self.FCurToken !== pas.PScanner.TToken.tkDot) {
            Self.UngetToken();
            break;
          };
          SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
          Self.ExpectIdentifier();
          Result = (Result + ".") + Self.FCurTokenString;
          Self.AddToBinaryExprChain(Expr,Self.CreatePrimitiveExpr(aParent,pas.PasTree.TPasExprKind.pekIdent,Self.FCurTokenString),pas.PasTree.TExprOpCode.eopSubIdent,SrcPos);
        } while (!false);
        return Result;
      };
      function ParseImplements() {
        var Identifier = "";
        var Expr = null;
        var l = 0;
        do {
          Self.ExpectToken(pas.PScanner.TToken.tkIdentifier);
          l = rtl.length(Result.Implements);
          Identifier = Self.ReadDottedIdentifier(Result,{get: function () {
              return Expr;
            }, set: function (v) {
              Expr = v;
            }},l === 0);
          if (l === 0) Result.ImplementsName = Identifier;
          Result.Implements = rtl.arraySetLength(Result.Implements,null,l + 1);
          Result.Implements[l] = Expr;
        } while (!(Self.FCurToken !== pas.PScanner.TToken.tkComma));
      };
      var isArray = false;
      var ok = false;
      var ObjKind = 0;
      Result = Self.CreateElement$2(pas.PasTree.TPasProperty,AName,Parent,AVisibility);
      if (IsClassField) Result.VarModifiers = rtl.includeSet(Result.VarModifiers,pas.PasTree.TVariableModifier.vmClass);
      if ((Parent !== null) && (Parent.$class.ClassType() === pas.PasTree.TPasClassType)) {
        ObjKind = Parent.ObjKind}
       else ObjKind = pas.PasTree.TPasObjKind.okClass;
      ok = false;
      try {
        Self.NextToken();
        isArray = Self.FCurToken === pas.PScanner.TToken.tkSquaredBraceOpen;
        if (isArray) {
          Self.ParseArgList(Result,Result.FArgs,pas.PScanner.TToken.tkSquaredBraceClose);
          Self.NextToken();
        };
        if (Self.FCurToken === pas.PScanner.TToken.tkColon) {
          Result.VarType = Self.ParseType(Result,Self.CurSourcePos(),"",false,null);
          Self.NextToken();
        };
        if (Self.CurTokenIsIdentifier("INDEX")) {
          Self.NextToken();
          Result.IndexExpr = Self.DoParseExpression(Result,null,true);
        };
        if (Self.CurTokenIsIdentifier("READ")) {
          Result.ReadAccessorName = GetAccessorName(Result,{p: Result, get: function () {
              return this.p.ReadAccessor;
            }, set: function (v) {
              this.p.ReadAccessor = v;
            }});
          Self.NextToken();
        };
        if (Self.CurTokenIsIdentifier("WRITE")) {
          Result.WriteAccessorName = GetAccessorName(Result,{p: Result, get: function () {
              return this.p.WriteAccessor;
            }, set: function (v) {
              this.p.WriteAccessor = v;
            }});
          Self.NextToken();
        };
        if (Self.CurTokenIsIdentifier("READONLY")) {
          Result.DispIDReadOnly = true;
          Self.NextToken();
        };
        if (Self.CurTokenIsIdentifier("DISPID")) {
          Self.NextToken();
          Result.DispIDExpr = Self.DoParseExpression(Result,null,true);
        };
        if ((ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass)) && Self.CurTokenIsIdentifier("IMPLEMENTS")) ParseImplements();
        if (Self.CurTokenIsIdentifier("STORED")) {
          if (!(ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass))) Self.ParseExc$1(2056,rtl.getResStr(pas.PParser,"SParserXNotAllowedInY"),["STORED",pas.PasTree.ObjKindNames[ObjKind]]);
          Self.NextToken();
          if (Self.FCurToken === pas.PScanner.TToken.tktrue) {
            Result.StoredAccessorName = "True";
            Result.StoredAccessor = Self.CreateBoolConstExpr(Result,pas.PasTree.TPasExprKind.pekBoolConst,true);
          } else if (Self.FCurToken === pas.PScanner.TToken.tkfalse) {
            Result.StoredAccessorName = "False";
            Result.StoredAccessor = Self.CreateBoolConstExpr(Result,pas.PasTree.TPasExprKind.pekBoolConst,false);
          } else if (Self.FCurToken === pas.PScanner.TToken.tkIdentifier) {
            Self.UngetToken();
            Result.StoredAccessorName = GetAccessorName(Result,{p: Result, get: function () {
                return this.p.StoredAccessor;
              }, set: function (v) {
                this.p.StoredAccessor = v;
              }});
          } else Self.ParseExcSyntaxError();
          Self.NextToken();
        };
        if (Self.CurTokenIsIdentifier("DEFAULT")) {
          if (!(ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass))) Self.ParseExc$1(2056,rtl.getResStr(pas.PParser,"SParserXNotAllowedInY"),["DEFAULT",pas.PasTree.ObjKindNames[ObjKind]]);
          if (isArray) Self.ParseExc(2041,rtl.getResStr(pas.PParser,"SParserArrayPropertiesCannotHaveDefaultValue"));
          Self.NextToken();
          Result.DefaultExpr = Self.DoParseExpression(Result,null,true);
        } else if (Self.CurTokenIsIdentifier("NODEFAULT")) {
          if (!(ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass))) Self.ParseExc$1(2056,rtl.getResStr(pas.PParser,"SParserXNotAllowedInY"),["NODEFAULT",pas.PasTree.ObjKindNames[ObjKind]]);
          Result.IsNodefault = true;
          if (Result.DefaultExpr !== null) Self.ParseExcSyntaxError();
          Self.NextToken();
        };
        if (Self.FCurToken === pas.PScanner.TToken.tkSemicolon) {
          Self.NextToken();
          if (Self.CurTokenIsIdentifier("DEFAULT")) {
            if ((Result.VarType !== null) && !isArray) Self.ParseExc(2042,rtl.getResStr(pas.PParser,"SParserDefaultPropertyMustBeArray"));
            Self.NextToken();
            if (Self.FCurToken === pas.PScanner.TToken.tkSemicolon) {
              Result.IsDefault = true;
              Self.NextToken();
            };
          };
          while (Self.DoCheckHint(Result)) Self.NextToken();
          if (rtl.eqSet(Result.FHints,{})) Self.UngetToken();
        } else if (Self.FCurToken === pas.PScanner.TToken.tkend) {}
        else Self.CheckToken(pas.PScanner.TToken.tkSemicolon);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseRangeType = function (AParent, NamePos, TypeName, Full) {
      var Result = null;
      var PE = null;
      var ok = false;
      Result = this.CreateElement$1(pas.PasTree.TPasRangeType,TypeName,AParent,NamePos);
      ok = false;
      try {
        if (Full) {
          if (!(this.FCurToken === pas.PScanner.TToken.tkEqual)) this.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkEqual]);
        };
        this.NextToken();
        PE = this.DoParseExpression(Result,null,false);
        if (!(pas.PasTree.TBinaryExpr.isPrototypeOf(PE) && (PE.Kind === pas.PasTree.TPasExprKind.pekRange))) {
          PE.Release();
          this.ParseExc(2027,rtl.getResStr(pas.PParser,"SRangeExpressionExpected"));
        };
        Result.RangeExpr = PE;
        this.UngetToken();
        this.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,Result);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseExportDecl = function (Parent, List) {
      var E = null;
      do {
        if (List.FCount !== 0) this.ExpectIdentifier();
        E = this.CreateElement(pas.PasTree.TPasExportSymbol,this.FCurTokenString,Parent);
        List.Add(E);
        this.NextToken();
        if (this.CurTokenIsIdentifier("INDEX")) {
          this.NextToken();
          E.ExportIndex = this.DoParseExpression(E,null,true);
        } else if (this.CurTokenIsIdentifier("NAME")) {
          this.NextToken();
          E.ExportName = this.DoParseExpression(E,null,true);
        };
        if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkComma,pas.PScanner.TToken.tkSemicolon))) this.ParseExc(2012,rtl.getResStr(pas.PParser,"SParserExpectedCommaSemicolon"));
      } while (!(this.FCurToken === pas.PScanner.TToken.tkSemicolon));
    };
    this.ParseConstDecl = function (Parent) {
      var Result = null;
      var OldForceCaret = false;
      var ok = false;
      this.SaveComments();
      Result = this.CreateElement(pas.PasTree.TPasConst,this.FCurTokenString,Parent);
      if (pas.PasTree.TPasClassType.isPrototypeOf(Parent)) Result.VarModifiers = rtl.includeSet(Result.VarModifiers,pas.PasTree.TVariableModifier.vmClass);
      ok = false;
      try {
        this.NextToken();
        if (this.FCurToken === pas.PScanner.TToken.tkColon) {
          if (!(pas.PScanner.TBoolSwitch.bsWriteableConst in this.FScanner.FCurrentBoolSwitches)) Result.IsConst = true;
          OldForceCaret = this.FScanner.SetForceCaret(true);
          try {
            Result.VarType = this.ParseType(Result,this.CurSourcePos(),"",false,null);
          } finally {
            this.FScanner.SetForceCaret(OldForceCaret);
          };
        } else {
          this.UngetToken();
          Result.IsConst = true;
        };
        this.NextToken();
        if (this.FCurToken === pas.PScanner.TToken.tkEqual) {
          this.NextToken();
          Result.Expr = this.DoParseConstValueExpression(Result);
          if ((Result.VarType === null) && (Result.Expr.Kind === pas.PasTree.TPasExprKind.pekRange)) this.ParseExc(2052,rtl.getResStr(pas.PParser,"SParserNoConstRangeAllowed"));
        } else if ((Result.VarType !== null) && (pas.PScanner.TPOption.po_ExtConstWithoutExpr in this.FOptions)) {
          if ((pas.PasTree.TPasClassType.isPrototypeOf(Parent) && Parent.IsExternal) && (Parent.ObjKind === pas.PasTree.TPasObjKind.okClass)) {
            Result.IsConst = true}
           else if (this.FCurToken === pas.PScanner.TToken.tkSemicolon) {
            this.NextToken();
            if (this.CurTokenIsIdentifier("external")) {
              Result.IsConst = true;
              Result.VarModifiers = rtl.includeSet(Result.VarModifiers,pas.PasTree.TVariableModifier.vmExternal);
              this.NextToken();
              if (this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkString,pas.PScanner.TToken.tkIdentifier)) {
                if (!this.CurTokenIsIdentifier("name")) Result.LibraryName = this.DoParseExpression(Result,null,true);
                if (!this.CurTokenIsIdentifier("name")) this.ParseExcSyntaxError();
                this.NextToken();
                if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkChar,pas.PScanner.TToken.tkString,pas.PScanner.TToken.tkIdentifier))) this.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkString]);
                Result.ExportName = this.DoParseExpression(Parent,null,true);
                Result.IsConst = true;
              } else if (this.FCurToken === pas.PScanner.TToken.tkSemicolon) {}
              else this.ParseExcSyntaxError();
            } else {
              this.UngetToken();
              this.CheckToken(pas.PScanner.TToken.tkEqual);
            };
          } else this.CheckToken(pas.PScanner.TToken.tkEqual);
        } else this.CheckToken(pas.PScanner.TToken.tkEqual);
        this.UngetToken();
        this.CheckHint(Result,true);
        ok = true;
      } finally {
        if (!ok) pas.PasTree.ReleaseAndNil({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      };
      return Result;
    };
    this.ParseResourcestringDecl = function (Parent) {
      var Result = null;
      var ok = false;
      this.SaveComments();
      Result = this.CreateElement(pas.PasTree.TPasResString,this.FCurTokenString,Parent);
      ok = false;
      try {
        this.ExpectToken(pas.PScanner.TToken.tkEqual);
        this.NextToken();
        Result.Expr = this.DoParseConstValueExpression(Result);
        this.UngetToken();
        this.CheckHint(Result,true);
        ok = true;
      } finally {
        if (!ok) pas.PasTree.ReleaseAndNil({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      };
      return Result;
    };
    this.ParseAttribute = function (Parent) {
      var Expr = null;
      do {
        do {
          this.ExpectIdentifier();
          this.NextToken();
        } while (!(this.FCurToken !== pas.PScanner.TToken.tkDot));
        if (this.FCurToken === pas.PScanner.TToken.tkBraceOpen) {
          do {
            this.NextToken();
            if (this.FCurToken === pas.PScanner.TToken.tkBraceClose) break;
            Expr = this.DoParseConstValueExpression(Parent);
            Expr = rtl.freeLoc(Expr);
          } while (!(this.FCurToken !== pas.PScanner.TToken.tkComma));
          this.CheckToken(pas.PScanner.TToken.tkBraceClose);
          this.NextToken();
        };
      } while (!(this.FCurToken !== pas.PScanner.TToken.tkComma));
      this.CheckToken(pas.PScanner.TToken.tkSquaredBraceClose);
    };
    this.ParseVarDecl = function (Parent, List) {
      this.ParseVarList(Parent,List,pas.PasTree.TPasMemberVisibility.visDefault,true);
    };
    this.ParseInlineVarDecl = function (Parent, List, AVisibility, ClosingBrace) {
      var tt = {};
      this.ParseVarList(Parent,List,AVisibility,false);
      tt = rtl.createSet(pas.PScanner.TToken.tkend,pas.PScanner.TToken.tkSemicolon);
      if (ClosingBrace) tt = rtl.includeSet(tt,pas.PScanner.TToken.tkBraceClose);
      if (!(this.FCurToken in tt)) this.ParseExc(2018,rtl.getResStr(pas.PParser,"SParserExpectedSemiColonEnd"));
    };
    this.ParseMain = function (Module) {
      Module.set(null);
      this.NextToken();
      this.SaveComments();
      var $tmp1 = this.FCurToken;
      if ($tmp1 === pas.PScanner.TToken.tkunit) {
        this.ParseUnit(Module)}
       else if ($tmp1 === pas.PScanner.TToken.tkprogram) {
        this.ParseProgram(Module,false)}
       else if ($tmp1 === pas.PScanner.TToken.tklibrary) {
        this.ParseLibrary(Module)}
       else if ($tmp1 === pas.PScanner.TToken.tkEOF) {
        this.CheckToken(pas.PScanner.TToken.tkprogram)}
       else {
        this.UngetToken();
        this.ParseProgram(Module,true);
      };
    };
    this.ParseUnit = function (Module) {
      var AUnitName = "";
      var StartPos = new pas.PScanner.TPasSourcePos();
      var HasFinished = false;
      StartPos = new pas.PScanner.TPasSourcePos(this.CurTokenPos());
      Module.set(null);
      AUnitName = this.ExpectIdentifier();
      this.NextToken();
      while (this.FCurToken === pas.PScanner.TToken.tkDot) {
        this.ExpectIdentifier();
        AUnitName = (AUnitName + ".") + this.FCurTokenString;
        this.NextToken();
      };
      this.UngetToken();
      Module.set(this.CreateElement$1(pas.PasTree.TPasModule,AUnitName,this.FEngine.FPackage,StartPos));
      this.FCurModule = Module.get();
      HasFinished = true;
      try {
        if (this.FEngine.FPackage != null) {
          Module.get().PackageName = this.FEngine.FPackage.FName;
          this.FEngine.FPackage.Modules.Add(Module.get());
          Module.get().AddRef();
        };
        this.CheckHint(Module.get(),true);
        this.ExpectToken(pas.PScanner.TToken.tkinterface);
        if (pas.PScanner.TPOption.po_StopOnUnitInterface in this.FOptions) {
          HasFinished = false;
          return;
        };
        this.ParseInterface();
        if ((Module.get().InterfaceSection !== null) && (Module.get().InterfaceSection.PendingUsedIntf !== null)) {
          HasFinished = false;
        };
        if ((Module.get().ImplementationSection !== null) && (Module.get().ImplementationSection.PendingUsedIntf !== null)) {
          HasFinished = false;
        };
        if (HasFinished) this.FinishedModule();
      } finally {
        if (HasFinished) this.FCurModule = null;
      };
    };
    this.GetLastSection = function () {
      var Result = null;
      Result = null;
      if (this.FCurModule === null) return Result;
      if (pas.PasTree.TPasProgram.isPrototypeOf(this.FCurModule)) {
        Result = this.FCurModule.ProgramSection}
       else if (pas.PasTree.TPasLibrary.isPrototypeOf(this.FCurModule)) {
        Result = this.FCurModule.LibrarySection}
       else if ((this.FCurModule.$class.ClassType() === pas.PasTree.TPasModule) || pas.PasTree.TPasUnitModule.isPrototypeOf(this.FCurModule)) {
        if (this.FCurModule.ImplementationSection !== null) {
          Result = this.FCurModule.ImplementationSection}
         else Result = this.FCurModule.InterfaceSection;
      };
      return Result;
    };
    this.CanParseContinue = function (Section) {
      var Result = false;
      Result = false;
      Section.set(null);
      if (this.FCurModule === null) return Result;
      if ((this.FLastMsg !== "") && (this.FLastMsgType <= pas.PScanner.TMessageType.mtError)) {
        return Result;
      };
      if ((this.FScanner.FLastMsg !== "") && (this.FScanner.FLastMsgType <= pas.PScanner.TMessageType.mtError)) {
        return Result;
      };
      Section.set(this.GetLastSection());
      if (Section.get() === null) if (((pas.PScanner.TPOption.po_StopOnUnitInterface in this.FOptions) && (pas.PasTree.TPasUnitModule.isPrototypeOf(this.FCurModule) || (this.FCurModule.$class.ClassType() === pas.PasTree.TPasModule))) && (this.FCurModule.InterfaceSection === null)) {
        return true}
       else {
        return false;
      };
      Result = Section.get().PendingUsedIntf === null;
      return Result;
    };
    this.ParseContinue = function () {
      var Section = null;
      var HasFinished = false;
      if (this.FCurModule === null) this.ParseExcTokenError("TPasParser.ParseContinue missing module");
      if (!this.CanParseContinue({get: function () {
          return Section;
        }, set: function (v) {
          Section = v;
        }})) this.ParseExcTokenError("TPasParser.ParseContinue missing section");
      HasFinished = true;
      try {
        if (Section === null) {
          this.ParseInterface();
        } else {
          this.FEngine.FinishScope($mod.TPasScopeType.stUsesClause,Section);
          this.ParseDeclarations(Section);
        };
        Section = this.GetLastSection();
        if (Section === null) this.ParseExc(2001,"[20180306112327]");
        if (Section.PendingUsedIntf !== null) HasFinished = false;
        if (HasFinished) this.FinishedModule();
      } finally {
        if (HasFinished) this.FCurModule = null;
      };
    };
    this.ParseProgram = function (Module, SkipHeader) {
      var PP = null;
      var Section = null;
      var N = "";
      var StartPos = new pas.PScanner.TPasSourcePos();
      var HasFinished = false;
      StartPos = new pas.PScanner.TPasSourcePos(this.CurTokenPos());
      if (SkipHeader) {
        N = pas.SysUtils.ChangeFileExt(this.FScanner.FCurFilename,"")}
       else {
        N = this.ExpectIdentifier();
        this.NextToken();
        while (this.FCurToken === pas.PScanner.TToken.tkDot) {
          this.ExpectIdentifier();
          N = (N + ".") + this.FCurTokenString;
          this.NextToken();
        };
        this.UngetToken();
      };
      Module.set(null);
      PP = this.CreateElement$1(pas.PasTree.TPasProgram,N,this.FEngine.FPackage,StartPos);
      Module.set(PP);
      HasFinished = true;
      this.FCurModule = Module.get();
      try {
        if (this.FEngine.FPackage != null) {
          Module.get().PackageName = this.FEngine.FPackage.FName;
          this.FEngine.FPackage.Modules.Add(Module.get());
        };
        if (!SkipHeader) {
          this.NextToken();
          if (this.FCurToken === pas.PScanner.TToken.tkBraceOpen) {
            PP.InputFile = this.ExpectIdentifier();
            this.NextToken();
            if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkBraceClose,pas.PScanner.TToken.tkComma))) this.ParseExc(2011,rtl.getResStr(pas.PParser,"SParserExpectedCommaRBracket"));
            if (this.FCurToken === pas.PScanner.TToken.tkComma) PP.OutPutFile = this.ExpectIdentifier();
            this.ExpectToken(pas.PScanner.TToken.tkBraceClose);
            this.NextToken();
          };
          if (this.FCurToken !== pas.PScanner.TToken.tkSemicolon) this.ParseExcTokenError(";");
        };
        Section = this.CreateElement(pas.PasTree.TProgramSection,"",this.FCurModule);
        PP.ProgramSection = Section;
        this.ParseOptionalUsesList(Section);
        HasFinished = Section.PendingUsedIntf === null;
        if (!HasFinished) {
          return;
        };
        this.ParseDeclarations(Section);
        this.FinishedModule();
      } finally {
        if (HasFinished) this.FCurModule = null;
      };
    };
    this.ParseLibrary = function (Module) {
      var PP = null;
      var Section = null;
      var N = "";
      var StartPos = new pas.PScanner.TPasSourcePos();
      var HasFinished = false;
      StartPos = new pas.PScanner.TPasSourcePos(this.CurTokenPos());
      N = this.ExpectIdentifier();
      this.NextToken();
      while (this.FCurToken === pas.PScanner.TToken.tkDot) {
        this.ExpectIdentifier();
        N = (N + ".") + this.FCurTokenString;
        this.NextToken();
      };
      this.UngetToken();
      Module.set(null);
      PP = this.CreateElement$1(pas.PasTree.TPasLibrary,N,this.FEngine.FPackage,StartPos);
      Module.set(PP);
      HasFinished = true;
      this.FCurModule = Module.get();
      try {
        if (this.FEngine.FPackage != null) {
          Module.get().PackageName = this.FEngine.FPackage.FName;
          this.FEngine.FPackage.Modules.Add(Module.get());
        };
        this.NextToken();
        if (this.FCurToken !== pas.PScanner.TToken.tkSemicolon) this.ParseExcTokenError(";");
        Section = this.CreateElement(pas.PasTree.TLibrarySection,"",this.FCurModule);
        PP.LibrarySection = Section;
        this.ParseOptionalUsesList(Section);
        HasFinished = Section.PendingUsedIntf === null;
        if (!HasFinished) return;
        this.ParseDeclarations(Section);
        this.FinishedModule();
      } finally {
        if (HasFinished) this.FCurModule = null;
      };
    };
    this.ParseOptionalUsesList = function (ASection) {
      this.NextToken();
      this.CheckImplicitUsedUnits(ASection);
      if (this.FCurToken === pas.PScanner.TToken.tkuses) {
        this.ParseUsesList(ASection)}
       else this.UngetToken();
      this.FEngine.CheckPendingUsedInterface(ASection);
      if (ASection.PendingUsedIntf !== null) return;
      this.FEngine.FinishScope($mod.TPasScopeType.stUsesClause,ASection);
    };
    this.ParseUsesList = function (ASection) {
      var AUnitName = "";
      var aName = "";
      var NameExpr = null;
      var InFileExpr = null;
      var FreeExpr = false;
      var NamePos = new pas.PScanner.TPasSourcePos();
      var SrcPos = new pas.PScanner.TPasSourcePos();
      var aModule = null;
      this.FScanner.FSkipGlobalSwitches = true;
      NameExpr = null;
      InFileExpr = null;
      FreeExpr = true;
      try {
        do {
          FreeExpr = true;
          AUnitName = this.ExpectIdentifier();
          NamePos = new pas.PScanner.TPasSourcePos(this.CurSourcePos());
          NameExpr = this.CreatePrimitiveExpr(ASection,pas.PasTree.TPasExprKind.pekString,AUnitName);
          this.NextToken();
          while (this.FCurToken === pas.PScanner.TToken.tkDot) {
            SrcPos = new pas.PScanner.TPasSourcePos(this.CurTokenPos());
            this.ExpectIdentifier();
            aName = this.FCurTokenString;
            AUnitName = (AUnitName + ".") + aName;
            this.AddToBinaryExprChain({get: function () {
                return NameExpr;
              }, set: function (v) {
                NameExpr = v;
              }},this.CreatePrimitiveExpr(ASection,pas.PasTree.TPasExprKind.pekString,aName),pas.PasTree.TExprOpCode.eopSubIdent,SrcPos);
            this.NextToken();
          };
          if (this.FCurToken === pas.PScanner.TToken.tkin) {
            if (pas.PScanner.TModeSwitch.msDelphi in this.GetCurrentModeSwitches()) {
              aModule = ASection.GetModule();
              if ((aModule !== null) && ((aModule.$class.ClassType() === pas.PasTree.TPasModule) || pas.PasTree.TPasUnitModule.isPrototypeOf(aModule))) this.CheckToken(pas.PScanner.TToken.tkSemicolon);
            };
            this.ExpectToken(pas.PScanner.TToken.tkString);
            InFileExpr = this.CreatePrimitiveExpr(ASection,pas.PasTree.TPasExprKind.pekString,this.FCurTokenString);
            this.NextToken();
          };
          FreeExpr = false;
          this.AddUseUnit(ASection,NamePos,AUnitName,NameExpr,InFileExpr);
          InFileExpr = null;
          NameExpr = null;
          if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkComma,pas.PScanner.TToken.tkSemicolon))) this.ParseExc(2012,rtl.getResStr(pas.PParser,"SParserExpectedCommaSemicolon"));
        } while (!(this.FCurToken === pas.PScanner.TToken.tkSemicolon));
      } finally {
        if (FreeExpr) {
          pas.PasTree.ReleaseAndNil({get: function () {
              return NameExpr;
            }, set: function (v) {
              NameExpr = v;
            }});
          pas.PasTree.ReleaseAndNil({get: function () {
              return InFileExpr;
            }, set: function (v) {
              InFileExpr = v;
            }});
        };
      };
    };
    this.ParseInterface = function () {
      var Section = null;
      if (this.LogEvent($mod.TPParserLogEvent.pleInterface)) this.DoLog(pas.PScanner.TMessageType.mtInfo,2031,rtl.getResStr(pas.PParser,"SLogStartInterface"),false);
      Section = this.CreateElement(pas.PasTree.TInterfaceSection,"",this.FCurModule);
      this.FCurModule.InterfaceSection = Section;
      this.ParseOptionalUsesList(Section);
      if (Section.PendingUsedIntf !== null) return;
      this.ParseDeclarations(Section);
    };
    this.ParseImplementation = function () {
      var Section = null;
      Section = this.CreateElement(pas.PasTree.TImplementationSection,"",this.FCurModule);
      this.FCurModule.ImplementationSection = Section;
      this.ParseOptionalUsesList(Section);
      if (Section.PendingUsedIntf !== null) return;
      this.ParseDeclarations(Section);
    };
    this.ParseInitialization = function () {
      var Section = null;
      var SubBlock = null;
      Section = this.CreateElement$1(pas.PasTree.TInitializationSection,"",this.FCurModule,this.CurTokenPos());
      this.FCurModule.InitializationSection = Section;
      do {
        this.NextToken();
        if (this.FCurToken === pas.PScanner.TToken.tkend) {
          this.ExpectToken(pas.PScanner.TToken.tkDot);
          this.FEngine.FinishScope($mod.TPasScopeType.stInitialFinalization,Section);
          return;
        } else if (this.FCurToken === pas.PScanner.TToken.tkfinalization) {
          this.FEngine.FinishScope($mod.TPasScopeType.stInitialFinalization,Section);
          this.ParseFinalization();
          return;
        } else if (this.FCurToken !== pas.PScanner.TToken.tkSemicolon) {
          this.UngetToken();
          this.ParseStatement(Section,{get: function () {
              return SubBlock;
            }, set: function (v) {
              SubBlock = v;
            }});
          if (SubBlock === null) this.ExpectToken(pas.PScanner.TToken.tkend);
        };
      } while (!false);
    };
    this.ParseFinalization = function () {
      var Section = null;
      var SubBlock = null;
      Section = this.CreateElement(pas.PasTree.TFinalizationSection,"",this.FCurModule);
      this.FCurModule.FinalizationSection = Section;
      do {
        this.NextToken();
        if (this.FCurToken === pas.PScanner.TToken.tkend) {
          this.ExpectToken(pas.PScanner.TToken.tkDot);
          this.FEngine.FinishScope($mod.TPasScopeType.stInitialFinalization,Section);
          return;
        } else if (this.FCurToken !== pas.PScanner.TToken.tkSemicolon) {
          this.UngetToken();
          this.ParseStatement(Section,{get: function () {
              return SubBlock;
            }, set: function (v) {
              SubBlock = v;
            }});
          if (SubBlock === null) this.ExpectToken(pas.PScanner.TToken.tkend);
        };
      } while (!false);
    };
    this.ParseDeclarations = function (Declarations) {
      var Self = this;
      var CurBlock = 0;
      function SetBlock(NewBlock) {
        if (CurBlock === NewBlock) return;
        if (CurBlock === $impl.TDeclType.declType) Self.FEngine.FinishScope($mod.TPasScopeType.stTypeSection,Declarations);
        CurBlock = NewBlock;
        Self.FScanner.SetForceCaret(NewBlock === $impl.TDeclType.declType);
      };
      var ConstEl = null;
      var ResStrEl = null;
      var TypeEl = null;
      var ClassEl = null;
      var ArrEl = null;
      var List = null;
      var i = 0;
      var j = 0;
      var VarEl = null;
      var ExpEl = null;
      var PropEl = null;
      var TypeName = "";
      var PT = 0;
      var NamePos = new pas.PScanner.TPasSourcePos();
      var ok = false;
      var Proc = null;
      var RecordEl = null;
      CurBlock = $impl.TDeclType.declNone;
      while (true) {
        if (CurBlock in rtl.createSet($impl.TDeclType.declNone,$impl.TDeclType.declConst,$impl.TDeclType.declType)) {
          Self.FScanner.SetTokenOption(pas.PScanner.TTokenOption.toOperatorToken)}
         else Self.FScanner.UnSetTokenOption(pas.PScanner.TTokenOption.toOperatorToken);
        Self.NextToken();
        Self.FScanner.FSkipGlobalSwitches = true;
        var $tmp1 = Self.FCurToken;
        if ($tmp1 === pas.PScanner.TToken.tkend) {
          if (pas.PasTree.TPasProgram.isPrototypeOf(Self.FCurModule) && (Self.FCurModule.InitializationSection === null)) Self.ParseExcTokenError("begin");
          Self.ExpectToken(pas.PScanner.TToken.tkDot);
          break;
        } else if ($tmp1 === pas.PScanner.TToken.tkimplementation) {
          if (pas.PasTree.TInterfaceSection.isPrototypeOf(Declarations)) {
            if (!Self.FEngine.FInterfaceOnly) {
              if (Self.LogEvent($mod.TPParserLogEvent.pleImplementation)) Self.DoLog(pas.PScanner.TMessageType.mtInfo,2030,rtl.getResStr(pas.PParser,"SLogStartImplementation"),false);
              SetBlock($impl.TDeclType.declNone);
              Self.ParseImplementation();
            };
            break;
          }}
         else if ($tmp1 === pas.PScanner.TToken.tkinitialization) {
          if (pas.PasTree.TInterfaceSection.isPrototypeOf(Declarations) || (pas.PasTree.TImplementationSection.isPrototypeOf(Declarations) && !pas.PasTree.TProgramSection.isPrototypeOf(Declarations))) {
            SetBlock($impl.TDeclType.declNone);
            Self.ParseInitialization();
            break;
          }}
         else if ($tmp1 === pas.PScanner.TToken.tkfinalization) {
          if (pas.PasTree.TInterfaceSection.isPrototypeOf(Declarations) || (pas.PasTree.TImplementationSection.isPrototypeOf(Declarations) && !pas.PasTree.TProgramSection.isPrototypeOf(Declarations))) {
            SetBlock($impl.TDeclType.declNone);
            Self.ParseFinalization();
            break;
          }}
         else if ($tmp1 === pas.PScanner.TToken.tkuses) {
          if (Declarations.$class.ClassType() === pas.PasTree.TInterfaceSection) {
            Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkimplementation])}
           else if (pas.PasTree.TPasSection.isPrototypeOf(Declarations)) {
            Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkend])}
           else Self.ParseExcSyntaxError()}
         else if ($tmp1 === pas.PScanner.TToken.tkconst) {
          SetBlock($impl.TDeclType.declConst)}
         else if ($tmp1 === pas.PScanner.TToken.tkexports) {
          SetBlock($impl.TDeclType.declExports)}
         else if ($tmp1 === pas.PScanner.TToken.tkResourceString) {
          if (pas.PasTree.TPasSection.isPrototypeOf(Declarations)) {
            SetBlock($impl.TDeclType.declResourcestring)}
           else {
            Self.ParseExc(2054,rtl.getResStr(pas.PParser,"SParserResourcestringsMustBeGlobal"));
          }}
         else if ($tmp1 === pas.PScanner.TToken.tktype) {
          SetBlock($impl.TDeclType.declType)}
         else if ($tmp1 === pas.PScanner.TToken.tkvar) {
          SetBlock($impl.TDeclType.declVar)}
         else if ($tmp1 === pas.PScanner.TToken.tkthreadvar) {
          SetBlock($impl.TDeclType.declThreadvar)}
         else if ($tmp1 === pas.PScanner.TToken.tkproperty) {
          SetBlock($impl.TDeclType.declProperty)}
         else if ((((($tmp1 === pas.PScanner.TToken.tkprocedure) || ($tmp1 === pas.PScanner.TToken.tkfunction)) || ($tmp1 === pas.PScanner.TToken.tkconstructor)) || ($tmp1 === pas.PScanner.TToken.tkdestructor)) || ($tmp1 === pas.PScanner.TToken.tkoperator)) {
          SetBlock($impl.TDeclType.declNone);
          Self.SaveComments();
          PT = Self.GetProcTypeFromToken(Self.FCurToken,false);
          Self.AddProcOrFunction(Declarations,Self.ParseProcedureOrFunctionDecl(Declarations,PT,pas.PasTree.TPasMemberVisibility.visDefault));
        } else if ($tmp1 === pas.PScanner.TToken.tkclass) {
          SetBlock($impl.TDeclType.declNone);
          Self.SaveComments();
          Self.NextToken();
          if (Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkprocedure,pas.PScanner.TToken.tkfunction,pas.PScanner.TToken.tkconstructor,pas.PScanner.TToken.tkdestructor)) {
            PT = Self.GetProcTypeFromToken(Self.FCurToken,true);
            Self.AddProcOrFunction(Declarations,Self.ParseProcedureOrFunctionDecl(Declarations,PT,pas.PasTree.TPasMemberVisibility.visDefault));
          } else Self.CheckToken(pas.PScanner.TToken.tkprocedure);
        } else if ($tmp1 === pas.PScanner.TToken.tkIdentifier) {
          Self.FScanner.UnSetTokenOption(pas.PScanner.TTokenOption.toOperatorToken);
          Self.SaveComments();
          var $tmp2 = CurBlock;
          if ($tmp2 === $impl.TDeclType.declConst) {
            ConstEl = Self.ParseConstDecl(Declarations);
            Declarations.Declarations.Add(ConstEl);
            Declarations.Consts.Add(ConstEl);
            Self.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,ConstEl);
          } else if ($tmp2 === $impl.TDeclType.declResourcestring) {
            ResStrEl = Self.ParseResourcestringDecl(Declarations);
            Declarations.Declarations.Add(ResStrEl);
            Declarations.ResStrings.Add(ResStrEl);
            Self.FEngine.FinishScope($mod.TPasScopeType.stResourceString,ResStrEl);
          } else if ($tmp2 === $impl.TDeclType.declType) {
            TypeEl = Self.ParseTypeDecl(Declarations);
            if (TypeEl != null) {
              Declarations.Declarations.Add(TypeEl);
              if ((TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && !(pas.PScanner.TPOption.po_KeepClassForward in Self.FOptions)) {
                for (var $l3 = 0, $end4 = Declarations.Classes$1.FCount - 1; $l3 <= $end4; $l3++) {
                  i = $l3;
                  ClassEl = rtl.getObject(Declarations.Classes$1.Get(i));
                  if (pas.SysUtils.CompareText(ClassEl.FName,TypeEl.FName) === 0) {
                    Declarations.Classes$1.Delete(i);
                    for (var $l5 = 0, $end6 = Declarations.Declarations.FCount - 1; $l5 <= $end6; $l5++) {
                      j = $l5;
                      if (pas.SysUtils.CompareText(TypeEl.FName,rtl.getObject(Declarations.Declarations.Get(j)).FName) === 0) {
                        Declarations.Declarations.Delete(j);
                        break;
                      };
                    };
                    ClassEl.Release();
                    break;
                  };
                };
                Declarations.Classes$1.Add(TypeEl);
              } else Declarations.Types.Add(TypeEl);
            };
          } else if ($tmp2 === $impl.TDeclType.declExports) {
            List = pas.Classes.TFPList.$create("Create");
            try {
              ok = false;
              try {
                Self.ParseExportDecl(Declarations,List);
                ok = true;
              } finally {
                if (!ok) for (var $l7 = 0, $end8 = List.FCount - 1; $l7 <= $end8; $l7++) {
                  i = $l7;
                  rtl.getObject(List.Get(i)).Release();
                };
              };
              for (var $l9 = 0, $end10 = List.FCount - 1; $l9 <= $end10; $l9++) {
                i = $l9;
                ExpEl = rtl.getObject(List.Get(i));
                Declarations.Declarations.Add(ExpEl);
                Declarations.ExportSymbols.Add(ExpEl);
              };
            } finally {
              List = rtl.freeLoc(List);
            };
          } else if (($tmp2 === $impl.TDeclType.declVar) || ($tmp2 === $impl.TDeclType.declThreadvar)) {
            List = pas.Classes.TFPList.$create("Create");
            try {
              Self.ParseVarDecl(Declarations,List);
              for (var $l11 = 0, $end12 = List.FCount - 1; $l11 <= $end12; $l11++) {
                i = $l11;
                VarEl = rtl.getObject(List.Get(i));
                Declarations.Declarations.Add(VarEl);
                Declarations.Variables.Add(VarEl);
                Self.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,VarEl);
              };
              Self.CheckToken(pas.PScanner.TToken.tkSemicolon);
            } finally {
              List = rtl.freeLoc(List);
            };
          } else if ($tmp2 === $impl.TDeclType.declProperty) {
            PropEl = Self.ParseProperty(Declarations,Self.FCurTokenString,pas.PasTree.TPasMemberVisibility.visDefault,false);
            Declarations.Declarations.Add(PropEl);
            Declarations.Properties.Add(PropEl);
            Self.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,PropEl);
          } else {
            Self.ParseExcSyntaxError();
          };
        } else if ($tmp1 === pas.PScanner.TToken.tkgeneric) {
          if (CurBlock !== $impl.TDeclType.declType) Self.ParseExcSyntaxError();
          TypeName = Self.ExpectIdentifier();
          NamePos = new pas.PScanner.TPasSourcePos(Self.CurSourcePos());
          List = pas.Classes.TFPList.$create("Create");
          try {
            Self.ReadGenericArguments(List,Declarations);
            Self.ExpectToken(pas.PScanner.TToken.tkEqual);
            Self.NextToken();
            var $tmp13 = Self.FCurToken;
            if (($tmp13 === pas.PScanner.TToken.tkobject) || ($tmp13 === pas.PScanner.TToken.tkclass)) {
              ClassEl = Self.CreateElement$1(pas.PasTree.TPasClassType,TypeName,Declarations,NamePos);
              Declarations.Declarations.Add(ClassEl);
              Declarations.Classes$1.Add(ClassEl);
              ClassEl.SetGenericTemplates(List);
              Self.NextToken();
              Self.DoParseClassType(ClassEl);
              Self.CheckHint(ClassEl,true);
              Self.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,ClassEl);
            } else if ($tmp13 === pas.PScanner.TToken.tkrecord) {
              RecordEl = Self.CreateElement$1(pas.PasTree.TPasRecordType,TypeName,Declarations,NamePos);
              Declarations.Declarations.Add(RecordEl);
              Declarations.Classes$1.Add(RecordEl);
              RecordEl.SetGenericTemplates(List);
              Self.NextToken();
              Self.ParseRecordFieldList(RecordEl,pas.PScanner.TToken.tkend,true);
              Self.CheckHint(RecordEl,true);
              Self.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,RecordEl);
            } else if ($tmp13 === pas.PScanner.TToken.tkarray) {
              if (List.FCount !== 1) Self.ParseExc(2044,rtl.getResStr(pas.PParser,"SParserGenericArray1Element"));
              ArrEl = Self.ParseArrayType(Declarations,NamePos,TypeName,pas.PasTree.TPackMode.pmNone);
              Declarations.Declarations.Add(ArrEl);
              Declarations.Types.Add(ArrEl);
              Self.CheckHint(ArrEl,true);
              ArrEl.ElType.Release();
              ArrEl.ElType = rtl.getObject(List.Get(0));
              List.Clear();
              Self.FEngine.FinishScope($mod.TPasScopeType.stTypeDef,ArrEl);
            } else {
              Self.ParseExc(2045,rtl.getResStr(pas.PParser,"SParserGenericClassOrArray"));
            };
          } finally {
            for (var $l14 = 0, $end15 = List.FCount - 1; $l14 <= $end15; $l14++) {
              i = $l14;
              rtl.getObject(List.Get(i)).Release();
            };
            List = rtl.freeLoc(List);
          };
        } else if ($tmp1 === pas.PScanner.TToken.tkbegin) {
          if (pas.PasTree.TProcedureBody.isPrototypeOf(Declarations)) {
            Proc = rtl.as(Declarations.FParent,pas.PasTree.TPasProcedure);
            if (pas.PasTree.TProcedureModifier.pmAssembler in Proc.FModifiers) Self.ParseExc$1(2006,rtl.getResStr(pas.PParser,"SParserExpectTokenError"),["asm"]);
            SetBlock($impl.TDeclType.declNone);
            Self.ParseProcBeginBlock(Declarations);
            break;
          } else if (pas.PasTree.TInterfaceSection.isPrototypeOf(Declarations) || pas.PasTree.TImplementationSection.isPrototypeOf(Declarations)) {
            SetBlock($impl.TDeclType.declNone);
            Self.ParseInitialization();
            break;
          } else Self.ParseExcSyntaxError();
        } else if ($tmp1 === pas.PScanner.TToken.tkasm) {
          if (pas.PasTree.TProcedureBody.isPrototypeOf(Declarations)) {
            Proc = rtl.as(Declarations.FParent,pas.PasTree.TPasProcedure);
            if (!((pas.PasTree.TProcedureModifier.pmAssembler in Proc.FModifiers) || (pas.PScanner.TModeSwitch.msDelphi in Self.GetCurrentModeSwitches()))) Self.ParseExc$1(2006,rtl.getResStr(pas.PParser,"SParserExpectTokenError"),["begin"]);
            SetBlock($impl.TDeclType.declNone);
            Self.ParseProcAsmBlock(Declarations);
            break;
          } else Self.ParseExcSyntaxError();
        } else if ($tmp1 === pas.PScanner.TToken.tklabel) {
          SetBlock($impl.TDeclType.declNone);
          if (!pas.PasTree.TInterfaceSection.isPrototypeOf(Declarations)) Self.ParseLabels(Declarations);
        } else if ($tmp1 === pas.PScanner.TToken.tkSquaredBraceOpen) {
          if (rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PScanner.TModeSwitch.msPrefixedAttributes,pas.PScanner.TModeSwitch.msIgnoreAttributes),Self.GetCurrentModeSwitches()),{})) {
            Self.ParseAttribute(Declarations)}
           else Self.ParseExcSyntaxError()}
         else {
          Self.ParseExcSyntaxError();
        };
      };
      SetBlock($impl.TDeclType.declNone);
    };
    this.ParseStatement = function (Parent, NewImplElement) {
      var Self = this;
      var CurBlock = null;
      function CloseBlock() {
        var Result = false;
        if (CurBlock.$class.ClassType() === pas.PasTree.TPasImplExceptOn) Self.FEngine.FinishScope($mod.TPasScopeType.stExceptOnStatement,CurBlock);
        CurBlock = rtl.as(CurBlock.FParent,pas.PasTree.TPasImplBlock);
        Result = CurBlock === Parent;
        return Result;
      };
      function CloseStatement(CloseIfs) {
        var Result = false;
        if (CurBlock === Parent) return true;
        while (CurBlock.CloseOnSemicolon() || (CloseIfs && pas.PasTree.TPasImplIfElse.isPrototypeOf(CurBlock))) if (CloseBlock()) return true;
        Result = false;
        return Result;
      };
      function CreateBlock(NewBlock) {
        CurBlock.AddElement(NewBlock);
        CurBlock = NewBlock;
        if (NewImplElement.get() === null) NewImplElement.set(CurBlock);
      };
      function CheckSemicolon() {
        var t = 0;
        if (CurBlock.Elements.FCount === 0) return;
        t = Self.GetPrevToken();
        if (t in rtl.createSet(pas.PScanner.TToken.tkSemicolon,pas.PScanner.TToken.tkColon)) return;
        if ((CurBlock.$class.ClassType() === pas.PasTree.TPasImplIfElse) && (t === pas.PScanner.TToken.tkelse)) return;
        Self.ParseExcTokenError("Semicolon");
      };
      var CmdElem = null;
      function AddStatement(El) {
        CurBlock.AddElement(El);
        CmdElem = El;
        Self.UngetToken();
      };
      var SubBlock = null;
      var Left = null;
      var Right = null;
      var El = null;
      var lt = 0;
      var SrcPos = new pas.PScanner.TPasSourcePos();
      var Name = "";
      var TypeEl = null;
      var ImplRaise = null;
      var Expr = null;
      NewImplElement.set(null);
      El = null;
      Left = null;
      try {
        CurBlock = Parent;
        while (true) {
          Self.NextToken();
          var $tmp1 = Self.FCurToken;
          if ($tmp1 === pas.PScanner.TToken.tkasm) {
            CheckSemicolon();
            El = Self.CreateElement$1(pas.PasTree.TPasImplAsmStatement,"",CurBlock,Self.CurTokenPos());
            Self.ParseAsmBlock(El);
            CurBlock.AddElement(El);
            El = null;
            if (NewImplElement.get() === null) NewImplElement.set(CurBlock);
            if (CloseStatement(false)) break;
          } else if ($tmp1 === pas.PScanner.TToken.tkbegin) {
            CheckSemicolon();
            El = Self.CreateElement$1(pas.PasTree.TPasImplBeginBlock,"",CurBlock,Self.CurTokenPos());
            CreateBlock(El);
            El = null;
          } else if ($tmp1 === pas.PScanner.TToken.tkrepeat) {
            CheckSemicolon();
            El = Self.CreateElement$1(pas.PasTree.TPasImplRepeatUntil,"",CurBlock,Self.CurTokenPos());
            CreateBlock(El);
            El = null;
          } else if ($tmp1 === pas.PScanner.TToken.tkif) {
            CheckSemicolon();
            SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
            Self.NextToken();
            Left = Self.DoParseExpression(CurBlock,null,true);
            Self.UngetToken();
            El = Self.CreateElement$1(pas.PasTree.TPasImplIfElse,"",CurBlock,SrcPos);
            El.ConditionExpr = Left;
            Left.SetParent(El);
            Left = null;
            CreateBlock(El);
            El = null;
            Self.ExpectToken(pas.PScanner.TToken.tkthen);
          } else if ($tmp1 === pas.PScanner.TToken.tkelse) {
            if (pas.PasTree.TPasImplIfElse.isPrototypeOf(CurBlock)) {
              if (CurBlock.IfBranch === null) {
                El = Self.CreateElement$1(pas.PasTree.TPasImplCommand,"",CurBlock,Self.CurTokenPos());
                CurBlock.AddElement(El);
                El = null;
              };
              if (CurBlock.ElseBranch !== null) {
                CloseBlock();
                CloseStatement(false);
              };
            } else if (pas.PasTree.TPasImplCaseStatement.isPrototypeOf(CurBlock)) {
              Self.UngetToken();
              CloseStatement(false);
              break;
            } else if (pas.PasTree.TPasImplWhileDo.isPrototypeOf(CurBlock)) {
              CloseBlock();
              Self.UngetToken();
            } else if (pas.PasTree.TPasImplForLoop.isPrototypeOf(CurBlock)) {
              CloseBlock();
              Self.UngetToken();
            } else if (pas.PasTree.TPasImplWithDo.isPrototypeOf(CurBlock)) {
              CloseBlock();
              Self.UngetToken();
            } else if (pas.PasTree.TPasImplRaise.isPrototypeOf(CurBlock)) {
              CloseBlock();
              Self.UngetToken();
            } else if (pas.PasTree.TPasImplAsmStatement.isPrototypeOf(CurBlock)) {
              CloseBlock();
              Self.UngetToken();
            } else if (pas.PasTree.TPasImplTryExcept.isPrototypeOf(CurBlock)) {
              CloseBlock();
              El = Self.CreateElement$1(pas.PasTree.TPasImplTryExceptElse,"",CurBlock,Self.CurTokenPos());
              CurBlock.ElseBranch = El;
              CurBlock = El;
              El = null;
            } else Self.ParseExcSyntaxError()}
           else if ($tmp1 === pas.PScanner.TToken.tkwhile) {
            CheckSemicolon();
            SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
            Self.NextToken();
            Left = Self.DoParseExpression(CurBlock,null,true);
            Self.UngetToken();
            El = Self.CreateElement$1(pas.PasTree.TPasImplWhileDo,"",CurBlock,SrcPos);
            El.ConditionExpr = Left;
            Left = null;
            CreateBlock(El);
            El = null;
            Self.ExpectToken(pas.PScanner.TToken.tkdo);
          } else if ($tmp1 === pas.PScanner.TToken.tkgoto) {
            CheckSemicolon();
            Self.NextToken();
            CurBlock.AddCommand("goto " + Self.FCurTokenString);
          } else if ($tmp1 === pas.PScanner.TToken.tkfor) {
            CheckSemicolon();
            El = Self.CreateElement$1(pas.PasTree.TPasImplForLoop,"",CurBlock,Self.CurTokenPos());
            Self.ExpectIdentifier();
            Expr = Self.CreatePrimitiveExpr(El,pas.PasTree.TPasExprKind.pekIdent,Self.FCurTokenString);
            El.VariableName = Expr;
            do {
              Self.NextToken();
              var $tmp2 = Self.FCurToken;
              if ($tmp2 === pas.PScanner.TToken.tkAssign) {
                lt = pas.PasTree.TLoopType.ltNormal;
                break;
              } else if ($tmp2 === pas.PScanner.TToken.tkin) {
                lt = pas.PasTree.TLoopType.ltIn;
                break;
              } else if ($tmp2 === pas.PScanner.TToken.tkDot) {
                SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
                Self.ExpectIdentifier();
                Self.AddToBinaryExprChain({get: function () {
                    return Expr;
                  }, set: function (v) {
                    Expr = v;
                  }},Self.CreatePrimitiveExpr(El,pas.PasTree.TPasExprKind.pekIdent,Self.FCurTokenString),pas.PasTree.TExprOpCode.eopSubIdent,SrcPos);
                El.VariableName = Expr;
              } else {
                Self.ParseExc(2013,rtl.getResStr(pas.PParser,"SParserExpectedAssignIn"));
              };
            } while (!false);
            Self.NextToken();
            El.StartExpr = Self.DoParseExpression(El,null,true);
            if (lt === pas.PasTree.TLoopType.ltNormal) {
              if (!(Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkto,pas.PScanner.TToken.tkdownto))) Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkto]);
              if (Self.FCurToken === pas.PScanner.TToken.tkdownto) lt = pas.PasTree.TLoopType.ltDown;
              Self.NextToken();
              El.EndExpr = Self.DoParseExpression(El,null,true);
            };
            El.LoopType = lt;
            if (Self.FCurToken !== pas.PScanner.TToken.tkdo) Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkdo]);
            CreateBlock(El);
            El = null;
          } else if ($tmp1 === pas.PScanner.TToken.tkwith) {
            CheckSemicolon();
            SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
            Self.NextToken();
            Left = Self.DoParseExpression(CurBlock,null,true);
            El = Self.CreateElement$1(pas.PasTree.TPasImplWithDo,"",CurBlock,SrcPos);
            El.AddExpression(Left);
            Left.SetParent(El);
            Left = null;
            CreateBlock(El);
            El = null;
            do {
              if (Self.FCurToken === pas.PScanner.TToken.tkdo) break;
              if (Self.FCurToken !== pas.PScanner.TToken.tkComma) Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkdo]);
              Self.NextToken();
              Left = Self.DoParseExpression(CurBlock,null,true);
              CurBlock.AddExpression(Left);
              Left = null;
            } while (!false);
          } else if ($tmp1 === pas.PScanner.TToken.tkcase) {
            CheckSemicolon();
            SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
            Self.NextToken();
            Left = Self.DoParseExpression(CurBlock,null,true);
            Self.UngetToken();
            Self.ExpectToken(pas.PScanner.TToken.tkof);
            El = Self.CreateElement$1(pas.PasTree.TPasImplCaseOf,"",CurBlock,SrcPos);
            El.CaseExpr = Left;
            Left.SetParent(El);
            Left = null;
            CreateBlock(El);
            El = null;
            do {
              Self.NextToken();
              var $tmp3 = Self.FCurToken;
              if ($tmp3 === pas.PScanner.TToken.tkend) {
                if (CurBlock.Elements.FCount === 0) Self.ParseExc(2028,rtl.getResStr(pas.PParser,"SParserExpectCase"));
                break;
              } else if ($tmp3 === pas.PScanner.TToken.tkelse) {
                El = Self.CreateElement$1(pas.PasTree.TPasImplCaseElse,"",CurBlock,Self.CurTokenPos());
                CurBlock.ElseBranch = El;
                CreateBlock(El);
                El = null;
                break;
              } else {
                if ((Self.FCurToken === pas.PScanner.TToken.tkIdentifier) && (pas.SysUtils.LowerCase(Self.FCurTokenString) === "otherwise")) {
                  El = Self.CreateElement$1(pas.PasTree.TPasImplCaseElse,"",CurBlock,Self.CurTokenPos());
                  CurBlock.ElseBranch = El;
                  CreateBlock(El);
                  El = null;
                  break;
                } else do {
                  SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
                  Left = Self.DoParseExpression(CurBlock,null,true);
                  if (pas.PasTree.TPasImplCaseStatement.isPrototypeOf(CurBlock)) {
                    CurBlock.Expressions.Add(Left);
                    Left = null;
                  } else {
                    El = Self.CreateElement$1(pas.PasTree.TPasImplCaseStatement,"",CurBlock,SrcPos);
                    El.AddExpression(Left);
                    Left = null;
                    CreateBlock(El);
                    El = null;
                  };
                  if (Self.FCurToken === pas.PScanner.TToken.tkComma) {
                    Self.NextToken()}
                   else if (Self.FCurToken !== pas.PScanner.TToken.tkColon) Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkComma]);
                } while (!(Self.FCurToken === pas.PScanner.TToken.tkColon));
                Self.ParseStatement(CurBlock,{get: function () {
                    return SubBlock;
                  }, set: function (v) {
                    SubBlock = v;
                  }});
                CloseBlock();
                if (Self.FCurToken !== pas.PScanner.TToken.tkSemicolon) {
                  Self.NextToken();
                  if (!(Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkSemicolon,pas.PScanner.TToken.tkelse,pas.PScanner.TToken.tkend))) Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkSemicolon]);
                  if (Self.FCurToken !== pas.PScanner.TToken.tkSemicolon) Self.UngetToken();
                };
              };
            } while (!false);
            if (Self.FCurToken === pas.PScanner.TToken.tkend) {
              if (CloseBlock()) break;
              if (CloseStatement(false)) break;
            };
          } else if ($tmp1 === pas.PScanner.TToken.tktry) {
            CheckSemicolon();
            El = Self.CreateElement$1(pas.PasTree.TPasImplTry,"",CurBlock,Self.CurTokenPos());
            CreateBlock(El);
            El = null;
          } else if ($tmp1 === pas.PScanner.TToken.tkfinally) {
            if (CloseStatement(true)) {
              Self.UngetToken();
              break;
            };
            if (pas.PasTree.TPasImplTry.isPrototypeOf(CurBlock)) {
              El = Self.CreateElement$1(pas.PasTree.TPasImplTryFinally,"",CurBlock,Self.CurTokenPos());
              CurBlock.FinallyExcept = El;
              CurBlock = El;
              El = null;
            } else Self.ParseExcSyntaxError();
          } else if ($tmp1 === pas.PScanner.TToken.tkexcept) {
            if (CloseStatement(true)) {
              Self.UngetToken();
              break;
            };
            if (pas.PasTree.TPasImplTry.isPrototypeOf(CurBlock)) {
              El = Self.CreateElement$1(pas.PasTree.TPasImplTryExcept,"",CurBlock,Self.CurTokenPos());
              CurBlock.FinallyExcept = El;
              CurBlock = El;
              El = null;
            } else Self.ParseExcSyntaxError();
          } else if ($tmp1 === pas.PScanner.TToken.tkraise) {
            CheckSemicolon();
            ImplRaise = Self.CreateElement$1(pas.PasTree.TPasImplRaise,"",CurBlock,Self.CurTokenPos());
            CreateBlock(ImplRaise);
            Self.NextToken();
            if (Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkelse,pas.PScanner.TToken.tkend,pas.PScanner.TToken.tkSemicolon)) {
              Self.UngetToken()}
             else {
              ImplRaise.ExceptObject = Self.DoParseExpression(ImplRaise,null,true);
              if ((Self.FCurToken === pas.PScanner.TToken.tkIdentifier) && (pas.SysUtils.UpperCase(Self.FCurTokenString) === "AT")) {
                Self.NextToken();
                ImplRaise.ExceptAddr = Self.DoParseExpression(ImplRaise,null,true);
              };
              if (Self.FCurToken in rtl.createSet(pas.PScanner.TToken.tkelse,pas.PScanner.TToken.tkend,pas.PScanner.TToken.tkSemicolon)) Self.UngetToken();
            };
          } else if ($tmp1 === pas.PScanner.TToken.tkend) {
            if (CloseStatement(true)) {
              Self.UngetToken();
              break;
            };
            if (pas.PasTree.TPasImplBeginBlock.isPrototypeOf(CurBlock)) {
              if (CloseBlock()) break;
              if (CloseStatement(false)) break;
            } else if (pas.PasTree.TPasImplCaseElse.isPrototypeOf(CurBlock)) {
              if (CloseBlock()) break;
              if (CloseBlock()) break;
              if (CloseStatement(false)) break;
            } else if (pas.PasTree.TPasImplTryHandler.isPrototypeOf(CurBlock)) {
              if (CloseBlock()) break;
              if (CloseBlock()) break;
              if (CloseStatement(false)) break;
            } else Self.ParseExcSyntaxError();
          } else if ($tmp1 === pas.PScanner.TToken.tkSemicolon) {
            if (CloseStatement(true)) break}
           else if ($tmp1 === pas.PScanner.TToken.tkfinalization) {
            if (CloseStatement(true)) {
              Self.UngetToken();
              break;
            }}
           else if ($tmp1 === pas.PScanner.TToken.tkuntil) {
            if (CloseStatement(true)) {
              Self.UngetToken();
              break;
            };
            if (pas.PasTree.TPasImplRepeatUntil.isPrototypeOf(CurBlock)) {
              Self.NextToken();
              Left = Self.DoParseExpression(CurBlock,null,true);
              Self.UngetToken();
              CurBlock.ConditionExpr = Left;
              Left = null;
              if (CloseBlock()) break;
            } else Self.ParseExcSyntaxError();
          } else if ($tmp1 === pas.PScanner.TToken.tkEOF) {
            Self.CheckToken(pas.PScanner.TToken.tkend)}
           else if ((((((((($tmp1 === pas.PScanner.TToken.tkAt) || ($tmp1 === pas.PScanner.TToken.tkAtAt)) || ($tmp1 === pas.PScanner.TToken.tkBraceOpen)) || ($tmp1 === pas.PScanner.TToken.tkIdentifier)) || ($tmp1 === pas.PScanner.TToken.tkNumber)) || ($tmp1 === pas.PScanner.TToken.tkSquaredBraceOpen)) || ($tmp1 === pas.PScanner.TToken.tkMinus)) || ($tmp1 === pas.PScanner.TToken.tkPlus)) || ($tmp1 === pas.PScanner.TToken.tkinherited)) {
            CheckSemicolon();
            if (pas.SysUtils.LowerCase(Self.CurTokenText()) === "on") {
              if (pas.PasTree.TPasImplTryExcept.isPrototypeOf(CurBlock)) {
                SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
                Self.ExpectIdentifier();
                El = Self.CreateElement$1(pas.PasTree.TPasImplExceptOn,"",CurBlock,SrcPos);
                SrcPos = new pas.PScanner.TPasSourcePos(Self.CurSourcePos());
                Name = Self.FCurTokenString;
                Self.NextToken();
                if (Self.FCurToken === pas.PScanner.TToken.tkColon) {
                  Self.NextToken();
                  TypeEl = Self.ParseSimpleType(El,SrcPos,"",false);
                  El.TypeEl = TypeEl;
                  El.VarEl = Self.CreateElement$1(pas.PasTree.TPasVariable,Name,El,SrcPos);
                  El.VarEl.VarType = TypeEl;
                  TypeEl.AddRef();
                } else {
                  Self.UngetToken();
                  El.TypeEl = Self.ParseSimpleType(El,SrcPos,"",false);
                };
                Self.FEngine.FinishScope($mod.TPasScopeType.stExceptOnExpr,El);
                CreateBlock(El);
                El = null;
                Self.ExpectToken(pas.PScanner.TToken.tkdo);
              } else Self.ParseExcSyntaxError();
            } else {
              SrcPos = new pas.PScanner.TPasSourcePos(Self.CurTokenPos());
              Left = Self.DoParseExpression(CurBlock,null,true);
              var $tmp4 = Self.FCurToken;
              if ((((($tmp4 === pas.PScanner.TToken.tkAssign) || ($tmp4 === pas.PScanner.TToken.tkAssignPlus)) || ($tmp4 === pas.PScanner.TToken.tkAssignMinus)) || ($tmp4 === pas.PScanner.TToken.tkAssignMul)) || ($tmp4 === pas.PScanner.TToken.tkAssignDivision)) {
                El = Self.CreateElement$1(pas.PasTree.TPasImplAssign,"",CurBlock,SrcPos);
                El.left = Left;
                Left.SetParent(El);
                Left = null;
                El.Kind = $mod.TokenToAssignKind(Self.FCurToken);
                Self.NextToken();
                Right = Self.DoParseExpression(CurBlock,null,true);
                El.right = Right;
                Right.SetParent(El);
                Right = null;
                AddStatement(El);
                El = null;
              } else if ($tmp4 === pas.PScanner.TToken.tkColon) {
                if (!pas.PasTree.TPrimitiveExpr.isPrototypeOf(Left)) Self.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkSemicolon]);
                El = Self.CreateElement$1(pas.PasTree.TPasImplLabelMark,"",CurBlock,SrcPos);
                El.LabelId = Left.Value;
                pas.PasTree.ReleaseAndNil({get: function () {
                    return Left;
                  }, set: function (v) {
                    Left = v;
                  }});
                CurBlock.AddElement(El);
                CmdElem = El;
                El = null;
              } else {
                El = Self.CreateElement$1(pas.PasTree.TPasImplSimple,"",CurBlock,SrcPos);
                El.Expr = Left;
                Left = null;
                AddStatement(El);
                El = null;
              };
              if (!pas.PasTree.TPasImplLabelMark.isPrototypeOf(CmdElem)) if (NewImplElement.get() === null) NewImplElement.set(CmdElem);
            };
          } else {
            Self.ParseExcSyntaxError();
          };
        };
      } finally {
        if (El !== null) El.Release();
        if (Left !== null) Left.Release();
      };
    };
    this.ParseLabels = function (AParent) {
      var Labels = null;
      Labels = this.CreateElement(pas.PasTree.TPasLabels,"",AParent);
      do {
        Labels.Labels.Add(this.ExpectIdentifier());
        this.NextToken();
        if (!(this.FCurToken in rtl.createSet(pas.PScanner.TToken.tkSemicolon,pas.PScanner.TToken.tkComma))) this.ParseExcTokenError(pas.PScanner.TokenInfos[pas.PScanner.TToken.tkSemicolon]);
      } while (!(this.FCurToken === pas.PScanner.TToken.tkSemicolon));
    };
    this.ParseProcBeginBlock = function (Parent) {
      var BeginBlock = null;
      var SubBlock = null;
      BeginBlock = this.CreateElement(pas.PasTree.TPasImplBeginBlock,"",Parent);
      Parent.Body = BeginBlock;
      do {
        this.NextToken();
        if (this.FCurToken === pas.PScanner.TToken.tkend) {
          break}
         else if (this.FCurToken !== pas.PScanner.TToken.tkSemicolon) {
          this.UngetToken();
          this.ParseStatement(BeginBlock,{get: function () {
              return SubBlock;
            }, set: function (v) {
              SubBlock = v;
            }});
          if (SubBlock === null) this.ExpectToken(pas.PScanner.TToken.tkend);
        };
      } while (!false);
      this.ExpectToken(pas.PScanner.TToken.tkSemicolon);
    };
    this.ParseProcAsmBlock = function (Parent) {
      var AsmBlock = null;
      AsmBlock = this.CreateElement(pas.PasTree.TPasImplAsmStatement,"",Parent);
      Parent.Body = AsmBlock;
      this.ParseAsmBlock(AsmBlock);
      this.ExpectToken(pas.PScanner.TToken.tkSemicolon);
    };
    this.ParseProcedureOrFunctionDecl = function (Parent, ProcType, AVisibility) {
      var Self = this;
      var Result = null;
      function ExpectProcName() {
        var Result = "";
        var L = null;
        var I = 0;
        Result = Self.ExpectIdentifier();
        if (pas.PasTree.TImplementationSection.isPrototypeOf(Parent)) {
          Self.NextToken();
          do {
            if (Self.FCurToken === pas.PScanner.TToken.tkDot) {
              Result = (Result + ".") + Self.ExpectIdentifier()}
             else if (Self.FCurToken === pas.PScanner.TToken.tkLessThan) {
              Self.UngetToken();
              L = pas.Classes.TFPList.$create("Create");
              try {
                Self.ReadGenericArguments(L,Parent);
              } finally {
                for (var $l1 = 0, $end2 = L.FCount - 1; $l1 <= $end2; $l1++) {
                  I = $l1;
                  rtl.getObject(L.Get(I)).Release();
                };
                L = rtl.freeLoc(L);
              };
            } else break;
            Self.NextToken();
          } while (!false);
          Self.UngetToken();
        };
        return Result;
      };
      var Name = "";
      var PC = null;
      var Ot = 0;
      var IsTokenBased = false;
      var ok = false;
      if (!(ProcType in rtl.createSet(pas.PasTree.TProcType.ptOperator,pas.PasTree.TProcType.ptClassOperator))) {
        Name = ExpectProcName()}
       else {
        Self.NextToken();
        IsTokenBased = Self.FCurToken !== pas.PScanner.TToken.tkIdentifier;
        if (IsTokenBased) {
          Ot = pas.PasTree.TPasOperator.TokenToOperatorType(Self.CurTokenText())}
         else Ot = pas.PasTree.TPasOperator.NameToOperatorType(Self.FCurTokenString);
        if (Ot === pas.PasTree.TOperatorType.otUnknown) Self.ParseExc$1(2015,rtl.getResStr(pas.PParser,"SErrUnknownOperatorType"),[Self.FCurTokenString]);
        Name = pas.PasTree.OperatorNames[Ot];
      };
      PC = Self.GetProcedureClass(ProcType);
      Parent = Self.CheckIfOverloaded(Parent,Name);
      Result = Self.CreateElement$2(PC,Name,Parent,AVisibility);
      ok = false;
      try {
        if (!(ProcType in rtl.createSet(pas.PasTree.TProcType.ptFunction,pas.PasTree.TProcType.ptClassFunction,pas.PasTree.TProcType.ptOperator,pas.PasTree.TProcType.ptClassOperator))) {
          Result.ProcType = Self.CreateElement(pas.PasTree.TPasProcedureType,"",Result)}
         else {
          Result.ProcType = Self.CreateFunctionType("","Result",Result,false,Self.CurTokenPos());
          if (ProcType in rtl.createSet(pas.PasTree.TProcType.ptOperator,pas.PasTree.TProcType.ptClassOperator)) {
            Result.FTokenBased = IsTokenBased;
            Result.FOperatorType = Ot;
            Result.CorrectName();
          };
        };
        Self.ParseProcedureOrFunctionHeader(Result,Result.ProcType,ProcType,false);
        Result.FHints = rtl.refSet(Result.ProcType.FHints);
        Result.FHintMessage = Result.ProcType.FHintMessage;
        if (ProcType in rtl.createSet(pas.PasTree.TProcType.ptOperator,pas.PasTree.TProcType.ptClassOperator)) {
          if (Result.FOperatorType in rtl.createSet(pas.PasTree.TOperatorType.otPositive,pas.PasTree.TOperatorType.otNegative)) {
            if (Result.ProcType.Args.FCount > 1) {
              var $tmp1 = Result.FOperatorType;
              if ($tmp1 === pas.PasTree.TOperatorType.otPositive) {
                Result.FOperatorType = pas.PasTree.TOperatorType.otPlus}
               else if ($tmp1 === pas.PasTree.TOperatorType.otNegative) Result.FOperatorType = pas.PasTree.TOperatorType.otMinus;
              Result.FName = pas.PasTree.OperatorNames[Result.FOperatorType];
              Result.CorrectName();
            };
          };
        };
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
    this.ParseArgList = function (Parent, Args, EndToken) {
      var IsUntyped = false;
      var ok = false;
      var LastHadDefaultValue = false;
      var Name = "";
      var Value = null;
      var i = 0;
      var OldArgCount = 0;
      var Arg = null;
      var Access = 0;
      var ArgType = null;
      LastHadDefaultValue = false;
      while (true) {
        OldArgCount = Args.FCount;
        Access = pas.PasTree.TArgumentAccess.argDefault;
        IsUntyped = false;
        ArgType = null;
        this.NextToken();
        if (this.FCurToken === pas.PScanner.TToken.tkconst) {
          Access = pas.PasTree.TArgumentAccess.argConst;
          Name = this.ExpectIdentifier();
        } else if (this.FCurToken === pas.PScanner.TToken.tkconstref) {
          Access = pas.PasTree.TArgumentAccess.argConstRef;
          Name = this.ExpectIdentifier();
        } else if (this.FCurToken === pas.PScanner.TToken.tkvar) {
          Access = pas.PasTree.TArgumentAccess.argVar;
          Name = this.ExpectIdentifier();
        } else if ((this.FCurToken === pas.PScanner.TToken.tkIdentifier) && (pas.SysUtils.UpperCase(this.FCurTokenString) === "OUT")) {
          Access = pas.PasTree.TArgumentAccess.argOut;
          Name = this.ExpectIdentifier();
        } else if (this.FCurToken === pas.PScanner.TToken.tkIdentifier) {
          Name = this.FCurTokenString}
         else this.ParseExc(2019,rtl.getResStr(pas.PParser,"SParserExpectedConstVarID"));
        while (true) {
          Arg = this.CreateElement(pas.PasTree.TPasArgument,Name,Parent);
          Arg.Access = Access;
          Args.Add(Arg);
          this.NextToken();
          if (this.FCurToken === pas.PScanner.TToken.tkColon) {
            break}
           else if (((this.FCurToken === pas.PScanner.TToken.tkSemicolon) || (this.FCurToken === pas.PScanner.TToken.tkBraceClose)) && (Access !== pas.PasTree.TArgumentAccess.argDefault)) {
            this.UngetToken();
            IsUntyped = true;
            break;
          } else if (this.FCurToken !== pas.PScanner.TToken.tkComma) this.ParseExc(2014,rtl.getResStr(pas.PParser,"SParserExpectedCommaColon"));
          this.NextToken();
          if (this.FCurToken === pas.PScanner.TToken.tkIdentifier) {
            Name = this.FCurTokenString}
           else this.ParseExc(2019,rtl.getResStr(pas.PParser,"SParserExpectedConstVarID"));
        };
        Value = null;
        if (!IsUntyped) {
          Arg = rtl.getObject(Args.Get(OldArgCount));
          ArgType = this.ParseType(Arg,this.CurSourcePos(),"",false,null);
          ok = false;
          try {
            this.NextToken();
            if (this.FCurToken === pas.PScanner.TToken.tkEqual) {
              if (Args.FCount > (OldArgCount + 1)) {
                ArgType.Release();
                ArgType = null;
                this.ParseExc(2016,rtl.getResStr(pas.PParser,"SParserOnlyOneArgumentCanHaveDefault"));
              };
              if (pas.PasTree.TPasProperty.isPrototypeOf(Parent)) this.ParseExc(2050,rtl.getResStr(pas.PParser,"SParserPropertyArgumentsCanNotHaveDefaultValues"));
              this.NextToken();
              Value = this.DoParseExpression(Arg,null,true);
              LastHadDefaultValue = true;
            } else if (LastHadDefaultValue) this.ParseExc$1(2047,rtl.getResStr(pas.PParser,"SParserDefaultParameterRequiredFor"),[rtl.getObject(Args.Get(OldArgCount)).FName]);
            this.UngetToken();
            ok = true;
          } finally {
            if (!ok && (ArgType !== null)) ArgType.Release();
          };
        };
        for (var $l1 = OldArgCount, $end2 = Args.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Arg = rtl.getObject(Args.Get(i));
          Arg.ArgType = ArgType;
          if (ArgType != null) {
            if (i > OldArgCount) ArgType.AddRef();
          };
          Arg.ValueExpr = Value;
          Value = null;
        };
        for (var $l3 = OldArgCount, $end4 = Args.FCount - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          this.FEngine.FinishScope($mod.TPasScopeType.stDeclaration,rtl.getObject(Args.Get(i)));
        };
        this.NextToken();
        if ((this.FCurToken === pas.PScanner.TToken.tkIdentifier) && (pas.SysUtils.LowerCase(this.FCurTokenString) === "location")) {
          this.NextToken();
          this.NextToken();
        };
        if (this.FCurToken === EndToken) break;
        this.CheckToken(pas.PScanner.TToken.tkSemicolon);
      };
    };
    this.ParseProcedureOrFunctionHeader = function (Parent, Element, ProcType, OfObjectPossible) {
      var Self = this;
      function FindInSection(AName, ASection) {
        var Result = false;
        var I = 0;
        var Cn = "";
        var FN = "";
        var CT = null;
        I = ASection.Functions.FCount - 1;
        while ((I >= 0) && (pas.SysUtils.CompareText(rtl.getObject(ASection.Functions.Get(I)).FName,AName) !== 0)) I -= 1;
        Result = I !== -1;
        I = pas.System.Pos(".",AName);
        if (!Result && (I > 0)) {
          Cn = pas.System.Copy(AName,1,I - 1);
          FN = AName;
          pas.System.Delete({get: function () {
              return FN;
            }, set: function (v) {
              FN = v;
            }},1,I);
          I = ASection.Classes$1.FCount - 1;
          while (!Result && (I >= 0)) {
            CT = rtl.getObject(ASection.Classes$1.Get(I));
            if (pas.SysUtils.CompareText(CT.FName,Cn) === 0) Result = CT.FindMember(pas.PasTree.TPasFunction,FN) !== null;
            I -= 1;
          };
        };
        return Result;
      };
      function ConsumeSemi() {
        Self.NextToken();
        if ((Self.FCurToken !== pas.PScanner.TToken.tkSemicolon) && Self.IsCurTokenHint$1()) Self.UngetToken();
      };
      var Tok = "";
      var CC = 0;
      var PM = 0;
      var Done = false;
      var ResultEl = null;
      var OK = false;
      var IsProc = false;
      var PTM = 0;
      var ModCount = 0;
      var LastToken = 0;
      Self.CheckProcedureArgs(Element,Element.Args,ProcType in rtl.createSet(pas.PasTree.TProcType.ptOperator,pas.PasTree.TProcType.ptClassOperator));
      IsProc = pas.PasTree.TPasProcedure.isPrototypeOf(Parent);
      var $tmp1 = ProcType;
      if (($tmp1 === pas.PasTree.TProcType.ptFunction) || ($tmp1 === pas.PasTree.TProcType.ptClassFunction)) {
        Self.NextToken();
        if (Self.FCurToken === pas.PScanner.TToken.tkColon) {
          ResultEl = Element.ResultEl;
          ResultEl.ResultType = Self.ParseType(ResultEl,Self.CurSourcePos(),"",false,null);
        } else if ((pas.PScanner.TModeSwitch.msDelphi in Self.GetCurrentModeSwitches()) && ((Self.FCurModule.ImplementationSection != null) || pas.PasTree.TPasProgram.isPrototypeOf(Self.FCurModule))) {
          if (Self.FCurModule.InterfaceSection != null) {
            OK = FindInSection(Parent.FName,Self.FCurModule.InterfaceSection)}
           else if (pas.PasTree.TPasProgram.isPrototypeOf(Self.FCurModule) && (Self.FCurModule.ProgramSection != null)) OK = FindInSection(Parent.FName,Self.FCurModule.ProgramSection);
          if (!OK) {
            Self.CheckToken(pas.PScanner.TToken.tkColon)}
           else {
            Self.CheckToken(pas.PScanner.TToken.tkSemicolon);
            Self.UngetToken();
          };
        } else {
          Self.CheckToken(pas.PScanner.TToken.tkColon);
        };
      } else if (($tmp1 === pas.PasTree.TProcType.ptOperator) || ($tmp1 === pas.PasTree.TProcType.ptClassOperator)) {
        Self.NextToken();
        ResultEl = Element.ResultEl;
        if (Self.FCurToken === pas.PScanner.TToken.tkIdentifier) {
          ResultEl.FName = Self.CurTokenName();
          Self.ExpectToken(pas.PScanner.TToken.tkColon);
        } else if (Self.FCurToken === pas.PScanner.TToken.tkColon) {
          ResultEl.FName = "Result"}
         else Self.ParseExc(2021,rtl.getResStr(pas.PParser,"SParserExpectedColonID"));
        ResultEl.ResultType = Self.ParseType(ResultEl,Self.CurSourcePos(),"",false,null);
      };
      if (OfObjectPossible) {
        Self.NextToken();
        if (Self.FCurToken === pas.PScanner.TToken.tkof) {
          Self.ExpectToken(pas.PScanner.TToken.tkobject);
          Element.SetIsOfObject(true);
        } else if (Self.FCurToken === pas.PScanner.TToken.tkis) {
          Self.ExpectToken(pas.PScanner.TToken.tkIdentifier);
          if (pas.SysUtils.LowerCase(Self.FCurTokenString) !== "nested") Self.ParseExc(2020,rtl.getResStr(pas.PParser,"SParserExpectedNested"));
          Element.SetIsNested(true);
        } else Self.UngetToken();
      };
      ModCount = 0;
      do {
        ModCount += 1;
        LastToken = Self.FCurToken;
        Self.NextToken();
        if (((ModCount <= 3) && (Self.FCurToken === pas.PScanner.TToken.tkEqual)) && !pas.PasTree.TPasProcedure.isPrototypeOf(Parent)) {
          Self.UngetToken();
          Self.FEngine.FinishScope($mod.TPasScopeType.stProcedureHeader,Element);
          return;
        };
        if (Self.FCurToken === pas.PScanner.TToken.tkSemicolon) {
          if (LastToken === pas.PScanner.TToken.tkSemicolon) Self.ParseExcSyntaxError();
        } else if (Self.TokenIsCallingConvention(Self.FCurTokenString,{get: function () {
            return CC;
          }, set: function (v) {
            CC = v;
          }})) {
          Element.CallingConvention = CC;
          if (CC === pas.PasTree.TCallingConvention.ccSysCall) {
            Self.NextToken();
            if (Self.FCurToken === pas.PScanner.TToken.tkSemicolon) {
              Self.UngetToken()}
             else {
              if (Self.CurTokenIsIdentifier("legacy") || Self.CurTokenIsIdentifier("BaseSysV")) Self.NextToken();
              Self.NextToken();
            };
          };
          Self.ExpectTokens(rtl.createSet(pas.PScanner.TToken.tkSemicolon,pas.PScanner.TToken.tkEqual));
          if (Self.FCurToken === pas.PScanner.TToken.tkEqual) Self.UngetToken();
        } else if (IsProc && Self.TokenIsProcedureModifier(Parent,Self.FCurTokenString,{get: function () {
            return PM;
          }, set: function (v) {
            PM = v;
          }})) {
          Self.HandleProcedureModifier(Parent,PM)}
         else if (Self.TokenIsProcedureTypeModifier(Parent,Self.FCurTokenString,{get: function () {
            return PTM;
          }, set: function (v) {
            PTM = v;
          }})) {
          Self.HandleProcedureTypeModifier(Element,PTM)}
         else if (Self.FCurToken === pas.PScanner.TToken.tklibrary) {
          Tok = pas.SysUtils.UpperCase(Self.FCurTokenString);
          Self.NextToken();
          if (Tok !== "NAME") {
            Element.FHints = rtl.unionSet(Element.FHints,rtl.createSet(pas.PasTree.TPasMemberHint.hLibrary))}
           else {
            Self.NextToken();
            Self.ExpectToken(pas.PScanner.TToken.tkSemicolon);
          };
        } else if (Self.DoCheckHint(Element)) {
          ConsumeSemi()}
         else if ((Self.FCurToken === pas.PScanner.TToken.tkIdentifier) && (pas.SysUtils.CompareText(Self.CurTokenText(),"alias") === 0)) {
          Self.ExpectToken(pas.PScanner.TToken.tkColon);
          Self.ExpectToken(pas.PScanner.TToken.tkString);
          if (pas.PasTree.TPasProcedure.isPrototypeOf(Parent)) rtl.as(Parent,pas.PasTree.TPasProcedure).AliasName = Self.CurTokenText();
          Self.ExpectToken(pas.PScanner.TToken.tkSemicolon);
        } else if (Self.FCurToken === pas.PScanner.TToken.tkSquaredBraceOpen) {
          if (rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PScanner.TModeSwitch.msPrefixedAttributes,pas.PScanner.TModeSwitch.msIgnoreAttributes),Self.GetCurrentModeSwitches()),{})) {
            Self.UngetToken();
            break;
          } else {
            do {
              Self.NextToken();
            } while (!(Self.FCurToken === pas.PScanner.TToken.tkSquaredBraceClose));
            Self.ExpectToken(pas.PScanner.TToken.tkSemicolon);
          };
        } else Self.CheckToken(pas.PScanner.TToken.tkSemicolon);
        Done = Self.FCurToken === pas.PScanner.TToken.tkSemicolon;
        if (Done) {
          Self.NextToken();
          Done = !((((((Self.FCurToken === pas.PScanner.TToken.tkSquaredBraceOpen) || Self.TokenIsProcedureModifier(Parent,Self.FCurTokenString,{get: function () {
              return PM;
            }, set: function (v) {
              PM = v;
            }})) || Self.TokenIsProcedureTypeModifier(Parent,Self.FCurTokenString,{get: function () {
              return PTM;
            }, set: function (v) {
              PTM = v;
            }})) || Self.IsCurTokenHint$1()) || Self.TokenIsCallingConvention(Self.FCurTokenString,{get: function () {
              return CC;
            }, set: function (v) {
              CC = v;
            }})) || ((Self.FCurToken === pas.PScanner.TToken.tkIdentifier) && (pas.SysUtils.CompareText(Self.CurTokenText(),"alias") === 0)));
          Self.UngetToken();
        };
      } while (!Done);
      if (Self.DoCheckHint(Element)) ConsumeSemi();
      if ((ProcType in rtl.createSet(pas.PasTree.TProcType.ptOperator,pas.PasTree.TProcType.ptClassOperator)) && pas.PasTree.TPasOperator.isPrototypeOf(Parent)) Parent.CorrectName();
      Self.FEngine.FinishScope($mod.TPasScopeType.stProcedureHeader,Element);
      if (((pas.PasTree.TPasProcedure.isPrototypeOf(Parent) && !Parent.IsForward()) && !Parent.IsExternal()) && (pas.PasTree.TImplementationSection.isPrototypeOf(Parent.FParent) || pas.PasTree.TProcedureBody.isPrototypeOf(Parent.FParent))) Self.ParseProcedureBody(Parent);
      if (pas.PasTree.TPasProcedure.isPrototypeOf(Parent)) Self.FEngine.FinishScope($mod.TPasScopeType.stProcedure,Parent);
    };
    this.ParseProcedureBody = function (Parent) {
      var Body = null;
      Body = this.CreateElement(pas.PasTree.TProcedureBody,"",Parent);
      Parent.Body = Body;
      this.ParseDeclarations(Body);
    };
    this.ParseMethodResolution = function (Parent) {
      var Result = null;
      var ok = false;
      ok = false;
      Result = this.CreateElement(pas.PasTree.TPasMethodResolution,"",Parent);
      try {
        if (this.FCurToken === pas.PScanner.TToken.tkfunction) {
          Result.ProcClass = pas.PasTree.TPasFunction}
         else Result.ProcClass = pas.PasTree.TPasProcedure;
        this.ExpectToken(pas.PScanner.TToken.tkIdentifier);
        Result.InterfaceName = this.CreatePrimitiveExpr(Result,pas.PasTree.TPasExprKind.pekIdent,this.FCurTokenString);
        this.ExpectToken(pas.PScanner.TToken.tkDot);
        this.ExpectToken(pas.PScanner.TToken.tkIdentifier);
        Result.InterfaceProc = this.CreatePrimitiveExpr(Result,pas.PasTree.TPasExprKind.pekIdent,this.FCurTokenString);
        this.ExpectToken(pas.PScanner.TToken.tkEqual);
        this.ExpectToken(pas.PScanner.TToken.tkIdentifier);
        Result.ImplementationProc = this.CreatePrimitiveExpr(Result,pas.PasTree.TPasExprKind.pekIdent,this.FCurTokenString);
        this.NextToken();
        if (this.FCurToken === pas.PScanner.TToken.tkSemicolon) {}
        else if (this.FCurToken === pas.PScanner.TToken.tkend) {
          this.UngetToken()}
         else this.CheckToken(pas.PScanner.TToken.tkSemicolon);
        ok = true;
      } finally {
        if (!ok) Result.Release();
      };
      return Result;
    };
  });
  this.TParseSourceOption = {"0": "poSkipDefaultDefs", poSkipDefaultDefs: 0};
  $mod.$rtti.$Enum("TParseSourceOption",{minvalue: 0, maxvalue: 0, ordtype: 1, enumtype: this.TParseSourceOption});
  $mod.$rtti.$Set("TParseSourceOptions",{comptype: $mod.$rtti["TParseSourceOption"]});
  this.DefaultFileResolverClass = null;
  this.ParseSource = function (AEngine, FPCCommandLine, OSTarget, CPUTarget) {
    var Result = null;
    Result = $mod.ParseSource$1(AEngine,FPCCommandLine,OSTarget,CPUTarget,{});
    return Result;
  };
  this.ParseSource$1 = function (AEngine, FPCCommandLine, OSTarget, CPUTarget, Options) {
    var Result = null;
    var FileResolver = null;
    var Parser = null;
    var Start = 0;
    var CurPos = 0;
    var Filename = "";
    var Scanner = null;
    function ProcessCmdLinePart() {
      var l = 0;
      var s = "";
      l = CurPos - Start;
      if (l <= 0) return;
      s = pas.System.Copy(FPCCommandLine,Start,l);
      if ((s.charAt(0) === "-") && (s.length > 1)) {
        var $tmp1 = s.charAt(1);
        if ($tmp1 === "d") {
          Scanner.AddDefine(pas.SysUtils.UpperCase(pas.System.Copy(s,3,s.length)),false)}
         else if ($tmp1 === "u") {
          Scanner.RemoveDefine(pas.SysUtils.UpperCase(pas.System.Copy(s,3,s.length)),false)}
         else if ($tmp1 === "F") {
          if ((s.length > 2) && (s.charAt(2) === "i")) FileResolver.AddIncludePath(pas.System.Copy(s,4,s.length))}
         else if ($tmp1 === "I") {
          FileResolver.AddIncludePath(pas.System.Copy(s,3,s.length))}
         else if ($tmp1 === "S") {
          if (s.length > 2) {
            l = 3;
            while (l <= s.length) {
              var $tmp2 = s.charAt(l - 1);
              if ($tmp2 === "c") {
                Scanner.SetOptions(rtl.unionSet(Scanner.FOptions,rtl.createSet(pas.PScanner.TPOption.po_CAssignments)))}
               else if ($tmp2 === "d") {
                Scanner.SetCompilerMode("DELPHI")}
               else if ($tmp2 === "2") {
                Scanner.SetCompilerMode("OBJFPC")}
               else if ($tmp2 === "h") ;
              l += 1;
            };
          }}
         else if ($tmp1 === "M") {
          pas.System.Delete({get: function () {
              return s;
            }, set: function (v) {
              s = v;
            }},1,2);
          Scanner.SetCompilerMode(s);
        };
      } else if (Filename !== "") {
        throw pas.SysUtils.ENotSupportedException.$create("Create$1",[rtl.getResStr(pas.PParser,"SErrMultipleSourceFiles")])}
       else Filename = s;
    };
    var s = "";
    if ($mod.DefaultFileResolverClass === null) throw pas.SysUtils.ENotImplemented.$create("Create$1",[rtl.getResStr(pas.PParser,"SErrFileSystemNotSupported")]);
    Result = null;
    FileResolver = null;
    Scanner = null;
    Parser = null;
    try {
      FileResolver = $mod.DefaultFileResolverClass.$create("Create$1");
      Scanner = pas.PScanner.TPascalScanner.$create("Create$1",[FileResolver]);
      Scanner.FLogEvents = rtl.refSet(AEngine.FScannerLogEvents);
      Scanner.FOnLog = AEngine.FOnLog;
      if (!($mod.TParseSourceOption.poSkipDefaultDefs in Options)) {
        Scanner.AddDefine("FPK",false);
        Scanner.AddDefine("FPC",false);
        s = pas.SysUtils.UpperCase(OSTarget);
        Scanner.AddDefine(s,false);
        if (s === "LINUX") {
          Scanner.AddDefine("UNIX",false)}
         else if (s === "FREEBSD") {
          Scanner.AddDefine("BSD",false);
          Scanner.AddDefine("UNIX",false);
        } else if (s === "NETBSD") {
          Scanner.AddDefine("BSD",false);
          Scanner.AddDefine("UNIX",false);
        } else if (s === "SUNOS") {
          Scanner.AddDefine("SOLARIS",false);
          Scanner.AddDefine("UNIX",false);
        } else if (s === "GO32V2") {
          Scanner.AddDefine("DPMI",false)}
         else if (s === "BEOS") {
          Scanner.AddDefine("UNIX",false)}
         else if (s === "QNX") {
          Scanner.AddDefine("UNIX",false)}
         else if (s === "AROS") {
          Scanner.AddDefine("HASAMIGA",false)}
         else if (s === "MORPHOS") {
          Scanner.AddDefine("HASAMIGA",false)}
         else if (s === "AMIGA") Scanner.AddDefine("HASAMIGA",false);
        s = pas.SysUtils.UpperCase(CPUTarget);
        Scanner.AddDefine("CPU" + s,false);
        if (s === "X86_64") {
          Scanner.AddDefine("CPU64",false)}
         else Scanner.AddDefine("CPU32",false);
      };
      Parser = $mod.TPasParser.$create("Create$1",[Scanner,FileResolver,AEngine]);
      Filename = "";
      Parser.FLogEvents = rtl.refSet(AEngine.FPParserLogEvents);
      Parser.FOnLog = AEngine.FOnLog;
      if (FPCCommandLine !== "") {
        Start = 1;
        CurPos = Start;
        while (CurPos < FPCCommandLine.length) {
          if ((FPCCommandLine.charAt(CurPos - 1) === " ") && (FPCCommandLine.charAt((CurPos + 1) - 1) !== " ")) {
            ProcessCmdLinePart();
            Start = CurPos + 1;
          };
          CurPos += 1;
        };
        ProcessCmdLinePart();
      };
      if (Filename === "") throw pas.SysUtils.Exception.$create("Create$1",[rtl.getResStr(pas.PParser,"SErrNoSourceGiven")]);
      Scanner.OpenFile(Filename);
      Parser.ParseMain({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
    } finally {
      Parser = rtl.freeLoc(Parser);
      Scanner = rtl.freeLoc(Scanner);
      FileResolver = rtl.freeLoc(FileResolver);
    };
    return Result;
  };
  var MemberHintTokens = ["deprecated","library","platform","experimental","unimplemented"];
  this.IsHintToken = function (T, AHint) {
    var Result = false;
    var I = 0;
    T = pas.SysUtils.LowerCase(T);
    Result = false;
    for (I = 0; I <= 4; I++) {
      Result = T === MemberHintTokens[I];
      if (Result) {
        AHint.set(I);
        return Result;
      };
    };
    return Result;
  };
  this.IsProcModifier = function (S, PM) {
    var Result = false;
    var P = 0;
    S = pas.SysUtils.LowerCase(S);
    Result = false;
    for (P = 0; P <= 17; P++) {
      Result = S === pas.PasTree.ModifierNames[P];
      if (Result) {
        PM.set(P);
        return Result;
      };
    };
    return Result;
  };
  this.IsCallingConvention = function (S, CC) {
    var Result = false;
    var CCNames = ["","register","pascal","cdecl","stdcall","oldfpccall","safecall","syscall"];
    var C = 0;
    S = pas.SysUtils.LowerCase(S);
    Result = false;
    for (C = 0; C <= 7; C++) {
      Result = (CCNames[C] !== "") && (S === CCNames[C]);
      if (Result) {
        CC.set(C);
        return Result;
      };
    };
    return Result;
  };
  this.TokenToAssignKind = function (tk) {
    var Result = 0;
    var $tmp1 = tk;
    if ($tmp1 === pas.PScanner.TToken.tkAssign) {
      Result = pas.PasTree.TAssignKind.akDefault}
     else if ($tmp1 === pas.PScanner.TToken.tkAssignPlus) {
      Result = pas.PasTree.TAssignKind.akAdd}
     else if ($tmp1 === pas.PScanner.TToken.tkAssignMinus) {
      Result = pas.PasTree.TAssignKind.akMinus}
     else if ($tmp1 === pas.PScanner.TToken.tkAssignMul) {
      Result = pas.PasTree.TAssignKind.akMul}
     else if ($tmp1 === pas.PScanner.TToken.tkAssignDivision) {
      Result = pas.PasTree.TAssignKind.akDivision}
     else {
      throw pas.SysUtils.Exception.$create("CreateFmt",["Not an assignment token : %s",[pas.PScanner.TokenInfos[tk]]]);
    };
    return Result;
  };
  $mod.$resourcestrings = {SErrNoSourceGiven: {org: "No source file specified"}, SErrMultipleSourceFiles: {org: "Please specify only one source file"}, SParserError: {org: "Error"}, SParserErrorAtToken: {org: '%s at token "%s" in file %s at line %d column %d'}, SParserUngetTokenError: {org: "Internal error: Cannot unget more tokens, history buffer is full"}, SParserExpectTokenError: {org: 'Expected "%s"'}, SParserForwardNotInterface: {org: "The use of a FORWARD procedure modifier is not allowed in the interface"}, SParserExpectVisibility: {org: "Expected visibility specifier"}, SParserStrangeVisibility: {org: 'Strange strict visibility encountered : "%s"'}, SParserExpectToken2Error: {org: 'Expected "%s" or "%s"'}, SParserExpectedCommaRBracket: {org: 'Expected "," or ")"'}, SParserExpectedCommaSemicolon: {org: 'Expected "," or ";"'}, SParserExpectedAssignIn: {org: "Expected := or in"}, SParserExpectedCommaColon: {org: 'Expected "," or ":"'}, SErrUnknownOperatorType: {org: "Unknown operator type: %s"}, SParserOnlyOneArgumentCanHaveDefault: {org: "A default value can only be assigned to 1 parameter"}, SParserExpectedLBracketColon: {org: 'Expected "(" or ":"'}, SParserExpectedSemiColonEnd: {org: 'Expected ";" or "End"'}, SParserExpectedConstVarID: {org: 'Expected "const", "var" or identifier'}, SParserExpectedNested: {org: "Expected nested keyword"}, SParserExpectedColonID: {org: 'Expected ":" or identifier'}, SParserSyntaxError: {org: "Syntax error"}, SParserTypeSyntaxError: {org: "Syntax error in type"}, SParserArrayTypeSyntaxError: {org: "Syntax error in array type"}, SParserExpectedIdentifier: {org: "Identifier expected"}, SParserNotAProcToken: {org: "Not a procedure or function token"}, SRangeExpressionExpected: {org: "Range expression expected"}, SParserExpectCase: {org: "Case label expression expected"}, SParserHelperNotAllowed: {org: 'Helper objects not allowed for "%s"'}, SLogStartImplementation: {org: "Start parsing implementation section."}, SLogStartInterface: {org: "Start parsing interface section"}, SParserNoConstructorAllowed: {org: "Constructors or Destructors are not allowed in Interfaces or Record helpers"}, SParserNoFieldsAllowed: {org: "Fields are not allowed in Interfaces"}, SParserInvalidRecordVisibility: {org: "Records can only have public and (strict) private as visibility specifiers"}, SErrRecordConstantsNotAllowed: {org: "Record constants not allowed at this location."}, SErrRecordVariablesNotAllowed: {org: "Record variables not allowed at this location."}, SErrRecordMethodsNotAllowed: {org: "Record methods not allowed at this location."}, SErrRecordPropertiesNotAllowed: {org: "Record properties not allowed at this location."}, SErrRecordVisibilityNotAllowed: {org: "Record visibilities not allowed at this location."}, SParserTypeNotAllowedHere: {org: 'Type "%s" not allowed here'}, SParserNotAnOperand: {org: "Not an operand: (%d : %s)"}, SParserArrayPropertiesCannotHaveDefaultValue: {org: "Array properties cannot have default value"}, SParserDefaultPropertyMustBeArray: {org: "The default property must be an array property"}, SParserUnknownProcedureType: {org: 'Unknown procedure type "%d"'}, SParserGenericArray1Element: {org: "Generic arrays can have only 1 template element"}, SParserGenericClassOrArray: {org: "Generic can only be used with classes or arrays"}, SParserDuplicateIdentifier: {org: 'Duplicate identifier "%s"'}, SParserDefaultParameterRequiredFor: {org: 'Default parameter required for "%s"'}, SParserOnlyOneVariableCanBeInitialized: {org: "Only one variable can be initialized"}, SParserExpectedTypeButGot: {org: "Expected type, but got %s"}, SParserPropertyArgumentsCanNotHaveDefaultValues: {org: "Property arguments can not have default values"}, SParserExpectedExternalClassName: {org: "Expected external class name"}, SParserNoConstRangeAllowed: {org: "Const ranges are not allowed"}, SParserResourcestringsMustBeGlobal: {org: "Resourcestrings can be only static or global"}, SParserOnlyOneVariableCanBeAbsolute: {org: "Only one variable can be absolute"}, SParserXNotAllowedInY: {org: "%s is not allowed in %s"}, SErrFileSystemNotSupported: {org: "No support for filesystems enabled"}};
  $mod.$init = function () {
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.WhitespaceTokensToIgnore = rtl.createSet(pas.PScanner.TToken.tkWhitespace,pas.PScanner.TToken.tkComment,pas.PScanner.TToken.tkLineEnding,pas.PScanner.TToken.tkTab);
  $impl.TDeclType = {"0": "declNone", declNone: 0, "1": "declConst", declConst: 1, "2": "declResourcestring", declResourcestring: 2, "3": "declType", declType: 3, "4": "declVar", declVar: 4, "5": "declThreadvar", declThreadvar: 5, "6": "declProperty", declProperty: 6, "7": "declExports", declExports: 7};
  var SimpleTypeCount = 15;
  var SimpleTypeNames = ["byte","boolean","char","integer","int64","longint","longword","double","shortint","smallint","string","word","qword","cardinal","widechar"];
  var SimpleTypeCaseNames = ["Byte","Boolean","Char","Integer","Int64","LongInt","LongWord","Double","ShortInt","SmallInt","String","Word","QWord","Cardinal","WideChar"];
  $impl.IsSimpleTypeToken = function (AName) {
    var Result = false;
    var S = "";
    var I = 0;
    S = pas.SysUtils.LowerCase(AName.get());
    I = 15;
    while ((I > 0) && (S !== SimpleTypeNames[I - 1])) I -= 1;
    Result = I > 0;
    if (Result) AName.set(SimpleTypeCaseNames[I - 1]);
    return Result;
  };
  $impl.GetExprIdent = function (p) {
    var Result = "";
    Result = "";
    if (!(p != null)) return Result;
    if ((p.$class.ClassType() === pas.PasTree.TPrimitiveExpr) && (p.Kind === pas.PasTree.TPasExprKind.pekIdent)) {
      Result = p.Value}
     else if (p.$class.ClassType() === pas.PasTree.TSelfExpr) Result = "Self";
    return Result;
  };
  var VNames = ["","private","protected","public","published","automated","",""];
  $impl.IsVisibility = function (S, AVisibility) {
    var Result = false;
    var V = 0;
    Result = false;
    S = pas.SysUtils.LowerCase(S);
    for (V = 0; V <= 7; V++) {
      Result = (VNames[V] !== "") && (S === VNames[V]);
      if (Result) {
        AVisibility.set(V);
        return Result;
      };
    };
    return Result;
  };
});
rtl.module("PasResolver",["System","JS","Classes","SysUtils","Math","Types","contnrs","PasTree","PScanner","PParser","PasResolveEval"],function () {
  "use strict";
  var $mod = this;
  this.ParserMaxEmbeddedColumn = 2048;
  this.ParserMaxEmbeddedRow = Math.floor(0x7fffffff / 2048);
  this.po_Resolver = rtl.createSet(pas.PScanner.TPOption.po_ResolveStandardTypes,pas.PScanner.TPOption.po_NoOverloadedProcs,pas.PScanner.TPOption.po_KeepClassForward,pas.PScanner.TPOption.po_ArrayRangeExpr,pas.PScanner.TPOption.po_CheckModeSwitches,pas.PScanner.TPOption.po_CheckCondFunction);
  this.TResolverBaseType = {"0": "btNone", btNone: 0, "1": "btCustom", btCustom: 1, "2": "btContext", btContext: 2, "3": "btModule", btModule: 3, "4": "btUntyped", btUntyped: 4, "5": "btChar", btChar: 5, "6": "btWideChar", btWideChar: 6, "7": "btString", btString: 7, "8": "btWideString", btWideString: 8, "9": "btUnicodeString", btUnicodeString: 9, "10": "btSingle", btSingle: 10, "11": "btDouble", btDouble: 11, "12": "btExtended", btExtended: 12, "13": "btCExtended", btCExtended: 13, "14": "btCurrency", btCurrency: 14, "15": "btBoolean", btBoolean: 15, "16": "btByteBool", btByteBool: 16, "17": "btWordBool", btWordBool: 17, "18": "btLongBool", btLongBool: 18, "19": "btByte", btByte: 19, "20": "btShortInt", btShortInt: 20, "21": "btWord", btWord: 21, "22": "btSmallInt", btSmallInt: 22, "23": "btUIntSingle", btUIntSingle: 23, "24": "btIntSingle", btIntSingle: 24, "25": "btLongWord", btLongWord: 25, "26": "btLongint", btLongint: 26, "27": "btUIntDouble", btUIntDouble: 27, "28": "btIntDouble", btIntDouble: 28, "29": "btPointer", btPointer: 29, "30": "btNil", btNil: 30, "31": "btProc", btProc: 31, "32": "btBuiltInProc", btBuiltInProc: 32, "33": "btArrayProperty", btArrayProperty: 33, "34": "btSet", btSet: 34, "35": "btArrayLit", btArrayLit: 35, "36": "btArrayOrSet", btArrayOrSet: 36, "37": "btRange", btRange: 37};
  $mod.$rtti.$Enum("TResolverBaseType",{minvalue: 0, maxvalue: 37, ordtype: 1, enumtype: this.TResolverBaseType});
  $mod.$rtti.$Set("TResolveBaseTypes",{comptype: $mod.$rtti["TResolverBaseType"]});
  this.btIntMax = $mod.TResolverBaseType.btIntDouble;
  this.btAllInteger = rtl.createSet($mod.TResolverBaseType.btByte,$mod.TResolverBaseType.btShortInt,$mod.TResolverBaseType.btWord,$mod.TResolverBaseType.btSmallInt,$mod.TResolverBaseType.btIntSingle,$mod.TResolverBaseType.btUIntSingle,$mod.TResolverBaseType.btLongWord,$mod.TResolverBaseType.btLongint,$mod.TResolverBaseType.btIntDouble,$mod.TResolverBaseType.btUIntDouble);
  this.btAllIntegerNoQWord = $mod.btAllInteger;
  this.btAllChars = rtl.createSet($mod.TResolverBaseType.btChar,$mod.TResolverBaseType.btWideChar);
  this.btAllStrings = rtl.createSet($mod.TResolverBaseType.btString,$mod.TResolverBaseType.btWideString,$mod.TResolverBaseType.btUnicodeString);
  this.btAllStringAndChars = rtl.unionSet($mod.btAllStrings,$mod.btAllChars);
  this.btAllStringPointer = rtl.createSet($mod.TResolverBaseType.btString,$mod.TResolverBaseType.btWideString,$mod.TResolverBaseType.btUnicodeString);
  this.btAllFloats = rtl.createSet($mod.TResolverBaseType.btSingle,$mod.TResolverBaseType.btDouble,$mod.TResolverBaseType.btExtended,$mod.TResolverBaseType.btCExtended,$mod.TResolverBaseType.btCurrency);
  this.btAllBooleans = rtl.createSet($mod.TResolverBaseType.btBoolean,$mod.TResolverBaseType.btByteBool,$mod.TResolverBaseType.btWordBool,$mod.TResolverBaseType.btLongBool);
  this.btArrayRangeTypes = rtl.unionSet(rtl.unionSet($mod.btAllChars,$mod.btAllBooleans),$mod.btAllInteger);
  this.btAllRanges = rtl.unionSet($mod.btArrayRangeTypes,rtl.createSet($mod.TResolverBaseType.btRange));
  this.btAllStandardTypes = rtl.createSet($mod.TResolverBaseType.btChar,$mod.TResolverBaseType.btWideChar,$mod.TResolverBaseType.btString,$mod.TResolverBaseType.btWideString,$mod.TResolverBaseType.btUnicodeString,$mod.TResolverBaseType.btSingle,$mod.TResolverBaseType.btDouble,$mod.TResolverBaseType.btExtended,$mod.TResolverBaseType.btCExtended,$mod.TResolverBaseType.btCurrency,$mod.TResolverBaseType.btBoolean,$mod.TResolverBaseType.btByteBool,$mod.TResolverBaseType.btWordBool,$mod.TResolverBaseType.btLongBool,$mod.TResolverBaseType.btByte,$mod.TResolverBaseType.btShortInt,$mod.TResolverBaseType.btWord,$mod.TResolverBaseType.btSmallInt,$mod.TResolverBaseType.btLongWord,$mod.TResolverBaseType.btLongint,$mod.TResolverBaseType.btPointer);
  this.ResBaseTypeNames = ["None","Custom","Context","Module","Untyped","Char","WideChar","String","WideString","UnicodeString","Single","Double","Extended","CExtended","Currency","Boolean","ByteBool","WordBool","LongBool","Byte","ShortInt","Word","SmallInt","UIntSingle","IntSingle","LongWord","Longint","UIntDouble","IntDouble","Pointer","Nil","Procedure\/Function","BuiltInProc","array property","set","array","set or array literal","range.."];
  this.TResolverBuiltInProc = {"0": "bfCustom", bfCustom: 0, "1": "bfLength", bfLength: 1, "2": "bfSetLength", bfSetLength: 2, "3": "bfInclude", bfInclude: 3, "4": "bfExclude", bfExclude: 4, "5": "bfBreak", bfBreak: 5, "6": "bfContinue", bfContinue: 6, "7": "bfExit", bfExit: 7, "8": "bfInc", bfInc: 8, "9": "bfDec", bfDec: 9, "10": "bfAssigned", bfAssigned: 10, "11": "bfChr", bfChr: 11, "12": "bfOrd", bfOrd: 12, "13": "bfLow", bfLow: 13, "14": "bfHigh", bfHigh: 14, "15": "bfPred", bfPred: 15, "16": "bfSucc", bfSucc: 16, "17": "bfStrProc", bfStrProc: 17, "18": "bfStrFunc", bfStrFunc: 18, "19": "bfWriteStr", bfWriteStr: 19, "20": "bfConcatArray", bfConcatArray: 20, "21": "bfCopyArray", bfCopyArray: 21, "22": "bfInsertArray", bfInsertArray: 22, "23": "bfDeleteArray", bfDeleteArray: 23, "24": "bfTypeInfo", bfTypeInfo: 24, "25": "bfAssert", bfAssert: 25, "26": "bfNew", bfNew: 26, "27": "bfDispose", bfDispose: 27, "28": "bfDefault", bfDefault: 28};
  $mod.$rtti.$Enum("TResolverBuiltInProc",{minvalue: 0, maxvalue: 28, ordtype: 1, enumtype: this.TResolverBuiltInProc});
  $mod.$rtti.$Set("TResolverBuiltInProcs",{comptype: $mod.$rtti["TResolverBuiltInProc"]});
  this.ResolverBuiltInProcNames = ["Custom","Length","SetLength","Include","Exclude","Break","Continue","Exit","Inc","Dec","Assigned","Chr","Ord","Low","High","Pred","Succ","Str","Str","WriteStr","Concat","Copy","Insert","Delete","TypeInfo","Assert","New","Dispose","Default"];
  this.bfAllStandardProcs = rtl.createSet(null,$mod.TResolverBuiltInProc.bfCustom + 1,$mod.TResolverBuiltInProc.bfDefault);
  this.ResolverResultVar = "Result";
  $mod.$rtti.$MethodVar("TPasResIterate",{procsig: rtl.newTIProcSig([["Item",rtl.pointer],["Arg",rtl.pointer]]), methodkind: 0});
  rtl.createClass($mod,"TPasResHashList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FItems = null;
    };
    this.$final = function () {
      this.FItems = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      this.FItems = new Object();
    };
    this.Add = function (aName, Item) {
      this.FItems["%" + aName] = Item;
    };
    this.Find = function (aName) {
      var Result = null;
      if (this.FItems.hasOwnProperty("%" + aName)) {
        Result = this.FItems["%" + aName]}
       else Result = null;
      return Result;
    };
    this.ForEachCall = function (Proc, Arg) {
      var key = "";
      for (key in this.FItems) if (this.FItems.hasOwnProperty(key)) Proc(this.FItems[key],Arg);
    };
    this.Clear = function () {
      this.FItems = new Object();
    };
    this.Remove = function (aName) {
      if (this.FItems.hasOwnProperty("%" + aName)) pas.JS.JSDelete(this.FItems,"%" + aName);
    };
  });
  rtl.createClass($mod,"EPasResolve",pas.SysUtils.Exception,function () {
    this.$init = function () {
      pas.SysUtils.Exception.$init.call(this);
      this.FPasElement = null;
      this.Id = 0;
      this.MsgType = 0;
      this.MsgNumber = 0;
      this.MsgPattern = "";
      this.Args = [];
      this.SourcePos = new pas.PScanner.TPasSourcePos();
    };
    this.$final = function () {
      this.FPasElement = undefined;
      this.Args = undefined;
      this.SourcePos = undefined;
      pas.SysUtils.Exception.$final.call(this);
    };
    this.SetPasElement = function (AValue) {
      if (this.FPasElement === AValue) return;
      if (this.FPasElement !== null) this.FPasElement.Release();
      this.FPasElement = AValue;
      if (this.FPasElement !== null) this.FPasElement.AddRef();
    };
    this.Destroy = function () {
      this.SetPasElement(null);
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TUnresolvedPendingRef",pas.PasTree.TPasUnresolvedSymbolRef,function () {
    this.$init = function () {
      pas.PasTree.TPasUnresolvedSymbolRef.$init.call(this);
      this.Element = null;
    };
    this.$final = function () {
      this.Element = undefined;
      pas.PasTree.TPasUnresolvedSymbolRef.$final.call(this);
    };
  });
  this.TPSRefAccess = {"0": "psraNone", psraNone: 0, "1": "psraRead", psraRead: 1, "2": "psraWrite", psraWrite: 2, "3": "psraReadWrite", psraReadWrite: 3, "4": "psraWriteRead", psraWriteRead: 4, "5": "psraTypeInfo", psraTypeInfo: 5};
  $mod.$rtti.$Enum("TPSRefAccess",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TPSRefAccess});
  rtl.createClass($mod,"TPasScopeReference",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FElement = null;
      this.Access = 0;
      this.NextSameName = null;
    };
    this.$final = function () {
      this.FElement = undefined;
      this.NextSameName = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetElement = function (AValue) {
      if (this.FElement === AValue) return;
      if (this.FElement !== null) this.FElement.Release();
      this.FElement = AValue;
      if (this.FElement !== null) this.FElement.AddRef();
    };
    this.Destroy = function () {
      this.SetElement(null);
      pas.System.TObject.Destroy.call(this);
    };
  });
  $mod.$rtti.$Class("TPasScope");
  rtl.createClass($mod,"TPasScopeReferences",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FScope = null;
      this.References = null;
    };
    this.$final = function () {
      this.FScope = undefined;
      this.References = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.OnClearItem = function (Item, Dummy) {
      var Ref2 = null;
      if (Dummy === null) ;
      while (Item !== null) {
        Ref2 = Item;
        Item = Item.NextSameName;
        Ref2 = rtl.freeLoc(Ref2);
      };
    };
    this.OnCollectItem = function (Item, aList) {
      while (Item !== null) {
        aList.Add(Item);
        Item = Item.NextSameName;
      };
    };
    this.Create$1 = function (aScope) {
      this.References = $mod.TPasResHashList.$create("Create$1");
      this.FScope = aScope;
    };
    this.Destroy = function () {
      this.Clear();
      this.References = null;
      pas.System.TObject.Destroy.call(this);
    };
    this.Clear = function () {
      if (this.References === null) return;
      this.References.ForEachCall(rtl.createCallback(this,"OnClearItem"),null);
      this.References.Clear();
    };
    this.Add = function (El, Access) {
      var Result = null;
      var LoName = "";
      var OldItem = null;
      var Item = null;
      var LastItem = null;
      LoName = pas.SysUtils.LowerCase(El.FName);
      OldItem = this.References.Find(LoName);
      Item = OldItem;
      LastItem = null;
      while (Item !== null) {
        if (Item.FElement === El) {
          var $tmp1 = Access;
          if ($tmp1 === $mod.TPSRefAccess.psraNone) {}
          else if ($tmp1 === $mod.TPSRefAccess.psraRead) {
            var $tmp2 = Item.Access;
            if ($tmp2 === $mod.TPSRefAccess.psraNone) {
              Item.Access = Access}
             else if ($tmp2 === $mod.TPSRefAccess.psraWrite) Item.Access = $mod.TPSRefAccess.psraWriteRead;
          } else if ($tmp1 === $mod.TPSRefAccess.psraWrite) {
            var $tmp3 = Item.Access;
            if ($tmp3 === $mod.TPSRefAccess.psraNone) {
              Item.Access = Access}
             else if ($tmp3 === $mod.TPSRefAccess.psraRead) Item.Access = $mod.TPSRefAccess.psraReadWrite;
          } else if ($tmp1 === $mod.TPSRefAccess.psraReadWrite) {
            var $tmp4 = Item.Access;
            if ($tmp4 === $mod.TPSRefAccess.psraNone) {
              Item.Access = Access}
             else if ($tmp4 === $mod.TPSRefAccess.psraRead) {
              Item.Access = $mod.TPSRefAccess.psraReadWrite}
             else if ($tmp4 === $mod.TPSRefAccess.psraWrite) Item.Access = $mod.TPSRefAccess.psraWriteRead;
          } else if ($tmp1 === $mod.TPSRefAccess.psraWriteRead) {
            var $tmp5 = Item.Access;
            if ($tmp5 === $mod.TPSRefAccess.psraNone) {
              Item.Access = Access}
             else if ($tmp5 === $mod.TPSRefAccess.psraRead) {
              Item.Access = $mod.TPSRefAccess.psraReadWrite}
             else if ($tmp5 === $mod.TPSRefAccess.psraWrite) Item.Access = $mod.TPSRefAccess.psraWriteRead;
          } else if ($tmp1 === $mod.TPSRefAccess.psraTypeInfo) {
            Item.Access = $mod.TPSRefAccess.psraTypeInfo}
           else {
            throw $mod.EPasResolve.$create("Create$1",[pas.PasResolveEval.GetObjName(El) + " unknown Access"]);
          };
          return Item;
        };
        LastItem = Item;
        Item = Item.NextSameName;
      };
      Item = $mod.TPasScopeReference.$create("Create");
      Item.SetElement(El);
      Item.Access = Access;
      if (LastItem === null) {
        this.References.Add(LoName,Item);
      } else LastItem.NextSameName = Item;
      Result = Item;
      return Result;
    };
    this.Find = function (aName) {
      var Result = null;
      var LoName = "";
      if (this.References === null) return null;
      LoName = pas.SysUtils.LowerCase(aName);
      Result = this.References.Find(LoName);
      return Result;
    };
    this.GetList = function () {
      var Result = null;
      Result = pas.Classes.TFPList.$create("Create");
      if (this.References === null) return Result;
      this.References.ForEachCall(rtl.createCallback(this,"OnCollectItem"),Result);
      return Result;
    };
  });
  $mod.$rtti.$MethodVar("TIterateScopeElement",{procsig: rtl.newTIProcSig([["El",pas.PasTree.$rtti["TPasElement"]],["ElScope",$mod.$rtti["TPasScope"]],["StartScope",$mod.$rtti["TPasScope"]],["Data",rtl.pointer],["Abort",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TPasScope",pas.PasResolveEval.TResolveData,function () {
    this.$init = function () {
      pas.PasResolveEval.TResolveData.$init.call(this);
      this.VisibilityContext = null;
    };
    this.$final = function () {
      this.VisibilityContext = undefined;
      pas.PasResolveEval.TResolveData.$final.call(this);
    };
    this.IsStoredInElement = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.FreeOnPop = function () {
      var Result = false;
      Result = !this.IsStoredInElement();
      return Result;
    };
    this.IterateElements = function (aName, StartScope, OnIterateElement, Data, Abort) {
      if (aName === "") ;
      if (StartScope === null) ;
      if (Data === null) ;
      if (OnIterateElement === null) ;
      if (Abort.get()) ;
    };
    this.WriteIdentifiers = function (Prefix) {
      pas.System.Writeln(Prefix,"(",this.$classname,") Element: ",pas.PasResolveEval.GetObjName(this.FElement));
    };
  });
  $mod.$rtti.$ClassRef("TPasScopeClass",{instancetype: $mod.$rtti["TPasScope"]});
  this.TPasModuleScopeFlag = {"0": "pmsfAssertSearched", pmsfAssertSearched: 0, "1": "pmsfRangeErrorNeeded", pmsfRangeErrorNeeded: 1, "2": "pmsfRangeErrorSearched", pmsfRangeErrorSearched: 2};
  $mod.$rtti.$Enum("TPasModuleScopeFlag",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TPasModuleScopeFlag});
  $mod.$rtti.$Set("TPasModuleScopeFlags",{comptype: $mod.$rtti["TPasModuleScopeFlag"]});
  rtl.createClass($mod,"TPasModuleScope",$mod.TPasScope,function () {
    this.$init = function () {
      $mod.TPasScope.$init.call(this);
      this.FAssertClass = null;
      this.FAssertDefConstructor = null;
      this.FAssertMsgConstructor = null;
      this.FRangeErrorClass = null;
      this.FRangeErrorConstructor = null;
      this.FirstName = "";
      this.PendingResolvers = null;
      this.Flags = {};
      this.BoolSwitches = {};
    };
    this.$final = function () {
      this.FAssertClass = undefined;
      this.FAssertDefConstructor = undefined;
      this.FAssertMsgConstructor = undefined;
      this.FRangeErrorClass = undefined;
      this.FRangeErrorConstructor = undefined;
      this.PendingResolvers = undefined;
      this.Flags = undefined;
      this.BoolSwitches = undefined;
      $mod.TPasScope.$final.call(this);
    };
    this.SetAssertClass = function (AValue) {
      if (this.FAssertClass === AValue) return;
      if (this.FAssertClass !== null) this.FAssertClass.Release();
      this.FAssertClass = AValue;
      if (this.FAssertClass !== null) this.FAssertClass.AddRef();
    };
    this.SetAssertDefConstructor = function (AValue) {
      if (this.FAssertDefConstructor === AValue) return;
      if (this.FAssertDefConstructor !== null) this.FAssertDefConstructor.Release();
      this.FAssertDefConstructor = AValue;
      if (this.FAssertDefConstructor !== null) this.FAssertDefConstructor.AddRef();
    };
    this.SetAssertMsgConstructor = function (AValue) {
      if (this.FAssertMsgConstructor === AValue) return;
      if (this.FAssertMsgConstructor !== null) this.FAssertMsgConstructor.Release();
      this.FAssertMsgConstructor = AValue;
      if (this.FAssertMsgConstructor !== null) this.FAssertMsgConstructor.AddRef();
    };
    this.SetRangeErrorClass = function (AValue) {
      if (this.FRangeErrorClass === AValue) return;
      if (this.FRangeErrorClass !== null) this.FRangeErrorClass.Release();
      this.FRangeErrorClass = AValue;
      if (this.FRangeErrorClass !== null) this.FRangeErrorClass.AddRef();
    };
    this.SetRangeErrorConstructor = function (AValue) {
      if (this.FRangeErrorConstructor === AValue) return;
      if (this.FRangeErrorConstructor !== null) this.FRangeErrorConstructor.Release();
      this.FRangeErrorConstructor = AValue;
      if (this.FRangeErrorConstructor !== null) this.FRangeErrorConstructor.AddRef();
    };
    this.Create$1 = function () {
      pas.PasResolveEval.TResolveData.Create$1.call(this);
      this.PendingResolvers = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      this.SetAssertClass(null);
      this.SetAssertDefConstructor(null);
      this.SetAssertMsgConstructor(null);
      this.SetRangeErrorClass(null);
      this.SetRangeErrorConstructor(null);
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.PendingResolvers;
        }, set: function (v) {
          this.p.PendingResolvers = v;
        }});
      pas.PasResolveEval.TResolveData.Destroy.call(this);
    };
    this.IterateElements = function (aName, StartScope, OnIterateElement, Data, Abort) {
      if (pas.SysUtils.CompareText(aName,this.FirstName) !== 0) return;
      OnIterateElement(this.FElement,this,StartScope,Data,Abort);
    };
  });
  $mod.$rtti.$ClassRef("TPasModuleScopeClass",{instancetype: $mod.$rtti["TPasModuleScope"]});
  this.TPasIdentifierKind = {"0": "pikNone", pikNone: 0, "1": "pikBaseType", pikBaseType: 1, "2": "pikBuiltInProc", pikBuiltInProc: 2, "3": "pikSimple", pikSimple: 3, "4": "pikProc", pikProc: 4, "5": "pikNamespace", pikNamespace: 5};
  $mod.$rtti.$Enum("TPasIdentifierKind",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TPasIdentifierKind});
  $mod.$rtti.$Set("TPasIdentifierKinds",{comptype: $mod.$rtti["TPasIdentifierKind"]});
  rtl.createClass($mod,"TPasIdentifier",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FElement = null;
      this.Identifier = "";
      this.NextSameIdentifier = null;
      this.Kind = 0;
    };
    this.$final = function () {
      this.FElement = undefined;
      this.NextSameIdentifier = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetElement = function (AValue) {
      if (this.FElement === AValue) return;
      if (this.FElement !== null) this.FElement.Release();
      this.FElement = AValue;
      if (this.FElement !== null) this.FElement.AddRef();
    };
    this.Destroy = function () {
      this.SetElement(null);
      pas.System.TObject.Destroy.call(this);
    };
  });
  $mod.$rtti.$DynArray("TPasIdentifierArray",{eltype: $mod.$rtti["TPasIdentifier"]});
  rtl.createClass($mod,"TPasIdentifierScope",$mod.TPasScope,function () {
    this.$init = function () {
      $mod.TPasScope.$init.call(this);
      this.FItems = null;
    };
    this.$final = function () {
      this.FItems = undefined;
      $mod.TPasScope.$final.call(this);
    };
    this.InternalAdd = function (Item) {
      var OldItem = null;
      var LoName = "";
      LoName = pas.SysUtils.LowerCase(Item.Identifier);
      OldItem = this.FItems.Find(LoName);
      if (OldItem !== null) {
        Item.NextSameIdentifier = OldItem;
      };
      this.FItems.Add(LoName,Item);
    };
    this.OnClearItem = function (Item, Dummy) {
      var Ident = null;
      if (Dummy === null) ;
      while (Item !== null) {
        Ident = Item;
        Item = Item.NextSameIdentifier;
        Ident = rtl.freeLoc(Ident);
      };
    };
    this.OnCollectItem = function (Item, List) {
      List.Add(Item);
    };
    this.OnWriteItem = function (Item, Dummy) {
      var Prefix = "";
      Prefix = Dummy;
      while (Item !== null) {
        pas.System.Writeln(Prefix,'Identifier="',Item.Identifier,'" Element=',pas.PasResolveEval.GetObjName(Item.FElement));
        Item = Item.NextSameIdentifier;
      };
    };
    this.Create$1 = function () {
      this.FItems = $mod.TPasResHashList.$create("Create$1");
    };
    this.Destroy = function () {
      this.FItems.ForEachCall(rtl.createCallback(this,"OnClearItem"),null);
      this.FItems = null;
      pas.PasResolveEval.TResolveData.Destroy.call(this);
    };
    this.FindLocalIdentifier = function (Identifier) {
      var Result = null;
      Result = this.FItems.Find(pas.SysUtils.LowerCase(Identifier));
      return Result;
    };
    this.FindIdentifier = function (Identifier) {
      var Result = null;
      Result = this.FindLocalIdentifier(Identifier);
      return Result;
    };
    this.RemoveLocalIdentifier = function (El) {
      var Result = false;
      var Identifier = null;
      var PrevIdentifier = null;
      var LoName = "";
      LoName = pas.SysUtils.LowerCase(El.FName);
      Identifier = this.FItems.Find(LoName);
      this.FindLocalIdentifier(El.FName);
      PrevIdentifier = null;
      Result = false;
      while (Identifier !== null) {
        if (Identifier.FElement === El) {
          if (PrevIdentifier !== null) {
            PrevIdentifier.NextSameIdentifier = Identifier.NextSameIdentifier;
            Identifier = rtl.freeLoc(Identifier);
            Identifier = PrevIdentifier.NextSameIdentifier;
          } else {
            this.FItems.Remove(LoName);
            PrevIdentifier = Identifier;
            Identifier = Identifier.NextSameIdentifier;
            PrevIdentifier = rtl.freeLoc(PrevIdentifier);
            PrevIdentifier = null;
            if (Identifier !== null) this.FItems.Add(LoName,Identifier);
          };
          Result = true;
          continue;
        };
        PrevIdentifier = Identifier;
        Identifier = Identifier.NextSameIdentifier;
      };
      return Result;
    };
    this.AddIdentifier = function (Identifier, El, Kind) {
      var Result = null;
      var Item = null;
      Item = $mod.TPasIdentifier.$create("Create");
      Item.Identifier = Identifier;
      Item.SetElement(El);
      Item.Kind = Kind;
      this.InternalAdd(Item);
      Result = Item;
      return Result;
    };
    this.FindElement = function (aName) {
      var Result = null;
      var Item = null;
      Item = this.FindIdentifier(aName);
      if (Item === null) {
        Result = null}
       else Result = Item.FElement;
      return Result;
    };
    this.IterateLocalElements = function (aName, StartScope, OnIterateElement, Data, Abort) {
      var Item = null;
      Item = this.FindLocalIdentifier(aName);
      while (Item !== null) {
        OnIterateElement(Item.FElement,this,StartScope,Data,Abort);
        if (Abort.get()) return;
        Item = Item.NextSameIdentifier;
      };
    };
    this.IterateElements = function (aName, StartScope, OnIterateElement, Data, Abort) {
      this.IterateLocalElements(aName,StartScope,OnIterateElement,Data,Abort);
    };
    this.WriteIdentifiers = function (Prefix) {
      $mod.TPasScope.WriteIdentifiers.call(this,Prefix);
      this.WriteLocalIdentifiers(Prefix + "  ");
    };
    this.WriteLocalIdentifiers = function (Prefix) {
      this.FItems.ForEachCall(rtl.createCallback(this,"OnWriteItem"),Prefix);
    };
    this.GetLocalIdentifiers = function () {
      var Result = null;
      Result = pas.Classes.TFPList.$create("Create");
      this.FItems.ForEachCall(rtl.createCallback(this,"OnCollectItem"),Result);
      return Result;
    };
  });
  rtl.createClass($mod,"TPasDefaultScope",$mod.TPasIdentifierScope,function () {
    this.IsStoredInElement = function () {
      var Result = false;
      Result = false;
      return Result;
    };
  });
  rtl.createClass($mod,"TPasSectionScope",$mod.TPasIdentifierScope,function () {
    this.$init = function () {
      $mod.TPasIdentifierScope.$init.call(this);
      this.UsesScopes = null;
      this.UsesFinished = false;
      this.Finished = false;
      this.BoolSwitches = {};
      this.ModeSwitches = {};
    };
    this.$final = function () {
      this.UsesScopes = undefined;
      this.BoolSwitches = undefined;
      this.ModeSwitches = undefined;
      $mod.TPasIdentifierScope.$final.call(this);
    };
    this.OnInternalIterate = function (El, ElScope, StartScope, Data, Abort) {
      if ((El.$class.ClassType() === pas.PasTree.TPasModule) || (El.$class.ClassType() === pas.PasTree.TPasUsesUnit)) return;
      Data.OnIterate(El,ElScope,StartScope,Data.Data,Abort);
    };
    this.Create$1 = function () {
      $mod.TPasIdentifierScope.Create$1.call(this);
      this.UsesScopes = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.UsesScopes;
        }, set: function (v) {
          this.p.UsesScopes = v;
        }});
      $mod.TPasIdentifierScope.Destroy.call(this);
    };
    this.FindIdentifier = function (Identifier) {
      var Result = null;
      var i = 0;
      var UsesScope = null;
      var C = null;
      Result = $mod.TPasIdentifierScope.FindIdentifier.call(this,Identifier);
      if (Result !== null) return Result;
      for (var $l1 = this.UsesScopes.FCount - 1; $l1 >= 0; $l1--) {
        i = $l1;
        UsesScope = rtl.getObject(this.UsesScopes.Get(i));
        Result = UsesScope.FindLocalIdentifier(Identifier);
        if (Result !== null) {
          C = Result.FElement.$class.ClassType();
          if ((C !== pas.PasTree.TPasModule) && (C !== pas.PasTree.TPasUsesUnit)) return Result;
        };
      };
      return Result;
    };
    this.IterateElements = function (aName, StartScope, OnIterateElement, Data, Abort) {
      var i = 0;
      var UsesScope = null;
      var FilterData = new $mod.TPasIterateFilterData();
      $mod.TPasIdentifierScope.IterateElements.call(this,aName,StartScope,OnIterateElement,Data,Abort);
      if (Abort.get()) return;
      FilterData.OnIterate = OnIterateElement;
      FilterData.Data = Data;
      for (var $l1 = this.UsesScopes.FCount - 1; $l1 >= 0; $l1--) {
        i = $l1;
        UsesScope = rtl.getObject(this.UsesScopes.Get(i));
        UsesScope.IterateLocalElements(aName,StartScope,rtl.createCallback(this,"OnInternalIterate"),FilterData,Abort);
        if (Abort.get()) return;
      };
    };
    this.WriteIdentifiers = function (Prefix) {
      var i = 0;
      var UsesScope = null;
      var SubPrefix = "";
      $mod.TPasIdentifierScope.WriteIdentifiers.call(this,Prefix);
      SubPrefix = Prefix + "    ";
      for (var $l1 = this.UsesScopes.FCount - 1; $l1 >= 0; $l1--) {
        i = $l1;
        UsesScope = rtl.getObject(this.UsesScopes.Get(i));
        pas.System.Writeln(((((Prefix + "  Uses: ") + pas.PasResolveEval.GetObjName(UsesScope.FElement)) + ' "') + UsesScope.FElement.GetModule().FName) + '"');
        UsesScope.FItems.ForEachCall(rtl.createCallback(this,"OnWriteItem"),SubPrefix);
      };
    };
  });
  $mod.$rtti.$ClassRef("TPasSectionScopeClass",{instancetype: $mod.$rtti["TPasSectionScope"]});
  rtl.createClass($mod,"TPasInitialFinalizationScope",$mod.TPasScope,function () {
    this.$init = function () {
      $mod.TPasScope.$init.call(this);
      this.References = null;
    };
    this.$final = function () {
      this.References = undefined;
      $mod.TPasScope.$final.call(this);
    };
    this.AddReference = function (El, Access) {
      var Result = null;
      if (this.References === null) this.References = $mod.TPasScopeReferences.$create("Create$1",[this]);
      Result = this.References.Add(El,Access);
      return Result;
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.References;
        }, set: function (v) {
          this.p.References = v;
        }});
      pas.PasResolveEval.TResolveData.Destroy.call(this);
    };
  });
  $mod.$rtti.$ClassRef("TPasInitialFinalizationScopeClass",{instancetype: $mod.$rtti["TPasInitialFinalizationScope"]});
  rtl.createClass($mod,"TPasEnumTypeScope",$mod.TPasIdentifierScope,function () {
    this.$init = function () {
      $mod.TPasIdentifierScope.$init.call(this);
      this.CanonicalSet = null;
    };
    this.$final = function () {
      this.CanonicalSet = undefined;
      $mod.TPasIdentifierScope.$final.call(this);
    };
    this.Destroy = function () {
      pas.PasTree.ReleaseAndNil({p: this, get: function () {
          return this.p.CanonicalSet;
        }, set: function (v) {
          this.p.CanonicalSet = v;
        }});
      $mod.TPasIdentifierScope.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TPasRecordScope",$mod.TPasIdentifierScope,function () {
  });
  this.TPasClassScopeFlag = {"0": "pcsfAncestorResolved", pcsfAncestorResolved: 0, "1": "pcsfSealed", pcsfSealed: 1, "2": "pcsfPublished", pcsfPublished: 2};
  $mod.$rtti.$Enum("TPasClassScopeFlag",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TPasClassScopeFlag});
  $mod.$rtti.$Set("TPasClassScopeFlags",{comptype: $mod.$rtti["TPasClassScopeFlag"]});
  rtl.createClass($mod,"TPasClassIntfMap",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.Element = null;
      this.Intf = null;
      this.Procs = null;
      this.AncestorMap = null;
    };
    this.$final = function () {
      this.Element = undefined;
      this.Intf = undefined;
      this.Procs = undefined;
      this.AncestorMap = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Destroy = function () {
      this.Element = null;
      this.Intf = null;
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Procs;
        }, set: function (v) {
          this.p.Procs = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.AncestorMap;
        }, set: function (v) {
          this.p.AncestorMap = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TPasClassScope",$mod.TPasIdentifierScope,function () {
    this.$init = function () {
      $mod.TPasIdentifierScope.$init.call(this);
      this.AncestorScope = null;
      this.CanonicalClassOf = null;
      this.DirectAncestor = null;
      this.DefaultProperty = null;
      this.Flags = {};
      this.AbstractProcs = [];
      this.Interfaces = null;
    };
    this.$final = function () {
      this.AncestorScope = undefined;
      this.CanonicalClassOf = undefined;
      this.DirectAncestor = undefined;
      this.DefaultProperty = undefined;
      this.Flags = undefined;
      this.AbstractProcs = undefined;
      this.Interfaces = undefined;
      $mod.TPasIdentifierScope.$final.call(this);
    };
    this.Destroy = function () {
      var i = 0;
      var o = null;
      if (this.Interfaces !== null) {
        for (var $l1 = 0, $end2 = this.Interfaces.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          o = rtl.getObject(this.Interfaces.Get(i));
          if (o === null) {}
          else if (pas.PasTree.TPasProperty.isPrototypeOf(o)) {}
          else if ($mod.TPasClassIntfMap.isPrototypeOf(o)) {
            o = rtl.freeLoc(o)}
           else throw pas.SysUtils.Exception.$create("Create$1",[(((("[20180322132757] " + $mod.GetElementDbgPath(this.FElement)) + " i=") + pas.SysUtils.IntToStr(i)) + " ") + pas.PasResolveEval.GetObjName(o)]);
        };
        pas.SysUtils.FreeAndNil({p: this, get: function () {
            return this.p.Interfaces;
          }, set: function (v) {
            this.p.Interfaces = v;
          }});
      };
      if (this.CanonicalClassOf !== null) {
        this.CanonicalClassOf.SetParent(null);
        pas.PasTree.ReleaseAndNil({p: this, get: function () {
            return this.p.CanonicalClassOf;
          }, set: function (v) {
            this.p.CanonicalClassOf = v;
          }});
      };
      $mod.TPasIdentifierScope.Destroy.call(this);
    };
    this.FindIdentifier = function (Identifier) {
      var Result = null;
      Result = $mod.TPasIdentifierScope.FindIdentifier.call(this,Identifier);
      if (Result !== null) return Result;
      if (this.AncestorScope !== null) Result = this.AncestorScope.FindIdentifier(Identifier);
      return Result;
    };
    this.IterateElements = function (aName, StartScope, OnIterateElement, Data, Abort) {
      $mod.TPasIdentifierScope.IterateElements.call(this,aName,StartScope,OnIterateElement,Data,Abort);
      if (Abort.get()) return;
      if (this.AncestorScope !== null) this.AncestorScope.IterateElements(aName,StartScope,OnIterateElement,Data,Abort);
    };
    this.WriteIdentifiers = function (Prefix) {
      $mod.TPasIdentifierScope.WriteIdentifiers.call(this,Prefix);
      if (this.AncestorScope !== null) this.AncestorScope.WriteIdentifiers(Prefix + "AS  ");
    };
  });
  $mod.$rtti.$ClassRef("TPasClassScopeClass",{instancetype: $mod.$rtti["TPasClassScope"]});
  this.TPasProcedureScopeFlag = {"0": "ppsfIsGroupOverload", ppsfIsGroupOverload: 0};
  $mod.$rtti.$Enum("TPasProcedureScopeFlag",{minvalue: 0, maxvalue: 0, ordtype: 1, enumtype: this.TPasProcedureScopeFlag});
  $mod.$rtti.$Set("TPasProcedureScopeFlags",{comptype: $mod.$rtti["TPasProcedureScopeFlag"]});
  rtl.createClass($mod,"TPasProcedureScope",$mod.TPasIdentifierScope,function () {
    this.$init = function () {
      $mod.TPasIdentifierScope.$init.call(this);
      this.DeclarationProc = null;
      this.ImplProc = null;
      this.OverriddenProc = null;
      this.ClassScope = null;
      this.SelfArg = null;
      this.Flags = {};
      this.BoolSwitches = {};
      this.ModeSwitches = {};
      this.References = null;
    };
    this.$final = function () {
      this.DeclarationProc = undefined;
      this.ImplProc = undefined;
      this.OverriddenProc = undefined;
      this.ClassScope = undefined;
      this.SelfArg = undefined;
      this.Flags = undefined;
      this.BoolSwitches = undefined;
      this.ModeSwitches = undefined;
      this.References = undefined;
      $mod.TPasIdentifierScope.$final.call(this);
    };
    this.FindIdentifier = function (Identifier) {
      var Result = null;
      var CurScope = null;
      var ParentEl = null;
      Result = $mod.TPasIdentifierScope.FindIdentifier.call(this,Identifier);
      if (Result !== null) return Result;
      CurScope = this.ClassScope;
      if (CurScope === null) return Result;
      do {
        Result = CurScope.FindIdentifier(Identifier);
        if (Result !== null) return Result;
        ParentEl = CurScope.FElement.FParent;
        if (ParentEl === null) return Result;
        if (ParentEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          CurScope = ParentEl.FData}
         else if (ParentEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
          CurScope = ParentEl.FData}
         else return Result;
      } while (!false);
      return Result;
    };
    this.IterateElements = function (aName, StartScope, OnIterateElement, Data, Abort) {
      var CurScope = null;
      var ParentEl = null;
      $mod.TPasIdentifierScope.IterateElements.call(this,aName,StartScope,OnIterateElement,Data,Abort);
      if (Abort.get()) return;
      CurScope = this.ClassScope;
      if (CurScope === null) return;
      do {
        CurScope.IterateElements(aName,StartScope,OnIterateElement,Data,Abort);
        if (Abort.get()) return;
        ParentEl = CurScope.FElement.FParent;
        if (ParentEl === null) return;
        if (ParentEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          CurScope = ParentEl.FData}
         else if (ParentEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
          CurScope = ParentEl.FData}
         else return;
      } while (!false);
    };
    this.GetSelfScope = function () {
      var Result = null;
      var Proc = null;
      Result = this;
      do {
        if (Result.ClassScope !== null) return Result;
        Proc = this.FElement;
        if (!pas.PasTree.TProcedureBody.isPrototypeOf(Proc.FParent)) return null;
        Proc = rtl.as(Proc.FParent.FParent,pas.PasTree.TPasProcedure);
        Result = Proc.FData;
      } while (!false);
      return Result;
    };
    this.WriteIdentifiers = function (Prefix) {
      $mod.TPasIdentifierScope.WriteIdentifiers.call(this,Prefix);
      if (this.ClassScope !== null) this.ClassScope.WriteIdentifiers(Prefix + "CS  ");
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.References;
        }, set: function (v) {
          this.p.References = v;
        }});
      $mod.TPasIdentifierScope.Destroy.call(this);
      pas.PasTree.ReleaseAndNil({p: this, get: function () {
          return this.p.SelfArg;
        }, set: function (v) {
          this.p.SelfArg = v;
        }});
    };
    this.AddReference = function (El, Access) {
      var Result = null;
      if (this.References === null) this.References = $mod.TPasScopeReferences.$create("Create$1",[this]);
      Result = this.References.Add(El,Access);
      return Result;
    };
    this.GetReferences = function () {
      var Result = null;
      if (this.References === null) {
        Result = pas.Classes.TFPList.$create("Create")}
       else Result = this.References.GetList();
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("TPasProcedureScopeClass",{instancetype: $mod.$rtti["TPasProcedureScope"]});
  rtl.createClass($mod,"TPasPropertyScope",$mod.TPasIdentifierScope,function () {
    this.$init = function () {
      $mod.TPasIdentifierScope.$init.call(this);
      this.AncestorProp = null;
    };
    this.$final = function () {
      this.AncestorProp = undefined;
      $mod.TPasIdentifierScope.$final.call(this);
    };
    this.Destroy = function () {
      this.AncestorProp = null;
      $mod.TPasIdentifierScope.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TPasExceptOnScope",$mod.TPasIdentifierScope,function () {
  });
  $mod.$rtti.$Class("TPasWithScope");
  this.TPasWithExprScopeFlag = {"0": "wesfNeedTmpVar", wesfNeedTmpVar: 0, "1": "wesfOnlyTypeMembers", wesfOnlyTypeMembers: 1, "2": "wesfIsClassOf", wesfIsClassOf: 2, "3": "wesfConstParent", wesfConstParent: 3};
  $mod.$rtti.$Enum("TPasWithExprScopeFlag",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TPasWithExprScopeFlag});
  $mod.$rtti.$Set("TPasWithExprScopeFlags",{comptype: $mod.$rtti["TPasWithExprScopeFlag"]});
  rtl.createClass($mod,"TPasWithExprScope",$mod.TPasScope,function () {
    this.$init = function () {
      $mod.TPasScope.$init.call(this);
      this.WithScope = null;
      this.Index = 0;
      this.Expr = null;
      this.Scope = null;
      this.Flags = {};
    };
    this.$final = function () {
      this.WithScope = undefined;
      this.Expr = undefined;
      this.Scope = undefined;
      this.Flags = undefined;
      $mod.TPasScope.$final.call(this);
    };
    this.IsStoredInElement = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.FreeOnPop = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.IterateElements = function (aName, StartScope, OnIterateElement, Data, Abort) {
      this.Scope.IterateElements(aName,StartScope,OnIterateElement,Data,Abort);
    };
    this.WriteIdentifiers = function (Prefix) {
      pas.System.Writeln((Prefix + "WithExpr: ") + $mod.GetTreeDbg(this.Expr,Prefix.length));
      this.Scope.WriteIdentifiers(Prefix);
    };
  });
  $mod.$rtti.$ClassRef("TPasWithExprScopeClass",{instancetype: $mod.$rtti["TPasWithExprScope"]});
  rtl.createClass($mod,"TPasWithScope",$mod.TPasScope,function () {
    this.$init = function () {
      $mod.TPasScope.$init.call(this);
      this.ExpressionScopes = null;
    };
    this.$final = function () {
      this.ExpressionScopes = undefined;
      $mod.TPasScope.$final.call(this);
    };
    this.Create$1 = function () {
      pas.PasResolveEval.TResolveData.Create$1.call(this);
      this.ExpressionScopes = pas.contnrs.TObjectList.$create("Create$3",[true]);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.ExpressionScopes;
        }, set: function (v) {
          this.p.ExpressionScopes = v;
        }});
      pas.PasResolveEval.TResolveData.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TPasForLoopScope",$mod.TPasScope,function () {
    this.$init = function () {
      $mod.TPasScope.$init.call(this);
      this.GetEnumerator = null;
      this.MoveNext = null;
      this.Current = null;
    };
    this.$final = function () {
      this.GetEnumerator = undefined;
      this.MoveNext = undefined;
      this.Current = undefined;
      $mod.TPasScope.$final.call(this);
    };
  });
  rtl.createClass($mod,"TPasSubScope",$mod.TPasIdentifierScope,function () {
    this.IsStoredInElement = function () {
      var Result = false;
      Result = false;
      return Result;
    };
  });
  this.TPasIterateFilterData = function (s) {
    if (s) {
      this.OnIterate = s.OnIterate;
      this.Data = s.Data;
    } else {
      this.OnIterate = null;
      this.Data = null;
    };
    this.$equal = function (b) {
      return rtl.eqCallback(this.OnIterate,b.OnIterate) && (this.Data === b.Data);
    };
  };
  $mod.$rtti.$Record("TPasIterateFilterData",{}).addFields("OnIterate",$mod.$rtti["TIterateScopeElement"],"Data",rtl.pointer);
  rtl.createClass($mod,"TPasModuleDotScope",$mod.TPasSubScope,function () {
    this.$init = function () {
      $mod.TPasSubScope.$init.call(this);
      this.FModule = null;
      this.ImplementationScope = null;
      this.InterfaceScope = null;
      this.SystemScope = null;
    };
    this.$final = function () {
      this.FModule = undefined;
      this.ImplementationScope = undefined;
      this.InterfaceScope = undefined;
      this.SystemScope = undefined;
      $mod.TPasSubScope.$final.call(this);
    };
    this.OnInternalIterate = function (El, ElScope, StartScope, Data, Abort) {
      if ((El.$class.ClassType() === pas.PasTree.TPasModule) || (El.$class.ClassType() === pas.PasTree.TPasUsesUnit)) return;
      Data.OnIterate(El,ElScope,StartScope,Data.Data,Abort);
    };
    this.SetModule = function (AValue) {
      if (this.FModule === AValue) return;
      if (this.FModule !== null) this.FModule.Release();
      this.FModule = AValue;
      if (this.FModule !== null) this.FModule.AddRef();
    };
    this.Destroy = function () {
      this.SetModule(null);
      $mod.TPasIdentifierScope.Destroy.call(this);
    };
    this.FindIdentifier = function (Identifier) {
      var Self = this;
      var Result = null;
      function Find(Scope) {
        var Result$1 = false;
        var Found = null;
        var C = null;
        if (Scope === null) return false;
        Found = Scope.FindLocalIdentifier(Identifier);
        Result = Found;
        if (Found === null) return false;
        C = Found.FElement.$class.ClassType();
        Result$1 = (C !== pas.PasTree.TPasModule) && (C !== pas.PasTree.TPasUsesUnit);
        return Result$1;
      };
      Result = null;
      if (Find(Self.ImplementationScope)) return Result;
      if (Find(Self.InterfaceScope)) return Result;
      Find(Self.SystemScope);
      return Result;
    };
    this.IterateElements = function (aName, StartScope, OnIterateElement, Data, Abort) {
      var Self = this;
      var FilterData = new $mod.TPasIterateFilterData();
      function Iterate(Scope) {
        var Result = false;
        if (Scope === null) return false;
        Scope.IterateLocalElements(aName,StartScope,rtl.createCallback(Self,"OnInternalIterate"),FilterData,Abort);
        Result = Abort.get();
        return Result;
      };
      FilterData.OnIterate = OnIterateElement;
      FilterData.Data = Data;
      if (Iterate(Self.ImplementationScope)) return;
      if (Iterate(Self.InterfaceScope)) return;
      Iterate(Self.SystemScope);
    };
    this.WriteIdentifiers = function (Prefix) {
      if (this.ImplementationScope !== null) this.ImplementationScope.WriteIdentifiers(Prefix + "  ");
      if (this.InterfaceScope !== null) this.InterfaceScope.WriteIdentifiers(Prefix + "  ");
      if (this.SystemScope !== null) this.SystemScope.WriteIdentifiers(Prefix + "  ");
    };
  });
  rtl.createClass($mod,"TPasDotIdentifierScope",$mod.TPasSubScope,function () {
    this.$init = function () {
      $mod.TPasSubScope.$init.call(this);
      this.IdentifierScope = null;
      this.OnlyTypeMembers = false;
      this.ConstParent = false;
    };
    this.$final = function () {
      this.IdentifierScope = undefined;
      $mod.TPasSubScope.$final.call(this);
    };
    this.FindIdentifier = function (Identifier) {
      var Result = null;
      Result = this.IdentifierScope.FindIdentifier(Identifier);
      return Result;
    };
    this.IterateElements = function (aName, StartScope, OnIterateElement, Data, Abort) {
      this.IdentifierScope.IterateElements(aName,StartScope,OnIterateElement,Data,Abort);
    };
    this.WriteIdentifiers = function (Prefix) {
      this.IdentifierScope.WriteIdentifiers(Prefix);
    };
  });
  rtl.createClass($mod,"TPasDotRecordScope",$mod.TPasDotIdentifierScope,function () {
  });
  rtl.createClass($mod,"TPasDotEnumTypeScope",$mod.TPasDotIdentifierScope,function () {
  });
  rtl.createClass($mod,"TPasDotClassScope",$mod.TPasDotIdentifierScope,function () {
    this.$init = function () {
      $mod.TPasDotIdentifierScope.$init.call(this);
      this.FClassScope = null;
      this.InheritedExpr = false;
      this.IsClassOf = false;
    };
    this.$final = function () {
      this.FClassScope = undefined;
      $mod.TPasDotIdentifierScope.$final.call(this);
    };
    this.SetClassScope = function (AValue) {
      if (this.FClassScope === AValue) return;
      this.FClassScope = AValue;
      this.IdentifierScope = AValue;
    };
  });
  this.TResolvedReferenceFlag = {"0": "rrfDotScope", rrfDotScope: 0, "1": "rrfImplicitCallWithoutParams", rrfImplicitCallWithoutParams: 1, "2": "rrfNoImplicitCallWithoutParams", rrfNoImplicitCallWithoutParams: 2, "3": "rrfNewInstance", rrfNewInstance: 3, "4": "rrfFreeInstance", rrfFreeInstance: 4, "5": "rrfVMT", rrfVMT: 5, "6": "rrfConstInherited", rrfConstInherited: 6};
  $mod.$rtti.$Enum("TResolvedReferenceFlag",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TResolvedReferenceFlag});
  $mod.$rtti.$Set("TResolvedReferenceFlags",{comptype: $mod.$rtti["TResolvedReferenceFlag"]});
  rtl.createClass($mod,"TResolvedRefContext",pas.System.TObject,function () {
  });
  this.TResolvedRefAccess = {"0": "rraNone", rraNone: 0, "1": "rraRead", rraRead: 1, "2": "rraAssign", rraAssign: 2, "3": "rraReadAndAssign", rraReadAndAssign: 3, "4": "rraVarParam", rraVarParam: 4, "5": "rraOutParam", rraOutParam: 5, "6": "rraParamToUnknownProc", rraParamToUnknownProc: 6};
  $mod.$rtti.$Enum("TResolvedRefAccess",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TResolvedRefAccess});
  $mod.$rtti.$Set("TPRResolveVarAccesses",{comptype: $mod.$rtti["TResolvedRefAccess"]});
  this.rraAllWrite = rtl.createSet($mod.TResolvedRefAccess.rraAssign,$mod.TResolvedRefAccess.rraReadAndAssign,$mod.TResolvedRefAccess.rraVarParam,$mod.TResolvedRefAccess.rraOutParam);
  this.ResolvedToPSRefAccess = [$mod.TPSRefAccess.psraNone,$mod.TPSRefAccess.psraRead,$mod.TPSRefAccess.psraWrite,$mod.TPSRefAccess.psraReadWrite,$mod.TPSRefAccess.psraReadWrite,$mod.TPSRefAccess.psraWrite,$mod.TPSRefAccess.psraNone];
  rtl.createClass($mod,"TResolvedReference",pas.PasResolveEval.TResolveData,function () {
    this.$init = function () {
      pas.PasResolveEval.TResolveData.$init.call(this);
      this.FDeclaration = null;
      this.Flags = {};
      this.Access = 0;
      this.Context = null;
      this.WithExprScope = null;
    };
    this.$final = function () {
      this.FDeclaration = undefined;
      this.Flags = undefined;
      this.Context = undefined;
      this.WithExprScope = undefined;
      pas.PasResolveEval.TResolveData.$final.call(this);
    };
    this.SetDeclaration = function (AValue) {
      if (this.FDeclaration === AValue) return;
      if (this.FDeclaration !== null) this.FDeclaration.Release();
      this.FDeclaration = AValue;
      if (this.FDeclaration !== null) this.FDeclaration.AddRef();
    };
    this.Destroy = function () {
      this.SetDeclaration(null);
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.Context;
        }, set: function (v) {
          this.p.Context = v;
        }});
      pas.PasResolveEval.TResolveData.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TResolvedRefCtxConstructor",$mod.TResolvedRefContext,function () {
    this.$init = function () {
      $mod.TResolvedRefContext.$init.call(this);
      this.Typ = null;
    };
    this.$final = function () {
      this.Typ = undefined;
      $mod.TResolvedRefContext.$final.call(this);
    };
  });
  this.TPasResolverResultFlag = {"0": "rrfReadable", rrfReadable: 0, "1": "rrfWritable", rrfWritable: 1, "2": "rrfAssignable", rrfAssignable: 2, "3": "rrfCanBeStatement", rrfCanBeStatement: 3};
  $mod.$rtti.$Enum("TPasResolverResultFlag",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TPasResolverResultFlag});
  $mod.$rtti.$Set("TPasResolverResultFlags",{comptype: $mod.$rtti["TPasResolverResultFlag"]});
  this.TPasResolverResult = function (s) {
    if (s) {
      this.BaseType = s.BaseType;
      this.SubType = s.SubType;
      this.IdentEl = s.IdentEl;
      this.LoTypeEl = s.LoTypeEl;
      this.HiTypeEl = s.HiTypeEl;
      this.ExprEl = s.ExprEl;
      this.Flags = rtl.refSet(s.Flags);
    } else {
      this.BaseType = 0;
      this.SubType = 0;
      this.IdentEl = null;
      this.LoTypeEl = null;
      this.HiTypeEl = null;
      this.ExprEl = null;
      this.Flags = {};
    };
    this.$equal = function (b) {
      return (this.BaseType === b.BaseType) && ((this.SubType === b.SubType) && ((this.IdentEl === b.IdentEl) && ((this.LoTypeEl === b.LoTypeEl) && ((this.HiTypeEl === b.HiTypeEl) && ((this.ExprEl === b.ExprEl) && rtl.eqSet(this.Flags,b.Flags))))));
    };
  };
  $mod.$rtti.$Record("TPasResolverResult",{}).addFields("BaseType",$mod.$rtti["TResolverBaseType"],"SubType",$mod.$rtti["TResolverBaseType"],"IdentEl",pas.PasTree.$rtti["TPasElement"],"LoTypeEl",pas.PasTree.$rtti["TPasType"],"HiTypeEl",pas.PasTree.$rtti["TPasType"],"ExprEl",pas.PasTree.$rtti["TPasExpr"],"Flags",$mod.$rtti["TPasResolverResultFlags"]);
  $mod.$rtti.$inherited("PPasResolvedElement",{comptype: $mod.$rtti["TPasResolverResult"]});
  this.TPasResolverComputeFlag = {"0": "rcSetReferenceFlags", rcSetReferenceFlags: 0, "1": "rcNoImplicitProc", rcNoImplicitProc: 1, "2": "rcNoImplicitProcType", rcNoImplicitProcType: 2, "3": "rcConstant", rcConstant: 3, "4": "rcType", rcType: 4};
  $mod.$rtti.$Enum("TPasResolverComputeFlag",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TPasResolverComputeFlag});
  $mod.$rtti.$Set("TPasResolverComputeFlags",{comptype: $mod.$rtti["TPasResolverComputeFlag"]});
  rtl.createClass($mod,"TResElDataBuiltInSymbol",pas.PasResolveEval.TResolveData,function () {
  });
  rtl.createClass($mod,"TResElDataBaseType",$mod.TResElDataBuiltInSymbol,function () {
    this.$init = function () {
      $mod.TResElDataBuiltInSymbol.$init.call(this);
      this.BaseType = 0;
    };
  });
  $mod.$rtti.$ClassRef("TResElDataBaseTypeClass",{instancetype: $mod.$rtti["TResElDataBaseType"]});
  $mod.$rtti.$Class("TResElDataBuiltInProc");
  $mod.$rtti.$MethodVar("TOnGetCallCompatibility",{procsig: rtl.newTIProcSig([["Proc",$mod.$rtti["TResElDataBuiltInProc"]],["Exp",pas.PasTree.$rtti["TPasExpr"]],["RaiseOnError",rtl.boolean]],rtl.longint), methodkind: 1});
  $mod.$rtti.$MethodVar("TOnGetCallResult",{procsig: rtl.newTIProcSig([["Proc",$mod.$rtti["TResElDataBuiltInProc"]],["Params",pas.PasTree.$rtti["TParamsExpr"]],["ResolvedEl",$mod.$rtti["TPasResolverResult"],4]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TOnEvalBIFunction",{procsig: rtl.newTIProcSig([["Proc",$mod.$rtti["TResElDataBuiltInProc"]],["Params",pas.PasTree.$rtti["TParamsExpr"]],["Flags",pas.PasResolveEval.$rtti["TResEvalFlags"]],["Evaluated",pas.PasResolveEval.$rtti["TResEvalValue"],4]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TOnFinishParamsExpr",{procsig: rtl.newTIProcSig([["Proc",$mod.$rtti["TResElDataBuiltInProc"]],["Params",pas.PasTree.$rtti["TParamsExpr"]]]), methodkind: 0});
  this.TBuiltInProcFlag = {"0": "bipfCanBeStatement", bipfCanBeStatement: 0};
  rtl.createClass($mod,"TResElDataBuiltInProc",$mod.TResElDataBuiltInSymbol,function () {
    this.$init = function () {
      $mod.TResElDataBuiltInSymbol.$init.call(this);
      this.Proc = null;
      this.Signature = "";
      this.BuiltIn = 0;
      this.GetCallCompatibility = null;
      this.GetCallResult = null;
      this.Eval = null;
      this.FinishParamsExpression = null;
      this.Flags = {};
    };
    this.$final = function () {
      this.Proc = undefined;
      this.GetCallCompatibility = undefined;
      this.GetCallResult = undefined;
      this.Eval = undefined;
      this.FinishParamsExpression = undefined;
      this.Flags = undefined;
      $mod.TResElDataBuiltInSymbol.$final.call(this);
    };
    this.Destroy = function () {
      pas.PasTree.ReleaseAndNil({p: this, get: function () {
          return this.p.Proc;
        }, set: function (v) {
          this.p.Proc = v;
        }});
      pas.PasResolveEval.TResolveData.Destroy.call(this);
    };
  });
  this.TPRFindData = function (s) {
    if (s) {
      this.ErrorPosEl = s.ErrorPosEl;
      this.Found = s.Found;
      this.ElScope = s.ElScope;
      this.StartScope = s.StartScope;
    } else {
      this.ErrorPosEl = null;
      this.Found = null;
      this.ElScope = null;
      this.StartScope = null;
    };
    this.$equal = function (b) {
      return (this.ErrorPosEl === b.ErrorPosEl) && ((this.Found === b.Found) && ((this.ElScope === b.ElScope) && (this.StartScope === b.StartScope)));
    };
  };
  $mod.$rtti.$Record("TPRFindData",{}).addFields("ErrorPosEl",pas.PasTree.$rtti["TPasElement"],"Found",pas.PasTree.$rtti["TPasElement"],"ElScope",$mod.$rtti["TPasScope"],"StartScope",$mod.$rtti["TPasScope"]);
  $mod.$rtti.$inherited("PPRFindData",{comptype: $mod.$rtti["TPRFindData"]});
  this.TPasResolverOption = {"0": "proFixCaseOfOverrides", proFixCaseOfOverrides: 0, "1": "proClassPropertyNonStatic", proClassPropertyNonStatic: 1, "2": "proPropertyAsVarParam", proPropertyAsVarParam: 2, "3": "proClassOfIs", proClassOfIs: 3, "4": "proExtClassInstanceNoTypeMembers", proExtClassInstanceNoTypeMembers: 4, "5": "proOpenAsDynArrays", proOpenAsDynArrays: 5, "6": "proProcTypeWithoutIsNested", proProcTypeWithoutIsNested: 6, "7": "proMethodAddrAsPointer", proMethodAddrAsPointer: 7};
  $mod.$rtti.$Enum("TPasResolverOption",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TPasResolverOption});
  $mod.$rtti.$Set("TPasResolverOptions",{comptype: $mod.$rtti["TPasResolverOption"]});
  this.TPasResolverStep = {"0": "prsInit", prsInit: 0, "1": "prsParsing", prsParsing: 1, "2": "prsFinishingModule", prsFinishingModule: 2, "3": "prsFinishedModule", prsFinishedModule: 3};
  $mod.$rtti.$Enum("TPasResolverStep",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TPasResolverStep});
  $mod.$rtti.$Set("TPasResolverSteps",{comptype: $mod.$rtti["TPasResolverStep"]});
  this.TPRResolveAlias = {"0": "prraNone", prraNone: 0, "1": "prraSimple", prraSimple: 1, "2": "prraAlias", prraAlias: 2};
  $mod.$rtti.$Enum("TPRResolveAlias",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TPRResolveAlias});
  this.TPRProcTypeDescFlag = {"0": "prptdUseName", prptdUseName: 0, "1": "prptdAddPaths", prptdAddPaths: 1, "2": "prptdResolveSimpleAlias", prptdResolveSimpleAlias: 2};
  $mod.$rtti.$Enum("TPRProcTypeDescFlag",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TPRProcTypeDescFlag});
  $mod.$rtti.$Set("TPRProcTypeDescFlags",{comptype: $mod.$rtti["TPRProcTypeDescFlag"]});
  rtl.createClass($mod,"TPasResolver",pas.PParser.TPasTreeContainer,function () {
    this.TResolveDataListKind = {"0": "lkBuiltIn", lkBuiltIn: 0, "1": "lkModule", lkModule: 1};
    this.cExact = 0;
    this.cAliasExact = 0 + 1;
    this.cCompatible = 1 + 1;
    this.cIntToIntConversion = $mod.TResolverBaseType.btRange;
    this.cFloatToFloatConversion = 2 * 37;
    this.cTypeConversion = 0 + 10000;
    this.cLossyConversion = 0 + 100000;
    this.cIntToFloatConversion = 0 + 400000;
    this.cIncompatible = 2147483647;
    this.TFindCallElData = function (s) {
      if (s) {
        this.Params = s.Params;
        this.Found = s.Found;
        this.LastProc = s.LastProc;
        this.ElScope = s.ElScope;
        this.StartScope = s.StartScope;
        this.Distance = s.Distance;
        this.Count = s.Count;
        this.List = s.List;
      } else {
        this.Params = null;
        this.Found = null;
        this.LastProc = null;
        this.ElScope = null;
        this.StartScope = null;
        this.Distance = 0;
        this.Count = 0;
        this.List = null;
      };
      this.$equal = function (b) {
        return (this.Params === b.Params) && ((this.Found === b.Found) && ((this.LastProc === b.LastProc) && ((this.ElScope === b.ElScope) && ((this.StartScope === b.StartScope) && ((this.Distance === b.Distance) && ((this.Count === b.Count) && (this.List === b.List)))))));
      };
    };
    $mod.$rtti.$Record("TPasResolver.TFindCallElData",{}).addFields("Params",pas.PasTree.$rtti["TParamsExpr"],"Found",pas.PasTree.$rtti["TPasElement"],"LastProc",pas.PasTree.$rtti["TPasProcedure"],"ElScope",$mod.$rtti["TPasScope"],"StartScope",$mod.$rtti["TPasScope"],"Distance",rtl.longint,"Count",rtl.longint,"List",pas.Classes.$rtti["TFPList"]);
    $mod.$rtti.$inherited("TPasResolver.PFindCallElData",{comptype: $mod.$rtti["TPasResolver.TFindCallElData"]});
    this.TFindOverloadProcKind = {"0": "fopkSameSignature", fopkSameSignature: 0, "1": "fopkProc", fopkProc: 1, "2": "fopkMethod", fopkMethod: 2};
    $mod.$rtti.$Enum("TPasResolver.TFindOverloadProcKind",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TFindOverloadProcKind});
    this.TFindOverloadProcData = function (s) {
      if (s) {
        this.Proc = s.Proc;
        this.Args = s.Args;
        this.Kind = s.Kind;
        this.OnlyScope = s.OnlyScope;
        this.FoundOverloadModifier = s.FoundOverloadModifier;
        this.FoundInSameScope = s.FoundInSameScope;
        this.Found = s.Found;
        this.ElScope = s.ElScope;
        this.StartScope = s.StartScope;
        this.FoundNonProc = s.FoundNonProc;
      } else {
        this.Proc = null;
        this.Args = null;
        this.Kind = 0;
        this.OnlyScope = null;
        this.FoundOverloadModifier = false;
        this.FoundInSameScope = 0;
        this.Found = null;
        this.ElScope = null;
        this.StartScope = null;
        this.FoundNonProc = null;
      };
      this.$equal = function (b) {
        return (this.Proc === b.Proc) && ((this.Args === b.Args) && ((this.Kind === b.Kind) && ((this.OnlyScope === b.OnlyScope) && ((this.FoundOverloadModifier === b.FoundOverloadModifier) && ((this.FoundInSameScope === b.FoundInSameScope) && ((this.Found === b.Found) && ((this.ElScope === b.ElScope) && ((this.StartScope === b.StartScope) && (this.FoundNonProc === b.FoundNonProc)))))))));
      };
    };
    $mod.$rtti.$Record("TPasResolver.TFindOverloadProcData",{}).addFields("Proc",pas.PasTree.$rtti["TPasProcedure"],"Args",pas.Classes.$rtti["TFPList"],"Kind",$mod.$rtti["TPasResolver.TFindOverloadProcKind"],"OnlyScope",$mod.$rtti["TPasScope"],"FoundOverloadModifier",rtl.boolean,"FoundInSameScope",rtl.longint,"Found",pas.PasTree.$rtti["TPasProcedure"],"ElScope",$mod.$rtti["TPasScope"],"StartScope",$mod.$rtti["TPasScope"],"FoundNonProc",pas.PasTree.$rtti["TPasElement"]);
    $mod.$rtti.$inherited("TPasResolver.PFindOverloadProcData",{comptype: $mod.$rtti["TPasResolver.TFindOverloadProcData"]});
    this.$init = function () {
      pas.PParser.TPasTreeContainer.$init.call(this);
      this.FAnonymousElTypePostfix = "";
      this.FBaseTypeChar = 0;
      this.FBaseTypeExtended = 0;
      this.FBaseTypeLength = 0;
      this.FBaseTypes = rtl.arraySetLength(null,null,38);
      this.FBaseTypeString = 0;
      this.FBuiltInProcs = rtl.arraySetLength(null,null,29);
      this.FDefaultNameSpace = "";
      this.FDefaultScope = null;
      this.FDynArrayMaxIndex = 0;
      this.FDynArrayMinIndex = 0;
      this.FLastCreatedData = rtl.arraySetLength(null,null,2);
      this.FLastElement = null;
      this.FLastMsg = "";
      this.FLastMsgArgs = [];
      this.FLastMsgElement = null;
      this.FLastMsgId = 0;
      this.FLastMsgNumber = 0;
      this.FLastMsgPattern = "";
      this.FLastMsgType = 0;
      this.FLastSourcePos = new pas.PScanner.TPasSourcePos();
      this.FOptions = {};
      this.FPendingForwardProcs = null;
      this.FRootElement = null;
      this.FScopeClass_Class = null;
      this.FScopeClass_InitialFinalization = null;
      this.FScopeClass_Module = null;
      this.FScopeClass_Proc = null;
      this.FScopeClass_Section = null;
      this.FScopeClass_WithExpr = null;
      this.FScopeCount = 0;
      this.FScopes = [];
      this.FStep = 0;
      this.FStoreSrcColumns = false;
      this.FSubScopeCount = 0;
      this.FSubScopes = [];
      this.FTopScope = null;
      this.cTGUIDToString = 0;
      this.cStringToTGUID = 0;
      this.cInterfaceToTGUID = 0;
      this.cInterfaceToString = 0;
      this.fExprEvaluator = null;
    };
    this.$final = function () {
      this.FBaseTypes = undefined;
      this.FBuiltInProcs = undefined;
      this.FDefaultScope = undefined;
      this.FLastCreatedData = undefined;
      this.FLastElement = undefined;
      this.FLastMsgArgs = undefined;
      this.FLastMsgElement = undefined;
      this.FLastSourcePos = undefined;
      this.FOptions = undefined;
      this.FPendingForwardProcs = undefined;
      this.FRootElement = undefined;
      this.FScopeClass_Class = undefined;
      this.FScopeClass_InitialFinalization = undefined;
      this.FScopeClass_Module = undefined;
      this.FScopeClass_Proc = undefined;
      this.FScopeClass_Section = undefined;
      this.FScopeClass_WithExpr = undefined;
      this.FScopes = undefined;
      this.FSubScopes = undefined;
      this.FTopScope = undefined;
      this.fExprEvaluator = undefined;
      pas.PParser.TPasTreeContainer.$final.call(this);
    };
    this.GetBaseTypes = function (bt) {
      var Result = null;
      Result = this.FBaseTypes[bt];
      return Result;
    };
    this.GetScopes = function (Index) {
      var Result = null;
      Result = this.FScopes[Index];
      return Result;
    };
    this.ClearResolveDataList = function (Kind) {
      var El = null;
      var RData = null;
      while (this.FLastCreatedData[Kind] !== null) {
        RData = this.FLastCreatedData[Kind];
        El = RData.FElement;
        El.FData = null;
        this.FLastCreatedData[Kind] = RData.Next;
        RData = rtl.freeLoc(RData);
      };
    };
    this.GetBaseTypeNames = function (bt) {
      var Result = "";
      if (this.FBaseTypes[bt] !== null) {
        Result = this.FBaseTypes[bt].FName}
       else Result = $mod.ResBaseTypeNames[bt];
      return Result;
    };
    this.GetBuiltInProcs = function (bp) {
      var Result = null;
      Result = this.FBuiltInProcs[bp];
      return Result;
    };
    this.OnFindFirstElement = function (El, ElScope, StartScope, FindFirstElementData, Abort) {
      var ok = false;
      ok = true;
      if (pas.PasTree.TPasProcedure.isPrototypeOf(El) && this.ProcNeedsParams(El.ProcType)) ok = false;
      if (ok || (FindFirstElementData.Found === null)) {
        FindFirstElementData.Found = El;
        FindFirstElementData.ElScope = ElScope;
        FindFirstElementData.StartScope = StartScope;
      };
      if (ok) Abort.set(true);
    };
    this.OnFindCallElements = function (El, ElScope, StartScope, FindProcsData, Abort) {
      var Proc = null;
      var PrevProc = null;
      var Distance = 0;
      var BuiltInProc = null;
      var CandidateFound = false;
      var VarType = null;
      var TypeEl = null;
      var C = null;
      var ProcScope = null;
      CandidateFound = false;
      if (pas.PasTree.TPasProcedure.isPrototypeOf(El)) {
        Proc = El;
        PrevProc = null;
        if (FindProcsData.Found === Proc) {
          FindProcsData.ElScope = ElScope;
          FindProcsData.StartScope = StartScope;
          return;
        };
        ProcScope = rtl.as(Proc.FData,$mod.TPasProcedureScope);
        if (ProcScope.DeclarationProc !== null) {
          Proc = ProcScope.DeclarationProc;
          El = Proc;
        };
        if (pas.PasTree.TPasProcedure.isPrototypeOf(FindProcsData.Found)) {
          PrevProc = FindProcsData.Found;
          if (pas.PScanner.TModeSwitch.msDelphi in FindProcsData.LastProc.FData.ModeSwitches) {
            if (!FindProcsData.LastProc.IsOverload() || !Proc.IsOverload()) {
              Abort.set(true);
              return;
            };
          } else {
            if (this.IsSameProcContext(Proc.FParent,FindProcsData.LastProc.FParent)) {}
            else {
              if (!$mod.ProcHasGroupOverload(FindProcsData.LastProc)) {
                Abort.set(true);
                return;
              };
            };
          };
          if (((FindProcsData.Distance === 0) && (PrevProc.FParent !== Proc.FParent)) && (PrevProc.FParent.$class.ClassType() === pas.PasTree.TPasClassType)) {
            Abort.set(true);
            return;
          };
          if (this.IsProcOverride(Proc,PrevProc)) {
            return;
          };
        };
        if ((pas.PScanner.TModeSwitch.msDelphi in ProcScope.ModeSwitches) && !Proc.IsOverload()) Abort.set(true);
        CandidateFound = true;
        Distance = this.CheckCallProcCompatibility(Proc.ProcType,FindProcsData.Params,false,false);
        FindProcsData.LastProc = Proc;
      } else if (pas.PasTree.TPasType.isPrototypeOf(El)) {
        TypeEl = this.ResolveAliasType(El);
        C = TypeEl.$class.ClassType();
        if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
          if (TypeEl.FData.$class.ClassType() === $mod.TResElDataBuiltInProc) {
            BuiltInProc = TypeEl.FData;
            if ((BuiltInProc.BuiltIn in rtl.createSet($mod.TResolverBuiltInProc.bfStrProc,$mod.TResolverBuiltInProc.bfStrFunc)) && ((BuiltInProc.BuiltIn === $mod.TResolverBuiltInProc.bfStrProc) === this.ParentNeedsExprResult(FindProcsData.Params))) {
              return;
            };
            Distance = BuiltInProc.GetCallCompatibility(BuiltInProc,FindProcsData.Params,false);
            CandidateFound = true;
          } else if ($mod.TResElDataBaseType.isPrototypeOf(TypeEl.FData)) {
            Abort.set(true);
            if (FindProcsData.Found !== null) return;
            Distance = this.CheckTypeCast(El,FindProcsData.Params,false);
            CandidateFound = true;
          };
        } else if (((((((((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasPointerType)) || (C === pas.PasTree.TPasRecordType)) || (C === pas.PasTree.TPasEnumType)) || (C === pas.PasTree.TPasProcedureType)) || (C === pas.PasTree.TPasFunctionType)) || (C === pas.PasTree.TPasArrayType)) || (C === pas.PasTree.TPasRangeType)) {
          Abort.set(true);
          if (FindProcsData.Found !== null) return;
          Distance = this.CheckTypeCast(El,FindProcsData.Params,false);
          CandidateFound = true;
        };
      } else if (pas.PasTree.TPasVariable.isPrototypeOf(El)) {
        Abort.set(true);
        if (FindProcsData.Found !== null) return;
        VarType = this.ResolveAliasType(El.VarType);
        if (pas.PasTree.TPasProcedureType.isPrototypeOf(VarType)) {
          Distance = this.CheckCallProcCompatibility(VarType,FindProcsData.Params,false,false);
          CandidateFound = true;
        };
      } else if (El.$class.ClassType() === pas.PasTree.TPasArgument) {
        Abort.set(true);
        if (FindProcsData.Found !== null) return;
        VarType = this.ResolveAliasType(El.ArgType);
        if (pas.PasTree.TPasProcedureType.isPrototypeOf(VarType)) {
          Distance = this.CheckCallProcCompatibility(VarType,FindProcsData.Params,false,false);
          CandidateFound = true;
        };
      };
      if (!CandidateFound) {
        Abort.set(true);
        if (FindProcsData.Found === null) {
          this.RaiseMsg(20170216151525,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["(",El.ElementTypeName()],FindProcsData.Params);
        };
        return;
      };
      if ((FindProcsData.Found === null) || ((FindProcsData.Distance === 2147483647) && (Distance < 2147483647))) {
        FindProcsData.Found = El;
        FindProcsData.ElScope = ElScope;
        FindProcsData.StartScope = StartScope;
        FindProcsData.Distance = Distance;
        FindProcsData.Count = 1;
        if (FindProcsData.List !== null) {
          FindProcsData.List.Clear();
          FindProcsData.List.Add(El);
        };
      } else if (Distance === 2147483647) {}
      else if ((FindProcsData.Distance === Distance) || (((Distance >= 100000) && (FindProcsData.Distance >= 100000)) && ((Distance >= 400000) === (FindProcsData.Distance >= 400000)))) {
        FindProcsData.Count += 1;
        if (FindProcsData.List !== null) {
          if (FindProcsData.List.IndexOf(El) >= 0) {
            this.RaiseInternalError(20160924230805,"");
          };
          FindProcsData.List.Add(El);
        };
      } else if (Distance < FindProcsData.Distance) {
        if ((Distance < 100000) || ((Distance >= 400000) !== (FindProcsData.Distance >= 400000))) {
          FindProcsData.Count = 1;
          if (FindProcsData.List !== null) FindProcsData.List.Clear();
        } else {
          FindProcsData.Count += 1;
        };
        FindProcsData.Found = El;
        FindProcsData.ElScope = ElScope;
        FindProcsData.StartScope = StartScope;
        FindProcsData.Distance = Distance;
        if (FindProcsData.List !== null) FindProcsData.List.Add(El);
      };
    };
    this.OnFindOverloadProc = function (El, ElScope, StartScope, FindOverloadData, Abort) {
      var Self = this;
      var Proc = null;
      var Store = false;
      var SameScope = false;
      var ProcScope = null;
      function CountProcInSameModule() {
        FindOverloadData.FoundInSameScope += 1;
        if (Proc.IsOverload()) FindOverloadData.FoundOverloadModifier = true;
      };
      if (!pas.PasTree.TPasProcedure.isPrototypeOf(El)) {
        if (pas.PasTree.TPasVariable.isPrototypeOf(El)) {
          if (El.Visibility === pas.PasTree.TPasMemberVisibility.visStrictPrivate) return;
          if ((El.Visibility === pas.PasTree.TPasMemberVisibility.visPrivate) && (El.GetModule() !== StartScope.FElement.GetModule())) return;
        };
        FindOverloadData.FoundNonProc = El;
        Abort.set(true);
        if ($mod.TResElDataBuiltInProc.isPrototypeOf(El.FData)) {
          if (FindOverloadData.FoundOverloadModifier || FindOverloadData.Proc.IsOverload()) return;
        };
        var $tmp1 = FindOverloadData.Kind;
        if ($tmp1 === $mod.TPasResolver.TFindOverloadProcKind.fopkProc) {
          if (FindOverloadData.Proc.GetModule() === El.GetModule()) {
            Self.RaiseMsg(20170216151649,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[El.FName,Self.GetElementSourcePosStr(El)],FindOverloadData.Proc.ProcType)}
           else {
            if (pas.PasTree.TPasClassType.isPrototypeOf(FindOverloadData.Proc.FParent)) Self.LogMsg(20171118205344,pas.PScanner.TMessageType.mtHint,3112,rtl.getResStr(pas.PasResolveEval,"sFunctionHidesIdentifier"),[Self.GetElementSourcePosStr(El)],FindOverloadData.Proc.ProcType);
          }}
         else if ($tmp1 === $mod.TPasResolver.TFindOverloadProcKind.fopkMethod) Self.RaiseMsg(20171118232543,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[El.FName,Self.GetElementSourcePosStr(El)],FindOverloadData.Proc.ProcType);
        return;
      };
      Proc = El;
      if (El === FindOverloadData.Proc) {
        CountProcInSameModule();
        return;
      };
      if ((FindOverloadData.OnlyScope !== null) && (FindOverloadData.OnlyScope !== ElScope)) {
        Abort.set(false);
        return;
      };
      Store = Self.CheckOverloadProcCompatibility(FindOverloadData.Proc,Proc);
      if (FindOverloadData.Kind === $mod.TPasResolver.TFindOverloadProcKind.fopkSameSignature) {}
      else {
        if (FindOverloadData.Kind === $mod.TPasResolver.TFindOverloadProcKind.fopkProc) {
          SameScope = FindOverloadData.Proc.GetModule() === Proc.GetModule()}
         else SameScope = FindOverloadData.Proc.FParent === Proc.FParent;
        if (SameScope) {
          if (pas.PScanner.TModeSwitch.msObjfpc in Self.FCurrentParser.GetCurrentModeSwitches()) {
            if ($mod.ProcHasGroupOverload(FindOverloadData.Proc)) {
              Proc.FData.Flags = rtl.includeSet(Proc.FData.Flags,$mod.TPasProcedureScopeFlag.ppsfIsGroupOverload)}
             else if ($mod.ProcHasGroupOverload(Proc)) FindOverloadData.Proc.FData.Flags = rtl.includeSet(FindOverloadData.Proc.FData.Flags,$mod.TPasProcedureScopeFlag.ppsfIsGroupOverload);
          };
          if (Store) {
            Self.RaiseMsg(20171118221821,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[Proc.FName,Self.GetElementSourcePosStr(Proc)],FindOverloadData.Proc.ProcType);
          } else {
            if (pas.PScanner.TModeSwitch.msDelphi in Self.FCurrentParser.GetCurrentModeSwitches()) {
              if (!Proc.IsOverload()) {
                Self.RaiseMsg(20171118222112,3075,rtl.getResStr(pas.PasResolveEval,"sPreviousDeclMissesOverload"),[Proc.FName,Self.GetElementSourcePosStr(Proc)],FindOverloadData.Proc.ProcType)}
               else if (!FindOverloadData.Proc.IsOverload()) Self.RaiseMsg(20171118222147,3076,rtl.getResStr(pas.PasResolveEval,"sOverloadedProcMissesOverload"),[Self.GetElementSourcePosStr(Proc)],FindOverloadData.Proc.ProcType);
            };
            CountProcInSameModule();
          };
        } else {
          if (FindOverloadData.Proc.IsOverride()) {}
          else if (FindOverloadData.Proc.IsReintroduced()) {}
          else {
            if (Store || ((FindOverloadData.FoundInSameScope === 1) && !$mod.ProcHasGroupOverload(FindOverloadData.Proc))) {
              if ((FindOverloadData.Kind === $mod.TPasResolver.TFindOverloadProcKind.fopkMethod) && (Proc.IsVirtual() || Proc.IsOverride())) {
                Self.LogMsg(20170216151712,pas.PScanner.TMessageType.mtWarning,3077,rtl.getResStr(pas.PasResolveEval,"sMethodHidesMethodOfBaseType"),[FindOverloadData.Proc.FName,Proc.FParent.FName,Self.GetElementSourcePosStr(Proc)],FindOverloadData.Proc.ProcType)}
               else {
                if (pas.PasTree.TPasClassType.isPrototypeOf(FindOverloadData.Proc.FParent)) {
                  ProcScope = rtl.as(Proc.FData,$mod.TPasProcedureScope);
                  if ((ProcScope.ImplProc !== null) && !Self.ProcHasImplElements(ProcScope.ImplProc)) {}
                  else if (pas.PasTree.TPasConstructor.isPrototypeOf(Proc) && (FindOverloadData.Proc.$class.ClassType() === Proc.$class.ClassType())) {}
                  else Self.LogMsg(20171118214523,pas.PScanner.TMessageType.mtHint,3021,rtl.getResStr(pas.PasResolveEval,"sFunctionHidesIdentifier"),[Self.GetElementSourcePosStr(Proc)],FindOverloadData.Proc.ProcType);
                };
              };
              Abort.set(true);
            };
          };
        };
      };
      if (Store) {
        FindOverloadData.Found = Proc;
        FindOverloadData.ElScope = ElScope;
        FindOverloadData.StartScope = StartScope;
        Abort.set(true);
      };
    };
    this.IsSameProcContext = function (ProcParentA, ProcParentB) {
      var Result = false;
      if (ProcParentA === ProcParentB) return true;
      if (ProcParentA.$class.ClassType() === pas.PasTree.TInterfaceSection) {
        if ((ProcParentB.$class.ClassType() === pas.PasTree.TImplementationSection) && (ProcParentB.FParent === ProcParentA.FParent)) return true;
      } else if (ProcParentB.$class.ClassType() === pas.PasTree.TInterfaceSection) {
        if ((ProcParentA.$class.ClassType() === pas.PasTree.TImplementationSection) && (ProcParentA.FParent === ProcParentB.FParent)) return true;
      };
      Result = false;
      return Result;
    };
    this.FindProcOverload = function (ProcName, Proc, OnlyScope) {
      var Result = null;
      var FindData = new this.TFindOverloadProcData();
      var Abort = false;
      FindData = new this.TFindOverloadProcData();
      FindData.Proc = Proc;
      FindData.Args = Proc.ProcType.Args;
      FindData.Kind = $mod.TPasResolver.TFindOverloadProcKind.fopkSameSignature;
      FindData.OnlyScope = OnlyScope;
      Abort = false;
      OnlyScope.IterateElements(ProcName,OnlyScope,rtl.createCallback(this,"OnFindOverloadProc"),FindData,{get: function () {
          return Abort;
        }, set: function (v) {
          Abort = v;
        }});
      Result = FindData.Found;
      return Result;
    };
    this.SetCurrentParser = function (AValue) {
      if (AValue === this.FCurrentParser) return;
      this.Clear();
      pas.PParser.TPasTreeContainer.SetCurrentParser.call(this,AValue);
      if (this.FCurrentParser !== null) {
        this.FCurrentParser.SetOptions(rtl.unionSet(this.FCurrentParser.FOptions,$mod.po_Resolver));
        if ((this.FCurrentParser.FScanner !== null) && (this.FCurrentParser.FScanner.FOnWarnDirective === null)) this.FCurrentParser.FScanner.FOnWarnDirective = rtl.createCallback(this,"ScannerWarnDirective");
      };
    };
    this.ScannerWarnDirective = function (Sender, Identifier, State, Handled) {
      var MsgNumbers = [];
      var i = 0;
      if (!this.$class.GetWarnIdentifierNumbers(Identifier,{get: function () {
          return MsgNumbers;
        }, set: function (v) {
          MsgNumbers = v;
        }})) return;
      Handled.set(true);
      for (var $l1 = 0, $end2 = rtl.length(MsgNumbers) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Sender.SetWarnMsgState(MsgNumbers[i],State);
      };
    };
    this.SetRootElement = function (AValue) {
      if (this.FRootElement === AValue) return;
      this.FRootElement = AValue;
    };
    this.CheckTopScope = function (ExpectedClass, AllowDescendants) {
      var Scope = null;
      Scope = this.FTopScope;
      if (Scope === null) this.RaiseInternalError(20160922163319,("Expected TopScope=" + ExpectedClass.$classname) + " but found nil");
      if (Scope.$class.ClassType() !== ExpectedClass) if (!AllowDescendants || !Scope.$class.InheritsFrom(ExpectedClass)) this.RaiseInternalError(20160922163323,(("Expected TopScope=" + ExpectedClass.$classname) + " but found ") + Scope.$classname);
    };
    this.AddIdentifier = function (Scope, aName, El, Kind) {
      var Result = null;
      var Identifier = null;
      var OlderIdentifier = null;
      var ClassScope = null;
      var OlderEl = null;
      var IsClassScope = false;
      var C = null;
      if (aName === "") return null;
      IsClassScope = $mod.TPasClassScope.isPrototypeOf(Scope);
      if (El.Visibility === pas.PasTree.TPasMemberVisibility.visPublished) {
        C = El.$class.ClassType();
        if ((C === pas.PasTree.TPasProperty) || (C === pas.PasTree.TPasVariable)) {}
        else if ((C === pas.PasTree.TPasProcedure) || (C === pas.PasTree.TPasFunction)) {}
        else this.RaiseMsg(20170403223024,3053,rtl.getResStr(pas.PasResolveEval,"sSymbolCannotBePublished"),[],El);
      };
      if (((Kind === $mod.TPasIdentifierKind.pikSimple) && IsClassScope) && (El.$class.ClassType() !== pas.PasTree.TPasProperty)) {
        ClassScope = Scope.AncestorScope;
        while (ClassScope !== null) {
          OlderIdentifier = ClassScope.FindLocalIdentifier(aName);
          while (OlderIdentifier !== null) {
            OlderEl = OlderIdentifier.FElement;
            OlderIdentifier = OlderIdentifier.NextSameIdentifier;
            if (pas.PasTree.TPasVariable.isPrototypeOf(OlderEl)) {
              if (OlderEl.Visibility === pas.PasTree.TPasMemberVisibility.visStrictPrivate) continue;
              if ((OlderEl.Visibility === pas.PasTree.TPasMemberVisibility.visPrivate) && (OlderEl.GetModule() !== El.GetModule())) continue;
            };
            this.RaiseMsg(20170221130001,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[aName,this.GetElementSourcePosStr(OlderEl)],El);
          };
          ClassScope = ClassScope.AncestorScope;
        };
      };
      Identifier = Scope.AddIdentifier(aName,El,Kind);
      OlderIdentifier = Identifier.NextSameIdentifier;
      if (OlderIdentifier !== null) if (((Identifier.Kind === $mod.TPasIdentifierKind.pikSimple) || (OlderIdentifier.Kind === $mod.TPasIdentifierKind.pikSimple)) || (El.Visibility === pas.PasTree.TPasMemberVisibility.visPublished)) {
        if ((OlderIdentifier.FElement.$class.ClassType() === pas.PasTree.TPasEnumValue) && (OlderIdentifier.FElement.FParent.FParent !== Scope.FElement)) Scope.RemoveLocalIdentifier(OlderIdentifier.FElement);
        this.RaiseMsg(20170216151530,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[aName,this.GetElementSourcePosStr(OlderIdentifier.FElement)],El);
      };
      Result = Identifier;
      return Result;
    };
    this.AddModule = function (El) {
      var C = null;
      var ModScope = null;
      if (this.FTopScope !== this.FDefaultScope) this.RaiseInvalidScopeForElement(20160922163504,El,"");
      ModScope = this.PushScope$1(El,this.FScopeClass_Module);
      ModScope.VisibilityContext = El;
      ModScope.FirstName = $mod.FirstDottedIdentifier(El.FName);
      C = El.$class.ClassType();
      if (((C === pas.PasTree.TPasProgram) || (C === pas.PasTree.TPasLibrary)) || (C === pas.PasTree.TPasPackage)) {
        this.FDefaultNameSpace = $mod.ChompDottedIdentifier(El.FName)}
       else this.FDefaultNameSpace = "";
      ModScope.BoolSwitches = rtl.refSet(this.FCurrentParser.FScanner.FCurrentBoolSwitches);
    };
    this.AddSection = function (El) {
      var Scope = null;
      if ($mod.TPasSectionScope.isPrototypeOf(this.FTopScope)) this.FinishSection(rtl.as(this.FTopScope.FElement,pas.PasTree.TPasSection));
      if ($mod.TPasModuleScope.isPrototypeOf(this.FTopScope)) this.FTopScope.BoolSwitches = rtl.refSet(this.FCurrentParser.FScanner.FCurrentBoolSwitches);
      this.FPendingForwardProcs.Add(El);
      Scope = this.PushScope$1(El,this.FScopeClass_Section);
      Scope.BoolSwitches = rtl.refSet(this.FCurrentParser.FScanner.FCurrentBoolSwitches);
      Scope.ModeSwitches = rtl.refSet(this.FCurrentParser.FScanner.FCurrentModeSwitches);
    };
    this.AddInitialFinalizationSection = function (El) {
      this.PushScope$1(El,this.FScopeClass_InitialFinalization);
    };
    this.AddType = function (El) {
      if (El.FName === "") return;
      if (!$mod.TPasIdentifierScope.isPrototypeOf(this.FTopScope)) this.RaiseInvalidScopeForElement(20160922163506,El,"");
      this.AddIdentifier(this.FTopScope,El.FName,El,$mod.TPasIdentifierKind.pikSimple);
    };
    this.AddRecordType = function (El) {
      if (!$mod.TPasIdentifierScope.isPrototypeOf(this.FTopScope)) this.RaiseInvalidScopeForElement(20160922163508,El,"");
      if (El.FName !== "") {
        this.AddIdentifier(this.FTopScope,El.FName,El,$mod.TPasIdentifierKind.pikSimple);
        this.FPendingForwardProcs.Add(El);
      };
      if (El.FParent.$class.ClassType() !== pas.PasTree.TPasVariant) this.PushScope$1(El,$mod.TPasRecordScope);
    };
    this.AddClassType = function (El) {
      var Duplicate = null;
      var ForwardDecl = null;
      var CurScope = null;
      if (!$mod.TPasIdentifierScope.isPrototypeOf(this.FTopScope)) this.RaiseInvalidScopeForElement(20160922163510,El,"");
      CurScope = this.FTopScope;
      Duplicate = CurScope.FindLocalIdentifier(El.FName);
      if ((((Duplicate !== null) && pas.PasTree.TPasClassType.isPrototypeOf(Duplicate.FElement)) && Duplicate.FElement.IsForward) && (Duplicate.FElement.FParent === El.FParent)) {
        ForwardDecl = Duplicate.FElement;
        if (ForwardDecl.FData !== null) this.RaiseInternalError(20160922163513,"forward class has already customdata");
        this.CreateReference(El,ForwardDecl,$mod.TResolvedRefAccess.rraRead,null);
        Duplicate.SetElement(El);
      } else this.AddIdentifier(CurScope,El.FName,El,$mod.TPasIdentifierKind.pikSimple);
      this.FPendingForwardProcs.Add(El);
    };
    this.AddVariable = function (El) {
      if (El.FName === "") return;
      if (!$mod.TPasIdentifierScope.isPrototypeOf(this.FTopScope)) this.RaiseInvalidScopeForElement(20160929205730,El,"");
      this.AddIdentifier(this.FTopScope,El.FName,El,$mod.TPasIdentifierKind.pikSimple);
    };
    this.AddResourceString = function (El) {
      var C = null;
      if (!$mod.TPasIdentifierScope.isPrototypeOf(this.FTopScope)) this.RaiseInvalidScopeForElement(20171004092114,El,"");
      C = El.FParent.$class.ClassType();
      if (!C.InheritsFrom(pas.PasTree.TPasSection)) this.RaiseNotYetImplemented(20171004092518,El,"");
      this.AddIdentifier(this.FTopScope,El.FName,El,$mod.TPasIdentifierKind.pikSimple);
    };
    this.AddEnumType = function (El) {
      var CanonicalSet = null;
      if (!$mod.TPasIdentifierScope.isPrototypeOf(this.FTopScope)) this.RaiseInvalidScopeForElement(20160929205732,El,"");
      this.AddIdentifier(this.FTopScope,El.FName,El,$mod.TPasIdentifierKind.pikSimple);
      this.PushScope$1(El,$mod.TPasEnumTypeScope);
      if (pas.PasTree.TPasSetType.isPrototypeOf(El.FParent)) {
        CanonicalSet = El.FParent;
        CanonicalSet.AddRef();
      } else {
        CanonicalSet = pas.PasTree.TPasSetType.$create("Create$1",["",El]);
        CanonicalSet.EnumType = El;
        El.AddRef();
      };
      this.FTopScope.CanonicalSet = CanonicalSet;
    };
    this.AddEnumValue = function (El) {
      var i = 0;
      var Scope = null;
      var Old = null;
      if (!$mod.TPasEnumTypeScope.isPrototypeOf(this.FTopScope)) this.RaiseInvalidScopeForElement(20160929205736,El,"");
      this.AddIdentifier(this.FTopScope,El.FName,El,$mod.TPasIdentifierKind.pikSimple);
      if ((pas.PScanner.TBoolSwitch.bsScopedEnums in this.FCurrentParser.FScanner.FCurrentBoolSwitches) && !pas.PasTree.TPasSetType.isPrototypeOf(El.FParent.FParent)) return;
      for (var $l1 = this.FScopeCount - 2; $l1 >= 0; $l1--) {
        i = $l1;
        Scope = this.GetScopes(i);
        if ($mod.TPasClassScope.isPrototypeOf(Scope) || $mod.TPasRecordScope.isPrototypeOf(Scope)) {
          Old = Scope.FindIdentifier(El.FName);
          if (Old === null) Scope.AddIdentifier(El.FName,El,$mod.TPasIdentifierKind.pikSimple);
        } else if ($mod.TPasProcedureScope.isPrototypeOf(Scope) || $mod.TPasSectionScope.isPrototypeOf(Scope)) {
          Old = Scope.FindLocalIdentifier(El.FName);
          if (Old !== null) this.RaiseMsg(20170216152224,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[El.FName,this.GetElementSourcePosStr(Old.FElement)],El);
          Scope.AddIdentifier(El.FName,El,$mod.TPasIdentifierKind.pikSimple);
          break;
        } else break;
      };
    };
    this.AddProperty = function (El) {
      if (El.FName === "") this.RaiseNotYetImplemented(20160922163518,El,"");
      if (!$mod.TPasClassScope.isPrototypeOf(this.FTopScope)) this.RaiseInvalidScopeForElement(20160922163520,El,"");
      this.AddIdentifier(this.FTopScope,El.FName,El,$mod.TPasIdentifierKind.pikSimple);
      this.PushScope$1(El,$mod.TPasPropertyScope);
    };
    this.AddProcedure = function (El) {
      var ProcName = "";
      var aClassName = "";
      var p = 0;
      var CurClassType = null;
      var ProcScope = null;
      var HasDot = false;
      var CurEl = null;
      var Identifier = null;
      var CurClassScope = null;
      if (!$mod.TPasIdentifierScope.isPrototypeOf(this.FTopScope)) this.RaiseInvalidScopeForElement(20160922163522,El,"");
      ProcName = El.FName;
      HasDot = pas.System.Pos(".",ProcName) > 1;
      if (!HasDot) this.AddIdentifier(this.FTopScope,ProcName,El,$mod.TPasIdentifierKind.pikProc);
      ProcScope = this.PushScope$1(El,this.FScopeClass_Proc);
      ProcScope.ModeSwitches = rtl.refSet(this.FCurrentParser.GetCurrentModeSwitches());
      if (HasDot) {
        CurClassType = null;
        do {
          p = pas.System.Pos(".",ProcName);
          if (p < 1) {
            if (CurClassType === null) this.RaiseInternalError(20161013170829,"");
            break;
          };
          aClassName = pas.SysUtils.LeftStr(ProcName,p - 1);
          pas.System.Delete({get: function () {
              return ProcName;
            }, set: function (v) {
              ProcName = v;
            }},1,p);
          if (!$mod.IsValidIdent(aClassName,false,false)) this.RaiseNotYetImplemented(20161013170844,El,"");
          if (CurClassType !== null) {
            CurClassScope = CurClassType.FData;
            Identifier = CurClassScope.FindLocalIdentifier(aClassName);
            if (Identifier === null) this.RaiseIdentifierNotFound(20180430130635,aClassName,El);
            CurEl = Identifier.FElement;
          } else CurEl = this.FindElementWithoutParams(aClassName,El,false);
          if (!pas.PasTree.TPasClassType.isPrototypeOf(CurEl)) {
            aClassName = pas.SysUtils.LeftStr(El.FName,(El.FName.length - ProcName.length) - 1);
            this.RaiseXExpectedButYFound(20170216152557,"class",(aClassName + ":") + $mod.GetElementTypeName(CurEl),El);
          };
          CurClassType = CurEl;
          if (CurClassType.ObjKind !== pas.PasTree.TPasObjKind.okClass) {
            aClassName = pas.SysUtils.LeftStr(El.FName,(El.FName.length - ProcName.length) - 1);
            this.RaiseXExpectedButYFound(20180321161722,"class",(aClassName + ":") + $mod.GetElementTypeName(CurEl),El);
          };
          if (CurClassType.GetModule() !== El.GetModule()) {
            aClassName = pas.SysUtils.LeftStr(El.FName,(El.FName.length - ProcName.length) - 1);
            this.RaiseMsg(20180211230432,3087,rtl.getResStr(pas.PasResolveEval,"sMethodClassXInOtherUnitY"),[aClassName,CurClassType.GetModule().FName],El);
          };
        } while (!false);
        if (!$mod.IsValidIdent(ProcName,false,false)) this.RaiseNotYetImplemented(20161013170956,El,"");
        ProcScope.VisibilityContext = CurClassType;
        ProcScope.ClassScope = rtl.as($mod.NoNil(CurClassType.FData),$mod.TPasClassScope);
      };
    };
    this.AddProcedureBody = function (El) {
      if (El === null) ;
      this.CheckTopScope(this.FScopeClass_Proc,false);
    };
    this.AddArgument = function (El) {
      var ProcType = null;
      var i = 0;
      var Arg = null;
      if (El.FName === "") this.RaiseInternalError(20160922163526,pas.PasResolveEval.GetObjName(El));
      if (this.FTopScope === null) this.RaiseInvalidScopeForElement(20160922163529,El,"");
      if (El.FParent.$class.ClassType() === pas.PasTree.TPasProperty) {
        if (this.FTopScope.$class.ClassType() !== $mod.TPasPropertyScope) this.RaiseInvalidScopeForElement(20161014124530,El,"");
        this.AddIdentifier(this.FTopScope,El.FName,El,$mod.TPasIdentifierKind.pikSimple);
      } else if (pas.PasTree.TPasProcedureType.isPrototypeOf(El.FParent)) {
        ProcType = El.FParent;
        if (pas.PasTree.TPasProcedure.isPrototypeOf(ProcType.FParent)) {
          if (this.FTopScope.$class.ClassType() !== this.FScopeClass_Proc) this.RaiseInvalidScopeForElement(20160922163529,El,pas.PasResolveEval.GetObjName(this.FTopScope));
          this.AddIdentifier(this.FTopScope,El.FName,El,$mod.TPasIdentifierKind.pikSimple);
        } else {
          for (var $l1 = 0, $end2 = ProcType.Args.FCount - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            Arg = rtl.getObject(ProcType.Args.Get(i));
            if ((Arg !== El) && (pas.SysUtils.CompareText(rtl.getObject(ProcType.Args.Get(i)).FName,El.FName) === 0)) this.RaiseMsg(20170216152225,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[Arg.FName,this.GetElementSourcePosStr(Arg)],El);
          };
        };
      } else this.RaiseNotYetImplemented(20161014124937,El,"");
    };
    this.AddFunctionResult = function (El) {
      if (this.FTopScope.$class.ClassType() !== this.FScopeClass_Proc) return;
      if (pas.PasTree.TPasProcedureType.isPrototypeOf(El.FParent)) {
        if (!pas.PasTree.TPasProcedure.isPrototypeOf(El.FParent.FParent)) return;
      } else if (!pas.PasTree.TPasProcedure.isPrototypeOf(El.FParent)) return;
      this.AddIdentifier(this.FTopScope,$mod.ResolverResultVar,El,$mod.TPasIdentifierKind.pikSimple);
    };
    this.AddExceptOn = function (El) {
      this.PushScope$1(El,$mod.TPasExceptOnScope);
    };
    this.ResolveImplBlock = function (Block) {
      var i = 0;
      if (Block === null) return;
      for (var $l1 = 0, $end2 = Block.Elements.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ResolveImplElement(rtl.getObject(Block.Elements.Get(i)));
      };
    };
    this.ResolveImplElement = function (El) {
      var C = null;
      if (El === null) return;
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasImplBeginBlock) {
        this.ResolveImplBlock(El)}
       else if (C === pas.PasTree.TPasImplAssign) {
        this.ResolveImplAssign(El)}
       else if (C === pas.PasTree.TPasImplSimple) {
        this.ResolveImplSimple(El)}
       else if (C === pas.PasTree.TPasImplBlock) {
        this.ResolveImplBlock(El)}
       else if (C === pas.PasTree.TPasImplRepeatUntil) {
        this.ResolveImplBlock(El);
        this.ResolveStatementConditionExpr(El.ConditionExpr);
      } else if (C === pas.PasTree.TPasImplIfElse) {
        this.ResolveStatementConditionExpr(El.ConditionExpr);
        this.ResolveImplElement(El.IfBranch);
        this.ResolveImplElement(El.ElseBranch);
      } else if (C === pas.PasTree.TPasImplWhileDo) {
        this.ResolveStatementConditionExpr(El.ConditionExpr);
        this.ResolveImplElement(El.Body);
      } else if (C === pas.PasTree.TPasImplCaseOf) {
        this.ResolveImplCaseOf(El)}
       else if (C === pas.PasTree.TPasImplLabelMark) {
        this.ResolveImplLabelMark(El)}
       else if (C === pas.PasTree.TPasImplForLoop) {
        this.ResolveImplForLoop(El)}
       else if (C === pas.PasTree.TPasImplTry) {
        this.ResolveImplBlock(El);
        this.ResolveImplBlock(El.FinallyExcept);
        this.ResolveImplBlock(El.ElseBranch);
      } else if (C === pas.PasTree.TPasImplExceptOn) {}
      else if (C === pas.PasTree.TPasImplRaise) {
        this.ResolveImplRaise(El)}
       else if (C === pas.PasTree.TPasImplCommand) {
        if (El.Command !== "") this.RaiseNotYetImplemented(20160922163442,El,"TPasResolver.ResolveImplElement");
      } else if (C === pas.PasTree.TPasImplAsmStatement) {
        this.ResolveImplAsm(El)}
       else if (C === pas.PasTree.TPasImplWithDo) {
        this.ResolveImplWithDo(El)}
       else this.RaiseNotYetImplemented(20160922163445,El,"TPasResolver.ResolveImplElement");
    };
    this.ResolveImplCaseOf = function (CaseOf) {
      var Self = this;
      function TRangeItem(s) {
        if (s) {
          this.RangeStart = s.RangeStart;
          this.RangeEnd = s.RangeEnd;
          this.Expr = s.Expr;
          this.aString = s.aString;
        } else {
          this.RangeStart = 0;
          this.RangeEnd = 0;
          this.Expr = null;
          this.aString = "";
        };
        this.$equal = function (b) {
          return (this.RangeStart === b.RangeStart) && ((this.RangeEnd === b.RangeEnd) && ((this.Expr === b.Expr) && (this.aString === b.aString)));
        };
      };
      function CreateValues(ResolvedEl, ValueSet) {
        var Result = false;
        var CaseExprType = null;
        Result = false;
        if (ResolvedEl.BaseType in $mod.btAllInteger) {
          ValueSet.set(pas.PasResolveEval.TResEvalSet.$create("CreateEmpty",[pas.PasResolveEval.TRESetElKind.revskInt,null]));
          Result = true;
        } else if (ResolvedEl.BaseType in $mod.btAllBooleans) {
          ValueSet.set(pas.PasResolveEval.TResEvalSet.$create("CreateEmpty",[pas.PasResolveEval.TRESetElKind.revskBool,null]));
          Result = true;
        } else if (ResolvedEl.BaseType in $mod.btAllChars) {
          ValueSet.set(pas.PasResolveEval.TResEvalSet.$create("CreateEmpty",[pas.PasResolveEval.TRESetElKind.revskChar,null]));
          Result = true;
        } else if (ResolvedEl.BaseType in $mod.btAllStrings) {
          Result = true}
         else if (ResolvedEl.BaseType === $mod.TResolverBaseType.btContext) {
          CaseExprType = ResolvedEl.LoTypeEl;
          if (CaseExprType.$class.ClassType() === pas.PasTree.TPasEnumType) {
            ValueSet.set(pas.PasResolveEval.TResEvalSet.$create("CreateEmpty",[pas.PasResolveEval.TRESetElKind.revskEnum,CaseExprType]));
            Result = true;
          };
        } else if (ResolvedEl.BaseType === $mod.TResolverBaseType.btRange) {
          if (ResolvedEl.SubType in $mod.btAllInteger) {
            ValueSet.set(pas.PasResolveEval.TResEvalSet.$create("CreateEmpty",[pas.PasResolveEval.TRESetElKind.revskInt,null]));
            Result = true;
          } else if (ResolvedEl.SubType in $mod.btAllBooleans) {
            ValueSet.set(pas.PasResolveEval.TResEvalSet.$create("CreateEmpty",[pas.PasResolveEval.TRESetElKind.revskBool,null]));
            Result = true;
          } else if (ResolvedEl.SubType in $mod.btAllChars) {
            ValueSet.set(pas.PasResolveEval.TResEvalSet.$create("CreateEmpty",[pas.PasResolveEval.TRESetElKind.revskChar,null]));
            Result = true;
          } else if (ResolvedEl.SubType === $mod.TResolverBaseType.btContext) {
            CaseExprType = ResolvedEl.LoTypeEl;
            if (CaseExprType.$class.ClassType() === pas.PasTree.TPasEnumType) {
              ValueSet.set(pas.PasResolveEval.TResEvalSet.$create("CreateEmpty",[pas.PasResolveEval.TRESetElKind.revskEnum,CaseExprType]));
              Result = true;
            };
          };
        };
        return Result;
      };
      function AddRangeItem(Values, RangeStart, RangeEnd, Expr) {
        var Result = null;
        Result = new TRangeItem();
        Result.RangeStart = RangeStart;
        Result.RangeEnd = RangeEnd;
        Result.Expr = Expr;
        Values.Add(Result);
        return Result;
      };
      function AddValue(Value, Values, ValueSet, Expr) {
        var Result = false;
        function AddString(s) {
          var Result = false;
          var Dupl = null;
          var i = 0;
          var o = 0;
          var Item = null;
          if (s.length === 1) {
            o = s.charCodeAt(1 - 1)}
           else o = -1;
          for (var $l1 = 0, $end2 = Values.FCount - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            Item = Values.Get(i);
            if ((Item.aString === s) || ((o >= Item.RangeStart) && (o <= Item.RangeEnd))) {
              Dupl = Values.Get(i).Expr;
              Self.RaiseMsg(20180424220139,3108,rtl.getResStr(pas.PasResolveEval,"sDuplicateCaseValueXatY"),["string",Self.GetElementSourcePosStr(Dupl)],Expr);
            };
          };
          Item = AddRangeItem(Values,1,0,Expr);
          Item.aString = s;
          Result = true;
          return Result;
        };
        function AddStringRange(CharStart, CharEnd) {
          var Result = false;
          var i = 0;
          var o = 0;
          var s = "";
          var Item = null;
          var Dupl = null;
          if (CharEnd > 0xffff) Self.RaiseNotYetImplemented(20180501221359,Expr,Value.AsDebugString());
          for (var $l1 = 0, $end2 = Values.FCount - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            Item = Values.Get(i);
            s = Item.aString;
            if (s.length === 1) {
              o = s.charCodeAt(1 - 1)}
             else o = -1;
            if (((o >= CharStart) && (o <= CharEnd)) || ((Item.RangeStart <= CharEnd) && (Item.RangeEnd >= CharStart))) {
              Dupl = Values.Get(i).Expr;
              Self.RaiseMsg(20180501223914,3108,rtl.getResStr(pas.PasResolveEval,"sDuplicateCaseValueXatY"),["string",Self.GetElementSourcePosStr(Dupl)],Expr);
            };
          };
          AddRangeItem(Values,CharStart,CharEnd,Expr);
          Result = true;
          return Result;
        };
        var RangeStart = 0;
        var RangeEnd = 0;
        var i = 0;
        var Item = null;
        Result = true;
        var $tmp1 = Value.Kind;
        if ($tmp1 === pas.PasResolveEval.TREVKind.revkBool) {
          RangeStart = Value.B + 0;
          RangeEnd = RangeStart;
        } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkInt) {
          RangeStart = Value.Int;
          RangeEnd = RangeStart;
        } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkUInt) {
          if (Value.UInt > 4503599627370495) Self.fExprEvaluator.EmitRangeCheckConst(20180424212414,Value.AsString(),"0",pas.SysUtils.IntToStr(4503599627370495),Expr,pas.PScanner.TMessageType.mtError);
          RangeStart = Value.UInt;
          RangeEnd = RangeStart;
        } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
          if (ValueSet === null) {
            return AddString(Value.S)}
           else {
            if (Value.S.length !== 1) return false;
            RangeStart = Value.S.charAt(0).charCodeAt();
            RangeEnd = RangeStart;
          }}
         else if ($tmp1 === pas.PasResolveEval.TREVKind.revkEnum) {
          RangeStart = Value.Index;
          RangeEnd = RangeStart;
        } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeInt) {
          if (ValueSet === null) {
            return AddStringRange(Value.RangeStart,Value.RangeEnd)}
           else {
            RangeStart = Value.RangeStart;
            RangeEnd = Value.RangeEnd;
          }}
         else if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeUInt) {
          if (Value.RangeEnd > 4503599627370495) Self.fExprEvaluator.EmitRangeCheckConst(20180424212648,Value.AsString(),"0",pas.SysUtils.IntToStr(4503599627370495),Expr,pas.PScanner.TMessageType.mtError);
          RangeStart = Value.RangeStart;
          RangeEnd = Value.RangeEnd;
        } else {
          Result = false;
        };
        if (ValueSet === null) Self.RaiseNotYetImplemented(20180424215728,Expr,Value.AsDebugString());
        i = ValueSet.Intersects(RangeStart,RangeEnd);
        if (i < 0) {
          ValueSet.Add(RangeStart,RangeEnd);
          AddRangeItem(Values,RangeStart,RangeEnd,Expr);
          return true;
        };
        for (var $l2 = 0, $end3 = Values.FCount - 1; $l2 <= $end3; $l2++) {
          i = $l2;
          Item = Values.Get(i);
          if ((Item.RangeStart > RangeEnd) || (Item.RangeEnd < RangeStart)) continue;
          Self.RaiseMsg(20180424214305,3108,rtl.getResStr(pas.PasResolveEval,"sDuplicateCaseValueXatY"),[Value.AsString(),Self.GetElementSourcePosStr(Item.Expr)],Expr);
        };
        Result = false;
        return Result;
      };
      var i = 0;
      var j = 0;
      var El = null;
      var Stat = null;
      var CaseExprResolved = new $mod.TPasResolverResult();
      var OfExprResolved = new $mod.TPasResolverResult();
      var OfExpr = null;
      var ok = false;
      var Values = null;
      var ValueSet = null;
      var Value = null;
      var Item = null;
      Self.ResolveExpr(CaseOf.CaseExpr,$mod.TResolvedRefAccess.rraRead);
      Self.ComputeElement(CaseOf.CaseExpr,{get: function () {
          return CaseExprResolved;
        }, set: function (v) {
          CaseExprResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
      ok = false;
      Values = pas.Classes.TFPList.$create("Create");
      ValueSet = null;
      Value = null;
      try {
        if ($mod.TPasResolverResultFlag.rrfReadable in CaseExprResolved.Flags) ok = CreateValues(CaseExprResolved,{get: function () {
            return ValueSet;
          }, set: function (v) {
            ValueSet = v;
          }});
        if (!ok) Self.RaiseXExpectedButYFound(20170216151952,"ordinal expression",Self.GetTypeDescription(CaseExprResolved.LoTypeEl,false),CaseOf.CaseExpr);
        for (var $l1 = 0, $end2 = CaseOf.Elements.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          El = rtl.getObject(CaseOf.Elements.Get(i));
          if (El.$class.ClassType() === pas.PasTree.TPasImplCaseStatement) {
            Stat = El;
            for (var $l3 = 0, $end4 = Stat.Expressions.FCount - 1; $l3 <= $end4; $l3++) {
              j = $l3;
              OfExpr = rtl.getObject(Stat.Expressions.Get(j));
              Self.ResolveExpr(OfExpr,$mod.TResolvedRefAccess.rraRead);
              Self.ComputeElement(OfExpr,{get: function () {
                  return OfExprResolved;
                }, set: function (v) {
                  OfExprResolved = v;
                }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant,$mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
              if (OfExprResolved.BaseType === $mod.TResolverBaseType.btRange) Self.ConvertRangeToElement({get: function () {
                  return OfExprResolved;
                }, set: function (v) {
                  OfExprResolved = v;
                }});
              Self.CheckEqualResCompatibility(CaseExprResolved,OfExprResolved,OfExpr,true,null);
              Value = Self.Eval(OfExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConstExt),true);
              if (Value !== null) {
                if (Value.Kind === pas.PasResolveEval.TREVKind.revkExternal) {}
                else if (!AddValue(Value,Values,ValueSet,OfExpr)) Self.RaiseIncompatibleTypeRes(20180424210815,3028,[],OfExprResolved,CaseExprResolved,OfExpr);
                pas.PasResolveEval.ReleaseEvalValue({get: function () {
                    return Value;
                  }, set: function (v) {
                    Value = v;
                  }});
              } else Self.RaiseMsg(20180518102047,3036,rtl.getResStr(pas.PasResolveEval,"sConstantExpressionExpected"),[],OfExpr);
            };
            Self.ResolveImplElement(Stat.Body);
          } else if (El.$class.ClassType() === pas.PasTree.TPasImplCaseElse) {
            Self.ResolveImplBlock(El)}
           else Self.RaiseNotYetImplemented(20160922163448,El,"");
        };
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
        ValueSet = rtl.freeLoc(ValueSet);
        for (var $l5 = 0, $end6 = Values.FCount - 1; $l5 <= $end6; $l5++) {
          i = $l5;
          Item = Values.Get(i);
          Item = null;
        };
        Values = rtl.freeLoc(Values);
      };
    };
    this.ResolveImplLabelMark = function (Mark) {
      this.RaiseNotYetImplemented(20161014141636,Mark,"");
    };
    this.ResolveImplForLoop = function (Loop) {
      var VarResolved = new $mod.TPasResolverResult();
      var StartResolved = new $mod.TPasResolverResult();
      var EndResolved = new $mod.TPasResolverResult();
      var OrigStartResolved = new $mod.TPasResolverResult();
      var EnumeratorFound = false;
      var HasInValues = false;
      var InRange = null;
      var VarRange = null;
      var InRangeInt = null;
      var VarRangeInt = null;
      var bt = 0;
      var TypeEl = null;
      var C = null;
      this.CreateScope(Loop,$mod.TPasForLoopScope);
      this.ResolveExpr(Loop.VariableName,$mod.TResolvedRefAccess.rraReadAndAssign);
      this.ComputeElement(Loop.VariableName,{get: function () {
          return VarResolved;
        }, set: function (v) {
          VarResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc,$mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
      if (!this.ResolvedElCanBeVarParam(VarResolved,Loop.VariableName,true)) this.RaiseVarExpected(20170216151955,Loop.VariableName,VarResolved.IdentEl);
      this.ResolveExpr(Loop.StartExpr,$mod.TResolvedRefAccess.rraRead);
      this.ComputeElement(Loop.StartExpr,{get: function () {
          return StartResolved;
        }, set: function (v) {
          StartResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
      var $tmp1 = Loop.LoopType;
      if (($tmp1 === pas.PasTree.TLoopType.ltNormal) || ($tmp1 === pas.PasTree.TLoopType.ltDown)) {
        if (this.CheckAssignResCompatibility(VarResolved,StartResolved,Loop.StartExpr,true) === 2147483647) this.RaiseIncompatibleTypeRes(20170216151958,3028,[],StartResolved,VarResolved,Loop.StartExpr);
        this.CheckAssignExprRange(VarResolved,Loop.StartExpr);
        this.ResolveExpr(Loop.EndExpr,$mod.TResolvedRefAccess.rraRead);
        this.ComputeElement(Loop.EndExpr,{get: function () {
            return EndResolved;
          }, set: function (v) {
            EndResolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
        if (this.CheckAssignResCompatibility(VarResolved,EndResolved,Loop.EndExpr,false) === 2147483647) this.RaiseIncompatibleTypeRes(20170216152001,3028,[],EndResolved,VarResolved,Loop.EndExpr);
        this.CheckAssignExprRange(VarResolved,Loop.EndExpr);
      } else if ($tmp1 === pas.PasTree.TLoopType.ltIn) {
        EnumeratorFound = this.CheckForIn(Loop,VarResolved,StartResolved);
        if (!EnumeratorFound && (StartResolved.BaseType === $mod.TResolverBaseType.btContext)) {
          TypeEl = StartResolved.LoTypeEl;
          C = TypeEl.$class.ClassType();
          if (C === pas.PasTree.TPasClassType) EnumeratorFound = this.CheckForInClass(Loop,VarResolved,StartResolved);
        };
        if (!EnumeratorFound) {
          VarRange = null;
          InRange = null;
          try {
            OrigStartResolved = new $mod.TPasResolverResult(StartResolved);
            if (pas.PasTree.TPasType.isPrototypeOf(StartResolved.IdentEl)) {
              TypeEl = StartResolved.LoTypeEl;
              if (pas.PasTree.TPasArrayType.isPrototypeOf(TypeEl)) {
                if (rtl.length(TypeEl.Ranges) === 1) InRange = this.Eval(TypeEl.Ranges[0],rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
              };
              if (InRange === null) InRange = this.EvalTypeRange(TypeEl,{});
            } else if ($mod.TPasResolverResultFlag.rrfReadable in StartResolved.Flags) {
              bt = StartResolved.BaseType;
              if (bt in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet)) {
                if ((StartResolved.IdentEl === null) && (StartResolved.ExprEl !== null)) InRange = this.Eval(StartResolved.ExprEl,{},true);
                if (InRange === null) InRange = this.EvalTypeRange(StartResolved.LoTypeEl,{});
              } else if (bt === $mod.TResolverBaseType.btContext) {
                TypeEl = StartResolved.LoTypeEl;
                C = TypeEl.$class.ClassType();
                if (C === pas.PasTree.TPasArrayType) {
                  this.ComputeElement(TypeEl.ElType,{get: function () {
                      return StartResolved;
                    }, set: function (v) {
                      StartResolved = v;
                    }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
                  StartResolved.Flags = rtl.intersectSet(OrigStartResolved.Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable));
                  if (this.CheckAssignResCompatibility(VarResolved,StartResolved,Loop.StartExpr,true) === 2147483647) this.RaiseIncompatibleTypeRes(20171112210138,3028,[],StartResolved,VarResolved,Loop.StartExpr);
                  EnumeratorFound = true;
                };
              } else {
                bt = this.GetActualBaseType(bt);
                var $tmp2 = bt;
                if ($tmp2 === $mod.TResolverBaseType.btUnicodeString) InRange = pas.PasResolveEval.TResEvalRangeInt.$create("CreateValue",[pas.PasResolveEval.TRESetElKind.revskChar,null,0,0xffff]);
              };
            };
            if (!EnumeratorFound && (InRange !== null)) {
              VarRange = this.EvalTypeRange(VarResolved.LoTypeEl,{});
              if (VarRange === null) this.RaiseXExpectedButYFound(20171109191528,"range",this.GetResolverResultDescription(VarResolved,false),Loop.VariableName);
              var $tmp3 = InRange.Kind;
              if (($tmp3 === pas.PasResolveEval.TREVKind.revkRangeInt) || ($tmp3 === pas.PasResolveEval.TREVKind.revkSetOfInt)) {
                InRangeInt = InRange;
                var $tmp4 = VarRange.Kind;
                if ($tmp4 === pas.PasResolveEval.TREVKind.revkRangeInt) {
                  VarRangeInt = VarRange;
                  HasInValues = (InRange.Kind !== pas.PasResolveEval.TREVKind.revkSetOfInt) || (rtl.length(InRange.Ranges) > 0);
                  var $tmp5 = InRangeInt.ElKind;
                  if ($tmp5 === pas.PasResolveEval.TRESetElKind.revskEnum) {
                    if ((VarRangeInt.ElKind !== pas.PasResolveEval.TRESetElKind.revskEnum) || !this.IsSameType(InRangeInt.ElType,VarRangeInt.ElType,$mod.TPRResolveAlias.prraAlias)) this.RaiseXExpectedButYFound(20171109200752,this.GetTypeDescription(InRangeInt.ElType,false),this.GetResolverResultDescription(VarResolved,true),Loop.VariableName)}
                   else if ($tmp5 === pas.PasResolveEval.TRESetElKind.revskInt) {
                    if (VarRangeInt.ElKind !== pas.PasResolveEval.TRESetElKind.revskInt) this.RaiseXExpectedButYFound(20171109200752,"integer",this.GetResolverResultDescription(VarResolved,true),Loop.VariableName)}
                   else if ($tmp5 === pas.PasResolveEval.TRESetElKind.revskChar) {
                    if (VarRangeInt.ElKind !== pas.PasResolveEval.TRESetElKind.revskChar) this.RaiseXExpectedButYFound(20171109200753,"char",this.GetResolverResultDescription(VarResolved,true),Loop.VariableName)}
                   else if ($tmp5 === pas.PasResolveEval.TRESetElKind.revskBool) {
                    if (VarRangeInt.ElKind !== pas.PasResolveEval.TRESetElKind.revskBool) this.RaiseXExpectedButYFound(20171109200754,"boolean",this.GetResolverResultDescription(VarResolved,true),Loop.VariableName)}
                   else {
                    if (HasInValues) this.RaiseNotYetImplemented(20171109200954,Loop.StartExpr,"");
                  };
                  if (HasInValues) {
                    if (VarRangeInt.RangeStart > InRangeInt.RangeStart) {
                      this.fExprEvaluator.EmitRangeCheckConst(20171109201428,InRangeInt.ElementAsString(InRangeInt.RangeStart),VarRangeInt.ElementAsString(VarRangeInt.RangeStart),VarRangeInt.ElementAsString(VarRangeInt.RangeEnd),Loop.VariableName,pas.PScanner.TMessageType.mtError);
                    };
                    if (VarRangeInt.RangeEnd < InRangeInt.RangeEnd) {
                      this.fExprEvaluator.EmitRangeCheckConst(20171109201429,InRangeInt.ElementAsString(InRangeInt.RangeEnd),VarRangeInt.ElementAsString(VarRangeInt.RangeStart),VarRangeInt.ElementAsString(VarRangeInt.RangeEnd),Loop.VariableName,pas.PScanner.TMessageType.mtError);
                    };
                  };
                  EnumeratorFound = true;
                };
              };
            };
            if (!EnumeratorFound) {
              this.RaiseMsg(20171108223818,3074,rtl.getResStr(pas.PasResolveEval,"sCannotFindEnumeratorForType"),[this.GetBaseDescription(OrigStartResolved,false)],Loop.StartExpr);
            };
          } finally {
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return VarRange;
              }, set: function (v) {
                VarRange = v;
              }});
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return InRange;
              }, set: function (v) {
                InRange = v;
              }});
          };
        };
      } else {
        this.RaiseNotYetImplemented(20171108221334,Loop,"");
      };
      this.ResolveImplElement(Loop.Body);
    };
    this.ResolveImplWithDo = function (El) {
      var i = 0;
      var OldScopeCount = 0;
      var Expr = null;
      var ErrorEl = null;
      var ExprResolved = new $mod.TPasResolverResult();
      var TypeEl = null;
      var WithScope = null;
      var WithExprScope = null;
      var ExprScope = null;
      var OnlyTypeMembers = false;
      var IsClassOf = false;
      var ClassEl = null;
      OldScopeCount = this.FScopeCount;
      WithScope = this.CreateScope(El,$mod.TPasWithScope);
      this.PushScope(WithScope);
      for (var $l1 = 0, $end2 = El.Expressions.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Expr = rtl.getObject(El.Expressions.Get(i));
        this.ResolveExpr(Expr,$mod.TResolvedRefAccess.rraRead);
        this.ComputeElement(Expr,{get: function () {
            return ExprResolved;
          }, set: function (v) {
            ExprResolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
        ErrorEl = Expr;
        TypeEl = ExprResolved.LoTypeEl;
        if (TypeEl === null) this.RaiseMsg(20170216152004,3026,rtl.getResStr(pas.PasResolveEval,"sExprTypeMustBeClassOrRecordTypeGot"),[this.GetBaseTypeNames(ExprResolved.BaseType)],ErrorEl);
        OnlyTypeMembers = false;
        IsClassOf = false;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
          ExprScope = rtl.as($mod.NoNil(TypeEl.FData),$mod.TPasRecordScope);
          if (pas.PasTree.TPasType.isPrototypeOf(ExprResolved.IdentEl)) OnlyTypeMembers = true;
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          ExprScope = rtl.as($mod.NoNil(TypeEl.FData),$mod.TPasClassScope);
          if (pas.PasTree.TPasType.isPrototypeOf(ExprResolved.IdentEl)) OnlyTypeMembers = true;
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
          ClassEl = rtl.as(this.ResolveAliasType(TypeEl.DestType),pas.PasTree.TPasClassType);
          ExprScope = rtl.as(ClassEl.FData,$mod.TPasClassScope);
          OnlyTypeMembers = true;
          IsClassOf = true;
        } else this.RaiseMsg(20170216152007,3026,rtl.getResStr(pas.PasResolveEval,"sExprTypeMustBeClassOrRecordTypeGot"),[$mod.GetElementTypeName(TypeEl)],ErrorEl);
        WithExprScope = this.FScopeClass_WithExpr.$create("Create$1");
        WithExprScope.WithScope = WithScope;
        WithExprScope.Index = i;
        WithExprScope.Expr = Expr;
        WithExprScope.Scope = ExprScope;
        if (!pas.PasTree.TPasType.isPrototypeOf(ExprResolved.IdentEl)) WithExprScope.Flags = rtl.includeSet(WithExprScope.Flags,$mod.TPasWithExprScopeFlag.wesfNeedTmpVar);
        if (OnlyTypeMembers) WithExprScope.Flags = rtl.includeSet(WithExprScope.Flags,$mod.TPasWithExprScopeFlag.wesfOnlyTypeMembers);
        if (IsClassOf) WithExprScope.Flags = rtl.includeSet(WithExprScope.Flags,$mod.TPasWithExprScopeFlag.wesfIsClassOf);
        if ((!($mod.TPasResolverResultFlag.rrfWritable in ExprResolved.Flags) && (ExprResolved.BaseType === $mod.TResolverBaseType.btContext)) && (ExprResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType)) WithExprScope.Flags = rtl.includeSet(WithExprScope.Flags,$mod.TPasWithExprScopeFlag.wesfConstParent);
        WithScope.ExpressionScopes.Add$1(WithExprScope);
        this.PushScope(WithExprScope);
      };
      this.ResolveImplElement(El.Body);
      this.CheckTopScope(this.FScopeClass_WithExpr,false);
      if (this.FTopScope !== WithScope.ExpressionScopes.GetItem(WithScope.ExpressionScopes.GetCount() - 1)) this.RaiseInternalError(20160923102846,"");
      while (this.FScopeCount > OldScopeCount) this.PopScope();
    };
    this.ResolveImplAsm = function (El) {
      if (El === null) ;
    };
    this.ResolveImplAssign = function (El) {
      var LeftResolved = new $mod.TPasResolverResult();
      var RightResolved = new $mod.TPasResolverResult();
      var Flags = {};
      var Access = 0;
      var Value = null;
      if (El.Kind === pas.PasTree.TAssignKind.akDefault) {
        Access = $mod.TResolvedRefAccess.rraAssign}
       else Access = $mod.TResolvedRefAccess.rraReadAndAssign;
      this.ResolveExpr(El.left,Access);
      this.ComputeElement(El.left,{get: function () {
          return LeftResolved;
        }, set: function (v) {
          LeftResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc,$mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
      this.CheckCanBeLHS(LeftResolved,true,El.left);
      this.ResolveExpr(El.right,$mod.TResolvedRefAccess.rraRead);
      Flags = rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags);
      if (this.IsProcedureType(LeftResolved,true)) {
        if (pas.PScanner.TModeSwitch.msDelphi in this.FCurrentParser.GetCurrentModeSwitches()) {
          Flags = rtl.includeSet(Flags,$mod.TPasResolverComputeFlag.rcNoImplicitProc)}
         else Flags = rtl.includeSet(Flags,$mod.TPasResolverComputeFlag.rcNoImplicitProcType);
      };
      this.ComputeElement(El.right,{get: function () {
          return RightResolved;
        }, set: function (v) {
          RightResolved = v;
        }},rtl.refSet(Flags),null);
      var $tmp1 = El.Kind;
      if ($tmp1 === pas.PasTree.TAssignKind.akDefault) {
        this.CheckAssignResCompatibility(LeftResolved,RightResolved,El.right,true);
        this.CheckAssignExprRange(LeftResolved,El.right);
        if ((LeftResolved.BaseType === $mod.TResolverBaseType.btContext) && (LeftResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) this.MarkArrayExprRecursive(El.right,LeftResolved.LoTypeEl);
      } else if (((($tmp1 === pas.PasTree.TAssignKind.akAdd) || ($tmp1 === pas.PasTree.TAssignKind.akMinus)) || ($tmp1 === pas.PasTree.TAssignKind.akMul)) || ($tmp1 === pas.PasTree.TAssignKind.akDivision)) {
        if ((LeftResolved.BaseType in $mod.btAllInteger) && (El.Kind in rtl.createSet(pas.PasTree.TAssignKind.akAdd,pas.PasTree.TAssignKind.akMinus,pas.PasTree.TAssignKind.akMul))) {
          if (!($mod.TPasResolverResultFlag.rrfReadable in RightResolved.Flags) || !(RightResolved.BaseType in $mod.btAllInteger)) this.RaiseMsg(20170216152009,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[this.GetBaseTypes(RightResolved.BaseType),this.GetBaseTypes(LeftResolved.BaseType)],El.right);
        } else if ((LeftResolved.BaseType in $mod.btAllStrings) && (El.Kind === pas.PasTree.TAssignKind.akAdd)) {
          if (!($mod.TPasResolverResultFlag.rrfReadable in RightResolved.Flags) || !(RightResolved.BaseType in $mod.btAllStringAndChars)) this.RaiseMsg(20170216152012,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[this.GetBaseTypes(RightResolved.BaseType),this.GetBaseTypes(LeftResolved.BaseType)],El.right);
        } else if ((LeftResolved.BaseType in $mod.btAllFloats) && (El.Kind in rtl.createSet(pas.PasTree.TAssignKind.akAdd,pas.PasTree.TAssignKind.akMinus,pas.PasTree.TAssignKind.akMul,pas.PasTree.TAssignKind.akDivision))) {
          if (!($mod.TPasResolverResultFlag.rrfReadable in RightResolved.Flags) || !(RightResolved.BaseType in rtl.unionSet($mod.btAllInteger,$mod.btAllFloats))) this.RaiseMsg(20170216152107,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[this.GetBaseTypes(RightResolved.BaseType),this.GetBaseTypes(LeftResolved.BaseType)],El.right);
        } else if ((LeftResolved.BaseType === $mod.TResolverBaseType.btSet) && (El.Kind in rtl.createSet(pas.PasTree.TAssignKind.akAdd,pas.PasTree.TAssignKind.akMinus,pas.PasTree.TAssignKind.akMul))) {
          if (!($mod.TPasResolverResultFlag.rrfReadable in RightResolved.Flags) || !(RightResolved.BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet))) this.RaiseMsg(20170216152110,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[this.GetBaseTypeNames(RightResolved.BaseType),"set of " + this.GetBaseTypeNames(LeftResolved.SubType)],El.right);
          if (((LeftResolved.SubType === RightResolved.SubType) || ((LeftResolved.SubType in $mod.btAllInteger) && (RightResolved.SubType in $mod.btAllInteger))) || ((LeftResolved.SubType in $mod.btAllBooleans) && (RightResolved.SubType in $mod.btAllBooleans))) {}
          else this.RaiseMsg(20170216152117,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),["set of " + this.GetBaseTypeNames(RightResolved.SubType),"set of " + this.GetBaseTypeNames(LeftResolved.SubType)],El.right);
        } else if (LeftResolved.BaseType === $mod.TResolverBaseType.btContext) {
          if ((((LeftResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) && (El.Kind === pas.PasTree.TAssignKind.akAdd)) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.Flags)) && this.IsDynArray(LeftResolved.LoTypeEl,true)) {
            this.CheckAssignCompatibilityArrayType(LeftResolved,RightResolved,El,true);
            return;
          } else this.RaiseIncompatibleTypeRes(20180615235749,3082,[pas.PasTree.AssignKindNames[El.Kind]],LeftResolved,RightResolved,El);
        } else this.RaiseIncompatibleTypeRes(20180208115707,3082,[pas.PasTree.AssignKindNames[El.Kind]],LeftResolved,RightResolved,El);
        Value = this.Eval(El.right,{},true);
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
      } else {
        this.RaiseNotYetImplemented(20160927143649,El,"AssignKind " + pas.PasTree.AssignKindNames[El.Kind]);
      };
    };
    this.ResolveImplSimple = function (El) {
      var ExprResolved = new $mod.TPasResolverResult();
      var Expr = null;
      Expr = El.Expr;
      this.ResolveExpr(Expr,$mod.TResolvedRefAccess.rraRead);
      this.ComputeElement(Expr,{get: function () {
          return ExprResolved;
        }, set: function (v) {
          ExprResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
      if ($mod.TPasResolverResultFlag.rrfCanBeStatement in ExprResolved.Flags) return;
      this.RaiseMsg(20170216152127,3044,rtl.getResStr(pas.PasResolveEval,"sIllegalExpression"),[],El);
    };
    this.ResolveImplRaise = function (El) {
      var ResolvedEl = new $mod.TPasResolverResult();
      if (El.ExceptObject !== null) {
        this.ResolveExpr(El.ExceptObject,$mod.TResolvedRefAccess.rraRead);
        this.ComputeElement(El.ExceptObject,{get: function () {
            return ResolvedEl;
          }, set: function (v) {
            ResolvedEl = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
        this.CheckIsClass(El.ExceptObject,ResolvedEl);
        if (ResolvedEl.IdentEl !== null) {
          if ((pas.PasTree.TPasVariable.isPrototypeOf(ResolvedEl.IdentEl) || pas.PasTree.TPasArgument.isPrototypeOf(ResolvedEl.IdentEl)) || pas.PasTree.TPasResultElement.isPrototypeOf(ResolvedEl.IdentEl)) {}
          else {
            this.RaiseXExpectedButYFound(20170216152133,"variable",$mod.GetElementTypeName(ResolvedEl.IdentEl),El.ExceptObject);
          };
        } else if (ResolvedEl.ExprEl !== null) {}
        else this.RaiseXExpectedButYFound(201702303145230,"variable",$mod.GetResolverResultDbg(ResolvedEl),El.ExceptObject);
        if (!($mod.TPasResolverResultFlag.rrfReadable in ResolvedEl.Flags)) this.RaiseMsg(20170303145037,3038,rtl.getResStr(pas.PasResolveEval,"sNotReadable"),[],El.ExceptObject);
      };
      if (El.ExceptAddr !== null) this.ResolveExpr(El.ExceptAddr,$mod.TResolvedRefAccess.rraRead);
    };
    this.ResolveExpr = function (El, Access) {
      var Primitive = null;
      var ElClass = null;
      if (El === null) this.RaiseNotYetImplemented(20160922163453,El,"");
      ElClass = El.$class.ClassType();
      if (ElClass === pas.PasTree.TPrimitiveExpr) {
        Primitive = El;
        var $tmp1 = Primitive.Kind;
        if ($tmp1 === pas.PasTree.TPasExprKind.pekIdent) {
          this.ResolveNameExpr(El,Primitive.Value,Access)}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekNumber) {}
        else if ($tmp1 === pas.PasTree.TPasExprKind.pekString) {}
        else if (($tmp1 === pas.PasTree.TPasExprKind.pekNil) || ($tmp1 === pas.PasTree.TPasExprKind.pekBoolConst)) {}
        else {
          this.RaiseNotYetImplemented(20160922163451,El,"");
        };
      } else if (ElClass === pas.PasTree.TUnaryExpr) {
        this.ResolveExpr(El.Operand,Access)}
       else if (ElClass === pas.PasTree.TBinaryExpr) {
        this.ResolveBinaryExpr(El,Access)}
       else if (ElClass === pas.PasTree.TParamsExpr) {
        this.ResolveParamsExpr(El,Access)}
       else if (ElClass === pas.PasTree.TBoolConstExpr) {}
      else if (ElClass === pas.PasTree.TNilExpr) {}
      else if (ElClass === pas.PasTree.TSelfExpr) {
        this.ResolveNameExpr(El,"Self",Access)}
       else if (ElClass === pas.PasTree.TInheritedExpr) {
        this.ResolveInherited(El,Access)}
       else if (ElClass === pas.PasTree.TArrayValues) {
        if (Access !== $mod.TResolvedRefAccess.rraRead) this.RaiseMsg(20170303205743,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],El);
        this.ResolveArrayValues(El);
      } else if (ElClass === pas.PasTree.TRecordValues) {
        if (Access !== $mod.TResolvedRefAccess.rraRead) this.RaiseMsg(20180429103024,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],El);
        this.ResolveRecordValues(El);
      } else this.RaiseNotYetImplemented(20170222184329,El,"");
      if (El.format1 !== null) this.ResolveExpr(El.format1,$mod.TResolvedRefAccess.rraRead);
      if (El.format2 !== null) this.ResolveExpr(El.format2,$mod.TResolvedRefAccess.rraRead);
    };
    this.ResolveStatementConditionExpr = function (El) {
      var ResolvedCond = new $mod.TPasResolverResult();
      this.ResolveExpr(El,$mod.TResolvedRefAccess.rraRead);
      this.ComputeElement(El,{get: function () {
          return ResolvedCond;
        }, set: function (v) {
          ResolvedCond = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
      this.CheckConditionExpr(El,ResolvedCond);
    };
    this.ResolveNameExpr = function (El, aName, Access) {
      var FindData = new $mod.TPRFindData();
      var DeclEl = null;
      var Proc = null;
      var ImplProc = null;
      var Ref = null;
      var BuiltInProc = null;
      var p = 0;
      var DottedName = "";
      var Bin = null;
      var ProcScope = null;
      DeclEl = this.FindElementWithoutParams$1(aName,{get: function () {
          return FindData;
        }, set: function (v) {
          FindData = v;
        }},El,false);
      if (DeclEl.$class.ClassType() === pas.PasTree.TPasUsesUnit) {
        this.FindLongestUnitName({get: function () {
            return DeclEl;
          }, set: function (v) {
            DeclEl = v;
          }},El);
        FindData.Found = DeclEl;
      };
      Ref = this.CreateReference(DeclEl,El,Access,FindData);
      this.CheckFoundElement(FindData,Ref);
      if (pas.PasTree.TPasProcedure.isPrototypeOf(DeclEl)) {
        if (El.FParent.$class.ClassType() === pas.PasTree.TPasProperty) {}
        else {
          Proc = DeclEl;
          if (((((Access === $mod.TResolvedRefAccess.rraAssign) && pas.PasTree.TPasFunction.isPrototypeOf(Proc)) && (El.$class.ClassType() === pas.PasTree.TPrimitiveExpr)) && (El.FParent.$class.ClassType() === pas.PasTree.TPasImplAssign)) && (El.FParent.left === El)) {
            ProcScope = rtl.as(Proc.FData,$mod.TPasProcedureScope);
            ImplProc = ProcScope.ImplProc;
            if (ImplProc === null) ImplProc = Proc;
            if (El.HasParent(ImplProc)) {
              Ref.SetDeclaration(rtl.as(Proc,pas.PasTree.TPasFunction).GetFT().ResultEl);
              return;
            };
          };
          if (this.ProcNeedsParams(Proc.ProcType) && !this.ExprIsAddrTarget(El)) {
            this.RaiseMsg(20170216152138,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[Proc.FName],El);
          };
        };
      } else if (DeclEl.$class.ClassType() === pas.PasTree.TPasUnresolvedSymbolRef) {
        if ($mod.TResElDataBuiltInProc.isPrototypeOf(DeclEl.FData)) {
          BuiltInProc = DeclEl.FData;
          BuiltInProc.GetCallCompatibility(BuiltInProc,El,true);
        };
      } else if ((DeclEl.$class.ClassType() === pas.PasTree.TPasUsesUnit) || pas.PasTree.TPasModule.isPrototypeOf(DeclEl)) {
        DottedName = DeclEl.FName;
        do {
          p = pas.System.Pos(".",DottedName);
          if (p < 1) break;
          pas.System.Delete({get: function () {
              return DottedName;
            }, set: function (v) {
              DottedName = v;
            }},1,p);
          El = this.GetNextDottedExpr(El);
          if (El === null) this.RaiseInternalError(20170503002012,"");
          this.CreateReference(DeclEl,El,Access,null);
          if (pas.PasTree.TBinaryExpr.isPrototypeOf(El.FParent) && (El.FParent.right === El)) {
            Bin = El.FParent;
            while (Bin.OpCode === pas.PasTree.TExprOpCode.eopSubIdent) {
              this.CreateReference(DeclEl,Bin,Access,null);
              if (!pas.PasTree.TBinaryExpr.isPrototypeOf(Bin.FParent)) break;
              if (Bin.FParent.right !== Bin) break;
              Bin = Bin.FParent;
            };
          };
        } while (!false);
      };
    };
    this.ResolveInherited = function (El, Access) {
      var ProcScope = null;
      var DeclProcScope = null;
      var SelfScope = null;
      var AncestorScope = null;
      var ClassScope = null;
      var DeclProc = null;
      var AncestorProc = null;
      if ((El.FParent.$class.ClassType() === pas.PasTree.TBinaryExpr) && (El.FParent.OpCode === pas.PasTree.TExprOpCode.eopNone)) {
        this.ResolveInheritedCall(El.FParent,Access);
        return;
      };
      ProcScope = this.GetInheritedExprScope(El);
      SelfScope = ProcScope.GetSelfScope();
      if (SelfScope === null) this.RaiseMsg(20170216152141,3023,rtl.getResStr(pas.PasResolveEval,"sInheritedOnlyWorksInMethods"),[],El);
      ClassScope = SelfScope.ClassScope;
      AncestorScope = ClassScope.AncestorScope;
      if (AncestorScope === null) {
        return;
      };
      DeclProc = SelfScope.DeclarationProc;
      DeclProcScope = rtl.as(DeclProc.FData,$mod.TPasProcedureScope);
      AncestorProc = DeclProcScope.OverriddenProc;
      if (AncestorProc === null) {
        return;
      };
      this.CreateReference(AncestorProc,El,Access,null);
      if (AncestorProc.IsAbstract()) this.RaiseMsg(20170216152144,3030,rtl.getResStr(pas.PasResolveEval,"sAbstractMethodsCannotBeCalledDirectly"),[],El);
    };
    this.ResolveInheritedCall = function (El, Access) {
      var ProcScope = null;
      var SelfScope = null;
      var AncestorScope = null;
      var ClassScope = null;
      var AncestorClass = null;
      var InhScope = null;
      ProcScope = this.GetInheritedExprScope(El);
      SelfScope = ProcScope.GetSelfScope();
      if (SelfScope === null) this.RaiseMsg(20170216152148,3023,rtl.getResStr(pas.PasResolveEval,"sInheritedOnlyWorksInMethods"),[],El);
      ClassScope = SelfScope.ClassScope;
      AncestorScope = ClassScope.AncestorScope;
      if (AncestorScope === null) this.RaiseMsg(20170216152151,3024,rtl.getResStr(pas.PasResolveEval,"sInheritedNeedsAncestor"),[],El.left);
      AncestorClass = AncestorScope.FElement;
      InhScope = this.PushClassDotScope({get: function () {
          return AncestorClass;
        }, set: function (v) {
          AncestorClass = v;
        }});
      InhScope.InheritedExpr = true;
      this.ResolveExpr(El.right,Access);
      this.PopScope();
    };
    this.ResolveBinaryExpr = function (El, Access) {
      this.ResolveExpr(El.left,$mod.TResolvedRefAccess.rraRead);
      if (El.right === null) return;
      var $tmp1 = El.OpCode;
      if ($tmp1 === pas.PasTree.TExprOpCode.eopNone) {
        var $tmp2 = El.Kind;
        if ($tmp2 === pas.PasTree.TPasExprKind.pekRange) {
          this.ResolveExpr(El.right,$mod.TResolvedRefAccess.rraRead)}
         else {
          if (El.left.$class.ClassType() === pas.PasTree.TInheritedExpr) {}
          else {
            this.RaiseNotYetImplemented(20160922163456,El,"");
          };
        };
      } else if ((((((((((((((((((((((($tmp1 === pas.PasTree.TExprOpCode.eopAdd) || ($tmp1 === pas.PasTree.TExprOpCode.eopSubtract)) || ($tmp1 === pas.PasTree.TExprOpCode.eopMultiply)) || ($tmp1 === pas.PasTree.TExprOpCode.eopDivide)) || ($tmp1 === pas.PasTree.TExprOpCode.eopDiv)) || ($tmp1 === pas.PasTree.TExprOpCode.eopMod)) || ($tmp1 === pas.PasTree.TExprOpCode.eopPower)) || ($tmp1 === pas.PasTree.TExprOpCode.eopShr)) || ($tmp1 === pas.PasTree.TExprOpCode.eopShl)) || ($tmp1 === pas.PasTree.TExprOpCode.eopNot)) || ($tmp1 === pas.PasTree.TExprOpCode.eopAnd)) || ($tmp1 === pas.PasTree.TExprOpCode.eopOr)) || ($tmp1 === pas.PasTree.TExprOpCode.eopXor)) || ($tmp1 === pas.PasTree.TExprOpCode.eopEqual)) || ($tmp1 === pas.PasTree.TExprOpCode.eopNotEqual)) || ($tmp1 === pas.PasTree.TExprOpCode.eopLessThan)) || ($tmp1 === pas.PasTree.TExprOpCode.eopGreaterThan)) || ($tmp1 === pas.PasTree.TExprOpCode.eopLessthanEqual)) || ($tmp1 === pas.PasTree.TExprOpCode.eopGreaterThanEqual)) || ($tmp1 === pas.PasTree.TExprOpCode.eopIn)) || ($tmp1 === pas.PasTree.TExprOpCode.eopIs)) || ($tmp1 === pas.PasTree.TExprOpCode.eopAs)) || ($tmp1 === pas.PasTree.TExprOpCode.eopSymmetricaldifference)) {
        this.ResolveExpr(El.right,$mod.TResolvedRefAccess.rraRead)}
       else if ($tmp1 === pas.PasTree.TExprOpCode.eopSubIdent) {
        this.ResolveSubIdent(El,Access)}
       else {
        this.RaiseNotYetImplemented(20160922163459,El,pas.PasTree.OpcodeStrings[El.OpCode]);
      };
    };
    this.ResolveSubIdent = function (El, Access) {
      var aModule = null;
      var ClassEl = null;
      var ClassScope = null;
      var LeftResolved = new $mod.TPasResolverResult();
      var Left = null;
      var RecordEl = null;
      var RecordScope = null;
      var LTypeEl = null;
      if ($mod.TResolvedReference.isPrototypeOf(El.FData)) return;
      Left = El.left;
      this.ComputeElement(Left,{get: function () {
          return LeftResolved;
        }, set: function (v) {
          LeftResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
      if (LeftResolved.BaseType === $mod.TResolverBaseType.btModule) {
        aModule = rtl.as($mod.NoNil(LeftResolved.IdentEl),pas.PasTree.TPasModule);
        this.PushModuleDotScope(aModule);
        this.ResolveExpr(El.right,Access);
        this.PopScope();
        return;
      } else if (LeftResolved.LoTypeEl === null) {}
      else {
        LTypeEl = LeftResolved.LoTypeEl;
        if (((LTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) && this.ElHasModeSwitch(El,pas.PScanner.TModeSwitch.msAutoDeref)) && ($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.Flags)) {
          LTypeEl = this.ResolveAliasType(LTypeEl.DestType);
          LeftResolved.Flags = rtl.includeSet(LeftResolved.Flags,$mod.TPasResolverResultFlag.rrfWritable);
        };
        if (LTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          ClassEl = LTypeEl;
          ClassScope = this.PushClassDotScope({get: function () {
              return ClassEl;
            }, set: function (v) {
              ClassEl = v;
            }});
          if (pas.PasTree.TPasType.isPrototypeOf(LeftResolved.IdentEl)) {
            ClassScope.OnlyTypeMembers = true}
           else ClassScope.OnlyTypeMembers = false;
          this.ResolveExpr(El.right,Access);
          this.PopScope();
          return;
        } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
          ClassEl = rtl.as(this.ResolveAliasType(LTypeEl.DestType),pas.PasTree.TPasClassType);
          ClassScope = this.PushClassDotScope({get: function () {
              return ClassEl;
            }, set: function (v) {
              ClassEl = v;
            }});
          ClassScope.OnlyTypeMembers = true;
          ClassScope.IsClassOf = true;
          this.ResolveExpr(El.right,Access);
          this.PopScope();
          return;
        } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
          RecordEl = LTypeEl;
          RecordScope = this.PushRecordDotScope(RecordEl);
          RecordScope.ConstParent = !($mod.TPasResolverResultFlag.rrfWritable in LeftResolved.Flags);
          if (pas.PasTree.TPasType.isPrototypeOf(LeftResolved.IdentEl)) {
            RecordScope.OnlyTypeMembers = true}
           else {
            this.AccessExpr(El.left,Access);
            RecordScope.OnlyTypeMembers = false;
          };
          this.ResolveExpr(El.right,Access);
          this.PopScope();
          return;
        } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
          if (pas.PasTree.TPasType.isPrototypeOf(LeftResolved.IdentEl)) {
            this.PushEnumDotScope(LTypeEl);
            this.ResolveExpr(El.right,Access);
            this.PopScope();
            return;
          };
        } else this.RaiseMsg(20170216152541,3026,rtl.getResStr(pas.PasResolveEval,"sExprTypeMustBeClassOrRecordTypeGot"),[$mod.GetElementTypeName(LeftResolved.LoTypeEl)],El);
      };
      this.RaiseMsg(20170216152157,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),[".",this.GetResolverResultDescription(LeftResolved,false)],El);
    };
    this.ResolveParamsExpr = function (Params, Access) {
      var i = 0;
      var ScopeDepth = 0;
      var ParamAccess = 0;
      if ((Params.Kind === pas.PasTree.TPasExprKind.pekSet) && !(Access in rtl.createSet($mod.TResolvedRefAccess.rraRead,$mod.TResolvedRefAccess.rraParamToUnknownProc))) {
        this.RaiseMsg(20170303211052,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],Params);
      };
      this.ResetSubScopes({get: function () {
          return ScopeDepth;
        }, set: function (v) {
          ScopeDepth = v;
        }});
      if (Params.Kind in rtl.createSet(pas.PasTree.TPasExprKind.pekFuncParams,pas.PasTree.TPasExprKind.pekArrayParams)) {
        ParamAccess = $mod.TResolvedRefAccess.rraParamToUnknownProc}
       else ParamAccess = $mod.TResolvedRefAccess.rraRead;
      for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ResolveExpr(Params.Params[i],ParamAccess);
      };
      this.RestoreSubScopes(ScopeDepth);
      if (Params.Kind === pas.PasTree.TPasExprKind.pekFuncParams) {
        this.ResolveFuncParamsExpr(Params,Access)}
       else if (Params.Kind === pas.PasTree.TPasExprKind.pekArrayParams) {
        this.ResolveArrayParamsExpr(Params,Access)}
       else if (Params.Kind === pas.PasTree.TPasExprKind.pekSet) {
        this.ResolveSetParamsExpr(Params)}
       else this.RaiseNotYetImplemented(20160922163501,Params,"");
    };
    this.ResolveFuncParamsExpr = function (Params, Access) {
      var Self = this;
      function FinishProcParams(ProcType) {
        var ParamAccess = 0;
        var i = 0;
        if (!(Access in rtl.createSet($mod.TResolvedRefAccess.rraRead,$mod.TResolvedRefAccess.rraParamToUnknownProc))) {
          Self.RaiseMsg(20170306104440,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],Params);
        };
        for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          ParamAccess = $mod.TResolvedRefAccess.rraRead;
          if (i < ProcType.Args.FCount) {
            var $tmp3 = rtl.getObject(ProcType.Args.Get(i)).Access;
            if ($tmp3 === pas.PasTree.TArgumentAccess.argVar) {
              ParamAccess = $mod.TResolvedRefAccess.rraVarParam}
             else if ($tmp3 === pas.PasTree.TArgumentAccess.argOut) ParamAccess = $mod.TResolvedRefAccess.rraOutParam;
          };
          Self.AccessExpr(Params.Params[i],ParamAccess);
        };
        Self.CheckCallProcCompatibility(ProcType,Params,false,true);
      };
      function FinishUntypedParams(ParamAccess) {
        var i = 0;
        if (ParamAccess === $mod.TResolvedRefAccess.rraParamToUnknownProc) return;
        for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Self.FinishCallArgAccess(Params.Params[i],ParamAccess);
        };
      };
      var i = 0;
      var ElName = "";
      var Msg = "";
      var FindCallData = new Self.TFindCallElData();
      var Abort = false;
      var El = null;
      var FoundEl = null;
      var Ref = null;
      var FindData = new $mod.TPRFindData();
      var BuiltInProc = null;
      var SubParams = null;
      var ResolvedEl = new $mod.TPasResolverResult();
      var Value = null;
      var TypeEl = null;
      var C = null;
      Value = Params.Value;
      if (Self.IsNameExpr(Value)) {
        if (Value.$class.ClassType() === pas.PasTree.TPrimitiveExpr) {
          ElName = Value.Value}
         else ElName = "Self";
        FindCallData = new Self.TFindCallElData();
        FindCallData.Params = Params;
        Abort = false;
        Self.IterateElements(ElName,rtl.createCallback(Self,"OnFindCallElements"),FindCallData,{get: function () {
            return Abort;
          }, set: function (v) {
            Abort = v;
          }});
        if (FindCallData.Found === null) Self.RaiseIdentifierNotFound(20170216152544,ElName,Value);
        if (FindCallData.Distance === 2147483647) {
          if (pas.PasTree.TPasProcedure.isPrototypeOf(FindCallData.Found)) {
            Self.CheckCallProcCompatibility(FindCallData.Found.ProcType,Params,true,false)}
           else if (pas.PasTree.TPasProcedureType.isPrototypeOf(FindCallData.Found)) {
            Self.CheckTypeCast(FindCallData.Found,Params,true)}
           else if (FindCallData.Found.$class.ClassType() === pas.PasTree.TPasUnresolvedSymbolRef) {
            if ($mod.TResElDataBuiltInProc.isPrototypeOf(FindCallData.Found.FData)) {
              BuiltInProc = FindCallData.Found.FData;
              BuiltInProc.GetCallCompatibility(BuiltInProc,Params,true);
            } else if ($mod.TResElDataBaseType.isPrototypeOf(FindCallData.Found.FData)) {
              Self.CheckTypeCast(FindCallData.Found,Params,true)}
             else Self.RaiseNotYetImplemented(20161006132825,FindCallData.Found,"");
          } else if (pas.PasTree.TPasType.isPrototypeOf(FindCallData.Found)) {
            Self.CheckTypeCast(FindCallData.Found,Params,true)}
           else if (pas.PasTree.TPasVariable.isPrototypeOf(FindCallData.Found)) {
            TypeEl = Self.ResolveAliasType(FindCallData.Found.VarType);
            if (pas.PasTree.TPasProcedureType.isPrototypeOf(TypeEl)) {
              Self.CheckCallProcCompatibility(TypeEl,Params,true,false)}
             else Self.RaiseMsg(20170405003522,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["(",TypeEl.ElementTypeName()],Params);
          } else if (pas.PasTree.TPasArgument.isPrototypeOf(FindCallData.Found)) {
            TypeEl = Self.ResolveAliasType(FindCallData.Found.ArgType);
            if (pas.PasTree.TPasProcedureType.isPrototypeOf(TypeEl)) {
              Self.CheckCallProcCompatibility(TypeEl,Params,true,false)}
             else Self.RaiseMsg(20180228145412,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["(",TypeEl.ElementTypeName()],Params);
          } else Self.RaiseNotYetImplemented(20161003134755,FindCallData.Found,"");
          Self.RaiseNotYetImplemented(20180621002400,Params,"missing exception, Found=" + pas.PasResolveEval.GetObjName(FindCallData.Found));
        };
        if (FindCallData.Count > 1) {
          FindCallData = new Self.TFindCallElData();
          FindCallData.Params = Params;
          FindCallData.List = pas.Classes.TFPList.$create("Create");
          try {
            Self.IterateElements(ElName,rtl.createCallback(Self,"OnFindCallElements"),FindCallData,{get: function () {
                return Abort;
              }, set: function (v) {
                Abort = v;
              }});
            Msg = "";
            for (var $l1 = 0, $end2 = FindCallData.List.FCount - 1; $l1 <= $end2; $l1++) {
              i = $l1;
              El = rtl.getObject(FindCallData.List.Get(i));
              if (pas.PasTree.TPasProcedure.isPrototypeOf(El)) Self.LogMsg(20170417180320,pas.PScanner.TMessageType.mtHint,3057,rtl.getResStr(pas.PasResolveEval,"sFoundCallCandidateX"),[Self.GetProcTypeDescription(El.ProcType,rtl.createSet($mod.TPRProcTypeDescFlag.prptdUseName,$mod.TPRProcTypeDescFlag.prptdAddPaths,$mod.TPRProcTypeDescFlag.prptdResolveSimpleAlias))],El);
              Msg = (Msg + ", ") + Self.GetElementSourcePosStr(El);
            };
            Self.RaiseMsg(20170216152200,3013,rtl.getResStr(pas.PasResolveEval,"sCantDetermineWhichOverloadedFunctionToCall") + Msg,[ElName],Value);
          } finally {
            rtl.free(FindCallData,"List");
          };
        };
        FoundEl = FindCallData.Found;
        Ref = Self.CreateReference(FoundEl,Value,$mod.TResolvedRefAccess.rraRead,null);
        if (FindCallData.StartScope.$class.ClassType() === Self.FScopeClass_WithExpr) Ref.WithExprScope = FindCallData.StartScope;
        FindData = new $mod.TPRFindData();
        FindData.ErrorPosEl = Value;
        FindData.StartScope = FindCallData.StartScope;
        FindData.ElScope = FindCallData.ElScope;
        FindData.Found = FoundEl;
        Self.CheckFoundElement(FindData,Ref);
        if (pas.PasTree.TPasProcedure.isPrototypeOf(FoundEl)) {
          FinishProcParams(FoundEl.ProcType)}
         else if (pas.PasTree.TPasType.isPrototypeOf(FoundEl)) {
          TypeEl = Self.ResolveAliasType(FoundEl);
          C = TypeEl.$class.ClassType();
          if ((((((((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasRecordType)) || (C === pas.PasTree.TPasEnumType)) || (C === pas.PasTree.TPasSetType)) || (C === pas.PasTree.TPasPointerType)) || (C === pas.PasTree.TPasArrayType)) || (C === pas.PasTree.TPasRangeType)) {
            FinishUntypedParams(Access);
          } else if ((C === pas.PasTree.TPasProcedureType) || (C === pas.PasTree.TPasFunctionType)) {
            Self.AccessExpr(Params.Params[0],Access);
          } else if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
            if ($mod.TResElDataBuiltInProc.isPrototypeOf(TypeEl.FData)) {
              BuiltInProc = TypeEl.FData;
              if (BuiltInProc.FinishParamsExpression != null) {
                BuiltInProc.FinishParamsExpression(BuiltInProc,Params)}
               else FinishUntypedParams($mod.TResolvedRefAccess.rraRead);
            } else if ($mod.TResElDataBaseType.isPrototypeOf(TypeEl.FData)) {
              FinishUntypedParams(Access);
            } else {
              Self.RaiseNotYetImplemented(20170325145720,Params,"");
            };
          } else {
            Self.RaiseMsg(20170306121908,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["(",TypeEl.ElementTypeName()],Params);
          };
        } else {
          Self.ComputeElement(FoundEl,{get: function () {
              return ResolvedEl;
            }, set: function (v) {
              ResolvedEl = v;
            }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc,$mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
          TypeEl = ResolvedEl.LoTypeEl;
          if (pas.PasTree.TPasProcedureType.isPrototypeOf(TypeEl)) {
            FinishProcParams(TypeEl);
            return;
          };
          Self.RaiseMsg(20170306104301,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["(",TypeEl.ElementTypeName()],Params);
        };
      } else if (Value.$class.ClassType() === pas.PasTree.TParamsExpr) {
        SubParams = Value;
        if (SubParams.Kind in rtl.createSet(pas.PasTree.TPasExprKind.pekArrayParams,pas.PasTree.TPasExprKind.pekFuncParams)) {
          Self.ResolveExpr(SubParams,$mod.TResolvedRefAccess.rraRead);
          Self.ComputeElement(SubParams,{get: function () {
              return ResolvedEl;
            }, set: function (v) {
              ResolvedEl = v;
            }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc,$mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
          if (Self.IsProcedureType(ResolvedEl,true)) {
            Self.CheckCallProcCompatibility(ResolvedEl.LoTypeEl,Params,true,false);
            Self.CreateReference(ResolvedEl.LoTypeEl,Value,Access,null);
            return;
          };
        };
        Self.RaiseMsg(20170216152202,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["(",SubParams.ElementTypeName()],Params);
      } else Self.RaiseNotYetImplemented(20161014085118,Params.Value,"");
    };
    this.ResolveArrayParamsExpr = function (Params, Access) {
      var Self = this;
      var ResolvedEl = new $mod.TPasResolverResult();
      function ResolveValueName(Value, ArrayName) {
        var FindData = new $mod.TPRFindData();
        var Ref = null;
        var DeclEl = null;
        var Proc = null;
        var ImplProc = null;
        var ProcScope = null;
        DeclEl = Self.FindElementWithoutParams$1(ArrayName,{get: function () {
            return FindData;
          }, set: function (v) {
            FindData = v;
          }},Value,true);
        Ref = Self.CreateReference(DeclEl,Value,Access,FindData);
        Self.CheckFoundElement(FindData,Ref);
        if (pas.PasTree.TPasProcedure.isPrototypeOf(DeclEl)) {
          Proc = DeclEl;
          if (((((Access === $mod.TResolvedRefAccess.rraAssign) && pas.PasTree.TPasFunction.isPrototypeOf(Proc)) && (Value.$class.ClassType() === pas.PasTree.TPrimitiveExpr)) && (Params.FParent.$class.ClassType() === pas.PasTree.TPasImplAssign)) && (Params.FParent.left === Params)) {
            ProcScope = rtl.as(Proc.FData,$mod.TPasProcedureScope);
            ImplProc = ProcScope.ImplProc;
            if (ImplProc === null) ImplProc = Proc;
            if (Params.HasParent(ImplProc)) {
              Ref.SetDeclaration(rtl.as(Proc,pas.PasTree.TPasFunction).GetFT().ResultEl);
            };
          };
        };
        Self.ComputeElement(Value,{get: function () {
            return ResolvedEl;
          }, set: function (v) {
            ResolvedEl = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
      };
      var Value = null;
      var SubParams = null;
      Value = Params.Value;
      if (Value === null) Self.RaiseInternalError(20180423093120,pas.PasResolveEval.GetObjName(Params));
      if ((Value.$class.ClassType() === pas.PasTree.TPrimitiveExpr) && (Value.Kind === pas.PasTree.TPasExprKind.pekIdent)) {
        ResolveValueName(Value,Value.Value)}
       else if (Value.$class.ClassType() === pas.PasTree.TSelfExpr) {
        ResolveValueName(Value,"Self")}
       else if (Value.$class.ClassType() === pas.PasTree.TParamsExpr) {
        SubParams = Value;
        if (SubParams.Kind in rtl.createSet(pas.PasTree.TPasExprKind.pekArrayParams,pas.PasTree.TPasExprKind.pekFuncParams)) {
          Self.ResolveExpr(SubParams,$mod.TResolvedRefAccess.rraRead);
          Self.ComputeElement(SubParams,{get: function () {
              return ResolvedEl;
            }, set: function (v) {
              ResolvedEl = v;
            }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc,$mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
          if (Value.FData === null) Self.CreateReference(ResolvedEl.LoTypeEl,Value,Access,null);
        } else Self.RaiseNotYetImplemented(20161010194925,Value,"");
      } else if (Value.$class.InheritsFrom(pas.PasTree.TUnaryExpr)) {
        Self.ResolveExpr(Value.Operand,Access);
        Self.ComputeElement(Value,{get: function () {
            return ResolvedEl;
          }, set: function (v) {
            ResolvedEl = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
      } else Self.RaiseNotYetImplemented(20160927212610,Value,"");
      Self.ResolveArrayParamsArgs(Params,ResolvedEl,Access);
    };
    this.ResolveArrayParamsArgs = function (Params, ResolvedValue, Access) {
      var Self = this;
      function CheckStringOrPointerIndex(IsStringIndex) {
        var Result = false;
        var ArgExp = null;
        var ResolvedArg = new $mod.TPasResolverResult();
        if (!IsStringIndex) {
          if (!Self.ElHasBoolSwitch(Params,pas.PScanner.TBoolSwitch.bsPointerMath)) return false;
        };
        Result = true;
        if (!($mod.TPasResolverResultFlag.rrfReadable in ResolvedValue.Flags)) Self.RaiseXExpectedButYFound(20170216152548,"index",$mod.GetElementTypeName(ResolvedValue.LoTypeEl),Params);
        if (rtl.length(Params.Params) < 1) {
          Self.RaiseMsg(20170216152204,3031,rtl.getResStr(pas.PasResolveEval,"sMissingParameterX"),[pas.SysUtils.BoolToStr$1(IsStringIndex,"character index","index")],Params)}
         else if (rtl.length(Params.Params) > 1) Self.RaiseMsg(20170216152551,3003,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifier"),[","],Params.Params[1]);
        ArgExp = Params.Params[0];
        Self.ComputeElement(ArgExp,{get: function () {
            return ResolvedArg;
          }, set: function (v) {
            ResolvedArg = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
        if (!(ResolvedArg.BaseType in $mod.btAllInteger)) Self.RaiseMsg(20170216152209,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[Self.GetBaseTypeNames(ResolvedArg.BaseType),"integer"],ArgExp);
        if (!($mod.TPasResolverResultFlag.rrfReadable in ResolvedArg.Flags)) Self.RaiseMsg(20170216152211,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),["type","value"],ArgExp);
        Self.AccessExpr(ArgExp,$mod.TResolvedRefAccess.rraRead);
        return Result;
      };
      var PropEl = null;
      var ClassScope = null;
      var i = 0;
      var TypeEl = null;
      if (ResolvedValue.BaseType in $mod.btAllStrings) {
        if (CheckStringOrPointerIndex(true)) return;
      } else if (pas.PasTree.TPasProperty.isPrototypeOf(ResolvedValue.IdentEl) && (Self.GetPasPropertyArgs(ResolvedValue.IdentEl).FCount > 0)) {
        PropEl = ResolvedValue.IdentEl;
        Self.CheckCallPropertyCompatibility(PropEl,Params,true);
        Self.FinishPropertyParamAccess(Params,PropEl);
        return;
      } else if (ResolvedValue.BaseType === $mod.TResolverBaseType.btPointer) {
        if (CheckStringOrPointerIndex(false)) return;
      } else if (ResolvedValue.BaseType === $mod.TResolverBaseType.btContext) {
        TypeEl = ResolvedValue.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          ClassScope = rtl.as($mod.NoNil(TypeEl.FData),$mod.TPasClassScope);
          if (Self.ResolveBracketOperatorClass(Params,ResolvedValue,ClassScope,Access)) return;
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
          if (pas.PasTree.TPasType.isPrototypeOf(ResolvedValue.IdentEl)) Self.RaiseMsg(20170216152215,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["[",ResolvedValue.IdentEl.ElementTypeName()],Params);
          Self.CheckCallArrayCompatibility(TypeEl,Params,true,true);
          for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            Self.AccessExpr(Params.Params[i],$mod.TResolvedRefAccess.rraRead);
          };
          return;
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          if (CheckStringOrPointerIndex(false)) return;
        };
      };
      Self.RaiseMsg(20170216152217,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["[",Self.GetResolverResultDescription(ResolvedValue,true)],Params);
    };
    this.ResolveBracketOperatorClass = function (Params, ResolvedValue, ClassScope, Access) {
      var Result = false;
      var PropEl = null;
      var Value = null;
      PropEl = ClassScope.DefaultProperty;
      if (PropEl !== null) {
        if (pas.PasTree.TPasType.isPrototypeOf(ResolvedValue.IdentEl) && !PropEl.GetIsClass()) this.RaiseMsg(20170216152213,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["[",this.GetResolverResultDescription(ResolvedValue,true)],Params);
        Value = Params.Value;
        if ($mod.TResolvedReference.isPrototypeOf(Value.FData)) this.SetResolvedRefAccess(Value,Value.FData,$mod.TResolvedRefAccess.rraRead);
        this.CreateReference(PropEl,Params,Access,null);
        this.CheckCallPropertyCompatibility(PropEl,Params,true);
        this.FinishPropertyParamAccess(Params,PropEl);
        return true;
      };
      Result = false;
      return Result;
    };
    this.ResolveSetParamsExpr = function (Params) {
      var i = 0;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      if (Params.Value !== null) this.RaiseNotYetImplemented(20160930135910,Params,"");
      for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Param = Params.Params[i];
        this.ComputeElement(Param,{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProcType,$mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
      };
    };
    this.ResolveArrayValues = function (El) {
      var i = 0;
      for (var $l1 = 0, $end2 = rtl.length(El.Values) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.ResolveExpr(El.Values[i],$mod.TResolvedRefAccess.rraRead);
      };
    };
    this.ResolveRecordValues = function (El) {
      var Self = this;
      function GetMember(RecType, aName) {
        var Result = null;
        var i = 0;
        for (var $l1 = 0, $end2 = RecType.Members.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Result = rtl.getObject(RecType.Members.Get(i));
          if (pas.SysUtils.SameText(Result.FName,aName)) return Result;
        };
        if (pas.PasTree.TPasVariable.isPrototypeOf(RecType.VariantEl)) {
          Result = RecType.VariantEl;
          if (pas.SysUtils.SameText(Result.FName,aName)) return Result;
        };
        if (RecType.Variants !== null) for (var $l3 = 0, $end4 = RecType.Variants.FCount - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          Result = GetMember(rtl.getObject(RecType.Variants.Get(i)).Members,aName);
          if (Result !== null) return Result;
        };
        Result = null;
        return Result;
      };
      var i = 0;
      var j = 0;
      var Member = null;
      var RecType = null;
      var Field = null;
      var s = "";
      var ResolvedEl = new $mod.TPasResolverResult();
      Self.ComputeElement(El,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},{},null);
      if ((ResolvedEl.BaseType !== $mod.TResolverBaseType.btContext) || (ResolvedEl.LoTypeEl.$class.ClassType() !== pas.PasTree.TPasRecordType)) {
        Self.RaiseIncompatibleTypeDesc(20180429104135,3028,[],"record value",Self.GetTypeDescription$1(ResolvedEl,false),El);
      };
      RecType = ResolvedEl.LoTypeEl;
      for (var $l1 = 0, $end2 = rtl.length(El.Fields) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Field = El.Fields[i];
        Member = GetMember(RecType,Field.Name);
        if (Member === null) Self.RaiseIdentifierNotFound(20180429104703,Field.Name,Field.NameExp);
        if (!pas.PasTree.TPasVariable.isPrototypeOf(Member)) Self.RaiseMsg(20180429121933,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],Field.ValueExp);
        Self.CreateReference(Member,Field.NameExp,$mod.TResolvedRefAccess.rraAssign,null);
        for (var $l3 = 0, $end4 = i - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          if (pas.SysUtils.SameText(Field.Name,El.Fields[j].Name)) Self.RaiseMsg(20180429104942,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[Field.Name,Self.GetElementSourcePosStr(El.Fields[j].NameExp)],Field.NameExp);
        };
        Self.ResolveExpr(El.Fields[i].ValueExp,$mod.TResolvedRefAccess.rraRead);
        Self.CheckAssignCompatibility(Member,Field.ValueExp,true,null);
      };
      s = "";
      for (var $l5 = 0, $end6 = RecType.Members.FCount - 1; $l5 <= $end6; $l5++) {
        i = $l5;
        Member = rtl.getObject(RecType.Members.Get(i));
        if (!pas.PasTree.TPasVariable.isPrototypeOf(Member)) continue;
        j = rtl.length(El.Fields) - 1;
        while ((j >= 0) && !pas.SysUtils.SameText(Member.FName,El.Fields[j].Name)) j -= 1;
        if (j < 0) {
          if (s !== "") s = s + ", ";
          if (s.length > 30) {
            s = s + "...";
            break;
          };
          s = s + Member.FName;
        };
      };
      if (s !== "") Self.LogMsg(20180429121127,pas.PScanner.TMessageType.mtHint,3109,rtl.getResStr(pas.PasResolveEval,"sMissingFieldsX"),[s],El);
    };
    this.ResolveAccessor = function (Expr) {
      var Result = null;
      var Prim = null;
      var DeclEl = null;
      var Identifier = null;
      var Scope = null;
      if (Expr.$class.ClassType() === pas.PasTree.TBinaryExpr) {
        if (pas.PasTree.TPrimitiveExpr.isPrototypeOf(Expr.left)) {
          Prim = Expr.left;
          if (Prim.Kind !== pas.PasTree.TPasExprKind.pekIdent) this.RaiseXExpectedButYFound(20170216151746,"class",Prim.Value,Prim);
          Scope = rtl.as(this.FTopScope,$mod.TPasIdentifierScope);
          Identifier = Scope.FindIdentifier(Prim.Value);
          if (Identifier === null) this.RaiseIdentifierNotFound(20170216151749,Prim.Value,Prim);
          DeclEl = Identifier.FElement;
          if (DeclEl.$class.ClassType() !== pas.PasTree.TPasClassType) this.RaiseXExpectedButYFound(20170216151752,"class",$mod.GetElementTypeName(DeclEl),Prim);
          this.CreateReference(DeclEl,Prim,$mod.TResolvedRefAccess.rraRead,null);
        } else this.RaiseMsg(20170216151754,3003,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifier"),[pas.PasTree.OpcodeStrings[Expr.OpCode]],Expr);
        if (Expr.OpCode !== pas.PasTree.TExprOpCode.eopSubIdent) this.RaiseMsg(20170216151757,3003,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifier"),[pas.PasTree.OpcodeStrings[Expr.OpCode]],Expr);
        this.PushClassDotScope({get: function () {
            return DeclEl;
          }, set: function (v) {
            DeclEl = v;
          }});
        Expr = Expr.right;
        Result = this.ResolveAccessor(Expr);
        this.PopScope();
      } else if (Expr.$class.ClassType() === pas.PasTree.TPrimitiveExpr) {
        Prim = Expr;
        if (Prim.Kind !== pas.PasTree.TPasExprKind.pekIdent) this.RaiseXExpectedButYFound(20170216151800,"identifier",Prim.Value,Prim);
        Scope = rtl.as(this.FTopScope,$mod.TPasIdentifierScope);
        Identifier = Scope.FindIdentifier(Prim.Value);
        if (Identifier === null) this.RaiseIdentifierNotFound(20170216151803,Prim.Value,Prim);
        DeclEl = Identifier.FElement;
        this.CreateReference(DeclEl,Prim,$mod.TResolvedRefAccess.rraRead,null);
        Result = DeclEl;
      } else this.RaiseNotYetImplemented(20160922163436,Expr,"");
      return Result;
    };
    this.SetResolvedRefAccess = function (Expr, Ref, Access) {
      if (Ref.Access === Access) return;
      if (Access in rtl.createSet($mod.TResolvedRefAccess.rraNone,$mod.TResolvedRefAccess.rraParamToUnknownProc)) return;
      if (Expr === null) ;
      var $tmp1 = Ref.Access;
      if (($tmp1 === $mod.TResolvedRefAccess.rraNone) || ($tmp1 === $mod.TResolvedRefAccess.rraParamToUnknownProc)) {
        Ref.Access = Access}
       else if ($tmp1 === $mod.TResolvedRefAccess.rraRead) {
        if (Access in rtl.createSet($mod.TResolvedRefAccess.rraAssign,$mod.TResolvedRefAccess.rraReadAndAssign,$mod.TResolvedRefAccess.rraVarParam,$mod.TResolvedRefAccess.rraOutParam)) {
          Ref.Access = $mod.TResolvedRefAccess.rraReadAndAssign}
         else return}
       else if (($tmp1 === $mod.TResolvedRefAccess.rraAssign) || ($tmp1 === $mod.TResolvedRefAccess.rraOutParam)) {
        if (Access in rtl.createSet($mod.TResolvedRefAccess.rraRead,$mod.TResolvedRefAccess.rraReadAndAssign,$mod.TResolvedRefAccess.rraVarParam)) {
          Ref.Access = $mod.TResolvedRefAccess.rraReadAndAssign}
         else return}
       else if ($tmp1 === $mod.TResolvedRefAccess.rraReadAndAssign) {
        return}
       else if ($tmp1 === $mod.TResolvedRefAccess.rraVarParam) {
        return}
       else {
        this.RaiseInternalError(20170403163727,"");
      };
    };
    this.AccessExpr = function (Expr, Access) {
      var Ref = null;
      var Bin = null;
      var Params = null;
      var ValueResolved = new $mod.TPasResolverResult();
      var C = null;
      if ($mod.TResolvedReference.isPrototypeOf(Expr.FData)) {
        Ref = Expr.FData;
        this.SetResolvedRefAccess(Expr,Ref,Access);
      };
      C = Expr.$class.ClassType();
      if (C === pas.PasTree.TBinaryExpr) {
        Bin = Expr;
        if (Bin.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopSubIdent,pas.PasTree.TExprOpCode.eopNone)) this.AccessExpr(Bin.right,Access);
      } else if (C === pas.PasTree.TParamsExpr) {
        Params = Expr;
        var $tmp1 = Params.Kind;
        if ($tmp1 === pas.PasTree.TPasExprKind.pekFuncParams) {
          if (this.IsTypeCast(Params)) {
            this.FinishCallArgAccess(Params.Params[0],Access)}
           else this.AccessExpr(Params.Value,Access)}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekArrayParams) {
          this.ComputeElement(Params.Value,{get: function () {
              return ValueResolved;
            }, set: function (v) {
              ValueResolved = v;
            }},{},null);
          if (this.IsDynArray(ValueResolved.LoTypeEl,false)) {}
          else this.AccessExpr(Params.Value,Access);
        } else if ($tmp1 === pas.PasTree.TPasExprKind.pekSet) {
          if (Access !== $mod.TResolvedRefAccess.rraRead) this.RaiseMsg(20170306112306,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],Expr)}
         else {
          this.RaiseNotYetImplemented(20170403173831,Params,"");
        };
      } else if ((C === pas.PasTree.TSelfExpr) || ((C === pas.PasTree.TPrimitiveExpr) && (Expr.Kind === pas.PasTree.TPasExprKind.pekIdent))) {}
      else if ((Access in rtl.createSet($mod.TResolvedRefAccess.rraRead,$mod.TResolvedRefAccess.rraParamToUnknownProc)) && (((C === pas.PasTree.TPrimitiveExpr) || (C === pas.PasTree.TNilExpr)) || (C === pas.PasTree.TBoolConstExpr))) {}
      else if (C === pas.PasTree.TUnaryExpr) {
        this.AccessExpr(Expr.Operand,Access)}
       else {
        this.RaiseNotYetImplemented(20170306102158,Expr,"");
      };
    };
    this.MarkArrayExpr = function (Expr, ArrayType) {
      var Result = false;
      var Ref = null;
      if (Expr.FData === null) {
        this.CreateReference(ArrayType,Expr,$mod.TResolvedRefAccess.rraRead,null);
        Result = true;
      } else if ($mod.TResolvedReference.isPrototypeOf(Expr.FData)) {
        Result = false;
        Ref = Expr.FData;
        if (!pas.PasTree.TPasArrayType.isPrototypeOf(Ref.FDeclaration)) {
          this.RaiseNotYetImplemented(20180618102230,Expr,pas.PasResolveEval.GetObjName(Ref.FDeclaration));
        };
      } else this.RaiseNotYetImplemented(20180618102408,Expr,pas.PasResolveEval.GetObjName(Expr.FData));
      return Result;
    };
    this.MarkArrayExprRecursive = function (Expr, ArrType) {
      var Self = this;
      function Traverse(CurExpr, ArrayType, RgIndex) {
        var Params = [];
        var i = 0;
        var ResolvedElType = new $mod.TPasResolverResult();
        var ParamsExpr = null;
        var BuiltInProc = null;
        var Ref = null;
        if (Self.IsArrayOperatorAdd(CurExpr)) {
          Traverse(CurExpr.left,ArrayType,RgIndex);
          Traverse(CurExpr.right,ArrayType,RgIndex);
        } else if (CurExpr.$class.ClassType() === pas.PasTree.TParamsExpr) {
          ParamsExpr = CurExpr;
          Params = ParamsExpr.Params;
          if (CurExpr.Kind === pas.PasTree.TPasExprKind.pekSet) {
            Self.MarkArrayExpr(ParamsExpr,ArrayType);
            if (rtl.length(Params) === 0) return;
            RgIndex += 1;
            if (RgIndex > rtl.length(ArrayType.Ranges)) {
              Self.ComputeElement(ArrayType.ElType,{get: function () {
                  return ResolvedElType;
                }, set: function (v) {
                  ResolvedElType = v;
                }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
              if ((ResolvedElType.BaseType === $mod.TResolverBaseType.btContext) && pas.PasTree.TPasArrayType.isPrototypeOf(ResolvedElType.LoTypeEl)) {
                ArrayType = ResolvedElType.LoTypeEl;
                RgIndex = 0;
              } else return;
            };
            for (var $l1 = 0, $end2 = rtl.length(Params) - 1; $l1 <= $end2; $l1++) {
              i = $l1;
              Traverse(Params[i],ArrayType,RgIndex);
            };
          } else if (CurExpr.Kind === pas.PasTree.TPasExprKind.pekFuncParams) {
            if ($mod.TResolvedReference.isPrototypeOf(CurExpr.Value.FData)) {
              Ref = CurExpr.Value.FData;
              if (pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(Ref.FDeclaration) && $mod.TResElDataBuiltInProc.isPrototypeOf(Ref.FDeclaration.FData)) {
                BuiltInProc = Ref.FDeclaration.FData;
                if (BuiltInProc.BuiltIn === $mod.TResolverBuiltInProc.bfConcatArray) {
                  for (var $l3 = 0, $end4 = rtl.length(Params) - 1; $l3 <= $end4; $l3++) {
                    i = $l3;
                    Traverse(Params[i],ArrayType,RgIndex);
                  };
                } else if (BuiltInProc.BuiltIn === $mod.TResolverBuiltInProc.bfCopyArray) Traverse(Params[0],ArrayType,RgIndex);
              };
            };
          };
        };
      };
      Traverse(Expr,ArrType,0);
    };
    this.FinishModule = function (CurModule) {
      var CurModuleClass = null;
      var i = 0;
      var ModScope = null;
      this.FStep = $mod.TPasResolverStep.prsFinishingModule;
      CurModuleClass = CurModule.$class.ClassType();
      ModScope = rtl.as(CurModule.FData,$mod.TPasModuleScope);
      if (pas.PScanner.TBoolSwitch.bsRangeChecks in this.FCurrentParser.FScanner.FCurrentBoolSwitches) {
        ModScope.Flags = rtl.includeSet(ModScope.Flags,$mod.TPasModuleScopeFlag.pmsfRangeErrorNeeded);
        this.FindRangeErrorConstructors(CurModule);
      };
      if (CurModuleClass === pas.PasTree.TPasProgram) {
        this.FinishSection(CurModule.ProgramSection);
        this.ResolveImplBlock(CurModule.InitializationSection);
      } else if (CurModuleClass === pas.PasTree.TPasLibrary) {
        this.FinishSection(CurModule.LibrarySection);
        this.ResolveImplBlock(CurModule.InitializationSection);
      } else if (CurModuleClass === pas.PasTree.TPasModule) {
        this.FinishSection(CurModule.InterfaceSection);
        this.FinishSection(CurModule.ImplementationSection);
        if (CurModule.FinalizationSection !== null) this.ResolveImplBlock(CurModule.FinalizationSection);
        if (CurModule.InitializationSection !== null) this.ResolveImplBlock(CurModule.InitializationSection);
      } else this.RaiseInternalError(20160922163327,"");
      for (var $l1 = 0, $end2 = this.FPendingForwardProcs.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.CheckPendingForwardProcs(rtl.getObject(this.FPendingForwardProcs.Get(i)));
      };
      this.FPendingForwardProcs.Clear();
      while ((this.FTopScope !== null) && (this.FTopScope.$class.ClassType() === this.FScopeClass_Section)) this.PopScope();
      this.CheckTopScope(this.FScopeClass_Module,false);
      this.PopScope();
      this.FStep = $mod.TPasResolverStep.prsFinishedModule;
      if ((this.FCurrentParser !== null) && (this.FCurrentParser.FScanner !== null)) {
        this.FCurrentParser.NextToken();
        if (this.FCurrentParser.FScanner.FCurToken !== pas.PScanner.TToken.tkEOF) this.LogMsg(20180628131456,pas.PScanner.TMessageType.mtHint,3058,rtl.getResStr(pas.PasResolveEval,"sTextAfterFinalIgnored"),[],null);
      };
    };
    this.FinishUsesClause = function () {
      var Section = null;
      var CurSection = null;
      var i = 0;
      var j = 0;
      var PublicEl = null;
      var UseModule = null;
      var Scope = null;
      var UsesScope = null;
      var UseUnit = null;
      var FirstName = "";
      var p = 0;
      var OldIdentifier = null;
      this.CheckTopScope(this.FScopeClass_Section,false);
      Scope = this.FTopScope;
      Section = Scope.FElement;
      if (Scope.UsesFinished) this.RaiseInternalError(20180305145220,"");
      Scope.UsesFinished = true;
      for (var $l1 = 0, $end2 = Section.UsesList.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        UseUnit = Section.UsesClause[i];
        UseModule = UseUnit.Module;
        PublicEl = null;
        if (UseModule.$class.ClassType() === pas.PasTree.TPasLibrary) {
          PublicEl = UseModule.LibrarySection}
         else if (UseModule.$class.ClassType() === pas.PasTree.TPasModule) {
          PublicEl = UseModule.InterfaceSection}
         else this.RaiseXExpectedButYFound(20170503004803,"unit",$mod.GetElementTypeName(UseModule),UseUnit);
        if (PublicEl === null) this.RaiseInternalError(20160922163352,"uses element has no interface section: " + pas.PasResolveEval.GetObjName(UseModule));
        if (PublicEl.FData === null) this.RaiseInternalError(20160922163358,(("uses element has no resolver data: " + UseUnit.FName) + "->") + pas.PasResolveEval.GetObjName(PublicEl));
        if (!$mod.TPasIdentifierScope.isPrototypeOf(PublicEl.FData)) this.RaiseInternalError(20160922163403,(((("uses element has invalid resolver data: " + UseUnit.FName) + "->") + pas.PasResolveEval.GetObjName(PublicEl)) + "->") + PublicEl.FData.$classname);
        j = i;
        CurSection = Section;
        do {
          j -= 1;
          if (j < 0) {
            if (CurSection.$class.ClassType() !== pas.PasTree.TImplementationSection) break;
            CurSection = CurSection.GetModule().InterfaceSection;
            if (CurSection === null) break;
            j = rtl.length(CurSection.UsesClause) - 1;
            if (j < 0) break;
          };
          if (CurSection.UsesClause[j].Module === UseModule) this.RaiseMsg(20170503004022,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[UseModule.FName,this.GetElementSourcePosStr(CurSection.UsesClause[j])],UseUnit);
        } while (!false);
        this.AddIdentifier(Scope,UseUnit.FName,UseUnit,$mod.TPasIdentifierKind.pikSimple);
        UsesScope = PublicEl.FData;
        Scope.UsesScopes.Add(UsesScope);
        this.EmitElementHints(Section,UseUnit);
      };
      for (var $l3 = Section.UsesList.FCount - 1; $l3 >= 0; $l3--) {
        i = $l3;
        UseUnit = Section.UsesClause[i];
        FirstName = UseUnit.FName;
        p = pas.System.Pos(".",FirstName);
        if (p < 1) continue;
        FirstName = pas.SysUtils.LeftStr(FirstName,p - 1);
        OldIdentifier = Scope.FindLocalIdentifier(FirstName);
        if (OldIdentifier === null) this.AddIdentifier(Scope,FirstName,UseUnit,$mod.TPasIdentifierKind.pikNamespace);
      };
    };
    this.FinishSection = function (Section) {
      var Scope = null;
      Scope = rtl.as(Section.FData,$mod.TPasSectionScope);
      if (Scope.Finished) return;
      Scope.Finished = true;
      if (pas.PasTree.TInterfaceSection.isPrototypeOf(Section)) this.FinishInterfaceSection(Section);
    };
    this.FinishInterfaceSection = function (Section) {
      this.NotifyPendingUsedInterfaces();
      if (Section === null) ;
    };
    this.FinishTypeSection = function (El) {
      var Self = this;
      function ReplaceDestType(Decl, DestType, DestName, MustExist, ErrorEl) {
        var Result = false;
        var Abort = false;
        var Data = new $mod.TPRFindData();
        var OldDestType = null;
        Abort = false;
        Data = new $mod.TPRFindData();
        Data.ErrorPosEl = ErrorEl;
        rtl.as(Self.FTopScope,$mod.TPasIdentifierScope).IterateElements(DestName,Self.FTopScope,rtl.createCallback(Self,"OnFindFirstElement"),Data,{get: function () {
            return Abort;
          }, set: function (v) {
            Abort = v;
          }});
        if (Data.Found === null) if (MustExist) {
          if ($mod.TUnresolvedPendingRef.isPrototypeOf(DestType.get())) DestType.get().Release();
          Self.RaiseIdentifierNotFound(20170216151543,DestName,ErrorEl);
        } else return false;
        if (Data.Found === DestType.get()) return Result;
        if (pas.PasTree.TPasClassOfType.isPrototypeOf(Decl)) {
          if (Data.Found.$class.ClassType() !== pas.PasTree.TPasClassType) Self.RaiseXExpectedButYFound(20170216151548,"class",$mod.GetElementTypeName(Data.Found),ErrorEl);
        };
        OldDestType = DestType.get();
        DestType.set(Data.Found);
        DestType.get().AddRef();
        if ($mod.TUnresolvedPendingRef.isPrototypeOf(OldDestType)) OldDestType.Release();
        OldDestType.Release();
        if (pas.PasTree.TPasPointerType.isPrototypeOf(Decl)) Self.CheckPointerCycle(Decl);
        Result = true;
        return Result;
      };
      var i = 0;
      var Decl = null;
      var ClassOfEl = null;
      var UnresolvedEl = null;
      var OldClassType = null;
      var TypeEl = null;
      var C = null;
      var PtrType = null;
      for (var $l1 = 0, $end2 = El.Declarations.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Decl = rtl.getObject(El.Declarations.Get(i));
        C = Decl.$class.ClassType();
        if (C.InheritsFrom(pas.PasTree.TPasClassType)) {
          if (Decl.IsForward && (Decl.FData === null)) Self.RaiseMsg(20170216151534,3014,rtl.getResStr(pas.PasResolveEval,"sForwardTypeNotResolved"),[Decl.FName],Decl);
        } else if (C === pas.PasTree.TPasClassOfType) {
          ClassOfEl = Decl;
          TypeEl = Self.ResolveAliasType(ClassOfEl.DestType);
          if (TypeEl.$class.ClassType() === $mod.TUnresolvedPendingRef) {
            UnresolvedEl = TypeEl;
            ReplaceDestType(ClassOfEl,{p: ClassOfEl, get: function () {
                return this.p.DestType;
              }, set: function (v) {
                this.p.DestType = v;
              }},TypeEl.FName,true,UnresolvedEl);
          } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
            OldClassType = rtl.as(TypeEl,pas.PasTree.TPasClassType);
            if (OldClassType.FParent === ClassOfEl.FParent) continue;
            ReplaceDestType(ClassOfEl,{p: ClassOfEl, get: function () {
                return this.p.DestType;
              }, set: function (v) {
                this.p.DestType = v;
              }},ClassOfEl.DestType.FName,false,ClassOfEl);
          };
        } else if (C === pas.PasTree.TPasPointerType) {
          PtrType = Decl;
          TypeEl = Self.ResolveAliasType(PtrType.DestType);
          if (TypeEl.$class.ClassType() === $mod.TUnresolvedPendingRef) {
            UnresolvedEl = TypeEl;
            ReplaceDestType(PtrType,{p: PtrType, get: function () {
                return this.p.DestType;
              }, set: function (v) {
                this.p.DestType = v;
              }},TypeEl.FName,true,UnresolvedEl);
          } else {
            if (TypeEl.FParent === Decl.FParent) continue;
            ReplaceDestType(PtrType,{p: PtrType, get: function () {
                return this.p.DestType;
              }, set: function (v) {
                this.p.DestType = v;
              }},TypeEl.FName,false,PtrType);
          };
        };
      };
    };
    this.FinishTypeDef = function (El) {
      var C = null;
      var aType = null;
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasEnumType) {
        this.FinishEnumType(El)}
       else if (C === pas.PasTree.TPasSetType) {
        this.FinishSetType(El)}
       else if (C === pas.PasTree.TPasRangeType) {
        this.FinishRangeType(El)}
       else if (C === pas.PasTree.TPasRecordType) {
        this.FinishRecordType(El)}
       else if (C === pas.PasTree.TPasClassType) {
        this.FinishClassType(El)}
       else if (C === pas.PasTree.TPasClassOfType) {
        this.FinishClassOfType(El)}
       else if (C === pas.PasTree.TPasPointerType) {
        this.FinishPointerType(El)}
       else if (C === pas.PasTree.TPasArrayType) {
        this.FinishArrayType(El)}
       else if ((C === pas.PasTree.TPasAliasType) || (C === pas.PasTree.TPasTypeAliasType)) {
        aType = this.ResolveAliasType(El);
        if (pas.PasTree.TPasClassType.isPrototypeOf(aType) && (aType.FData === null)) return;
        this.EmitTypeHints(El,El.DestType);
      } else if (C === pas.PasTree.TPasPointerType) this.EmitTypeHints(El,El.DestType);
    };
    this.FinishEnumType = function (El) {
      if (this.FTopScope.FElement === El) this.PopScope();
    };
    this.FinishSetType = function (El) {
      var BaseTypeData = null;
      var StartResolved = new $mod.TPasResolverResult();
      var EndResolved = new $mod.TPasResolverResult();
      var RangeExpr = null;
      var C = null;
      var EnumType = null;
      EnumType = this.ResolveAliasType(El.EnumType);
      C = EnumType.$class.ClassType();
      if (C === pas.PasTree.TPasEnumType) {
        this.FinishSubElementType(El,EnumType);
        return;
      } else if (C === pas.PasTree.TPasRangeType) {
        RangeExpr = EnumType.RangeExpr;
        if ((RangeExpr.FParent === El) && (RangeExpr.FData === null)) this.FinishConstRangeExpr(RangeExpr,{get: function () {
            return StartResolved;
          }, set: function (v) {
            StartResolved = v;
          }},{get: function () {
            return EndResolved;
          }, set: function (v) {
            EndResolved = v;
          }});
        this.FinishSubElementType(El,EnumType);
        return;
      } else if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
        if ($mod.TResElDataBaseType.isPrototypeOf(EnumType.FData)) {
          BaseTypeData = EnumType.FData;
          if (BaseTypeData.BaseType in rtl.unionSet($mod.btAllChars,rtl.createSet($mod.TResolverBaseType.btBoolean,$mod.TResolverBaseType.btByte))) return;
          this.RaiseXExpectedButYFound(20170216151553,"char or boolean",$mod.GetElementTypeName(EnumType),EnumType);
        };
      };
      this.RaiseXExpectedButYFound(20170216151557,"enum type",$mod.GetElementTypeName(EnumType),EnumType);
    };
    this.FinishSubElementType = function (Parent, El) {
      var Decl = null;
      var EnumScope = null;
      this.EmitTypeHints(Parent,El);
      if ((El.FName !== "") || (this.FAnonymousElTypePostfix === "")) return;
      if (Parent.FName === "") this.RaiseMsg(20170415165455,3056,rtl.getResStr(pas.PasResolveEval,"sCannotNestAnonymousX"),[$mod.GetElementTypeName(El)],El);
      if (!pas.PasTree.TPasDeclarations.isPrototypeOf(Parent.FParent)) this.RaiseMsg(20170416094735,3056,rtl.getResStr(pas.PasResolveEval,"sCannotNestAnonymousX"),[$mod.GetElementTypeName(El)],El);
      El.FName = Parent.FName + this.FAnonymousElTypePostfix;
      Decl = Parent.FParent;
      Decl.Declarations.Add(El);
      El.AddRef();
      El.SetParent(Decl);
      Decl.Types.Add(El);
      if ((El.$class.ClassType() === pas.PasTree.TPasEnumType) && (Parent.$class.ClassType() === pas.PasTree.TPasSetType)) {
        EnumScope = El.FData;
        if (EnumScope.CanonicalSet !== Parent) {
          if (EnumScope.CanonicalSet !== null) EnumScope.CanonicalSet.Release();
          EnumScope.CanonicalSet = Parent;
          Parent.AddRef();
        };
      };
    };
    this.FinishRangeType = function (El) {
      var RangeExpr = null;
      var StartResolved = new $mod.TPasResolverResult();
      var EndResolved = new $mod.TPasResolverResult();
      RangeExpr = El.RangeExpr;
      this.ResolveExpr(RangeExpr.left,$mod.TResolvedRefAccess.rraRead);
      this.ResolveExpr(RangeExpr.right,$mod.TResolvedRefAccess.rraRead);
      this.FinishConstRangeExpr(RangeExpr,{get: function () {
          return StartResolved;
        }, set: function (v) {
          StartResolved = v;
        }},{get: function () {
          return EndResolved;
        }, set: function (v) {
          EndResolved = v;
        }});
    };
    this.FinishConstRangeExpr = function (RangeExpr, LeftResolved, RightResolved) {
      var RgValue = null;
      var Left = null;
      var Right = null;
      Left = RangeExpr.left;
      Right = RangeExpr.right;
      this.ComputeElement(Left,LeftResolved,rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
      this.ComputeElement(Right,RightResolved,rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
      this.CheckSetLitElCompatible(Left,Right,LeftResolved.get(),RightResolved.get());
      RgValue = this.Eval(RangeExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
      pas.PasResolveEval.ReleaseEvalValue({get: function () {
          return RgValue;
        }, set: function (v) {
          RgValue = v;
        }});
    };
    this.FinishRecordType = function (El) {
      if (this.FTopScope.FElement === El) this.PopScope();
    };
    this.FinishClassType = function (El) {
      function TMethResolution(s) {
        if (s) {
          this.InterfaceIndex = s.InterfaceIndex;
          this.ProcClassType = s.ProcClassType;
          this.InterfaceName = s.InterfaceName;
          this.ImplementName = s.ImplementName;
          this.ResolutionEl = s.ResolutionEl;
          this.Count = s.Count;
        } else {
          this.InterfaceIndex = 0;
          this.ProcClassType = null;
          this.InterfaceName = "";
          this.ImplementName = "";
          this.ResolutionEl = null;
          this.Count = 0;
        };
        this.$equal = function (b) {
          return (this.InterfaceIndex === b.InterfaceIndex) && ((this.ProcClassType === b.ProcClassType) && ((this.InterfaceName === b.InterfaceName) && ((this.ImplementName === b.ImplementName) && ((this.ResolutionEl === b.ResolutionEl) && (this.Count === b.Count)))));
        };
      };
      var ClassScope = null;
      var i = 0;
      var j = 0;
      var k = 0;
      var IntfType = null;
      var Resolutions = [];
      var map = null;
      var o = null;
      var Member = null;
      var IntfProc = null;
      var FindData = new this.TFindOverloadProcData();
      var Abort = false;
      var MethRes = null;
      var ResolvedEl = new $mod.TPasResolverResult();
      var ProcName = "";
      var IntfProcName = "";
      var Expr = null;
      Resolutions = [];
      if ($mod.TPasClassScope.isPrototypeOf(El.FData)) {
        if (this.FTopScope.FElement !== El) this.RaiseInternalError(20180322142534,(pas.PasResolveEval.GetObjName(El) + "<>") + pas.PasResolveEval.GetObjName(this.FTopScope.FElement));
        ClassScope = rtl.as(El.FData,$mod.TPasClassScope);
        if (El.ObjKind === pas.PasTree.TPasObjKind.okClass) {
          if (El.Interfaces.FCount > 0) {
            if (ClassScope.Interfaces === null) this.RaiseInternalError(20180408162725,"");
            if (ClassScope.Interfaces.FCount !== El.Interfaces.FCount) this.RaiseInternalError(20180408162746,"");
          } else if (ClassScope.Interfaces !== null) this.RaiseInternalError(20180408162803,"");
          for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            Member = rtl.getObject(El.Members.Get(i));
            if (!pas.PasTree.TPasMethodResolution.isPrototypeOf(Member)) continue;
            MethRes = Member;
            this.ComputeElement(MethRes.InterfaceName,{get: function () {
                return ResolvedEl;
              }, set: function (v) {
                ResolvedEl = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
            if (!pas.PasTree.TPasType.isPrototypeOf(ResolvedEl.IdentEl)) this.RaiseInternalError(20180323135729,$mod.GetResolverResultDbg(ResolvedEl));
            j = El.Interfaces.IndexOf(ResolvedEl.IdentEl);
            if (j < 0) this.RaiseInternalError(20180323135900,$mod.GetResolverResultDbg(ResolvedEl));
            o = rtl.getObject(ClassScope.Interfaces.Get(j));
            if (pas.PasTree.TPasProperty.isPrototypeOf(o)) this.RaiseMsg(20180323140046,3089,rtl.getResStr(pas.PasResolveEval,"sCannotMixMethodResolutionAndDelegationAtX"),[this.GetElementSourcePosStr(o)],MethRes.InterfaceName);
            if (o === null) o = this.CreateClassIntfMap(El,j);
            map = o;
            Expr = MethRes.InterfaceProc;
            if (!pas.PasTree.TPrimitiveExpr.isPrototypeOf(Expr)) this.RaiseXExpectedButYFound(20180327162230,"method name",$mod.GetElementTypeName(Expr),Expr);
            if (Expr.Kind !== pas.PasTree.TPasExprKind.pekIdent) this.RaiseXExpectedButYFound(20180327162236,"method name",$mod.GetElementTypeName(Expr),Expr);
            IntfProcName = Expr.Value;
            Expr = MethRes.ImplementationProc;
            if (!pas.PasTree.TPrimitiveExpr.isPrototypeOf(Expr)) this.RaiseXExpectedButYFound(20180327152115,"method name",$mod.GetElementTypeName(Expr),Expr);
            if (Expr.Kind !== pas.PasTree.TPasExprKind.pekIdent) this.RaiseXExpectedButYFound(20180327152157,"method name",$mod.GetElementTypeName(Expr),Expr);
            ProcName = Expr.Value;
            for (var $l3 = 0, $end4 = rtl.length(Resolutions) - 1; $l3 <= $end4; $l3++) {
              k = $l3;
              var $with5 = Resolutions[k];
              if ((($with5.InterfaceIndex === j) && ($with5.ProcClassType === MethRes.ProcClass)) && ($with5.InterfaceName === IntfProcName)) this.RaiseMsg(20180327164626,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[((($mod.GetElementTypeName$1($with5.ProcClassType) + " ") + map.Intf.FName) + ".") + $with5.InterfaceName,this.GetElementSourcePosStr($with5.ResolutionEl)],MethRes.InterfaceProc);
            };
            k = rtl.length(Resolutions);
            Resolutions = rtl.arraySetLength(Resolutions,TMethResolution,k + 1);
            var $with6 = Resolutions[k];
            $with6.InterfaceIndex = j;
            $with6.ProcClassType = MethRes.ProcClass;
            $with6.InterfaceName = IntfProcName;
            $with6.ImplementName = ProcName;
            $with6.ResolutionEl = MethRes;
            $with6.Count = 0;
          };
          for (var $l7 = 0, $end8 = El.Interfaces.FCount - 1; $l7 <= $end8; $l7++) {
            i = $l7;
            o = rtl.getObject(ClassScope.Interfaces.Get(i));
            if (pas.PasTree.TPasProperty.isPrototypeOf(o)) continue;
            if (o === null) o = this.CreateClassIntfMap(El,i);
            map = o;
            while (map !== null) {
              IntfType = map.Intf;
              for (var $l9 = 0, $end10 = IntfType.Members.FCount - 1; $l9 <= $end10; $l9++) {
                j = $l9;
                Member = rtl.getObject(IntfType.Members.Get(j));
                if (!pas.PasTree.TPasProcedure.isPrototypeOf(Member)) continue;
                IntfProc = Member;
                ProcName = IntfProc.FName;
                for (var $l11 = 0, $end12 = rtl.length(Resolutions) - 1; $l11 <= $end12; $l11++) {
                  k = $l11;
                  var $with13 = Resolutions[k];
                  if ((($with13.InterfaceIndex === i) && ($with13.ProcClassType === IntfProc.$class.ClassType())) && pas.SysUtils.SameText($with13.InterfaceName,IntfProc.FName)) {
                    ProcName = $with13.ImplementName;
                    $with13.Count += 1;
                  };
                };
                FindData = new this.TFindOverloadProcData();
                FindData.Proc = IntfProc;
                FindData.Args = IntfProc.ProcType.Args;
                FindData.Kind = $mod.TPasResolver.TFindOverloadProcKind.fopkSameSignature;
                Abort = false;
                this.IterateElements(ProcName,rtl.createCallback(this,"OnFindOverloadProc"),FindData,{get: function () {
                    return Abort;
                  }, set: function (v) {
                    Abort = v;
                  }});
                if (FindData.Found === null) this.RaiseMsg(20180322143202,5042,rtl.getResStr(pas.PasResolveEval,"sNoMatchingImplForIntfMethodXFound"),[this.GetProcTypeDescription(IntfProc.ProcType,rtl.createSet($mod.TPRProcTypeDescFlag.prptdUseName,$mod.TPRProcTypeDescFlag.prptdAddPaths,$mod.TPRProcTypeDescFlag.prptdResolveSimpleAlias))],El);
                map.Procs.Put(j,FindData.Found);
              };
              map = map.AncestorMap;
            };
          };
        };
      };
      if (this.FTopScope.FElement === El) this.PopScope();
    };
    this.FinishClassOfType = function (El) {
      var TypeEl = null;
      TypeEl = this.ResolveAliasType(El.DestType);
      if ($mod.TUnresolvedPendingRef.isPrototypeOf(TypeEl)) return;
      if (pas.PasTree.TPasClassType.isPrototypeOf(TypeEl) && (TypeEl.ObjKind === pas.PasTree.TPasObjKind.okClass)) return;
      this.RaiseMsg(20170216151602,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[El.DestType.FName,"class"],El);
    };
    this.FinishPointerType = function (El) {
      var TypeEl = null;
      TypeEl = this.ResolveAliasType(El.DestType);
      if ($mod.TUnresolvedPendingRef.isPrototypeOf(TypeEl)) return;
      if (El.DestType.FParent === El) this.RaiseMsg(20180429094237,3002,rtl.getResStr(pas.PasResolveEval,"sNotYetImplemented"),["pointer of anonymous type"],El.DestType);
      this.CheckPointerCycle(El);
    };
    this.FinishArrayType = function (El) {
      var i = 0;
      var Expr = null;
      var RangeResolved = new $mod.TPasResolverResult();
      var TypeEl = null;
      for (var $l1 = 0, $end2 = rtl.length(El.Ranges) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Expr = El.Ranges[i];
        this.ResolveExpr(Expr,$mod.TResolvedRefAccess.rraRead);
        this.ComputeElement(Expr,{get: function () {
            return RangeResolved;
          }, set: function (v) {
            RangeResolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
        if ((RangeResolved.IdentEl !== null) && !pas.PasTree.TPasType.isPrototypeOf(RangeResolved.IdentEl)) {
          this.RaiseXExpectedButYFound(20170216151607,"range",$mod.GetElementTypeName(RangeResolved.IdentEl),Expr);
        };
        if (RangeResolved.BaseType === $mod.TResolverBaseType.btRange) {
          if (RangeResolved.SubType in $mod.btArrayRangeTypes) {}
          else if (RangeResolved.SubType === $mod.TResolverBaseType.btContext) {
            TypeEl = RangeResolved.LoTypeEl;
            if (pas.PasTree.TPasRangeType.isPrototypeOf(TypeEl)) {}
            else if (pas.PasTree.TPasEnumType.isPrototypeOf(TypeEl)) {}
            else this.RaiseXExpectedButYFound(20171009193629,"range",$mod.GetElementTypeName(RangeResolved.IdentEl),Expr);
          } else this.RaiseXExpectedButYFound(20171009193514,"range",$mod.GetElementTypeName(RangeResolved.IdentEl),Expr);
        } else if (RangeResolved.BaseType in $mod.btArrayRangeTypes) {}
        else if ((RangeResolved.BaseType === $mod.TResolverBaseType.btContext) && pas.PasTree.TPasEnumType.isPrototypeOf(RangeResolved.LoTypeEl)) {}
        else this.RaiseXExpectedButYFound(20170216151609,"range",$mod.GetElementTypeName(RangeResolved.IdentEl),Expr);
      };
      if (El.ElType === null) this.RaiseNotYetImplemented(20171005235610,El,"array of const");
      this.FinishSubElementType(El,El.ElType);
    };
    this.FinishResourcestring = function (El) {
      var ResolvedEl = new $mod.TPasResolverResult();
      this.ResolveExpr(El.Expr,$mod.TResolvedRefAccess.rraRead);
      this.ComputeElement(El.Expr,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
      if (!(ResolvedEl.BaseType in $mod.btAllStringAndChars)) this.RaiseXExpectedButYFound(20171004135753,"string",this.GetTypeDescription$1(ResolvedEl,false),El.Expr);
    };
    this.FinishProcedure = function (aProc) {
      var i = 0;
      var Body = null;
      var SubEl = null;
      var SubProcScope = null;
      var ProcScope = null;
      this.CheckTopScope(this.FScopeClass_Proc,false);
      ProcScope = this.FTopScope;
      if (ProcScope.FElement !== aProc) this.RaiseInternalError(20170220163043,"");
      Body = aProc.Body;
      if (Body !== null) {
        this.StoreScannerFlagsInProc(ProcScope);
        if (pas.PasTree.TPasImplAsmStatement.isPrototypeOf(Body.Body)) aProc.FModifiers = rtl.unionSet(aProc.FModifiers,rtl.createSet(pas.PasTree.TProcedureModifier.pmAssembler));
        this.ResolveImplBlock(Body.Body);
        for (var $l1 = 0, $end2 = Body.Declarations.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          SubEl = rtl.getObject(Body.Declarations.Get(i));
          if (pas.PasTree.TPasProcedure.isPrototypeOf(SubEl) && SubEl.IsForward()) {
            SubProcScope = rtl.as(SubEl.FData,$mod.TPasProcedureScope);
            if (SubProcScope.ImplProc === null) this.RaiseMsg(20170216151613,3015,rtl.getResStr(pas.PasResolveEval,"sForwardProcNotResolved"),[$mod.GetElementTypeName(SubEl),SubEl.FName],SubEl);
          };
        };
      };
      this.PopScope();
    };
    this.FinishProcedureType = function (El) {
      var ProcName = "";
      var FindData = new this.TFindOverloadProcData();
      var DeclProc = null;
      var Proc = null;
      var ParentProc = null;
      var Abort = false;
      var HasDots = false;
      var DeclProcScope = null;
      var ProcScope = null;
      var ParentScope = null;
      var pm = 0;
      var ptm = 0;
      var ObjKind = 0;
      if (pas.PasTree.TPasProcedure.isPrototypeOf(El.FParent) && (El.FParent.ProcType === El)) {
        this.CheckTopScope(this.FScopeClass_Proc,false);
        Proc = El.FParent;
        ProcName = Proc.FName;
        if (($mod.TPasResolverOption.proProcTypeWithoutIsNested in this.FOptions) && El.GetIsNested()) this.RaiseInvalidProcTypeModifier(20170402120811,El,pas.PasTree.TProcTypeModifier.ptmIsNested,El);
        if (Proc.FParent.$class.ClassType() === pas.PasTree.TProcedureBody) {
          if (!($mod.TPasResolverOption.proProcTypeWithoutIsNested in this.FOptions)) El.SetIsNested(true);
          ParentProc = rtl.as(Proc.FParent.FParent,pas.PasTree.TPasProcedure);
          if (ParentProc.ProcType.GetIsOfObject()) El.SetIsOfObject(true);
        };
        if (El.GetIsReference()) {
          if (El.GetIsNested()) this.RaiseInvalidProcTypeModifier(20170419142818,El,pas.PasTree.TProcTypeModifier.ptmIsNested,El);
          if (El.GetIsOfObject()) this.RaiseInvalidProcTypeModifier(20170419142844,El,pas.PasTree.TProcTypeModifier.ptmOfObject,El);
        };
        if (Proc.IsExternal()) {
          for (var $l1 in Proc.FModifiers) {
            pm = +$l1;
            if (!(pm in rtl.createSet(pas.PasTree.TProcedureModifier.pmVirtual,pas.PasTree.TProcedureModifier.pmDynamic,pas.PasTree.TProcedureModifier.pmOverride,pas.PasTree.TProcedureModifier.pmOverload,pas.PasTree.TProcedureModifier.pmMessage,pas.PasTree.TProcedureModifier.pmReintroduce,pas.PasTree.TProcedureModifier.pmExternal,pas.PasTree.TProcedureModifier.pmDispId,pas.PasTree.TProcedureModifier.pmFar))) this.RaiseMsg(20170216151616,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(Proc),"external, " + pas.PasTree.ModifierNames[pm]],Proc);
          };
          for (var $l2 in Proc.ProcType.Modifiers) {
            ptm = +$l2;
            if (!(ptm in rtl.createSet(pas.PasTree.TProcTypeModifier.ptmOfObject,pas.PasTree.TProcTypeModifier.ptmIsNested,pas.PasTree.TProcTypeModifier.ptmStatic,pas.PasTree.TProcTypeModifier.ptmVarargs,pas.PasTree.TProcTypeModifier.ptmReferenceTo))) this.RaiseMsg(20170411171224,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(Proc),"external, " + pas.PasTree.ProcTypeModifiers[ptm]],Proc);
          };
        };
        HasDots = pas.System.Pos(".",ProcName) > 1;
        if (pas.PasTree.TPasClassType.isPrototypeOf(Proc.FParent)) {
          ObjKind = Proc.FParent.ObjKind;
          var $tmp3 = ObjKind;
          if (($tmp3 === pas.PasTree.TPasObjKind.okInterface) || ($tmp3 === pas.PasTree.TPasObjKind.okDispInterface)) {
            if (Proc.IsVirtual()) this.RaiseMsg(20180321234324,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[(pas.PasTree.ObjKindNames[ObjKind] + " ") + $mod.GetElementTypeName(Proc),"virtual"],Proc);
            if (Proc.IsOverride()) this.RaiseMsg(20180321234551,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[(pas.PasTree.ObjKindNames[ObjKind] + " ") + $mod.GetElementTypeName(Proc),"override"],Proc);
          };
          if (Proc.IsAbstract()) {
            if (!Proc.IsVirtual()) this.RaiseMsg(20170216151623,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(Proc),"abstract without virtual"],Proc);
            if (Proc.IsOverride()) this.RaiseMsg(20170216151625,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(Proc),"abstract, override"],Proc);
          };
          if (Proc.IsVirtual() && Proc.IsOverride()) this.RaiseMsg(20170216151627,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(Proc),"virtual, override"],Proc);
          if (Proc.IsReintroduced() && Proc.IsOverride()) this.RaiseMsg(20171119111845,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(Proc),"reintroduce, override"],Proc);
          if (Proc.IsForward()) this.RaiseMsg(20170216151629,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(Proc),"forward"],Proc);
          if (Proc.IsStatic()) if ((Proc.$class.ClassType() !== pas.PasTree.TPasClassProcedure) && (Proc.$class.ClassType() !== pas.PasTree.TPasClassFunction)) this.RaiseMsg(20170216151631,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(Proc),"static"],Proc);
        } else {
          if (Proc.IsAbstract()) this.RaiseInvalidProcModifier(20170216151634,Proc,pas.PasTree.TProcedureModifier.pmAbstract,Proc);
          if (Proc.IsVirtual()) this.RaiseInvalidProcModifier(20170216151635,Proc,pas.PasTree.TProcedureModifier.pmVirtual,Proc);
          if (Proc.IsOverride()) this.RaiseInvalidProcModifier(20170216151637,Proc,pas.PasTree.TProcedureModifier.pmOverride,Proc);
          if (Proc.IsMessage()) this.RaiseInvalidProcModifier(20170216151638,Proc,pas.PasTree.TProcedureModifier.pmMessage,Proc);
          if (Proc.IsStatic()) this.RaiseInvalidProcTypeModifier(20170216151640,El,pas.PasTree.TProcTypeModifier.ptmStatic,El);
          if ((!HasDots && (Proc.$class.ClassType() !== pas.PasTree.TPasProcedure)) && (Proc.$class.ClassType() !== pas.PasTree.TPasFunction)) this.RaiseXExpectedButYFound(20170419232724,"full method name","short name",El);
        };
        if (HasDots) {
          this.FinishMethodImplHeader(Proc);
          return;
        };
        if (!$mod.IsValidIdent(ProcName,false,false)) this.RaiseNotYetImplemented(20160922163407,El,"");
        if (pas.PasTree.TPasFunctionType.isPrototypeOf(El)) this.EmitTypeHints(El.ResultEl,El.ResultEl.ResultType);
        if (Proc.LibraryExpr !== null) this.ResolveExpr(Proc.LibraryExpr,$mod.TResolvedRefAccess.rraRead);
        if (Proc.LibrarySymbolName !== null) this.ResolveExpr(Proc.LibrarySymbolName,$mod.TResolvedRefAccess.rraRead);
        if (pas.PasTree.TPasClassType.isPrototypeOf(Proc.FParent)) {
          this.FinishMethodDeclHeader(Proc);
          return;
        };
        if ($mod.ProcNeedsBody(Proc)) {
          ParentScope = this.GetScopes(this.FScopeCount - 2);
          DeclProc = this.FindProcOverload(ProcName,Proc,ParentScope);
          if ((DeclProc === null) && (Proc.FParent.$class.ClassType() === pas.PasTree.TImplementationSection)) DeclProc = this.FindProcOverload(ProcName,Proc,rtl.as(Proc.GetModule().InterfaceSection.FData,$mod.TPasScope));
          if (DeclProc !== null) {
            if ($mod.ProcNeedsImplProc(DeclProc)) {
              DeclProcScope = rtl.as(DeclProc.FData,$mod.TPasProcedureScope);
              if (DeclProcScope.ImplProc !== null) this.RaiseMsg(20180318222430,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[DeclProcScope.ImplProc.FName,this.GetElementSourcePosStr(DeclProcScope.ImplProc)],Proc);
              this.CheckProcSignatureMatch(DeclProc,Proc,true);
              DeclProcScope.ImplProc = Proc;
              ProcScope = rtl.as(Proc.FData,$mod.TPasProcedureScope);
              ProcScope.DeclarationProc = DeclProc;
              rtl.as(ParentScope,$mod.TPasIdentifierScope).RemoveLocalIdentifier(Proc);
              this.ReplaceProcScopeImplArgsWithDeclArgs(ProcScope);
              return;
            } else this.RaiseMsg(20180318220543,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[DeclProc.FName,this.GetElementSourcePosStr(DeclProc)],Proc);
          };
        } else {
          ProcScope = rtl.as(Proc.FData,$mod.TPasProcedureScope);
          this.StoreScannerFlagsInProc(ProcScope);
        };
        FindData = new this.TFindOverloadProcData();
        FindData.Proc = Proc;
        FindData.Args = Proc.ProcType.Args;
        FindData.Kind = $mod.TPasResolver.TFindOverloadProcKind.fopkProc;
        Abort = false;
        this.IterateElements(ProcName,rtl.createCallback(this,"OnFindOverloadProc"),FindData,{get: function () {
            return Abort;
          }, set: function (v) {
            Abort = v;
          }});
      } else if (El.FName !== "") {}
      else this.RaiseNotYetImplemented(20160922163411,El.FParent,"");
    };
    this.FinishMethodDeclHeader = function (Proc) {
      var Self = this;
      function VisibilityLowered(Proc, OverloadProc) {
        Self.LogMsg(20170325004215,pas.PScanner.TMessageType.mtNote,3250,rtl.getResStr(pas.PasResolveEval,"sVirtualMethodXHasLowerVisibility"),[Proc.FName,pas.PasTree.VisibilityNames[Proc.Visibility],OverloadProc.FParent.FName,pas.PasTree.VisibilityNames[OverloadProc.Visibility]],Proc);
        Proc.Visibility = OverloadProc.Visibility;
      };
      var Abort = false;
      var ClassScope = null;
      var FindData = new Self.TFindOverloadProcData();
      var OverloadProc = null;
      var ProcScope = null;
      var i = 0;
      Proc.ProcType.SetIsOfObject(true);
      ProcScope = rtl.as(Self.FTopScope,$mod.TPasProcedureScope);
      Self.StoreScannerFlagsInProc(ProcScope);
      ClassScope = rtl.as(Self.GetScopes(Self.FScopeCount - 2),$mod.TPasClassScope);
      ProcScope.ClassScope = ClassScope;
      FindData = new Self.TFindOverloadProcData();
      FindData.Proc = Proc;
      FindData.Args = Proc.ProcType.Args;
      FindData.Kind = $mod.TPasResolver.TFindOverloadProcKind.fopkMethod;
      Abort = false;
      ClassScope.IterateElements(Proc.FName,ClassScope,rtl.createCallback(Self,"OnFindOverloadProc"),FindData,{get: function () {
          return Abort;
        }, set: function (v) {
          Abort = v;
        }});
      if (FindData.Found === null) {
        if (Proc.IsOverride()) Self.RaiseMsg(20170216151702,3022,rtl.getResStr(pas.PasResolveEval,"sNoMethodInAncestorToOverride"),[Self.GetProcTypeDescription(Proc.ProcType,rtl.createSet($mod.TPRProcTypeDescFlag.prptdUseName,$mod.TPRProcTypeDescFlag.prptdResolveSimpleAlias))],Proc.ProcType);
      } else {
        OverloadProc = FindData.Found;
        ProcScope.OverriddenProc = OverloadProc;
        if (Proc.IsOverride()) {
          if (!OverloadProc.IsVirtual() && !OverloadProc.IsOverride()) Self.RaiseMsg(20170216151708,3022,rtl.getResStr(pas.PasResolveEval,"sNoMethodInAncestorToOverride"),[Self.GetProcTypeDescription(Proc.ProcType,rtl.createSet($mod.TPRProcTypeDescFlag.prptdUseName,$mod.TPRProcTypeDescFlag.prptdResolveSimpleAlias))],Proc.ProcType);
          Self.CheckProcSignatureMatch(OverloadProc,Proc,false);
          if (Proc.Visibility !== OverloadProc.Visibility) {
            var $tmp1 = Proc.Visibility;
            if (($tmp1 === pas.PasTree.TPasMemberVisibility.visPrivate) || ($tmp1 === pas.PasTree.TPasMemberVisibility.visStrictPrivate)) {
              if (!(OverloadProc.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPrivate,pas.PasTree.TPasMemberVisibility.visStrictPrivate))) VisibilityLowered(Proc,OverloadProc)}
             else if (($tmp1 === pas.PasTree.TPasMemberVisibility.visProtected) || ($tmp1 === pas.PasTree.TPasMemberVisibility.visStrictProtected)) {
              if (!(OverloadProc.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPrivate,pas.PasTree.TPasMemberVisibility.visProtected,pas.PasTree.TPasMemberVisibility.visStrictPrivate,pas.PasTree.TPasMemberVisibility.visStrictProtected))) VisibilityLowered(Proc,OverloadProc)}
             else if ($tmp1 === pas.PasTree.TPasMemberVisibility.visPublic) {
              if (!(OverloadProc.Visibility in rtl.createSet(null,pas.PasTree.TPasMemberVisibility.visPrivate,pas.PasTree.TPasMemberVisibility.visPublic,pas.PasTree.TPasMemberVisibility.visStrictPrivate,pas.PasTree.TPasMemberVisibility.visStrictProtected))) VisibilityLowered(Proc,OverloadProc)}
             else if ($tmp1 === pas.PasTree.TPasMemberVisibility.visPublished) {}
            else {
              Self.RaiseNotYetImplemented(20170325003315,Proc,"visibility");
            };
          };
          if ($mod.TPasResolverOption.proFixCaseOfOverrides in Self.FOptions) Proc.FName = OverloadProc.FName;
          if (OverloadProc.IsAbstract()) for (var $l2 = rtl.length(ClassScope.AbstractProcs) - 1; $l2 >= 0; $l2--) {
            i = $l2;
            if (ClassScope.AbstractProcs[i] === OverloadProc) ClassScope.AbstractProcs.splice(i,1);
          };
        };
      };
      if (Proc.IsAbstract()) ClassScope.AbstractProcs.splice(rtl.length(ClassScope.AbstractProcs),0,Proc);
    };
    this.FinishMethodImplHeader = function (ImplProc) {
      var ProcName = "";
      var CurClassType = null;
      var ImplProcScope = null;
      var DeclProcScope = null;
      var DeclProc = null;
      var CurClassScope = null;
      var SelfArg = null;
      var p = 0;
      if (ImplProc.IsExternal()) this.RaiseMsg(20170216151715,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(ImplProc),"external"],ImplProc);
      if (ImplProc.IsExported()) this.RaiseMsg(20170216151717,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(ImplProc),"export"],ImplProc);
      ProcName = ImplProc.FName;
      ImplProc.ProcType.SetIsOfObject(true);
      do {
        p = pas.System.Pos(".",ProcName);
        if (p < 1) break;
        pas.System.Delete({get: function () {
            return ProcName;
          }, set: function (v) {
            ProcName = v;
          }},1,p);
      } while (!false);
      if (!$mod.IsValidIdent(ProcName,false,false)) this.RaiseNotYetImplemented(20160922163421,ImplProc.ProcType,"");
      ImplProcScope = rtl.as(ImplProc.FData,$mod.TPasProcedureScope);
      CurClassScope = ImplProcScope.ClassScope;
      if (CurClassScope === null) this.RaiseInternalError(20161013172346,"");
      CurClassType = rtl.as($mod.NoNil(CurClassScope.FElement),pas.PasTree.TPasClassType);
      DeclProc = this.FindProcOverload(ProcName,ImplProc,CurClassScope);
      if (DeclProc === null) this.RaiseIdentifierNotFound(20170216151720,ImplProc.FName,ImplProc.ProcType);
      DeclProcScope = rtl.as(DeclProc.FData,$mod.TPasProcedureScope);
      if (DeclProcScope.ImplProc !== null) this.RaiseMsg(20180212094546,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[DeclProcScope.ImplProc.FName,this.GetElementSourcePosStr(DeclProcScope.ImplProc)],ImplProc);
      if (DeclProc.IsAbstract()) this.RaiseMsg(20170216151722,3017,rtl.getResStr(pas.PasResolveEval,"sAbstractMethodsMustNotHaveImplementation"),[],ImplProc);
      if (DeclProc.IsExternal()) this.RaiseXExpectedButYFound(20170216151725,"method","external method",ImplProc);
      this.CheckProcSignatureMatch(DeclProc,ImplProc,true);
      ImplProcScope.DeclarationProc = DeclProc;
      DeclProcScope.ImplProc = ImplProc;
      this.ReplaceProcScopeImplArgsWithDeclArgs(ImplProcScope);
      if (!DeclProc.IsStatic()) {
        if ((((DeclProc.$class.ClassType() === pas.PasTree.TPasClassConstructor) || (DeclProc.$class.ClassType() === pas.PasTree.TPasClassDestructor)) || (DeclProc.$class.ClassType() === pas.PasTree.TPasClassProcedure)) || (DeclProc.$class.ClassType() === pas.PasTree.TPasClassFunction)) {
          if (!DeclProc.IsStatic()) {
            SelfArg = pas.PasTree.TPasArgument.$create("Create$1",["Self",DeclProc]);
            ImplProcScope.SelfArg = SelfArg;
            SelfArg.Access = pas.PasTree.TArgumentAccess.argConst;
            SelfArg.ArgType = CurClassScope.CanonicalClassOf;
            SelfArg.ArgType.AddRef();
            this.AddIdentifier(ImplProcScope,"Self",SelfArg,$mod.TPasIdentifierKind.pikSimple);
          };
        } else {
          SelfArg = pas.PasTree.TPasArgument.$create("Create$1",["Self",DeclProc]);
          ImplProcScope.SelfArg = SelfArg;
          SelfArg.Access = pas.PasTree.TArgumentAccess.argConst;
          SelfArg.ArgType = CurClassType;
          CurClassType.AddRef();
          this.AddIdentifier(ImplProcScope,"Self",SelfArg,$mod.TPasIdentifierKind.pikSimple);
        };
      };
    };
    this.FinishExceptOnExpr = function () {
      var El = null;
      var ResolvedType = new $mod.TPasResolverResult();
      this.CheckTopScope($mod.TPasExceptOnScope,false);
      El = this.FTopScope.FElement;
      this.ComputeElement(El.TypeEl,{get: function () {
          return ResolvedType;
        }, set: function (v) {
          ResolvedType = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
      this.CheckIsClass(El.TypeEl,ResolvedType);
    };
    this.FinishExceptOnStatement = function () {
      this.CheckTopScope($mod.TPasExceptOnScope,false);
      this.ResolveImplElement(this.FTopScope.FElement.Body);
      this.PopScope();
    };
    this.FinishDeclaration = function (El) {
      var C = null;
      C = El.$class.ClassType();
      if ((C === pas.PasTree.TPasVariable) || (C === pas.PasTree.TPasConst)) {
        this.FinishVariable(El)}
       else if (C === pas.PasTree.TPasProperty) {
        this.FinishPropertyOfClass(El)}
       else if (C === pas.PasTree.TPasArgument) {
        this.FinishArgument(El)}
       else if (C === pas.PasTree.TPasMethodResolution) {
        this.FinishMethodResolution(El)}
       else {
        this.RaiseNotYetImplemented(20180127121557,El,"");
      };
    };
    this.FinishVariable = function (El) {
      var ResolvedAbs = new $mod.TPasResolverResult();
      var C = null;
      var Value = null;
      if (El.Visibility === pas.PasTree.TPasMemberVisibility.visPublished) {
        if (rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TVariableModifier.vmClass,pas.PasTree.TVariableModifier.vmStatic,pas.PasTree.TVariableModifier.vmCVar),El.VarModifiers),{})) this.RaiseMsg(20170403223837,3053,rtl.getResStr(pas.PasResolveEval,"sSymbolCannotBePublished"),[],El);
      };
      if (El.Expr !== null) this.ResolveExpr(El.Expr,$mod.TResolvedRefAccess.rraRead);
      if (El.VarType !== null) {
        if (El.Expr !== null) this.CheckAssignCompatibility(El,El.Expr,true,null);
      } else if (El.Expr !== null) {
        Value = this.Eval(El.Expr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConstExt),true);
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
      };
      if (El.AbsoluteExpr !== null) {
        if (El.$class.ClassType() === pas.PasTree.TPasConst) this.RaiseMsg(20180201225530,3052,rtl.getResStr(pas.PasResolveEval,"sXModifierMismatchY"),["absolute","const"],El.AbsoluteExpr);
        if (El.VarType === null) this.RaiseMsg(20171225235125,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],El.AbsoluteExpr);
        if (pas.PasTree.TVariableModifier.vmExternal in El.VarModifiers) this.RaiseMsg(20171226104221,3052,rtl.getResStr(pas.PasResolveEval,"sXModifierMismatchY"),["absolute","external"],El.AbsoluteExpr);
        this.ResolveExpr(El.AbsoluteExpr,$mod.TResolvedRefAccess.rraRead);
        this.ComputeElement(El.AbsoluteExpr,{get: function () {
            return ResolvedAbs;
          }, set: function (v) {
            ResolvedAbs = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
        if (!($mod.TPasResolverResultFlag.rrfReadable in ResolvedAbs.Flags) || (ResolvedAbs.IdentEl === null)) this.RaiseVarExpected(20171225234734,El.AbsoluteExpr,ResolvedAbs.IdentEl);
        C = ResolvedAbs.IdentEl.$class.ClassType();
        if (((C === pas.PasTree.TPasVariable) || (C === pas.PasTree.TPasArgument)) || ((C === pas.PasTree.TPasConst) && (ResolvedAbs.IdentEl.VarType !== null))) {}
        else this.RaiseMsg(20171225235203,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],El.AbsoluteExpr);
        if (!($mod.TPasResolverResultFlag.rrfReadable in ResolvedAbs.Flags)) this.RaiseVarExpected(20171225235249,El.AbsoluteExpr,ResolvedAbs.IdentEl);
        if (ResolvedAbs.IdentEl === El) this.RaiseMsg(20171226000703,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],El.AbsoluteExpr);
      };
      if (El.VarType !== null) this.EmitTypeHints(El,El.VarType);
    };
    this.FinishPropertyOfClass = function (PropEl) {
      var Self = this;
      var PropType = null;
      var ClassScope = null;
      var AncestorProp = null;
      var IndexExpr = null;
      function GetPropType() {
        var AncEl = null;
        if (PropType !== null) return;
        AncEl = null;
        if (ClassScope.AncestorScope !== null) AncEl = ClassScope.AncestorScope.FindElement(PropEl.FName);
        if (pas.PasTree.TPasProperty.isPrototypeOf(AncEl)) {
          AncestorProp = AncEl;
          PropEl.FData.AncestorProp = AncestorProp;
          if ($mod.TPasResolverOption.proFixCaseOfOverrides in Self.FOptions) PropEl.FName = AncestorProp.FName;
        } else AncestorProp = null;
        if (PropEl.VarType !== null) {
          PropType = PropEl.VarType;
        } else {
          if (AncestorProp === null) Self.RaiseMsg(20170216151741,3025,rtl.getResStr(pas.PasResolveEval,"sNoPropertyFoundToOverride"),[],PropEl);
          if (PropEl.$class.ClassType() !== AncestorProp.$class.ClassType()) Self.RaiseXExpectedButYFound(20170216151744,$mod.GetElementTypeName(AncestorProp),$mod.GetElementTypeName(PropEl),PropEl);
          PropType = Self.GetPasPropertyType(AncestorProp);
          if (ClassScope.DefaultProperty === AncestorProp) ClassScope.DefaultProperty = PropEl;
        };
      };
      function CheckIndexArg(ArgNo, IndexResolved, ProcArg, ErrorEl) {
        var ProcArgResolved = new $mod.TPasResolverResult();
        if (!(ProcArg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argDefault,pas.PasTree.TArgumentAccess.argConst))) Self.RaiseMsg(20170924202437,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[pas.SysUtils.IntToStr(ArgNo),pas.PasTree.AccessDescriptions[ProcArg.Access],pas.PasTree.AccessDescriptions[pas.PasTree.TArgumentAccess.argConst]],ErrorEl);
        if (ProcArg.ArgType === null) {
          Self.RaiseMsg(20170924202531,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[pas.SysUtils.IntToStr(ArgNo),"untyped",Self.GetTypeDescription$1(IndexResolved,false)],ErrorEl)}
         else {
          if (Self.CheckParamCompatibility(IndexExpr,ProcArg,ArgNo,true,false) === 2147483647) {
            Self.ComputeElement(ProcArg.ArgType,{get: function () {
                return ProcArgResolved;
              }, set: function (v) {
                ProcArgResolved = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
            Self.RaiseIncompatibleTypeRes(20170924203829,3006,[pas.SysUtils.IntToStr(ArgNo)],ProcArgResolved,IndexResolved,ErrorEl);
          };
        };
      };
      function CheckArgs(Proc, IndexVal, IndexResolved, ErrorEl) {
        var ArgNo = 0;
        var PropArg = null;
        var ProcArg = null;
        var PropArgResolved = new $mod.TPasResolverResult();
        var ProcArgResolved = new $mod.TPasResolverResult();
        var NeedCheckingAccess = false;
        ArgNo = 0;
        while (ArgNo < PropEl.FArgs.FCount) {
          if (ArgNo >= Proc.ProcType.Args.FCount) Self.RaiseMsg(20170216151805,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[Proc.FName],ErrorEl);
          PropArg = rtl.getObject(PropEl.FArgs.Get(ArgNo));
          ProcArg = rtl.getObject(Proc.ProcType.Args.Get(ArgNo));
          ArgNo += 1;
          NeedCheckingAccess = false;
          if (PropArg.Access !== ProcArg.Access) {
            if ((PropArg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argDefault,pas.PasTree.TArgumentAccess.argConst)) && (ProcArg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argDefault,pas.PasTree.TArgumentAccess.argConst))) {
              if ((PropArg.ArgType !== null) && (ProcArg.ArgType !== null)) NeedCheckingAccess = true;
            };
            if (!NeedCheckingAccess) Self.RaiseMsg(20170216151808,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[pas.SysUtils.IntToStr(ArgNo),pas.PasTree.AccessDescriptions[ProcArg.Access],pas.PasTree.AccessDescriptions[PropArg.Access]],ErrorEl);
          };
          if (PropArg.ArgType === null) {
            if (ProcArg.ArgType !== null) Self.RaiseMsg(20170216151811,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[pas.SysUtils.IntToStr(ArgNo),$mod.GetElementTypeName(ProcArg.ArgType),"untyped"],ErrorEl);
          } else if (ProcArg.ArgType === null) {
            Self.RaiseMsg(20170216151813,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[pas.SysUtils.IntToStr(ArgNo),"untyped",$mod.GetElementTypeName(PropArg.ArgType)],ErrorEl)}
           else {
            Self.ComputeElement(PropArg,{get: function () {
                return PropArgResolved;
              }, set: function (v) {
                PropArgResolved = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
            Self.ComputeElement(ProcArg,{get: function () {
                return ProcArgResolved;
              }, set: function (v) {
                ProcArgResolved = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
            if (PropArgResolved.BaseType !== ProcArgResolved.BaseType) Self.RaiseMsg(20170216151816,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[pas.SysUtils.IntToStr(ArgNo),Self.GetBaseTypeNames(ProcArgResolved.BaseType),Self.GetBaseTypeNames(PropArgResolved.BaseType)],ErrorEl);
            if (PropArgResolved.LoTypeEl === null) Self.RaiseInternalError(20161010125255,"");
            if (ProcArgResolved.LoTypeEl === null) Self.RaiseInternalError(20161010125304,"");
            if (!Self.IsSameType(PropArgResolved.HiTypeEl,ProcArgResolved.HiTypeEl,$mod.TPRResolveAlias.prraSimple)) Self.RaiseIncompatibleType(20170216151819,3006,[pas.SysUtils.IntToStr(ArgNo)],ProcArgResolved.HiTypeEl,PropArgResolved.HiTypeEl,ErrorEl);
          };
          if (NeedCheckingAccess) {
            if (!(PropArgResolved.BaseType in rtl.unionSet(rtl.unionSet(rtl.unionSet($mod.btAllBooleans,$mod.btAllInteger),$mod.btAllStringAndChars),$mod.btAllFloats))) Self.RaiseMsg(20181007181647,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[pas.SysUtils.IntToStr(ArgNo),pas.PasTree.AccessDescriptions[ProcArg.Access],pas.PasTree.AccessDescriptions[PropArg.Access]],ErrorEl);
          };
        };
        if (IndexVal !== null) {
          if (ArgNo >= Proc.ProcType.Args.FCount) Self.RaiseMsg(20170924202334,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[Proc.FName],ErrorEl);
          ProcArg = rtl.getObject(Proc.ProcType.Args.Get(ArgNo));
          CheckIndexArg(ArgNo,IndexResolved,ProcArg,ErrorEl);
        };
      };
      function CheckImplements() {
        var i = 0;
        var j = 0;
        var Expr = null;
        var ResolvedEl = new $mod.TPasResolverResult();
        var aClass = null;
        var PropClassType = null;
        var IntfType = null;
        var OrigIntfType = null;
        var PropTypeRes = null;
        var o = null;
        if (!pas.PasTree.TPasClassType.isPrototypeOf(PropEl.FParent)) Self.RaiseInternalError(20180323172125,$mod.GetElementDbgPath(PropEl));
        aClass = PropEl.FParent;
        if (PropEl.FArgs.FCount > 0) Self.RaiseMsg(20180323170952,3101,rtl.getResStr(pas.PasResolveEval,"sImplementsDoesNotSupportArrayProperty"),[],PropEl.Implements[0]);
        if (IndexExpr !== null) Self.RaiseMsg(20180323171354,3102,rtl.getResStr(pas.PasResolveEval,"sImplementsDoesNotSupportIndex"),[],PropEl.Implements[0]);
        if (Self.GetPasPropertyGetter(PropEl) === null) Self.RaiseMsg(20180323221322,3104,rtl.getResStr(pas.PasResolveEval,"sImplPropMustHaveReadSpec"),[],PropEl.Implements[0]);
        for (var $l1 = 0, $end2 = rtl.length(PropEl.Implements) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Expr = PropEl.Implements[i];
          Self.ResolveExpr(Expr,$mod.TResolvedRefAccess.rraRead);
          Self.ComputeElement(Expr,{get: function () {
              return ResolvedEl;
            }, set: function (v) {
              ResolvedEl = v;
            }},rtl.createSet($mod.TPasResolverComputeFlag.rcType,$mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
          if (!pas.PasTree.TPasType.isPrototypeOf(ResolvedEl.IdentEl)) if (ResolvedEl.IdentEl === null) {
            Self.RaiseXExpectedButYFound(20180323171911,"interface",$mod.GetElementTypeName(ResolvedEl.LoTypeEl),Expr)}
           else Self.RaiseXExpectedButYFound(20180323224846,"interface",$mod.GetElementTypeName(ResolvedEl.IdentEl),Expr);
          OrigIntfType = ResolvedEl.IdentEl;
          IntfType = Self.ResolveAliasType(OrigIntfType);
          if (!pas.PasTree.TPasClassType.isPrototypeOf(IntfType) || (IntfType.ObjKind !== pas.PasTree.TPasObjKind.okInterface)) Self.RaiseXExpectedButYFound(20180323172904,"interface",$mod.GetElementTypeName(OrigIntfType),Expr);
          j = Self.IndexOfImplementedInterface(aClass,IntfType);
          if (j < 0) Self.RaiseMsg(20180323172420,3103,rtl.getResStr(pas.PasResolveEval,"sImplementsUsedOnUnimplIntf"),[OrigIntfType.FName],Expr);
          PropTypeRes = Self.ResolveAliasType(PropType);
          if (!pas.PasTree.TPasClassType.isPrototypeOf(PropTypeRes)) Self.RaiseMsg(20180323222334,3105,rtl.getResStr(pas.PasResolveEval,"sDoesNotImplementInterface"),[$mod.GetElementTypeName(PropType),$mod.GetElementTypeName(OrigIntfType)],Expr);
          PropClassType = PropTypeRes;
          var $tmp3 = PropClassType.ObjKind;
          if ($tmp3 === pas.PasTree.TPasObjKind.okClass) {
            if (Self.GetClassImplementsIntf(PropClassType,IntfType) === null) Self.RaiseMsg(20180323223324,3105,rtl.getResStr(pas.PasResolveEval,"sDoesNotImplementInterface"),[$mod.GetElementTypeName(PropType),$mod.GetElementTypeName(OrigIntfType)],Expr)}
           else if ($tmp3 === pas.PasTree.TPasObjKind.okInterface) {
            if (Self.CheckClassIsClass(PropType,IntfType,Expr) === 2147483647) Self.RaiseIncompatibleType(20180323173746,3028,[],OrigIntfType,PropType,Expr)}
           else {
            Self.RaiseMsg(20180323222821,3105,rtl.getResStr(pas.PasResolveEval,"sDoesNotImplementInterface"),[$mod.GetElementTypeName(PropType),$mod.GetElementTypeName(OrigIntfType)],Expr);
          };
          o = rtl.getObject(ClassScope.Interfaces.Get(j));
          if (pas.PasTree.TPasProperty.isPrototypeOf(o)) {
            Self.RaiseMsg(20180323174240,3103,rtl.getResStr(pas.PasResolveEval,"sDuplicateImplementsForIntf"),[OrigIntfType.FName,Self.GetElementSourcePosStr(o)],Expr)}
           else if ($mod.TPasClassIntfMap.isPrototypeOf(o)) {
            Self.RaiseInternalError(20180323175919,$mod.GetElementDbgPath(PropEl));
          } else if (o !== null) {
            Self.RaiseInternalError(20180323174342,pas.PasResolveEval.GetObjName(o))}
           else ClassScope.Interfaces.Put(j,PropEl);
        };
      };
      function CheckStoredAccessor(Expr, IndexVal, IndexResolved) {
        var ResolvedEl = new $mod.TPasResolverResult();
        var Value = null;
        var Proc = null;
        var ResultType = null;
        var TypeEl = null;
        var aVar = null;
        var IdentEl = null;
        var ExpArgCnt = 0;
        var ProcArg = null;
        Self.ResolveExpr(Expr,$mod.TResolvedRefAccess.rraRead);
        Self.ComputeElement(Expr,{get: function () {
            return ResolvedEl;
          }, set: function (v) {
            ResolvedEl = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
        IdentEl = ResolvedEl.IdentEl;
        if (pas.PasTree.TPasProcedure.isPrototypeOf(IdentEl)) {
          Proc = IdentEl;
          if (!pas.PasTree.TPrimitiveExpr.isPrototypeOf(Expr)) Self.RaiseXExpectedButYFound(20170923202002,"member function","foreign " + $mod.GetElementTypeName(Proc),Expr);
          if (Proc.$class.ClassType() !== pas.PasTree.TPasFunction) Self.RaiseXExpectedButYFound(20170216151925,"function",$mod.GetElementTypeName(Proc),Expr);
          ResultType = Proc.GetFT().ResultEl.ResultType;
          if (!Self.IsBaseType(ResultType,$mod.TResolverBaseType.btBoolean,true)) Self.RaiseXExpectedButYFound(20170923200836,"function: boolean","function:" + Self.GetTypeDescription(ResultType,false),PropEl.StoredAccessor);
          ExpArgCnt = 0;
          if (IndexVal !== null) ExpArgCnt += 1;
          if (Proc.ProcType.Args.FCount !== ExpArgCnt) Self.RaiseMsg(20170923200840,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[Proc.FName],Expr);
          if (IndexVal !== null) {
            ProcArg = rtl.getObject(Proc.ProcType.Args.Get(0));
            CheckIndexArg(1,IndexResolved,ProcArg,Expr);
          };
          return;
        };
        if ((IdentEl !== null) && ((IdentEl.$class.ClassType() === pas.PasTree.TPasVariable) || ((IdentEl.$class.ClassType() === pas.PasTree.TPasConst) && !IdentEl.IsConst))) {
          aVar = IdentEl;
          if (!pas.PasTree.TPrimitiveExpr.isPrototypeOf(Expr)) Self.RaiseXExpectedButYFound(20170923202003,"member variable","foreign " + $mod.GetElementTypeName(aVar),Expr);
          TypeEl = aVar.VarType;
          TypeEl = Self.ResolveAliasType(TypeEl);
          if (!Self.IsBaseType(TypeEl,$mod.TResolverBaseType.btBoolean,true)) Self.RaiseIncompatibleType(20170409214300,3028,[],TypeEl,Self.GetBaseTypes($mod.TResolverBaseType.btBoolean),Expr);
          if ((pas.PasTree.TVariableModifier.vmClass in PropEl.VarModifiers) !== (pas.PasTree.TVariableModifier.vmClass in aVar.VarModifiers)) if (pas.PasTree.TVariableModifier.vmClass in PropEl.VarModifiers) {
            Self.RaiseXExpectedButYFound(20170409214351,"class var","var",Expr)}
           else Self.RaiseXExpectedButYFound(20170409214359,"var","class var",Expr);
          return;
        };
        if ((ResolvedEl.BaseType === $mod.TResolverBaseType.btBoolean) && (ResolvedEl.ExprEl !== null)) {
          Value = Self.Eval(Expr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
          if (Value !== null) try {
            if (Value.Kind !== pas.PasResolveEval.TREVKind.revkBool) Self.RaiseXExpectedButYFound(20170923200256,"boolean",Self.GetResolverResultDescription(ResolvedEl,false),Expr);
            return;
          } finally {
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }});
          };
        };
        Self.RaiseXExpectedButYFound(20170923194234,"identifier",Self.GetResolverResultDescription(ResolvedEl,false),Expr);
      };
      var ResultType = null;
      var CurClassType = null;
      var AccEl = null;
      var Proc = null;
      var Arg = null;
      var PropArgCount = 0;
      var NeedArgCnt = 0;
      var PropTypeResolved = new $mod.TPasResolverResult();
      var DefaultResolved = new $mod.TPasResolverResult();
      var IndexResolved = new $mod.TPasResolverResult();
      var AncIndexResolved = new $mod.TPasResolverResult();
      var m = 0;
      var IndexVal = null;
      var AncIndexExpr = null;
      Self.CheckTopScope($mod.TPasPropertyScope,false);
      Self.PopScope();
      if (PropEl.Visibility === pas.PasTree.TPasMemberVisibility.visPublished) for (var $l1 in PropEl.VarModifiers) {
        m = +$l1;
        if (!(m in rtl.createSet(pas.PasTree.TVariableModifier.vmExternal))) Self.RaiseMsg(20170403224112,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),["published property",('"' + pas.PasTree.VariableModifierNames[m]) + '"'],PropEl);
      };
      PropType = null;
      CurClassType = rtl.as(PropEl.FParent,pas.PasTree.TPasClassType);
      ClassScope = rtl.as($mod.NoNil(CurClassType.FData),$mod.TPasClassScope);
      AncestorProp = null;
      GetPropType();
      IndexVal = null;
      try {
        if (PropEl.IndexExpr !== null) {
          IndexExpr = PropEl.IndexExpr;
          Self.ResolveExpr(IndexExpr,$mod.TResolvedRefAccess.rraRead);
        } else IndexExpr = Self.GetPasPropertyIndex(PropEl);
        if (IndexExpr !== null) {
          Self.ComputeElement(IndexExpr,{get: function () {
              return IndexResolved;
            }, set: function (v) {
              IndexResolved = v;
            }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
          IndexVal = Self.Eval(IndexExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
          var $tmp2 = IndexVal.Kind;
          if ((((((($tmp2 === pas.PasResolveEval.TREVKind.revkBool) || ($tmp2 === pas.PasResolveEval.TREVKind.revkInt)) || ($tmp2 === pas.PasResolveEval.TREVKind.revkUInt)) || ($tmp2 === pas.PasResolveEval.TREVKind.revkFloat)) || ($tmp2 === pas.PasResolveEval.TREVKind.revkCurrency)) || ($tmp2 === pas.PasResolveEval.TREVKind.revkUnicodeString)) || ($tmp2 === pas.PasResolveEval.TREVKind.revkEnum)) {}
          else {
            Self.RaiseXExpectedButYFound(20170924202837,"ordinal",Self.GetTypeDescription$1(IndexResolved,false),PropEl.IndexExpr);
          };
          if ((PropEl.IndexExpr !== null) && (PropEl.VarType === null)) {
            AncIndexExpr = Self.GetPasPropertyIndex(AncestorProp);
            if (AncIndexExpr === null) {
              if (PropEl.ReadAccessor === null) {
                AccEl = Self.GetPasPropertyGetter(AncestorProp);
                if (pas.PasTree.TPasProcedure.isPrototypeOf(AccEl)) Self.RaiseMsg(20171002144103,3072,rtl.getResStr(pas.PasResolveEval,"sAddingIndexSpecifierRequiresNewX"),["read"],IndexExpr);
              };
              if (PropEl.WriteAccessor === null) {
                AccEl = Self.GetPasPropertySetter(AncestorProp);
                if (pas.PasTree.TPasProcedure.isPrototypeOf(AccEl)) Self.RaiseMsg(20171002144419,3072,rtl.getResStr(pas.PasResolveEval,"sAddingIndexSpecifierRequiresNewX"),["write"],IndexExpr);
              };
              if (PropEl.StoredAccessor === null) {
                AccEl = Self.GetPasPropertyStoredExpr(AncestorProp);
                if (AccEl !== null) {
                  Self.ComputeElement(AccEl,{get: function () {
                      return AncIndexResolved;
                    }, set: function (v) {
                      AncIndexResolved = v;
                    }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
                  if (pas.PasTree.TPasProcedure.isPrototypeOf(AncIndexResolved.IdentEl)) Self.RaiseMsg(20171002144644,3072,rtl.getResStr(pas.PasResolveEval,"sAddingIndexSpecifierRequiresNewX"),["stored"],IndexExpr);
                };
              };
            } else Self.CheckEqualElCompatibility(PropEl.IndexExpr,AncIndexExpr,PropEl.IndexExpr,true,false);
          };
        };
        if (PropEl.ReadAccessor !== null) {
          AccEl = Self.ResolveAccessor(PropEl.ReadAccessor);
          if ((AccEl.$class.ClassType() === pas.PasTree.TPasVariable) || (AccEl.$class.ClassType() === pas.PasTree.TPasConst)) {
            if (PropEl.FArgs.FCount > 0) Self.RaiseXExpectedButYFound(20170216151823,"function",$mod.GetElementTypeName(AccEl),PropEl.ReadAccessor);
            if (!Self.IsSameType(AccEl.VarType,PropType,$mod.TPRResolveAlias.prraAlias)) Self.RaiseIncompatibleType(20170216151826,3028,[],PropType,AccEl.VarType,PropEl.ReadAccessor);
            if ((pas.PasTree.TVariableModifier.vmClass in PropEl.VarModifiers) !== (pas.PasTree.TVariableModifier.vmClass in AccEl.VarModifiers)) if (pas.PasTree.TVariableModifier.vmClass in PropEl.VarModifiers) {
              Self.RaiseXExpectedButYFound(20170216151828,"class var","var",PropEl.ReadAccessor)}
             else Self.RaiseXExpectedButYFound(20170216151831,"var","class var",PropEl.ReadAccessor);
          } else if (pas.PasTree.TPasProcedure.isPrototypeOf(AccEl)) {
            Proc = AccEl;
            if (pas.PasTree.TVariableModifier.vmClass in PropEl.VarModifiers) {
              if (Proc.$class.ClassType() !== pas.PasTree.TPasClassFunction) Self.RaiseXExpectedButYFound(20170216151834,"class function",$mod.GetElementTypeName(Proc),PropEl.ReadAccessor);
              if (Proc.IsStatic() === ($mod.TPasResolverOption.proClassPropertyNonStatic in Self.FOptions)) if (Proc.IsStatic()) {
                Self.RaiseMsg(20170216151837,3040,rtl.getResStr(pas.PasResolveEval,"sClassPropertyAccessorMustNotBeStatic"),[],PropEl.ReadAccessor)}
               else Self.RaiseMsg(20170216151839,3039,rtl.getResStr(pas.PasResolveEval,"sClassPropertyAccessorMustBeStatic"),[],PropEl.ReadAccessor);
            } else {
              if (Proc.$class.ClassType() !== pas.PasTree.TPasFunction) Self.RaiseXExpectedButYFound(20170216151842,"function",$mod.GetElementTypeName(Proc),PropEl.ReadAccessor);
            };
            ResultType = Proc.GetFT().ResultEl.ResultType;
            if (!Self.IsSameType(ResultType,PropType,$mod.TPRResolveAlias.prraAlias)) Self.RaiseXExpectedButYFound(20170216151844,"function result " + Self.GetTypeDescription(PropType,true),Self.GetTypeDescription(ResultType,true),PropEl.ReadAccessor);
            CheckArgs(Proc,IndexVal,IndexResolved,PropEl.ReadAccessor);
            NeedArgCnt = PropEl.FArgs.FCount;
            if (IndexVal !== null) NeedArgCnt += 1;
            if (Proc.ProcType.Args.FCount !== NeedArgCnt) Self.RaiseMsg(20170216151847,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[Proc.FName],PropEl.ReadAccessor);
          } else Self.RaiseXExpectedButYFound(20170216151850,"variable",$mod.GetElementTypeName(AccEl),PropEl.ReadAccessor);
        };
        if (PropEl.WriteAccessor !== null) {
          AccEl = Self.ResolveAccessor(PropEl.WriteAccessor);
          if ((AccEl.$class.ClassType() === pas.PasTree.TPasVariable) || ((AccEl.$class.ClassType() === pas.PasTree.TPasConst) && !AccEl.IsConst)) {
            if (PropEl.FArgs.FCount > 0) Self.RaiseXExpectedButYFound(20170216151852,"procedure",$mod.GetElementTypeName(AccEl),PropEl.WriteAccessor);
            if (!Self.IsSameType(AccEl.VarType,PropType,$mod.TPRResolveAlias.prraAlias)) Self.RaiseIncompatibleType(20170216151855,3028,[],PropType,AccEl.VarType,PropEl.WriteAccessor);
            if ((pas.PasTree.TVariableModifier.vmClass in PropEl.VarModifiers) !== (pas.PasTree.TVariableModifier.vmClass in AccEl.VarModifiers)) if (pas.PasTree.TVariableModifier.vmClass in PropEl.VarModifiers) {
              Self.RaiseXExpectedButYFound(20170216151858,"class var","var",PropEl.WriteAccessor)}
             else Self.RaiseXExpectedButYFound(20170216151900,"var","class var",PropEl.WriteAccessor);
          } else if (pas.PasTree.TPasProcedure.isPrototypeOf(AccEl)) {
            Proc = AccEl;
            if (pas.PasTree.TVariableModifier.vmClass in PropEl.VarModifiers) {
              if (Proc.$class.ClassType() !== pas.PasTree.TPasClassProcedure) Self.RaiseXExpectedButYFound(20170216151903,"class procedure",$mod.GetElementTypeName(Proc),PropEl.WriteAccessor);
              if (Proc.IsStatic() === ($mod.TPasResolverOption.proClassPropertyNonStatic in Self.FOptions)) if (Proc.IsStatic()) {
                Self.RaiseMsg(20170216151905,3040,rtl.getResStr(pas.PasResolveEval,"sClassPropertyAccessorMustNotBeStatic"),[],PropEl.WriteAccessor)}
               else Self.RaiseMsg(20170216151906,3039,rtl.getResStr(pas.PasResolveEval,"sClassPropertyAccessorMustBeStatic"),[],PropEl.WriteAccessor);
            } else {
              if (Proc.$class.ClassType() !== pas.PasTree.TPasProcedure) Self.RaiseXExpectedButYFound(20170216151910,"procedure",$mod.GetElementTypeName(Proc),PropEl.WriteAccessor);
            };
            CheckArgs(Proc,IndexVal,IndexResolved,PropEl.ReadAccessor);
            PropArgCount = PropEl.FArgs.FCount;
            if (IndexVal !== null) PropArgCount += 1;
            if (Proc.ProcType.Args.FCount !== (PropArgCount + 1)) Self.RaiseMsg(20170216151913,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[Proc.FName],PropEl.WriteAccessor);
            Arg = rtl.getObject(Proc.ProcType.Args.Get(PropArgCount));
            if (!(Arg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argDefault,pas.PasTree.TArgumentAccess.argConst))) Self.RaiseMsg(20170216151917,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[pas.SysUtils.IntToStr(PropArgCount + 1),pas.PasTree.AccessDescriptions[Arg.Access],pas.PasTree.AccessDescriptions[pas.PasTree.TArgumentAccess.argConst]],PropEl.WriteAccessor);
            if (!Self.IsSameType(Arg.ArgType,PropType,$mod.TPRResolveAlias.prraAlias)) Self.RaiseIncompatibleType(20170216151919,3006,[pas.SysUtils.IntToStr(PropArgCount + 1)],Arg.ArgType,PropType,PropEl.WriteAccessor);
          } else Self.RaiseXExpectedButYFound(20170216151921,"variable",$mod.GetElementTypeName(AccEl),PropEl.WriteAccessor);
        } else if ((PropEl.ReadAccessor === null) && (PropEl.VarType !== null)) Self.RaiseMsg(20180519173551,3050,rtl.getResStr(pas.PasResolveEval,"sPropertyMustHaveReadOrWrite"),[],PropEl);
        if (rtl.length(PropEl.Implements) > 0) CheckImplements();
        if (PropEl.StoredAccessor !== null) {
          CheckStoredAccessor(PropEl.StoredAccessor,IndexVal,IndexResolved);
        };
        if (PropEl.DefaultExpr !== null) {
          Self.ResolveExpr(PropEl.DefaultExpr,$mod.TResolvedRefAccess.rraRead);
          Self.ComputeElement(PropEl.DefaultExpr,{get: function () {
              return DefaultResolved;
            }, set: function (v) {
              DefaultResolved = v;
            }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
          Self.ComputeElement(PropType,{get: function () {
              return PropTypeResolved;
            }, set: function (v) {
              PropTypeResolved = v;
            }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
          PropTypeResolved.IdentEl = PropEl;
          PropTypeResolved.Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable);
          Self.CheckEqualResCompatibility(PropTypeResolved,DefaultResolved,PropEl.DefaultExpr,true,null);
        };
        if (PropEl.IsDefault) {
          if ((ClassScope.DefaultProperty !== null) && (ClassScope.DefaultProperty.FParent === PropEl.FParent)) Self.RaiseMsg(20170216151938,3041,rtl.getResStr(pas.PasResolveEval,"sOnlyOneDefaultPropertyIsAllowed"),[],PropEl);
          ClassScope.DefaultProperty = PropEl;
        };
        Self.EmitTypeHints(PropEl,PropEl.VarType);
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return IndexVal;
          }, set: function (v) {
            IndexVal = v;
          }});
      };
    };
    this.FinishArgument = function (El) {
      if (El.ValueExpr !== null) {
        this.ResolveExpr(El.ValueExpr,$mod.TResolvedRefAccess.rraRead);
        if (El.ArgType !== null) this.CheckAssignCompatibility(El,El.ValueExpr,true,null);
      };
      this.EmitTypeHints(El,El.ArgType);
    };
    this.FinishAncestors = function (aClass) {
      var Self = this;
      var DirectAncestor = null;
      var AncestorClassEl = null;
      function FindDefaultAncestor(DefAncestorName, Expected) {
        var CurEl = null;
        AncestorClassEl = null;
        if (pas.SysUtils.CompareText(aClass.FName,DefAncestorName) === 0) return;
        CurEl = Self.FindElementWithoutParams(DefAncestorName,aClass,false);
        if (!pas.PasTree.TPasType.isPrototypeOf(CurEl)) Self.RaiseXExpectedButYFound(20180321150128,Expected,$mod.GetElementTypeName(CurEl),aClass);
        DirectAncestor = CurEl;
        CurEl = Self.ResolveAliasType(DirectAncestor);
        if (!pas.PasTree.TPasClassType.isPrototypeOf(CurEl)) Self.RaiseXExpectedButYFound(20170216151941,Expected,$mod.GetElementTypeName(DirectAncestor),aClass);
        AncestorClassEl = CurEl;
      };
      var ClassScope = null;
      var AncestorClassScope = null;
      var AncestorType = null;
      var El = null;
      var i = 0;
      var aModifier = "";
      var DefAncestorName = "";
      var IsSealed = false;
      var CanonicalSelf = null;
      var Decl = null;
      var j = 0;
      var IntfType = null;
      var IntfTypeRes = null;
      var ResIntfList = null;
      var Members = null;
      if (aClass.IsForward) {
        if (pas.PasTree.TPasDeclarations.isPrototypeOf(aClass.FParent)) {
          Members = aClass.FParent.Declarations}
         else if (aClass.FParent.$class.ClassType() === pas.PasTree.TPasClassType) {
          Members = aClass.FParent.Members}
         else Self.RaiseNotYetImplemented(20180430141934,aClass,pas.PasResolveEval.GetObjName(aClass.FParent));
        for (var $l1 = 0, $end2 = Members.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Decl = rtl.getObject(Members.Get(i));
          if ((pas.SysUtils.CompareText(Decl.FName,aClass.FName) === 0) && (Decl !== aClass)) Self.RaiseMsg(20180212144132,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[Decl.FName,Self.GetElementSourcePosStr(Decl)],aClass);
        };
        return;
      };
      var $tmp3 = aClass.ObjKind;
      if ($tmp3 === pas.PasTree.TPasObjKind.okClass) {
        AncestorType = Self.ResolveAliasType(aClass.AncestorType);
        if ((pas.PasTree.TPasClassType.isPrototypeOf(AncestorType) && (AncestorType.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && !(pas.PScanner.TModeSwitch.msDelphi in Self.FCurrentParser.GetCurrentModeSwitches())) {
          aClass.Interfaces.Insert(0,aClass.AncestorType);
          aClass.AncestorType = null;
        };
      } else if ($tmp3 === pas.PasTree.TPasObjKind.okInterface) {
        if (aClass.IsExternal) Self.RaiseMsg(20180321115831,3003,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifier"),["external"],aClass);
        if (!(aClass.InterfaceType in rtl.createSet(pas.PasTree.TPasClassInterfaceType.citCom,pas.PasTree.TPasClassInterfaceType.citCorba))) Self.RaiseMsg(20180321143613,3003,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifier"),[Self.FCurrentParser.FScanner.GetCurrentValueSwitch(pas.PScanner.TValueSwitch.vsInterfaces)],aClass);
      } else {
        Self.RaiseNotYetImplemented(20161010174638,aClass,"Kind=" + pas.PasTree.ObjKindNames[aClass.ObjKind]);
      };
      IsSealed = false;
      for (var $l4 = 0, $end5 = aClass.Modifiers.GetCount() - 1; $l4 <= $end5; $l4++) {
        i = $l4;
        aModifier = pas.SysUtils.LowerCase(aClass.Modifiers.Get(i));
        var $tmp6 = aModifier;
        if ($tmp6 === "sealed") {
          IsSealed = true}
         else {
          Self.RaiseMsg(20170320190619,3003,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifier"),[aClass.Modifiers.Get(i)],aClass);
        };
      };
      AncestorClassEl = null;
      DirectAncestor = aClass.AncestorType;
      AncestorType = Self.ResolveAliasType(DirectAncestor);
      if (AncestorType === null) {
        if (DirectAncestor !== null) Self.RaiseInternalError(20180321151851,pas.PasResolveEval.GetObjName(DirectAncestor));
        DefAncestorName = "";
        var $tmp7 = aClass.ObjKind;
        if ($tmp7 === pas.PasTree.TPasObjKind.okClass) {
          DefAncestorName = "TObject";
          if ((pas.SysUtils.CompareText(aClass.FName,DefAncestorName) === 0) || aClass.IsExternal) {
            AncestorClassEl = null;
          } else {
            FindDefaultAncestor(DefAncestorName,"class type");
            if (AncestorClassEl.ObjKind !== pas.PasTree.TPasObjKind.okClass) Self.RaiseXExpectedButYFound(20180321145626,"class type",$mod.GetElementTypeName(AncestorClassEl),aClass);
          };
        } else if ($tmp7 === pas.PasTree.TPasObjKind.okInterface) {
          if (aClass.InterfaceType === pas.PasTree.TPasClassInterfaceType.citCom) {
            if (pas.PScanner.TModeSwitch.msDelphi in Self.FCurrentParser.GetCurrentModeSwitches()) {
              DefAncestorName = "IInterface"}
             else DefAncestorName = "IUnknown";
            if (pas.SysUtils.SameText(DefAncestorName,aClass.FName)) {
              AncestorClassEl = null}
             else {
              FindDefaultAncestor(DefAncestorName,"interface type");
              if (AncestorClassEl.ObjKind !== pas.PasTree.TPasObjKind.okInterface) Self.RaiseXExpectedButYFound(20180321145725,"interface type",$mod.GetElementTypeName(AncestorClassEl),aClass);
            };
          };
        };
      } else if (AncestorType.$class.ClassType() !== pas.PasTree.TPasClassType) {
        Self.RaiseXExpectedButYFound(20170216151944,"class type",Self.GetTypeDescription(AncestorType,false),aClass)}
       else if (aClass === AncestorType) {
        Self.RaiseMsg(20170525125854,3011,rtl.getResStr(pas.PasResolveEval,"sAncestorCycleDetected"),[],aClass)}
       else {
        AncestorClassEl = AncestorType;
        if (AncestorClassEl.ObjKind !== aClass.ObjKind) {
          Self.RaiseXExpectedButYFound(20180321152107,$mod.GetElementTypeName(aClass) + " type",$mod.GetElementTypeName(AncestorClassEl) + " type",aClass);
        } else Self.EmitTypeHints(aClass,AncestorClassEl);
      };
      AncestorClassScope = null;
      if (AncestorClassEl === null) {}
      else {
        if (AncestorClassEl.IsForward) Self.RaiseMsg(20170216151947,3012,rtl.getResStr(pas.PasResolveEval,"sCantUseForwardDeclarationAsAncestor"),[AncestorClassEl.FName],aClass);
        if (aClass.IsExternal && !AncestorClassEl.IsExternal) Self.RaiseMsg(20170321144035,3049,rtl.getResStr(pas.PasResolveEval,"sAncestorIsNotExternal"),[AncestorClassEl.FName],aClass);
        AncestorClassScope = rtl.as(AncestorClassEl.FData,$mod.TPasClassScope);
        if ($mod.TPasClassScopeFlag.pcsfSealed in AncestorClassScope.Flags) Self.RaiseMsg(20170320191735,3048,rtl.getResStr(pas.PasResolveEval,"sCannotCreateADescendantOfTheSealedXY"),[$mod.GetElementTypeName(AncestorClassEl),AncestorClassEl.FName],aClass);
        El = AncestorClassEl;
        do {
          if (El === aClass) Self.RaiseMsg(20170216151949,3011,rtl.getResStr(pas.PasResolveEval,"sAncestorCycleDetected"),[],aClass);
          if ((El.$class.ClassType() === pas.PasTree.TPasAliasType) || (El.$class.ClassType() === pas.PasTree.TPasTypeAliasType)) {
            El = El.DestType}
           else if (El.$class.ClassType() === pas.PasTree.TPasClassType) El = El.AncestorType;
        } while (!(El === null));
      };
      Self.PushScope$1(aClass,Self.FScopeClass_Class);
      ClassScope = Self.FTopScope;
      ClassScope.VisibilityContext = aClass;
      ClassScope.Flags = rtl.includeSet(ClassScope.Flags,$mod.TPasClassScopeFlag.pcsfAncestorResolved);
      if (IsSealed) ClassScope.Flags = rtl.includeSet(ClassScope.Flags,$mod.TPasClassScopeFlag.pcsfSealed);
      ClassScope.DirectAncestor = DirectAncestor;
      if (AncestorClassEl !== null) {
        ClassScope.AncestorScope = AncestorClassScope;
        ClassScope.DefaultProperty = AncestorClassScope.DefaultProperty;
        if ($mod.TPasClassScopeFlag.pcsfPublished in AncestorClassScope.Flags) ClassScope.Flags = rtl.includeSet(ClassScope.Flags,$mod.TPasClassScopeFlag.pcsfPublished);
        ClassScope.AbstractProcs = rtl.arrayCopy(0,AncestorClassScope.AbstractProcs,0);
      };
      if (pas.PScanner.TBoolSwitch.bsTypeInfo in Self.FCurrentParser.FScanner.FCurrentBoolSwitches) ClassScope.Flags = rtl.includeSet(ClassScope.Flags,$mod.TPasClassScopeFlag.pcsfPublished);
      if (aClass.ObjKind === pas.PasTree.TPasObjKind.okClass) {
        CanonicalSelf = pas.PasTree.TPasClassOfType.$create("Create$1",["Self",aClass]);
        ClassScope.CanonicalClassOf = CanonicalSelf;
        CanonicalSelf.DestType = aClass;
        aClass.AddRef();
        CanonicalSelf.Visibility = pas.PasTree.TPasMemberVisibility.visStrictPrivate;
        CanonicalSelf.SourceFilename = aClass.SourceFilename;
        CanonicalSelf.SourceLinenumber = aClass.SourceLinenumber;
      };
      if (aClass.Interfaces.FCount > 0) {
        if (!(aClass.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass))) Self.RaiseXExpectedButYFound(20180322001341,"one ancestor",pas.SysUtils.IntToStr(1 + aClass.Interfaces.FCount),aClass);
        if (aClass.IsExternal) Self.RaiseMsg(20180324183641,3003,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifier"),["external"],aClass);
        ResIntfList = pas.Classes.TFPList.$create("Create");
        try {
          for (var $l8 = 0, $end9 = aClass.Interfaces.FCount - 1; $l8 <= $end9; $l8++) {
            i = $l8;
            IntfType = rtl.getObject(aClass.Interfaces.Get(i));
            IntfTypeRes = Self.ResolveAliasType(IntfType);
            if (IntfTypeRes === null) Self.RaiseMsg(20180322140044,3012,rtl.getResStr(pas.PasResolveEval,"sCantUseForwardDeclarationAsAncestor"),[IntfType.FName],aClass);
            if (!pas.PasTree.TPasClassType.isPrototypeOf(IntfTypeRes)) Self.RaiseXExpectedButYFound(20180322001051,"interface type",$mod.GetElementTypeName(IntfTypeRes) + " type",aClass);
            if (IntfTypeRes.ObjKind !== pas.PasTree.TPasObjKind.okInterface) Self.RaiseXExpectedButYFound(20180322001143,"interface type",$mod.GetElementTypeName(IntfTypeRes) + " type",aClass);
            j = ResIntfList.IndexOf(IntfTypeRes);
            if (j >= 0) Self.RaiseMsg(20180322001505,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[IntfType.FName,pas.SysUtils.IntToStr(j + 1)],aClass);
            ResIntfList.Add(IntfTypeRes);
          };
        } finally {
          ResIntfList = rtl.freeLoc(ResIntfList);
        };
        ClassScope.Interfaces = pas.Classes.TFPList.$create("Create");
        ClassScope.Interfaces.SetCount(aClass.Interfaces.FCount);
      };
    };
    this.FinishMethodResolution = function (El) {
      var ResolvedEl = new $mod.TPasResolverResult();
      var aClass = null;
      var IntfType = null;
      var i = 0;
      var IntfProc = null;
      var Expr = null;
      var ProcName = "";
      var IntfScope = null;
      var Identifier = null;
      this.ResolveExpr(El.InterfaceName,$mod.TResolvedRefAccess.rraRead);
      this.ComputeElement(El.InterfaceName,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcType,$mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      if (!pas.PasTree.TPasType.isPrototypeOf(ResolvedEl.IdentEl)) this.RaiseXExpectedButYFound(20180323132601,"interface type",this.GetResolverResultDescription(ResolvedEl,false),El.InterfaceName);
      aClass = rtl.as(El.FParent,pas.PasTree.TPasClassType);
      i = this.IndexOfImplementedInterface(aClass,ResolvedEl.IdentEl);
      if (i < 0) this.RaiseXExpectedButYFound(20180323133055,"interface type",this.GetResolverResultDescription(ResolvedEl,false),El.InterfaceName);
      IntfType = this.ResolveAliasType(rtl.getObject(aClass.Interfaces.Get(i)));
      Expr = El.InterfaceProc;
      if (!pas.PasTree.TPrimitiveExpr.isPrototypeOf(Expr)) this.RaiseXExpectedButYFound(20180327152808,"method name",$mod.GetElementTypeName(Expr),Expr);
      if (Expr.Kind !== pas.PasTree.TPasExprKind.pekIdent) this.RaiseXExpectedButYFound(20180327152841,"method name",$mod.GetElementTypeName(Expr),Expr);
      ProcName = Expr.Value;
      IntfScope = rtl.as(IntfType.FData,$mod.TPasClassScope);
      IntfProc = null;
      while (IntfScope !== null) {
        Identifier = IntfScope.FindLocalIdentifier(ProcName);
        while (Identifier !== null) {
          if (!pas.PasTree.TPasProcedure.isPrototypeOf(Identifier.FElement)) this.RaiseXExpectedButYFound(20180327153110,"interface method",$mod.GetElementTypeName(Identifier.FElement),Expr);
          IntfProc = Identifier.FElement;
          if (IntfProc.$class.ClassType() === El.ProcClass) break;
          Identifier = Identifier.NextSameIdentifier;
        };
        IntfScope = IntfScope.AncestorScope;
      };
      if (IntfProc === null) this.RaiseIdentifierNotFound(20180327153044,ProcName,Expr);
      this.CreateReference(IntfProc,Expr,$mod.TResolvedRefAccess.rraRead,null);
      if (IntfProc.$class.ClassType() !== El.ProcClass) this.RaiseXExpectedButYFound(20180323144107,$mod.GetElementTypeName$1(El.ProcClass),$mod.GetElementTypeName(IntfProc),El.InterfaceProc);
    };
    this.FinishPropertyParamAccess = function (Params, Prop) {
      var i = 0;
      var ParamAccess = 0;
      for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        ParamAccess = $mod.TResolvedRefAccess.rraRead;
        if (i < Prop.FArgs.FCount) {
          var $tmp3 = rtl.getObject(Prop.FArgs.Get(i)).Access;
          if ($tmp3 === pas.PasTree.TArgumentAccess.argVar) {
            ParamAccess = $mod.TResolvedRefAccess.rraVarParam}
           else if ($tmp3 === pas.PasTree.TArgumentAccess.argOut) ParamAccess = $mod.TResolvedRefAccess.rraOutParam;
        };
        this.AccessExpr(Params.Params[i],ParamAccess);
      };
    };
    this.FinishCallArgAccess = function (Expr, Access) {
      var ResolvedEl = new $mod.TPasResolverResult();
      var Flags = {};
      this.AccessExpr(Expr,Access);
      Flags = rtl.createSet($mod.TPasResolverComputeFlag.rcSetReferenceFlags);
      if (Access !== $mod.TResolvedRefAccess.rraRead) Flags = rtl.includeSet(Flags,$mod.TPasResolverComputeFlag.rcNoImplicitProc);
      this.ComputeElement(Expr,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},rtl.refSet(Flags),null);
    };
    this.FinishInitialFinalization = function (El) {
      if (El === null) ;
      this.CheckTopScope(this.FScopeClass_InitialFinalization,false);
      this.PopScope();
    };
    this.EmitTypeHints = function (PosEl, aType) {
      while (aType !== null) {
        if (this.EmitElementHints(PosEl,aType)) return;
        if (aType.$class.InheritsFrom(pas.PasTree.TPasAliasType)) {
          aType = aType.DestType}
         else if (aType.$class.ClassType() === pas.PasTree.TPasPointerType) {
          aType = aType.DestType}
         else if (((aType.$class.ClassType() === pas.PasTree.TPasClassType) && aType.IsForward) && (aType.FData !== null)) {
          aType = rtl.as(aType.FData,$mod.TResolvedReference).FDeclaration}
         else return;
      };
    };
    this.EmitElementHints = function (PosEl, El) {
      var Result = false;
      if (this.IsElementSkipped(El)) this.RaiseMsg(20170927160030,3002,rtl.getResStr(pas.PasResolveEval,"sNotYetImplemented"),[pas.PasResolveEval.GetObjName(El)],PosEl);
      if (rtl.eqSet(El.FHints,{})) return false;
      Result = true;
      if (pas.PasTree.TPasMemberHint.hDeprecated in El.FHints) {
        if (El.FHintMessage !== "") {
          this.LogMsg(20170422160807,pas.PScanner.TMessageType.mtWarning,5066,rtl.getResStr(pas.PasResolveEval,"sSymbolXIsDeprecatedY"),[El.FName,El.FHintMessage],PosEl)}
         else this.LogMsg(20170419190434,pas.PScanner.TMessageType.mtWarning,5043,rtl.getResStr(pas.PasResolveEval,"sSymbolXIsDeprecated"),[El.FName],PosEl);
      };
      if (pas.PasTree.TPasMemberHint.hLibrary in El.FHints) this.LogMsg(20170419190426,pas.PScanner.TMessageType.mtWarning,5065,rtl.getResStr(pas.PasResolveEval,"sSymbolXBelongsToALibrary"),[El.FName],PosEl);
      if (pas.PasTree.TPasMemberHint.hPlatform in El.FHints) this.LogMsg(20170419185916,pas.PScanner.TMessageType.mtWarning,5076,rtl.getResStr(pas.PasResolveEval,"sSymbolXIsNotPortable"),[El.FName],PosEl);
      if (pas.PasTree.TPasMemberHint.hExperimental in El.FHints) this.LogMsg(20170419190111,pas.PScanner.TMessageType.mtWarning,5079,rtl.getResStr(pas.PasResolveEval,"sSymbolXIsExperimental"),[El.FName],PosEl);
      if (pas.PasTree.TPasMemberHint.hUnimplemented in El.FHints) this.LogMsg(20170419190317,pas.PScanner.TMessageType.mtWarning,5078,rtl.getResStr(pas.PasResolveEval,"sSymbolXIsNotImplemented"),[El.FName],PosEl);
      return Result;
    };
    this.StoreScannerFlagsInProc = function (ProcScope) {
      var ModScope = null;
      ProcScope.BoolSwitches = rtl.refSet(this.FCurrentParser.FScanner.FCurrentBoolSwitches);
      if (pas.PScanner.TBoolSwitch.bsRangeChecks in ProcScope.BoolSwitches) {
        ModScope = rtl.as(this.FRootElement.FData,$mod.TPasModuleScope);
        ModScope.Flags = rtl.includeSet(ModScope.Flags,$mod.TPasModuleScopeFlag.pmsfRangeErrorNeeded);
      };
    };
    this.ReplaceProcScopeImplArgsWithDeclArgs = function (ImplProcScope) {
      var DeclProc = null;
      var ImplProc = null;
      var DeclArgs = null;
      var ImplArgs = null;
      var i = 0;
      var DeclArg = null;
      var ImplArg = null;
      var Identifier = null;
      ImplProc = rtl.as(ImplProcScope.FElement,pas.PasTree.TPasProcedure);
      ImplArgs = ImplProc.ProcType.Args;
      DeclProc = ImplProcScope.DeclarationProc;
      DeclArgs = DeclProc.ProcType.Args;
      for (var $l1 = 0, $end2 = DeclArgs.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        DeclArg = rtl.getObject(DeclArgs.Get(i));
        if (i < ImplArgs.FCount) {
          ImplArg = rtl.getObject(ImplArgs.Get(i));
          Identifier = ImplProcScope.FindLocalIdentifier(DeclArg.FName);
          if (Identifier.FElement !== ImplArg) this.RaiseInternalError(20170203161659,(pas.PasResolveEval.GetObjName(DeclArg) + " ") + pas.PasResolveEval.GetObjName(ImplArg));
          Identifier.SetElement(DeclArg);
          Identifier.Identifier = DeclArg.FName;
        } else this.RaiseNotYetImplemented(20170203161826,ImplProc,"");
      };
      if (pas.PasTree.TPasFunction.isPrototypeOf(DeclProc)) {
        Identifier = ImplProcScope.FindLocalIdentifier($mod.ResolverResultVar);
        if (pas.PasTree.TPasResultElement.isPrototypeOf(Identifier.FElement)) Identifier.SetElement(DeclProc.GetFT().ResultEl);
      };
    };
    this.CreateClassIntfMap = function (El, Index) {
      var Result = null;
      var IntfType = null;
      var map = null;
      var ClassScope = null;
      ClassScope = rtl.as(El.FData,$mod.TPasClassScope);
      if (ClassScope.Interfaces.Get(Index) != null) this.RaiseInternalError(20180322141916,((($mod.GetElementDbgPath(El) + " ") + pas.SysUtils.IntToStr(Index)) + " ") + pas.PasResolveEval.GetObjName(rtl.getObject(ClassScope.Interfaces.Get(Index))));
      IntfType = this.ResolveAliasType(rtl.getObject(El.Interfaces.Get(Index)));
      map = null;
      while (IntfType !== null) {
        if (map === null) {
          map = $mod.TPasClassIntfMap.$create("Create");
          map.Element = El;
          Result = map;
          ClassScope.Interfaces.Put(Index,map);
        } else {
          map.AncestorMap = $mod.TPasClassIntfMap.$create("Create");
          map = map.AncestorMap;
          map.Element = El;
        };
        map.Intf = IntfType;
        map.Procs = pas.Classes.TFPList.$create("Create");
        map.Procs.SetCount(IntfType.Members.FCount);
        IntfType = rtl.as(this.GetPasClassAncestor(IntfType,true),pas.PasTree.TPasClassType);
      };
      return Result;
    };
    this.CheckConditionExpr = function (El, ResolvedEl) {
      if (ResolvedEl.BaseType !== $mod.TResolverBaseType.btBoolean) this.RaiseXExpectedButYFound(20170216152135,this.GetBaseTypeNames($mod.TResolverBaseType.btBoolean),this.GetBaseTypeNames(ResolvedEl.BaseType),El);
    };
    this.CheckProcSignatureMatch = function (DeclProc, ImplProc, CheckNames) {
      var i = 0;
      var DeclArgs = null;
      var ImplArgs = null;
      var DeclName = "";
      var ImplName = "";
      var ImplResult = null;
      var DeclResult = null;
      if (ImplProc.$class.ClassType() !== DeclProc.$class.ClassType()) this.RaiseXExpectedButYFound(20170216151729,DeclProc.TypeName(),ImplProc.TypeName(),ImplProc);
      if (ImplProc.GetCallingConvention() !== DeclProc.GetCallingConvention()) this.RaiseMsg(20170216151731,3018,rtl.getResStr(pas.PasResolveEval,"sCallingConventionMismatch"),[],ImplProc);
      if (pas.PasTree.TPasFunction.isPrototypeOf(ImplProc)) {
        ImplResult = ImplProc.GetFT().ResultEl.ResultType;
        DeclResult = DeclProc.GetFT().ResultEl.ResultType;
        if (!this.CheckElTypeCompatibility(ImplResult,DeclResult,$mod.TPRResolveAlias.prraSimple)) this.RaiseIncompatibleType(20170216151734,3019,[],DeclResult,ImplResult,ImplProc);
      };
      if (CheckNames) {
        DeclArgs = DeclProc.ProcType.Args;
        ImplArgs = ImplProc.ProcType.Args;
        for (var $l1 = 0, $end2 = DeclArgs.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          DeclName = rtl.getObject(DeclArgs.Get(i)).FName;
          ImplName = rtl.getObject(ImplArgs.Get(i)).FName;
          if (pas.SysUtils.CompareText(DeclName,ImplName) !== 0) this.RaiseMsg(20170216151738,3020,rtl.getResStr(pas.PasResolveEval,"sFunctionHeaderMismatchForwardVarName"),[DeclProc.FName,DeclName,ImplName],ImplProc);
        };
      };
    };
    this.CheckPendingForwardProcs = function (El) {
      var i = 0;
      var DeclEl = null;
      var Proc = null;
      var aClassType = null;
      if (this.IsElementSkipped(El)) return;
      if (pas.PasTree.TPasDeclarations.isPrototypeOf(El)) {
        for (var $l1 = 0, $end2 = El.Declarations.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          DeclEl = rtl.getObject(El.Declarations.Get(i));
          if (pas.PasTree.TPasProcedure.isPrototypeOf(DeclEl)) {
            Proc = DeclEl;
            if ($mod.ProcNeedsImplProc(Proc) && (Proc.FData.ImplProc === null)) this.RaiseMsg(20170216152219,3015,rtl.getResStr(pas.PasResolveEval,"sForwardProcNotResolved"),[$mod.GetElementTypeName(Proc),Proc.FName],Proc);
          };
        };
      } else if (El.$class.ClassType() === pas.PasTree.TPasClassType) {
        aClassType = El;
        if (aClassType.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okInterface,pas.PasTree.TPasObjKind.okDispInterface)) return;
        for (var $l3 = 0, $end4 = aClassType.Members.FCount - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          DeclEl = rtl.getObject(aClassType.Members.Get(i));
          if (pas.PasTree.TPasProcedure.isPrototypeOf(DeclEl)) {
            Proc = DeclEl;
            if (Proc.IsAbstract() || Proc.IsExternal()) continue;
            if (Proc.FData.ImplProc === null) this.RaiseMsg(20170216152221,3015,rtl.getResStr(pas.PasResolveEval,"sForwardProcNotResolved"),[$mod.GetElementTypeName(Proc),Proc.FName],Proc);
          };
        };
      };
    };
    this.CheckPointerCycle = function (El) {
      var C = null;
      var CurEl = null;
      var Dest = null;
      CurEl = El;
      while (CurEl !== null) {
        C = CurEl.$class.ClassType();
        if (C === pas.PasTree.TPasPointerType) {
          Dest = CurEl.DestType}
         else if (C.InheritsFrom(pas.PasTree.TPasAliasType)) {
          Dest = CurEl.DestType}
         else return;
        if (Dest === El) this.RaiseMsg(20180422165758,3106,rtl.getResStr(pas.PasResolveEval,"sTypeCycleFound"),[],El);
        CurEl = Dest;
      };
    };
    this.ComputeUnaryNot = function (El, ResolvedEl, Flags) {
      this.RaiseMsg(20180208121532,3085,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierInFrontOf"),[pas.PasTree.OpcodeStrings[El.OpCode],this.GetResolverResultDescription(ResolvedEl.get(),false)],El);
      if (rtl.eqSet(Flags,{})) ;
    };
    this.ComputeBinaryExpr = function (Bin, ResolvedEl, Flags, StartEl) {
      var LeftResolved = new $mod.TPasResolverResult();
      var RightResolved = new $mod.TPasResolverResult();
      if ((Bin.OpCode === pas.PasTree.TExprOpCode.eopSubIdent) || ((Bin.OpCode === pas.PasTree.TExprOpCode.eopNone) && pas.PasTree.TInheritedExpr.isPrototypeOf(Bin.left))) {
        this.ComputeElement(Bin.right,ResolvedEl,rtl.refSet(Flags),StartEl);
        return;
      };
      if (Bin.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopEqual,pas.PasTree.TExprOpCode.eopNotEqual)) {
        if (this.CheckEqualElCompatibility(Bin.left,Bin.right,null,true,$mod.TPasResolverComputeFlag.rcSetReferenceFlags in Flags) === 2147483647) this.RaiseInternalError(20161007215912,"");
        $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btBoolean,this.FBaseTypes[$mod.TResolverBaseType.btBoolean],this.FBaseTypes[$mod.TResolverBaseType.btBoolean],Bin,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
        return;
      };
      this.ComputeElement(Bin.left,{get: function () {
          return LeftResolved;
        }, set: function (v) {
          LeftResolved = v;
        }},rtl.diffSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc)),StartEl);
      this.ComputeElement(Bin.right,{get: function () {
          return RightResolved;
        }, set: function (v) {
          RightResolved = v;
        }},rtl.diffSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc)),StartEl);
      this.ComputeBinaryExprRes(Bin,ResolvedEl,rtl.refSet(Flags),{get: function () {
          return LeftResolved;
        }, set: function (v) {
          LeftResolved = v;
        }},{get: function () {
          return RightResolved;
        }, set: function (v) {
          RightResolved = v;
        }});
    };
    this.ComputeBinaryExprRes = function (Bin, ResolvedEl, Flags, LeftResolved, RightResolved) {
      var Self = this;
      function SetBaseType(BaseType) {
        $mod.SetResolverValueExpr(ResolvedEl,BaseType,Self.FBaseTypes[BaseType],Self.FBaseTypes[BaseType],Bin,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
      };
      function SetLeftValueExpr(Flags) {
        $mod.SetResolverValueExpr(ResolvedEl,LeftResolved.get().BaseType,LeftResolved.get().LoTypeEl,LeftResolved.get().HiTypeEl,Bin,rtl.refSet(Flags));
      };
      function SetRightValueExpr(Flags) {
        $mod.SetResolverValueExpr(ResolvedEl,RightResolved.get().BaseType,RightResolved.get().LoTypeEl,RightResolved.get().HiTypeEl,Bin,rtl.refSet(Flags));
      };
      var ElTypeResolved = new $mod.TPasResolverResult();
      var LeftTypeEl = null;
      var RightTypeEl = null;
      if (LeftResolved.get().BaseType === $mod.TResolverBaseType.btRange) Self.ConvertRangeToElement(LeftResolved);
      if (RightResolved.get().BaseType === $mod.TResolverBaseType.btRange) Self.ConvertRangeToElement(RightResolved);
      if (LeftResolved.get().BaseType in $mod.btAllInteger) {
        if (($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
          if (RightResolved.get().BaseType in rtl.unionSet($mod.btAllInteger,$mod.btAllFloats)) {
            var $tmp1 = Bin.OpCode;
            if ($tmp1 === pas.PasTree.TExprOpCode.eopNone) {
              if (Bin.Kind === pas.PasTree.TPasExprKind.pekRange) {
                if (!(RightResolved.get().BaseType in $mod.btAllInteger)) Self.RaiseXExpectedButYFound(20170216152600,"integer",Self.GetBaseTypeNames(RightResolved.get().BaseType),Bin.right);
                SetLeftValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
                if (pas.PasTree.TPasRangeType.isPrototypeOf(Bin.FParent)) {
                  ResolvedEl.get().LoTypeEl = Bin.FParent;
                  ResolvedEl.get().HiTypeEl = ResolvedEl.get().LoTypeEl;
                };
                return;
              }}
             else if ((((((((((($tmp1 === pas.PasTree.TExprOpCode.eopAdd) || ($tmp1 === pas.PasTree.TExprOpCode.eopSubtract)) || ($tmp1 === pas.PasTree.TExprOpCode.eopMultiply)) || ($tmp1 === pas.PasTree.TExprOpCode.eopDiv)) || ($tmp1 === pas.PasTree.TExprOpCode.eopMod)) || ($tmp1 === pas.PasTree.TExprOpCode.eopPower)) || ($tmp1 === pas.PasTree.TExprOpCode.eopShl)) || ($tmp1 === pas.PasTree.TExprOpCode.eopShr)) || ($tmp1 === pas.PasTree.TExprOpCode.eopAnd)) || ($tmp1 === pas.PasTree.TExprOpCode.eopOr)) || ($tmp1 === pas.PasTree.TExprOpCode.eopXor)) {
              if (RightResolved.get().BaseType in $mod.btAllFloats) {
                SetRightValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
               else SetLeftValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
              return;
            } else if (((($tmp1 === pas.PasTree.TExprOpCode.eopLessThan) || ($tmp1 === pas.PasTree.TExprOpCode.eopGreaterThan)) || ($tmp1 === pas.PasTree.TExprOpCode.eopLessthanEqual)) || ($tmp1 === pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
              SetBaseType($mod.TResolverBaseType.btBoolean);
              return;
            } else if ($tmp1 === pas.PasTree.TExprOpCode.eopDivide) {
              SetBaseType(Self.FBaseTypeExtended);
              return;
            };
          } else if (RightResolved.get().BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet)) {
            if ((Bin.OpCode === pas.PasTree.TExprOpCode.eopIn) && (RightResolved.get().SubType in $mod.btAllInteger)) {
              SetBaseType($mod.TResolverBaseType.btBoolean);
              return;
            };
          } else if (RightResolved.get().BaseType === $mod.TResolverBaseType.btPointer) {
            if ((Bin.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopAdd,pas.PasTree.TExprOpCode.eopSubtract)) && Self.ElHasBoolSwitch(Bin,pas.PScanner.TBoolSwitch.bsPointerMath)) {
              $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btPointer,RightResolved.get().LoTypeEl,RightResolved.get().HiTypeEl,Bin,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
              return;
            };
          } else if (RightResolved.get().BaseType === $mod.TResolverBaseType.btContext) {
            RightTypeEl = RightResolved.get().LoTypeEl;
            if (RightTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
              if ((Bin.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopAdd,pas.PasTree.TExprOpCode.eopSubtract)) && Self.ElHasBoolSwitch(Bin,pas.PScanner.TBoolSwitch.bsPointerMath)) {
                RightTypeEl = RightTypeEl.DestType;
                $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btPointer,Self.ResolveAliasType(RightTypeEl),RightTypeEl,Bin,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
                return;
              };
            };
          };
        };
      } else if (LeftResolved.get().BaseType in $mod.btAllBooleans) {
        if ((($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && (RightResolved.get().BaseType in $mod.btAllBooleans)) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
          var $tmp2 = Bin.OpCode;
          if ($tmp2 === pas.PasTree.TExprOpCode.eopNone) {
            if (Bin.Kind === pas.PasTree.TPasExprKind.pekRange) {
              $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btRange,Self.FBaseTypes[LeftResolved.get().BaseType],Self.FBaseTypes[LeftResolved.get().BaseType],Bin,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
              ResolvedEl.get().SubType = LeftResolved.get().BaseType;
              return;
            }}
           else if ((($tmp2 === pas.PasTree.TExprOpCode.eopAnd) || ($tmp2 === pas.PasTree.TExprOpCode.eopOr)) || ($tmp2 === pas.PasTree.TExprOpCode.eopXor)) {
            SetLeftValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
            return;
          };
        };
      } else if (LeftResolved.get().BaseType in $mod.btAllStringAndChars) {
        if (($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
          if (RightResolved.get().BaseType in $mod.btAllStringAndChars) {
            var $tmp3 = Bin.OpCode;
            if ($tmp3 === pas.PasTree.TExprOpCode.eopNone) {
              if ((Bin.Kind === pas.PasTree.TPasExprKind.pekRange) && (LeftResolved.get().BaseType in $mod.btAllChars)) {
                if (!(RightResolved.get().BaseType in $mod.btAllChars)) Self.RaiseXExpectedButYFound(20170216152603,"char",Self.GetBaseTypeNames(RightResolved.get().BaseType),Bin.right);
                $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btRange,Self.FBaseTypes[LeftResolved.get().BaseType],Self.FBaseTypes[LeftResolved.get().BaseType],Bin,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
                ResolvedEl.get().SubType = LeftResolved.get().BaseType;
                return;
              }}
             else if ($tmp3 === pas.PasTree.TExprOpCode.eopAdd) {
              var $tmp4 = LeftResolved.get().BaseType;
              if ($tmp4 === $mod.TResolverBaseType.btChar) {
                var $tmp5 = RightResolved.get().BaseType;
                if ($tmp5 === $mod.TResolverBaseType.btChar) {
                  SetBaseType($mod.TResolverBaseType.btString)}
                 else if ($tmp5 === $mod.TResolverBaseType.btWideChar) {
                  if (Self.FBaseTypeChar === $mod.TResolverBaseType.btWideChar) {
                    SetBaseType($mod.TResolverBaseType.btString)}
                   else SetBaseType($mod.TResolverBaseType.btUnicodeString)}
                 else {
                  SetRightValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
                };
                return;
              } else if ($tmp4 === $mod.TResolverBaseType.btWideChar) {
                var $tmp6 = RightResolved.get().BaseType;
                if (($tmp6 === $mod.TResolverBaseType.btChar) || ($tmp6 === $mod.TResolverBaseType.btWideChar)) {
                  if (Self.FBaseTypeChar === $mod.TResolverBaseType.btWideChar) {
                    SetBaseType($mod.TResolverBaseType.btString)}
                   else SetBaseType($mod.TResolverBaseType.btUnicodeString)}
                 else {
                  SetRightValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
                };
                return;
              } else if (($tmp4 === $mod.TResolverBaseType.btString) || ($tmp4 === $mod.TResolverBaseType.btUnicodeString)) {
                SetLeftValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
                return;
              };
            } else if (((($tmp3 === pas.PasTree.TExprOpCode.eopLessThan) || ($tmp3 === pas.PasTree.TExprOpCode.eopGreaterThan)) || ($tmp3 === pas.PasTree.TExprOpCode.eopLessthanEqual)) || ($tmp3 === pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
              SetBaseType($mod.TResolverBaseType.btBoolean);
              return;
            };
          } else if (((RightResolved.get().BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet)) && (RightResolved.get().SubType in $mod.btAllChars)) && (LeftResolved.get().BaseType in $mod.btAllChars)) {
            var $tmp7 = Bin.OpCode;
            if ($tmp7 === pas.PasTree.TExprOpCode.eopIn) {
              SetBaseType($mod.TResolverBaseType.btBoolean);
              return;
            };
          };
        };
      } else if (LeftResolved.get().BaseType in $mod.btAllFloats) {
        if ((($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && (RightResolved.get().BaseType in rtl.unionSet($mod.btAllInteger,$mod.btAllFloats))) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
          var $tmp8 = Bin.OpCode;
          if (((((($tmp8 === pas.PasTree.TExprOpCode.eopAdd) || ($tmp8 === pas.PasTree.TExprOpCode.eopSubtract)) || ($tmp8 === pas.PasTree.TExprOpCode.eopMultiply)) || ($tmp8 === pas.PasTree.TExprOpCode.eopDivide)) || ($tmp8 === pas.PasTree.TExprOpCode.eopMod)) || ($tmp8 === pas.PasTree.TExprOpCode.eopPower)) {
            if ((RightResolved.get().BaseType === $mod.TResolverBaseType.btCurrency) || ((RightResolved.get().BaseType in $mod.btAllFloats) && (RightResolved.get().BaseType > LeftResolved.get().BaseType))) {
              SetRightValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
             else SetLeftValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
            return;
          } else if (((($tmp8 === pas.PasTree.TExprOpCode.eopLessThan) || ($tmp8 === pas.PasTree.TExprOpCode.eopGreaterThan)) || ($tmp8 === pas.PasTree.TExprOpCode.eopLessthanEqual)) || ($tmp8 === pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
            SetBaseType($mod.TResolverBaseType.btBoolean);
            return;
          };
        };
      } else if (LeftResolved.get().BaseType === $mod.TResolverBaseType.btPointer) {
        if (($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
          if (RightResolved.get().BaseType in $mod.btAllInteger) {
            var $tmp9 = Bin.OpCode;
            if (($tmp9 === pas.PasTree.TExprOpCode.eopAdd) || ($tmp9 === pas.PasTree.TExprOpCode.eopSubtract)) if (Self.ElHasBoolSwitch(Bin,pas.PScanner.TBoolSwitch.bsPointerMath)) {
              $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btPointer,LeftResolved.get().LoTypeEl,LeftResolved.get().HiTypeEl,Bin,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
              return;
            };
          } else if (RightResolved.get().BaseType === $mod.TResolverBaseType.btPointer) {
            var $tmp10 = Bin.OpCode;
            if (((($tmp10 === pas.PasTree.TExprOpCode.eopLessThan) || ($tmp10 === pas.PasTree.TExprOpCode.eopGreaterThan)) || ($tmp10 === pas.PasTree.TExprOpCode.eopLessthanEqual)) || ($tmp10 === pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
              SetBaseType($mod.TResolverBaseType.btBoolean);
              return;
            };
          };
        };
      } else if (LeftResolved.get().BaseType === $mod.TResolverBaseType.btContext) {
        LeftTypeEl = LeftResolved.get().LoTypeEl;
        var $tmp11 = Bin.OpCode;
        if ($tmp11 === pas.PasTree.TExprOpCode.eopNone) {
          if (Bin.Kind === pas.PasTree.TPasExprKind.pekRange) {
            if (($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
              Self.CheckSetLitElCompatible(Bin.left,Bin.right,LeftResolved.get(),RightResolved.get());
              ResolvedEl.set(new $mod.TPasResolverResult(LeftResolved.get()));
              ResolvedEl.get().IdentEl = null;
              ResolvedEl.get().SubType = ResolvedEl.get().BaseType;
              ResolvedEl.get().BaseType = $mod.TResolverBaseType.btRange;
              ResolvedEl.get().ExprEl = Bin;
              return;
            };
          }}
         else if ($tmp11 === pas.PasTree.TExprOpCode.eopIn) {
          if (($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
            if (LeftResolved.get().BaseType in $mod.btArrayRangeTypes) {
              if (!(RightResolved.get().BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet))) Self.RaiseXExpectedButYFound(20170216152607,"set of " + Self.GetBaseTypeNames(LeftResolved.get().BaseType),$mod.GetElementTypeName(LeftResolved.get().LoTypeEl),Bin.right);
              if (LeftResolved.get().BaseType in $mod.btAllBooleans) {
                if (!(RightResolved.get().SubType in $mod.btAllBooleans)) Self.RaiseXExpectedButYFound(20170216152610,"set of " + Self.GetBaseTypeNames(LeftResolved.get().BaseType),"set of " + Self.GetBaseTypeNames(RightResolved.get().SubType),Bin.right);
              } else if (LeftResolved.get().BaseType in $mod.btAllChars) {
                if (!(RightResolved.get().SubType in $mod.btAllChars)) Self.RaiseXExpectedButYFound(20170216152609,"set of " + Self.GetBaseTypeNames(LeftResolved.get().BaseType),"set of " + Self.GetBaseTypeNames(RightResolved.get().SubType),Bin.right);
              } else if (!(RightResolved.get().SubType in $mod.btAllInteger)) Self.RaiseXExpectedButYFound(20170216152612,"set of " + Self.GetBaseTypeNames(LeftResolved.get().BaseType),"set of " + Self.GetBaseTypeNames(RightResolved.get().SubType),Bin.right);
              SetBaseType($mod.TResolverBaseType.btBoolean);
              return;
            } else if ((LeftResolved.get().BaseType === $mod.TResolverBaseType.btContext) && (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType)) {
              if (!(RightResolved.get().BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet))) Self.RaiseXExpectedButYFound(20170216152615,"set of " + LeftResolved.get().LoTypeEl.FName,$mod.GetElementTypeName(LeftResolved.get().LoTypeEl),Bin.right);
              RightTypeEl = RightResolved.get().LoTypeEl;
              if (LeftTypeEl === RightTypeEl) {}
              else if (RightResolved.get().LoTypeEl.$class.ClassType() === pas.PasTree.TPasRangeType) {
                Self.ComputeElement(RightTypeEl.RangeExpr.left,{get: function () {
                    return ElTypeResolved;
                  }, set: function (v) {
                    ElTypeResolved = v;
                  }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
                if (LeftTypeEl !== ElTypeResolved.LoTypeEl) Self.RaiseXExpectedButYFound(20171109215833,"set of " + LeftResolved.get().LoTypeEl.FName,"set of " + RightResolved.get().LoTypeEl.FName,Bin.right);
              } else Self.RaiseXExpectedButYFound(20170216152618,"set of " + LeftResolved.get().LoTypeEl.FName,"set of " + RightResolved.get().LoTypeEl.FName,Bin.right);
              SetBaseType($mod.TResolverBaseType.btBoolean);
              return;
            } else Self.RaiseMsg(20170216152228,3033,rtl.getResStr(pas.PasResolveEval,"sInOperatorExpectsSetElementButGot"),[$mod.GetElementTypeName(LeftResolved.get().LoTypeEl)],Bin);
          }}
         else if ($tmp11 === pas.PasTree.TExprOpCode.eopIs) {
          RightTypeEl = RightResolved.get().LoTypeEl;
          if (pas.PasTree.TPasClassType.isPrototypeOf(LeftTypeEl)) {
            if (!($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags)) Self.RaiseIncompatibleTypeRes(20180204124637,3082,[pas.PasTree.OpcodeStrings[Bin.OpCode]],LeftResolved.get(),RightResolved.get(),Bin);
            if (pas.PasTree.TPasType.isPrototypeOf(LeftResolved.get().IdentEl)) Self.RaiseIncompatibleTypeRes(20180204124638,3082,[pas.PasTree.OpcodeStrings[Bin.OpCode]],LeftResolved.get(),RightResolved.get(),Bin);
            if (pas.PasTree.TPasType.isPrototypeOf(RightResolved.get().IdentEl) && pas.PasTree.TPasClassType.isPrototypeOf(RightTypeEl)) {
              if (LeftTypeEl.ObjKind === RightTypeEl.ObjKind) {
                if (Self.CheckSrcIsADstType(RightResolved.get(),LeftResolved.get(),Bin) !== 2147483647) {
                  SetBaseType($mod.TResolverBaseType.btBoolean);
                  return;
                } else if (Self.CheckSrcIsADstType(LeftResolved.get(),RightResolved.get(),Bin) !== 2147483647) {
                  SetBaseType($mod.TResolverBaseType.btBoolean);
                  return;
                };
              } else if (RightTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
                if ((LeftTypeEl.ObjKind === pas.PasTree.TPasObjKind.okClass) && !LeftTypeEl.IsExternal) {
                  SetBaseType($mod.TResolverBaseType.btBoolean);
                  return;
                };
              } else if (LeftTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
                if ((RightTypeEl.ObjKind === pas.PasTree.TPasObjKind.okClass) && !RightTypeEl.IsExternal) {
                  SetBaseType($mod.TResolverBaseType.btBoolean);
                  return;
                };
              };
            } else if (pas.PasTree.TPasClassOfType.isPrototypeOf(RightTypeEl) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
              if (Self.CheckClassesAreRelated(LeftResolved.get().LoTypeEl,RightTypeEl.DestType,Bin) !== 2147483647) {
                SetBaseType($mod.TResolverBaseType.btBoolean);
                return;
              };
            } else Self.RaiseXExpectedButYFound(20170216152625,"class type",$mod.GetElementTypeName(RightResolved.get().LoTypeEl),Bin.right);
          } else if ((($mod.TPasResolverOption.proClassOfIs in Self.FOptions) && pas.PasTree.TPasClassOfType.isPrototypeOf(LeftTypeEl)) && ($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags)) {
            if ((LeftResolved.get().IdentEl === null) || pas.PasTree.TPasType.isPrototypeOf(LeftResolved.get().IdentEl)) Self.RaiseIncompatibleTypeRes(20180204124657,3082,[pas.PasTree.OpcodeStrings[Bin.OpCode]],LeftResolved.get(),RightResolved.get(),Bin);
            LeftTypeEl = Self.ResolveAliasType(LeftTypeEl.DestType);
            if (pas.PasTree.TPasType.isPrototypeOf(RightResolved.get().IdentEl) && pas.PasTree.TPasClassType.isPrototypeOf(Self.ResolveAliasType(RightResolved.get().IdentEl))) {
              if (Self.CheckClassIsClass(RightResolved.get().LoTypeEl,LeftTypeEl,Bin) !== 2147483647) {
                SetBaseType($mod.TResolverBaseType.btBoolean);
                return;
              };
            } else if (pas.PasTree.TPasClassOfType.isPrototypeOf(RightTypeEl)) {
              RightTypeEl = Self.ResolveAliasType(RightTypeEl.DestType);
              if (Self.CheckClassesAreRelated(LeftTypeEl,RightTypeEl,Bin) !== 2147483647) {
                SetBaseType($mod.TResolverBaseType.btBoolean);
                return;
              };
            } else Self.RaiseXExpectedButYFound(20170322105252,"class type",$mod.GetElementTypeName(RightResolved.get().LoTypeEl),Bin.right);
          } else if (LeftResolved.get().LoTypeEl === null) {
            Self.RaiseMsg(20170216152232,3037,rtl.getResStr(pas.PasResolveEval,"sLeftSideOfIsOperatorExpectsAClassButGot"),[Self.GetBaseTypeNames(LeftResolved.get().BaseType)],Bin.left)}
           else Self.RaiseMsg(20170216152234,3037,rtl.getResStr(pas.PasResolveEval,"sLeftSideOfIsOperatorExpectsAClassButGot"),[$mod.GetElementTypeName(LeftResolved.get().LoTypeEl)],Bin.left);
          Self.RaiseIncompatibleTypeRes(20170216152236,3029,[],LeftResolved.get(),RightResolved.get(),Bin);
        } else if ($tmp11 === pas.PasTree.TExprOpCode.eopAs) {
          if (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
            if (pas.PasTree.TPasType.isPrototypeOf(LeftResolved.get().IdentEl) || !($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags)) Self.RaiseIncompatibleTypeRes(20180204124711,3082,[pas.PasTree.OpcodeStrings[Bin.OpCode]],LeftResolved.get(),RightResolved.get(),Bin);
            if (RightResolved.get().IdentEl === null) Self.RaiseXExpectedButYFound(20170216152630,"class",$mod.GetElementTypeName(RightResolved.get().LoTypeEl),Bin.right);
            if (!pas.PasTree.TPasType.isPrototypeOf(RightResolved.get().IdentEl)) Self.RaiseXExpectedButYFound(20170216152632,"class",RightResolved.get().IdentEl.FName,Bin.right);
            if (!(RightResolved.get().BaseType === $mod.TResolverBaseType.btContext)) Self.RaiseXExpectedButYFound(20180426195816,"class",RightResolved.get().IdentEl.FName,Bin.right);
            RightTypeEl = RightResolved.get().LoTypeEl;
            if (pas.PasTree.TPasClassType.isPrototypeOf(RightTypeEl)) {
              if (LeftTypeEl.ObjKind === RightTypeEl.ObjKind) {
                if (Self.CheckSrcIsADstType(RightResolved.get(),LeftResolved.get(),Bin) !== 2147483647) {
                  SetRightValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
                  return;
                };
              } else if (LeftTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
                if ((RightTypeEl.ObjKind === pas.PasTree.TPasObjKind.okClass) && !RightTypeEl.IsExternal) {
                  SetRightValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
                  return;
                };
              } else if (RightTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
                if ((LeftTypeEl.ObjKind === pas.PasTree.TPasObjKind.okClass) && !LeftTypeEl.IsExternal) {
                  SetRightValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
                  return;
                };
              };
            };
            Self.RaiseIncompatibleTypeRes(20180324190713,3029,[],LeftResolved.get(),RightResolved.get(),Bin);
          };
        } else if (((($tmp11 === pas.PasTree.TExprOpCode.eopLessThan) || ($tmp11 === pas.PasTree.TExprOpCode.eopGreaterThan)) || ($tmp11 === pas.PasTree.TExprOpCode.eopLessthanEqual)) || ($tmp11 === pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
          if (($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
            RightTypeEl = RightResolved.get().LoTypeEl;
            if ((LeftTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) && (LeftTypeEl === RightTypeEl)) {
              SetBaseType($mod.TResolverBaseType.btBoolean);
              return;
            } else if ((LeftTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) && (RightResolved.get().BaseType in $mod.btAllInteger)) {
              SetBaseType($mod.TResolverBaseType.btBoolean);
              return;
            };
          }}
         else if ($tmp11 === pas.PasTree.TExprOpCode.eopSubIdent) {
          ResolvedEl.set(new $mod.TPasResolverResult(RightResolved.get()));
          return;
        } else if (($tmp11 === pas.PasTree.TExprOpCode.eopAdd) || ($tmp11 === pas.PasTree.TExprOpCode.eopSubtract)) if (($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
          if (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
            if (((Self.IsDynArray(LeftTypeEl,true) && (Bin.OpCode === pas.PasTree.TExprOpCode.eopAdd)) && Self.ElHasModeSwitch(Bin,pas.PScanner.TModeSwitch.msArrayOperators)) && ((RightResolved.get().BaseType in rtl.createSet($mod.TResolverBaseType.btArrayOrSet,$mod.TResolverBaseType.btArrayLit)) || Self.IsDynArray(RightResolved.get().LoTypeEl,true))) {
              Self.CheckAssignCompatibilityArrayType(LeftResolved.get(),RightResolved.get(),Bin,true);
              SetLeftValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
              return;
            };
          } else if (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
            if ((RightResolved.get().BaseType in $mod.btAllInteger) && Self.ElHasBoolSwitch(Bin,pas.PScanner.TBoolSwitch.bsPointerMath)) {
              SetLeftValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
              return;
            };
          };
        };
      } else if (LeftResolved.get().BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet)) {
        if (($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) {
          if (RightResolved.get().BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet)) {
            var $tmp12 = Bin.OpCode;
            if (((((($tmp12 === pas.PasTree.TExprOpCode.eopAdd) || ($tmp12 === pas.PasTree.TExprOpCode.eopSubtract)) || ($tmp12 === pas.PasTree.TExprOpCode.eopMultiply)) || ($tmp12 === pas.PasTree.TExprOpCode.eopSymmetricaldifference)) || ($tmp12 === pas.PasTree.TExprOpCode.eopLessthanEqual)) || ($tmp12 === pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
              if (RightResolved.get().LoTypeEl === null) {
                if (Bin.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopLessthanEqual,pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
                  SetBaseType($mod.TResolverBaseType.btBoolean)}
                 else {
                  ResolvedEl.set(new $mod.TPasResolverResult(LeftResolved.get()));
                  ResolvedEl.get().IdentEl = null;
                  ResolvedEl.get().ExprEl = Bin;
                };
                return;
              } else if (LeftResolved.get().LoTypeEl === null) {
                if (Bin.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopLessthanEqual,pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
                  SetBaseType($mod.TResolverBaseType.btBoolean)}
                 else {
                  ResolvedEl.set(new $mod.TPasResolverResult(RightResolved.get()));
                  ResolvedEl.get().IdentEl = null;
                  ResolvedEl.get().ExprEl = Bin;
                };
                return;
              } else if (((LeftResolved.get().SubType === RightResolved.get().SubType) || ((LeftResolved.get().SubType in $mod.btAllBooleans) && (RightResolved.get().SubType in $mod.btAllBooleans))) || ((LeftResolved.get().SubType in $mod.btAllInteger) && (RightResolved.get().SubType in $mod.btAllInteger))) {
                if (Bin.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopLessthanEqual,pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
                  SetBaseType($mod.TResolverBaseType.btBoolean)}
                 else {
                  ResolvedEl.set(new $mod.TPasResolverResult(LeftResolved.get()));
                  ResolvedEl.get().IdentEl = null;
                  ResolvedEl.get().ExprEl = Bin;
                };
                return;
              };
            };
          } else if (RightResolved.get().BaseType === $mod.TResolverBaseType.btContext) {
            RightTypeEl = RightResolved.get().LoTypeEl;
            if (RightTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
              if (Self.IsDynArray(RightTypeEl,true)) {
                Self.CheckAssignCompatibilityArrayType(RightResolved.get(),LeftResolved.get(),Bin,true);
                SetRightValueExpr(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
                return;
              };
            };
          };
        };
      } else if (LeftResolved.get().BaseType === $mod.TResolverBaseType.btArrayLit) {
        if (((($mod.TPasResolverResultFlag.rrfReadable in LeftResolved.get().Flags) && ($mod.TPasResolverResultFlag.rrfReadable in RightResolved.get().Flags)) && (Bin.OpCode === pas.PasTree.TExprOpCode.eopAdd)) && Self.ElHasModeSwitch(Bin,pas.PScanner.TModeSwitch.msArrayOperators)) {
          if (RightResolved.get().BaseType === $mod.TResolverBaseType.btArrayLit) {
            if (LeftResolved.get().LoTypeEl !== null) {
              ResolvedEl.set(new $mod.TPasResolverResult(LeftResolved.get()))}
             else ResolvedEl.set(new $mod.TPasResolverResult(RightResolved.get()));
            ResolvedEl.get().IdentEl = null;
            ResolvedEl.get().ExprEl = Bin;
            return;
          } else if ((RightResolved.get().BaseType === $mod.TResolverBaseType.btContext) && (RightResolved.get().LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) {
            ResolvedEl.set(new $mod.TPasResolverResult(RightResolved.get()));
            ResolvedEl.get().IdentEl = null;
            ResolvedEl.get().ExprEl = Bin;
            return;
          };
        };
      } else if (LeftResolved.get().BaseType === $mod.TResolverBaseType.btModule) {
        if (Bin.OpCode === pas.PasTree.TExprOpCode.eopSubIdent) {
          ResolvedEl.set(new $mod.TPasResolverResult(RightResolved.get()));
          return;
        };
      };
      Self.RaiseIncompatibleTypeRes(20180204114631,3082,[pas.PasTree.OpcodeStrings[Bin.OpCode]],LeftResolved.get(),RightResolved.get(),Bin);
      if (rtl.eqSet(Flags,{})) ;
    };
    this.ComputeArrayParams = function (Params, ResolvedEl, Flags, StartEl) {
      var Self = this;
      function ComputeIndexProperty(Prop) {
        if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TPasResolverComputeFlag.rcConstant,$mod.TPasResolverComputeFlag.rcType),Flags),{})) Self.RaiseConstantExprExp(20170216152635,Params);
        Self.ComputeElement(Self.GetPasPropertyType(Prop),ResolvedEl,rtl.createSet($mod.TPasResolverComputeFlag.rcType),StartEl);
        ResolvedEl.get().IdentEl = Prop;
        ResolvedEl.get().Flags = {};
        if (Self.GetPasPropertyGetter(Prop) !== null) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfReadable);
        if (Self.GetPasPropertySetter(Prop) !== null) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfWritable);
      };
      function ComputeArrayPointer(TypeEl) {
        if (TypeEl === null) Self.RaiseInternalError(20180423092254,"");
        Self.ComputeElement(TypeEl,ResolvedEl,rtl.createSet($mod.TPasResolverComputeFlag.rcType),Params);
        ResolvedEl.get().IdentEl = null;
        ResolvedEl.get().ExprEl = Params;
        ResolvedEl.get().Flags = rtl.unionSet(ResolvedEl.get().Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable));
      };
      var TypeEl = null;
      var ClassScope = null;
      var ArrayEl = null;
      var ArgNo = 0;
      var OrigResolved = new $mod.TPasResolverResult();
      var SubParams = null;
      if ($mod.TResolvedReference.isPrototypeOf(Params.Value.FData)) {
        Self.ComputeElement(Params.Value,ResolvedEl,rtl.diffSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc,$mod.TPasResolverComputeFlag.rcNoImplicitProcType)),StartEl);
      } else if (Params.Value.$class.ClassType() === pas.PasTree.TParamsExpr) {
        SubParams = Params.Value;
        if (SubParams.Kind in rtl.createSet(pas.PasTree.TPasExprKind.pekArrayParams,pas.PasTree.TPasExprKind.pekFuncParams)) {
          Self.ComputeElement(SubParams,ResolvedEl,rtl.diffSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc,$mod.TPasResolverComputeFlag.rcNoImplicitProcType)),StartEl);
        } else Self.RaiseNotYetImplemented(20161010195646,SubParams,"");
      } else if (Params.Value.$class.ClassType() === pas.PasTree.TUnaryExpr) {
        Self.ComputeElement(Params.Value,ResolvedEl,rtl.diffSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc,$mod.TPasResolverComputeFlag.rcNoImplicitProcType)),StartEl);
      } else Self.RaiseNotYetImplemented(20160928174144,Params,"");
      if (ResolvedEl.get().BaseType in $mod.btAllStrings) {
        var $tmp1 = Self.GetActualBaseType(ResolvedEl.get().BaseType);
        if (($tmp1 === $mod.TResolverBaseType.btWideString) || ($tmp1 === $mod.TResolverBaseType.btUnicodeString)) {
          if (Self.FBaseTypeChar === $mod.TResolverBaseType.btWideChar) {
            ResolvedEl.get().BaseType = $mod.TResolverBaseType.btChar}
           else ResolvedEl.get().BaseType = $mod.TResolverBaseType.btWideChar}
         else {
          Self.RaiseNotYetImplemented(20170417202354,Params,"");
        };
        ResolvedEl.get().LoTypeEl = Self.FBaseTypes[ResolvedEl.get().BaseType];
        ResolvedEl.get().HiTypeEl = ResolvedEl.get().LoTypeEl;
        ResolvedEl.get().ExprEl = Params;
        ResolvedEl.get().Flags = rtl.unionSet(rtl.diffSet(ResolvedEl.get().Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfWritable,$mod.TPasResolverResultFlag.rrfCanBeStatement)),rtl.createSet($mod.TPasResolverResultFlag.rrfAssignable));
      } else if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btPointer) {
        ComputeArrayPointer(ResolvedEl.get().LoTypeEl)}
       else if (pas.PasTree.TPasProperty.isPrototypeOf(ResolvedEl.get().IdentEl) && (Self.GetPasPropertyArgs(ResolvedEl.get().IdentEl).FCount > 0)) {
        ComputeIndexProperty(ResolvedEl.get().IdentEl)}
       else if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btContext) {
        TypeEl = ResolvedEl.get().LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          ClassScope = rtl.as($mod.NoNil(TypeEl.FData),$mod.TPasClassScope);
          if (ClassScope.DefaultProperty !== null) {
            ComputeIndexProperty(ClassScope.DefaultProperty)}
           else Self.ComputeArrayParams_Class(Params,ResolvedEl,ClassScope,rtl.refSet(Flags),StartEl);
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
          ClassScope = rtl.as(Self.ResolveAliasType(TypeEl.DestType).FData,$mod.TPasClassScope);
          if (ClassScope.DefaultProperty !== null) {
            ComputeIndexProperty(ClassScope.DefaultProperty)}
           else Self.RaiseInternalError(20161010174916,"");
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
          if (!($mod.TPasResolverResultFlag.rrfReadable in ResolvedEl.get().Flags)) Self.RaiseMsg(20170517001140,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["[",TypeEl.ElementTypeName()],Params);
          ArrayEl = TypeEl;
          ArgNo = 0;
          do {
            if (rtl.length(ArrayEl.Ranges) === 0) {
              ArgNo += 1;
              if (Self.IsDynArray(ArrayEl,true)) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfWritable);
            } else ArgNo += rtl.length(ArrayEl.Ranges);
            if (ArgNo > rtl.length(Params.Params)) Self.RaiseInternalError(20161010185535,"");
            if (ArgNo === rtl.length(Params.Params)) break;
            ArrayEl = rtl.as($mod.NoNil(Self.ResolveAliasType(ArrayEl.ElType)),pas.PasTree.TPasArrayType);
          } while (!false);
          OrigResolved = new $mod.TPasResolverResult(ResolvedEl.get());
          Self.ComputeElement(ArrayEl.ElType,ResolvedEl,rtl.refSet(Flags),StartEl);
          ResolvedEl.get().IdentEl = OrigResolved.IdentEl;
          ResolvedEl.get().ExprEl = OrigResolved.ExprEl;
          ResolvedEl.get().Flags = rtl.intersectSet(OrigResolved.Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable));
          if (Self.IsDynArray(ArrayEl,true)) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfWritable);
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          ComputeArrayPointer(TypeEl.DestType)}
         else Self.RaiseNotYetImplemented(20161010151727,Params,$mod.GetResolverResultDbg(ResolvedEl.get()));
      } else Self.RaiseNotYetImplemented(20160928174212,Params,$mod.GetResolverResultDbg(ResolvedEl.get()));
    };
    this.ComputeArrayParams_Class = function (Params, ResolvedEl, ClassScope, Flags, StartEl) {
      this.RaiseInternalError(20161010174916,"");
      if (Params === null) ;
      if (ClassScope === null) ;
      if (rtl.eqSet(Flags,{})) ;
      if (StartEl === null) ;
      $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btNone,null,null,null,{});
    };
    this.ComputeFuncParams = function (Params, ResolvedEl, Flags, StartEl) {
      var DeclEl = null;
      var BuiltInProc = null;
      var Proc = null;
      var aClass = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var Ref = null;
      var DeclType = null;
      var Param0 = null;
      if ($mod.TResolvedReference.isPrototypeOf(Params.Value.FData)) {
        Ref = Params.Value.FData;
        DeclEl = Ref.FDeclaration;
        if (DeclEl.$class.ClassType() === pas.PasTree.TPasUnresolvedSymbolRef) {
          if (DeclEl.FData.$class.ClassType() === $mod.TResElDataBuiltInProc) {
            BuiltInProc = DeclEl.FData;
            if (BuiltInProc.GetCallResult != null) {
              BuiltInProc.GetCallResult(BuiltInProc,Params,ResolvedEl)}
             else $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btProc,BuiltInProc.Proc,BuiltInProc.Proc,BuiltInProc.Proc,{});
            if ($mod.TBuiltInProcFlag.bipfCanBeStatement in BuiltInProc.Flags) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfCanBeStatement);
          } else if ($mod.TResElDataBaseType.isPrototypeOf(DeclEl.FData)) {
            DeclType = DeclEl;
            if (rtl.length(Params.Params) !== 1) {
              this.RaiseMsg(20180503105409,3034,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForTypeCast"),[DeclType.FName],Params);
            };
            Param0 = Params.Params[0];
            this.ComputeElement(Param0,{get: function () {
                return ParamResolved;
              }, set: function (v) {
                ParamResolved = v;
              }},{},null);
            this.ComputeTypeCast(DeclType,DeclType,Param0,ParamResolved,ResolvedEl,rtl.refSet(Flags));
          } else this.RaiseNotYetImplemented(20161006133040,Params,$mod.GetResolverResultDbg(ResolvedEl.get()));
        } else {
          this.ComputeElement(DeclEl,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc)),StartEl);
          if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btProc) {
            if (!pas.PasTree.TPasProcedure.isPrototypeOf(ResolvedEl.get().IdentEl)) this.RaiseNotYetImplemented(20160928180201,Params,$mod.GetResolverResultDbg(ResolvedEl.get()));
            Proc = ResolvedEl.get().IdentEl;
            if ($mod.TPasResolverComputeFlag.rcConstant in Flags) this.RaiseConstantExprExp(20170216152637,Params);
            if (pas.PasTree.TPasFunction.isPrototypeOf(Proc)) {
              this.ComputeElement(Proc.GetFT().ResultEl,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc)),StartEl)}
             else if ((Proc.$class.ClassType() === pas.PasTree.TPasConstructor) && ($mod.TResolvedReferenceFlag.rrfNewInstance in Ref.Flags)) {
              aClass = this.GetReference_NewInstanceClass(Ref);
              $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btContext,aClass,aClass,Params.Value,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
            } else $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btProc,Proc,Proc.ProcType,Proc.ProcType,{});
            ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfCanBeStatement);
          } else if (pas.PasTree.TPasProcedureType.isPrototypeOf(ResolvedEl.get().LoTypeEl)) {
            if (pas.PasTree.TParamsExpr.isPrototypeOf(Params.Value)) {
              ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfReadable);
            };
            if ($mod.TPasResolverResultFlag.rrfReadable in ResolvedEl.get().Flags) {
              if ($mod.TPasResolverComputeFlag.rcConstant in Flags) this.RaiseConstantExprExp(20170216152639,Params);
              if (pas.PasTree.TPasFunctionType.isPrototypeOf(ResolvedEl.get().LoTypeEl)) {
                this.ComputeElement(ResolvedEl.get().LoTypeEl.ResultEl,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc)),StartEl)}
               else $mod.SetResolverTypeExpr(ResolvedEl,$mod.TResolverBaseType.btProc,ResolvedEl.get().LoTypeEl,ResolvedEl.get().HiTypeEl,{});
              ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfCanBeStatement);
            } else {
              if (rtl.length(Params.Params) !== 1) {
                this.RaiseMsg(20170416185211,3034,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForTypeCast"),[ResolvedEl.get().LoTypeEl.FName],Params);
              };
              Param0 = Params.Params[0];
              this.ComputeElement(Param0,{get: function () {
                  return ParamResolved;
                }, set: function (v) {
                  ParamResolved = v;
                }},{},null);
              this.ComputeTypeCast(ResolvedEl.get().LoTypeEl,ResolvedEl.get().HiTypeEl,Param0,ParamResolved,ResolvedEl,rtl.refSet(Flags));
            };
          } else if (pas.PasTree.TPasType.isPrototypeOf(DeclEl)) {
            Param0 = Params.Params[0];
            this.ComputeElement(Param0,{get: function () {
                return ParamResolved;
              }, set: function (v) {
                ParamResolved = v;
              }},{},null);
            this.ComputeTypeCast(ResolvedEl.get().LoTypeEl,ResolvedEl.get().HiTypeEl,Param0,ParamResolved,ResolvedEl,rtl.refSet(Flags));
          } else this.RaiseNotYetImplemented(20160928180048,Params,$mod.GetResolverResultDbg(ResolvedEl.get()));
        };
      } else this.RaiseNotYetImplemented(20160928174124,Params,"");
    };
    this.ComputeTypeCast = function (ToLoType, ToHiType, Param, ParamResolved, ResolvedEl, Flags) {
      var Self = this;
      function ParamIsVar() {
        var Result = false;
        var IdentEl = null;
        IdentEl = ParamResolved.IdentEl;
        if (IdentEl === null) return false;
        if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TPasResolverComputeFlag.rcConstant,$mod.TPasResolverComputeFlag.rcType),Flags),{})) {
          Result = (IdentEl.$class.ClassType() === pas.PasTree.TPasConst) && IdentEl.IsConst}
         else Result = (pas.PasTree.TPasVariable.isPrototypeOf(IdentEl) || (IdentEl.$class.ClassType() === pas.PasTree.TPasArgument)) || (IdentEl.$class.ClassType() === pas.PasTree.TPasResultElement);
        return Result;
      };
      var WriteFlags = {};
      var KeepWriteFlags = false;
      var bt = 0;
      var Expr = null;
      if ($mod.TResElDataBaseType.isPrototypeOf(ToLoType.FData)) {
        bt = Self.GetActualBaseType(ToLoType.FData.BaseType);
        $mod.SetResolverValueExpr(ResolvedEl,ToLoType.FData.BaseType,ToLoType,ToHiType,Param,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
        ResolvedEl.get().IdentEl = ParamResolved.IdentEl;
        WriteFlags = rtl.intersectSet(ParamResolved.Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfWritable,$mod.TPasResolverResultFlag.rrfAssignable));
        if (rtl.neSet(WriteFlags,{}) && ParamIsVar()) {
          KeepWriteFlags = false;
          if (bt === $mod.TResolverBaseType.btPointer) {
            if (((((ParamResolved.BaseType === $mod.TResolverBaseType.btPointer) || (ParamResolved.BaseType in rtl.createSet($mod.TResolverBaseType.btString,$mod.TResolverBaseType.btUnicodeString,$mod.TResolverBaseType.btWideString))) || (ParamResolved.LoTypeEl === null)) || (ParamResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasClassType)) || Self.IsDynArray(ParamResolved.LoTypeEl,true)) KeepWriteFlags = true;
          } else if (Self.IsSameType(ToLoType,ParamResolved.LoTypeEl,$mod.TPRResolveAlias.prraNone)) KeepWriteFlags = true;
          if (KeepWriteFlags) ResolvedEl.get().Flags = rtl.unionSet(ResolvedEl.get().Flags,WriteFlags);
        };
      } else if (pas.PasTree.TPasProcedureType.isPrototypeOf(ToLoType)) {
        if (ParamIsVar()) {
          WriteFlags = rtl.intersectSet(ParamResolved.Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfWritable,$mod.TPasResolverResultFlag.rrfAssignable))}
         else WriteFlags = {};
        $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btContext,ToLoType,ToHiType,Param,rtl.unionSet(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable),WriteFlags));
        ResolvedEl.get().IdentEl = ParamResolved.IdentEl;
      } else {
        if (pas.PasTree.TParamsExpr.isPrototypeOf(Param.FParent)) {
          Expr = Param.FParent}
         else Expr = Param;
        Self.ComputeElement(ToHiType,ResolvedEl,rtl.refSet(Flags),Expr);
        ResolvedEl.get().ExprEl = Expr;
        ResolvedEl.get().IdentEl = ParamResolved.IdentEl;
        ResolvedEl.get().Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable);
        WriteFlags = rtl.intersectSet(ParamResolved.Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfWritable,$mod.TPasResolverResultFlag.rrfAssignable));
        if (rtl.neSet(WriteFlags,{}) && ParamIsVar()) {
          KeepWriteFlags = false;
          if ($mod.TPasResolverResultFlag.rrfReadable in ResolvedEl.get().Flags) {
            if (ParamResolved.BaseType === $mod.TResolverBaseType.btPointer) {
              if ((ToLoType.$class.ClassType() === pas.PasTree.TPasClassType) || Self.IsDynArray(ParamResolved.LoTypeEl,true)) KeepWriteFlags = true;
            } else if (ParamResolved.LoTypeEl === null) {
              KeepWriteFlags = true}
             else if (ToLoType === ParamResolved.LoTypeEl) {
              KeepWriteFlags = true}
             else if ((ToLoType.$class.ClassType() === pas.PasTree.TPasClassType) && (ParamResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasClassType)) {
              if (ToLoType.ObjKind !== ParamResolved.LoTypeEl.ObjKind) {}
              else KeepWriteFlags = true;
            } else if ((ToLoType.$class.ClassType() === pas.PasTree.TPasRecordType) && (ParamResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType)) KeepWriteFlags = true;
          };
          if (KeepWriteFlags) ResolvedEl.get().Flags = rtl.unionSet(ResolvedEl.get().Flags,WriteFlags);
        };
      };
    };
    this.ComputeSetParams = function (Params, ResolvedEl, Flags, StartEl) {
      var ParamResolved = new $mod.TPasResolverResult();
      var FirstResolved = new $mod.TPasResolverResult();
      var i = 0;
      var Param = null;
      var IsRange = false;
      var IsArray = false;
      var ArrayType = null;
      ArrayType = this.IsArrayExpr(Params);
      IsArray = ArrayType !== null;
      if (rtl.length(Params.Params) === 0) {
        $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btArrayOrSet,null,null,Params,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
        if (IsArray) ResolvedEl.get().BaseType = $mod.TResolverBaseType.btArrayLit;
        return;
      };
      FirstResolved = new $mod.TPasResolverResult();
      Flags = rtl.unionSet(rtl.diffSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc)),rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProcType));
      for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Param = Params.Params[i];
        this.ComputeElement(Params.Params[0],{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},rtl.refSet(Flags),StartEl);
        IsRange = ParamResolved.BaseType === $mod.TResolverBaseType.btRange;
        if (IsRange) {
          if (IsArray) this.RaiseXExpectedButYFound(20180615111713,"array value","range expression",Param);
          this.ConvertRangeToElement({get: function () {
              return ParamResolved;
            }, set: function (v) {
              ParamResolved = v;
            }});
        };
        if (FirstResolved.BaseType === $mod.TResolverBaseType.btNone) {
          FirstResolved = new $mod.TPasResolverResult(ParamResolved);
          if (IsRange) this.CheckIsOrdinal(FirstResolved,Param,true);
          if ($mod.TPasResolverResultFlag.rrfReadable in FirstResolved.Flags) {
            if ((!IsArray && !IsRange) && !this.CheckIsOrdinal(FirstResolved,Param,false)) {
              IsArray = true;
            };
          } else {
            IsArray = true;
            if (FirstResolved.BaseType === $mod.TResolverBaseType.btContext) {
              if (pas.PasTree.TPasClassType.isPrototypeOf(FirstResolved.IdentEl)) {}
              else {
                this.RaiseXExpectedButYFound(20170420002328,"array value","type",Param);
              };
            } else {
              this.RaiseXExpectedButYFound(20170420002332,"array value","type",Param);
            };
          };
        } else {
          this.CombineArrayLitElTypes(Params.Params[0],Param,{get: function () {
              return FirstResolved;
            }, set: function (v) {
              FirstResolved = v;
            }},ParamResolved);
        };
      };
      FirstResolved.IdentEl = null;
      FirstResolved.ExprEl = Params;
      FirstResolved.SubType = FirstResolved.BaseType;
      if (IsArray) {
        FirstResolved.BaseType = $mod.TResolverBaseType.btArrayLit}
       else FirstResolved.BaseType = $mod.TResolverBaseType.btArrayOrSet;
      FirstResolved.Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable);
      ResolvedEl.set(new $mod.TPasResolverResult(FirstResolved));
    };
    this.ComputeDereference = function (El, ResolvedEl) {
      var Self = this;
      function Deref(TypeEl) {
        var Expr = null;
        Expr = ResolvedEl.get().ExprEl;
        if (Expr === null) Expr = El;
        Self.ComputeElement(TypeEl,ResolvedEl,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),El);
        ResolvedEl.get().IdentEl = null;
        ResolvedEl.get().ExprEl = Expr;
        ResolvedEl.get().Flags = rtl.unionSet(ResolvedEl.get().Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable));
      };
      var TypeEl = null;
      if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btPointer) {
        Deref(ResolvedEl.get().LoTypeEl);
        return;
      } else if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btContext) {
        TypeEl = ResolvedEl.get().LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          Deref(TypeEl.DestType);
          return;
        };
      };
      Self.RaiseMsg(20180422191139,3085,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierInFrontOf"),[pas.PasTree.OpcodeStrings[pas.PasTree.TExprOpCode.eopDeref],Self.GetResolverResultDescription(ResolvedEl.get(),false)],El);
    };
    this.ComputeArrayValuesExpectedType = function (El, ResolvedEl, Flags, StartEl) {
      var Parent = null;
      var HiTypeEl = null;
      var LoTypeEl = null;
      var Field = null;
      var Ref = null;
      var Member = null;
      var i = 0;
      var ArrType = null;
      Parent = El.FParent;
      if (pas.PasTree.TPasVariable.isPrototypeOf(Parent)) {
        HiTypeEl = Parent.VarType;
        if (HiTypeEl === null) this.RaiseMsg(20180429171628,3004,rtl.getResStr(pas.PasResolveEval,"sSyntaxErrorExpectedButFound"),["const","array values"],El);
        LoTypeEl = this.ResolveAliasType(HiTypeEl);
        if (LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {}
        else this.RaiseIncompatibleTypeDesc(20180429171714,3028,[],"array value",this.GetTypeDescription(HiTypeEl,false),El);
        $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btContext,LoTypeEl,HiTypeEl,El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
      } else if (Parent.$class.ClassType() === pas.PasTree.TRecordValues) {
        i = rtl.length(Parent.Fields) - 1;
        while ((i >= 0) && (Parent.Fields[i].ValueExp !== El)) i -= 1;
        if (i < 0) this.RaiseInternalError(20180429181150,"");
        Field = Parent.Fields[i];
        Ref = rtl.as(Field.NameExp.FData,$mod.TResolvedReference);
        Member = rtl.as(Ref.FDeclaration,pas.PasTree.TPasVariable);
        if (Member === null) this.RaiseInternalError(20180429181210,"");
        this.ComputeElement(Member,ResolvedEl,{},StartEl);
        ResolvedEl.get().Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable);
      } else if (Parent.$class.ClassType() === pas.PasTree.TArrayValues) {
        this.ComputeArrayValuesExpectedType(Parent,ResolvedEl,rtl.refSet(Flags),StartEl);
        if ((ResolvedEl.get().BaseType === $mod.TResolverBaseType.btContext) && (ResolvedEl.get().LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) {
          ArrType = ResolvedEl.get().LoTypeEl;
          if (rtl.length(ArrType.Ranges) > 1) this.RaiseNotYetImplemented(20180429180930,El,"");
          HiTypeEl = ArrType.ElType;
          LoTypeEl = this.ResolveAliasType(HiTypeEl);
          if (LoTypeEl.$class.ClassType() !== pas.PasTree.TPasArrayType) this.RaiseIncompatibleTypeDesc(20180429180938,3028,[],"array values",this.GetTypeDescription(HiTypeEl,false),El);
          $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btContext,LoTypeEl,HiTypeEl,El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
        } else this.RaiseIncompatibleTypeDesc(20180429173143,3028,[],"array values",this.GetTypeDescription$1(ResolvedEl.get(),false),El);
      } else $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btArrayLit,null,null,El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
    };
    this.ComputeRecordValues = function (El, ResolvedEl, Flags, StartEl) {
      var Parent = null;
      var Member = null;
      var LoTypeEl = null;
      var HiTypeEl = null;
      var i = 0;
      var Field = null;
      var Ref = null;
      var ArrType = null;
      Parent = El.FParent;
      if (pas.PasTree.TPasVariable.isPrototypeOf(Parent)) {
        HiTypeEl = Parent.VarType;
        if (HiTypeEl === null) this.RaiseMsg(20180429105451,3004,rtl.getResStr(pas.PasResolveEval,"sSyntaxErrorExpectedButFound"),["const","record values"],El);
        LoTypeEl = this.ResolveAliasType(HiTypeEl);
        if (LoTypeEl.$class.ClassType() !== pas.PasTree.TPasRecordType) this.RaiseIncompatibleTypeDesc(20180429104135,3028,[],"record value",this.GetTypeDescription(HiTypeEl,false),El);
        $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btContext,LoTypeEl,HiTypeEl,El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
      } else if (Parent.$class.ClassType() === pas.PasTree.TRecordValues) {
        i = rtl.length(Parent.Fields) - 1;
        while ((i >= 0) && (Parent.Fields[i].ValueExp !== El)) i -= 1;
        if (i < 0) this.RaiseInternalError(20180429130244,"");
        Field = Parent.Fields[i];
        Ref = rtl.as(Field.NameExp.FData,$mod.TResolvedReference);
        Member = rtl.as(Ref.FDeclaration,pas.PasTree.TPasVariable);
        if (Member === null) this.RaiseInternalError(20180429130548,"");
        this.ComputeElement(Member,ResolvedEl,{},StartEl);
        ResolvedEl.get().Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable);
      } else if (Parent.$class.ClassType() === pas.PasTree.TArrayValues) {
        this.ComputeArrayValuesExpectedType(Parent,ResolvedEl,rtl.refSet(Flags),StartEl);
        if ((ResolvedEl.get().BaseType === $mod.TResolverBaseType.btContext) && (ResolvedEl.get().LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) {
          ArrType = ResolvedEl.get().LoTypeEl;
          if (rtl.length(ArrType.Ranges) > 1) this.RaiseNotYetImplemented(20180429180450,El,"");
          HiTypeEl = ArrType.ElType;
          LoTypeEl = this.ResolveAliasType(HiTypeEl);
          if (LoTypeEl.$class.ClassType() !== pas.PasTree.TPasRecordType) this.RaiseIncompatibleTypeDesc(20180429180642,3028,[],"record values",this.GetTypeDescription(HiTypeEl,false),El);
          $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btContext,LoTypeEl,HiTypeEl,El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
        } else this.RaiseIncompatibleTypeDesc(20180429173143,3028,[],"array values",this.GetTypeDescription$1(ResolvedEl.get(),false),El);
      } else this.RaiseMsg(20180429110227,3004,rtl.getResStr(pas.PasResolveEval,"sSyntaxErrorExpectedButFound"),["const","(name:"],El);
    };
    this.CheckIsClass = function (El, ResolvedEl) {
      var TypeEl = null;
      if (ResolvedEl.BaseType !== $mod.TResolverBaseType.btContext) this.RaiseXExpectedButYFound(20170216152245,"class",this.GetBaseTypeNames(ResolvedEl.BaseType),El);
      TypeEl = ResolvedEl.LoTypeEl;
      if ((TypeEl.$class.ClassType() !== pas.PasTree.TPasClassType) || (TypeEl.ObjKind !== pas.PasTree.TPasObjKind.okClass)) this.RaiseXExpectedButYFound(20170216152246,"class",$mod.GetElementTypeName(ResolvedEl.LoTypeEl),El);
    };
    this.CheckTypeCastClassInstanceToClass = function (FromClassRes, ToClassRes, ErrorEl) {
      var Result = 0;
      if (FromClassRes.BaseType === $mod.TResolverBaseType.btNone) ;
      if (ToClassRes.BaseType === $mod.TResolverBaseType.btNone) ;
      if (ErrorEl === null) ;
      Result = 2147483647;
      return Result;
    };
    this.CheckSetLitElCompatible = function (Left, Right, LHS, RHS) {
      var LBT = 0;
      var RBT = 0;
      if (!($mod.TPasResolverResultFlag.rrfReadable in LHS.Flags)) {
        if (LHS.LoTypeEl !== null) {
          this.RaiseXExpectedButYFound(20170216152645,"ordinal",$mod.GetElementTypeName(LHS.LoTypeEl),Left)}
         else this.RaiseXExpectedButYFound(20170216152648,"ordinal",this.GetBaseTypeNames(LHS.BaseType),Left);
      };
      if (!($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) {
        if (RHS.LoTypeEl !== null) {
          this.RaiseXExpectedButYFound(20170216152651,"ordinal",$mod.GetElementTypeName(RHS.LoTypeEl),Right)}
         else this.RaiseXExpectedButYFound(20170216152653,"ordinal",this.GetBaseTypeNames(RHS.BaseType),Right);
      };
      LBT = this.GetActualBaseType(LHS.BaseType);
      RBT = this.GetActualBaseType(RHS.BaseType);
      if (LBT in $mod.btAllBooleans) {
        if (RBT in $mod.btAllBooleans) return;
        this.RaiseXExpectedButYFound(20170216152656,"boolean",this.GetBaseTypeNames(RHS.BaseType),Right);
      } else if (LBT in $mod.btAllInteger) {
        if (RBT in $mod.btAllInteger) return;
        this.RaiseXExpectedButYFound(20170216152658,"integer",this.GetBaseTypeNames(RHS.BaseType),Right);
      } else if (LBT in $mod.btAllChars) {
        if (RBT in $mod.btAllChars) return;
        this.RaiseXExpectedButYFound(20170216152702,"char",this.GetBaseTypeNames(RHS.BaseType),Right);
      } else if (LBT === $mod.TResolverBaseType.btContext) {
        if (LHS.LoTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
          if (LHS.LoTypeEl === RHS.LoTypeEl) return;
          if (RHS.LoTypeEl.$class.ClassType() !== pas.PasTree.TPasEnumType) this.RaiseXExpectedButYFound(20170216152707,LHS.LoTypeEl.FParent.FName,$mod.GetElementTypeName(RHS.LoTypeEl),Right);
          if (LHS.LoTypeEl.FParent !== RHS.LoTypeEl.FParent) this.RaiseXExpectedButYFound(20170216152710,LHS.LoTypeEl.FParent.FName,RHS.LoTypeEl.FParent.FName,Right);
        } else this.RaiseXExpectedButYFound(20170216152712,"ordinal",this.GetBaseTypeNames(LHS.BaseType),Left);
      } else this.RaiseXExpectedButYFound(20170216152714,"ordinal",this.GetBaseTypeNames(LHS.BaseType),Left);
    };
    this.CheckIsOrdinal = function (ResolvedEl, ErrorEl, RaiseOnError) {
      var Result = false;
      Result = false;
      if (ResolvedEl.BaseType in $mod.btAllRanges) {}
      else if (ResolvedEl.BaseType === $mod.TResolverBaseType.btContext) {
        if (ResolvedEl.LoTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {}
        else if (RaiseOnError) {
          this.RaiseXExpectedButYFound(20170216152718,"ordinal value",$mod.GetElementTypeName(ResolvedEl.LoTypeEl),ErrorEl)}
         else return Result;
      } else if (RaiseOnError) {
        this.RaiseXExpectedButYFound(20170216152720,"ordinal value",this.GetBaseTypeNames(ResolvedEl.BaseType),ErrorEl)}
       else return Result;
      Result = true;
      return Result;
    };
    this.CombineArrayLitElTypes = function (Left, Right, LHS, RHS) {
      var LBT = 0;
      var RBT = 0;
      var C = null;
      if ((LHS.get().LoTypeEl === RHS.LoTypeEl) && (LHS.get().BaseType === RHS.BaseType)) return;
      LBT = this.GetActualBaseType(LHS.get().BaseType);
      RBT = this.GetActualBaseType(RHS.BaseType);
      if ($mod.TPasResolverResultFlag.rrfReadable in LHS.get().Flags) {
        if (!($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) this.RaiseIncompatibleTypeRes(20170420004759,3028,[],RHS,LHS.get(),Right);
        if (LBT in $mod.btAllBooleans) {
          if (RBT in $mod.btAllBooleans) {
            LHS.get().BaseType = this.GetCombinedBoolean(LBT,RBT,Right);
            return;
          };
          this.RaiseXExpectedButYFound(20170420093015,"boolean",this.GetBaseTypeNames(RHS.BaseType),Right);
        } else if (LBT in $mod.btAllInteger) {
          if (RBT in $mod.btAllInteger) {
            LHS.get().BaseType = this.GetCombinedInt(LHS.get(),RHS,Right);
            return;
          };
          this.RaiseXExpectedButYFound(20170420093019,"integer",this.GetBaseTypeNames(RHS.BaseType),Right);
        } else if (LBT in $mod.btAllChars) {
          if (RBT in $mod.btAllChars) {
            LHS.get().BaseType = this.GetCombinedChar(LHS.get(),RHS,Right);
            return;
          };
          this.RaiseXExpectedButYFound(20170420093024,"char",this.GetBaseTypeNames(RHS.BaseType),Right);
        } else if (LBT in $mod.btAllStrings) {
          if (RBT in $mod.btAllStringAndChars) {
            LHS.get().BaseType = this.GetCombinedString(LHS.get(),RHS,Right);
            return;
          };
          this.RaiseXExpectedButYFound(20170420102832,"string",this.GetBaseTypeNames(RHS.BaseType),Right);
        } else if (LBT === $mod.TResolverBaseType.btNil) {
          if (RBT === $mod.TResolverBaseType.btNil) {
            return}
           else if (RBT === $mod.TResolverBaseType.btPointer) {
            LHS.set(new $mod.TPasResolverResult(RHS));
            return;
          } else if (RBT === $mod.TResolverBaseType.btContext) {
            C = RHS.LoTypeEl.$class.ClassType();
            if ((((((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasPointerType)) || ((C === pas.PasTree.TPasArrayType) && this.IsDynArray(RHS.LoTypeEl,true))) || (C === pas.PasTree.TPasProcedureType)) || (C === pas.PasTree.TPasFunctionType)) {
              LHS.set(new $mod.TPasResolverResult(RHS));
              return;
            };
          };
        } else if (LBT === $mod.TResolverBaseType.btContext) {
          C = LHS.get().LoTypeEl.$class.ClassType();
          if (C === pas.PasTree.TPasEnumType) {
            if (LHS.get().LoTypeEl === RHS.LoTypeEl) return;
          } else if (C === pas.PasTree.TPasClassType) {
            if (RHS.LoTypeEl.$class.ClassType() !== pas.PasTree.TPasClassType) this.RaiseIncompatibleTypeRes(20170420135637,3028,[],RHS,LHS.get(),Right);
            if (this.CheckClassIsClass(LHS.get().LoTypeEl,RHS.LoTypeEl,Right) < 2147483647) {
              return;
            } else if (this.CheckClassIsClass(RHS.LoTypeEl,LHS.get().LoTypeEl,Right) < 2147483647) {
              LHS.set(new $mod.TPasResolverResult(RHS));
              return;
            };
          };
        };
      } else {
        if ($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags) this.RaiseIncompatibleTypeRes(20170420004925,3028,[],RHS,LHS.get(),Right);
        if (LBT === $mod.TResolverBaseType.btContext) {
          if (LHS.get().LoTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
            if (RHS.LoTypeEl.$class.ClassType() !== pas.PasTree.TPasClassType) this.RaiseIncompatibleTypeRes(20170420091839,3028,[],RHS,LHS.get(),Right);
            if (this.CheckClassIsClass(LHS.get().LoTypeEl,RHS.LoTypeEl,Right) < 2147483647) {
              return;
            } else if (this.CheckClassIsClass(RHS.LoTypeEl,LHS.get().LoTypeEl,Right) < 2147483647) {
              LHS.set(new $mod.TPasResolverResult(RHS));
              return;
            };
          };
        };
      };
      if (LHS.get().LoTypeEl === null) this.RaiseXExpectedButYFound(20170420004537,"array element",this.GetBaseTypeNames(LHS.get().BaseType),Left);
      if (RHS.LoTypeEl === null) this.RaiseXExpectedButYFound(20170420004602,"array element",this.GetBaseTypeNames(RHS.BaseType),Right);
      this.RaiseIncompatibleTypeRes(20170420092625,3028,[],RHS,LHS.get(),Right);
    };
    this.ConvertRangeToElement = function (ResolvedEl) {
      var TypeEl = null;
      if (ResolvedEl.get().BaseType !== $mod.TResolverBaseType.btRange) this.RaiseInternalError(20161001155732,"");
      if (ResolvedEl.get().LoTypeEl === null) if (ResolvedEl.get().IdentEl !== null) {
        this.RaiseNotYetImplemented(20161001155747,ResolvedEl.get().IdentEl,"")}
       else this.RaiseNotYetImplemented(20161001155834,ResolvedEl.get().ExprEl,"");
      TypeEl = ResolvedEl.get().LoTypeEl;
      if (pas.PasTree.TPasRangeType.isPrototypeOf(TypeEl)) {
        this.ComputeElement(TypeEl.RangeExpr.left,ResolvedEl,rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null)}
       else {
        ResolvedEl.get().BaseType = ResolvedEl.get().SubType;
        ResolvedEl.get().SubType = $mod.TResolverBaseType.btNone;
      };
    };
    this.IsCharLiteral = function (Value, ErrorPos) {
      var Result = 0;
      var i = 0;
      var p = 0;
      var base = 0;
      var l = 0;
      Result = $mod.TResolverBaseType.btNone;
      l = Value.length;
      if (l === 0) return Result;
      p = 1;
      var $tmp1 = Value.charAt(0);
      if ($tmp1 === "'") {
        p += 1;
        if (p > l) return Result;
        var $tmp2 = Value.charAt(p - 1);
        if ($tmp2 === "'") {
          if ((((p + 2) === l) && (Value.charAt((p + 1) - 1) === "'")) && (Value.charAt((p + 2) - 1) === "'")) Result = $mod.TResolverBaseType.btWideChar}
         else if (($tmp2 >= "\uDC00") && ($tmp2 <= "\uDFFF")) {}
        else {
          if ((l === 3) && (Value.charAt(2) === "'")) Result = $mod.TResolverBaseType.btWideChar;
        };
      } else if ($tmp1 === "#") {
        p += 1;
        if (p > l) return Result;
        var $tmp3 = Value.charAt(p - 1);
        if ($tmp3 === "$") {
          base = 16;
          p += 1;
        } else if ($tmp3 === "&") {
          base = 8;
          p += 1;
        } else if ($tmp3 === "%") {
          base = 2;
          p += 1;
        } else if (($tmp3 >= "0") && ($tmp3 <= "9")) {
          base = 10}
         else {
          this.RaiseNotYetImplemented(20170728142709,ErrorPos,"");
        };
        i = 0;
        while (p <= l) {
          var $tmp4 = Value.charAt(p - 1);
          if (($tmp4 >= "0") && ($tmp4 <= "9")) {
            i = ((i * base) + Value.charCodeAt(p - 1)) - "0".charCodeAt()}
           else if (($tmp4 >= "A") && ($tmp4 <= "Z")) {
            i = (((i * base) + Value.charCodeAt(p - 1)) - "A".charCodeAt()) + 10}
           else if (($tmp4 >= "a") && ($tmp4 <= "z")) i = (((i * base) + Value.charCodeAt(p - 1)) - "a".charCodeAt()) + 10;
          p += 1;
        };
        if (p > l) {
          Result = $mod.TResolverBaseType.btWideChar;
        };
      } else if ($tmp1 === "^") {
        if ((l === 2) && (Value.charCodeAt(1) in rtl.createSet(null,97,122,null,65,90))) Result = $mod.TResolverBaseType.btWideChar;
      };
      if (Result in rtl.createSet($mod.TResolverBaseType.btWideChar)) {
        if (this.FBaseTypes[Result] === null) {
          Result = $mod.TResolverBaseType.btChar;
        };
        if (Result === this.FBaseTypeChar) Result = $mod.TResolverBaseType.btChar;
      };
      return Result;
    };
    this.CheckForIn = function (Loop, VarResolved, InResolved) {
      var Result = false;
      Result = false;
      if (Loop === null) ;
      if (VarResolved.BaseType === $mod.TResolverBaseType.btCustom) ;
      if (InResolved.BaseType === $mod.TResolverBaseType.btCustom) ;
      return Result;
    };
    this.CheckForInClass = function (Loop, VarResolved, InResolved) {
      var Result = false;
      var TypeEl = null;
      var aClass = null;
      var ClassScope = null;
      var Getter = null;
      var MoveNext = null;
      var Current = null;
      var GetterFunc = null;
      var MoveNextFunc = null;
      var ptm = 0;
      var ResultResolved = new $mod.TPasResolverResult();
      var MoveNextResolved = new $mod.TPasResolverResult();
      var CurrentResolved = new $mod.TPasResolverResult();
      var CurrentProp = null;
      var ForScope = null;
      Result = false;
      TypeEl = InResolved.LoTypeEl;
      if (pas.PasTree.TPasClassType.isPrototypeOf(TypeEl)) {
        if (!($mod.TPasResolverResultFlag.rrfReadable in InResolved.Flags)) this.RaiseMsg(20171221195421,3074,rtl.getResStr(pas.PasResolveEval,"sCannotFindEnumeratorForType"),[this.GetBaseDescription(InResolved,false)],Loop.StartExpr);
        aClass = TypeEl;
        ClassScope = this.PushClassDotScope({get: function () {
            return aClass;
          }, set: function (v) {
            aClass = v;
          }});
        Getter = ClassScope.FindIdentifier("GetEnumerator");
        this.PopScope();
        if (Getter === null) this.RaiseIdentifierNotFound(20171221191511,"GetEnumerator",Loop.StartExpr);
        if (Getter.FElement.$class.ClassType() !== pas.PasTree.TPasFunction) this.RaiseContextXExpectedButYFound(20171221191638,"GetEnumerator","function",$mod.GetElementTypeName(Getter.FElement),Loop.StartExpr);
        GetterFunc = Getter.FElement;
        if (!(GetterFunc.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPublic,pas.PasTree.TPasMemberVisibility.visPublished))) this.RaiseContextXExpectedButYFound(20171221191824,"function GetEnumerator","public",pas.PasTree.VisibilityNames[GetterFunc.Visibility],Loop.StartExpr);
        if (GetterFunc.GetFT().Args.FCount > 0) this.RaiseContextXExpectedButYFound(20171221191944,"function GetEnumerator","no arguments",pas.SysUtils.IntToStr(GetterFunc.ProcType.Args.FCount),Loop.StartExpr);
        for (var $l1 in GetterFunc.ProcType.Modifiers) {
          ptm = +$l1;
          if (!(ptm in rtl.createSet(pas.PasTree.TProcTypeModifier.ptmOfObject))) this.RaiseContextXInvalidY(20171221193455,"function GetEnumerator","modifier " + pas.PasTree.ProcTypeModifiers[ptm],Loop.StartExpr);
        };
        this.ComputeElement(GetterFunc.GetFT().ResultEl,{get: function () {
            return ResultResolved;
          }, set: function (v) {
            ResultResolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
        if (ResultResolved.BaseType !== $mod.TResolverBaseType.btContext) this.RaiseContextXExpectedButYFound(20171221193749,"function GetEnumerator","result class",this.GetTypeDescription$1(ResultResolved,false),Loop.StartExpr);
        TypeEl = ResultResolved.LoTypeEl;
        if (!pas.PasTree.TPasClassType.isPrototypeOf(TypeEl)) this.RaiseContextXExpectedButYFound(20171221193749,"function GetEnumerator","result class",this.GetTypeDescription(ResultResolved.LoTypeEl,false),Loop.StartExpr);
        if (!($mod.TPasResolverResultFlag.rrfReadable in ResultResolved.Flags)) this.RaiseContextXExpectedButYFound(20171221195506,"function GetEnumerator","result class instance",this.GetTypeDescription(ResultResolved.LoTypeEl,false),Loop.StartExpr);
        aClass = TypeEl;
        ClassScope = this.PushClassDotScope({get: function () {
            return aClass;
          }, set: function (v) {
            aClass = v;
          }});
        MoveNext = ClassScope.FindIdentifier("MoveNext");
        if (MoveNext === null) this.RaiseIdentifierNotFound(20171221195632,"MoveNext",Loop.StartExpr);
        if (MoveNext.FElement.$class.ClassType() !== pas.PasTree.TPasFunction) this.RaiseContextXExpectedButYFound(20171221195651,"MoveNext","function",$mod.GetElementTypeName(MoveNext.FElement),Loop.StartExpr);
        MoveNextFunc = MoveNext.FElement;
        if (!(MoveNextFunc.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPublic,pas.PasTree.TPasMemberVisibility.visPublished))) this.RaiseContextXExpectedButYFound(20171221195712,"function MoveNext","public",pas.PasTree.VisibilityNames[MoveNextFunc.Visibility],Loop.StartExpr);
        if (MoveNextFunc.GetFT().Args.FCount > 0) this.RaiseContextXExpectedButYFound(20171221195723,"function MoveNext","no arguments",pas.SysUtils.IntToStr(MoveNextFunc.ProcType.Args.FCount),Loop.StartExpr);
        for (var $l2 in MoveNextFunc.ProcType.Modifiers) {
          ptm = +$l2;
          if (!(ptm in rtl.createSet(pas.PasTree.TProcTypeModifier.ptmOfObject))) this.RaiseContextXInvalidY(20171221195732,"function MoveNext","modifier " + pas.PasTree.ProcTypeModifiers[ptm],Loop.StartExpr);
        };
        this.ComputeElement(MoveNextFunc.GetFT().ResultEl,{get: function () {
            return MoveNextResolved;
          }, set: function (v) {
            MoveNextResolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
        if (!(MoveNextResolved.BaseType in $mod.btAllBooleans)) this.RaiseContextXExpectedButYFound(20171221200337,"function MoveNext","result boolean",this.GetTypeDescription$1(MoveNextResolved,false),Loop.StartExpr);
        Current = ClassScope.FindIdentifier("Current");
        if (Current === null) this.RaiseIdentifierNotFound(20171221200433,"Current",Loop.StartExpr);
        if (Current.FElement.$class.ClassType() !== pas.PasTree.TPasProperty) this.RaiseContextXExpectedButYFound(20171221200508,"Current","property",$mod.GetElementTypeName(Current.FElement),Loop.StartExpr);
        CurrentProp = Current.FElement;
        if (!(CurrentProp.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPublic,pas.PasTree.TPasMemberVisibility.visPublished))) this.RaiseContextXExpectedButYFound(20171221200546,"property Current","public",pas.PasTree.VisibilityNames[CurrentProp.Visibility],Loop.StartExpr);
        if (CurrentProp.FArgs.FCount > 0) this.RaiseContextXExpectedButYFound(20171221200638,"property Current","no arguments",pas.SysUtils.IntToStr(CurrentProp.FArgs.FCount),Loop.StartExpr);
        if (this.GetPasPropertyGetter(CurrentProp) === null) this.RaiseContextXInvalidY(20171221200823,"property Current","read accessor",Loop.StartExpr);
        this.ComputeElement(CurrentProp,{get: function () {
            return CurrentResolved;
          }, set: function (v) {
            CurrentResolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
        if (this.CheckAssignResCompatibility(VarResolved,CurrentResolved,Loop.VariableName,false) === 2147483647) this.RaiseIncompatibleTypeRes(20171221200018,3028,[],VarResolved,CurrentResolved,Loop.VariableName);
        this.PopScope();
        ForScope = rtl.as(Loop.FData,$mod.TPasForLoopScope);
        ForScope.GetEnumerator = GetterFunc;
        ForScope.MoveNext = MoveNextFunc;
        ForScope.Current = CurrentProp;
        return true;
      };
      this.RaiseMsg(20171221192929,3074,rtl.getResStr(pas.PasResolveEval,"sCannotFindEnumeratorForType"),[this.GetBaseDescription(InResolved,false)],Loop.StartExpr);
      return Result;
    };
    this.CheckBuiltInMinParamCount = function (Proc, Expr, MinCount, RaiseOnError) {
      var Result = false;
      if (!pas.PasTree.TParamsExpr.isPrototypeOf(Expr) || (rtl.length(Expr.Params) < MinCount)) {
        if (RaiseOnError) this.RaiseMsg(20170216152248,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[Proc.Signature],Expr);
        return false;
      };
      Result = true;
      return Result;
    };
    this.CheckBuiltInMaxParamCount = function (Proc, Params, MaxCount, RaiseOnError) {
      var Result = 0;
      if (rtl.length(Params.Params) > MaxCount) {
        if (RaiseOnError) this.RaiseMsg(20170329154348,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[Proc.Signature],Params.Params[MaxCount]);
        return 2147483647;
      };
      Result = 0;
      return Result;
    };
    this.CheckRaiseTypeArgNo = function (id, ArgNo, Param, ParamResolved, Expected, RaiseOnError) {
      var Result = 0;
      if (RaiseOnError) this.RaiseMsg(id,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[pas.SysUtils.IntToStr(ArgNo),this.GetResolverResultDescription(ParamResolved,true),Expected],Param);
      Result = 2147483647;
      return Result;
    };
    this.FindUsedUnitInSection = function (aName, Section) {
      var Result = null;
      var Clause = [];
      var i = 0;
      var Use = null;
      var ModName = "";
      Result = null;
      if (Section === null) return Result;
      Clause = Section.UsesClause;
      for (var $l1 = 0, $end2 = rtl.length(Clause) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Use = Clause[i];
        if ((Use.Module === null) || !pas.PasTree.TPasModule.isPrototypeOf(Use.Module)) continue;
        ModName = Use.Module.FName;
        if (pas.SysUtils.CompareText(ModName,aName) === 0) return Use.Module;
      };
      return Result;
    };
    this.FindUsedUnit = function (aName, aMod) {
      var Result = null;
      var C = null;
      C = aMod.$class.ClassType();
      if (C.InheritsFrom(pas.PasTree.TPasProgram)) {
        Result = this.FindUsedUnitInSection(aName,aMod.ProgramSection)}
       else if (C.InheritsFrom(pas.PasTree.TPasLibrary)) {
        Result = this.FindUsedUnitInSection(aName,aMod.LibrarySection)}
       else {
        Result = this.FindUsedUnitInSection(aName,aMod.InterfaceSection);
        if (Result !== null) return Result;
        Result = this.FindUsedUnitInSection(aName,aMod.ImplementationSection);
      };
      return Result;
    };
    this.FinishAssertCall = function (Proc, Params) {
      var aMod = null;
      var ModScope = null;
      var aConstructor = null;
      if (Proc === null) ;
      aMod = this.FRootElement;
      ModScope = rtl.as(aMod.FData,$mod.TPasModuleScope);
      if (!($mod.TPasModuleScopeFlag.pmsfAssertSearched in ModScope.Flags)) this.FindAssertExceptionConstructors(Params);
      if (ModScope.FAssertClass === null) return;
      if (rtl.length(Params.Params) > 1) {
        aConstructor = ModScope.FAssertMsgConstructor}
       else aConstructor = ModScope.FAssertDefConstructor;
      if (aConstructor === null) return;
      this.CreateReference(aConstructor,Params,$mod.TResolvedRefAccess.rraRead,null);
    };
    this.FindExceptionConstructor = function (aUnitName, aClassName, aClass, aConstructor, ErrorEl) {
      var Result = false;
      var aMod = null;
      var UtilsMod = null;
      var SectionScope = null;
      var Identifier = null;
      var El = null;
      var ClassScope = null;
      Result = false;
      aClass.set(null);
      aConstructor.set(null);
      aMod = this.FRootElement;
      UtilsMod = this.FindUsedUnit(aUnitName,aMod);
      if (UtilsMod === null) return Result;
      if (UtilsMod.InterfaceSection === null) return Result;
      SectionScope = rtl.as($mod.NoNil(UtilsMod.InterfaceSection.FData),$mod.TPasSectionScope);
      Identifier = SectionScope.FindLocalIdentifier(aClassName);
      if (Identifier === null) return Result;
      El = Identifier.FElement;
      if (!pas.PasTree.TPasClassType.isPrototypeOf(El)) this.RaiseXExpectedButYFound(20180119172517,"class " + aClassName,$mod.GetElementTypeName(El),ErrorEl);
      if (El.ObjKind !== pas.PasTree.TPasObjKind.okClass) this.RaiseXExpectedButYFound(20180321163200,"class " + aClassName,$mod.GetElementTypeName(El),ErrorEl);
      aClass.set(El);
      ClassScope = rtl.as($mod.NoNil(aClass.get().FData),$mod.TPasClassScope);
      do {
        Identifier = ClassScope.FindIdentifier("create");
        while (Identifier !== null) {
          if (Identifier.FElement.$class.ClassType() === pas.PasTree.TPasConstructor) {
            aConstructor.set(Identifier.FElement);
            if (aConstructor.get().ProcType.Args.FCount === 0) return true;
          };
          Identifier = Identifier.NextSameIdentifier;
        };
        ClassScope = ClassScope.AncestorScope;
      } while (!(ClassScope === null));
      aConstructor.set(null);
      return Result;
    };
    this.FindAssertExceptionConstructors = function (ErrorEl) {
      var aMod = null;
      var ModScope = null;
      var Identifier = null;
      var aClass = null;
      var ClassScope = null;
      var aConstructor = null;
      var Arg = null;
      var ArgResolved = new $mod.TPasResolverResult();
      aMod = this.FRootElement;
      ModScope = rtl.as(aMod.FData,$mod.TPasModuleScope);
      if ($mod.TPasModuleScopeFlag.pmsfAssertSearched in ModScope.Flags) return;
      ModScope.Flags = rtl.includeSet(ModScope.Flags,$mod.TPasModuleScopeFlag.pmsfAssertSearched);
      this.FindExceptionConstructor("sysutils","EAssertionFailed",{get: function () {
          return aClass;
        }, set: function (v) {
          aClass = v;
        }},{get: function () {
          return aConstructor;
        }, set: function (v) {
          aConstructor = v;
        }},ErrorEl);
      if (aClass === null) return;
      ClassScope = rtl.as($mod.NoNil(aClass.FData),$mod.TPasClassScope);
      ModScope.SetAssertClass(aClass);
      do {
        Identifier = ClassScope.FindIdentifier("create");
        while (Identifier !== null) {
          if (Identifier.FElement.$class.ClassType() === pas.PasTree.TPasConstructor) {
            aConstructor = Identifier.FElement;
            if (aConstructor.ProcType.Args.FCount === 0) {
              if (ModScope.FAssertDefConstructor === null) ModScope.SetAssertDefConstructor(aConstructor);
            } else if (aConstructor.ProcType.Args.FCount === 1) {
              if (ModScope.FAssertMsgConstructor === null) {
                Arg = rtl.getObject(aConstructor.ProcType.Args.Get(0));
                this.ComputeElement(Arg.ArgType,{get: function () {
                    return ArgResolved;
                  }, set: function (v) {
                    ArgResolved = v;
                  }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
                if (ArgResolved.BaseType in $mod.btAllStrings) ModScope.SetAssertMsgConstructor(aConstructor);
              };
            };
          };
          Identifier = Identifier.NextSameIdentifier;
        };
        ClassScope = ClassScope.AncestorScope;
      } while (!(ClassScope === null));
    };
    this.FindRangeErrorConstructors = function (ErrorEl) {
      var aMod = null;
      var ModScope = null;
      var aClass = null;
      var aConstructor = null;
      aMod = this.FRootElement;
      ModScope = rtl.as(aMod.FData,$mod.TPasModuleScope);
      if ($mod.TPasModuleScopeFlag.pmsfRangeErrorSearched in ModScope.Flags) return;
      ModScope.Flags = rtl.includeSet(ModScope.Flags,$mod.TPasModuleScopeFlag.pmsfRangeErrorSearched);
      this.FindExceptionConstructor("sysutils","ERangeError",{get: function () {
          return aClass;
        }, set: function (v) {
          aClass = v;
        }},{get: function () {
          return aConstructor;
        }, set: function (v) {
          aConstructor = v;
        }},ErrorEl);
      ModScope.SetRangeErrorClass(aClass);
      ModScope.SetRangeErrorConstructor(aConstructor);
    };
    this.OnExprEvalLog = function (Sender, id, MsgType, MsgNumber, Fmt, Args, PosEl) {
      if (MsgType <= pas.PScanner.TMessageType.mtError) {
        this.RaiseMsg(id,MsgNumber,Fmt,Args,PosEl)}
       else this.LogMsg(id,MsgType,MsgNumber,Fmt,Args,PosEl);
      if (Sender === null) ;
    };
    this.OnExprEvalIdentifier = function (Sender, Expr, Flags) {
      var Result = null;
      var Ref = null;
      var Decl = null;
      var C = null;
      var ResolvedType = new $mod.TPasResolverResult();
      var EnumValue = null;
      var EnumType = null;
      var EvalFlags = {};
      Result = null;
      if (!$mod.TResolvedReference.isPrototypeOf(Expr.FData)) this.RaiseNotYetImplemented(20170518203134,Expr,"");
      Ref = Expr.FData;
      Decl = Ref.FDeclaration;
      C = Decl.$class.ClassType();
      if (C === pas.PasTree.TPasConst) {
        if ((Decl.Expr !== null) && (Decl.IsConst || (Decl.VarType === null))) {
          if (Decl.VarType !== null) {
            this.ComputeElement(Decl.VarType,{get: function () {
                return ResolvedType;
              }, set: function (v) {
                ResolvedType = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
          } else ResolvedType.BaseType = $mod.TResolverBaseType.btNone;
          EvalFlags = rtl.refSet(Flags);
          if (!(pas.PasResolveEval.TResEvalFlag.refConstExt in EvalFlags)) EvalFlags = rtl.includeSet(EvalFlags,pas.PasResolveEval.TResEvalFlag.refConst);
          Result = this.fExprEvaluator.Eval(Decl.Expr,rtl.refSet(EvalFlags));
          if (Result !== null) {
            if ((Result.FElement !== null) && (Result.FElement !== Decl.Expr)) Result = Result.Clone();
            Result.IdentEl = Decl;
            if (Decl.VarType !== null) {
              if (Result.Kind === pas.PasResolveEval.TREVKind.revkInt) {
                var $tmp1 = ResolvedType.BaseType;
                if ($tmp1 === $mod.TResolverBaseType.btByte) {
                  Result.Typed = pas.PasResolveEval.TResEvalTypedInt.reitByte}
                 else if ($tmp1 === $mod.TResolverBaseType.btShortInt) {
                  Result.Typed = pas.PasResolveEval.TResEvalTypedInt.reitShortInt}
                 else if ($tmp1 === $mod.TResolverBaseType.btWord) {
                  Result.Typed = pas.PasResolveEval.TResEvalTypedInt.reitWord}
                 else if ($tmp1 === $mod.TResolverBaseType.btSmallInt) {
                  Result.Typed = pas.PasResolveEval.TResEvalTypedInt.reitSmallInt}
                 else if ($tmp1 === $mod.TResolverBaseType.btUIntSingle) {
                  Result.Typed = pas.PasResolveEval.TResEvalTypedInt.reitUIntSingle}
                 else if ($tmp1 === $mod.TResolverBaseType.btIntSingle) {
                  Result.Typed = pas.PasResolveEval.TResEvalTypedInt.reitIntSingle}
                 else if ($tmp1 === $mod.TResolverBaseType.btLongWord) {
                  Result.Typed = pas.PasResolveEval.TResEvalTypedInt.reitLongWord}
                 else if ($tmp1 === $mod.TResolverBaseType.btLongint) {
                  Result.Typed = pas.PasResolveEval.TResEvalTypedInt.reitLongInt}
                 else if ($tmp1 === $mod.TResolverBaseType.btUIntDouble) {
                  Result.Typed = pas.PasResolveEval.TResEvalTypedInt.reitUIntDouble}
                 else if ($tmp1 === $mod.TResolverBaseType.btIntDouble) {
                  Result.Typed = pas.PasResolveEval.TResEvalTypedInt.reitNone}
                 else {
                  pas.PasResolveEval.ReleaseEvalValue({get: function () {
                      return Result;
                    }, set: function (v) {
                      Result = v;
                    }});
                  this.RaiseNotYetImplemented(20170624181050,Decl.VarType,"");
                };
              };
            };
            return Result;
          };
        } else if (pas.PasTree.TVariableModifier.vmExternal in Decl.VarModifiers) {
          Result = pas.PasResolveEval.TResEvalExternal.$create("Create$1");
          Result.IdentEl = Decl;
          return Result;
        };
        if (pas.PasResolveEval.TResEvalFlag.refConst in Flags) {
          pas.PasResolveEval.ReleaseEvalValue({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }});
          this.RaiseConstantExprExp(20170518214928,Expr);
        };
      } else if (C === pas.PasTree.TPasEnumValue) {
        EnumValue = Decl;
        EnumType = rtl.as(EnumValue.FParent,pas.PasTree.TPasEnumType);
        Result = pas.PasResolveEval.TResEvalEnum.$create("CreateValue",[EnumType.Values.IndexOf(EnumValue),EnumValue]);
        return Result;
      } else if (C.InheritsFrom(pas.PasTree.TPasType)) Result = this.EvalTypeRange(Decl,rtl.refSet(Flags));
      if ((Result === null) && rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst,pas.PasResolveEval.TResEvalFlag.refConstExt),Flags),{})) this.RaiseConstantExprExp(20170518213616,Expr);
      return Result;
    };
    this.OnExprEvalParams = function (Sender, Params, Flags) {
      var Result = null;
      var Ref = null;
      var Decl = null;
      var C = null;
      var BuiltInProc = null;
      var bt = 0;
      var ResolvedEl = new $mod.TPasResolverResult();
      var TypeEl = null;
      Result = null;
      var $tmp1 = Params.Kind;
      if ($tmp1 === pas.PasTree.TPasExprKind.pekArrayParams) {}
      else if ($tmp1 === pas.PasTree.TPasExprKind.pekFuncParams) {
        if ($mod.TResolvedReference.isPrototypeOf(Params.Value.FData)) {
          Ref = Params.Value.FData;
          Decl = Ref.FDeclaration;
          if (pas.PasTree.TPasType.isPrototypeOf(Decl)) Decl = this.ResolveAliasType(Decl);
          C = Decl.$class.ClassType();
          if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
            if ($mod.TResElDataBuiltInProc.isPrototypeOf(Decl.FData)) {
              BuiltInProc = Decl.FData;
              var $tmp2 = BuiltInProc.BuiltIn;
              if ($tmp2 === $mod.TResolverBuiltInProc.bfLength) {
                this.BI_Length_OnEval(BuiltInProc,Params,rtl.refSet(Flags),{get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }})}
               else if ($tmp2 === $mod.TResolverBuiltInProc.bfAssigned) {
                Result = null}
               else if ($tmp2 === $mod.TResolverBuiltInProc.bfChr) {
                this.BI_Chr_OnEval(BuiltInProc,Params,rtl.refSet(Flags),{get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }})}
               else if ($tmp2 === $mod.TResolverBuiltInProc.bfOrd) {
                this.BI_Ord_OnEval(BuiltInProc,Params,rtl.refSet(Flags),{get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }})}
               else if (($tmp2 === $mod.TResolverBuiltInProc.bfLow) || ($tmp2 === $mod.TResolverBuiltInProc.bfHigh)) {
                this.BI_LowHigh_OnEval(BuiltInProc,Params,rtl.refSet(Flags),{get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }})}
               else if (($tmp2 === $mod.TResolverBuiltInProc.bfPred) || ($tmp2 === $mod.TResolverBuiltInProc.bfSucc)) {
                this.BI_PredSucc_OnEval(BuiltInProc,Params,rtl.refSet(Flags),{get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }})}
               else if ($tmp2 === $mod.TResolverBuiltInProc.bfStrFunc) {
                this.BI_StrFunc_OnEval(BuiltInProc,Params,rtl.refSet(Flags),{get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }})}
               else if ($tmp2 === $mod.TResolverBuiltInProc.bfConcatArray) {
                Result = null}
               else if ($tmp2 === $mod.TResolverBuiltInProc.bfCopyArray) {
                Result = null}
               else if ($tmp2 === $mod.TResolverBuiltInProc.bfTypeInfo) {
                Result = null}
               else if ($tmp2 === $mod.TResolverBuiltInProc.bfDefault) {
                this.BI_Default_OnEval(BuiltInProc,Params,rtl.refSet(Flags),{get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }})}
               else {
                this.RaiseNotYetImplemented(20170624192324,Params,"");
              };
              return Result;
            } else if ($mod.TResElDataBaseType.isPrototypeOf(Decl.FData)) {
              bt = Decl.FData.BaseType;
              Result = this.EvalBaseTypeCast(Params,bt);
            };
          } else if (C === pas.PasTree.TPasEnumType) {
            Result = this.fExprEvaluator.EnumTypeCast(Decl,Params.Params[0],rtl.refSet(Flags));
          } else if (C === pas.PasTree.TPasRangeType) {
            this.ComputeElement(Decl.RangeExpr.left,{get: function () {
                return ResolvedEl;
              }, set: function (v) {
                ResolvedEl = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
            if (ResolvedEl.BaseType === $mod.TResolverBaseType.btContext) {
              TypeEl = ResolvedEl.LoTypeEl;
              if (TypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
                Result = this.fExprEvaluator.EnumTypeCast(TypeEl,Params.Params[0],rtl.refSet(Flags));
              } else this.RaiseNotYetImplemented(20171009223403,Params,"");
            } else this.RaiseNotYetImplemented(20171009223303,Params,"");
          };
        }}
       else if ($tmp1 === pas.PasTree.TPasExprKind.pekSet) ;
      if (rtl.eqSet(Flags,{})) ;
      return Result;
    };
    this.OnRangeCheckEl = function (Sender, El, MsgType) {
      if (El === null) return;
      if ((MsgType.get() === pas.PScanner.TMessageType.mtWarning) && (pas.PScanner.TBoolSwitch.bsRangeChecks in this.FCurrentParser.FScanner.FCurrentBoolSwitches)) MsgType.set(pas.PScanner.TMessageType.mtError);
    };
    this.EvalBaseTypeCast = function (Params, bt) {
      var Self = this;
      var Result = null;
      function TCFloatToInt(Value, Flo) {
        var Int = 0;
        var MinIntVal = 0;
        var MaxIntVal = 0;
        if (bt in $mod.btAllIntegerNoQWord) {
          Self.GetIntegerRange(bt,{get: function () {
              return MinIntVal;
            }, set: function (v) {
              MinIntVal = v;
            }},{get: function () {
              return MaxIntVal;
            }, set: function (v) {
              MaxIntVal = v;
            }});
          if ((Flo < MinIntVal) || (Flo > MaxIntVal)) Self.fExprEvaluator.EmitRangeCheckConst$1(20170711001228,Value.AsString(),MinIntVal,MaxIntVal,Params,pas.PScanner.TMessageType.mtError);
          try {
            Int = Math.round(Flo);
          } catch ($e) {
            Self.RaiseMsg(20170711002218,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],Params);
          };
          var $tmp1 = bt;
          if ($tmp1 === $mod.TResolverBaseType.btByte) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitByte])}
           else if ($tmp1 === $mod.TResolverBaseType.btShortInt) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitShortInt])}
           else if ($tmp1 === $mod.TResolverBaseType.btWord) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitWord])}
           else if ($tmp1 === $mod.TResolverBaseType.btSmallInt) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitSmallInt])}
           else if ($tmp1 === $mod.TResolverBaseType.btUIntSingle) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitUIntSingle])}
           else if ($tmp1 === $mod.TResolverBaseType.btIntSingle) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitIntSingle])}
           else if ($tmp1 === $mod.TResolverBaseType.btLongWord) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitLongWord])}
           else if ($tmp1 === $mod.TResolverBaseType.btLongint) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitLongInt])}
           else if ($tmp1 === $mod.TResolverBaseType.btUIntDouble) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitUIntDouble])}
           else if ($tmp1 === $mod.TResolverBaseType.btIntDouble) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue",[Int])}
           else {
            Self.RaiseNotYetImplemented(20170711001513,Params,"");
          };
          return;
        } else if (bt === $mod.TResolverBaseType.btSingle) {
          try {
            Result = pas.PasResolveEval.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            Self.RaiseMsg(20170711002315,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],Params);
          };
        } else if (bt === $mod.TResolverBaseType.btDouble) {
          try {
            Result = pas.PasResolveEval.TResEvalFloat.$create("CreateValue",[Flo]);
          } catch ($e) {
            Self.RaiseMsg(20170711002327,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],Params);
          };
        } else if (bt === $mod.TResolverBaseType.btCurrency) {
          try {
            Result = pas.PasResolveEval.TResEvalCurrency.$create("CreateValue",[Flo * 10000]);
          } catch ($e) {
            Self.RaiseMsg(20180421171840,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],Params);
          };
        } else {
          Self.RaiseNotYetImplemented(20170711002542,Params,"");
        };
      };
      var Value = null;
      var Int = 0;
      var MinIntVal = 0;
      var MaxIntVal = 0;
      var Flo = 0.0;
      var w = "";
      Result = null;
      Value = Self.Eval(Params.Params[0],rtl.createSet(pas.PasResolveEval.TResEvalFlag.refAutoConstExt),true);
      if (Value === null) return Result;
      try {
        var $tmp1 = Value.Kind;
        if ($tmp1 === pas.PasResolveEval.TREVKind.revkInt) {
          Int = Value.Int;
          if (bt in $mod.btAllIntegerNoQWord) {
            Self.GetIntegerRange(bt,{get: function () {
                return MinIntVal;
              }, set: function (v) {
                MinIntVal = v;
              }},{get: function () {
                return MaxIntVal;
              }, set: function (v) {
                MaxIntVal = v;
              }});
            if ((Int < MinIntVal) || (Int > MaxIntVal)) {
              var $tmp2 = bt;
              if ($tmp2 === $mod.TResolverBaseType.btByte) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int & 255,pas.PasResolveEval.TResEvalTypedInt.reitByte])}
               else if ($tmp2 === $mod.TResolverBaseType.btShortInt) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[((Int & 255) << 24) >> 24,pas.PasResolveEval.TResEvalTypedInt.reitShortInt])}
               else if ($tmp2 === $mod.TResolverBaseType.btWord) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int & 65535,pas.PasResolveEval.TResEvalTypedInt.reitWord])}
               else if ($tmp2 === $mod.TResolverBaseType.btSmallInt) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[((Int & 65535) << 16) >> 16,pas.PasResolveEval.TResEvalTypedInt.reitSmallInt])}
               else if ($tmp2 === $mod.TResolverBaseType.btLongWord) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int >>> 0,pas.PasResolveEval.TResEvalTypedInt.reitLongWord])}
               else if ($tmp2 === $mod.TResolverBaseType.btLongint) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int & 0xFFFFFFFF,pas.PasResolveEval.TResEvalTypedInt.reitLongInt])}
               else if (((($tmp2 === $mod.TResolverBaseType.btUIntSingle) || ($tmp2 === $mod.TResolverBaseType.btIntSingle)) || ($tmp2 === $mod.TResolverBaseType.btUIntDouble)) || ($tmp2 === $mod.TResolverBaseType.btIntDouble)) {
                Self.fExprEvaluator.EmitRangeCheckConst$1(20170624194534,Value.AsString(),MinIntVal,MaxIntVal,Params,pas.PScanner.TMessageType.mtError)}
               else {
                Self.RaiseNotYetImplemented(20170624200109,Params,"");
              };
            } else {
              var $tmp3 = bt;
              if ($tmp3 === $mod.TResolverBaseType.btByte) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitByte])}
               else if ($tmp3 === $mod.TResolverBaseType.btShortInt) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitShortInt])}
               else if ($tmp3 === $mod.TResolverBaseType.btWord) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitWord])}
               else if ($tmp3 === $mod.TResolverBaseType.btSmallInt) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitSmallInt])}
               else if ($tmp3 === $mod.TResolverBaseType.btUIntSingle) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitUIntSingle])}
               else if ($tmp3 === $mod.TResolverBaseType.btIntSingle) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitIntSingle])}
               else if ($tmp3 === $mod.TResolverBaseType.btLongWord) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitLongWord])}
               else if ($tmp3 === $mod.TResolverBaseType.btLongint) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitLongInt])}
               else if ($tmp3 === $mod.TResolverBaseType.btUIntDouble) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue$1",[Int,pas.PasResolveEval.TResEvalTypedInt.reitUIntDouble])}
               else if ($tmp3 === $mod.TResolverBaseType.btIntDouble) {
                Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue",[Int])}
               else {
                Self.RaiseNotYetImplemented(20170624200109,Params,"");
              };
            };
            return Result;
          } else if (bt in $mod.btAllBooleans) {
            var $tmp4 = Int;
            if ($tmp4 === 0) {
              Result = pas.PasResolveEval.TResEvalBool.$create("CreateValue",[false])}
             else if ($tmp4 === 1) {
              Result = pas.PasResolveEval.TResEvalBool.$create("CreateValue",[true])}
             else {
              Self.fExprEvaluator.EmitRangeCheckConst$1(20170710203254,Value.AsString(),0,1,Params,pas.PScanner.TMessageType.mtError);
            };
          } else if ((bt === $mod.TResolverBaseType.btWideChar) || ((bt === $mod.TResolverBaseType.btChar) && (Self.FBaseTypeChar === $mod.TResolverBaseType.btWideChar))) {
            try {
              w = String.fromCharCode(Int);
              Result = pas.PasResolveEval.TResEvalUTF16.$create("CreateValue",[w]);
            } catch ($e) {
              Self.RaiseMsg(20180125112716,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],Params);
            }}
           else if (bt === $mod.TResolverBaseType.btSingle) {
            try {
              Result = pas.PasResolveEval.TResEvalFloat.$create("CreateValue",[Int]);
            } catch ($e) {
              Self.RaiseMsg(20170711002015,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],Params);
            }}
           else if (bt === $mod.TResolverBaseType.btDouble) {
            try {
              Result = pas.PasResolveEval.TResEvalFloat.$create("CreateValue",[Int]);
            } catch ($e) {
              Self.RaiseMsg(20170711002016,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],Params);
            }}
           else if (bt === $mod.TResolverBaseType.btCurrency) {
            try {
              Result = pas.PasResolveEval.TResEvalCurrency.$create("CreateValue",[Int * 10000]);
            } catch ($e) {
              Self.RaiseMsg(20180422093631,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],Params);
            }}
           else {
            Self.RaiseNotYetImplemented(20170624194308,Params,"");
          };
        } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkFloat) {
          Flo = Value.FloatValue;
          TCFloatToInt(Value,Flo);
        } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkCurrency) {
          if (bt === $mod.TResolverBaseType.btCurrency) {
            Result = Value;
            Value = null;
          } else {
            Flo = Value.Value / 10000;
            TCFloatToInt(Value,Flo);
          };
        } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
          if (Value.S.length === 1) {
            w = Value.S.charAt(0);
            if ((bt === $mod.TResolverBaseType.btWideChar) || ((bt === $mod.TResolverBaseType.btChar) && (Self.FBaseTypeChar === $mod.TResolverBaseType.btWideChar))) {
              Result = Value;
              Value = null;
            };
          }}
         else if ($tmp1 === pas.PasResolveEval.TREVKind.revkExternal) {
          return Result}
         else {
          Self.RaiseNotYetImplemented(20170624193436,Params,"");
        };
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
      };
      return Result;
    };
    this.CheckAssignCompatibilityCustom = function (LHS, RHS, ErrorEl, RaiseOnIncompatible, Handled) {
      var Result = 0;
      Result = 2147483647;
      if (LHS.BaseType === $mod.TResolverBaseType.btNone) ;
      if (RHS.BaseType === $mod.TResolverBaseType.btNone) ;
      if (ErrorEl === null) ;
      if (RaiseOnIncompatible) ;
      if (Handled.get()) ;
      return Result;
    };
    this.CheckEqualCompatibilityCustomType = function (LHS, RHS, ErrorEl, RaiseOnIncompatible) {
      var Result = 0;
      Result = 2147483647;
      if (LHS.BaseType === RHS.BaseType) ;
      if (ErrorEl === null) ;
      if (RaiseOnIncompatible) ;
      return Result;
    };
    this.BI_Length_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var Ranges = [];
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      Result = 2147483647;
      if (ParamResolved.BaseType in $mod.btAllStringAndChars) {
        if ($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) Result = 0;
      } else if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
        if (ParamResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
          Ranges = ParamResolved.LoTypeEl.Ranges;
          if (rtl.length(Ranges) === 0) {
            if ($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) Result = 0;
          } else Result = 0;
        };
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170329160335,1,Param,ParamResolved,"string or dynamic array",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_Length_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      if (Params === null) ;
      $mod.SetResolverIdentifier(ResolvedEl,this.FBaseTypeLength,Proc.Proc,this.FBaseTypes[this.FBaseTypeLength],this.FBaseTypes[this.FBaseTypeLength],rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
    };
    this.BI_Length_OnEval = function (Proc, Params, Flags, Evaluated) {
      var Param = null;
      var Expr = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var Value = null;
      var Ranges = [];
      var IdentEl = null;
      Evaluated.set(null);
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (ParamResolved.BaseType in $mod.btAllStringAndChars) {
        if ($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) {
          Value = this.Eval(Param,rtl.refSet(Flags),true);
          if (Value === null) return;
          var $tmp1 = Value.Kind;
          if ($tmp1 === pas.PasResolveEval.TREVKind.revkUnicodeString) Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[Value.S.length]));
          pas.PasResolveEval.ReleaseEvalValue({get: function () {
              return Value;
            }, set: function (v) {
              Value = v;
            }});
        };
      } else if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
        if (ParamResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
          Ranges = ParamResolved.LoTypeEl.Ranges;
          if (rtl.length(Ranges) === 0) {
            IdentEl = ParamResolved.IdentEl;
            if (pas.PasTree.TPasVariable.isPrototypeOf(IdentEl) && pas.PasTree.TPasExpr.isPrototypeOf(IdentEl.Expr)) {
              Expr = IdentEl.Expr;
              if (pas.PasTree.TArrayValues.isPrototypeOf(Expr)) {
                Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[rtl.length(Expr.Values)]))}
               else if (pas.PasTree.TParamsExpr.isPrototypeOf(Expr) && (Expr.Kind === pas.PasTree.TPasExprKind.pekSet)) Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[rtl.length(Expr.Params)]));
            };
          } else {
            Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[this.GetRangeLength(Ranges[0])]));
          };
        };
      };
      if (Proc === null) ;
    };
    this.BI_SetLength_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var DimResolved = new $mod.TPasResolverResult();
      var ArgNo = 0;
      var DynArr = null;
      var ElType = null;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,2,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      Result = 2147483647;
      DynArr = null;
      if (this.ResolvedElCanBeVarParam(ParamResolved,Expr,true)) {
        if (ParamResolved.BaseType in $mod.btAllStrings) {
          Result = 0}
         else if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
          if (this.IsDynArray(ParamResolved.LoTypeEl,true)) {
            Result = 0;
            DynArr = rtl.as($mod.NoNil(ParamResolved.LoTypeEl),pas.PasTree.TPasArrayType);
          };
        };
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170216152250,1,Param,ParamResolved,"string or dynamic array variable",RaiseOnError);
      ArgNo = 2;
      do {
        Param = Params.Params[ArgNo - 1];
        this.ComputeElement(Param,{get: function () {
            return DimResolved;
          }, set: function (v) {
            DimResolved = v;
          }},{},null);
        Result = 2147483647;
        if (($mod.TPasResolverResultFlag.rrfReadable in DimResolved.Flags) && (DimResolved.BaseType in $mod.btAllInteger)) Result = 0;
        if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170329160338,ArgNo,Param,DimResolved,"integer",RaiseOnError);
        if ((DynArr === null) || (ArgNo === rtl.length(Params.Params))) break;
        ElType = this.ResolveAliasType(DynArr.ElType);
        if (!this.IsDynArray(ElType,true)) break;
        DynArr = rtl.as($mod.NoNil(ElType),pas.PasTree.TPasArrayType);
        ArgNo += 1;
      } while (!false);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,ArgNo,RaiseOnError);
      return Result;
    };
    this.BI_SetLength_OnFinishParamsExpr = function (Proc, Params) {
      var P = [];
      if (Proc === null) ;
      P = Params.Params;
      if (rtl.length(P) === 0) ;
      this.FinishCallArgAccess(P[0],$mod.TResolvedRefAccess.rraVarParam);
      this.FinishCallArgAccess(P[1],$mod.TResolvedRefAccess.rraRead);
    };
    this.BI_InExclude_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var EnumType = null;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,2,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      EnumType = null;
      if (rtl.eqSet(rtl.intersectSet(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable),ParamResolved.Flags),rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable)) && ((pas.PasTree.TPasVariable.isPrototypeOf(ParamResolved.IdentEl) || pas.PasTree.TPasArgument.isPrototypeOf(ParamResolved.IdentEl)) || pas.PasTree.TPasResultElement.isPrototypeOf(ParamResolved.IdentEl))) {
        if ((ParamResolved.BaseType === $mod.TResolverBaseType.btSet) && pas.PasTree.TPasEnumType.isPrototypeOf(ParamResolved.LoTypeEl)) EnumType = ParamResolved.LoTypeEl;
      };
      if (EnumType === null) {
        return this.CheckRaiseTypeArgNo(20170216152301,1,Param,ParamResolved,"variable of set of enumtype",RaiseOnError);
      };
      Param = Params.Params[1];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) || (ParamResolved.LoTypeEl !== EnumType)) {
        if (RaiseOnError) this.RaiseIncompatibleType(20170216152302,3006,["2"],ParamResolved.LoTypeEl,EnumType,Param);
        return 2147483647;
      };
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,2,RaiseOnError);
      return Result;
    };
    this.BI_InExclude_OnFinishParamsExpr = function (Proc, Params) {
      var P = [];
      if (Proc === null) ;
      P = Params.Params;
      if (rtl.length(P) === 0) ;
      this.FinishCallArgAccess(P[0],$mod.TResolvedRefAccess.rraVarParam);
      this.FinishCallArgAccess(P[1],$mod.TResolvedRefAccess.rraRead);
    };
    this.BI_Break_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      if (this.GetLoop(Expr) === null) this.RaiseMsg(20170216152306,3046,rtl.getResStr(pas.PasResolveEval,"sMustBeInsideALoop"),["Break"],Expr);
      if (!pas.PasTree.TParamsExpr.isPrototypeOf(Expr) || (rtl.length(Expr.Params) === 0)) return 0;
      Params = Expr;
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,0,RaiseOnError);
      return Result;
    };
    this.BI_Continue_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      if (this.GetLoop(Expr) === null) this.RaiseMsg(20170216152309,3046,rtl.getResStr(pas.PasResolveEval,"sMustBeInsideALoop"),["Continue"],Expr);
      if (!pas.PasTree.TParamsExpr.isPrototypeOf(Expr) || (rtl.length(Expr.Params) === 0)) return 0;
      Params = Expr;
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,0,RaiseOnError);
      return Result;
    };
    this.BI_Exit_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var ResultResolved = new $mod.TPasResolverResult();
      var i = 0;
      var ProcScope = null;
      var ResultEl = null;
      var Flags = {};
      if (!pas.PasTree.TParamsExpr.isPrototypeOf(Expr) || (rtl.length(Expr.Params) === 0)) return 0;
      Params = Expr;
      Param = Params.Params[0];
      Result = 2147483647;
      i = this.FScopeCount - 1;
      while ((i > 0) && !$mod.TPasProcedureScope.isPrototypeOf(this.GetScopes(i))) i -= 1;
      if (i > 0) {
        ProcScope = this.GetScopes(i);
        if (!pas.PasTree.TPasFunction.isPrototypeOf(ProcScope.FElement)) {
          if (RaiseOnError) this.RaiseMsg(20170216152312,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),["procedure exit"],Params.Params[0]);
          return 2147483647;
        };
        ResultEl = rtl.as(ProcScope.FElement,pas.PasTree.TPasFunction).GetFT().ResultEl;
        this.ComputeElement(ResultEl,{get: function () {
            return ResultResolved;
          }, set: function (v) {
            ResultResolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
      } else {
        $mod.SetResolverTypeExpr({get: function () {
            return ResultResolved;
          }, set: function (v) {
            ResultResolved = v;
          }},$mod.TResolverBaseType.btLongint,this.FBaseTypes[$mod.TResolverBaseType.btLongint],this.FBaseTypes[$mod.TResolverBaseType.btLongint],rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable));
      };
      Flags = {};
      if (this.IsProcedureType(ResultResolved,true)) Flags = rtl.includeSet(Flags,$mod.TPasResolverComputeFlag.rcNoImplicitProc);
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.refSet(Flags),null);
      if ($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) Result = this.CheckAssignResCompatibility(ResultResolved,ParamResolved,Param,false);
      if (Result === 2147483647) {
        if (RaiseOnError) this.RaiseIncompatibleTypeRes(20170216152314,3006,["1"],ParamResolved,ResultResolved,Param);
        return Result;
      };
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_IncDec_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var IncrResolved = new $mod.TPasResolverResult();
      var TypeEl = null;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      Result = 2147483647;
      if (!this.ResolvedElCanBeVarParam(ParamResolved,Expr,true)) {
        if (RaiseOnError) this.RaiseVarExpected(20170216152319,Expr,ParamResolved.IdentEl);
        return Result;
      };
      if (ParamResolved.BaseType in $mod.btAllInteger) {
        Result = 0}
       else if (ParamResolved.BaseType === $mod.TResolverBaseType.btPointer) {
        if (this.ElHasBoolSwitch(Expr,pas.PScanner.TBoolSwitch.bsPointerMath)) Result = 0;
      } else if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
        TypeEl = ParamResolved.LoTypeEl;
        if ((TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) && this.ElHasBoolSwitch(Expr,pas.PScanner.TBoolSwitch.bsPointerMath)) Result = 0;
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170216152320,1,Param,ParamResolved,"integer",RaiseOnError);
      if (rtl.length(Params.Params) === 1) return Result;
      Param = Params.Params[1];
      this.ComputeElement(Param,{get: function () {
          return IncrResolved;
        }, set: function (v) {
          IncrResolved = v;
        }},{},null);
      Result = 2147483647;
      if ($mod.TPasResolverResultFlag.rrfReadable in IncrResolved.Flags) {
        if (IncrResolved.BaseType in $mod.btAllInteger) Result = 0;
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170216152322,2,Param,IncrResolved,"integer",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,2,RaiseOnError);
      return Result;
    };
    this.BI_IncDec_OnFinishParamsExpr = function (Proc, Params) {
      var P = [];
      if (Proc === null) ;
      P = Params.Params;
      this.FinishCallArgAccess(P[0],$mod.TResolvedRefAccess.rraVarParam);
      if (rtl.length(P) > 1) this.FinishCallArgAccess(P[1],$mod.TResolvedRefAccess.rraRead);
    };
    this.BI_Assigned_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var C = null;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProcType),null);
      Result = 2147483647;
      if (ParamResolved.BaseType in rtl.createSet($mod.TResolverBaseType.btNil,$mod.TResolverBaseType.btPointer)) {
        Result = 0}
       else if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
        C = ParamResolved.LoTypeEl.$class.ClassType();
        if ((((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) || C.InheritsFrom(pas.PasTree.TPasProcedureType)) || ((C === pas.PasTree.TPasArrayType) && (rtl.length(ParamResolved.LoTypeEl.Ranges) === 0))) Result = 0;
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170216152329,1,Param,ParamResolved,"class or array",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_Assigned_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btBoolean,Proc.Proc,this.FBaseTypes[$mod.TResolverBaseType.btBoolean],this.FBaseTypes[$mod.TResolverBaseType.btBoolean],rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
    };
    this.BI_Assigned_OnFinishParamsExpr = function (Proc, Params) {
      var P = null;
      var ResolvedEl = new $mod.TPasResolverResult();
      if (Proc === null) ;
      P = Params.Params[0];
      this.AccessExpr(P,$mod.TResolvedRefAccess.rraRead);
      this.ComputeElement(P,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProcType,$mod.TPasResolverComputeFlag.rcSetReferenceFlags),null);
    };
    this.BI_Chr_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      Result = 2147483647;
      if ($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) {
        if (ParamResolved.BaseType in $mod.btAllInteger) Result = 0;
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170325185321,1,Param,ParamResolved,"integer",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_Chr_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      $mod.SetResolverIdentifier(ResolvedEl,this.FBaseTypeChar,Proc.Proc,this.FBaseTypes[this.FBaseTypeChar],this.FBaseTypes[this.FBaseTypeChar],rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
    };
    this.BI_Chr_OnEval = function (Proc, Params, Flags, Evaluated) {
      var Param = null;
      var Value = null;
      Evaluated.set(null);
      Param = Params.Params[0];
      Value = this.Eval(Param,rtl.refSet(Flags),true);
      if (Value === null) return;
      try {
        Evaluated.set(this.fExprEvaluator.ChrValue(Value,Params));
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
      };
      if (Proc === null) ;
    };
    this.BI_Ord_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var ResolvedEl = new $mod.TPasResolverResult();
      var TypeEl = null;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      Result = 2147483647;
      if ($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) {
        if (ParamResolved.BaseType in rtl.unionSet($mod.btAllBooleans,$mod.btAllChars)) {
          Result = 0}
         else if ((ParamResolved.BaseType === $mod.TResolverBaseType.btContext) && pas.PasTree.TPasEnumType.isPrototypeOf(ParamResolved.LoTypeEl)) {
          Result = 0}
         else if (ParamResolved.BaseType === $mod.TResolverBaseType.btRange) {
          if (ParamResolved.SubType in rtl.unionSet($mod.btAllBooleans,$mod.btAllChars)) {
            Result = 0}
           else if (ParamResolved.SubType === $mod.TResolverBaseType.btContext) {
            TypeEl = ParamResolved.LoTypeEl;
            if (TypeEl.$class.ClassType() === pas.PasTree.TPasRangeType) {
              this.ComputeElement(TypeEl.RangeExpr.left,{get: function () {
                  return ResolvedEl;
                }, set: function (v) {
                  ResolvedEl = v;
                }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
              if (ResolvedEl.LoTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) return 0;
            };
          };
        };
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170216152334,1,Param,ParamResolved,"enum or char",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_Ord_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btLongint,Proc.Proc,this.FBaseTypes[$mod.TResolverBaseType.btLongint],this.FBaseTypes[$mod.TResolverBaseType.btLongint],rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
    };
    this.BI_Ord_OnEval = function (Proc, Params, Flags, Evaluated) {
      var Param = null;
      var Value = null;
      Evaluated.set(null);
      Param = Params.Params[0];
      Value = this.Eval(Param,rtl.refSet(Flags),true);
      if (Value === null) return;
      try {
        Evaluated.set(this.fExprEvaluator.OrdValue(Value,Params));
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
      };
      if (Proc === null) ;
    };
    this.BI_LowHigh_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var C = null;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      Result = 2147483647;
      if (ParamResolved.BaseType in $mod.btAllRanges) {
        Result = 0}
       else if (ParamResolved.BaseType === $mod.TResolverBaseType.btSet) {
        Result = 0}
       else if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
        C = ParamResolved.LoTypeEl.$class.ClassType();
        if (((C === pas.PasTree.TPasArrayType) || (C === pas.PasTree.TPasSetType)) || (C === pas.PasTree.TPasEnumType)) Result = 0;
      };
      if (Result === 2147483647) {
        return this.CheckRaiseTypeArgNo(20170216152338,1,Param,ParamResolved,"ordinal type, array or set",RaiseOnError);
      };
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_LowHigh_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      var ArrayEl = null;
      var Param = null;
      var TypeEl = null;
      Param = Params.Params[0];
      this.ComputeElement(Param,ResolvedEl,{},null);
      if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btContext) {
        TypeEl = ResolvedEl.get().LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
          ArrayEl = TypeEl;
          if (rtl.length(ArrayEl.Ranges) === 0) {
            $mod.SetResolverIdentifier(ResolvedEl,this.FBaseTypeLength,Proc.Proc,this.FBaseTypes[this.FBaseTypeLength],this.FBaseTypes[this.FBaseTypeLength],rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
           else {
            this.ComputeElement(ArrayEl.Ranges[0],ResolvedEl,rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
            if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btRange) this.ConvertRangeToElement(ResolvedEl);
          };
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasSetType) {
          ResolvedEl.get().LoTypeEl = TypeEl.EnumType;
          ResolvedEl.get().HiTypeEl = ResolvedEl.get().LoTypeEl;
        };
      } else if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btSet) {
        ResolvedEl.get().BaseType = ResolvedEl.get().SubType;
        ResolvedEl.get().SubType = $mod.TResolverBaseType.btNone;
      };
      ResolvedEl.get().Flags = rtl.unionSet(rtl.diffSet(ResolvedEl.get().Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfWritable)),rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
    };
    this.BI_LowHigh_OnEval = function (Proc, Params, Flags, Evaluated) {
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var TypeEl = null;
      var ArrayEl = null;
      var Value = null;
      var EnumType = null;
      var aSet = null;
      var bt = 0;
      var Int = 0;
      var MinInt = 0;
      var MaxInt = 0;
      var i = 0;
      var Expr = null;
      Evaluated.set(null);
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      TypeEl = ParamResolved.LoTypeEl;
      if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
          ArrayEl = TypeEl;
          if (rtl.length(ArrayEl.Ranges) === 0) {
            if (Proc.BuiltIn === $mod.TResolverBuiltInProc.bfLow) {
              Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[0]))}
             else if (pas.PasTree.TPasVariable.isPrototypeOf(ParamResolved.IdentEl) && pas.PasTree.TPasExpr.isPrototypeOf(ParamResolved.IdentEl.Expr)) {
              Expr = ParamResolved.IdentEl.Expr;
              if (pas.PasTree.TArrayValues.isPrototypeOf(Expr)) {
                Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[rtl.length(Expr.Values) - 1]))}
               else if (pas.PasTree.TParamsExpr.isPrototypeOf(Expr) && (Expr.Kind === pas.PasTree.TPasExprKind.pekSet)) Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[rtl.length(Expr.Params) - 1]));
              if (Evaluated.get() === null) this.RaiseXExpectedButYFound(20170601191003,"array constant","expression",Params);
            } else return;
          } else {
            Evaluated.set(this.EvalRangeLimit(ArrayEl.Ranges[0],rtl.refSet(Flags),Proc.BuiltIn === $mod.TResolverBuiltInProc.bfLow,Param));
          };
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasSetType) {
          TypeEl = TypeEl.EnumType;
          if (TypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
            EnumType = TypeEl.EnumType;
            if (Proc.BuiltIn === $mod.TResolverBuiltInProc.bfLow) {
              Evaluated.set(pas.PasResolveEval.TResEvalEnum.$create("CreateValue",[0,rtl.getObject(EnumType.Values.Get(0))]))}
             else Evaluated.set(pas.PasResolveEval.TResEvalEnum.$create("CreateValue",[EnumType.Values.FCount - 1,rtl.getObject(EnumType.Values.Get(EnumType.Values.FCount - 1))]));
          } else {
            this.RaiseNotYetImplemented(20170601203026,Params,"");
          };
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
          EnumType = TypeEl;
          if (Proc.BuiltIn === $mod.TResolverBuiltInProc.bfLow) {
            i = 0}
           else i = EnumType.Values.FCount - 1;
          Evaluated.set(pas.PasResolveEval.TResEvalEnum.$create("CreateValue",[i,rtl.getObject(EnumType.Values.Get(i))]));
        };
      } else if (ParamResolved.BaseType === $mod.TResolverBaseType.btSet) {
        Value = this.Eval(Param,rtl.refSet(Flags),true);
        if (Value === null) return;
        var $tmp1 = Value.Kind;
        if ($tmp1 === pas.PasResolveEval.TREVKind.revkSetOfInt) {
          aSet = Value;
          if (rtl.length(aSet.Ranges) === 0) this.RaiseXExpectedButYFound(20170601201637,"ordinal value",Value.AsString(),Param);
          if (Proc.BuiltIn === $mod.TResolverBuiltInProc.bfLow) {
            Int = aSet.RangeStart}
           else Int = aSet.RangeEnd;
          var $tmp2 = aSet.ElKind;
          if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskEnum) {
            EnumType = rtl.as(aSet.IdentEl,pas.PasTree.TPasEnumType);
            Evaluated.set(pas.PasResolveEval.TResEvalEnum.$create("CreateValue",[Int,rtl.getObject(EnumType.Values.Get(Int))]));
          } else if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskInt) {
            Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[Int]))}
           else if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskChar) {
            Evaluated.set(pas.PasResolveEval.TResEvalUTF16.$create("CreateValue",[String.fromCharCode(Int)]))}
           else if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskBool) if (Int === 0) {
            Evaluated.set(pas.PasResolveEval.TResEvalBool.$create("CreateValue",[false]))}
           else Evaluated.set(pas.PasResolveEval.TResEvalBool.$create("CreateValue",[true]));
        } else {
          this.RaiseXExpectedButYFound(20170601201237,"ordinal value",Value.AsString(),Param);
        };
      } else if (pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(TypeEl) && $mod.TResElDataBaseType.isPrototypeOf(TypeEl.FData)) {
        bt = TypeEl.FData.BaseType;
        bt = this.GetActualBaseType(bt);
        if (bt in $mod.btAllBooleans) {
          Evaluated.set(pas.PasResolveEval.TResEvalBool.$create("CreateValue",[Proc.BuiltIn === $mod.TResolverBuiltInProc.bfHigh]))}
         else if ((bt in $mod.btAllIntegerNoQWord) && this.GetIntegerRange(bt,{get: function () {
            return MinInt;
          }, set: function (v) {
            MinInt = v;
          }},{get: function () {
            return MaxInt;
          }, set: function (v) {
            MaxInt = v;
          }})) {
          if (Proc.BuiltIn === $mod.TResolverBuiltInProc.bfLow) {
            Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[MinInt]))}
           else Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[MaxInt]));
        } else if (bt === $mod.TResolverBaseType.btWideChar) {
          if (Proc.BuiltIn === $mod.TResolverBuiltInProc.bfLow) {
            Evaluated.set(pas.PasResolveEval.TResEvalUTF16.$create("CreateValue",["\x00"]))}
           else Evaluated.set(pas.PasResolveEval.TResEvalUTF16.$create("CreateValue",["\uFFFF"]));
        } else {
          this.RaiseNotYetImplemented(20170602070738,Params,"");
        };
      } else if (pas.PasTree.TPasRangeType.isPrototypeOf(ParamResolved.LoTypeEl)) {
        Evaluated.set(this.EvalRangeLimit(TypeEl.RangeExpr,rtl.refSet(Flags),Proc.BuiltIn === $mod.TResolverBuiltInProc.bfLow,Param));
      } else {
        this.RaiseNotYetImplemented(20170601202353,Params,"");
      };
    };
    this.BI_PredSucc_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      Result = 2147483647;
      if (this.CheckIsOrdinal(ParamResolved,Param,false)) Result = 0;
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170216152343,1,Param,ParamResolved,"ordinal",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_PredSucc_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      this.ComputeElement(Params.Params[0],ResolvedEl,{},null);
      ResolvedEl.get().Flags = rtl.diffSet(ResolvedEl.get().Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfWritable));
    };
    this.BI_PredSucc_OnEval = function (Proc, Params, Flags, Evaluated) {
      var Param = null;
      Evaluated.set(null);
      Param = Params.Params[0];
      Evaluated.set(this.Eval(Param,rtl.refSet(Flags),true));
      if (Evaluated.get() === null) return;
      if (Evaluated.get().FElement !== null) Evaluated.set(Evaluated.get().Clone());
      if (Proc.BuiltIn === $mod.TResolverBuiltInProc.bfPred) {
        this.fExprEvaluator.PredValue(Evaluated.get(),Params)}
       else this.fExprEvaluator.SuccValue(Evaluated.get(),Params);
    };
    this.BI_Str_CheckParam = function (IsFunc, Param, ParamResolved, ArgNo, RaiseOnError) {
      var Self = this;
      var Result = 0;
      function CheckFormat(FormatExpr, Index, ParamResolved) {
        var Result = false;
        var ResolvedEl = new $mod.TPasResolverResult();
        var Ok = false;
        if (FormatExpr === null) return true;
        Result = false;
        Ok = false;
        if (ParamResolved.BaseType in $mod.btAllFloats) {
          Ok = true}
         else Ok = Index < 2;
        if (!Ok) {
          if (RaiseOnError) Self.RaiseMsg(20170319222319,3044,rtl.getResStr(pas.PasResolveEval,"sIllegalExpression"),[],FormatExpr);
          return Result;
        };
        Self.ComputeElement(FormatExpr,{get: function () {
            return ResolvedEl;
          }, set: function (v) {
            ResolvedEl = v;
          }},{},null);
        if (!(ResolvedEl.BaseType in $mod.btAllInteger)) {
          if (RaiseOnError) Self.RaiseXExpectedButYFound(20170319221515,"integer",Self.GetResolverResultDescription(ResolvedEl,true),FormatExpr);
          return Result;
        };
        if (!($mod.TPasResolverResultFlag.rrfReadable in ResolvedEl.Flags)) {
          if (RaiseOnError) Self.RaiseMsg(20170319221755,3038,rtl.getResStr(pas.PasResolveEval,"sNotReadable"),[],FormatExpr);
          return Result;
        };
        Result = true;
        return Result;
      };
      var TypeEl = null;
      Result = 2147483647;
      if (ParamResolved.BaseType in rtl.unionSet(rtl.unionSet($mod.btAllInteger,$mod.btAllBooleans),$mod.btAllFloats)) {
        Result = 0}
       else if (IsFunc && (ParamResolved.BaseType in $mod.btAllStringAndChars)) {
        Result = 0}
       else if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
        TypeEl = ParamResolved.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) Result = 0;
      };
      if (Result === 2147483647) return Self.CheckRaiseTypeArgNo(20170319220517,ArgNo,Param,ParamResolved,"boolean, integer, enum value",RaiseOnError);
      if (!CheckFormat(Param.format1,1,ParamResolved)) return 2147483647;
      if (!CheckFormat(Param.format2,2,ParamResolved)) return 2147483647;
      return Result;
    };
    this.BI_StrProc_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,2,RaiseOnError)) return 2147483647;
      Params = Expr;
      if (this.ParentNeedsExprResult(Params)) {
        if (RaiseOnError) this.RaiseMsg(20170326084331,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),["procedure str","function str"],Params);
        return 2147483647;
      };
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      Result = this.BI_Str_CheckParam(false,Param,ParamResolved,1,RaiseOnError);
      if (Result === 2147483647) return Result;
      Param = Params.Params[1];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      Result = 2147483647;
      if (this.ResolvedElCanBeVarParam(ParamResolved,Expr,true)) {
        if (ParamResolved.BaseType in $mod.btAllStrings) Result = 0;
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170319220806,1,Param,ParamResolved,"string variable",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,2,RaiseOnError);
      return Result;
    };
    this.BI_StrProc_OnFinishParamsExpr = function (Proc, Params) {
      var P = [];
      if (Proc === null) ;
      P = Params.Params;
      if (rtl.length(P) === 0) ;
      this.FinishCallArgAccess(P[0],$mod.TResolvedRefAccess.rraRead);
      this.FinishCallArgAccess(P[1],$mod.TResolvedRefAccess.rraVarParam);
    };
    this.BI_StrFunc_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var i = 0;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      if (!this.ParentNeedsExprResult(Params)) {
        if (RaiseOnError) this.RaiseMsg(20170326084622,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),["function str","procedure str"],Params);
        return 2147483647;
      };
      for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Param = Params.Params[i];
        this.ComputeElement(Param,{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},{},null);
        Result = this.BI_Str_CheckParam(true,Param,ParamResolved,i + 1,RaiseOnError);
        if (Result === 2147483647) return Result;
      };
      Result = 0;
      return Result;
    };
    this.BI_StrFunc_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      if (Params === null) ;
      $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btString,Proc.Proc,this.FBaseTypes[$mod.TResolverBaseType.btString],this.FBaseTypes[$mod.TResolverBaseType.btString],rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
    };
    this.BI_StrFunc_OnEval = function (Proc, Params, Flags, Evaluated) {
      Evaluated.set(this.fExprEvaluator.EvalStrFunc(Params,rtl.refSet(Flags)));
    };
    this.BI_WriteStrProc_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var i = 0;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,2,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      Result = 2147483647;
      if (this.ResolvedElCanBeVarParam(ParamResolved,Expr,true)) {
        if (ParamResolved.BaseType in $mod.btAllStrings) Result = 0;
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20180527190304,1,Param,ParamResolved,"string variable",RaiseOnError);
      for (var $l1 = 1, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Param = Params.Params[i];
        this.ComputeElement(Param,{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},{},null);
        Result = this.BI_Str_CheckParam(false,Param,ParamResolved,i,RaiseOnError);
        if (Result === 2147483647) return Result;
      };
      return Result;
    };
    this.BI_WriteStrProc_OnFinishParamsExpr = function (Proc, Params) {
      var P = [];
      var i = 0;
      if (Proc === null) ;
      P = Params.Params;
      if (rtl.length(P) === 0) ;
      this.FinishCallArgAccess(P[0],$mod.TResolvedRefAccess.rraOutParam);
      for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.FinishCallArgAccess(P[i],$mod.TResolvedRefAccess.rraRead);
      };
    };
    this.BI_ConcatArray_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var ElTypeResolved = new $mod.TPasResolverResult();
      var FirstElTypeResolved = new $mod.TPasResolverResult();
      var i = 0;
      Result = 2147483647;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return Result;
      Params = Expr;
      FirstElTypeResolved = new $mod.TPasResolverResult();
      for (var $l1 = 0, $end2 = rtl.length(Params.Params) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Param = Params.Params[i];
        this.ComputeElement(Param,{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},{},null);
        ElTypeResolved = new $mod.TPasResolverResult();
        if ($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) {
          if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
            if (this.IsDynArray(ParamResolved.LoTypeEl,true)) this.ComputeElement(ParamResolved.LoTypeEl.ElType,{get: function () {
                return ElTypeResolved;
              }, set: function (v) {
                ElTypeResolved = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
          } else if (ParamResolved.BaseType in rtl.createSet($mod.TResolverBaseType.btArrayLit,$mod.TResolverBaseType.btArrayOrSet)) $mod.SetResolverValueExpr({get: function () {
              return ElTypeResolved;
            }, set: function (v) {
              ElTypeResolved = v;
            }},ParamResolved.SubType,ParamResolved.LoTypeEl,ParamResolved.HiTypeEl,Param,rtl.refSet(ParamResolved.Flags));
        };
        if (ElTypeResolved.BaseType === $mod.TResolverBaseType.btNone) return this.CheckRaiseTypeArgNo(20170329181206,i + 1,Param,ParamResolved,"dynamic array",RaiseOnError);
        ElTypeResolved.Flags = rtl.includeSet(ElTypeResolved.Flags,$mod.TPasResolverResultFlag.rrfReadable);
        if (i === 0) {
          FirstElTypeResolved = new $mod.TPasResolverResult(ElTypeResolved);
          FirstElTypeResolved.Flags = rtl.includeSet(FirstElTypeResolved.Flags,$mod.TPasResolverResultFlag.rrfWritable);
        } else if (this.CheckAssignResCompatibility(FirstElTypeResolved,ElTypeResolved,Param,RaiseOnError) === 2147483647) return 2147483647;
      };
      Result = 0;
      return Result;
    };
    this.BI_ConcatArray_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      this.ComputeElement(Params.Params[0],ResolvedEl,{},null);
      ResolvedEl.get().Flags = rtl.diffSet(ResolvedEl.get().Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfWritable));
      ResolvedEl.get().ExprEl = Params;
      ResolvedEl.get().IdentEl = null;
      if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btArrayOrSet) ResolvedEl.get().BaseType = $mod.TResolverBaseType.btArrayLit;
    };
    this.BI_CopyArray_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      Result = 2147483647;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return Result;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if ($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) {
        if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
          if (this.IsDynArray(ParamResolved.LoTypeEl,true)) Result = 0;
        } else if (ParamResolved.BaseType in rtl.createSet($mod.TResolverBaseType.btArrayLit,$mod.TResolverBaseType.btArrayOrSet)) Result = 0;
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20170329153951,1,Param,ParamResolved,"dynamic array",RaiseOnError);
      if (rtl.length(Params.Params) === 1) return 0;
      Param = Params.Params[1];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) || !(ParamResolved.BaseType in $mod.btAllInteger)) return this.CheckRaiseTypeArgNo(20170329164210,2,Param,ParamResolved,"integer",RaiseOnError);
      if (rtl.length(Params.Params) === 2) return 0;
      Param = Params.Params[2];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) || !(ParamResolved.BaseType in $mod.btAllInteger)) return this.CheckRaiseTypeArgNo(20170329164329,3,Param,ParamResolved,"integer",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,3,RaiseOnError);
      return Result;
    };
    this.BI_CopyArray_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      this.ComputeElement(Params.Params[0],ResolvedEl,{},null);
      ResolvedEl.get().Flags = rtl.diffSet(ResolvedEl.get().Flags,rtl.createSet($mod.TPasResolverResultFlag.rrfWritable));
      ResolvedEl.get().ExprEl = Params;
      ResolvedEl.get().IdentEl = null;
      if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btArrayOrSet) ResolvedEl.get().BaseType = $mod.TResolverBaseType.btArrayLit;
    };
    this.BI_InsertArray_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ItemParam = null;
      var ItemResolved = new $mod.TPasResolverResult();
      var ParamResolved = new $mod.TPasResolverResult();
      var ElTypeResolved = new $mod.TPasResolverResult();
      Result = 2147483647;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,3,RaiseOnError)) return Result;
      Params = Expr;
      ItemParam = Params.Params[0];
      this.ComputeElement(ItemParam,{get: function () {
          return ItemResolved;
        }, set: function (v) {
          ItemResolved = v;
        }},{},null);
      if (!($mod.TPasResolverResultFlag.rrfReadable in ItemResolved.Flags)) return this.CheckRaiseTypeArgNo(20170329171400,1,ItemParam,ItemResolved,"value",RaiseOnError);
      Param = Params.Params[1];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (!this.ResolvedElCanBeVarParam(ParamResolved,Expr,true)) {
        if (RaiseOnError) this.RaiseVarExpected(20170329171514,Param,ParamResolved.IdentEl);
        return Result;
      };
      if ((ParamResolved.BaseType !== $mod.TResolverBaseType.btContext) || !this.IsDynArray(ParamResolved.LoTypeEl,true)) return this.CheckRaiseTypeArgNo(20170329172024,2,Param,ParamResolved,"dynamic array",RaiseOnError);
      this.ComputeElement(ParamResolved.LoTypeEl.ElType,{get: function () {
          return ElTypeResolved;
        }, set: function (v) {
          ElTypeResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
      if (this.CheckAssignResCompatibility(ElTypeResolved,ItemResolved,ItemParam,RaiseOnError) === 2147483647) return 2147483647;
      Param = Params.Params[2];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) || !(ParamResolved.BaseType in $mod.btAllInteger)) return this.CheckRaiseTypeArgNo(20170329172348,3,Param,ParamResolved,"integer",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,3,RaiseOnError);
      return Result;
    };
    this.BI_InsertArray_OnFinishParamsExpr = function (Proc, Params) {
      var P = [];
      var Param0 = null;
      var Param1 = null;
      var ArrayResolved = new $mod.TPasResolverResult();
      var ElTypeResolved = new $mod.TPasResolverResult();
      if (Proc === null) ;
      P = Params.Params;
      Param0 = P[0];
      Param1 = P[1];
      this.FinishCallArgAccess(Param0,$mod.TResolvedRefAccess.rraRead);
      this.FinishCallArgAccess(Param1,$mod.TResolvedRefAccess.rraVarParam);
      this.FinishCallArgAccess(P[2],$mod.TResolvedRefAccess.rraRead);
      if (!pas.PasTree.TPrimitiveExpr.isPrototypeOf(Param0)) {
        this.ComputeElement(Param1,{get: function () {
            return ArrayResolved;
          }, set: function (v) {
            ArrayResolved = v;
          }},{},null);
        if ((ArrayResolved.BaseType !== $mod.TResolverBaseType.btContext) || !this.IsDynArray(ArrayResolved.LoTypeEl,true)) this.RaiseNotYetImplemented(20180622144039,Param1,"");
        this.ComputeElement(ArrayResolved.LoTypeEl.ElType,{get: function () {
            return ElTypeResolved;
          }, set: function (v) {
            ElTypeResolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
        if ((ElTypeResolved.BaseType === $mod.TResolverBaseType.btContext) && (ElTypeResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) this.MarkArrayExprRecursive(Param0,ElTypeResolved.LoTypeEl);
      };
    };
    this.BI_DeleteArray_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      Result = 2147483647;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,3,RaiseOnError)) return Result;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (!this.ResolvedElCanBeVarParam(ParamResolved,Expr,true)) {
        if (RaiseOnError) this.RaiseVarExpected(20170329173421,Param,ParamResolved.IdentEl);
        return Result;
      };
      if ((ParamResolved.BaseType !== $mod.TResolverBaseType.btContext) || !this.IsDynArray(ParamResolved.LoTypeEl,true)) return this.CheckRaiseTypeArgNo(20170329173434,1,Param,ParamResolved,"dynamic array",RaiseOnError);
      Param = Params.Params[1];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) || !(ParamResolved.BaseType in $mod.btAllInteger)) return this.CheckRaiseTypeArgNo(20170329173613,2,Param,ParamResolved,"integer",RaiseOnError);
      Param = Params.Params[2];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) || !(ParamResolved.BaseType in $mod.btAllInteger)) return this.CheckRaiseTypeArgNo(20170329172348,3,Param,ParamResolved,"integer",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,3,RaiseOnError);
      return Result;
    };
    this.BI_DeleteArray_OnFinishParamsExpr = function (Proc, Params) {
      var P = [];
      if (Proc === null) ;
      P = Params.Params;
      if (rtl.length(P) === 0) ;
      this.FinishCallArgAccess(P[0],$mod.TResolvedRefAccess.rraVarParam);
      this.FinishCallArgAccess(P[1],$mod.TResolvedRefAccess.rraRead);
      this.FinishCallArgAccess(P[2],$mod.TResolvedRefAccess.rraRead);
    };
    this.BI_TypeInfo_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var Decl = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var aType = null;
      Result = 2147483647;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return Result;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      Decl = ParamResolved.IdentEl;
      aType = null;
      if (Decl !== null) {
        if (pas.PasTree.TPasType.isPrototypeOf(Decl)) {
          aType = Decl}
         else if (pas.PasTree.TPasVariable.isPrototypeOf(Decl)) {
          aType = Decl.VarType}
         else if (Decl.$class.ClassType() === pas.PasTree.TPasArgument) {
          aType = Decl.ArgType}
         else if (Decl.$class.ClassType() === pas.PasTree.TPasResultElement) {
          aType = Decl.ResultType}
         else if (pas.PasTree.TPasFunction.isPrototypeOf(Decl)) aType = Decl.GetFT().ResultEl.ResultType;
      };
      if (aType === null) {
        this.RaiseMsg(20170411100259,3055,rtl.getResStr(pas.PasResolveEval,"sTypeIdentifierExpected"),[],Param);
      };
      aType = this.ResolveAliasType(aType);
      if (!this.HasTypeInfo(aType)) this.RaiseMsg(20170413200118,3053,rtl.getResStr(pas.PasResolveEval,"sSymbolCannotBePublished"),[],Param);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_TypeInfo_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      if (Proc === null) ;
      if (Params === null) ;
      $mod.SetResolverTypeExpr(ResolvedEl,$mod.TResolverBaseType.btPointer,this.FBaseTypes[$mod.TResolverBaseType.btPointer],this.FBaseTypes[$mod.TResolverBaseType.btPointer],rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
    };
    this.BI_Assert_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) || !(ParamResolved.BaseType in $mod.btAllBooleans)) return this.CheckRaiseTypeArgNo(20180117123819,1,Param,ParamResolved,"boolean",RaiseOnError);
      if (rtl.length(Params.Params) > 1) {
        Param = Params.Params[1];
        this.ComputeElement(Param,{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},{},null);
        if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) || !(ParamResolved.BaseType in $mod.btAllStringAndChars)) return this.CheckRaiseTypeArgNo(20180117123932,2,Param,ParamResolved,"string",RaiseOnError);
      };
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,2,RaiseOnError);
      return Result;
    };
    this.BI_Assert_OnFinishParamsExpr = function (Proc, Params) {
      this.FinishAssertCall(Proc,Params);
    };
    this.BI_New_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var TypeEl = null;
      var SubTypeEl = null;
      var ParamResolved = new $mod.TPasResolverResult();
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      Result = 2147483647;
      if (!this.ResolvedElCanBeVarParam(ParamResolved,Expr,true)) {
        if (RaiseOnError) this.RaiseVarExpected(20180425005303,Expr,ParamResolved.IdentEl);
        return Result;
      };
      if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
        TypeEl = ParamResolved.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          SubTypeEl = this.ResolveAliasType(TypeEl.DestType);
          if (SubTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) Result = 0;
        };
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20180425005421,1,Param,ParamResolved,"pointer of record",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_New_OnFinishParamsExpr = function (Proc, Params) {
      if (Proc === null) ;
      this.FinishCallArgAccess(Params.Params[0],$mod.TResolvedRefAccess.rraOutParam);
    };
    this.BI_Dispose_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var TypeEl = null;
      var SubTypeEl = null;
      var ParamResolved = new $mod.TPasResolverResult();
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return 2147483647;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      Result = 2147483647;
      if ($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
        TypeEl = ParamResolved.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          SubTypeEl = this.ResolveAliasType(TypeEl.DestType);
          if (SubTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) Result = 0;
        };
      };
      if (Result === 2147483647) return this.CheckRaiseTypeArgNo(20180425010620,1,Param,ParamResolved,"pointer of record",RaiseOnError);
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_Dispose_OnFinishParamsExpr = function (Proc, Params) {
      if (Proc === null) ;
      this.FinishCallArgAccess(Params.Params[0],$mod.TResolvedRefAccess.rraRead);
    };
    this.BI_Default_OnGetCallCompatibility = function (Proc, Expr, RaiseOnError) {
      var Result = 0;
      var Params = null;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var Decl = null;
      var aType = null;
      Result = 2147483647;
      if (!this.CheckBuiltInMinParamCount(Proc,Expr,1,RaiseOnError)) return Result;
      Params = Expr;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      Decl = ParamResolved.IdentEl;
      aType = null;
      if ((Decl !== null) && (ParamResolved.LoTypeEl !== null)) {
        if (pas.PasTree.TPasType.isPrototypeOf(Decl)) {
          aType = Decl}
         else if (pas.PasTree.TPasVariable.isPrototypeOf(Decl)) {
          aType = Decl.VarType}
         else if (Decl.$class.ClassType() === pas.PasTree.TPasArgument) aType = Decl.ArgType;
      };
      if (aType === null) {
        this.RaiseMsg(20180501004009,3055,rtl.getResStr(pas.PasResolveEval,"sTypeIdentifierExpected"),[],Param);
      };
      Result = this.CheckBuiltInMaxParamCount(Proc,Params,1,RaiseOnError);
      return Result;
    };
    this.BI_Default_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      var Param = null;
      Param = Params.Params[0];
      this.ComputeElement(Param,ResolvedEl,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      ResolvedEl.get().Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable);
      ResolvedEl.get().IdentEl = null;
    };
    this.BI_Default_OnEval = function (Proc, Params, Flags, Evaluated) {
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var TypeEl = null;
      var EnumType = null;
      var i = 0;
      var ArrayEl = null;
      var bt = 0;
      var MinInt = 0;
      var MaxInt = 0;
      Evaluated.set(null);
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      TypeEl = ParamResolved.LoTypeEl;
      if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
          this.RaiseNotYetImplemented(20180501005214,Param,"");
          ArrayEl = TypeEl;
          if (rtl.length(ArrayEl.Ranges) === 0) ;
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasSetType) {
          TypeEl = TypeEl.EnumType;
          if (TypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
            EnumType = TypeEl.EnumType;
            Evaluated.set(pas.PasResolveEval.TResEvalSet.$create("CreateEmpty",[pas.PasResolveEval.TRESetElKind.revskEnum,EnumType]));
          } else {
            this.RaiseNotYetImplemented(20180501005348,Params,"");
          };
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
          EnumType = TypeEl;
          i = 0;
          Evaluated.set(pas.PasResolveEval.TResEvalEnum.$create("CreateValue",[i,rtl.getObject(EnumType.Values.Get(i))]));
        };
      } else if (pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(TypeEl) && $mod.TResElDataBaseType.isPrototypeOf(TypeEl.FData)) {
        bt = TypeEl.FData.BaseType;
        bt = this.GetActualBaseType(bt);
        if (bt in $mod.btAllBooleans) {
          Evaluated.set(pas.PasResolveEval.TResEvalBool.$create("CreateValue",[false]))}
         else if ((bt in $mod.btAllIntegerNoQWord) && this.GetIntegerRange(bt,{get: function () {
            return MinInt;
          }, set: function (v) {
            MinInt = v;
          }},{get: function () {
            return MaxInt;
          }, set: function (v) {
            MaxInt = v;
          }})) {
          Evaluated.set(pas.PasResolveEval.TResEvalInt.$create("CreateValue",[MinInt]))}
         else if (bt in rtl.createSet($mod.TResolverBaseType.btUnicodeString,$mod.TResolverBaseType.btWideString)) {
          Evaluated.set(pas.PasResolveEval.TResEvalUTF16.$create("CreateValue",[""]))}
         else if (bt === $mod.TResolverBaseType.btWideChar) {
          Evaluated.set(pas.PasResolveEval.TResEvalUTF16.$create("CreateValue",["\x00"]))}
         else if (bt in $mod.btAllFloats) {
          Evaluated.set(pas.PasResolveEval.TResEvalFloat.$create("CreateValue",[0.0]))}
         else {
          this.RaiseNotYetImplemented(20180501005645,Params,"");
        };
      } else if (pas.PasTree.TPasRangeType.isPrototypeOf(ParamResolved.LoTypeEl)) {
        Evaluated.set(this.EvalRangeLimit(TypeEl.RangeExpr,rtl.refSet(Flags),true,Param));
      } else if (ParamResolved.BaseType === $mod.TResolverBaseType.btSet) {
        if (ParamResolved.SubType === $mod.TResolverBaseType.btContext) {
          if (ParamResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
            Evaluated.set(pas.PasResolveEval.TResEvalSet.$create("CreateEmpty",[pas.PasResolveEval.TRESetElKind.revskEnum,ParamResolved.LoTypeEl]))}
           else {
            this.RaiseNotYetImplemented(20180501125138,Param,"");
          };
        } else {
          this.RaiseNotYetImplemented(20180501125014,Param,"");
        };
      } else {
        this.RaiseNotYetImplemented(20180501004839,Param,"");
      };
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FDefaultScope = $mod.TPasDefaultScope.$create("Create$1");
      this.FPendingForwardProcs = pas.Classes.TFPList.$create("Create");
      this.FBaseTypeChar = $mod.TResolverBaseType.btWideChar;
      this.FBaseTypeString = $mod.TResolverBaseType.btUnicodeString;
      this.FBaseTypeExtended = $mod.TResolverBaseType.btDouble;
      this.FBaseTypeLength = $mod.TResolverBaseType.btIntDouble;
      this.FDynArrayMinIndex = 0;
      this.FDynArrayMaxIndex = 4503599627370495;
      this.cTGUIDToString = 10000 + 1;
      this.cStringToTGUID = 10000 + 1;
      this.cInterfaceToTGUID = 10000 + 1;
      this.cInterfaceToString = 10000 + 2;
      this.FScopeClass_Class = $mod.TPasClassScope;
      this.FScopeClass_InitialFinalization = $mod.TPasInitialFinalizationScope;
      this.FScopeClass_Module = $mod.TPasModuleScope;
      this.FScopeClass_Proc = $mod.TPasProcedureScope;
      this.FScopeClass_Section = $mod.TPasSectionScope;
      this.FScopeClass_WithExpr = $mod.TPasWithExprScope;
      this.fExprEvaluator = pas.PasResolveEval.TResExprEvaluator.$create("Create$1");
      this.fExprEvaluator.FOnLog = rtl.createCallback(this,"OnExprEvalLog");
      this.fExprEvaluator.FOnEvalIdentifier = rtl.createCallback(this,"OnExprEvalIdentifier");
      this.fExprEvaluator.FOnEvalParams = rtl.createCallback(this,"OnExprEvalParams");
      this.fExprEvaluator.FOnRangeCheckEl = rtl.createCallback(this,"OnRangeCheckEl");
      this.PushScope(this.FDefaultScope);
    };
    this.Destroy = function () {
      this.Clear();
      this.PopScope();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FPendingForwardProcs;
        }, set: function (v) {
          this.p.FPendingForwardProcs = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.fExprEvaluator;
        }, set: function (v) {
          this.p.fExprEvaluator = v;
        }});
      this.ClearBuiltInIdentifiers();
      pas.System.TObject.Destroy.call(this);
    };
    this.Clear = function () {
      this.RestoreSubScopes(0);
      while ((this.FScopeCount > 0) && (this.FTopScope !== this.FDefaultScope)) this.PopScope();
      this.ClearResolveDataList($mod.TPasResolver.TResolveDataListKind.lkModule);
    };
    this.CreateElement$1 = function (AClass, AName, AParent, AVisibility, ASourceFilename, ASourceLinenumber) {
      var Result = null;
      var aScanner = null;
      var SrcPos = new pas.PScanner.TPasSourcePos();
      aScanner = this.FCurrentParser.FScanner;
      if ((ASourceFilename === "") || this.FStoreSrcColumns) {
        SrcPos.FileName = aScanner.FCurFilename;
        SrcPos.Row = aScanner.FCurRow;
        SrcPos.Column = aScanner.GetCurColumn();
      } else {
        SrcPos.FileName = ASourceFilename;
        SrcPos.Row = ASourceLinenumber;
        SrcPos.Column = 0;
      };
      Result = this.CreateElement$2(AClass,AName,AParent,AVisibility,SrcPos);
      return Result;
    };
    this.CreateElement$2 = function (AClass, AName, AParent, AVisibility, ASrcPos) {
      var Result = null;
      var El = null;
      var SrcY = 0;
      var SectionScope = null;
      if ((AParent === null) && (this.FRootElement !== null)) this.RaiseInternalError(20160922163535,(('more than one root element Class="' + AClass.$classname) + '" Root=') + pas.PasResolveEval.GetObjName(this.FRootElement));
      if (ASrcPos.FileName === "") {
        this.RaiseInternalError(20160922163541,"missing filename");
      };
      SrcY = ASrcPos.Row;
      if (this.FStoreSrcColumns) SrcY = this.$class.MangleSourceLineNumber(SrcY,ASrcPos.Column);
      El = AClass.$create("Create$1",[AName,AParent]);
      this.FLastElement = El;
      Result = null;
      try {
        El.Visibility = AVisibility;
        El.SourceFilename = ASrcPos.FileName;
        El.SourceLinenumber = SrcY;
        if (this.FRootElement === null) {
          this.SetRootElement(rtl.as(El,pas.PasTree.TPasModule));
          if (this.FStep === $mod.TPasResolverStep.prsInit) this.FStep = $mod.TPasResolverStep.prsParsing;
        } else if (pas.PasTree.TPasSection.isPrototypeOf(AParent) && (AParent.Declarations.FCount === 0)) {
          SectionScope = AParent.FData;
          SectionScope.BoolSwitches = rtl.refSet(this.FCurrentParser.FScanner.FCurrentBoolSwitches);
          SectionScope.ModeSwitches = rtl.refSet(this.FCurrentParser.FScanner.FCurrentModeSwitches);
        };
        if (this.IsElementSkipped(El)) return Result;
        if ((AClass === pas.PasTree.TPasVariable) || (AClass === pas.PasTree.TPasConst)) {
          this.AddVariable(El)}
         else if (AClass === pas.PasTree.TPasResString) {
          this.AddResourceString(El)}
         else if (AClass === pas.PasTree.TPasProperty) {
          this.AddProperty(El)}
         else if (AClass === pas.PasTree.TPasArgument) {
          this.AddArgument(El)}
         else if (AClass === pas.PasTree.TPasEnumType) {
          this.AddEnumType(El)}
         else if (AClass === pas.PasTree.TPasEnumValue) {
          this.AddEnumValue(El)}
         else if (AClass === $mod.TUnresolvedPendingRef) {}
        else if (((((((((AClass === pas.PasTree.TPasAliasType) || (AClass === pas.PasTree.TPasTypeAliasType)) || (AClass === pas.PasTree.TPasClassOfType)) || (AClass === pas.PasTree.TPasPointerType)) || (AClass === pas.PasTree.TPasArrayType)) || (AClass === pas.PasTree.TPasProcedureType)) || (AClass === pas.PasTree.TPasFunctionType)) || (AClass === pas.PasTree.TPasSetType)) || (AClass === pas.PasTree.TPasRangeType)) {
          this.AddType(El)}
         else if (AClass === pas.PasTree.TPasStringType) {
          this.AddType(El);
          this.RaiseMsg(20170419203043,3003,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifier"),["["],El);
        } else if (AClass === pas.PasTree.TPasRecordType) {
          this.AddRecordType(El)}
         else if (AClass === pas.PasTree.TPasClassType) {
          this.AddClassType(El)}
         else if (AClass === pas.PasTree.TPasVariant) {}
        else if (AClass.InheritsFrom(pas.PasTree.TPasProcedure)) {
          this.AddProcedure(El)}
         else if (AClass === pas.PasTree.TPasResultElement) {
          this.AddFunctionResult(El)}
         else if (AClass === pas.PasTree.TProcedureBody) {
          this.AddProcedureBody(El)}
         else if (AClass === pas.PasTree.TPasMethodResolution) {}
        else if (AClass === pas.PasTree.TPasImplExceptOn) {
          this.AddExceptOn(El)}
         else if (AClass === pas.PasTree.TPasImplLabelMark) {}
        else if (AClass === pas.PasTree.TPasOverloadedProc) {}
        else if ((((AClass === pas.PasTree.TInterfaceSection) || (AClass === pas.PasTree.TImplementationSection)) || (AClass === pas.PasTree.TProgramSection)) || (AClass === pas.PasTree.TLibrarySection)) {
          this.AddSection(El)}
         else if (((AClass === pas.PasTree.TPasModule) || (AClass === pas.PasTree.TPasProgram)) || (AClass === pas.PasTree.TPasLibrary)) {
          this.AddModule(El)}
         else if (AClass === pas.PasTree.TPasUsesUnit) {}
        else if (AClass.InheritsFrom(pas.PasTree.TPasExpr)) {}
        else if (AClass === pas.PasTree.TInitializationSection) {
          this.AddInitialFinalizationSection(El)}
         else if (AClass === pas.PasTree.TFinalizationSection) {
          this.AddInitialFinalizationSection(El)}
         else if (AClass.InheritsFrom(pas.PasTree.TPasImplBlock)) {}
        else if (AClass === pas.PasTree.TPasImplCommand) {}
        else if (AClass === pas.PasTree.TPasUnresolvedUnitRef) {
          this.RaiseMsg(20171018121900,3073,rtl.getResStr(pas.PasResolveEval,"sCantFindUnitX"),[AName],El)}
         else this.RaiseNotYetImplemented(20160922163544,El,"");
        Result = El;
      } finally {
        if (Result === null) El.Release();
      };
      return Result;
    };
    this.FindModule$1 = function (AName, NameExpr, InFileExpr) {
      var Result = null;
      var InFilename = "";
      var FileUnitName = "";
      if (InFileExpr !== null) {
        InFilename = this.GetUsesUnitInFilename(InFileExpr);
        if (InFilename === "") this.RaiseXExpectedButYFound(20180222001220,"file path","empty string",InFileExpr);
        if (pas.PScanner.TModeSwitch.msDelphi in this.FCurrentParser.GetCurrentModeSwitches()) {
          FileUnitName = pas.SysUtils.ChangeFileExt(pas.SysUtils.ExtractFileName(InFilename),"");
          if (pas.SysUtils.CompareText(AName,FileUnitName) !== 0) this.RaiseXExpectedButYFound(20180222230400,AName,FileUnitName,InFileExpr);
        };
      };
      Result = this.FindUnit(AName,InFilename,NameExpr,InFileExpr);
      if (Result === null) {
        if (InFileExpr !== null) {
          this.RaiseMsg(20180223140434,3073,rtl.getResStr(pas.PasResolveEval,"sCantFindUnitX"),[InFilename],InFileExpr)}
         else this.RaiseMsg(20180223140409,3073,rtl.getResStr(pas.PasResolveEval,"sCantFindUnitX"),[AName],NameExpr);
      };
      return Result;
    };
    this.FindElement = function (aName) {
      var Result = null;
      var p = 0;
      var RightPath = "";
      var CurName = "";
      var LeftPath = "";
      var NeedPop = false;
      var CurScopeEl = null;
      var NextEl = null;
      var ErrorEl = null;
      var BestEl = null;
      var CurSection = null;
      var i = 0;
      var UsesUnit = null;
      Result = null;
      ErrorEl = null;
      RightPath = aName;
      LeftPath = "";
      p = 1;
      CurScopeEl = null;
      do {
        p = pas.System.Pos(".",RightPath);
        if (p < 1) {
          CurName = RightPath;
          RightPath = "";
        } else {
          CurName = pas.SysUtils.LeftStr(RightPath,p - 1);
          pas.System.Delete({get: function () {
              return RightPath;
            }, set: function (v) {
              RightPath = v;
            }},1,p);
          if (RightPath === "") this.RaiseMsg(20170328003146,3044,rtl.getResStr(pas.PasResolveEval,"sIllegalExpression"),[],ErrorEl);
        };
        if (LeftPath === "") {
          LeftPath = CurName}
         else LeftPath = (LeftPath + ".") + CurName;
        if (!$mod.IsValidIdent(CurName,false,false)) this.RaiseNotYetImplemented(20170328000033,ErrorEl,"");
        if (CurScopeEl !== null) {
          NeedPop = true;
          if (CurScopeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
            this.PushClassDotScope({get: function () {
                return CurScopeEl;
              }, set: function (v) {
                CurScopeEl = v;
              }})}
           else if (CurScopeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
            this.PushRecordDotScope(CurScopeEl)}
           else if (pas.PasTree.TPasModule.isPrototypeOf(CurScopeEl)) {
            this.PushModuleDotScope(CurScopeEl)}
           else this.RaiseMsg(20170504174021,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),[".",LeftPath],ErrorEl);
        } else NeedPop = false;
        NextEl = this.FindElementWithoutParams(CurName,ErrorEl,true);
        if (pas.PasTree.TPasModule.isPrototypeOf(NextEl)) {
          if (pas.PasTree.TPasModule.isPrototypeOf(CurScopeEl)) this.RaiseXExpectedButYFound(20170328001619,"class",($mod.GetElementTypeName(NextEl) + " ") + NextEl.FName,ErrorEl);
          if (pas.System.Pos(".",NextEl.FName) > 0) {
            if (pas.SysUtils.CompareText(NextEl.FName + ".",pas.SysUtils.LeftStr(aName,NextEl.FName.length + 1)) !== 0) {
              if (pas.SysUtils.CompareText(NextEl.FName,aName) === 0) {
                this.RaiseXExpectedButYFound(20170504165825,"type",$mod.GetElementTypeName(NextEl),ErrorEl)}
               else this.RaiseIdentifierNotFound(20170504165412,aName,ErrorEl);
            };
            RightPath = pas.System.Copy(aName,NextEl.FName.length + 2,aName.length);
          };
          CurScopeEl = NextEl;
        } else if (NextEl.$class.ClassType() === pas.PasTree.TPasUsesUnit) {
          CurSection = rtl.as(NextEl.FParent,pas.PasTree.TPasSection);
          i = rtl.length(CurSection.UsesClause) - 1;
          BestEl = null;
          while (i >= 0) {
            UsesUnit = CurSection.UsesClause[i];
            CurName = UsesUnit.FName;
            if ($mod.IsDottedIdentifierPrefix(CurName,aName) && ((BestEl === null) || (CurName.length > BestEl.FName.length))) BestEl = UsesUnit;
            i -= 1;
            if ((i < 0) && (CurSection.$class.ClassType() === pas.PasTree.TImplementationSection)) {
              CurSection = rtl.as(CurSection.FParent,pas.PasTree.TPasModule).InterfaceSection;
              if (CurSection === null) break;
              i = rtl.length(CurSection.UsesClause) - 1;
            };
          };
          CurName = this.FRootElement.FName;
          if ($mod.IsDottedIdentifierPrefix(CurName,aName) && ((BestEl === null) || (CurName.length > BestEl.FName.length))) BestEl = this.FRootElement;
          if (BestEl === null) this.RaiseIdentifierNotFound(20170504172440,aName,ErrorEl);
          RightPath = pas.System.Copy(aName,BestEl.FName.length + 2,aName.length);
          if (BestEl.$class.ClassType() === pas.PasTree.TPasUsesUnit) {
            CurScopeEl = BestEl.Module}
           else CurScopeEl = BestEl;
        } else if (NextEl !== null) {
          CurScopeEl = NextEl}
         else this.RaiseIdentifierNotFound(20170328001941,CurName,ErrorEl);
        if (NeedPop) this.PopScope();
        if (RightPath === "") return NextEl;
      } while (!false);
      return Result;
    };
    this.FindElementWithoutParams = function (AName, ErrorPosEl, NoProcsWithArgs) {
      var Result = null;
      var Data = new $mod.TPRFindData();
      Result = this.FindElementWithoutParams$1(AName,{get: function () {
          return Data;
        }, set: function (v) {
          Data = v;
        }},ErrorPosEl,NoProcsWithArgs);
      if (Data.Found === null) return Result;
      this.CheckFoundElement(Data,null);
      if (((Data.StartScope !== null) && (Data.StartScope.$class.ClassType() === this.FScopeClass_WithExpr)) && ($mod.TPasWithExprScopeFlag.wesfNeedTmpVar in Data.StartScope.Flags)) this.RaiseInternalError(20160923111727,"");
      return Result;
    };
    this.FindElementWithoutParams$1 = function (AName, Data, ErrorPosEl, NoProcsWithArgs) {
      var Result = null;
      var Abort = false;
      Result = null;
      Abort = false;
      Data.set(new $mod.TPRFindData());
      Data.get().ErrorPosEl = ErrorPosEl;
      this.IterateElements(AName,rtl.createCallback(this,"OnFindFirstElement"),Data.get(),{get: function () {
          return Abort;
        }, set: function (v) {
          Abort = v;
        }});
      Result = Data.get().Found;
      if (Result === null) {
        if ((ErrorPosEl === null) && (this.FLastElement !== null)) {
          if ((this.FLastElement.$class.ClassType() === pas.PasTree.TPasClassOfType) && (this.FLastElement.DestType === null)) {
            Result = this.CreateElement$2($mod.TUnresolvedPendingRef,AName,this.FLastElement,pas.PasTree.TPasMemberVisibility.visDefault,this.FCurrentParser.CurSourcePos());
            return Result;
          } else if ((this.FLastElement.$class.ClassType() === pas.PasTree.TPasPointerType) && (this.FLastElement.DestType === null)) {
            Result = this.CreateElement$2($mod.TUnresolvedPendingRef,AName,this.FLastElement,pas.PasTree.TPasMemberVisibility.visDefault,this.FCurrentParser.CurSourcePos());
            return Result;
          };
        };
        this.RaiseIdentifierNotFound(20170216152722,AName,ErrorPosEl);
      };
      if ((NoProcsWithArgs && pas.PasTree.TPasProcedure.isPrototypeOf(Result)) && this.ProcNeedsParams(Result.ProcType)) this.RaiseMsg(20170216152347,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[this.GetProcTypeDescription(Result.ProcType,rtl.createSet($mod.TPRProcTypeDescFlag.prptdUseName,$mod.TPRProcTypeDescFlag.prptdResolveSimpleAlias))],ErrorPosEl);
      return Result;
    };
    this.FindLongestUnitName = function (El, Expr) {
      var CurUsesUnit = null;
      var BestEl = null;
      var aName = "";
      var CurName = "";
      var Clause = [];
      var i = 0;
      var Section = null;
      if (!pas.PasTree.TPasUsesUnit.isPrototypeOf(El.get())) this.RaiseInternalError(20170503000945,"");
      aName = this.GetNameExprValue(Expr);
      if (aName === "") this.RaiseNotYetImplemented(20170503110217,Expr,"");
      do {
        Expr = this.GetNextDottedExpr(Expr);
        if (Expr === null) break;
        CurName = this.GetNameExprValue(Expr);
        if (CurName === "") this.RaiseNotYetImplemented(20170502164242,Expr,"");
        aName = (aName + ".") + CurName;
      } while (!false);
      BestEl = null;
      Section = rtl.as(El.get().FParent,pas.PasTree.TPasSection);
      do {
        Clause = Section.UsesClause;
        for (var $l1 = 0, $end2 = rtl.length(Clause) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          CurUsesUnit = Clause[i];
          CurName = CurUsesUnit.FName;
          if ($mod.IsDottedIdentifierPrefix(CurName,aName) && ((BestEl === null) || (CurName.length > BestEl.FName.length))) BestEl = CurUsesUnit;
        };
        if (pas.PasTree.TImplementationSection.isPrototypeOf(Section)) {
          Section = rtl.as(Section.FParent,pas.PasTree.TPasModule).InterfaceSection;
        } else break;
      } while (!(Section === null));
      CurName = El.get().GetModule().FName;
      if ($mod.IsDottedIdentifierPrefix(CurName,aName) && ((BestEl === null) || (CurName.length > BestEl.FName.length))) BestEl = El.get().GetModule();
      if (BestEl === null) {
        this.RaiseIdentifierNotFound(20170503140643,this.GetNameExprValue(Expr),Expr);
      };
      El.set(BestEl);
    };
    this.IterateElements = function (aName, OnIterateElement, Data, Abort) {
      var i = 0;
      var Scope = null;
      for (var $l1 = this.FScopeCount - 1; $l1 >= 0; $l1--) {
        i = $l1;
        Scope = this.GetScopes(i);
        Scope.IterateElements(aName,Scope,OnIterateElement,Data,Abort);
        if (Abort.get()) return;
        if ($mod.TPasSubScope.isPrototypeOf(Scope)) break;
      };
    };
    this.CheckFoundElement = function (FindData, Ref) {
      var Proc = null;
      var Context = null;
      var FoundContext = null;
      var StartScope = null;
      var OnlyTypeMembers = false;
      var IsClassOf = false;
      var TypeEl = null;
      var C = null;
      var ClassScope = null;
      var i = 0;
      StartScope = FindData.StartScope;
      OnlyTypeMembers = false;
      IsClassOf = false;
      if ($mod.TPasDotIdentifierScope.isPrototypeOf(StartScope)) {
        OnlyTypeMembers = StartScope.OnlyTypeMembers;
        if (StartScope.$class.ClassType() === $mod.TPasDotClassScope) IsClassOf = StartScope.IsClassOf;
        if (Ref !== null) {
          Ref.Flags = rtl.includeSet(Ref.Flags,$mod.TResolvedReferenceFlag.rrfDotScope);
          if (StartScope.ConstParent) Ref.Flags = rtl.includeSet(Ref.Flags,$mod.TResolvedReferenceFlag.rrfConstInherited);
        };
      } else if (StartScope.$class.ClassType() === this.FScopeClass_WithExpr) {
        OnlyTypeMembers = $mod.TPasWithExprScopeFlag.wesfOnlyTypeMembers in StartScope.Flags;
        IsClassOf = $mod.TPasWithExprScopeFlag.wesfIsClassOf in StartScope.Flags;
        if (Ref !== null) {
          Ref.Flags = rtl.includeSet(Ref.Flags,$mod.TResolvedReferenceFlag.rrfDotScope);
          if ($mod.TPasWithExprScopeFlag.wesfConstParent in StartScope.Flags) Ref.Flags = rtl.includeSet(Ref.Flags,$mod.TResolvedReferenceFlag.rrfConstInherited);
        };
      } else if (StartScope.$class.ClassType() === this.FScopeClass_Proc) {
        Proc = rtl.as(StartScope.FElement,pas.PasTree.TPasProcedure);
        if ((FindData.ElScope !== StartScope) && this.IsClassMethod(Proc)) OnlyTypeMembers = true;
      };
      if (OnlyTypeMembers) {
        if (FindData.Found.$class.ClassType() === pas.PasTree.TPasConstructor) {}
        else if (this.IsClassMethod(FindData.Found)) {}
        else if (pas.PasTree.TPasVariable.isPrototypeOf(FindData.Found) && (pas.PasTree.TVariableModifier.vmClass in FindData.Found.VarModifiers)) {}
        else if (pas.PasTree.TPasType.isPrototypeOf(FindData.Found)) {}
        else {
          this.RaiseMsg(20170216152348,3032,rtl.getResStr(pas.PasResolveEval,"sCannotAccessThisMemberFromAX"),[$mod.GetElementTypeName(FindData.Found.FParent)],FindData.ErrorPosEl);
        };
      } else if ((($mod.TPasResolverOption.proExtClassInstanceNoTypeMembers in this.FOptions) && (StartScope.$class.ClassType() === $mod.TPasDotClassScope)) && StartScope.FClassScope.FElement.IsExternal) {
        C = FindData.Found.$class.ClassType();
        if ((C === pas.PasTree.TPasProcedure) || (C === pas.PasTree.TPasFunction)) {}
        else if (C === pas.PasTree.TPasConst) {}
        else if (C.InheritsFrom(pas.PasTree.TPasVariable) && !(pas.PasTree.TVariableModifier.vmClass in FindData.Found.VarModifiers)) {}
        else {
          this.RaiseMsg(20170331184224,3051,rtl.getResStr(pas.PasResolveEval,"sExternalClassInstanceCannotAccessStaticX"),[($mod.GetElementTypeName(FindData.Found) + " ") + FindData.Found.FName],FindData.ErrorPosEl);
        };
      };
      if (pas.PasTree.TPasProcedure.isPrototypeOf(FindData.Found)) {
        Proc = FindData.Found;
        if (Proc.IsVirtual() || Proc.IsOverride()) {
          if ((StartScope.$class.ClassType() === $mod.TPasDotClassScope) && StartScope.InheritedExpr) {
            if (Proc.IsAbstract()) this.RaiseMsg(20170216152352,3030,rtl.getResStr(pas.PasResolveEval,"sAbstractMethodsCannotBeCalledDirectly"),[],FindData.ErrorPosEl);
          } else {
            if (Ref !== null) Ref.Flags = rtl.unionSet(Ref.Flags,rtl.createSet($mod.TResolvedReferenceFlag.rrfVMT));
          };
        };
        if (((Proc.$class.ClassType() === pas.PasTree.TPasConstructor) && OnlyTypeMembers) && (Ref !== null)) {
          Ref.Flags = rtl.diffSet(rtl.unionSet(Ref.Flags,rtl.createSet($mod.TResolvedReferenceFlag.rrfNewInstance)),rtl.createSet($mod.TResolvedReferenceFlag.rrfConstInherited));
          if (Ref.Context !== null) this.RaiseInternalError(20170131141936,"");
          Ref.Context = $mod.TResolvedRefCtxConstructor.$create("Create");
          if ($mod.TPasDotClassScope.isPrototypeOf(StartScope)) {
            ClassScope = StartScope.FClassScope}
           else if ($mod.TPasWithExprScope.isPrototypeOf(StartScope) && $mod.TPasClassScope.isPrototypeOf(StartScope.Scope)) {
            ClassScope = StartScope.Scope}
           else if ($mod.TPasProcedureScope.isPrototypeOf(StartScope)) {
            ClassScope = StartScope.ClassScope}
           else this.RaiseInternalError(20170131150855,pas.PasResolveEval.GetObjName(StartScope));
          TypeEl = rtl.as(ClassScope.FElement,pas.PasTree.TPasType);
          Ref.Context.Typ = TypeEl;
          if (rtl.length(ClassScope.AbstractProcs) > 0) {
            if (IsClassOf) {}
            else for (var $l1 = 0, $end2 = rtl.length(ClassScope.AbstractProcs) - 1; $l1 <= $end2; $l1++) {
              i = $l1;
              this.LogMsg(20171227110746,pas.PScanner.TMessageType.mtWarning,4046,rtl.getResStr(pas.PasResolveEval,"sConstructingClassXWithAbstractMethodY"),[TypeEl.FName,ClassScope.AbstractProcs[i].FName],FindData.ErrorPosEl);
            };
          };
        };
        if ((Proc.$class.ClassType() === pas.PasTree.TPasDestructor) && (Ref !== null)) if ((StartScope.$class.ClassType() !== $mod.TPasDotClassScope) || !StartScope.InheritedExpr) Ref.Flags = rtl.unionSet(Ref.Flags,rtl.createSet($mod.TResolvedReferenceFlag.rrfFreeInstance));
      };
      if (FindData.Found.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPrivate,pas.PasTree.TPasMemberVisibility.visProtected,pas.PasTree.TPasMemberVisibility.visStrictPrivate,pas.PasTree.TPasMemberVisibility.visStrictProtected)) {
        Context = this.GetVisibilityContext();
        FoundContext = rtl.as(FindData.Found.FParent,pas.PasTree.TPasClassType);
        var $tmp3 = FindData.Found.Visibility;
        if ($tmp3 === pas.PasTree.TPasMemberVisibility.visPrivate) {
          if (FoundContext.GetModule() !== Context.GetModule()) this.RaiseMsg(20170216152354,3045,rtl.getResStr(pas.PasResolveEval,"sCantAccessPrivateMember"),["private",FindData.Found.FName],FindData.ErrorPosEl)}
         else if ($tmp3 === pas.PasTree.TPasMemberVisibility.visProtected) {
          if (FoundContext.GetModule() === Context.GetModule()) {}
          else if (pas.PasTree.TPasType.isPrototypeOf(Context) && (this.CheckClassIsClass(Context,FoundContext,FindData.ErrorPosEl) !== 2147483647)) {}
          else if ($mod.TPasDotClassScope.isPrototypeOf(this.FTopScope) && (this.FTopScope.FClassScope.FElement.GetModule() === Context.GetModule())) {}
          else if (($mod.TPasWithExprScope.isPrototypeOf(this.FTopScope) && $mod.TPasClassScope.isPrototypeOf(this.FTopScope.Scope)) && (this.FTopScope.Scope.FElement.GetModule() === Context.GetModule())) {}
          else this.RaiseMsg(20170216152356,3045,rtl.getResStr(pas.PasResolveEval,"sCantAccessPrivateMember"),["protected",FindData.Found.FName],FindData.ErrorPosEl)}
         else if ($tmp3 === pas.PasTree.TPasMemberVisibility.visStrictPrivate) {
          if (Context !== FoundContext) this.RaiseMsg(20170216152357,3045,rtl.getResStr(pas.PasResolveEval,"sCantAccessPrivateMember"),["strict private",FindData.Found.FName],FindData.ErrorPosEl)}
         else if ($tmp3 === pas.PasTree.TPasMemberVisibility.visStrictProtected) if (pas.PasTree.TPasType.isPrototypeOf(Context) && (this.CheckClassIsClass(Context,FoundContext,FindData.ErrorPosEl) !== 2147483647)) {}
        else this.RaiseMsg(20170216152400,3045,rtl.getResStr(pas.PasResolveEval,"sCantAccessPrivateMember"),["strict protected",FindData.Found.FName],FindData.ErrorPosEl);
      };
    };
    this.GetVisibilityContext = function () {
      var Result = null;
      var i = 0;
      for (var $l1 = this.FScopeCount - 1; $l1 >= 0; $l1--) {
        i = $l1;
        Result = this.GetScopes(i).VisibilityContext;
        if (Result !== null) return Result;
      };
      Result = null;
      return Result;
    };
    this.FinishScope = function (ScopeType, El) {
      if (this.IsElementSkipped(El)) return;
      var $tmp1 = ScopeType;
      if ($tmp1 === pas.PParser.TPasScopeType.stModule) {
        this.FinishModule(rtl.as(El,pas.PasTree.TPasModule))}
       else if ($tmp1 === pas.PParser.TPasScopeType.stUsesClause) {
        this.FinishUsesClause()}
       else if ($tmp1 === pas.PParser.TPasScopeType.stTypeSection) {
        this.FinishTypeSection(rtl.as(El,pas.PasTree.TPasDeclarations))}
       else if ($tmp1 === pas.PParser.TPasScopeType.stTypeDef) {
        this.FinishTypeDef(rtl.as(El,pas.PasTree.TPasType))}
       else if ($tmp1 === pas.PParser.TPasScopeType.stResourceString) {
        this.FinishResourcestring(rtl.as(El,pas.PasTree.TPasResString))}
       else if ($tmp1 === pas.PParser.TPasScopeType.stProcedure) {
        this.FinishProcedure(rtl.as(El,pas.PasTree.TPasProcedure))}
       else if ($tmp1 === pas.PParser.TPasScopeType.stProcedureHeader) {
        this.FinishProcedureType(rtl.as(El,pas.PasTree.TPasProcedureType))}
       else if ($tmp1 === pas.PParser.TPasScopeType.stExceptOnExpr) {
        this.FinishExceptOnExpr()}
       else if ($tmp1 === pas.PParser.TPasScopeType.stExceptOnStatement) {
        this.FinishExceptOnStatement()}
       else if ($tmp1 === pas.PParser.TPasScopeType.stDeclaration) {
        this.FinishDeclaration(El)}
       else if ($tmp1 === pas.PParser.TPasScopeType.stAncestors) {
        this.FinishAncestors(rtl.as(El,pas.PasTree.TPasClassType))}
       else if ($tmp1 === pas.PParser.TPasScopeType.stInitialFinalization) {
        this.FinishInitialFinalization(rtl.as(El,pas.PasTree.TPasImplBlock))}
       else {
        this.RaiseMsg(20170216152401,3002,rtl.getResStr(pas.PasResolveEval,"sNotYetImplemented") + " FinishScope",[pas.SysUtils.IntToStr(ScopeType)],null);
      };
    };
    this.FinishTypeAlias = function (NewType) {
      var TypeEl = null;
      var DestType = null;
      var AncestorClass = null;
      var aClass = null;
      var Scope = null;
      var OldType = null;
      DestType = NewType.get().DestType;
      TypeEl = $mod.ResolveSimpleAliasType(DestType);
      if (pas.PasTree.TPasClassType.isPrototypeOf(TypeEl)) {
        AncestorClass = TypeEl;
        Scope = rtl.as(this.FTopScope,$mod.TPasIdentifierScope);
        Scope.RemoveLocalIdentifier(NewType.get());
        aClass = this.CreateElement$1(pas.PasTree.TPasClassType,NewType.get().FName,NewType.get().FParent,NewType.get().Visibility,NewType.get().SourceFilename,NewType.get().SourceLinenumber);
        aClass.ObjKind = AncestorClass.ObjKind;
        OldType = NewType.get();
        NewType.set(aClass);
        OldType.DestType = null;
        OldType.Release();
        aClass.AncestorType = DestType;
        this.FinishScope(pas.PParser.TPasScopeType.stAncestors,aClass);
      };
    };
    this.IsUnitIntfFinished = function (AModule) {
      var Result = false;
      var CurIntf = null;
      CurIntf = AModule.InterfaceSection;
      Result = ((CurIntf !== null) && $mod.TPasSectionScope.isPrototypeOf(CurIntf.FData)) && CurIntf.FData.Finished;
      return Result;
    };
    this.NotifyPendingUsedInterfaces = function () {
      var ModuleScope = null;
      var i = 0;
      var PendingResolver = null;
      var PendingSection = null;
      ModuleScope = rtl.as(this.FRootElement.FData,$mod.TPasModuleScope);
      i = ModuleScope.PendingResolvers.FCount - 1;
      while (i >= 0) {
        PendingResolver = rtl.as(rtl.getObject(ModuleScope.PendingResolvers.Get(i)),$mod.TPasResolver);
        PendingSection = PendingResolver.GetLastSection();
        if (PendingSection === null) this.RaiseInternalError(20180305141421,"");
        PendingResolver.CheckPendingUsedInterface(PendingSection);
        i -= 1;
        if (i >= ModuleScope.PendingResolvers.FCount) i = ModuleScope.PendingResolvers.FCount - 1;
      };
    };
    this.GetPendingUsedInterface = function (Section) {
      var Result = null;
      var i = 0;
      var UseUnit = null;
      Result = null;
      for (var $l1 = 0, $end2 = rtl.length(Section.UsesClause) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        UseUnit = Section.UsesClause[i];
        if (!pas.PasTree.TPasModule.isPrototypeOf(UseUnit.Module)) continue;
        if (!this.IsUnitIntfFinished(UseUnit.Module)) return UseUnit;
      };
      return Result;
    };
    this.CheckPendingUsedInterface = function (Section) {
      var Result = false;
      var PendingModule = null;
      var PendingModuleScope = null;
      var List = null;
      var WasPending = false;
      WasPending = Section.PendingUsedIntf !== null;
      if (WasPending) {
        PendingModule = rtl.as(Section.PendingUsedIntf.Module,pas.PasTree.TPasModule);
        if (!this.IsUnitIntfFinished(PendingModule)) return Result;
        PendingModuleScope = rtl.as($mod.NoNil(PendingModule.FData),$mod.TPasModuleScope);
        PendingModuleScope.PendingResolvers.Remove(this);
        Section.PendingUsedIntf = null;
      };
      Section.PendingUsedIntf = this.GetPendingUsedInterface(Section);
      if (Section.PendingUsedIntf !== null) {
        PendingModule = rtl.as(Section.PendingUsedIntf.Module,pas.PasTree.TPasModule);
        PendingModuleScope = rtl.as($mod.NoNil(PendingModule.FData),$mod.TPasModuleScope);
        List = PendingModuleScope.PendingResolvers;
        if (List.IndexOf(this) < 0) List.Add(this);
        Result = !WasPending;
      } else {
        Result = WasPending;
        if (Result) this.UsedInterfacesFinished(Section);
      };
      return Result;
    };
    this.UsedInterfacesFinished = function (Section) {
      this.FCurrentParser.ParseContinue();
      if (Section === null) ;
    };
    this.NeedArrayValues = function (El) {
      var Result = false;
      var C = null;
      var V = null;
      var TypeEl = null;
      Result = false;
      if (El === null) return Result;
      C = El.$class.ClassType();
      if ((C === pas.PasTree.TPasConst) || (C === pas.PasTree.TPasVariable)) {
        V = El;
        if (V.VarType === null) return Result;
        TypeEl = this.ResolveAliasType(V.VarType);
        Result = TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType;
      };
      return Result;
    };
    this.GetDefaultClassVisibility = function (AClass) {
      var Result = 0;
      var ClassScope = null;
      if (AClass.FData === null) return pas.PasTree.TPasMemberVisibility.visDefault;
      ClassScope = rtl.as(AClass.FData,$mod.TPasClassScope);
      if ($mod.TPasClassScopeFlag.pcsfPublished in ClassScope.Flags) {
        Result = pas.PasTree.TPasMemberVisibility.visPublished}
       else Result = pas.PasTree.TPasMemberVisibility.visPublic;
      return Result;
    };
    this.ModeChanged = function (Sender, NewMode, Before, Handled) {
      pas.PParser.TPasTreeContainer.ModeChanged.call(this,Sender,NewMode,Before,Handled);
      if (!Before) {
        if (pas.PasTree.TPasSection.isPrototypeOf(this.FLastElement)) this.FLastElement.FData.ModeSwitches = rtl.refSet(this.FCurrentParser.GetCurrentModeSwitches());
      };
    };
    this.ClearBuiltInIdentifiers = function () {
      var bt = 0;
      var bp = 0;
      this.ClearResolveDataList($mod.TPasResolver.TResolveDataListKind.lkBuiltIn);
      for (bt = 0; bt <= 37; bt++) pas.PasTree.ReleaseAndNil({a: bt, p: this.FBaseTypes, get: function () {
          return this.p[this.a];
        }, set: function (v) {
          this.p[this.a] = v;
        }});
      for (bp = 0; bp <= 28; bp++) this.FBuiltInProcs[bp] = null;
    };
    this.AddObjFPCBuiltInIdentifiers = function (TheBaseTypes, TheBaseProcs) {
      var bt = 0;
      for (var $l1 in TheBaseTypes) {
        bt = +$l1;
        this.AddBaseType(this.GetBaseTypeNames(bt),bt);
      };
      if ($mod.TResolverBuiltInProc.bfLength in TheBaseProcs) this.AddBuiltInProc("Length","function Length(const String or Array): sizeint",rtl.createCallback(this,"BI_Length_OnGetCallCompatibility"),rtl.createCallback(this,"BI_Length_OnGetCallResult"),rtl.createCallback(this,"BI_Length_OnEval"),null,$mod.TResolverBuiltInProc.bfLength,{});
      if ($mod.TResolverBuiltInProc.bfSetLength in TheBaseProcs) this.AddBuiltInProc("SetLength","procedure SetLength(var String or Array; NewLength: sizeint)",rtl.createCallback(this,"BI_SetLength_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_SetLength_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfSetLength,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfInclude in TheBaseProcs) this.AddBuiltInProc("Include","procedure Include(var Set of Enum; const Enum)",rtl.createCallback(this,"BI_InExclude_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_InExclude_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfInclude,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfExclude in TheBaseProcs) this.AddBuiltInProc("Exclude","procedure Exclude(var Set of Enum; const Enum)",rtl.createCallback(this,"BI_InExclude_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_InExclude_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfExclude,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfBreak in TheBaseProcs) this.AddBuiltInProc("Break","procedure Break",rtl.createCallback(this,"BI_Break_OnGetCallCompatibility"),null,null,null,$mod.TResolverBuiltInProc.bfBreak,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfContinue in TheBaseProcs) this.AddBuiltInProc("Continue","procedure Continue",rtl.createCallback(this,"BI_Continue_OnGetCallCompatibility"),null,null,null,$mod.TResolverBuiltInProc.bfContinue,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfExit in TheBaseProcs) this.AddBuiltInProc("Exit","procedure Exit(result)",rtl.createCallback(this,"BI_Exit_OnGetCallCompatibility"),null,null,null,$mod.TResolverBuiltInProc.bfExit,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfInc in TheBaseProcs) this.AddBuiltInProc("Inc","procedure Inc(var Integer; const Incr: Integer = 1)",rtl.createCallback(this,"BI_IncDec_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_IncDec_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfInc,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfDec in TheBaseProcs) this.AddBuiltInProc("Dec","procedure Dec(var Integer; const Decr: Integer = 1)",rtl.createCallback(this,"BI_IncDec_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_IncDec_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfDec,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfAssigned in TheBaseProcs) this.AddBuiltInProc("Assigned","function Assigned(const Pointer or Class or Class-of): boolean",rtl.createCallback(this,"BI_Assigned_OnGetCallCompatibility"),rtl.createCallback(this,"BI_Assigned_OnGetCallResult"),null,rtl.createCallback(this,"BI_Assigned_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfAssigned,{});
      if ($mod.TResolverBuiltInProc.bfChr in TheBaseProcs) this.AddBuiltInProc("Chr","function Chr(const Integer): char",rtl.createCallback(this,"BI_Chr_OnGetCallCompatibility"),rtl.createCallback(this,"BI_Chr_OnGetCallResult"),null,null,$mod.TResolverBuiltInProc.bfChr,{});
      if ($mod.TResolverBuiltInProc.bfOrd in TheBaseProcs) this.AddBuiltInProc("Ord","function Ord(const Enum or Char): integer",rtl.createCallback(this,"BI_Ord_OnGetCallCompatibility"),rtl.createCallback(this,"BI_Ord_OnGetCallResult"),rtl.createCallback(this,"BI_Ord_OnEval"),null,$mod.TResolverBuiltInProc.bfOrd,{});
      if ($mod.TResolverBuiltInProc.bfLow in TheBaseProcs) this.AddBuiltInProc("Low","function Low(const array or ordinal): ordinal or integer",rtl.createCallback(this,"BI_LowHigh_OnGetCallCompatibility"),rtl.createCallback(this,"BI_LowHigh_OnGetCallResult"),rtl.createCallback(this,"BI_LowHigh_OnEval"),null,$mod.TResolverBuiltInProc.bfLow,{});
      if ($mod.TResolverBuiltInProc.bfHigh in TheBaseProcs) this.AddBuiltInProc("High","function High(const array or ordinal): ordinal or integer",rtl.createCallback(this,"BI_LowHigh_OnGetCallCompatibility"),rtl.createCallback(this,"BI_LowHigh_OnGetCallResult"),rtl.createCallback(this,"BI_LowHigh_OnEval"),null,$mod.TResolverBuiltInProc.bfHigh,{});
      if ($mod.TResolverBuiltInProc.bfPred in TheBaseProcs) this.AddBuiltInProc("Pred","function Pred(const ordinal): ordinal",rtl.createCallback(this,"BI_PredSucc_OnGetCallCompatibility"),rtl.createCallback(this,"BI_PredSucc_OnGetCallResult"),rtl.createCallback(this,"BI_PredSucc_OnEval"),null,$mod.TResolverBuiltInProc.bfPred,{});
      if ($mod.TResolverBuiltInProc.bfSucc in TheBaseProcs) this.AddBuiltInProc("Succ","function Succ(const ordinal): ordinal",rtl.createCallback(this,"BI_PredSucc_OnGetCallCompatibility"),rtl.createCallback(this,"BI_PredSucc_OnGetCallResult"),rtl.createCallback(this,"BI_PredSucc_OnEval"),null,$mod.TResolverBuiltInProc.bfSucc,{});
      if ($mod.TResolverBuiltInProc.bfStrProc in TheBaseProcs) this.AddBuiltInProc("Str","procedure Str(const var; var String)",rtl.createCallback(this,"BI_StrProc_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_StrProc_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfStrProc,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfStrFunc in TheBaseProcs) this.AddBuiltInProc("Str","function Str(const var): String",rtl.createCallback(this,"BI_StrFunc_OnGetCallCompatibility"),rtl.createCallback(this,"BI_StrFunc_OnGetCallResult"),rtl.createCallback(this,"BI_StrFunc_OnEval"),null,$mod.TResolverBuiltInProc.bfStrFunc,{});
      if ($mod.TResolverBuiltInProc.bfWriteStr in TheBaseProcs) this.AddBuiltInProc("WriteStr","procedure WriteStr(out String; params...)",rtl.createCallback(this,"BI_WriteStrProc_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_WriteStrProc_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfWriteStr,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfConcatArray in TheBaseProcs) this.AddBuiltInProc("Concat","function Concat(const Array1, Array2, ...): Array",rtl.createCallback(this,"BI_ConcatArray_OnGetCallCompatibility"),rtl.createCallback(this,"BI_ConcatArray_OnGetCallResult"),null,null,$mod.TResolverBuiltInProc.bfConcatArray,{});
      if ($mod.TResolverBuiltInProc.bfCopyArray in TheBaseProcs) this.AddBuiltInProc("Copy","function Copy(const Array; Start: integer = 0; Count: integer = all): Array",rtl.createCallback(this,"BI_CopyArray_OnGetCallCompatibility"),rtl.createCallback(this,"BI_CopyArray_OnGetCallResult"),null,null,$mod.TResolverBuiltInProc.bfCopyArray,{});
      if ($mod.TResolverBuiltInProc.bfInsertArray in TheBaseProcs) this.AddBuiltInProc("Insert","procedure Insert(const Element; var Array; Index: integer)",rtl.createCallback(this,"BI_InsertArray_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_InsertArray_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfInsertArray,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfDeleteArray in TheBaseProcs) this.AddBuiltInProc("Delete","procedure Delete(var Array; Start, Count: integer)",rtl.createCallback(this,"BI_DeleteArray_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_DeleteArray_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfDeleteArray,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfTypeInfo in TheBaseProcs) this.AddBuiltInProc("TypeInfo","function TypeInfo(type or var identifier): Pointer",rtl.createCallback(this,"BI_TypeInfo_OnGetCallCompatibility"),rtl.createCallback(this,"BI_TypeInfo_OnGetCallResult"),null,null,$mod.TResolverBuiltInProc.bfTypeInfo,{});
      if ($mod.TResolverBuiltInProc.bfAssert in TheBaseProcs) this.AddBuiltInProc("Assert","procedure Assert(bool[,string])",rtl.createCallback(this,"BI_Assert_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_Assert_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfAssert,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfNew in TheBaseProcs) this.AddBuiltInProc("New","procedure New(out ^record)",rtl.createCallback(this,"BI_New_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_New_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfNew,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfDispose in TheBaseProcs) this.AddBuiltInProc("Dispose","procedure Dispose(var ^record)",rtl.createCallback(this,"BI_Dispose_OnGetCallCompatibility"),null,null,rtl.createCallback(this,"BI_Dispose_OnFinishParamsExpr"),$mod.TResolverBuiltInProc.bfDispose,rtl.createSet($mod.TBuiltInProcFlag.bipfCanBeStatement));
      if ($mod.TResolverBuiltInProc.bfDefault in TheBaseProcs) this.AddBuiltInProc("Default","function Default(T): T",rtl.createCallback(this,"BI_Default_OnGetCallCompatibility"),rtl.createCallback(this,"BI_Default_OnGetCallResult"),rtl.createCallback(this,"BI_Default_OnEval"),null,$mod.TResolverBuiltInProc.bfDefault,{});
    };
    this.AddBaseType = function (aName, Typ) {
      var Result = null;
      var El = null;
      El = pas.PasTree.TPasUnresolvedSymbolRef.$create("Create$1",[aName,null]);
      if (!(Typ in rtl.createSet($mod.TResolverBaseType.btNone,$mod.TResolverBaseType.btCustom))) this.FBaseTypes[Typ] = El;
      Result = $mod.TResElDataBaseType.$create("Create$1");
      Result.BaseType = Typ;
      this.AddResolveData(El,Result,$mod.TPasResolver.TResolveDataListKind.lkBuiltIn);
      this.FDefaultScope.AddIdentifier(aName,El,$mod.TPasIdentifierKind.pikBaseType);
      return Result;
    };
    this.AddCustomBaseType = function (aName, aClass) {
      var Result = null;
      var CustomData = null;
      Result = pas.PasTree.TPasUnresolvedSymbolRef.$create("Create$1",[aName,null]);
      CustomData = aClass.$create("Create$1");
      CustomData.BaseType = $mod.TResolverBaseType.btCustom;
      this.AddResolveData(Result,CustomData,$mod.TPasResolver.TResolveDataListKind.lkBuiltIn);
      this.FDefaultScope.AddIdentifier(aName,Result,$mod.TPasIdentifierKind.pikBaseType);
      return Result;
    };
    this.IsBaseType = function (aType, BaseType, ResolveAlias) {
      var Result = false;
      Result = false;
      if (aType === null) return Result;
      if (ResolveAlias) aType = this.ResolveAliasType(aType);
      if (aType.$class.ClassType() !== pas.PasTree.TPasUnresolvedSymbolRef) return Result;
      Result = pas.SysUtils.CompareText(aType.FName,this.GetBaseTypeNames(BaseType)) === 0;
      return Result;
    };
    this.AddBuiltInProc = function (aName, Signature, GetCallCompatibility, GetCallResult, EvalConst, FinishParamsExpr, BuiltIn, Flags) {
      var Result = null;
      var El = null;
      El = pas.PasTree.TPasUnresolvedSymbolRef.$create("Create$1",[aName,null]);
      Result = $mod.TResElDataBuiltInProc.$create("Create$1");
      Result.Proc = El;
      Result.Signature = Signature;
      Result.BuiltIn = BuiltIn;
      Result.GetCallCompatibility = GetCallCompatibility;
      Result.GetCallResult = GetCallResult;
      Result.Eval = EvalConst;
      Result.FinishParamsExpression = FinishParamsExpr;
      Result.Flags = rtl.refSet(Flags);
      this.AddResolveData(El,Result,$mod.TPasResolver.TResolveDataListKind.lkBuiltIn);
      this.FDefaultScope.AddIdentifier(aName,El,$mod.TPasIdentifierKind.pikBuiltInProc);
      if (BuiltIn !== $mod.TResolverBuiltInProc.bfCustom) this.FBuiltInProcs[BuiltIn] = Result;
      return Result;
    };
    this.AddResolveData = function (El, Data, Kind) {
      if (Data.FElement !== null) this.RaiseInternalError(20171111162227,"");
      if (El.FData !== null) this.RaiseInternalError(20171111162236,"");
      Data.SetElement(El);
      Data.Owner = this;
      Data.Next = this.FLastCreatedData[Kind];
      this.FLastCreatedData[Kind] = Data;
      El.FData = Data;
    };
    this.CreateReference = function (DeclEl, RefEl, Access, FindData) {
      var Self = this;
      var Result = null;
      function RaiseAlreadySet() {
        var FormerDeclEl = null;
        pas.System.Writeln("RaiseAlreadySet RefEl=",pas.PasResolveEval.GetObjName(RefEl)," DeclEl=",pas.PasResolveEval.GetObjName(DeclEl));
        pas.System.Writeln("  RefEl at ",Self.GetElementSourcePosStr(RefEl));
        pas.System.Writeln("  RefEl.CustomData=",pas.PasResolveEval.GetObjName(RefEl.FData));
        if ($mod.TResolvedReference.isPrototypeOf(RefEl.FData)) {
          FormerDeclEl = RefEl.FData.FDeclaration;
          pas.System.Writeln("  TResolvedReference(RefEl.CustomData).Declaration=",pas.PasResolveEval.GetObjName(FormerDeclEl)," IsSame=",FormerDeclEl === DeclEl);
        };
        Self.RaiseInternalError(20160922163554,"customdata<>nil");
      };
      if (RefEl.FData !== null) RaiseAlreadySet();
      Result = $mod.TResolvedReference.$create("Create$1");
      if (FindData !== null) {
        if (FindData.StartScope.$class.ClassType() === Self.FScopeClass_WithExpr) Result.WithExprScope = FindData.StartScope;
      };
      Self.AddResolveData(RefEl,Result,$mod.TPasResolver.TResolveDataListKind.lkModule);
      Result.SetDeclaration(DeclEl);
      if (pas.PasTree.TPasExpr.isPrototypeOf(RefEl)) Self.SetResolvedRefAccess(RefEl,Result,Access);
      Self.EmitElementHints(RefEl,DeclEl);
      return Result;
    };
    this.CreateScope = function (El, ScopeClass) {
      var Result = null;
      if (!ScopeClass.IsStoredInElement()) this.RaiseInternalError(20160923121858,"");
      if (El.FData !== null) this.RaiseInternalError(20160923121849,"");
      Result = ScopeClass.$create("Create$1");
      if (Result.$class.FreeOnPop()) {
        Result.SetElement(El);
        El.FData = Result;
        Result.Owner = this;
      } else this.AddResolveData(El,Result,$mod.TPasResolver.TResolveDataListKind.lkModule);
      return Result;
    };
    this.PopScope = function () {
      var Scope = null;
      if (this.FScopeCount === 0) this.RaiseInternalError(20160922163557,"");
      this.FScopeCount -= 1;
      if (this.FTopScope.$class.FreeOnPop()) {
        Scope = this.FScopes[this.FScopeCount];
        if ((Scope.FElement !== null) && (Scope.FElement.FData === Scope)) Scope.FElement.FData = null;
        if (Scope === this.FDefaultScope) this.FDefaultScope = null;
        this.FScopes[this.FScopeCount] = null;
        Scope = rtl.freeLoc(Scope);
      };
      if (this.FScopeCount > 0) {
        this.FTopScope = this.FScopes[this.FScopeCount - 1]}
       else this.FTopScope = null;
    };
    this.PushScope = function (Scope) {
      if (Scope === null) this.RaiseInternalError(20160922163601,"");
      if (rtl.length(this.FScopes) === this.FScopeCount) this.FScopes = rtl.arraySetLength(this.FScopes,null,(this.FScopeCount * 2) + 10);
      this.FScopes[this.FScopeCount] = Scope;
      this.FScopeCount += 1;
      this.FTopScope = Scope;
    };
    this.PushScope$1 = function (El, ScopeClass) {
      var Result = null;
      Result = this.CreateScope(El,ScopeClass);
      this.PushScope(Result);
      return Result;
    };
    this.PushModuleDotScope = function (aModule) {
      var Result = null;
      Result = $mod.TPasModuleDotScope.$create("Create$1");
      Result.Owner = this;
      Result.SetModule(aModule);
      if (pas.PasTree.TPasProgram.isPrototypeOf(aModule)) {
        if (aModule.ProgramSection !== null) Result.InterfaceScope = rtl.as($mod.NoNil(aModule.ProgramSection.FData),$mod.TPasSectionScope);
      } else if (pas.PasTree.TPasLibrary.isPrototypeOf(aModule)) {
        if (aModule.LibrarySection !== null) Result.InterfaceScope = rtl.as($mod.NoNil(aModule.LibrarySection.FData),$mod.TPasSectionScope);
      } else {
        if (aModule.InterfaceSection !== null) Result.InterfaceScope = rtl.as($mod.NoNil(aModule.InterfaceSection.FData),$mod.TPasSectionScope);
        if (((aModule === this.FRootElement) && (aModule.ImplementationSection !== null)) && (aModule.ImplementationSection.FData !== null)) Result.ImplementationScope = rtl.as($mod.NoNil(aModule.ImplementationSection.FData),$mod.TPasSectionScope);
        if (pas.SysUtils.CompareText(aModule.FName,"system") === 0) Result.SystemScope = this.FDefaultScope;
      };
      this.PushScope(Result);
      return Result;
    };
    this.PushClassDotScope = function (CurClassType) {
      var Result = null;
      var ClassScope = null;
      var Ref = null;
      if (CurClassType.get().IsForward) {
        Ref = rtl.as(CurClassType.get().FData,$mod.TResolvedReference);
        CurClassType.set(rtl.as(Ref.FDeclaration,pas.PasTree.TPasClassType));
      };
      if (CurClassType.get().FData === null) this.RaiseInternalError(20160922163611,"");
      ClassScope = rtl.as($mod.NoNil(CurClassType.get().FData),$mod.TPasClassScope);
      Result = $mod.TPasDotClassScope.$create("Create$1");
      Result.Owner = this;
      Result.SetClassScope(ClassScope);
      this.PushScope(Result);
      return Result;
    };
    this.PushRecordDotScope = function (CurRecordType) {
      var Result = null;
      var RecScope = null;
      RecScope = rtl.as($mod.NoNil(CurRecordType.FData),$mod.TPasRecordScope);
      Result = $mod.TPasDotRecordScope.$create("Create$1");
      Result.Owner = this;
      Result.IdentifierScope = RecScope;
      this.PushScope(Result);
      return Result;
    };
    this.PushEnumDotScope = function (CurEnumType) {
      var Result = null;
      var EnumScope = null;
      EnumScope = rtl.as($mod.NoNil(CurEnumType.FData),$mod.TPasEnumTypeScope);
      Result = $mod.TPasDotEnumTypeScope.$create("Create$1");
      Result.Owner = this;
      Result.IdentifierScope = EnumScope;
      this.PushScope(Result);
      return Result;
    };
    this.ResetSubScopes = function (Depth) {
      Depth.set(this.FSubScopeCount);
      while ($mod.TPasSubScope.isPrototypeOf(this.FTopScope)) {
        if (this.FSubScopeCount === rtl.length(this.FSubScopes)) this.FSubScopes = rtl.arraySetLength(this.FSubScopes,null,this.FSubScopeCount + 4);
        this.FSubScopes[this.FSubScopeCount] = this.FTopScope;
        this.FSubScopeCount += 1;
        this.FScopeCount -= 1;
        this.FScopes[this.FScopeCount] = null;
        if (this.FScopeCount > 0) {
          this.FTopScope = this.FScopes[this.FScopeCount - 1]}
         else this.FTopScope = null;
      };
    };
    this.RestoreSubScopes = function (Depth) {
      while (this.FSubScopeCount > Depth) {
        if (this.FScopeCount === rtl.length(this.FScopes)) this.FScopes = rtl.arraySetLength(this.FScopes,null,this.FScopeCount + 4);
        this.FSubScopeCount -= 1;
        this.FScopes[this.FScopeCount] = this.FSubScopes[this.FSubScopeCount];
        this.FTopScope = this.FScopes[this.FScopeCount];
        this.FSubScopes[this.FSubScopeCount] = null;
        this.FScopeCount += 1;
      };
    };
    this.GetInheritedExprScope = function (ErrorEl) {
      var Result = null;
      var Scope = null;
      var i = 0;
      i = this.FScopeCount;
      do {
        i -= 1;
        if (i < 0) this.RaiseMsg(20171006001229,3044,rtl.getResStr(pas.PasResolveEval,"sIllegalExpression"),[],ErrorEl);
        Scope = this.GetScopes(i);
        if ($mod.TPasProcedureScope.isPrototypeOf(Scope)) return Scope;
      } while (!false);
      Result = null;
      return Result;
    };
    this.MangleSourceLineNumber = function (Line, Column) {
      var Result = 0;
      if ((Column < 2048) && (Line < 1048575)) {
        Result = -((Line * 2048) + Column)}
       else Result = Line;
      return Result;
    };
    this.UnmangleSourceLineNumber = function (LineNumber, Line, Column) {
      Line.set(LineNumber);
      Column.set(0);
      if (Line.get() < 0) {
        Line.set(-Line.get());
        Column.set(Line.get() % 2048);
        Line.set(Math.floor(Line.get() / 2048));
      };
    };
    this.GetDbgSourcePosStr = function (El) {
      var Result = "";
      var Line = 0;
      var Column = 0;
      if (El === null) return "nil";
      this.UnmangleSourceLineNumber(El.SourceLinenumber,{get: function () {
          return Line;
        }, set: function (v) {
          Line = v;
        }},{get: function () {
          return Column;
        }, set: function (v) {
          Column = v;
        }});
      Result = (El.SourceFilename + "(") + pas.SysUtils.IntToStr(Line);
      if (Column > 0) Result = (Result + ",") + pas.SysUtils.IntToStr(Column);
      Result = Result + ")";
      return Result;
    };
    this.GetElementSourcePosStr = function (El) {
      var Result = "";
      var Line = 0;
      var Column = 0;
      if (El === null) return "nil";
      this.$class.UnmangleSourceLineNumber(El.SourceLinenumber,{get: function () {
          return Line;
        }, set: function (v) {
          Line = v;
        }},{get: function () {
          return Column;
        }, set: function (v) {
          Column = v;
        }});
      if (Line === 0) {
        if (pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(El)) return "intrinsic";
      };
      Result = (this.FCurrentParser.FScanner.FormatPath(El.SourceFilename) + "(") + pas.SysUtils.IntToStr(Line);
      if (Column > 0) Result = (Result + ",") + pas.SysUtils.IntToStr(Column);
      Result = Result + ")";
      return Result;
    };
    this.SetLastMsg = function (id, MsgType, MsgNumber, Fmt, Args, PosEl) {
      var Column = 0;
      var Row = 0;
      this.FLastMsgId = id;
      this.FLastMsgType = MsgType;
      this.FLastMsgNumber = MsgNumber;
      this.FLastMsgPattern = Fmt;
      this.FLastMsg = pas.PScanner.SafeFormat(Fmt,Args);
      this.FLastElement = PosEl;
      if (PosEl === null) {
        this.FLastSourcePos = new pas.PScanner.TPasSourcePos(this.FCurrentParser.CurSourcePos())}
       else {
        this.FLastSourcePos.FileName = PosEl.SourceFilename;
        this.$class.UnmangleSourceLineNumber(PosEl.SourceLinenumber,{get: function () {
            return Row;
          }, set: function (v) {
            Row = v;
          }},{get: function () {
            return Column;
          }, set: function (v) {
            Column = v;
          }});
        if (Row >= 0) {
          this.FLastSourcePos.Row = Row}
         else this.FLastSourcePos.Row = 0;
        if (Column >= 0) {
          this.FLastSourcePos.Column = Column}
         else this.FLastSourcePos.Column = 0;
      };
      pas.PScanner.CreateMsgArgs({p: this, get: function () {
          return this.p.FLastMsgArgs;
        }, set: function (v) {
          this.p.FLastMsgArgs = v;
        }},Args);
    };
    this.LogMsg = function (id, MsgType, MsgNumber, Fmt, Args, PosEl) {
      var Scanner = null;
      var State = 0;
      Scanner = this.FCurrentParser.FScanner;
      if (Scanner !== null) {
        if ((this.FStep < $mod.TPasResolverStep.prsFinishingModule) && Scanner.IgnoreMsgType(MsgType)) return;
        if (MsgType >= pas.PScanner.TMessageType.mtWarning) {
          State = Scanner.GetWarnMsgState(MsgNumber);
          var $tmp1 = State;
          if ($tmp1 === pas.PScanner.TWarnMsgState.wmsOff) {
            return;
          } else if ($tmp1 === pas.PScanner.TWarnMsgState.wmsError) {
            this.RaiseMsg(id,MsgNumber,Fmt,Args,PosEl);
            return;
          };
        };
      };
      this.SetLastMsg(id,MsgType,MsgNumber,Fmt,Args,PosEl);
      if (this.FOnLog != null) {
        this.FOnLog(this,this.FLastMsg)}
       else if (this.FCurrentParser.FOnLog != null) this.FCurrentParser.FOnLog(this,this.FLastMsg);
    };
    this.GetWarnIdentifierNumbers = function (Identifier, MsgNumbers) {
      var Self = this;
      var Result = false;
      function SetNumber(number) {
        MsgNumbers.set(rtl.arraySetLength(MsgNumbers.get(),0,1));
        MsgNumbers.get()[0] = number;
      };
      function SetNumbers(Numbers) {
        var i = 0;
        MsgNumbers.set(rtl.arraySetLength(MsgNumbers.get(),0,rtl.length(Numbers)));
        for (var $l1 = 0, $end2 = rtl.length(Numbers) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          MsgNumbers.get()[i] = Numbers[i];
        };
      };
      if (Identifier === "") return false;
      if (Identifier.charCodeAt(0) in rtl.createSet(null,48,57)) return false;
      Result = true;
      var $tmp1 = pas.SysUtils.UpperCase(Identifier);
      if ($tmp1 === "CONSTRUCTING_ABSTRACT") {
        SetNumber(4046)}
       else if ($tmp1 === "SYMBOL_DEPRECATED") {
        SetNumber(5043)}
       else if ($tmp1 === "SYMBOL_EXPERIMENTAL") {
        SetNumber(5079)}
       else if ($tmp1 === "SYMBOL_LIBRARY") {
        SetNumber(5065)}
       else if ($tmp1 === "SYMBOL_PLATFORM") {
        SetNumber(5076)}
       else if ($tmp1 === "SYMBOL_UNIMPLEMENTED") {
        SetNumber(5078)}
       else if ($tmp1 === "HIDDEN_VIRTUAL") {
        SetNumber(3077)}
       else if ($tmp1 === "GARBAGE") {
        SetNumber(3058)}
       else if ($tmp1 === "BOUNDS_ERROR") {
        SetNumbers([3064,3065,3066,3070])}
       else if ($tmp1 === "MESSAGE_DIRECTIVE") {
        SetNumber(1025)}
       else {
        Result = false;
      };
      return Result;
    };
    this.GetIncompatibleTypeDesc = function (GotType, ExpType, GotDesc, ExpDesc) {
      if (GotType.BaseType !== ExpType.BaseType) {
        GotDesc.set(this.GetBaseDescription(GotType,false));
        if (ExpType.BaseType === $mod.TResolverBaseType.btNil) {
          ExpDesc.set(this.GetBaseTypeNames($mod.TResolverBaseType.btPointer))}
         else ExpDesc.set(this.GetBaseDescription(ExpType,false));
        if (GotDesc.get() === ExpDesc.get()) {
          GotDesc.set(this.GetBaseDescription(GotType,true));
          ExpDesc.set(this.GetBaseDescription(ExpType,true));
        };
      } else if ((GotType.LoTypeEl !== null) && (ExpType.LoTypeEl !== null)) {
        GotDesc.set(this.GetTypeDescription$1(GotType,false));
        ExpDesc.set(this.GetTypeDescription$1(ExpType,false));
        if (GotDesc.get() !== ExpDesc.get()) return;
        if (GotType.HiTypeEl !== ExpType.HiTypeEl) {
          GotDesc.set(this.GetTypeDescription(GotType.HiTypeEl,false));
          ExpDesc.set(this.GetTypeDescription(ExpType.HiTypeEl,false));
          if (GotDesc.get() !== ExpDesc.get()) return;
        };
        GotDesc.set(this.GetTypeDescription$1(GotType,true));
        ExpDesc.set(this.GetTypeDescription$1(ExpType,true));
      } else {
        GotDesc.set(this.GetResolverResultDescription(GotType,true));
        ExpDesc.set(this.GetResolverResultDescription(ExpType,true));
        if (GotDesc.get() === ExpDesc.get()) {
          GotDesc.set(this.GetResolverResultDescription(GotType,false));
          ExpDesc.set(this.GetResolverResultDescription(ExpType,false));
        };
      };
    };
    this.GetIncompatibleTypeDesc$1 = function (GotType, ExpType, GotDesc, ExpDesc) {
      GotDesc.set(this.GetTypeDescription(GotType,false));
      ExpDesc.set(this.GetTypeDescription(ExpType,false));
      if (GotDesc.get() !== ExpDesc.get()) return;
      GotDesc.set(this.GetTypeDescription(GotType,true));
      ExpDesc.set(this.GetTypeDescription(ExpType,true));
    };
    this.RaiseMsg = function (Id, MsgNumber, Fmt, Args, ErrorPosEl) {
      var E = null;
      this.SetLastMsg(Id,pas.PScanner.TMessageType.mtError,MsgNumber,Fmt,Args,ErrorPosEl);
      E = $mod.EPasResolve.$create("Create$1",[this.FLastMsg]);
      E.Id = Id;
      E.MsgType = pas.PScanner.TMessageType.mtError;
      E.MsgNumber = MsgNumber;
      E.MsgPattern = Fmt;
      E.SetPasElement(ErrorPosEl);
      E.Args = this.FLastMsgArgs;
      E.SourcePos = new pas.PScanner.TPasSourcePos(this.FLastSourcePos);
      throw E;
    };
    this.RaiseNotYetImplemented = function (id, El, Msg) {
      var s = "";
      s = ((rtl.getResStr(pas.PasResolveEval,"sNotYetImplemented") + " [") + pas.SysUtils.IntToStr(id)) + "]";
      if (Msg !== "") s = (s + " ") + Msg;
      this.RaiseMsg(id,3002,s,[pas.PasResolveEval.GetObjName(El)],El);
    };
    this.RaiseInternalError = function (id, Msg) {
      throw pas.SysUtils.Exception.$create("Create$1",[(("Internal error: [" + pas.SysUtils.IntToStr(id)) + "] ") + Msg]);
    };
    this.RaiseInvalidScopeForElement = function (id, El, Msg) {
      var i = 0;
      var s = "";
      s = ((("[" + pas.SysUtils.IntToStr(id)) + '] invalid scope for "') + pas.PasResolveEval.GetObjName(El)) + '": ';
      for (var $l1 = 0, $end2 = this.FScopeCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (i > 0) s = s + ",";
        s = s + this.GetScopes(i).$classname;
      };
      if (Msg !== "") s = (s + ": ") + Msg;
      this.RaiseInternalError(id,s);
    };
    this.RaiseIdentifierNotFound = function (id, Identifier, El) {
      this.RaiseMsg(id,3001,rtl.getResStr(pas.PasResolveEval,"sIdentifierNotFound"),[Identifier],El);
    };
    this.RaiseXExpectedButYFound = function (id, X, Y, El) {
      this.RaiseMsg(id,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),[X,Y],El);
    };
    this.RaiseContextXExpectedButYFound = function (id, C, X, Y, El) {
      this.RaiseMsg(id,3078,rtl.getResStr(pas.PasResolveEval,"sContextExpectedXButFoundY"),[C,X,Y],El);
    };
    this.RaiseContextXInvalidY = function (id, X, Y, El) {
      this.RaiseMsg(id,3079,rtl.getResStr(pas.PasResolveEval,"sContextXInvalidY"),[X,Y],El);
    };
    this.RaiseConstantExprExp = function (id, ErrorEl) {
      this.RaiseMsg(id,3036,rtl.getResStr(pas.PasResolveEval,"sConstantExpressionExpected"),[],ErrorEl);
    };
    this.RaiseVarExpected = function (id, ErrorEl, IdentEl) {
      if (pas.PasTree.TPasProperty.isPrototypeOf(IdentEl)) {
        this.RaiseMsg(id,3059,rtl.getResStr(pas.PasResolveEval,"sNoMemberIsProvidedToAccessProperty"),[],ErrorEl)}
       else this.RaiseMsg(id,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],ErrorEl);
    };
    this.RaiseRangeCheck = function (id, ErrorEl) {
      this.RaiseMsg(id,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],ErrorEl);
    };
    this.RaiseIncompatibleTypeDesc = function (id, MsgNumber, Args, GotDesc, ExpDesc, ErrorEl) {
      var Self = this;
      function GetString(ArgNo) {
        var Result = "";
        if (ArgNo > (rtl.length(Args) - 1)) return "invalid param " + pas.SysUtils.IntToStr(ArgNo);
        if (rtl.isString(Args[ArgNo])) {
          Result = "" + Args[ArgNo]}
         else Result = "invalid param " + typeof(Args[ArgNo]);
        return Result;
      };
      var $tmp1 = MsgNumber;
      if ($tmp1 === 3035) {
        Self.RaiseMsg(id,MsgNumber,rtl.getResStr(pas.PasResolveEval,"sIllegalTypeConversionTo"),[GotDesc,ExpDesc],ErrorEl)}
       else if ($tmp1 === 3028) {
        Self.RaiseMsg(id,MsgNumber,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[GotDesc,ExpDesc],ErrorEl)}
       else if ($tmp1 === 3006) {
        Self.RaiseMsg(id,MsgNumber,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[GetString(0),GotDesc,ExpDesc],ErrorEl)}
       else if ($tmp1 === 3007) {
        Self.RaiseMsg(id,MsgNumber,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNoVarParamMustMatchExactly"),[GetString(0),GotDesc,ExpDesc],ErrorEl)}
       else if ($tmp1 === 3019) {
        Self.RaiseMsg(id,MsgNumber,rtl.getResStr(pas.PasResolveEval,"sResultTypeMismatchExpectedButFound"),[GotDesc,ExpDesc],ErrorEl)}
       else if ($tmp1 === 3010) {
        Self.RaiseMsg(id,MsgNumber,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),[GotDesc,ExpDesc],ErrorEl)}
       else if ($tmp1 === 3082) {
        Self.RaiseMsg(id,MsgNumber,rtl.getResStr(pas.PasResolveEval,"sOperatorIsNotOverloadedAOpB"),[GotDesc,GetString(0),ExpDesc],ErrorEl)}
       else if ($tmp1 === 3029) {
        Self.RaiseMsg(id,MsgNumber,rtl.getResStr(pas.PasResolveEval,"sTypesAreNotRelatedXY"),[GotDesc,ExpDesc],ErrorEl)}
       else {
        Self.RaiseInternalError(20170329112911,"");
      };
    };
    this.RaiseIncompatibleType = function (id, MsgNumber, Args, GotType, ExpType, ErrorEl) {
      var DescA = "";
      var DescB = "";
      DescA = this.GetTypeDescription(GotType,false);
      DescB = this.GetTypeDescription(ExpType,false);
      if (DescA === DescB) {
        DescA = this.GetTypeDescription(GotType,true);
        DescB = this.GetTypeDescription(ExpType,true);
      };
      this.RaiseIncompatibleTypeDesc(id,MsgNumber,Args,DescA,DescB,ErrorEl);
    };
    this.RaiseIncompatibleTypeRes = function (id, MsgNumber, Args, GotType, ExpType, ErrorEl) {
      var GotDesc = "";
      var ExpDesc = "";
      this.GetIncompatibleTypeDesc(GotType,ExpType,{get: function () {
          return GotDesc;
        }, set: function (v) {
          GotDesc = v;
        }},{get: function () {
          return ExpDesc;
        }, set: function (v) {
          ExpDesc = v;
        }});
      this.RaiseIncompatibleTypeDesc(id,MsgNumber,Args,GotDesc,ExpDesc,ErrorEl);
    };
    this.RaiseInvalidProcTypeModifier = function (id, ProcType, ptm, ErrorEl) {
      this.RaiseMsg(id,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(ProcType),pas.PasTree.ProcTypeModifiers[ptm]],ErrorEl);
    };
    this.RaiseInvalidProcModifier = function (id, Proc, pm, ErrorEl) {
      this.RaiseMsg(id,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[$mod.GetElementTypeName(Proc),pas.PasTree.ModifierNames[pm]],ErrorEl);
    };
    this.WriteScopes = function () {
      var i = 0;
      var Scope = null;
      pas.System.Writeln("TPasResolver.WriteScopes ScopeCount=",this.FScopeCount);
      for (var $l1 = this.FScopeCount - 1; $l1 >= 0; $l1--) {
        i = $l1;
        Scope = this.GetScopes(i);
        pas.System.Writeln("  ",i,"\/",this.FScopeCount," ",pas.PasResolveEval.GetObjName(Scope));
        Scope.WriteIdentifiers("  ");
      };
    };
    this.ComputeElement = function (El, ResolvedEl, Flags, StartEl) {
      var Self = this;
      function ComputeIdentifier(Expr) {
        var Ref = null;
        var Proc = null;
        var ProcType = null;
        var aClass = null;
        Ref = Expr.FData;
        Self.ComputeElement(Ref.FDeclaration,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc)),StartEl);
        if ($mod.TResolvedReferenceFlag.rrfConstInherited in Ref.Flags) ResolvedEl.get().Flags = rtl.excludeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfWritable);
        if ((pas.PasTree.TPrimitiveExpr.isPrototypeOf(Expr) && pas.PasTree.TParamsExpr.isPrototypeOf(Expr.FParent)) && (Expr.Value === "FA")) if (!($mod.TPasResolverComputeFlag.rcSetReferenceFlags in Flags) && ($mod.TResolvedReferenceFlag.rrfNoImplicitCallWithoutParams in Ref.Flags)) return;
        if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btProc) {
          if ($mod.TPasResolverComputeFlag.rcNoImplicitProc in Flags) {
            if ($mod.TPasResolverComputeFlag.rcSetReferenceFlags in Flags) Ref.Flags = rtl.includeSet(Ref.Flags,$mod.TResolvedReferenceFlag.rrfNoImplicitCallWithoutParams);
          } else if (rtl.eqSet(rtl.intersectSet(rtl.createSet($mod.TPasResolverComputeFlag.rcConstant,$mod.TPasResolverComputeFlag.rcType),Flags),{})) {
            Proc = rtl.as(ResolvedEl.get().IdentEl,pas.PasTree.TPasProcedure);
            if (!Self.ProcNeedsParams(Proc.ProcType)) {
              if (pas.PasTree.TPasFunction.isPrototypeOf(ResolvedEl.get().IdentEl)) {
                Self.ComputeElement(ResolvedEl.get().IdentEl.GetFT().ResultEl,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcType)),StartEl);
                ResolvedEl.get().Flags = rtl.excludeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfWritable);
              } else if ((ResolvedEl.get().IdentEl.$class.ClassType() === pas.PasTree.TPasConstructor) && ($mod.TResolvedReferenceFlag.rrfNewInstance in Ref.Flags)) {
                aClass = Self.GetReference_NewInstanceClass(Ref);
                $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btContext,aClass,aClass,Expr,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
              } else if (Self.ParentNeedsExprResult(Expr)) {
                return;
              };
              if ($mod.TPasResolverComputeFlag.rcSetReferenceFlags in Flags) Ref.Flags = rtl.includeSet(Ref.Flags,$mod.TResolvedReferenceFlag.rrfImplicitCallWithoutParams);
              ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfCanBeStatement);
            };
          };
        } else if (Self.IsProcedureType(ResolvedEl.get(),true)) {
          if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc,$mod.TPasResolverComputeFlag.rcNoImplicitProcType),Flags),{})) {
            if ($mod.TPasResolverComputeFlag.rcSetReferenceFlags in Flags) Ref.Flags = rtl.includeSet(Ref.Flags,$mod.TResolvedReferenceFlag.rrfNoImplicitCallWithoutParams);
          } else if (rtl.eqSet(rtl.intersectSet(rtl.createSet($mod.TPasResolverComputeFlag.rcConstant,$mod.TPasResolverComputeFlag.rcType),Flags),{})) {
            ProcType = ResolvedEl.get().LoTypeEl;
            if (!Self.ProcNeedsParams(ProcType)) {
              if (pas.PasTree.TPasFunctionType.isPrototypeOf(ResolvedEl.get().LoTypeEl)) {
                Self.ComputeElement(ResolvedEl.get().LoTypeEl.ResultEl,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcType)),StartEl)}
               else if (Self.ParentNeedsExprResult(Expr)) {
                return;
              };
              if ($mod.TPasResolverComputeFlag.rcSetReferenceFlags in Flags) Ref.Flags = rtl.includeSet(Ref.Flags,$mod.TResolvedReferenceFlag.rrfImplicitCallWithoutParams);
              ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfCanBeStatement);
            };
          };
        };
      };
      function ComputeInherited(Expr) {
        var Ref = null;
        var Proc = null;
        var TypeEl = null;
        var aClass = null;
        var HasName = false;
        Ref = El.FData;
        Proc = rtl.as($mod.NoNil(Ref.FDeclaration),pas.PasTree.TPasProcedure);
        TypeEl = Proc.ProcType;
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btProc,Proc,TypeEl,TypeEl,rtl.createSet($mod.TPasResolverResultFlag.rrfCanBeStatement));
        HasName = (El.FParent.$class.ClassType() === pas.PasTree.TBinaryExpr) && (El.FParent.OpCode === pas.PasTree.TExprOpCode.eopNone);
        if (HasName || ($mod.TPasResolverComputeFlag.rcNoImplicitProc in Flags)) return;
        if (pas.PasTree.TPasFunction.isPrototypeOf(Proc)) {
          Self.ComputeElement(Proc.GetFT().ResultEl,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcType)),StartEl);
          ResolvedEl.get().Flags = rtl.excludeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfWritable);
        } else if ((Proc.$class.ClassType() === pas.PasTree.TPasConstructor) && ($mod.TResolvedReferenceFlag.rrfNewInstance in Ref.Flags)) {
          aClass = Self.GetReference_NewInstanceClass(Ref);
          $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btContext,aClass,aClass,Expr,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
        } else if (Self.ParentNeedsExprResult(Expr)) {
          return;
        };
        if ($mod.TPasResolverComputeFlag.rcSetReferenceFlags in Flags) Ref.Flags = rtl.includeSet(Ref.Flags,$mod.TResolvedReferenceFlag.rrfImplicitCallWithoutParams);
        ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfCanBeStatement);
      };
      var DeclEl = null;
      var ElClass = null;
      var bt = 0;
      var TypeEl = null;
      if (StartEl === null) StartEl = El;
      ResolvedEl.set(new $mod.TPasResolverResult());
      if (El === null) return;
      ElClass = El.$class.ClassType();
      if (ElClass === pas.PasTree.TPrimitiveExpr) {
        var $tmp1 = El.Kind;
        if (($tmp1 === pas.PasTree.TPasExprKind.pekIdent) || ($tmp1 === pas.PasTree.TPasExprKind.pekSelf)) {
          if (!$mod.TResolvedReference.isPrototypeOf(El.FData)) Self.RaiseNotYetImplemented(20160922163658,El,(((('Value="' + El.Value) + '" CustomData=') + pas.PasResolveEval.GetObjName(El.FData)) + " ") + Self.GetElementSourcePosStr(El));
          ComputeIdentifier(El);
        } else if ($tmp1 === pas.PasTree.TPasExprKind.pekNumber) {
          if (pas.System.Pos(".",El.Value) > 0) {
            $mod.SetResolverValueExpr(ResolvedEl,Self.FBaseTypeExtended,Self.FBaseTypes[Self.FBaseTypeExtended],Self.FBaseTypes[Self.FBaseTypeExtended],El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
           else $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btLongint,Self.FBaseTypes[$mod.TResolverBaseType.btLongint],Self.FBaseTypes[$mod.TResolverBaseType.btLongint],El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekString) {
          bt = Self.IsCharLiteral(El.Value,El);
          if (bt in $mod.btAllChars) {
            if (bt === Self.FBaseTypeChar) bt = $mod.TResolverBaseType.btChar;
            $mod.SetResolverValueExpr(ResolvedEl,bt,Self.FBaseTypes[bt],Self.FBaseTypes[bt],El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
          } else $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btString,Self.FBaseTypes[$mod.TResolverBaseType.btString],Self.FBaseTypes[$mod.TResolverBaseType.btString],El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
        } else if ($tmp1 === pas.PasTree.TPasExprKind.pekNil) {
          $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btNil,Self.FBaseTypes[$mod.TResolverBaseType.btNil],Self.FBaseTypes[$mod.TResolverBaseType.btNil],El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekBoolConst) {
          $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btBoolean,Self.FBaseTypes[$mod.TResolverBaseType.btBoolean],Self.FBaseTypes[$mod.TResolverBaseType.btBoolean],El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
         else {
          Self.RaiseNotYetImplemented(20160922163701,El,"");
        };
      } else if (ElClass === pas.PasTree.TSelfExpr) {
        if (!$mod.TResolvedReference.isPrototypeOf(El.FData)) Self.RaiseNotYetImplemented(20170216150017,El,((((' El="' + pas.PasResolveEval.GetObjName(El)) + '" CustomData=') + pas.PasResolveEval.GetObjName(El.FData)) + " ") + Self.GetElementSourcePosStr(El));
        ComputeIdentifier(El);
      } else if (ElClass === pas.PasTree.TPasUnresolvedSymbolRef) {
        if ($mod.TResElDataBaseType.isPrototypeOf(El.FData)) {
          $mod.SetResolverIdentifier(ResolvedEl,El.FData.BaseType,El,El,El,{})}
         else if ($mod.TResElDataBuiltInProc.isPrototypeOf(El.FData)) {
          $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btBuiltInProc,El,El,El,{});
          if ($mod.TBuiltInProcFlag.bipfCanBeStatement in El.FData.Flags) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfCanBeStatement);
        } else Self.RaiseNotYetImplemented(20160926194756,El,"");
      } else if (ElClass === pas.PasTree.TBoolConstExpr) {
        $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btBoolean,Self.FBaseTypes[$mod.TResolverBaseType.btBoolean],Self.FBaseTypes[$mod.TResolverBaseType.btBoolean],El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
       else if (ElClass === pas.PasTree.TBinaryExpr) {
        Self.ComputeBinaryExpr(El,ResolvedEl,rtl.refSet(Flags),StartEl)}
       else if (ElClass === pas.PasTree.TUnaryExpr) {
        if (El.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopAddress,pas.PasTree.TExprOpCode.eopMemAddress)) {
          Self.ComputeElement(El.Operand,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc)),StartEl)}
         else Self.ComputeElement(El.Operand,ResolvedEl,rtl.refSet(Flags),StartEl);
        var $tmp2 = El.OpCode;
        if (($tmp2 === pas.PasTree.TExprOpCode.eopAdd) || ($tmp2 === pas.PasTree.TExprOpCode.eopSubtract)) {
          if (ResolvedEl.get().BaseType in rtl.unionSet($mod.btAllInteger,$mod.btAllFloats)) {
            return}
           else Self.RaiseMsg(20170216152532,3085,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierInFrontOf"),[pas.PasTree.OpcodeStrings[El.OpCode],Self.GetResolverResultDescription(ResolvedEl.get(),false)],El)}
         else if ($tmp2 === pas.PasTree.TExprOpCode.eopNot) {
          if (ResolvedEl.get().BaseType in rtl.unionSet($mod.btAllInteger,$mod.btAllBooleans)) {}
          else Self.ComputeUnaryNot(El,ResolvedEl,rtl.refSet(Flags));
          return;
        } else if ($tmp2 === pas.PasTree.TExprOpCode.eopAddress) {
          if ((ResolvedEl.get().BaseType === $mod.TResolverBaseType.btProc) && pas.PasTree.TPasProcedure.isPrototypeOf(ResolvedEl.get().IdentEl)) {
            $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btContext,ResolvedEl.get().LoTypeEl,ResolvedEl.get().HiTypeEl,El.Operand,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
            return;
          } else if (($mod.TPasResolverResultFlag.rrfReadable in ResolvedEl.get().Flags) && (ResolvedEl.get().BaseType !== $mod.TResolverBaseType.btPointer)) {
            $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btPointer,ResolvedEl.get().LoTypeEl,ResolvedEl.get().HiTypeEl,El.Operand,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
            return;
          } else Self.RaiseMsg(20180208121541,3085,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierInFrontOf"),[pas.PasTree.OpcodeStrings[El.OpCode],Self.GetResolverResultDescription(ResolvedEl.get(),false)],El)}
         else if ($tmp2 === pas.PasTree.TExprOpCode.eopDeref) {
          Self.ComputeDereference(El,ResolvedEl);
          return;
        } else if ($tmp2 === pas.PasTree.TExprOpCode.eopMemAddress) if ((ResolvedEl.get().BaseType === $mod.TResolverBaseType.btContext) && pas.PasTree.TPasProcedureType.isPrototypeOf(ResolvedEl.get().LoTypeEl)) {
          return}
         else Self.RaiseMsg(20180208121549,3085,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierInFrontOf"),[pas.PasTree.OpcodeStrings[El.OpCode],Self.GetResolverResultDescription(ResolvedEl.get(),false)],El);
        Self.RaiseNotYetImplemented(20160926142426,El,"");
      } else if (ElClass === pas.PasTree.TParamsExpr) {
        var $tmp3 = El.Kind;
        if ($tmp3 === pas.PasTree.TPasExprKind.pekArrayParams) {
          Self.ComputeArrayParams(El,ResolvedEl,rtl.refSet(Flags),StartEl)}
         else if ($tmp3 === pas.PasTree.TPasExprKind.pekFuncParams) {
          Self.ComputeFuncParams(El,ResolvedEl,rtl.refSet(Flags),StartEl)}
         else if ($tmp3 === pas.PasTree.TPasExprKind.pekSet) {
          Self.ComputeSetParams(El,ResolvedEl,rtl.refSet(Flags),StartEl)}
         else {
          Self.RaiseNotYetImplemented(20161010184559,El,"");
        };
      } else if (ElClass === pas.PasTree.TInheritedExpr) {
        if ($mod.TResolvedReference.isPrototypeOf(El.FData)) {
          ComputeInherited(El)}
         else $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btBuiltInProc,null,null,null,rtl.createSet($mod.TPasResolverResultFlag.rrfCanBeStatement));
      } else if ((ElClass === pas.PasTree.TPasAliasType) || (ElClass === pas.PasTree.TPasTypeAliasType)) {
        Self.ComputeElement(El.DestType,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcType)),StartEl);
        ResolvedEl.get().IdentEl = El;
        ResolvedEl.get().HiTypeEl = El;
      } else if (ElClass === pas.PasTree.TPasVariable) {
        if ($mod.TPasResolverComputeFlag.rcConstant in Flags) Self.RaiseConstantExprExp(20170216152737,StartEl);
        Self.ComputeElement(El.VarType,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcType)),StartEl);
        ResolvedEl.get().IdentEl = El;
        ResolvedEl.get().Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable);
      } else if (ElClass === pas.PasTree.TPasConst) {
        if (El.VarType !== null) {
          if (!El.IsConst && rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TPasResolverComputeFlag.rcConstant,$mod.TPasResolverComputeFlag.rcType),Flags),{})) Self.RaiseConstantExprExp(20170216152739,StartEl);
          Self.ComputeElement(El.VarType,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcType)),StartEl);
          ResolvedEl.get().IdentEl = El;
          if (El.IsConst) {
            ResolvedEl.get().Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable)}
           else ResolvedEl.get().Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable);
        } else {
          Self.ComputeElement(El.Expr,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcConstant)),StartEl);
          ResolvedEl.get().IdentEl = El;
          ResolvedEl.get().Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable);
        };
      } else if (ElClass === pas.PasTree.TPasEnumValue) {
        TypeEl = rtl.as($mod.NoNil(El.FParent),pas.PasTree.TPasEnumType);
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btContext,El,TypeEl,TypeEl,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable));
      } else if (ElClass === pas.PasTree.TPasEnumType) {
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btContext,El,El,El,{})}
       else if (ElClass === pas.PasTree.TPasProperty) {
        if ($mod.TPasResolverComputeFlag.rcConstant in Flags) Self.RaiseConstantExprExp(20170216152741,StartEl);
        if (Self.GetPasPropertyArgs(El).FCount === 0) {
          Self.ComputeElement(Self.GetPasPropertyType(El),ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcType)),StartEl);
          ResolvedEl.get().IdentEl = El;
          ResolvedEl.get().Flags = {};
          if (Self.GetPasPropertyGetter(El) !== null) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfReadable);
          if (Self.GetPasPropertySetter(El) !== null) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfWritable);
          if (Self.IsProcedureType(ResolvedEl.get(),true)) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfCanBeStatement);
        } else {
          $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btArrayProperty,El,null,null,{});
        };
      } else if (ElClass === pas.PasTree.TPasArgument) {
        if ($mod.TPasResolverComputeFlag.rcConstant in Flags) Self.RaiseConstantExprExp(20170216152744,StartEl);
        if (El.ArgType === null) {
          $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btUntyped,El,null,null,{})}
         else {
          Self.ComputeElement(El.ArgType,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcType)),StartEl);
          ResolvedEl.get().IdentEl = El;
        };
        ResolvedEl.get().Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable);
        if (El.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argDefault,pas.PasTree.TArgumentAccess.argVar,pas.PasTree.TArgumentAccess.argOut)) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfWritable);
        if (Self.IsProcedureType(ResolvedEl.get(),true)) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfCanBeStatement);
      } else if (ElClass === pas.PasTree.TPasClassType) {
        if (El.IsForward && (El.FData !== null)) {
          DeclEl = rtl.as(El.FData,$mod.TResolvedReference).FDeclaration;
          TypeEl = rtl.as($mod.NoNil(DeclEl),pas.PasTree.TPasClassType);
        } else TypeEl = El;
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btContext,TypeEl,TypeEl,TypeEl,{});
      } else if (ElClass === pas.PasTree.TPasClassOfType) {
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btContext,El,El,El,{})}
       else if (ElClass === pas.PasTree.TPasPointerType) {
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btContext,El,El,El,{})}
       else if (ElClass === pas.PasTree.TPasRecordType) {
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btContext,El,El,El,{})}
       else if (ElClass === pas.PasTree.TPasRangeType) {
        Self.ComputeElement(El.RangeExpr,ResolvedEl,rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),StartEl);
        ResolvedEl.get().IdentEl = El;
        ResolvedEl.get().LoTypeEl = El;
        ResolvedEl.get().HiTypeEl = ResolvedEl.get().LoTypeEl;
        if (ResolvedEl.get().ExprEl === null) ResolvedEl.get().ExprEl = El.RangeExpr;
        ResolvedEl.get().Flags = {};
      } else if (ElClass === pas.PasTree.TPasSetType) {
        Self.ComputeElement(El.EnumType,ResolvedEl,rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),StartEl);
        if (ResolvedEl.get().BaseType === $mod.TResolverBaseType.btRange) {
          Self.ConvertRangeToElement(ResolvedEl);
          ResolvedEl.get().LoTypeEl = El.EnumType;
          ResolvedEl.get().HiTypeEl = ResolvedEl.get().LoTypeEl;
        };
        ResolvedEl.get().SubType = ResolvedEl.get().BaseType;
        ResolvedEl.get().BaseType = $mod.TResolverBaseType.btSet;
        ResolvedEl.get().IdentEl = El;
        ResolvedEl.get().Flags = {};
      } else if (ElClass === pas.PasTree.TPasResultElement) {
        if ($mod.TPasResolverComputeFlag.rcConstant in Flags) Self.RaiseConstantExprExp(20170216152746,StartEl);
        Self.ComputeElement(El.ResultType,ResolvedEl,rtl.unionSet(Flags,rtl.createSet($mod.TPasResolverComputeFlag.rcType)),StartEl);
        ResolvedEl.get().IdentEl = El;
        ResolvedEl.get().Flags = rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable);
      } else if (ElClass === pas.PasTree.TPasUsesUnit) {
        if (pas.PasTree.TPasModule.isPrototypeOf(El.Module)) {
          $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btModule,El.Module,null,null,{})}
         else Self.RaiseNotYetImplemented(20170429112047,El.Module,"");
      } else if (El.$class.InheritsFrom(pas.PasTree.TPasModule)) {
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btModule,El,null,null,{})}
       else if (ElClass === pas.PasTree.TNilExpr) {
        $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btNil,Self.FBaseTypes[$mod.TResolverBaseType.btNil],Self.FBaseTypes[$mod.TResolverBaseType.btNil],El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
       else if (El.$class.InheritsFrom(pas.PasTree.TPasProcedure)) {
        TypeEl = El.ProcType;
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btProc,El,TypeEl,TypeEl,rtl.createSet($mod.TPasResolverResultFlag.rrfCanBeStatement));
        if (pas.PasTree.TPasFunction.isPrototypeOf(El)) ResolvedEl.get().Flags = rtl.includeSet(ResolvedEl.get().Flags,$mod.TPasResolverResultFlag.rrfReadable);
      } else if (El.$class.InheritsFrom(pas.PasTree.TPasProcedureType)) {
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btContext,El,El,El,rtl.createSet($mod.TPasResolverResultFlag.rrfCanBeStatement));
      } else if (ElClass === pas.PasTree.TPasArrayType) {
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btContext,El,El,El,{})}
       else if (ElClass === pas.PasTree.TArrayValues) {
        $mod.SetResolverValueExpr(ResolvedEl,$mod.TResolverBaseType.btArrayLit,null,null,El,rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
       else if (ElClass === pas.PasTree.TRecordValues) {
        Self.ComputeRecordValues(El,ResolvedEl,rtl.refSet(Flags),StartEl)}
       else if (ElClass === pas.PasTree.TPasStringType) {
        Self.RaiseMsg(20170419203146,3003,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifier"),["["],El);
      } else if (ElClass === pas.PasTree.TPasResString) {
        $mod.SetResolverIdentifier(ResolvedEl,$mod.TResolverBaseType.btString,El,Self.FBaseTypes[$mod.TResolverBaseType.btString],Self.FBaseTypes[$mod.TResolverBaseType.btString],rtl.createSet($mod.TPasResolverResultFlag.rrfReadable))}
       else Self.RaiseNotYetImplemented(20160922163705,El,"");
    };
    this.Eval = function (Expr, Flags, Store) {
      var Result = null;
      Result = this.fExprEvaluator.Eval(Expr,rtl.refSet(Flags));
      if (Result === null) return Result;
      if ((((Store && (Expr.FData === null)) && (Result.FElement === null)) && !this.fExprEvaluator.IsSimpleExpr(Expr)) && (Expr.GetModule() === this.FRootElement)) {
        this.AddResolveData(Expr,Result,$mod.TPasResolver.TResolveDataListKind.lkModule);
      };
      return Result;
    };
    this.Eval$1 = function (Value, Flags, Store) {
      var Result = null;
      var Expr = null;
      Result = null;
      if (Value.ExprEl !== null) {
        Result = this.Eval(Value.ExprEl,rtl.refSet(Flags),Store)}
       else if (pas.PasTree.TPasConst.isPrototypeOf(Value.IdentEl)) {
        Expr = Value.IdentEl.Expr;
        if (Expr === null) return Result;
        Result = this.Eval(Expr,rtl.refSet(Flags),Store);
      };
      return Result;
    };
    this.IsSameType = function (TypeA, TypeB, ResolveAlias) {
      var Result = false;
      if ((TypeA === null) || (TypeB === null)) return false;
      var $tmp1 = ResolveAlias;
      if ($tmp1 === $mod.TPRResolveAlias.prraSimple) {
        TypeA = $mod.ResolveSimpleAliasType(TypeA);
        TypeB = $mod.ResolveSimpleAliasType(TypeB);
      } else if ($tmp1 === $mod.TPRResolveAlias.prraAlias) {
        TypeA = this.ResolveAliasType(TypeA);
        TypeB = this.ResolveAliasType(TypeB);
      };
      if (TypeA === TypeB) return true;
      if ((TypeA.$class.ClassType() === pas.PasTree.TPasUnresolvedSymbolRef) && (TypeB.$class.ClassType() === pas.PasTree.TPasUnresolvedSymbolRef)) {
        Result = pas.SysUtils.CompareText(TypeA.FName,TypeB.FName) === 0;
        return Result;
      };
      Result = false;
      return Result;
    };
    this.HasExactType = function (ResolvedEl) {
      var Result = false;
      var IdentEl = null;
      IdentEl = ResolvedEl.IdentEl;
      if (IdentEl === null) return false;
      if (pas.PasTree.TPasVariable.isPrototypeOf(IdentEl)) {
        return IdentEl.VarType !== null}
       else if (IdentEl.$class.ClassType() === pas.PasTree.TPasArgument) {
        return IdentEl.ArgType !== null}
       else if (IdentEl.$class.ClassType() === pas.PasTree.TPasResultElement) {
        return IdentEl.ResultType !== null}
       else Result = false;
      return Result;
    };
    this.CheckCallProcCompatibility = function (ProcType, Params, RaiseOnError, SetReferenceFlags) {
      var Result = 0;
      var ProcArgs = null;
      var i = 0;
      var ParamCnt = 0;
      var ParamCompatibility = 0;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var Flags = {};
      Result = 0;
      ProcArgs = ProcType.Args;
      ParamCnt = rtl.length(Params.Params);
      i = 0;
      while (i < ParamCnt) {
        Param = Params.Params[i];
        if (i < ProcArgs.FCount) {
          ParamCompatibility = this.CheckParamCompatibility(Param,rtl.getObject(ProcArgs.Get(i)),i,RaiseOnError,SetReferenceFlags);
          if (ParamCompatibility === 2147483647) return 2147483647;
        } else {
          if (pas.PasTree.TProcTypeModifier.ptmVarargs in ProcType.Modifiers) {
            if (SetReferenceFlags) {
              Flags = rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProcType,$mod.TPasResolverComputeFlag.rcSetReferenceFlags)}
             else Flags = rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProcType);
            this.ComputeElement(Param,{get: function () {
                return ParamResolved;
              }, set: function (v) {
                ParamResolved = v;
              }},rtl.refSet(Flags),Param);
            if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags)) {
              if (RaiseOnError) this.RaiseVarExpected(20180712001415,Param,ParamResolved.IdentEl);
              return 2147483647;
            };
            ParamCompatibility = 0;
          } else {
            if (RaiseOnError) this.RaiseMsg(20170216152408,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[this.GetProcTypeDescription(ProcType,rtl.createSet($mod.TPRProcTypeDescFlag.prptdUseName,$mod.TPRProcTypeDescFlag.prptdResolveSimpleAlias))],Param);
            return 2147483647;
          };
        };
        if (Result < 10000) {
          Result += ParamCompatibility}
         else Result = Math.max(Result,ParamCompatibility);
        i += 1;
      };
      if (i < ProcArgs.FCount) if (rtl.getObject(ProcArgs.Get(i)).ValueExpr === null) {
        if (RaiseOnError) this.RaiseMsg(20170216152410,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[this.GetProcTypeDescription(ProcType,rtl.createSet($mod.TPRProcTypeDescFlag.prptdUseName,$mod.TPRProcTypeDescFlag.prptdResolveSimpleAlias))],Params.Value);
        return 2147483647;
      };
      return Result;
    };
    this.CheckCallPropertyCompatibility = function (PropEl, Params, RaiseOnError) {
      var Result = 0;
      var PropArg = null;
      var ArgNo = 0;
      var ParamComp = 0;
      var Param = null;
      var PropArgs = null;
      Result = 0;
      PropArgs = this.GetPasPropertyArgs(PropEl);
      if (PropArgs.FCount < rtl.length(Params.Params)) {
        if (!RaiseOnError) return 2147483647;
        this.RaiseMsg(20170216152412,3005,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForCallTo"),[PropEl.FName],Params);
      } else if (PropArgs.FCount > rtl.length(Params.Params)) {
        if (!RaiseOnError) return 2147483647;
        this.RaiseMsg(20170216152413,3031,rtl.getResStr(pas.PasResolveEval,"sMissingParameterX"),[rtl.getObject(PropArgs.Get(rtl.length(Params.Params))).FName],Params);
      };
      for (var $l1 = 0, $end2 = PropArgs.FCount - 1; $l1 <= $end2; $l1++) {
        ArgNo = $l1;
        PropArg = rtl.getObject(PropArgs.Get(ArgNo));
        Param = Params.Params[ArgNo];
        ParamComp = this.CheckParamCompatibility(Param,PropArg,ArgNo,RaiseOnError,false);
        if (ParamComp === 2147483647) return 2147483647;
        Result += ParamComp;
      };
      return Result;
    };
    this.CheckCallArrayCompatibility = function (ArrayEl, Params, RaiseOnError, EmitHints) {
      var Self = this;
      var Result = 0;
      var ArgNo = 0;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      function GetNextParam() {
        if (ArgNo >= rtl.length(Params.Params)) Self.RaiseMsg(20170216152415,3042,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForArray"),[],Params);
        Param = Params.Params[ArgNo];
        Self.ComputeElement(Param,{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},{},null);
        ArgNo += 1;
      };
      var DimNo = 0;
      var RangeResolved = new $mod.TPasResolverResult();
      var OrigRangeResolved = new $mod.TPasResolverResult();
      var OrigParamResolved = new $mod.TPasResolverResult();
      var bt = 0;
      var NextType = null;
      var TypeEl = null;
      var RangeExpr = null;
      var TypeFits = false;
      var ParamValue = null;
      ArgNo = 0;
      do {
        if (rtl.length(ArrayEl.Ranges) === 0) {
          GetNextParam();
          if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) || !(ParamResolved.BaseType in $mod.btAllInteger)) return Self.CheckRaiseTypeArgNo(20170216152417,ArgNo,Param,ParamResolved,"integer",RaiseOnError);
          if (EmitHints) {
            ParamValue = Self.Eval(Param,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refAutoConstExt),true);
            if (ParamValue !== null) try {
              if (ParamValue.Kind === pas.PasResolveEval.TREVKind.revkExternal) {}
              else if (((ParamValue.Kind !== pas.PasResolveEval.TREVKind.revkInt) || (ParamValue.Int < Self.FDynArrayMinIndex)) || (ParamValue.Int > Self.FDynArrayMaxIndex)) Self.fExprEvaluator.EmitRangeCheckConst$1(20170520202212,ParamValue.AsString(),Self.FDynArrayMinIndex,Self.FDynArrayMaxIndex,Param,pas.PScanner.TMessageType.mtWarning);
            } finally {
              pas.PasResolveEval.ReleaseEvalValue({get: function () {
                  return ParamValue;
                }, set: function (v) {
                  ParamValue = v;
                }});
            };
          };
        } else {
          for (var $l1 = 0, $end2 = rtl.length(ArrayEl.Ranges) - 1; $l1 <= $end2; $l1++) {
            DimNo = $l1;
            GetNextParam();
            RangeExpr = ArrayEl.Ranges[DimNo];
            Self.ComputeElement(RangeExpr,{get: function () {
                return RangeResolved;
              }, set: function (v) {
                RangeResolved = v;
              }},{},null);
            bt = RangeResolved.BaseType;
            if (!($mod.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags)) {
              if (!RaiseOnError) return 2147483647;
              Self.RaiseIncompatibleTypeRes(20170216152421,3006,[pas.SysUtils.IntToStr(ArgNo)],ParamResolved,RangeResolved,Param);
            };
            TypeFits = false;
            OrigRangeResolved = new $mod.TPasResolverResult(RangeResolved);
            OrigParamResolved = new $mod.TPasResolverResult(ParamResolved);
            if (bt === $mod.TResolverBaseType.btRange) {
              Self.ConvertRangeToElement({get: function () {
                  return RangeResolved;
                }, set: function (v) {
                  RangeResolved = v;
                }});
              bt = RangeResolved.BaseType;
            };
            if (ParamResolved.BaseType === $mod.TResolverBaseType.btRange) {
              Self.ConvertRangeToElement({get: function () {
                  return ParamResolved;
                }, set: function (v) {
                  ParamResolved = v;
                }});
            };
            if (bt in $mod.btAllBooleans) {
              if (ParamResolved.BaseType in $mod.btAllBooleans) TypeFits = true;
            } else if (bt in $mod.btAllInteger) {
              if (ParamResolved.BaseType in $mod.btAllInteger) TypeFits = true;
            } else if (bt in $mod.btAllChars) {
              if (ParamResolved.BaseType in $mod.btAllChars) TypeFits = true;
            } else if (bt === $mod.TResolverBaseType.btContext) {
              TypeEl = RangeResolved.LoTypeEl;
              if (ParamResolved.BaseType === $mod.TResolverBaseType.btContext) {
                if ((TypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) && Self.IsSameType(TypeEl,ParamResolved.LoTypeEl,$mod.TPRResolveAlias.prraNone)) TypeFits = true;
              };
            };
            if (!TypeFits) {
              if (!RaiseOnError) return 2147483647;
              Self.RaiseIncompatibleTypeRes(20170216152422,3006,[pas.SysUtils.IntToStr(ArgNo)],OrigParamResolved,OrigRangeResolved,Param);
            };
            if (EmitHints) Self.fExprEvaluator.IsInRange(Param,RangeExpr,true);
          };
        };
        if (ArgNo === rtl.length(Params.Params)) return 0;
        NextType = Self.ResolveAliasType(ArrayEl.ElType);
        if (NextType.$class.ClassType() !== pas.PasTree.TPasArrayType) Self.RaiseMsg(20170216152424,3042,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForArray"),[],Params);
        ArrayEl = NextType;
      } while (!false);
      Result = 2147483647;
      return Result;
    };
    this.CheckParamCompatibility = function (Expr, Param, ParamNo, RaiseOnError, SetReferenceFlags) {
      var Result = 0;
      var ExprResolved = new $mod.TPasResolverResult();
      var ParamResolved = new $mod.TPasResolverResult();
      var NeedVar = false;
      var UseAssignError = false;
      var RHSFlags = {};
      Result = 2147483647;
      NeedVar = Param.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argVar,pas.PasTree.TArgumentAccess.argOut);
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if ((ParamResolved.LoTypeEl === null) && (Param.ArgType !== null)) this.RaiseInternalError(20160922163628,"GetResolvedType returned TypeEl=nil for " + $mod.GetTreeDbg(Param,0));
      RHSFlags = {};
      if (NeedVar) {
        RHSFlags = rtl.includeSet(RHSFlags,$mod.TPasResolverComputeFlag.rcNoImplicitProc)}
       else if ((this.IsProcedureType(ParamResolved,true) || (ParamResolved.BaseType === $mod.TResolverBaseType.btPointer)) || (Param.ArgType === null)) RHSFlags = rtl.includeSet(RHSFlags,$mod.TPasResolverComputeFlag.rcNoImplicitProcType);
      if (SetReferenceFlags) RHSFlags = rtl.includeSet(RHSFlags,$mod.TPasResolverComputeFlag.rcSetReferenceFlags);
      this.ComputeElement(Expr,{get: function () {
          return ExprResolved;
        }, set: function (v) {
          ExprResolved = v;
        }},rtl.refSet(RHSFlags),null);
      if (NeedVar) {
        if (!this.ResolvedElCanBeVarParam(ExprResolved,Expr,true)) {
          if (RaiseOnError) {
            if (pas.PasTree.TPasConst.isPrototypeOf(ExprResolved.IdentEl)) {
              this.RaiseMsg(20180430012609,3110,rtl.getResStr(pas.PasResolveEval,"sCantAssignValuesToConstVariable"),[],Expr)}
             else this.RaiseVarExpected(20180430012457,Expr,ExprResolved.IdentEl);
          };
          return Result;
        };
        if (ParamResolved.BaseType === ExprResolved.BaseType) {
          if (pas.PScanner.TModeSwitch.msDelphi in this.FCurrentParser.GetCurrentModeSwitches()) {
            if (this.IsSameType(ParamResolved.HiTypeEl,ExprResolved.HiTypeEl,$mod.TPRResolveAlias.prraSimple)) return 0;
          } else if (this.IsSameType(ParamResolved.LoTypeEl,ExprResolved.LoTypeEl,$mod.TPRResolveAlias.prraNone)) return 0;
        };
        if (Param.ArgType === null) return 0;
        if (RaiseOnError) this.RaiseIncompatibleTypeRes(20170216152452,3007,[pas.SysUtils.IntToStr(ParamNo + 1)],ExprResolved,ParamResolved,Expr);
        return 2147483647;
      };
      UseAssignError = false;
      if (RaiseOnError && (ExprResolved.BaseType in rtl.createSet($mod.TResolverBaseType.btArrayLit,$mod.TResolverBaseType.btArrayOrSet))) UseAssignError = true;
      Result = this.CheckAssignResCompatibility(ParamResolved,ExprResolved,Expr,UseAssignError);
      if ((Result === 2147483647) && RaiseOnError) this.RaiseIncompatibleTypeRes(20170216152454,3006,[pas.SysUtils.IntToStr(ParamNo + 1)],ExprResolved,ParamResolved,Expr);
      if ((SetReferenceFlags && (ParamResolved.BaseType === $mod.TResolverBaseType.btContext)) && (ParamResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) this.MarkArrayExprRecursive(Expr,ParamResolved.LoTypeEl);
      return Result;
    };
    this.CheckAssignCompatibilityUserType = function (LHS, RHS, ErrorEl, RaiseOnIncompatible) {
      var Self = this;
      var Result = 0;
      var RTypeEl = null;
      var LTypeEl = null;
      var SrcResolved = new $mod.TPasResolverResult();
      var DstResolved = new $mod.TPasResolverResult();
      var LArray = null;
      var RArray = null;
      var GotDesc = "";
      var ExpDesc = "";
      function RaiseIncompatType() {
        var Result = 0;
        Result = 2147483647;
        if (!RaiseOnIncompatible) return Result;
        Self.RaiseIncompatibleTypeRes(20170216152505,3028,[],RHS,LHS,ErrorEl);
        return Result;
      };
      if (RHS.LoTypeEl === null) Self.RaiseInternalError(20160922163645,"");
      if (LHS.LoTypeEl === null) Self.RaiseInternalError(20160922163648,"");
      LTypeEl = LHS.LoTypeEl;
      RTypeEl = RHS.LoTypeEl;
      if ((LTypeEl === RTypeEl) && ($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) return 0;
      Result = -1;
      if (LTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
        if (RHS.BaseType === $mod.TResolverBaseType.btNil) {
          Result = 0}
         else if (RTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          Result = 2147483647;
          if (!($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) return RaiseIncompatType();
          if (LTypeEl.ObjKind === RTypeEl.ObjKind) {
            Result = Self.CheckSrcIsADstType(RHS,LHS,ErrorEl)}
           else if (LTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
            if ((RTypeEl.ObjKind === pas.PasTree.TPasObjKind.okClass) && !RTypeEl.IsExternal) {
              if (Self.GetClassImplementsIntf(RTypeEl,LTypeEl) !== null) return 10000;
            };
          };
          if ((Result === 2147483647) && RaiseOnIncompatible) Self.RaiseIncompatibleType(20170216152458,3028,[],RTypeEl,LTypeEl,ErrorEl);
        } else return RaiseIncompatType();
      } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
        if (RHS.BaseType === $mod.TResolverBaseType.btNil) {
          Result = 0}
         else if (RTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
          if (pas.PasTree.TPasType.isPrototypeOf(RHS.IdentEl)) {
            Result = 2147483647;
            if (RaiseOnIncompatible) {
              if (pas.PasTree.TPasClassOfType.isPrototypeOf(Self.ResolveAliasType(RHS.IdentEl))) {
                Self.RaiseMsg(20180317103206,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),["type class-of","class of " + LTypeEl.DestType.FName],ErrorEl)}
               else Self.RaiseMsg(20180511123859,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[Self.GetResolverResultDescription(RHS,false),"class of " + LTypeEl.DestType.FName],ErrorEl);
            };
          } else {
            Result = Self.CheckClassIsClass(RTypeEl.DestType,LTypeEl.DestType,ErrorEl);
            if ((Result === 2147483647) && RaiseOnIncompatible) Self.RaiseMsg(20170216152500,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),["class of " + RTypeEl.DestType.PathName(),"class of " + LTypeEl.DestType.PathName()],ErrorEl);
          };
        } else if (pas.PasTree.TPasType.isPrototypeOf(RHS.IdentEl) && (Self.ResolveAliasType(RHS.IdentEl).$class.ClassType() === pas.PasTree.TPasClassType)) {
          Result = Self.CheckClassIsClass(RTypeEl,LTypeEl.DestType,ErrorEl);
          if ((Result === 2147483647) && RaiseOnIncompatible) Self.RaiseMsg(20170216152501,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[RTypeEl.FName,"class of " + LTypeEl.DestType.PathName()],ErrorEl);
          return Result;
        };
      } else if (pas.PasTree.TPasProcedureType.isPrototypeOf(LTypeEl)) {
        if (RHS.BaseType === $mod.TResolverBaseType.btNil) return 0;
        if ((LTypeEl.$class.ClassType() === RTypeEl.$class.ClassType()) && ($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) {
          if (Self.CheckProcTypeCompatibility(LTypeEl,RTypeEl,true,ErrorEl,RaiseOnIncompatible)) return 0;
        };
        if (RaiseOnIncompatible) {
          if (pas.PasTree.TPasProcedureType.isPrototypeOf(RTypeEl) && ($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) Self.RaiseMsg(20170404154738,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[$mod.GetElementTypeName(RTypeEl),$mod.GetElementTypeName(LTypeEl)],ErrorEl);
        };
      } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
        LArray = LTypeEl;
        if ((rtl.length(LArray.Ranges) === 0) && (RTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) {
          RArray = RTypeEl;
          if (rtl.length(RArray.Ranges) > 1) {
            if (RaiseOnIncompatible) Self.RaiseIncompatibleTypeDesc(20180620115235,3028,[],"multi dimensional static array","dynamic array",ErrorEl);
            return 2147483647;
          } else if (rtl.length(RArray.Ranges) > 0) {
            if ((pas.PScanner.TModeSwitch.msDelphi in Self.FCurrentParser.GetCurrentModeSwitches()) && !Self.IsOpenArray(LArray)) {
              if (RaiseOnIncompatible) Self.RaiseIncompatibleTypeDesc(20180620115341,3028,[],"static array","dynamic array",ErrorEl);
              return 2147483647;
            };
          } else if (!($mod.TPasResolverOption.proOpenAsDynArrays in Self.FOptions)) {
            if (Self.IsOpenArray(LArray)) {}
            else if (Self.IsOpenArray(RArray)) {
              if (RaiseOnIncompatible) Self.RaiseIncompatibleTypeDesc(20180620115515,3028,[],"open array","dynamic array",ErrorEl);
              return 2147483647;
            } else {
              if ((pas.PScanner.TModeSwitch.msDelphi in Self.FCurrentParser.GetCurrentModeSwitches()) && (LArray !== RArray)) {
                if (RaiseOnIncompatible) Self.RaiseIncompatibleTypeRes(20180620115515,3028,[],RHS,LHS,ErrorEl);
                return 2147483647;
              };
            };
          };
          if (Self.CheckElTypeCompatibility(LArray.ElType,RArray.ElType,$mod.TPRResolveAlias.prraAlias)) {
            Result = 0}
           else if (RaiseOnIncompatible) {
            Self.GetIncompatibleTypeDesc$1(LArray.ElType,RArray.ElType,{get: function () {
                return GotDesc;
              }, set: function (v) {
                GotDesc = v;
              }},{get: function () {
                return ExpDesc;
              }, set: function (v) {
                ExpDesc = v;
              }});
            Self.RaiseMsg(20170328110050,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),["array of " + GotDesc,"array of " + ExpDesc],ErrorEl);
          } else return 2147483647;
        };
      } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
        if ((pas.PasTree.TPasClassType.isPrototypeOf(RTypeEl) && (RTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && Self.IsTGUID(LTypeEl)) {
          return Self.cInterfaceToTGUID;
        };
      } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {}
      else if (RTypeEl.$class.ClassType() === pas.PasTree.TPasSetType) {
        if (LTypeEl.$class.ClassType() === pas.PasTree.TPasSetType) {
          Self.ComputeElement(LTypeEl.EnumType,{get: function () {
              return DstResolved;
            }, set: function (v) {
              DstResolved = v;
            }},{},null);
          Self.ComputeElement(RTypeEl.EnumType,{get: function () {
              return SrcResolved;
            }, set: function (v) {
              SrcResolved = v;
            }},{},null);
          if ((SrcResolved.LoTypeEl !== null) && (SrcResolved.LoTypeEl === DstResolved.LoTypeEl)) {
            Result = 0}
           else if (($mod.TResElDataBaseType.isPrototypeOf(SrcResolved.LoTypeEl.FData) && $mod.TResElDataBaseType.isPrototypeOf(DstResolved.LoTypeEl.FData)) && (pas.SysUtils.CompareText(SrcResolved.LoTypeEl.FName,DstResolved.LoTypeEl.FName) === 0)) {
            Result = 0}
           else if (RaiseOnIncompatible) {
            Self.RaiseIncompatibleTypeRes(20170216152510,3028,[],SrcResolved,DstResolved,ErrorEl)}
           else return 2147483647;
        } else return RaiseIncompatType();
      } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
        if (RTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          Result = Self.CheckAssignCompatibilityPointerType(LTypeEl.DestType,RTypeEl.DestType,ErrorEl,false);
          if (Result === 2147483647) return RaiseIncompatType();
        };
      };
      if (Result === -1) return RaiseIncompatType();
      if (!($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) return RaiseIncompatType();
      return Result;
    };
    this.CheckAssignCompatibilityArrayType = function (LHS, RHS, ErrorEl, RaiseOnIncompatible) {
      var Self = this;
      var Result = 0;
      function Check_ArrayOfChar_String(ArrType, ArrLength, ElTypeResolved, Expr, ErrorEl) {
        var Value = null;
        var ElBT = 0;
        var l = 0;
        var S = "";
        if (Expr === null) return;
        ElBT = Self.GetActualBaseType(ElTypeResolved.BaseType);
        if (rtl.length(ArrType.Ranges) === 0) {
          Result = 0;
          return;
        };
        Value = Self.Eval(Expr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refAutoConst),true);
        try {
          var $tmp1 = Value.Kind;
          if ($tmp1 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
            if (ElBT === $mod.TResolverBaseType.btWideChar) {
              l = Value.S.length}
             else {
              S = Value.S;
              l = S.length;
            };
          } else {
            return;
          };
          if (ArrLength !== l) {
            Self.RaiseMsg(20170913113216,3047,rtl.getResStr(pas.PasResolveEval,"sExpectXArrayElementsButFoundY"),[pas.SysUtils.IntToStr(ArrLength),pas.SysUtils.IntToStr(l)],ErrorEl);
          };
          Result = 0;
        } finally {
          pas.PasResolveEval.ReleaseEvalValue({get: function () {
              return Value;
            }, set: function (v) {
              Value = v;
            }});
        };
      };
      function CheckRange(ArrType, RangeIndex, Values, ErrorEl) {
        var Range = null;
        var Value = null;
        var Expr = null;
        var RangeResolved = new $mod.TPasResolverResult();
        var ValueResolved = new $mod.TPasResolverResult();
        var ElTypeResolved = new $mod.TPasResolverResult();
        var i = 0;
        var ExpectedCount = 0;
        var ValCnt = 0;
        var IsLastRange = false;
        var IsConstExpr = false;
        var ArrayValues = [];
        var LeftResult = 0;
        var ExprCompFlags = {};
        var BuiltInProc = null;
        var Ref = null;
        var RArrayType = null;
        if (!($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) return;
        if (((Values.BaseType === $mod.TResolverBaseType.btContext) && (RangeIndex === 0)) && (Values.LoTypeEl === ArrType)) {
          Result = 0;
          return;
        };
        Expr = Values.ExprEl;
        if (((Expr === null) && pas.PasTree.TPasConst.isPrototypeOf(Values.IdentEl)) && (Values.IdentEl.VarType === null)) Expr = Values.IdentEl.Expr;
        IsConstExpr = (Expr !== null) && Self.fExprEvaluator.IsConst(Expr);
        if (IsConstExpr) {
          ExprCompFlags = rtl.createSet($mod.TPasResolverComputeFlag.rcConstant)}
         else ExprCompFlags = {};
        if (Expr !== null) {
          if (Self.IsEmptyArrayExpr(Values)) {
            if (rtl.length(ArrType.Ranges) === 0) {
              if (RaiseOnIncompatible) Self.MarkArrayExprRecursive(Values.ExprEl,ArrType);
              Result = 0;
              return;
            };
          } else if (Self.IsArrayOperatorAdd(Expr) && !(Values.BaseType in $mod.btAllStrings)) {
            if (rtl.length(ArrType.Ranges) > 0) return;
            Self.ComputeElement(Expr.left,{get: function () {
                return ValueResolved;
              }, set: function (v) {
                ValueResolved = v;
              }},rtl.refSet(ExprCompFlags),null);
            CheckRange(ArrType,RangeIndex,new $mod.TPasResolverResult(ValueResolved),ErrorEl);
            if (Result === 2147483647) return;
            LeftResult = Result;
            Result = 2147483647;
            Self.ComputeElement(Expr.right,{get: function () {
                return ValueResolved;
              }, set: function (v) {
                ValueResolved = v;
              }},rtl.refSet(ExprCompFlags),null);
            CheckRange(ArrType,RangeIndex,new $mod.TPasResolverResult(ValueResolved),ErrorEl);
            if (Result === 2147483647) return;
            if (Result < LeftResult) Result = LeftResult;
            return;
          } else if (((Expr !== null) && (Expr.$class.ClassType() === pas.PasTree.TParamsExpr)) && (Expr.Kind === pas.PasTree.TPasExprKind.pekFuncParams)) {
            if ($mod.TResolvedReference.isPrototypeOf(Expr.Value.FData)) {
              Ref = Expr.Value.FData;
              if (pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(Ref.FDeclaration) && $mod.TResElDataBuiltInProc.isPrototypeOf(Ref.FDeclaration.FData)) {
                BuiltInProc = Ref.FDeclaration.FData;
                ArrayValues = Expr.Params;
                if (BuiltInProc.BuiltIn === $mod.TResolverBuiltInProc.bfConcatArray) {
                  Result = 0;
                  for (var $l1 = 0, $end2 = rtl.length(ArrayValues) - 1; $l1 <= $end2; $l1++) {
                    i = $l1;
                    LeftResult = Result;
                    Result = 2147483647;
                    Self.ComputeElement(ArrayValues[i],{get: function () {
                        return ValueResolved;
                      }, set: function (v) {
                        ValueResolved = v;
                      }},rtl.refSet(ExprCompFlags),null);
                    CheckRange(ArrType,RangeIndex,new $mod.TPasResolverResult(ValueResolved),ErrorEl);
                    if (Result === 2147483647) return;
                    if (Result < LeftResult) Result = LeftResult;
                  };
                  return;
                } else if (BuiltInProc.BuiltIn === $mod.TResolverBuiltInProc.bfCopyArray) {
                  Self.ComputeElement(ArrayValues[0],{get: function () {
                      return ValueResolved;
                    }, set: function (v) {
                      ValueResolved = v;
                    }},rtl.refSet(ExprCompFlags),null);
                  CheckRange(ArrType,RangeIndex,new $mod.TPasResolverResult(ValueResolved),ErrorEl);
                  return;
                };
              };
            };
          };
        };
        ExpectedCount = -1;
        if (rtl.length(ArrType.Ranges) === 0) {
          if (Expr !== null) {
            if (Expr.$class.ClassType() === pas.PasTree.TArrayValues) {
              ExpectedCount = rtl.length(Expr.Values)}
             else if ((Expr.$class.ClassType() === pas.PasTree.TParamsExpr) && (Expr.Kind === pas.PasTree.TPasExprKind.pekSet)) {
              ExpectedCount = rtl.length(Expr.Params)}
             else if ((Values.BaseType in $mod.btAllStringAndChars) && Self.IsVarInit(Expr)) {
              Self.ComputeElement(ArrType.ElType,{get: function () {
                  return ElTypeResolved;
                }, set: function (v) {
                  ElTypeResolved = v;
                }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
              if (ElTypeResolved.BaseType in $mod.btAllChars) Result = 0;
              return;
            } else {
              return;
            };
          } else {
            if ((Values.BaseType !== $mod.TResolverBaseType.btContext) || (Values.LoTypeEl.$class.ClassType() !== pas.PasTree.TPasArrayType)) return;
            RArrayType = Values.LoTypeEl;
            if (rtl.length(RArrayType.Ranges) > 0) {
              if (RaiseOnIncompatible) Self.RaiseXExpectedButYFound(20180622104834,"dynamic array","static array",ErrorEl);
              return;
            };
            Self.ComputeElement(ArrType.ElType,{get: function () {
                return ElTypeResolved;
              }, set: function (v) {
                ElTypeResolved = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
            ElTypeResolved.Flags = rtl.includeSet(ElTypeResolved.Flags,$mod.TPasResolverResultFlag.rrfWritable);
            Self.ComputeElement(RArrayType.ElType,{get: function () {
                return ValueResolved;
              }, set: function (v) {
                ValueResolved = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
            ValueResolved.Flags = rtl.includeSet(ValueResolved.Flags,$mod.TPasResolverResultFlag.rrfReadable);
            Result = Self.CheckAssignResCompatibility(ElTypeResolved,ValueResolved,ErrorEl,RaiseOnIncompatible);
            return;
          };
          Range = null;
          IsLastRange = true;
        } else {
          Range = ArrType.Ranges[RangeIndex];
          ExpectedCount = Self.GetRangeLength(Range);
          if (ExpectedCount === 0) {
            Self.ComputeElement(Range,{get: function () {
                return RangeResolved;
              }, set: function (v) {
                RangeResolved = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
            Self.RaiseNotYetImplemented(20170222232409,Expr,"range " + $mod.GetResolverResultDbg(RangeResolved));
          };
          IsLastRange = (RangeIndex + 1) === rtl.length(ArrType.Ranges);
          if (Expr === null) {
            if ((ValueResolved.BaseType === $mod.TResolverBaseType.btContext) && (ValueResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) ;
            return;
          };
        };
        if (IsLastRange) {
          Self.ComputeElement(ArrType.ElType,{get: function () {
              return ElTypeResolved;
            }, set: function (v) {
              ElTypeResolved = v;
            }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
          ElTypeResolved.ExprEl = Range;
          ElTypeResolved.Flags = rtl.includeSet(ElTypeResolved.Flags,$mod.TPasResolverResultFlag.rrfWritable);
        } else ElTypeResolved.BaseType = $mod.TResolverBaseType.btNone;
        if ((Expr !== null) && ((Expr.$class.ClassType() === pas.PasTree.TArrayValues) || (pas.PasTree.TParamsExpr.isPrototypeOf(Expr) && (Expr.Kind === pas.PasTree.TPasExprKind.pekSet)))) {
          if (pas.PasTree.TPasVariable.isPrototypeOf(ErrorEl.FParent)) {
            if (pas.PScanner.TModeSwitch.msDelphi in Self.FCurrentParser.GetCurrentModeSwitches()) {
              if (rtl.length(ArrType.Ranges) > 0) {
                if (Expr.$class.ClassType() !== pas.PasTree.TArrayValues) {
                  if (RaiseOnIncompatible) Self.RaiseXExpectedButYFound(20180615121203,"(","[",ErrorEl);
                  return;
                };
              } else {
                if (Expr.$class.ClassType() === pas.PasTree.TArrayValues) {
                  if (RaiseOnIncompatible) Self.RaiseXExpectedButYFound(20180615122953,"[","(",ErrorEl);
                  return;
                };
              };
            } else {
              if (Expr.$class.ClassType() !== pas.PasTree.TArrayValues) {
                if (RaiseOnIncompatible) Self.RaiseXExpectedButYFound(20170913181208,"(","[",ErrorEl);
                return;
              };
            };
          };
          if (Expr.$class.ClassType() === pas.PasTree.TArrayValues) {
            ArrayValues = Expr.Values}
           else ArrayValues = Expr.Params;
          ValCnt = rtl.length(ArrayValues);
          ExprCompFlags = rtl.includeSet(ExprCompFlags,$mod.TPasResolverComputeFlag.rcNoImplicitProcType);
          for (var $l3 = 0, $end4 = ExpectedCount - 1; $l3 <= $end4; $l3++) {
            i = $l3;
            if (i === ValCnt) {
              if (ValCnt > 0) ErrorEl = ArrayValues[ValCnt - 1];
              Self.RaiseMsg(20170222233001,3047,rtl.getResStr(pas.PasResolveEval,"sExpectXArrayElementsButFoundY"),[pas.SysUtils.IntToStr(ExpectedCount),pas.SysUtils.IntToStr(ValCnt)],ErrorEl);
            };
            Value = ArrayValues[i];
            Self.ComputeElement(Value,{get: function () {
                return ValueResolved;
              }, set: function (v) {
                ValueResolved = v;
              }},rtl.refSet(ExprCompFlags),null);
            if (IsLastRange) {
              Result = Self.CheckAssignResCompatibility(ElTypeResolved,ValueResolved,Value,RaiseOnIncompatible);
              if (Result === 2147483647) return;
              Self.CheckAssignExprRange(ElTypeResolved,Value);
            } else {
              CheckRange(ArrType,RangeIndex + 1,new $mod.TPasResolverResult(ValueResolved),Value);
            };
          };
          if (ExpectedCount < ValCnt) {
            ErrorEl = ArrayValues[ExpectedCount];
            if (RaiseOnIncompatible) Self.RaiseMsg(20170222233605,3047,rtl.getResStr(pas.PasResolveEval,"sExpectXArrayElementsButFoundY"),[pas.SysUtils.IntToStr(ExpectedCount),pas.SysUtils.IntToStr(ValCnt)],ErrorEl);
            return;
          };
          if (RaiseOnIncompatible && (Expr.$class.ClassType() === pas.PasTree.TParamsExpr)) Self.MarkArrayExpr(Expr,ArrType);
        } else {
          if (!IsLastRange) {
            if (RaiseOnIncompatible) Self.RaiseMsg(20170223095307,3047,rtl.getResStr(pas.PasResolveEval,"sExpectXArrayElementsButFoundY"),[pas.SysUtils.IntToStr(ExpectedCount),"1"],ErrorEl);
            return;
          };
          if ((Values.BaseType in $mod.btAllStrings) && (ElTypeResolved.BaseType in $mod.btAllChars)) {
            Check_ArrayOfChar_String(ArrType,ExpectedCount,ElTypeResolved,Expr,ErrorEl);
            return;
          };
          if (ExpectedCount > 1) {
            if (RaiseOnIncompatible) {
              Self.RaiseMsg(20170913103143,3047,rtl.getResStr(pas.PasResolveEval,"sExpectXArrayElementsButFoundY"),[pas.SysUtils.IntToStr(ExpectedCount),"1"],ErrorEl);
            };
            return;
          };
          Result = Self.CheckAssignResCompatibility(ElTypeResolved,Values,ErrorEl,RaiseOnIncompatible);
          if (Result === 2147483647) return;
          if (Expr !== null) Self.CheckAssignExprRange(ElTypeResolved,Expr);
        };
      };
      var LArrType = null;
      Result = 2147483647;
      if ((LHS.BaseType !== $mod.TResolverBaseType.btContext) || !pas.PasTree.TPasArrayType.isPrototypeOf(LHS.LoTypeEl)) Self.RaiseInternalError(20170222230012,"");
      LArrType = LHS.LoTypeEl;
      CheckRange(LArrType,0,new $mod.TPasResolverResult(RHS),ErrorEl);
      if ((Result === 2147483647) && RaiseOnIncompatible) Self.RaiseIncompatibleTypeRes(20180622104721,3028,[],RHS,LHS,ErrorEl);
      return Result;
    };
    this.CheckAssignCompatibilityPointerType = function (LTypeEl, RTypeEl, ErrorEl, RaiseOnIncompatible) {
      var Result = 0;
      var LeftResolved = new $mod.TPasResolverResult();
      var RightResolved = new $mod.TPasResolverResult();
      this.ComputeElement(LTypeEl,{get: function () {
          return LeftResolved;
        }, set: function (v) {
          LeftResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      this.ComputeElement(RTypeEl,{get: function () {
          return RightResolved;
        }, set: function (v) {
          RightResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      LeftResolved.Flags = rtl.includeSet(LeftResolved.Flags,$mod.TPasResolverResultFlag.rrfWritable);
      RightResolved.Flags = rtl.includeSet(RightResolved.Flags,$mod.TPasResolverResultFlag.rrfReadable);
      Result = this.CheckAssignResCompatibility(LeftResolved,RightResolved,ErrorEl,RaiseOnIncompatible);
      return Result;
    };
    this.CheckEqualCompatibilityUserType = function (LHS, RHS, ErrorEl, RaiseOnIncompatible) {
      var Self = this;
      var Result = 0;
      var LTypeEl = null;
      var RTypeEl = null;
      var AResolved = new $mod.TPasResolverResult();
      var BResolved = new $mod.TPasResolverResult();
      function IncompatibleElements() {
        var Result = 0;
        Result = 2147483647;
        if (!RaiseOnIncompatible) return Result;
        Self.RaiseIncompatibleType(20170216152513,3028,[],LTypeEl,RTypeEl,ErrorEl);
        return Result;
      };
      if (LHS.LoTypeEl === null) Self.RaiseInternalError(20161007223118,"");
      if (RHS.LoTypeEl === null) Self.RaiseInternalError(20161007223119,"");
      LTypeEl = LHS.LoTypeEl;
      RTypeEl = RHS.LoTypeEl;
      if (LTypeEl === RTypeEl) return 0;
      if (LTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
        if (RTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          Result = Self.CheckSrcIsADstType(LHS,RHS,ErrorEl);
          if (Result === 2147483647) Result = Self.CheckSrcIsADstType(RHS,LHS,ErrorEl);
          if ((Result === 2147483647) && RaiseOnIncompatible) Self.RaiseIncompatibleTypeRes(20180324190757,3029,[],LHS,RHS,ErrorEl);
          return Result;
        } else if (RTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
          if ((LTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) && Self.IsTGUID(RTypeEl)) return Self.cInterfaceToTGUID;
        };
        return IncompatibleElements();
      } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
        if (RTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
          Result = Self.CheckClassIsClass(LTypeEl.DestType,RTypeEl.DestType,ErrorEl);
          if (Result === 2147483647) Result = Self.CheckClassIsClass(RTypeEl.DestType,LTypeEl.DestType,ErrorEl);
          if ((Result === 2147483647) && RaiseOnIncompatible) Self.RaiseIncompatibleTypeRes(20180324190804,3029,[],LHS,RHS,ErrorEl);
          return Result;
        };
        return IncompatibleElements();
      } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
        if (!RaiseOnIncompatible) return 2147483647;
        if (RTypeEl.$class.ClassType() === pas.PasTree.TPasEnumValue) {
          Self.RaiseIncompatibleType(20170216152523,3028,[],LTypeEl,RTypeEl,ErrorEl)}
         else return IncompatibleElements();
      } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
        if (RTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          if ((RTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) && Self.IsTGUID(LTypeEl)) return Self.cInterfaceToTGUID;
        };
      } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasSetType) {
        if (RTypeEl.$class.ClassType() === pas.PasTree.TPasSetType) {
          Self.ComputeElement(LTypeEl.EnumType,{get: function () {
              return AResolved;
            }, set: function (v) {
              AResolved = v;
            }},{},null);
          Self.ComputeElement(RTypeEl.EnumType,{get: function () {
              return BResolved;
            }, set: function (v) {
              BResolved = v;
            }},{},null);
          if ((AResolved.LoTypeEl !== null) && (AResolved.LoTypeEl === BResolved.LoTypeEl)) return 0;
          if (($mod.TResElDataBaseType.isPrototypeOf(AResolved.LoTypeEl.FData) && $mod.TResElDataBaseType.isPrototypeOf(BResolved.LoTypeEl.FData)) && (pas.SysUtils.CompareText(AResolved.LoTypeEl.FName,BResolved.LoTypeEl.FName) === 0)) return 0;
          if (RaiseOnIncompatible) {
            Self.RaiseIncompatibleTypeRes(20170216152524,3028,[],AResolved,BResolved,ErrorEl)}
           else return 2147483647;
        } else return IncompatibleElements();
      } else if (pas.PasTree.TPasProcedureType.isPrototypeOf(LTypeEl)) {
        if (pas.PasTree.TPasProcedureType.isPrototypeOf(RTypeEl)) {
          if (Self.CheckProcTypeCompatibility(LTypeEl,RTypeEl,false,null,false)) return 0;
        } else return IncompatibleElements();
      } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
        if (RTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) return 0;
      };
      return IncompatibleElements();
      return Result;
    };
    this.CheckTypeCast = function (El, Params, RaiseOnError) {
      var Result = 0;
      var Param = null;
      var ParamResolved = new $mod.TPasResolverResult();
      var ResolvedEl = new $mod.TPasResolverResult();
      if (rtl.length(Params.Params) !== 1) {
        if (RaiseOnError) this.RaiseMsg(20170216152526,3034,rtl.getResStr(pas.PasResolveEval,"sWrongNumberOfParametersForTypeCast"),[El.FName],Params);
        return 2147483647;
      };
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProcType),null);
      this.ComputeElement(El,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
      Result = this.CheckTypeCastRes(ParamResolved,ResolvedEl,Param,RaiseOnError);
      return Result;
    };
    this.CheckTypeCastRes = function (FromResolved, ToResolved, ErrorEl, RaiseOnError) {
      var Result = 0;
      var ToTypeEl = null;
      var ToClassType = null;
      var FromClassType = null;
      var FromTypeEl = null;
      var ToTypeBaseType = 0;
      var C = null;
      var ToProcType = null;
      var FromProcType = null;
      Result = 2147483647;
      ToTypeEl = ToResolved.LoTypeEl;
      if ((ToTypeEl !== null) && ($mod.TPasResolverResultFlag.rrfReadable in FromResolved.Flags)) {
        C = ToTypeEl.$class.ClassType();
        if (FromResolved.BaseType === $mod.TResolverBaseType.btUntyped) {
          Result = 2;
        } else if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
          if ($mod.TResElDataBaseType.isPrototypeOf(ToTypeEl.FData)) {
            if (ToTypeEl === FromResolved.LoTypeEl) return 0;
            ToTypeBaseType = rtl.as(ToTypeEl.FData,$mod.TResElDataBaseType).BaseType;
            if (ToTypeBaseType === FromResolved.BaseType) {
              Result = 0}
             else if (ToTypeBaseType in $mod.btAllInteger) {
              if (FromResolved.BaseType in rtl.unionSet($mod.btArrayRangeTypes,rtl.createSet($mod.TResolverBaseType.btRange,$mod.TResolverBaseType.btCurrency))) {
                Result = 2}
               else if (FromResolved.BaseType === $mod.TResolverBaseType.btContext) {
                FromTypeEl = FromResolved.LoTypeEl;
                if (FromTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) Result = 2;
              };
            } else if (ToTypeBaseType in $mod.btAllFloats) {
              if (FromResolved.BaseType in $mod.btAllFloats) {
                Result = 2}
               else if (FromResolved.BaseType in $mod.btAllInteger) Result = 2;
            } else if (ToTypeBaseType in $mod.btAllBooleans) {
              if (FromResolved.BaseType in $mod.btAllBooleans) {
                Result = 2}
               else if (FromResolved.BaseType in $mod.btAllInteger) Result = 2;
            } else if (ToTypeBaseType in $mod.btAllChars) {
              if (FromResolved.BaseType in rtl.unionSet($mod.btArrayRangeTypes,rtl.createSet($mod.TResolverBaseType.btRange))) {
                Result = 2}
               else if (FromResolved.BaseType === $mod.TResolverBaseType.btContext) {
                FromTypeEl = FromResolved.LoTypeEl;
                if (FromTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) Result = 2;
              };
            } else if (ToTypeBaseType in $mod.btAllStrings) {
              if (FromResolved.BaseType in $mod.btAllStringAndChars) {
                Result = 2}
               else if ((FromResolved.BaseType === $mod.TResolverBaseType.btPointer) && (ToTypeBaseType in $mod.btAllStringPointer)) Result = 0;
            } else if (ToTypeBaseType === $mod.TResolverBaseType.btPointer) {
              if (FromResolved.BaseType in rtl.unionSet(rtl.createSet($mod.TResolverBaseType.btPointer),$mod.btAllStringPointer)) {
                Result = 0}
               else if (FromResolved.BaseType === $mod.TResolverBaseType.btContext) {
                FromTypeEl = FromResolved.LoTypeEl;
                C = FromTypeEl.$class.ClassType();
                if ((((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasPointerType)) || ((C === pas.PasTree.TPasArrayType) && this.IsDynArray(FromTypeEl,true))) {
                  Result = 0}
                 else if ((C === pas.PasTree.TPasProcedureType) || (C === pas.PasTree.TPasFunctionType)) {
                  FromProcType = FromTypeEl;
                  if (FromProcType.GetIsOfObject()) {
                    if ($mod.TPasResolverOption.proMethodAddrAsPointer in this.FOptions) {
                      Result = 2}
                     else if (RaiseOnError) this.RaiseMsg(20170416183615,3035,rtl.getResStr(pas.PasResolveEval,"sIllegalTypeConversionTo"),[($mod.GetElementTypeName(FromProcType) + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmOfObject],this.GetBaseTypeNames($mod.TResolverBaseType.btPointer)],ErrorEl);
                  } else if (FromProcType.GetIsNested()) {
                    if (RaiseOnError) this.RaiseMsg(20170416183800,3035,rtl.getResStr(pas.PasResolveEval,"sIllegalTypeConversionTo"),[($mod.GetElementTypeName(FromProcType) + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmIsNested],this.GetBaseTypeNames($mod.TResolverBaseType.btPointer)],ErrorEl);
                  } else if (FromProcType.GetIsReference()) {
                    if ($mod.TPasResolverOption.proProcTypeWithoutIsNested in this.FOptions) {
                      Result = 2}
                     else if (RaiseOnError) this.RaiseMsg(20170419144311,3035,rtl.getResStr(pas.PasResolveEval,"sIllegalTypeConversionTo"),[($mod.GetElementTypeName(FromProcType) + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmReferenceTo],this.GetBaseTypeNames($mod.TResolverBaseType.btPointer)],ErrorEl);
                  } else Result = 2;
                };
              };
            };
          };
        } else if (C === pas.PasTree.TPasClassType) {
          if (FromResolved.BaseType === $mod.TResolverBaseType.btContext) {
            FromTypeEl = FromResolved.LoTypeEl;
            if (FromTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
              if (pas.PasTree.TPasType.isPrototypeOf(FromResolved.IdentEl)) this.RaiseMsg(20170404162606,3054,rtl.getResStr(pas.PasResolveEval,"sCannotTypecastAType"),[],ErrorEl);
              if (FromTypeEl.ObjKind === ToTypeEl.ObjKind) {
                Result = this.CheckSrcIsADstType(FromResolved,ToResolved,ErrorEl);
                if (Result === 2147483647) Result = this.CheckSrcIsADstType(ToResolved,FromResolved,ErrorEl);
              } else if (ToTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
                if ((FromTypeEl.ObjKind === pas.PasTree.TPasObjKind.okClass) && !FromTypeEl.IsExternal) {
                  Result = 2;
                };
              } else if (FromTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
                if ((ToTypeEl.ObjKind === pas.PasTree.TPasObjKind.okClass) && !ToTypeEl.IsExternal) {
                  Result = 2;
                };
              };
              if (Result === 2147483647) Result = this.CheckTypeCastClassInstanceToClass(FromResolved,ToResolved,ErrorEl);
            };
          } else if (FromResolved.BaseType === $mod.TResolverBaseType.btPointer) {
            if (this.IsBaseType(FromResolved.LoTypeEl,$mod.TResolverBaseType.btPointer,false)) Result = 0;
          };
        } else if (C === pas.PasTree.TPasClassOfType) {
          if (FromResolved.BaseType === $mod.TResolverBaseType.btContext) {
            if (FromResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
              if (pas.PasTree.TPasType.isPrototypeOf(FromResolved.IdentEl)) this.RaiseMsg(20170404162604,3054,rtl.getResStr(pas.PasResolveEval,"sCannotTypecastAType"),[],ErrorEl);
              ToClassType = ToTypeEl.DestType;
              FromClassType = FromResolved.LoTypeEl.DestType;
              Result = this.CheckClassesAreRelated(ToClassType,FromClassType,ErrorEl);
            };
          } else if (FromResolved.BaseType === $mod.TResolverBaseType.btPointer) {
            if (this.IsBaseType(FromResolved.LoTypeEl,$mod.TResolverBaseType.btPointer,false)) Result = 0;
          };
        } else if (C === pas.PasTree.TPasRecordType) {
          if (FromResolved.BaseType === $mod.TResolverBaseType.btContext) {
            if (FromResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
              Result = 0;
            };
          };
        } else if ((C === pas.PasTree.TPasEnumType) || (C === pas.PasTree.TPasRangeType)) {
          if (this.CheckIsOrdinal(FromResolved,ErrorEl,true)) Result = 0;
        } else if (C === pas.PasTree.TPasArrayType) {
          if (FromResolved.BaseType === $mod.TResolverBaseType.btContext) {
            if (FromResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) Result = this.CheckTypeCastArray(FromResolved.LoTypeEl,ToTypeEl,ErrorEl,RaiseOnError);
          } else if (FromResolved.BaseType === $mod.TResolverBaseType.btPointer) {
            if (this.IsDynArray(ToResolved.LoTypeEl,true) && this.IsBaseType(FromResolved.LoTypeEl,$mod.TResolverBaseType.btPointer,false)) Result = 0;
          };
        } else if ((C === pas.PasTree.TPasProcedureType) || (C === pas.PasTree.TPasFunctionType)) {
          ToProcType = ToTypeEl;
          if (this.IsBaseType(FromResolved.LoTypeEl,$mod.TResolverBaseType.btPointer,false)) {
            if (ToProcType.GetIsOfObject()) {
              if ($mod.TPasResolverOption.proMethodAddrAsPointer in this.FOptions) {
                Result = 2}
               else if (RaiseOnError) this.RaiseMsg(20170416183940,3035,rtl.getResStr(pas.PasResolveEval,"sIllegalTypeConversionTo"),[this.GetBaseTypeNames($mod.TResolverBaseType.btPointer),(ToProcType.ElementTypeName() + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmOfObject]],ErrorEl);
            } else if (ToProcType.GetIsNested()) {
              if (RaiseOnError) this.RaiseMsg(20170416184149,3035,rtl.getResStr(pas.PasResolveEval,"sIllegalTypeConversionTo"),[this.GetBaseTypeNames($mod.TResolverBaseType.btPointer),(ToProcType.ElementTypeName() + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmIsNested]],ErrorEl);
            } else if (ToProcType.GetIsReference()) {
              if ($mod.TPasResolverOption.proMethodAddrAsPointer in this.FOptions) {
                Result = 2}
               else if (RaiseOnError) this.RaiseMsg(20170419144357,3035,rtl.getResStr(pas.PasResolveEval,"sIllegalTypeConversionTo"),[this.GetBaseTypeNames($mod.TResolverBaseType.btPointer),(ToProcType.ElementTypeName() + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmReferenceTo]],ErrorEl);
            } else Result = 2;
          } else if (FromResolved.BaseType === $mod.TResolverBaseType.btContext) {
            FromTypeEl = FromResolved.LoTypeEl;
            if (pas.PasTree.TPasProcedureType.isPrototypeOf(FromTypeEl)) {
              FromProcType = FromTypeEl;
              if (ToProcType.GetIsReference()) {
                Result = 2}
               else if (FromProcType.GetIsReference()) {
                Result = 2}
               else if ((FromProcType.GetIsOfObject() !== ToProcType.GetIsOfObject()) && !($mod.TPasResolverOption.proMethodAddrAsPointer in this.FOptions)) {
                if (RaiseOnError) this.RaiseMsg(20170416183109,3035,rtl.getResStr(pas.PasResolveEval,"sIllegalTypeConversionTo"),[$mod.GetElementTypeName(FromProcType) + pas.SysUtils.BoolToStr$1(FromProcType.GetIsOfObject()," " + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmOfObject],""),ToProcType.ElementTypeName() + pas.SysUtils.BoolToStr$1(ToProcType.GetIsOfObject()," " + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmOfObject],"")],ErrorEl);
              } else if (FromProcType.GetIsNested() !== ToProcType.GetIsNested()) {
                if (RaiseOnError) this.RaiseMsg(20170416183305,3035,rtl.getResStr(pas.PasResolveEval,"sIllegalTypeConversionTo"),[$mod.GetElementTypeName(FromProcType) + pas.SysUtils.BoolToStr$1(FromProcType.GetIsNested()," " + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmIsNested],""),ToProcType.ElementTypeName() + pas.SysUtils.BoolToStr$1(ToProcType.GetIsNested()," " + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmIsNested],"")],ErrorEl);
              } else Result = 2;
            };
          };
        } else if (C === pas.PasTree.TPasPointerType) {
          if (FromResolved.BaseType in rtl.createSet($mod.TResolverBaseType.btPointer,$mod.TResolverBaseType.btNil)) {
            Result = 0}
           else if (FromResolved.BaseType === $mod.TResolverBaseType.btContext) {
            FromTypeEl = FromResolved.LoTypeEl;
            C = FromTypeEl.$class.ClassType();
            if (((((C === pas.PasTree.TPasPointerType) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasClassType)) || C.InheritsFrom(pas.PasTree.TPasProcedureType)) || this.IsDynArray(FromTypeEl,true)) Result = 2;
          };
        };
      } else if (ToTypeEl !== null) {
        if (FromResolved.BaseType === $mod.TResolverBaseType.btContext) {
          FromTypeEl = FromResolved.LoTypeEl;
          if (((FromTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && (FromTypeEl === FromResolved.IdentEl)) && (ToResolved.BaseType === $mod.TResolverBaseType.btContext)) {
            ToTypeEl = ToResolved.LoTypeEl;
            if ((ToTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) && (ToTypeEl === ToResolved.IdentEl)) {
              ToClassType = ToTypeEl.DestType;
              FromClassType = FromTypeEl;
              Result = this.CheckClassesAreRelated(ToClassType,FromClassType,ErrorEl);
            };
          };
        };
        if ((Result === 2147483647) && RaiseOnError) {
          if (pas.PasTree.TPasType.isPrototypeOf(FromResolved.IdentEl)) this.RaiseMsg(20170404162610,3054,rtl.getResStr(pas.PasResolveEval,"sCannotTypecastAType"),[],ErrorEl);
        };
      };
      if (Result === 2147483647) {
        if (RaiseOnError) this.RaiseIncompatibleTypeRes(20170216152528,3035,[],FromResolved,ToResolved,ErrorEl);
        return Result;
      };
      return Result;
    };
    this.CheckTypeCastArray = function (FromType, ToType, ErrorEl, RaiseOnError) {
      var Self = this;
      var Result = 0;
      function NextDim(ArrType, NextIndex, ElTypeResolved) {
        var Result = false;
        NextIndex.set(NextIndex.get() + 1);
        if (NextIndex.get() < rtl.length(ArrType.get().Ranges)) {
          ElTypeResolved.get().BaseType = $mod.TResolverBaseType.btNone;
          return true;
        };
        Self.ComputeElement(ArrType.get().ElType,ElTypeResolved,rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
        if ((ElTypeResolved.get().BaseType !== $mod.TResolverBaseType.btContext) || (ElTypeResolved.get().LoTypeEl.$class.ClassType() !== pas.PasTree.TPasArrayType)) return false;
        ArrType.set(ElTypeResolved.get().LoTypeEl);
        NextIndex.set(0);
        Result = true;
        return Result;
      };
      var FromIndex = 0;
      var ToIndex = 0;
      var FromElTypeRes = new $mod.TPasResolverResult();
      var ToElTypeRes = new $mod.TPasResolverResult();
      var StartFromType = null;
      var StartToType = null;
      StartFromType = FromType;
      StartToType = ToType;
      Result = 2147483647;
      FromIndex = 0;
      ToIndex = 0;
      do {
        if (rtl.length(ToType.Ranges) === 0) ;
        if (!NextDim({get: function () {
            return FromType;
          }, set: function (v) {
            FromType = v;
          }},{get: function () {
            return FromIndex;
          }, set: function (v) {
            FromIndex = v;
          }},{get: function () {
            return FromElTypeRes;
          }, set: function (v) {
            FromElTypeRes = v;
          }})) {
          if (NextDim({get: function () {
              return ToType;
            }, set: function (v) {
              ToType = v;
            }},{get: function () {
              return ToIndex;
            }, set: function (v) {
              ToIndex = v;
            }},{get: function () {
              return ToElTypeRes;
            }, set: function (v) {
              ToElTypeRes = v;
            }})) {
            break;
          };
          FromElTypeRes.Flags = rtl.includeSet(FromElTypeRes.Flags,$mod.TPasResolverResultFlag.rrfReadable);
          Result = Self.CheckTypeCastRes(FromElTypeRes,ToElTypeRes,ErrorEl,false);
          break;
        } else {
          if (!NextDim({get: function () {
              return ToType;
            }, set: function (v) {
              ToType = v;
            }},{get: function () {
              return ToIndex;
            }, set: function (v) {
              ToIndex = v;
            }},{get: function () {
              return ToElTypeRes;
            }, set: function (v) {
              ToElTypeRes = v;
            }})) {
            break;
          };
        };
      } while (!false);
      if ((Result === 2147483647) && RaiseOnError) Self.RaiseIncompatibleType(20170331124643,3035,[],StartFromType,StartToType,ErrorEl);
      return Result;
    };
    this.CheckSrcIsADstType = function (ResolvedSrcType, ResolvedDestType, ErrorEl) {
      var Result = 0;
      Result = this.CheckClassIsClass(ResolvedSrcType.LoTypeEl,ResolvedDestType.LoTypeEl,ErrorEl);
      return Result;
    };
    this.CheckClassIsClass = function (SrcType, DestType, ErrorEl) {
      var Result = 0;
      var ClassEl = null;
      if (DestType === null) return 2147483647;
      DestType = this.ResolveAliasType(DestType);
      Result = 0;
      while (SrcType !== null) {
        if (SrcType === DestType) {
          return Result}
         else if (SrcType.$class.ClassType() === pas.PasTree.TPasAliasType) {
          SrcType = SrcType.DestType}
         else if (SrcType.$class.ClassType() === pas.PasTree.TPasTypeAliasType) {
          SrcType = SrcType.DestType;
          Result += 1;
        } else if (SrcType.$class.ClassType() === pas.PasTree.TPasClassType) {
          ClassEl = SrcType;
          if (ClassEl.IsForward) {
            SrcType = rtl.as(rtl.as(ClassEl.FData,$mod.TResolvedReference).FDeclaration,pas.PasTree.TPasType)}
           else {
            SrcType = rtl.as(ClassEl.FData,$mod.TPasClassScope).DirectAncestor;
            Result += 1;
          };
        } else return 2147483647;
      };
      if (ErrorEl === null) ;
      Result = 2147483647;
      return Result;
    };
    this.CheckClassesAreRelated = function (TypeA, TypeB, ErrorEl) {
      var Result = 0;
      Result = this.CheckClassIsClass(TypeA,TypeB,ErrorEl);
      if (Result !== 2147483647) return Result;
      Result = this.CheckClassIsClass(TypeB,TypeA,ErrorEl);
      return Result;
    };
    this.GetClassImplementsIntf = function (ClassEl, Intf) {
      var Result = null;
      Result = null;
      while (ClassEl !== null) {
        if (this.IndexOfImplementedInterface(ClassEl,Intf) >= 0) return ClassEl;
        ClassEl = rtl.as(this.GetPasClassAncestor(ClassEl,true),pas.PasTree.TPasClassType);
      };
      return Result;
    };
    this.CheckOverloadProcCompatibility = function (Proc1, Proc2) {
      var Result = false;
      var ProcArgs1 = null;
      var ProcArgs2 = null;
      var i = 0;
      Result = false;
      ProcArgs1 = Proc1.ProcType.Args;
      ProcArgs2 = Proc2.ProcType.Args;
      if (ProcArgs1.FCount !== ProcArgs2.FCount) return Result;
      for (var $l1 = 0, $end2 = ProcArgs1.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (!this.CheckProcArgCompatibility(rtl.getObject(ProcArgs1.Get(i)),rtl.getObject(ProcArgs2.Get(i)))) return Result;
      };
      Result = true;
      return Result;
    };
    this.CheckProcTypeCompatibility = function (Proc1, Proc2, IsAssign, ErrorEl, RaiseOnIncompatible) {
      var Self = this;
      var Result = false;
      function ModifierError(Modifier) {
        var Result = false;
        Result = false;
        if (!RaiseOnIncompatible) return Result;
        Self.RaiseMsg(20170402112049,3052,rtl.getResStr(pas.PasResolveEval,"sXModifierMismatchY"),[$mod.GetElementTypeName(Proc1),pas.PasTree.ProcTypeModifiers[Modifier]],ErrorEl);
        return Result;
      };
      var ProcArgs1 = null;
      var ProcArgs2 = null;
      var i = 0;
      var Result1Resolved = new $mod.TPasResolverResult();
      var Result2Resolved = new $mod.TPasResolverResult();
      var ExpectedArg = null;
      var ActualArg = null;
      Result = false;
      if (Proc1.$class.ClassType() !== Proc2.$class.ClassType()) {
        if (RaiseOnIncompatible) Self.RaiseXExpectedButYFound(20170402112353,$mod.GetElementTypeName(Proc1),$mod.GetElementTypeName(Proc2),ErrorEl);
        return Result;
      };
      if (Proc1.GetIsReference()) {
        if (IsAssign) ;
      } else if (Proc2.GetIsReference()) {
        if (IsAssign) return ModifierError(pas.PasTree.TProcTypeModifier.ptmReferenceTo);
      } else {
        if (Proc1.GetIsNested() !== Proc2.GetIsNested()) return ModifierError(pas.PasTree.TProcTypeModifier.ptmIsNested);
        if (Proc1.GetIsOfObject() !== Proc2.GetIsOfObject()) {
          if ($mod.TPasResolverOption.proProcTypeWithoutIsNested in Self.FOptions) {
            return ModifierError(pas.PasTree.TProcTypeModifier.ptmOfObject)}
           else if (Proc1.GetIsNested()) {}
          else return ModifierError(pas.PasTree.TProcTypeModifier.ptmOfObject);
        };
      };
      if (Proc1.CallingConvention !== Proc2.CallingConvention) {
        if (RaiseOnIncompatible) Self.RaiseMsg(20170402112253,3018,rtl.getResStr(pas.PasResolveEval,"sCallingConventionMismatch"),[],ErrorEl);
        return Result;
      };
      ProcArgs1 = Proc1.Args;
      ProcArgs2 = Proc2.Args;
      if (ProcArgs1.FCount !== ProcArgs2.FCount) {
        if (RaiseOnIncompatible) Self.RaiseMsg(20170902142829,3071,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotParametersExpected"),[pas.SysUtils.IntToStr(ProcArgs1.FCount),pas.SysUtils.IntToStr(ProcArgs2.FCount)],ErrorEl);
        return Result;
      };
      for (var $l1 = 0, $end2 = ProcArgs1.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        ExpectedArg = rtl.getObject(ProcArgs1.Get(i));
        ActualArg = rtl.getObject(ProcArgs2.Get(i));
        if (!Self.CheckProcArgCompatibility(ExpectedArg,ActualArg)) {
          if (RaiseOnIncompatible) {
            if (ExpectedArg.Access !== ActualArg.Access) Self.RaiseMsg(20170404151541,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),[pas.SysUtils.IntToStr(i + 1),"access modifier " + pas.PasTree.AccessDescriptions[ActualArg.Access],pas.PasTree.AccessDescriptions[ExpectedArg.Access]],ErrorEl);
            Self.RaiseIncompatibleType(20170404151538,3006,[pas.SysUtils.IntToStr(i + 1)],ExpectedArg.ArgType,ActualArg.ArgType,ErrorEl);
          };
          return Result;
        };
      };
      if (pas.PasTree.TPasFunctionType.isPrototypeOf(Proc1)) {
        Self.ComputeElement(Proc1.ResultEl.ResultType,{get: function () {
            return Result1Resolved;
          }, set: function (v) {
            Result1Resolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
        Self.ComputeElement(Proc2.ResultEl.ResultType,{get: function () {
            return Result2Resolved;
          }, set: function (v) {
            Result2Resolved = v;
          }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
        if ((Result1Resolved.BaseType !== Result2Resolved.BaseType) || !Self.IsSameType(Result1Resolved.HiTypeEl,Result2Resolved.HiTypeEl,$mod.TPRResolveAlias.prraSimple)) {
          if (RaiseOnIncompatible) Self.RaiseIncompatibleTypeRes(20170402112648,3019,[],Result1Resolved,Result2Resolved,ErrorEl);
          return Result;
        };
      };
      Result = true;
      return Result;
    };
    this.CheckProcArgCompatibility = function (Arg1, Arg2) {
      var Result = false;
      Result = false;
      if (Arg1.Access !== Arg2.Access) return Result;
      if (Arg1.ArgType === null) return Arg2.ArgType === null;
      if (Arg2.ArgType === null) return Result;
      Result = this.CheckElTypeCompatibility(Arg1.ArgType,Arg2.ArgType,$mod.TPRResolveAlias.prraSimple);
      return Result;
    };
    this.CheckElTypeCompatibility = function (Arg1, Arg2, ResolveAlias) {
      var Result = false;
      var Arg1Resolved = new $mod.TPasResolverResult();
      var Arg2Resolved = new $mod.TPasResolverResult();
      var C = null;
      var Arr1 = null;
      var Arr2 = null;
      this.ComputeElement(Arg1,{get: function () {
          return Arg1Resolved;
        }, set: function (v) {
          Arg1Resolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
      this.ComputeElement(Arg2,{get: function () {
          return Arg2Resolved;
        }, set: function (v) {
          Arg2Resolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcType),null);
      if (((Arg1Resolved.BaseType !== Arg2Resolved.BaseType) || (Arg1Resolved.LoTypeEl === null)) || (Arg2Resolved.LoTypeEl === null)) return false;
      if (Arg1Resolved.BaseType === Arg2Resolved.BaseType) {
        if (ResolveAlias === $mod.TPRResolveAlias.prraSimple) {
          if (this.IsSameType(Arg1Resolved.HiTypeEl,Arg2Resolved.HiTypeEl,$mod.TPRResolveAlias.prraSimple)) return true;
        } else {
          if (this.IsSameType(Arg1Resolved.LoTypeEl,Arg2Resolved.LoTypeEl,$mod.TPRResolveAlias.prraNone)) return true;
        };
      };
      C = Arg1Resolved.LoTypeEl.$class.ClassType();
      if ((C === pas.PasTree.TPasArrayType) && (Arg2Resolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) {
        Arr1 = Arg1Resolved.LoTypeEl;
        Arr2 = Arg2Resolved.LoTypeEl;
        if (rtl.length(Arr1.Ranges) !== rtl.length(Arr2.Ranges)) return false;
        if (rtl.length(Arr1.Ranges) > 0) this.RaiseNotYetImplemented(20170328093733,Arr1.Ranges[0],"anonymous static array");
        Result = this.CheckElTypeCompatibility(Arr1.ElType,Arr2.ElType,ResolveAlias);
        return Result;
      };
      Result = false;
      return Result;
    };
    this.CheckCanBeLHS = function (ResolvedEl, ErrorOnFalse, ErrorEl) {
      var Result = false;
      var El = null;
      Result = false;
      El = ResolvedEl.IdentEl;
      if (El === null) {
        if (pas.PasTree.TUnaryExpr.isPrototypeOf(ResolvedEl.ExprEl) && (ResolvedEl.ExprEl.OpCode === pas.PasTree.TExprOpCode.eopDeref)) {}
        else {
          if (ErrorOnFalse) {
            if ((ResolvedEl.LoTypeEl !== null) && (ResolvedEl.ExprEl !== null)) {
              this.RaiseXExpectedButYFound(20170216152727,"identifier",$mod.GetElementTypeName(ResolvedEl.LoTypeEl),ResolvedEl.ExprEl)}
             else this.RaiseVarExpected(20170216152426,ErrorEl,ResolvedEl.IdentEl);
          };
          return Result;
        };
      };
      if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TPasResolverResultFlag.rrfWritable,$mod.TPasResolverResultFlag.rrfAssignable),ResolvedEl.Flags),{})) return !this.IsVariableConst(El,ErrorEl,ErrorOnFalse);
      if (!ErrorOnFalse) return Result;
      if (pas.PasTree.TPasProperty.isPrototypeOf(ResolvedEl.IdentEl)) {
        this.RaiseMsg(20170216152427,3027,rtl.getResStr(pas.PasResolveEval,"sPropertyNotWritable"),[],ErrorEl)}
       else if (pas.PasTree.TPasConst.isPrototypeOf(ResolvedEl.IdentEl)) {
        this.RaiseMsg(20180430012042,3110,rtl.getResStr(pas.PasResolveEval,"sCantAssignValuesToConstVariable"),[],ErrorEl)}
       else this.RaiseMsg(20170216152429,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],ErrorEl);
      return Result;
    };
    this.CheckAssignCompatibility = function (LHS, RHS, RaiseOnIncompatible, ErrorEl) {
      var Result = 0;
      var LeftResolved = new $mod.TPasResolverResult();
      var RightResolved = new $mod.TPasResolverResult();
      var Flags = {};
      var IsProcType = false;
      if (ErrorEl === null) ErrorEl = RHS;
      this.ComputeElement(LHS,{get: function () {
          return LeftResolved;
        }, set: function (v) {
          LeftResolved = v;
        }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
      Flags = {};
      IsProcType = this.IsProcedureType(LeftResolved,true);
      if (IsProcType) if (pas.PScanner.TModeSwitch.msDelphi in this.FCurrentParser.GetCurrentModeSwitches()) {
        Flags = rtl.includeSet(Flags,$mod.TPasResolverComputeFlag.rcNoImplicitProc)}
       else Flags = rtl.includeSet(Flags,$mod.TPasResolverComputeFlag.rcNoImplicitProcType);
      this.ComputeElement(RHS,{get: function () {
          return RightResolved;
        }, set: function (v) {
          RightResolved = v;
        }},rtl.refSet(Flags),null);
      Result = this.CheckAssignResCompatibility(LeftResolved,RightResolved,ErrorEl,RaiseOnIncompatible);
      if (pas.PasTree.TPasExpr.isPrototypeOf(RHS)) this.CheckAssignExprRange(LeftResolved,RHS);
      return Result;
    };
    this.CheckAssignExprRange = function (LeftResolved, RHS) {
      var LRangeValue = null;
      var RValue = null;
      var Int = 0;
      var MinVal = 0;
      var MaxVal = 0;
      var RangeExpr = null;
      var C = null;
      var EnumType = null;
      var bt = 0;
      var LTypeEl = null;
      LTypeEl = LeftResolved.LoTypeEl;
      if ((LTypeEl !== null) && ((LTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) || (LTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType))) return;
      if (pas.PasTree.TPasClassOfType.isPrototypeOf(LTypeEl)) return;
      RValue = this.Eval(RHS,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refAutoConstExt),true);
      if (RValue === null) return;
      LRangeValue = null;
      try {
        if (RValue.Kind === pas.PasResolveEval.TREVKind.revkExternal) {}
        else if (LeftResolved.BaseType === $mod.TResolverBaseType.btCustom) {
          this.CheckAssignExprRangeToCustom(LeftResolved,RValue,RHS)}
         else if (LeftResolved.BaseType === $mod.TResolverBaseType.btSet) {
          C = LTypeEl.$class.ClassType();
          if (C === pas.PasTree.TPasRangeType) {
            RangeExpr = LTypeEl.RangeExpr;
            LRangeValue = this.Eval(RangeExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),false);
          } else if (C === pas.PasTree.TPasEnumType) {
            EnumType = LTypeEl;
            LRangeValue = pas.PasResolveEval.TResEvalRangeInt.$create("CreateValue",[pas.PasResolveEval.TRESetElKind.revskEnum,EnumType,0,EnumType.Values.FCount - 1]);
          } else if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
            if ($mod.TResElDataBaseType.isPrototypeOf(LTypeEl.FData)) {
              bt = this.GetActualBaseType(LTypeEl.FData.BaseType);
              if ((bt in $mod.btAllIntegerNoQWord) && this.GetIntegerRange(bt,{get: function () {
                  return MinVal;
                }, set: function (v) {
                  MinVal = v;
                }},{get: function () {
                  return MaxVal;
                }, set: function (v) {
                  MaxVal = v;
                }})) {
                LRangeValue = pas.PasResolveEval.TResEvalRangeInt.$create("CreateValue",[pas.PasResolveEval.TRESetElKind.revskInt,null,MinVal,MaxVal])}
               else if (bt === $mod.TResolverBaseType.btBoolean) {
                LRangeValue = pas.PasResolveEval.TResEvalRangeInt.$create("CreateValue",[pas.PasResolveEval.TRESetElKind.revskBool,null,0,1])}
               else if (bt === $mod.TResolverBaseType.btWideChar) {
                LRangeValue = pas.PasResolveEval.TResEvalRangeInt.$create("CreateValue",[pas.PasResolveEval.TRESetElKind.revskChar,null,0,0xffff])}
               else this.RaiseNotYetImplemented(20170714205110,RHS,"");
            } else this.RaiseNotYetImplemented(20170714204803,RHS,"");
          } else this.RaiseNotYetImplemented(20170714193100,RHS,"");
          this.fExprEvaluator.IsSetCompatible(RValue,RHS,LRangeValue,true);
        } else if (pas.PasTree.TPasRangeType.isPrototypeOf(LTypeEl)) {
          RangeExpr = LTypeEl.RangeExpr;
          LRangeValue = this.Eval(RangeExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
          if (LeftResolved.BaseType === $mod.TResolverBaseType.btSet) {
            this.fExprEvaluator.IsSetCompatible(RValue,RHS,LRangeValue,true)}
           else this.fExprEvaluator.IsInRange$1(RValue,RHS,LRangeValue,RangeExpr,true);
        } else if ((LeftResolved.BaseType in $mod.btAllIntegerNoQWord) && this.GetIntegerRange(LeftResolved.BaseType,{get: function () {
            return MinVal;
          }, set: function (v) {
            MinVal = v;
          }},{get: function () {
            return MaxVal;
          }, set: function (v) {
            MaxVal = v;
          }})) {
          var $tmp1 = RValue.Kind;
          if ($tmp1 === pas.PasResolveEval.TREVKind.revkInt) {
            if ((MinVal > RValue.Int) || (MaxVal < RValue.Int)) this.fExprEvaluator.EmitRangeCheckConst$1(20170530093126,pas.SysUtils.IntToStr(RValue.Int),MinVal,MaxVal,RHS,pas.PScanner.TMessageType.mtWarning)}
           else if ($tmp1 === pas.PasResolveEval.TREVKind.revkUInt) {
            if (((RValue.UInt > 4503599627370495) || (MinVal > RValue.UInt)) || (MaxVal < RValue.UInt)) this.fExprEvaluator.EmitRangeCheckConst(20170530093616,pas.SysUtils.IntToStr(RValue.UInt),pas.SysUtils.IntToStr(MinVal),pas.SysUtils.IntToStr(MaxVal),RHS,pas.PScanner.TMessageType.mtWarning)}
           else if ($tmp1 === pas.PasResolveEval.TREVKind.revkFloat) {
            if (RValue.IsInt({get: function () {
                return Int;
              }, set: function (v) {
                Int = v;
              }})) {
              if ((MinVal > Int) || (MaxVal < Int)) this.fExprEvaluator.EmitRangeCheckConst$1(20170802133307,pas.SysUtils.IntToStr(Int),MinVal,MaxVal,RHS,pas.PScanner.TMessageType.mtError);
            } else {
              this.RaiseRangeCheck(20170802133750,RHS);
            }}
           else if ($tmp1 === pas.PasResolveEval.TREVKind.revkCurrency) {
            if (RValue.IsInt({get: function () {
                return Int;
              }, set: function (v) {
                Int = v;
              }})) {
              if ((MinVal > Int) || (MaxVal < Int)) this.fExprEvaluator.EmitRangeCheckConst$1(20180421171325,pas.SysUtils.IntToStr(Int),MinVal,MaxVal,RHS,pas.PScanner.TMessageType.mtError);
            } else {
              this.RaiseRangeCheck(20180421171438,RHS);
            }}
           else {
            this.RaiseNotYetImplemented(20170530092731,RHS,"");
          };
        } else if (RValue.Kind in rtl.createSet(pas.PasResolveEval.TREVKind.revkNil,pas.PasResolveEval.TREVKind.revkBool)) {}
        else if (LeftResolved.BaseType in rtl.createSet($mod.TResolverBaseType.btSingle,$mod.TResolverBaseType.btDouble,$mod.TResolverBaseType.btCurrency)) {}
        else if (LeftResolved.BaseType in $mod.btAllChars) {
          var $tmp2 = RValue.Kind;
          if ($tmp2 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
            if (RValue.S.length !== 1) {
              this.RaiseXExpectedButYFound(20170714171534,"char","string",RHS)}
             else Int = RValue.S.charAt(0).charCodeAt()}
           else {
            this.RaiseNotYetImplemented(20170714171218,RHS,"");
          };
          var $tmp3 = this.GetActualBaseType(LeftResolved.BaseType);
          if ($tmp3 === $mod.TResolverBaseType.btWideChar) MaxVal = 0xffff;
          if (Int > MaxVal) this.fExprEvaluator.EmitRangeCheckConst(20170714171911,"#" + pas.SysUtils.IntToStr(Int),"#0","#" + pas.SysUtils.IntToStr(MaxVal),RHS,pas.PScanner.TMessageType.mtWarning);
        } else if (LeftResolved.BaseType in $mod.btAllStrings) {}
        else if (LeftResolved.BaseType === $mod.TResolverBaseType.btContext) {}
        else if (LeftResolved.BaseType === $mod.TResolverBaseType.btRange) {
          if (pas.PasTree.TBinaryExpr.isPrototypeOf(LeftResolved.ExprEl) && (LeftResolved.ExprEl.Kind === pas.PasTree.TPasExprKind.pekRange)) {
            LRangeValue = this.Eval(LeftResolved.ExprEl,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
            try {
              var $tmp4 = LRangeValue.Kind;
              if ($tmp4 === pas.PasResolveEval.TREVKind.revkRangeInt) {
                var $tmp5 = LRangeValue.ElKind;
                if ($tmp5 === pas.PasResolveEval.TRESetElKind.revskEnum) {
                  if (RValue.Kind !== pas.PasResolveEval.TREVKind.revkEnum) {
                    this.RaiseNotYetImplemented(20171009171251,RHS,"")}
                   else if ((RValue.Index < LRangeValue.RangeStart) || (RValue.Index > LRangeValue.RangeEnd)) this.fExprEvaluator.EmitRangeCheckConst(20171009171442,RValue.AsString(),LRangeValue.ElementAsString(LRangeValue.RangeStart),LRangeValue.ElementAsString(LRangeValue.RangeEnd),RHS,pas.PScanner.TMessageType.mtWarning)}
                 else {
                  this.RaiseNotYetImplemented(20171009165348,LeftResolved.ExprEl,"");
                };
              } else {
                this.RaiseNotYetImplemented(20171009165326,LeftResolved.ExprEl,"");
              };
            } finally {
              pas.PasResolveEval.ReleaseEvalValue({get: function () {
                  return LRangeValue;
                }, set: function (v) {
                  LRangeValue = v;
                }});
            };
          } else this.RaiseNotYetImplemented(20171009171005,RHS,"");
        } else {
          this.RaiseNotYetImplemented(20170530095243,RHS,"");
        };
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return RValue;
          }, set: function (v) {
            RValue = v;
          }});
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return LRangeValue;
          }, set: function (v) {
            LRangeValue = v;
          }});
      };
    };
    this.CheckAssignExprRangeToCustom = function (LeftResolved, RValue, RHS) {
      if (LeftResolved.BaseType !== $mod.TResolverBaseType.btCustom) return;
      if (RValue === null) return;
      if (RHS === null) ;
    };
    this.CheckAssignResCompatibility = function (LHS, RHS, ErrorEl, RaiseOnIncompatible) {
      var Result = 0;
      var LTypeEl = null;
      var RTypeEl = null;
      var Handled = false;
      var C = null;
      var LBT = 0;
      var RBT = 0;
      var LRange = null;
      var RValue = null;
      var Value = null;
      var RightSubResolved = new $mod.TPasResolverResult();
      var wc = "";
      Result = -1;
      Handled = false;
      Result = this.CheckAssignCompatibilityCustom(LHS,RHS,ErrorEl,RaiseOnIncompatible,{get: function () {
          return Handled;
        }, set: function (v) {
          Handled = v;
        }});
      if ((Handled && (Result >= 0)) && (Result < 2147483647)) return Result;
      if (!Handled) {
        LBT = this.GetActualBaseType(LHS.BaseType);
        RBT = this.GetActualBaseType(RHS.BaseType);
        if (LHS.LoTypeEl === null) {
          if (LBT === $mod.TResolverBaseType.btUntyped) {
            Result = 10000;
          } else this.RaiseNotYetImplemented(20160922163631,LHS.IdentEl,"");
        } else if (LBT === RBT) {
          if (LBT === $mod.TResolverBaseType.btContext) {
            return this.CheckAssignCompatibilityUserType(LHS,RHS,ErrorEl,RaiseOnIncompatible)}
           else {
            if (this.IsSameType(LHS.HiTypeEl,RHS.HiTypeEl,$mod.TPRResolveAlias.prraSimple) && this.HasExactType(RHS)) {
              Result = 0}
             else Result = 1;
          };
        } else if ((LBT in $mod.btAllBooleans) && (RBT in $mod.btAllBooleans)) {
          Result = 2}
         else if (LBT in $mod.btAllChars) {
          if (RBT in $mod.btAllChars) {
            var $tmp1 = LBT;
            if ($tmp1 === $mod.TResolverBaseType.btWideChar) {
              Result = 100000}
             else {
              this.RaiseNotYetImplemented(20170728132440,ErrorEl,this.GetBaseTypeNames(LBT));
            };
          } else if ((RBT === $mod.TResolverBaseType.btRange) && (RHS.SubType in $mod.btAllChars)) {
            if (LBT === $mod.TResolverBaseType.btWideChar) return 2;
            this.RaiseNotYetImplemented(20171108195216,ErrorEl,"");
          };
        } else if (LBT in $mod.btAllStrings) {
          if (RBT in $mod.btAllStringAndChars) {
            var $tmp2 = LBT;
            if (($tmp2 === $mod.TResolverBaseType.btWideString) || ($tmp2 === $mod.TResolverBaseType.btUnicodeString)) {
              Result = 2}
             else {
              this.RaiseNotYetImplemented(20170417195208,ErrorEl,this.GetBaseTypeNames(LBT));
            };
          } else if (RBT === $mod.TResolverBaseType.btContext) {
            RTypeEl = RHS.LoTypeEl;
            if (RTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
              if ((RTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) && this.IsTGUIDString(LHS)) return this.cInterfaceToString;
            } else if (RTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
              if (this.IsTGUID(RTypeEl)) Result = this.cTGUIDToString;
            };
          };
        } else if ((LBT in $mod.btAllInteger) && (RBT in $mod.btAllInteger)) {
          Result = (37 + LBT) - RBT;
          var $tmp3 = LBT;
          if (($tmp3 === $mod.TResolverBaseType.btByte) || ($tmp3 === $mod.TResolverBaseType.btShortInt)) {
            Result += 100000}
           else if (($tmp3 === $mod.TResolverBaseType.btWord) || ($tmp3 === $mod.TResolverBaseType.btSmallInt)) {
            if (!(RBT in rtl.createSet($mod.TResolverBaseType.btByte,$mod.TResolverBaseType.btShortInt))) Result += 100000}
           else if ($tmp3 === $mod.TResolverBaseType.btUIntSingle) {
            if (!(RBT in rtl.createSet($mod.TResolverBaseType.btByte,$mod.TResolverBaseType.btShortInt,$mod.TResolverBaseType.btWord,$mod.TResolverBaseType.btSmallInt))) Result += 100000}
           else if ($tmp3 === $mod.TResolverBaseType.btIntSingle) {
            if (!(RBT in rtl.createSet($mod.TResolverBaseType.btByte,$mod.TResolverBaseType.btShortInt,$mod.TResolverBaseType.btWord,$mod.TResolverBaseType.btSmallInt,$mod.TResolverBaseType.btUIntSingle))) Result += 100000}
           else if (($tmp3 === $mod.TResolverBaseType.btLongWord) || ($tmp3 === $mod.TResolverBaseType.btLongint)) {
            if (!(RBT in rtl.createSet($mod.TResolverBaseType.btByte,$mod.TResolverBaseType.btShortInt,$mod.TResolverBaseType.btWord,$mod.TResolverBaseType.btSmallInt,$mod.TResolverBaseType.btUIntSingle,$mod.TResolverBaseType.btIntSingle))) Result += 100000}
           else if ($tmp3 === $mod.TResolverBaseType.btUIntDouble) {
            if (!(RBT in rtl.createSet($mod.TResolverBaseType.btByte,$mod.TResolverBaseType.btShortInt,$mod.TResolverBaseType.btWord,$mod.TResolverBaseType.btSmallInt,$mod.TResolverBaseType.btLongWord,$mod.TResolverBaseType.btLongint))) Result += 100000}
           else if ($tmp3 === $mod.TResolverBaseType.btIntDouble) {
            if (!(RBT in rtl.createSet($mod.TResolverBaseType.btByte,$mod.TResolverBaseType.btShortInt,$mod.TResolverBaseType.btWord,$mod.TResolverBaseType.btSmallInt,$mod.TResolverBaseType.btLongWord,$mod.TResolverBaseType.btLongint,$mod.TResolverBaseType.btUIntDouble))) Result += 100000}
           else {
            this.RaiseNotYetImplemented(20170417205301,ErrorEl,this.GetBaseTypeNames(LBT));
          };
        } else if ((LBT in $mod.btAllFloats) && (RBT in $mod.btAllFloats)) {
          Result = (74 + LBT) - RBT;
          var $tmp4 = LBT;
          if ($tmp4 === $mod.TResolverBaseType.btSingle) {
            if (RBT > $mod.TResolverBaseType.btSingle) Result += 100000}
           else if ($tmp4 === $mod.TResolverBaseType.btDouble) {
            if (RBT > $mod.TResolverBaseType.btDouble) Result += 100000}
           else if (($tmp4 === $mod.TResolverBaseType.btExtended) || ($tmp4 === $mod.TResolverBaseType.btCExtended)) {
            if (RBT > $mod.TResolverBaseType.btCExtended) Result += 100000}
           else if ($tmp4 === $mod.TResolverBaseType.btCurrency) {
            Result += 100000}
           else {
            this.RaiseNotYetImplemented(20170417205910,ErrorEl,this.GetBaseTypeNames(LBT));
          };
        } else if ((LBT in $mod.btAllFloats) && (RBT in $mod.btAllInteger)) {
          Result = (400000 + LBT) - RBT;
          var $tmp5 = LBT;
          if ($tmp5 === $mod.TResolverBaseType.btSingle) {
            if (RBT > $mod.TResolverBaseType.btUIntSingle) Result += 100000}
           else if ($tmp5 === $mod.TResolverBaseType.btDouble) {
            if (RBT > $mod.TResolverBaseType.btUIntDouble) Result += 100000}
           else if (($tmp5 === $mod.TResolverBaseType.btExtended) || ($tmp5 === $mod.TResolverBaseType.btCExtended)) {
            if (RBT > $mod.TResolverBaseType.btCExtended) Result += 100000}
           else if ($tmp5 === $mod.TResolverBaseType.btCurrency) {
            if (!(RBT in rtl.createSet($mod.TResolverBaseType.btByte,$mod.TResolverBaseType.btShortInt,$mod.TResolverBaseType.btWord,$mod.TResolverBaseType.btSmallInt,$mod.TResolverBaseType.btIntSingle,$mod.TResolverBaseType.btUIntSingle,$mod.TResolverBaseType.btLongWord,$mod.TResolverBaseType.btLongint))) Result += 100000}
           else {
            this.RaiseNotYetImplemented(20170417205911,ErrorEl,this.GetBaseTypeNames(LBT));
          };
        } else if (LBT === $mod.TResolverBaseType.btNil) {
          if (RaiseOnIncompatible) this.RaiseMsg(20170216152431,3043,rtl.getResStr(pas.PasResolveEval,"sCantAssignValuesToAnAddress"),[],ErrorEl);
          return 2147483647;
        } else if (LBT === $mod.TResolverBaseType.btRange) {
          if (pas.PasTree.TBinaryExpr.isPrototypeOf(LHS.ExprEl) && (LHS.ExprEl.Kind === pas.PasTree.TPasExprKind.pekRange)) {
            LRange = this.Eval(LHS.ExprEl,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
            RValue = null;
            try {
              var $tmp6 = LRange.Kind;
              if ($tmp6 === pas.PasResolveEval.TREVKind.revkRangeInt) {
                var $tmp7 = LRange.ElKind;
                if ($tmp7 === pas.PasResolveEval.TRESetElKind.revskEnum) {
                  if (RHS.BaseType === $mod.TResolverBaseType.btContext) {
                    if (this.IsSameType(LRange.ElType,RHS.LoTypeEl,$mod.TPRResolveAlias.prraAlias)) {
                      return 0;
                    };
                  }}
                 else if ($tmp7 === pas.PasResolveEval.TRESetElKind.revskInt) {
                  if (RHS.BaseType in $mod.btAllInteger) {
                    RValue = this.Eval$1(RHS,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refAutoConstExt),true);
                    if (RValue !== null) ;
                    return 2;
                  }}
                 else if ($tmp7 === pas.PasResolveEval.TRESetElKind.revskChar) {
                  if (RHS.BaseType in $mod.btAllStringAndChars) {
                    RValue = this.Eval$1(RHS,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refAutoConstExt),true);
                    if (RValue !== null) {
                      var $tmp8 = RValue.Kind;
                      if ($tmp8 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
                        if (RValue.S.length !== 1) return 2147483647;
                        wc = RValue.S.charAt(0);
                      } else if ($tmp8 === pas.PasResolveEval.TREVKind.revkExternal) {
                        return 2}
                       else {
                        this.RaiseNotYetImplemented(20171108192232,ErrorEl,"");
                      };
                      if ((wc.charCodeAt() < LRange.RangeStart) || (wc.charCodeAt() > LRange.RangeEnd)) return 2147483647;
                    };
                    return 2;
                  }}
                 else if ($tmp7 === pas.PasResolveEval.TRESetElKind.revskBool) if (RHS.BaseType === $mod.TResolverBaseType.btBoolean) {
                  RValue = this.Eval$1(RHS,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refAutoConstExt),true);
                  if (RValue !== null) ;
                  return 2;
                };
              };
            } finally {
              pas.PasResolveEval.ReleaseEvalValue({get: function () {
                  return LRange;
                }, set: function (v) {
                  LRange = v;
                }});
              pas.PasResolveEval.ReleaseEvalValue({get: function () {
                  return RValue;
                }, set: function (v) {
                  RValue = v;
                }});
            };
          };
        } else if (LBT === $mod.TResolverBaseType.btSet) {
          if (RBT === $mod.TResolverBaseType.btArrayOrSet) {
            if (RHS.SubType === $mod.TResolverBaseType.btNone) {
              Result = 0}
             else if (this.IsSameType(LHS.HiTypeEl,RHS.HiTypeEl,$mod.TPRResolveAlias.prraSimple) && this.HasExactType(RHS)) {
              Result = 0}
             else if (LHS.SubType === RHS.SubType) {
              Result = 1}
             else if ((LHS.SubType in $mod.btAllBooleans) && (RHS.SubType in $mod.btAllBooleans)) {
              Result = 2}
             else if ((LHS.SubType in $mod.btAllInteger) && (RHS.SubType in $mod.btAllInteger)) {
              Result = 2;
            } else if ((LHS.SubType in $mod.btAllChars) && (RHS.SubType in $mod.btAllChars)) {
              Result = 2;
            };
          };
        } else if (LBT in rtl.createSet($mod.TResolverBaseType.btArrayLit,$mod.TResolverBaseType.btArrayOrSet,$mod.TResolverBaseType.btModule,$mod.TResolverBaseType.btProc)) {
          if (RaiseOnIncompatible) this.RaiseMsg(20170216152432,3044,rtl.getResStr(pas.PasResolveEval,"sIllegalExpression"),[],ErrorEl);
          return 2147483647;
        } else if ((LHS.IdentEl === null) && (LHS.ExprEl === null)) {
          if (RaiseOnIncompatible) this.RaiseMsg(20170216152434,3044,rtl.getResStr(pas.PasResolveEval,"sIllegalExpression"),[],ErrorEl);
          return 2147483647;
        } else if (RBT === $mod.TResolverBaseType.btNil) {
          if (LBT === $mod.TResolverBaseType.btPointer) {
            Result = 0}
           else if (LBT === $mod.TResolverBaseType.btContext) {
            LTypeEl = LHS.LoTypeEl;
            C = LTypeEl.$class.ClassType();
            if (((((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasPointerType)) || C.InheritsFrom(pas.PasTree.TPasProcedureType)) || this.IsDynArray(LTypeEl,true)) Result = 0;
          };
        } else if (RBT === $mod.TResolverBaseType.btProc) {
          if (((pas.PScanner.TModeSwitch.msDelphi in this.FCurrentParser.GetCurrentModeSwitches()) && pas.PasTree.TPasProcedureType.isPrototypeOf(LHS.LoTypeEl)) && pas.PasTree.TPasProcedure.isPrototypeOf(RHS.IdentEl)) {
            if (this.CheckProcTypeCompatibility(LHS.LoTypeEl,RHS.IdentEl.ProcType,true,ErrorEl,RaiseOnIncompatible)) return 0;
          };
        } else if (LBT === $mod.TResolverBaseType.btPointer) {
          if (RBT === $mod.TResolverBaseType.btPointer) {
            LTypeEl = LHS.LoTypeEl;
            RTypeEl = RHS.LoTypeEl;
            if (this.IsBaseType(LTypeEl,$mod.TResolverBaseType.btPointer,false)) {
              Result = 0}
             else if (this.IsBaseType(RTypeEl,$mod.TResolverBaseType.btPointer,false)) {
              Result = 10000}
             else if (this.IsSameType(LTypeEl,RTypeEl,$mod.TPRResolveAlias.prraAlias)) {
              Result = 0}
             else if ((LTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) && (RTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType)) Result = this.CheckAssignCompatibility(LTypeEl.DestType,RTypeEl.DestType,RaiseOnIncompatible,null);
          } else if (this.IsBaseType(LHS.LoTypeEl,$mod.TResolverBaseType.btPointer,false)) {
            if (RBT === $mod.TResolverBaseType.btContext) {
              RTypeEl = RHS.LoTypeEl;
              C = RTypeEl.$class.ClassType();
              if (C === pas.PasTree.TPasClassType) {
                return 10000}
               else if (C === pas.PasTree.TPasClassOfType) {
                Result = 10000}
               else if (C === pas.PasTree.TPasArrayType) {
                if (this.IsDynArray(RTypeEl,true)) Result = 10000;
              } else if ((C === pas.PasTree.TPasProcedureType) || (C === pas.PasTree.TPasFunctionType)) {
                Result = 100000}
               else if (C === pas.PasTree.TPasPointerType) Result = 0;
            };
          };
        } else if (LBT === $mod.TResolverBaseType.btContext) {
          LTypeEl = LHS.LoTypeEl;
          if (LTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
            Result = this.CheckAssignCompatibilityArrayType(LHS,RHS,ErrorEl,RaiseOnIncompatible)}
           else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
            if ((RHS.BaseType === $mod.TResolverBaseType.btRange) && (RHS.SubType === $mod.TResolverBaseType.btContext)) {
              RTypeEl = RHS.LoTypeEl;
              if (RTypeEl.$class.ClassType() === pas.PasTree.TPasRangeType) {
                this.ComputeElement(RTypeEl.RangeExpr.left,{get: function () {
                    return RightSubResolved;
                  }, set: function (v) {
                    RightSubResolved = v;
                  }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
                if ((RightSubResolved.BaseType === $mod.TResolverBaseType.btContext) && this.IsSameType(LTypeEl,RightSubResolved.LoTypeEl,$mod.TPRResolveAlias.prraAlias)) {
                  Result = 0;
                };
              };
            };
          } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
            if (((RBT in $mod.btAllStrings) && this.IsTGUID(LTypeEl)) && ($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) {
              Value = this.Eval$1(RHS,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConstExt),true);
              try {
                if (Value === null) if (RaiseOnIncompatible) {
                  this.RaiseXExpectedButYFound(20180414105916,"string literal","string",ErrorEl)}
                 else return 2147483647;
              } finally {
                pas.PasResolveEval.ReleaseEvalValue({get: function () {
                    return Value;
                  }, set: function (v) {
                    Value = v;
                  }});
              };
              Result = this.cStringToTGUID;
            };
          } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
            if (RHS.BaseType === $mod.TResolverBaseType.btPointer) {
              RTypeEl = RHS.LoTypeEl;
              if (this.IsBaseType(RTypeEl,$mod.TResolverBaseType.btPointer,false)) {
                Result = 10000}
               else {
                Result = this.CheckAssignCompatibilityPointerType(LTypeEl.DestType,RTypeEl,ErrorEl,false);
              };
            };
          };
        };
      };
      if ((Result >= 0) && (Result < 2147483647)) {
        if (!($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) {
          if (RaiseOnIncompatible) {
            this.RaiseVarExpected(20170318235637,ErrorEl,RHS.IdentEl);
          };
          return 2147483647;
        };
        return Result;
      };
      if (!RaiseOnIncompatible) return 2147483647;
      this.RaiseIncompatibleTypeRes(20170216152437,3028,[],RHS,LHS,ErrorEl);
      return Result;
    };
    this.CheckEqualElCompatibility = function (Left, Right, ErrorEl, RaiseOnIncompatible, SetReferenceFlags) {
      var Result = 0;
      var LFlags = {};
      var RFlags = {};
      var LeftResolved = new $mod.TPasResolverResult();
      var RightResolved = new $mod.TPasResolverResult();
      var LeftErrorEl = null;
      var RightErrorEl = null;
      Result = 2147483647;
      if (pas.PScanner.TModeSwitch.msDelphi in this.FCurrentParser.GetCurrentModeSwitches()) {
        LFlags = {}}
       else LFlags = rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProcType);
      if (SetReferenceFlags) LFlags = rtl.includeSet(LFlags,$mod.TPasResolverComputeFlag.rcSetReferenceFlags);
      this.ComputeElement(Left,{get: function () {
          return LeftResolved;
        }, set: function (v) {
          LeftResolved = v;
        }},rtl.refSet(LFlags),null);
      if (pas.PScanner.TModeSwitch.msDelphi in this.FCurrentParser.GetCurrentModeSwitches()) {
        RFlags = rtl.refSet(LFlags)}
       else {
        if (LeftResolved.BaseType === $mod.TResolverBaseType.btNil) {
          RFlags = rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProcType)}
         else if (this.IsProcedureType(LeftResolved,true)) {
          RFlags = rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProcType)}
         else RFlags = {};
      };
      if (SetReferenceFlags) RFlags = rtl.includeSet(RFlags,$mod.TPasResolverComputeFlag.rcSetReferenceFlags);
      this.ComputeElement(Right,{get: function () {
          return RightResolved;
        }, set: function (v) {
          RightResolved = v;
        }},rtl.refSet(RFlags),null);
      if (ErrorEl === null) {
        LeftErrorEl = Left;
        RightErrorEl = Right;
      } else {
        LeftErrorEl = ErrorEl;
        RightErrorEl = ErrorEl;
      };
      Result = this.CheckEqualResCompatibility(LeftResolved,RightResolved,LeftErrorEl,RaiseOnIncompatible,RightErrorEl);
      return Result;
    };
    this.CheckEqualResCompatibility = function (LHS, RHS, LErrorEl, RaiseOnIncompatible, RErrorEl) {
      var Result = 0;
      var LTypeEl = null;
      var RTypeEl = null;
      var ResolvedEl = new $mod.TPasResolverResult();
      Result = 2147483647;
      if (RErrorEl === null) RErrorEl = LErrorEl;
      if (!($mod.TPasResolverResultFlag.rrfReadable in LHS.Flags)) {
        if (LHS.BaseType === $mod.TResolverBaseType.btContext) {
          LTypeEl = LHS.LoTypeEl;
          if ((LTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && (this.ResolveAliasTypeEl(LHS.IdentEl) === LTypeEl)) {
            if (RHS.BaseType === $mod.TResolverBaseType.btNil) {
              return 0}
             else if (RHS.BaseType in $mod.btAllStrings) {
              if ((($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags) && (LTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && this.IsTGUIDString(RHS)) return this.cInterfaceToString;
            } else if (RHS.BaseType === $mod.TResolverBaseType.btContext) {
              RTypeEl = RHS.LoTypeEl;
              if (((RTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) && ($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) && (LTypeEl.ObjKind === pas.PasTree.TPasObjKind.okClass)) {
                return 0}
               else if ((((RTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) && ($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) && (LTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && this.IsTGUID(RTypeEl)) return this.cInterfaceToTGUID;
            };
          };
        };
        this.RaiseMsg(20170216152438,3038,rtl.getResStr(pas.PasResolveEval,"sNotReadable"),[],LErrorEl);
      };
      if (!($mod.TPasResolverResultFlag.rrfReadable in RHS.Flags)) {
        if (RHS.BaseType === $mod.TResolverBaseType.btContext) {
          RTypeEl = RHS.LoTypeEl;
          if ((RTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && (this.ResolveAliasTypeEl(RHS.IdentEl) === RTypeEl)) {
            if (LHS.BaseType === $mod.TResolverBaseType.btNil) {
              return 0}
             else if (LHS.BaseType in $mod.btAllStrings) {
              if ((($mod.TPasResolverResultFlag.rrfReadable in LHS.Flags) && (RTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && this.IsTGUIDString(LHS)) return this.cInterfaceToString;
            } else if (LHS.BaseType === $mod.TResolverBaseType.btContext) {
              LTypeEl = LHS.LoTypeEl;
              if (((LTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) && ($mod.TPasResolverResultFlag.rrfReadable in LHS.Flags)) && (RTypeEl.ObjKind === pas.PasTree.TPasObjKind.okClass)) {
                return 0}
               else if ((((LTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) && ($mod.TPasResolverResultFlag.rrfReadable in LHS.Flags)) && (RTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && this.IsTGUID(LTypeEl)) return this.cInterfaceToTGUID;
            };
          };
        };
        this.RaiseMsg(20170216152440,3038,rtl.getResStr(pas.PasResolveEval,"sNotReadable"),[],RErrorEl);
      };
      if ((LHS.BaseType === $mod.TResolverBaseType.btCustom) || (RHS.BaseType === $mod.TResolverBaseType.btCustom)) {
        Result = this.CheckEqualCompatibilityCustomType(LHS,RHS,LErrorEl,RaiseOnIncompatible);
        if ((Result === 2147483647) && RaiseOnIncompatible) this.RaiseIncompatibleTypeRes(20170330010727,3028,[],RHS,LHS,LErrorEl);
        return Result;
      } else if (LHS.BaseType === RHS.BaseType) {
        if (LHS.BaseType === $mod.TResolverBaseType.btContext) {
          return this.CheckEqualCompatibilityUserType(LHS,RHS,LErrorEl,RaiseOnIncompatible)}
         else return 0;
      } else if (LHS.BaseType in $mod.btAllInteger) {
        if (RHS.BaseType in rtl.unionSet($mod.btAllInteger,$mod.btAllFloats)) {
          return 2}
         else if ((RHS.BaseType === $mod.TResolverBaseType.btRange) && (RHS.SubType in $mod.btAllInteger)) return 2;
      } else if (LHS.BaseType in $mod.btAllFloats) {
        if (RHS.BaseType in rtl.unionSet($mod.btAllInteger,$mod.btAllFloats)) return 2;
      } else if (LHS.BaseType in $mod.btAllBooleans) {
        if (RHS.BaseType in $mod.btAllBooleans) {
          return 2}
         else if ((RHS.BaseType === $mod.TResolverBaseType.btRange) && (RHS.SubType in $mod.btAllBooleans)) return 2;
      } else if (LHS.BaseType in $mod.btAllStringAndChars) {
        if (RHS.BaseType in $mod.btAllStringAndChars) {
          return 2}
         else if ((RHS.BaseType === $mod.TResolverBaseType.btRange) && (RHS.SubType in $mod.btAllChars)) {
          return 2}
         else if (RHS.BaseType === $mod.TResolverBaseType.btContext) {
          RTypeEl = RHS.LoTypeEl;
          if (RTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
            if ((RTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) && this.IsTGUIDString(LHS)) return this.cInterfaceToString;
          } else if ((RTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) && this.IsTGUID(RTypeEl)) return this.cTGUIDToString;
        };
      } else if (LHS.BaseType === $mod.TResolverBaseType.btNil) {
        if (RHS.BaseType in rtl.createSet($mod.TResolverBaseType.btPointer,$mod.TResolverBaseType.btNil)) {
          return 0}
         else if (RHS.BaseType === $mod.TResolverBaseType.btContext) {
          LTypeEl = RHS.LoTypeEl;
          if (((((LTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) || (LTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType)) || (LTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType)) || pas.PasTree.TPasProcedureType.isPrototypeOf(LTypeEl)) || this.IsDynArray(LTypeEl,true)) return 0;
        };
        if (RaiseOnIncompatible) {
          this.RaiseIncompatibleTypeRes(20170216152442,3028,[],RHS,LHS,RErrorEl)}
         else return 2147483647;
      } else if (RHS.BaseType === $mod.TResolverBaseType.btNil) {
        if (LHS.BaseType === $mod.TResolverBaseType.btPointer) {
          return 0}
         else if (LHS.BaseType === $mod.TResolverBaseType.btContext) {
          LTypeEl = LHS.LoTypeEl;
          if (((((LTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) || (LTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType)) || (LTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType)) || pas.PasTree.TPasProcedureType.isPrototypeOf(LTypeEl)) || this.IsDynArray(LTypeEl,true)) return 0;
        };
        if (RaiseOnIncompatible) {
          this.RaiseIncompatibleTypeRes(20170216152444,3028,[],LHS,RHS,LErrorEl)}
         else return 2147483647;
      } else if (LHS.BaseType === $mod.TResolverBaseType.btPointer) {
        if (RHS.BaseType === $mod.TResolverBaseType.btContext) {
          RTypeEl = RHS.LoTypeEl;
          if (RTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
            return 0}
           else if (RTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
            return 2}
           else if (RTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) return 2;
        };
      } else if (LHS.BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet)) {
        if (RHS.BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet)) {
          if (LHS.LoTypeEl === null) return 0;
          if (RHS.LoTypeEl === null) return 0;
          if (this.IsSameType(LHS.LoTypeEl,RHS.LoTypeEl,$mod.TPRResolveAlias.prraAlias)) return 0;
          if ((LHS.SubType === RHS.SubType) && (LHS.SubType in rtl.unionSet(rtl.unionSet($mod.btAllBooleans,$mod.btAllInteger),$mod.btAllChars))) return 0;
          if (((LHS.SubType in $mod.btAllBooleans) && (RHS.SubType in $mod.btAllBooleans)) || ((LHS.SubType in $mod.btAllInteger) && (RHS.SubType in $mod.btAllInteger))) return 2;
          if (RaiseOnIncompatible) {
            this.RaiseMsg(20170216152446,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),["set of " + this.GetBaseTypeNames(LHS.SubType),"set of " + this.GetBaseTypeNames(RHS.SubType)],LErrorEl)}
           else return 2147483647;
        };
      } else if (LHS.BaseType === $mod.TResolverBaseType.btRange) {
        if (LHS.SubType in $mod.btAllInteger) {
          if (RHS.BaseType in $mod.btAllInteger) {
            return 2}
           else if ((RHS.BaseType === $mod.TResolverBaseType.btRange) && (RHS.SubType in $mod.btAllInteger)) return 2;
        } else if (LHS.SubType in $mod.btAllBooleans) {
          if (RHS.BaseType in $mod.btAllBooleans) {
            return 2}
           else if ((RHS.BaseType === $mod.TResolverBaseType.btRange) && (RHS.SubType in $mod.btAllBooleans)) return 2;
        } else if (LHS.SubType in $mod.btAllChars) {
          if (RHS.BaseType in $mod.btAllStringAndChars) {
            return 2}
           else if ((RHS.BaseType === $mod.TResolverBaseType.btRange) && (RHS.SubType in $mod.btAllChars)) return 2;
        } else if (LHS.SubType === $mod.TResolverBaseType.btContext) {
          LTypeEl = LHS.LoTypeEl;
          if (LTypeEl.$class.ClassType() === pas.PasTree.TPasRangeType) {
            this.ComputeElement(LTypeEl.RangeExpr.left,{get: function () {
                return ResolvedEl;
              }, set: function (v) {
                ResolvedEl = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
            if (ResolvedEl.BaseType === $mod.TResolverBaseType.btContext) {
              LTypeEl = ResolvedEl.LoTypeEl;
              if (LTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
                if (RHS.BaseType === $mod.TResolverBaseType.btContext) {
                  RTypeEl = RHS.LoTypeEl;
                  if (LTypeEl === RTypeEl) return 2;
                };
              };
            };
          };
        };
      } else if (LHS.BaseType === $mod.TResolverBaseType.btContext) {
        LTypeEl = LHS.LoTypeEl;
        if (LTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
          if (RHS.BaseType === $mod.TResolverBaseType.btRange) {
            RTypeEl = RHS.LoTypeEl;
            if (RTypeEl.$class.ClassType() === pas.PasTree.TPasRangeType) {
              this.ComputeElement(RTypeEl.RangeExpr.left,{get: function () {
                  return ResolvedEl;
                }, set: function (v) {
                  ResolvedEl = v;
                }},rtl.createSet($mod.TPasResolverComputeFlag.rcConstant),null);
              if (ResolvedEl.BaseType === $mod.TResolverBaseType.btContext) {
                RTypeEl = ResolvedEl.LoTypeEl;
                if (LTypeEl === RTypeEl) return 2;
              };
            };
          };
        } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          if (RHS.BaseType === $mod.TResolverBaseType.btPointer) {
            return 2}
           else if (LTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
            if (RHS.BaseType in $mod.btAllStrings) {
              if (this.IsTGUIDString(RHS)) return this.cInterfaceToString;
            } else if (RHS.BaseType === $mod.TResolverBaseType.btContext) {
              RTypeEl = RHS.LoTypeEl;
              if ((RTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) && this.IsTGUID(RTypeEl)) return this.cInterfaceToTGUID;
            };
          };
        } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
          if (RHS.BaseType === $mod.TResolverBaseType.btPointer) return 2;
        } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
          if (this.IsTGUID(LTypeEl)) {
            if (RHS.BaseType in $mod.btAllStrings) {
              return this.cTGUIDToString}
             else if (RHS.BaseType === $mod.TResolverBaseType.btContext) {
              RTypeEl = RHS.LoTypeEl;
              if ((RTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && (RTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) return this.cInterfaceToTGUID;
            };
          };
        } else if (LTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          if (RHS.BaseType === $mod.TResolverBaseType.btPointer) return 0;
        };
      };
      if (RaiseOnIncompatible) {
        this.RaiseIncompatibleTypeRes(20170216152449,3028,[],RHS,LHS,RErrorEl)}
       else return 2147483647;
      return Result;
    };
    this.IsVariableConst = function (El, PosEl, RaiseIfConst) {
      var Result = false;
      var CurEl = null;
      var VarResolved = new $mod.TPasResolverResult();
      var Loop = null;
      Result = false;
      CurEl = PosEl;
      while (CurEl !== null) {
        if (CurEl.$class.ClassType() === pas.PasTree.TPasImplForLoop) {
          Loop = CurEl;
          if (Loop.VariableName !== PosEl) {
            this.ComputeElement(Loop.VariableName,{get: function () {
                return VarResolved;
              }, set: function (v) {
                VarResolved = v;
              }},rtl.createSet($mod.TPasResolverComputeFlag.rcNoImplicitProc),null);
            if (VarResolved.IdentEl === El) {
              if (RaiseIfConst) this.RaiseMsg(20180430100719,3111,rtl.getResStr(pas.PasResolveEval,"sIllegalAssignmentToForLoopVar"),[El.FName],PosEl);
              return true;
            };
          };
        };
        CurEl = CurEl.FParent;
      };
      return Result;
    };
    this.ResolvedElCanBeVarParam = function (ResolvedEl, PosEl, RaiseIfConst) {
      var Self = this;
      var Result = false;
      function NotLocked(El) {
        var Result = false;
        Result = !Self.IsVariableConst(El,PosEl,RaiseIfConst);
        return Result;
      };
      var IdentEl = null;
      Result = false;
      if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable),ResolvedEl.Flags),rtl.createSet($mod.TPasResolverResultFlag.rrfReadable,$mod.TPasResolverResultFlag.rrfWritable))) return Result;
      if (ResolvedEl.IdentEl === null) return true;
      IdentEl = ResolvedEl.IdentEl;
      if (IdentEl.$class.ClassType() === pas.PasTree.TPasVariable) return NotLocked(IdentEl);
      if (IdentEl.$class.ClassType() === pas.PasTree.TPasConst) {
        if (IdentEl.IsConst) {
          if (RaiseIfConst) Self.RaiseMsg(20180430100719,3110,rtl.getResStr(pas.PasResolveEval,"sCantAssignValuesToConstVariable"),[],PosEl);
          return false;
        };
        return NotLocked(IdentEl);
      };
      if (IdentEl.$class.ClassType() === pas.PasTree.TPasArgument) {
        if (IdentEl.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argConst,pas.PasTree.TArgumentAccess.argConstRef)) {
          if (RaiseIfConst) Self.RaiseMsg(20180430100843,3110,rtl.getResStr(pas.PasResolveEval,"sCantAssignValuesToConstVariable"),[],PosEl);
          return false;
        };
        Result = IdentEl.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argDefault,pas.PasTree.TArgumentAccess.argVar,pas.PasTree.TArgumentAccess.argOut);
        return Result && NotLocked(IdentEl);
      };
      if (IdentEl.$class.ClassType() === pas.PasTree.TPasResultElement) return NotLocked(IdentEl);
      if (($mod.TPasResolverOption.proPropertyAsVarParam in Self.FOptions) && (IdentEl.$class.ClassType() === pas.PasTree.TPasProperty)) return NotLocked(IdentEl);
      return Result;
    };
    this.ResolvedElIsClassInstance = function (ResolvedEl) {
      var Result = false;
      var TypeEl = null;
      Result = false;
      if (ResolvedEl.BaseType !== $mod.TResolverBaseType.btContext) return Result;
      TypeEl = ResolvedEl.LoTypeEl;
      if (TypeEl === null) return Result;
      if (TypeEl.$class.ClassType() !== pas.PasTree.TPasClassType) return Result;
      if (TypeEl.ObjKind !== pas.PasTree.TPasObjKind.okClass) return Result;
      if ((pas.PasTree.TPasVariable.isPrototypeOf(ResolvedEl.IdentEl) || (ResolvedEl.IdentEl.$class.ClassType() === pas.PasTree.TPasArgument)) || (ResolvedEl.IdentEl.$class.ClassType() === pas.PasTree.TPasResultElement)) return true;
      return Result;
    };
    this.ElHasModeSwitch = function (El, ms) {
      var Result = false;
      Result = ms in this.GetElModeSwitches(El);
      return Result;
    };
    this.GetElModeSwitches = function (El) {
      var Result = {};
      var C = null;
      while (El !== null) {
        if (El.FData !== null) {
          C = El.FData.$class.ClassType();
          if (C.InheritsFrom($mod.TPasProcedureScope)) {
            return El.FData.ModeSwitches}
           else if (C.InheritsFrom($mod.TPasSectionScope)) return El.FData.ModeSwitches;
        };
        El = El.FParent;
      };
      Result = rtl.refSet(this.FCurrentParser.GetCurrentModeSwitches());
      return Result;
    };
    this.ElHasBoolSwitch = function (El, bs) {
      var Result = false;
      Result = bs in this.GetElBoolSwitches(El);
      return Result;
    };
    this.GetElBoolSwitches = function (El) {
      var Result = {};
      var C = null;
      Result = rtl.refSet(this.FCurrentParser.FScanner.FCurrentBoolSwitches);
      while (El !== null) {
        if (El.FData !== null) {
          C = El.FData.$class.ClassType();
          if (C.InheritsFrom($mod.TPasProcedureScope)) {
            return El.FData.BoolSwitches}
           else if (C.InheritsFrom($mod.TPasSectionScope)) {
            return El.FData.BoolSwitches}
           else if (C.InheritsFrom($mod.TPasModuleScope)) return El.FData.BoolSwitches;
        };
        El = El.FParent;
      };
      return Result;
    };
    this.GetProcTypeDescription = function (ProcType, Flags) {
      var Result = "";
      var Args = null;
      var i = 0;
      var Arg = null;
      var ArgType = null;
      if (ProcType === null) return "nil";
      Result = ProcType.$class.TypeName();
      if (ProcType.GetIsReference()) Result = (pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmReferenceTo] + " ") + Result;
      if (($mod.TPRProcTypeDescFlag.prptdUseName in Flags) && pas.PasTree.TPasProcedure.isPrototypeOf(ProcType.FParent)) {
        if ($mod.TPRProcTypeDescFlag.prptdAddPaths in Flags) {
          Result = (Result + " ") + ProcType.FParent.FullName()}
         else Result = (Result + " ") + ProcType.FParent.FName;
      };
      Args = ProcType.Args;
      if (Args.FCount > 0) {
        Result = Result + "(";
        for (var $l1 = 0, $end2 = Args.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (i > 0) Result = Result + ";";
          Arg = rtl.getObject(Args.Get(i));
          if (pas.PasTree.AccessNames[Arg.Access] !== "") Result = Result + pas.PasTree.AccessNames[Arg.Access];
          if (Arg.ArgType === null) {
            Result = Result + "untyped"}
           else {
            ArgType = Arg.ArgType;
            if ($mod.TPRProcTypeDescFlag.prptdResolveSimpleAlias in Flags) ArgType = $mod.ResolveSimpleAliasType(ArgType);
            Result = Result + this.GetTypeDescription(ArgType,$mod.TPRProcTypeDescFlag.prptdAddPaths in Flags);
          };
        };
        Result = Result + ")";
      };
      if (ProcType.GetIsOfObject()) Result = (Result + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmOfObject];
      if (ProcType.GetIsNested()) Result = (Result + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmIsNested];
      if (pas.PasTree.cCallingConventions[ProcType.CallingConvention] !== "") Result = (Result + ";") + pas.PasTree.cCallingConventions[ProcType.CallingConvention];
      return Result;
    };
    this.GetResolverResultDescription = function (T, OnlyType) {
      var Self = this;
      var Result = "";
      function GetSubTypeName() {
        var Result = "";
        if ((T.LoTypeEl !== null) && (T.LoTypeEl.FName !== "")) {
          Result = T.LoTypeEl.FName}
         else Result = Self.GetBaseTypeNames(T.SubType);
        return Result;
      };
      var ArrayEl = null;
      var $tmp1 = T.BaseType;
      if ($tmp1 === $mod.TResolverBaseType.btModule) {
        return ($mod.GetElementTypeName(T.IdentEl) + " ") + T.IdentEl.FName}
       else if ($tmp1 === $mod.TResolverBaseType.btNil) {
        return "nil"}
       else if ($tmp1 === $mod.TResolverBaseType.btRange) {
        Result = "range of " + GetSubTypeName()}
       else if ($tmp1 === $mod.TResolverBaseType.btSet) {
        Result = "set of " + GetSubTypeName()}
       else if ($tmp1 === $mod.TResolverBaseType.btArrayLit) {
        Result = "array of " + GetSubTypeName()}
       else if ($tmp1 === $mod.TResolverBaseType.btArrayOrSet) {
        Result = "set\/array literal of " + GetSubTypeName()}
       else if ($tmp1 === $mod.TResolverBaseType.btContext) {
        if (T.LoTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
          Result = "class of " + T.LoTypeEl.DestType.FName}
         else if (T.LoTypeEl.$class.ClassType() === pas.PasTree.TPasAliasType) {
          Result = T.LoTypeEl.DestType.FName}
         else if (T.LoTypeEl.$class.ClassType() === pas.PasTree.TPasTypeAliasType) {
          Result = "type " + T.LoTypeEl.DestType.FName}
         else if (T.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
          ArrayEl = T.LoTypeEl;
          if (rtl.length(ArrayEl.Ranges) === 0) {
            Result = "array of " + ArrayEl.ElType.FName;
            if (Self.IsOpenArray(ArrayEl)) Result = "open " + Result;
          } else Result = "static array[] of " + ArrayEl.ElType.FName;
        } else if (pas.PasTree.TPasProcedureType.isPrototypeOf(T.LoTypeEl)) {
          Result = Self.GetProcTypeDescription(T.LoTypeEl,{})}
         else if (T.LoTypeEl.FName !== "") {
          Result = T.LoTypeEl.FName}
         else Result = T.LoTypeEl.ElementTypeName();
      } else if ($tmp1 === $mod.TResolverBaseType.btCustom) {
        Result = T.LoTypeEl.FName}
       else {
        Result = Self.GetBaseTypeNames(T.BaseType);
      };
      if ((!OnlyType && (T.LoTypeEl !== T.IdentEl)) && (T.IdentEl !== null)) Result = (T.IdentEl.FName + ":") + Result;
      return Result;
    };
    this.GetTypeDescription = function (aType, AddPath) {
      var Self = this;
      var Result = "";
      function GetName() {
        var Result = "";
        var s = "";
        Result = aType.FName;
        if (Result === "") {
          if (pas.PasTree.TPasArrayType.isPrototypeOf(aType)) {
            if (rtl.length(aType.Ranges) > 0) {
              Result = "static array"}
             else if (Self.IsOpenArray(aType)) {
              Result = "open array"}
             else Result = "dynamic array";
          } else Result = $mod.GetElementTypeName(aType);
        };
        if (AddPath) {
          s = aType.ParentPath();
          if ((s !== "") && (s !== ".")) Result = (s + ".") + Result;
        };
        return Result;
      };
      if (aType === null) return "untyped";
      Result = GetName();
      if (aType.$class.ClassType() === pas.PasTree.TPasUnresolvedSymbolRef) {
        if ($mod.TResElDataBuiltInProc.isPrototypeOf(aType.FData)) Result = Result + "()";
        return Result;
      };
      return Result;
    };
    this.GetTypeDescription$1 = function (R, AddPath) {
      var Result = "";
      var s = "";
      Result = this.GetTypeDescription(R.LoTypeEl,AddPath);
      if (R.BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayLit,$mod.TResolverBaseType.btArrayOrSet)) Result = (this.GetBaseTypeNames(R.BaseType) + " of ") + Result;
      if ((R.LoTypeEl !== null) && (R.IdentEl === R.LoTypeEl)) {
        s = $mod.GetElementTypeName(R.LoTypeEl);
        if (s !== "") {
          Result = (s + " ") + Result}
         else Result = "type " + Result;
      };
      return Result;
    };
    this.GetBaseDescription = function (R, AddPath) {
      var Result = "";
      if (R.BaseType === $mod.TResolverBaseType.btContext) {
        Result = this.GetTypeDescription$1(R,AddPath)}
       else if ((R.BaseType === $mod.TResolverBaseType.btPointer) && !this.IsBaseType(R.LoTypeEl,$mod.TResolverBaseType.btPointer,false)) {
        Result = "^" + this.GetTypeDescription$1(R,AddPath)}
       else Result = this.GetBaseTypeNames(R.BaseType);
      return Result;
    };
    this.GetProcFirstImplEl = function (Proc) {
      var Result = null;
      var Scope = null;
      var Body = null;
      Result = null;
      if (Proc === null) return Result;
      if (Proc.Body !== null) {
        Body = Proc.Body.Body}
       else Body = null;
      if (Body === null) {
        if (Proc.FData === null) return Result;
        Scope = rtl.as(Proc.FData,$mod.TPasProcedureScope);
        Proc = Scope.ImplProc;
        if (Proc === null) return Result;
        if (Proc.Body === null) return Result;
        Body = Proc.Body.Body;
        if (Body === null) return Result;
      };
      if (Body.Elements === null) return Result;
      if (Body.Elements.FCount === 0) return Result;
      Result = rtl.getObject(Body.Elements.Get(0));
      return Result;
    };
    this.GetPasPropertyAncestor = function (El, WithRedeclarations) {
      var Result = null;
      Result = null;
      if (El === null) return Result;
      if (!WithRedeclarations && (El.VarType !== null)) return Result;
      if (El.FData === null) return Result;
      Result = El.FData.AncestorProp;
      return Result;
    };
    this.GetPasPropertyType = function (El) {
      var Result = null;
      Result = null;
      while (El !== null) {
        if (El.VarType !== null) return El.VarType;
        El = this.GetPasPropertyAncestor(El,false);
      };
      return Result;
    };
    this.GetPasPropertyArgs = function (El) {
      var Result = null;
      while (El !== null) {
        if (El.VarType !== null) return El.FArgs;
        El = this.GetPasPropertyAncestor(El,false);
      };
      Result = null;
      return Result;
    };
    this.GetPasPropertyGetter = function (El) {
      var Result = null;
      var DeclEl = null;
      Result = null;
      while (El !== null) {
        if (El.ReadAccessor !== null) {
          DeclEl = rtl.as(El.ReadAccessor.FData,$mod.TResolvedReference).FDeclaration;
          Result = DeclEl;
          return Result;
        };
        El = this.GetPasPropertyAncestor(El,false);
      };
      return Result;
    };
    this.GetPasPropertySetter = function (El) {
      var Result = null;
      var DeclEl = null;
      Result = null;
      while (El !== null) {
        if (El.WriteAccessor !== null) {
          DeclEl = rtl.as(El.WriteAccessor.FData,$mod.TResolvedReference).FDeclaration;
          Result = DeclEl;
          return Result;
        };
        El = this.GetPasPropertyAncestor(El,false);
      };
      return Result;
    };
    this.GetPasPropertyIndex = function (El) {
      var Result = null;
      Result = null;
      while (El !== null) {
        if (El.IndexExpr !== null) {
          Result = El.IndexExpr;
          return Result;
        };
        El = this.GetPasPropertyAncestor(El,false);
      };
      return Result;
    };
    this.GetPasPropertyStoredExpr = function (El) {
      var Result = null;
      Result = null;
      while (El !== null) {
        if (El.StoredAccessor !== null) {
          Result = El.StoredAccessor;
          return Result;
        };
        El = this.GetPasPropertyAncestor(El,false);
      };
      return Result;
    };
    this.GetPasPropertyDefaultExpr = function (El) {
      var Result = null;
      Result = null;
      while (El !== null) {
        if (El.DefaultExpr !== null) {
          Result = El.DefaultExpr;
          return Result;
        } else if (El.IsNodefault) return null;
        El = this.GetPasPropertyAncestor(El,false);
      };
      return Result;
    };
    this.GetPasClassAncestor = function (ClassEl, SkipAlias) {
      var Result = null;
      var DeclEl = null;
      var ClassScope = null;
      Result = null;
      if (ClassEl === null) return Result;
      if (ClassEl.FData === null) return Result;
      if (ClassEl.IsForward) {
        DeclEl = rtl.as(ClassEl.FData,$mod.TResolvedReference).FDeclaration;
        ClassEl = rtl.as($mod.NoNil(DeclEl),pas.PasTree.TPasClassType);
        Result = ClassEl;
      } else {
        ClassScope = rtl.as(ClassEl.FData,$mod.TPasClassScope);
        if (!($mod.TPasClassScopeFlag.pcsfAncestorResolved in ClassScope.Flags)) return Result;
        if (SkipAlias) {
          if (ClassScope.AncestorScope === null) return Result;
          Result = ClassScope.AncestorScope.FElement;
        } else Result = ClassScope.DirectAncestor;
      };
      return Result;
    };
    this.ProcHasImplElements = function (Proc) {
      var Result = false;
      Result = this.GetProcFirstImplEl(Proc) !== null;
      return Result;
    };
    this.IndexOfImplementedInterface = function (ClassEl, aType) {
      var Result = 0;
      var List = null;
      var i = 0;
      if (aType === null) return -1;
      aType = this.ResolveAliasType(aType);
      List = ClassEl.Interfaces;
      for (var $l1 = 0, $end2 = List.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.ResolveAliasType(rtl.getObject(List.Get(i))) === aType) return i;
      };
      Result = -1;
      return Result;
    };
    this.GetLoop = function (El) {
      var Result = null;
      while (El !== null) {
        if (((El.$class.ClassType() === pas.PasTree.TPasImplRepeatUntil) || (El.$class.ClassType() === pas.PasTree.TPasImplWhileDo)) || (El.$class.ClassType() === pas.PasTree.TPasImplForLoop)) return El;
        El = El.FParent;
      };
      Result = null;
      return Result;
    };
    this.ResolveAliasType = function (aType) {
      var Result = null;
      var C = null;
      while (aType !== null) {
        C = aType.$class.ClassType();
        if ((C === pas.PasTree.TPasAliasType) || (C === pas.PasTree.TPasTypeAliasType)) {
          aType = aType.DestType}
         else if (((C === pas.PasTree.TPasClassType) && aType.IsForward) && $mod.TResolvedReference.isPrototypeOf(aType.FData)) {
          aType = rtl.as($mod.NoNil(aType.FData.FDeclaration),pas.PasTree.TPasType)}
         else return aType;
      };
      Result = null;
      return Result;
    };
    this.ResolveAliasTypeEl = function (El) {
      var Result = null;
      if (pas.PasTree.TPasType.isPrototypeOf(El)) {
        Result = this.ResolveAliasType(El)}
       else Result = null;
      return Result;
    };
    this.ExprIsAddrTarget = function (El) {
      var Result = false;
      var Parent = null;
      var Prop = null;
      Result = false;
      if (El === null) return Result;
      if (!this.IsNameExpr(El)) return Result;
      do {
        Parent = El.FParent;
        if (Parent.$class.ClassType() === pas.PasTree.TUnaryExpr) {
          if (Parent.OpCode === pas.PasTree.TExprOpCode.eopAddress) return true;
        } else if (Parent.$class.ClassType() === pas.PasTree.TBinaryExpr) {
          if (Parent.right !== El) return Result;
          if (Parent.OpCode !== pas.PasTree.TExprOpCode.eopSubIdent) return Result;
        } else if (Parent.$class.ClassType() === pas.PasTree.TParamsExpr) {
          if (Parent.Value !== El) return Result;
        } else if (Parent.$class.ClassType() === pas.PasTree.TPasProperty) {
          Prop = Parent;
          Result = ((Prop.ReadAccessor === El) || (Prop.WriteAccessor === El)) || (Prop.StoredAccessor === El);
          return Result;
        } else if (Parent.$class.ClassType() === pas.PasTree.TPasImplAssign) {
          if (Parent.right !== El) return Result;
          if (pas.PScanner.TModeSwitch.msDelphi in this.FCurrentParser.GetCurrentModeSwitches()) return true;
          return Result;
        } else return Result;
        El = Parent;
      } while (!false);
      return Result;
    };
    this.IsNameExpr = function (El) {
      var Result = false;
      Result = (El.$class.ClassType() === pas.PasTree.TSelfExpr) || ((El.$class.ClassType() === pas.PasTree.TPrimitiveExpr) && (El.Kind === pas.PasTree.TPasExprKind.pekIdent));
      return Result;
    };
    this.GetNameExprValue = function (El) {
      var Result = "";
      if (El === null) {
        Result = ""}
       else if (El.$class.ClassType() === pas.PasTree.TPrimitiveExpr) {
        if (El.Kind === pas.PasTree.TPasExprKind.pekIdent) {
          Result = El.Value}
         else Result = "";
      } else if (El.$class.ClassType() === pas.PasTree.TSelfExpr) {
        Result = "self"}
       else Result = "";
      return Result;
    };
    this.GetNextDottedExpr = function (El) {
      var Result = null;
      var Bin = null;
      var C = null;
      Result = null;
      if (El === null) return Result;
      do {
        if (!pas.PasTree.TBinaryExpr.isPrototypeOf(El.FParent)) return Result;
        Bin = El.FParent;
        if (Bin.OpCode !== pas.PasTree.TExprOpCode.eopSubIdent) return Result;
        if (El === Bin.right) {
          El = Bin}
         else {
          El = Bin.right;
          do {
            C = El.$class.ClassType();
            if (C === pas.PasTree.TSelfExpr) {
              return El}
             else if (C === pas.PasTree.TPrimitiveExpr) {
              if (El.Kind !== pas.PasTree.TPasExprKind.pekIdent) this.RaiseNotYetImplemented(20170502163825,El,"");
              return El;
            } else if (C === pas.PasTree.TBinaryExpr) {
              if (El.OpCode !== pas.PasTree.TExprOpCode.eopSubIdent) this.RaiseNotYetImplemented(20170502163718,El,"");
              El = El.left;
            } else if (C === pas.PasTree.TParamsExpr) {
              if (!(El.Kind in rtl.createSet(pas.PasTree.TPasExprKind.pekFuncParams,pas.PasTree.TPasExprKind.pekArrayParams))) this.RaiseNotYetImplemented(20170502163908,El,"");
              El = El.Value;
            };
          } while (!(El === null));
          this.RaiseNotYetImplemented(20170502163953,Bin,"");
        };
      } while (!false);
      return Result;
    };
    this.GetUsesUnitInFilename = function (InFileExpr) {
      var Result = "";
      var Value = null;
      if (!pas.PasTree.TPrimitiveExpr.isPrototypeOf(InFileExpr)) this.RaiseXExpectedButYFound(20180221234828,"string literal",$mod.GetElementTypeName(InFileExpr),InFileExpr);
      Value = this.fExprEvaluator.Eval(InFileExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst));
      try {
        if (Value === null) this.RaiseXExpectedButYFound(20180222000004,"string literal",$mod.GetElementTypeName(InFileExpr),InFileExpr);
        var $tmp1 = Value.Kind;
        if ($tmp1 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
          Result = Value.S}
         else {
          this.RaiseXExpectedButYFound(20180222000122,"string literal",Value.AsDebugString(),InFileExpr);
        };
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
      };
      return Result;
    };
    this.GetPathStart = function (El) {
      var Result = null;
      var C = null;
      Result = null;
      while (El !== null) {
        C = El.$class.ClassType();
        if (C === pas.PasTree.TPrimitiveExpr) {
          return El}
         else if (C === pas.PasTree.TSelfExpr) {
          return El}
         else if (C === pas.PasTree.TBinaryExpr) {
          if (El.OpCode === pas.PasTree.TExprOpCode.eopSubIdent) {
            El = El.left}
           else return Result;
        } else if (C === pas.PasTree.TParamsExpr) {
          El = El.Value}
         else return Result;
      };
      return Result;
    };
    this.GetNewInstanceExpr = function (El) {
      var Result = null;
      var C = null;
      Result = null;
      while (El !== null) {
        if ($mod.TResolvedReference.isPrototypeOf(El.FData) && ($mod.TResolvedReferenceFlag.rrfNewInstance in El.FData.Flags)) return El;
        C = El.$class.ClassType();
        if (C === pas.PasTree.TBinaryExpr) {
          if (El.OpCode === pas.PasTree.TExprOpCode.eopSubIdent) {
            El = El.right}
           else return Result;
        } else if (C === pas.PasTree.TParamsExpr) {
          El = El.Value}
         else return Result;
      };
      return Result;
    };
    this.ParentNeedsExprResult = function (El) {
      var Result = false;
      var C = null;
      var P = null;
      if ((El === null) || (El.FParent === null)) return false;
      Result = false;
      P = El.FParent;
      C = P.$class.ClassType();
      if (C === pas.PasTree.TBinaryExpr) {
        if (P.right === El) {
          if ((P.OpCode === pas.PasTree.TExprOpCode.eopSubIdent) || ((P.OpCode === pas.PasTree.TExprOpCode.eopNone) && pas.PasTree.TInheritedExpr.isPrototypeOf(P.left))) {
            Result = this.ParentNeedsExprResult(P)}
           else Result = true;
        } else Result = true;
      } else if (C.InheritsFrom(pas.PasTree.TPasExpr)) {
        Result = true}
       else if ((((C === pas.PasTree.TPasEnumValue) || (C === pas.PasTree.TPasArgument)) || (C === pas.PasTree.TPasVariable)) || (C === pas.PasTree.TPasExportSymbol)) {
        Result = true}
       else if (C === pas.PasTree.TPasClassType) {
        Result = P.GUIDExpr === El}
       else if (C === pas.PasTree.TPasProperty) {
        Result = ((P.IndexExpr === El) || (P.DispIDExpr === El)) || (P.DefaultExpr === El)}
       else if (C === pas.PasTree.TPasProcedure) {
        Result = (P.LibraryExpr === El) || (P.DispIDExpr === El)}
       else if (C === pas.PasTree.TPasImplRepeatUntil) {
        Result = P.ConditionExpr === El}
       else if (C === pas.PasTree.TPasImplIfElse) {
        Result = P.ConditionExpr === El}
       else if (C === pas.PasTree.TPasImplWhileDo) {
        Result = P.ConditionExpr === El}
       else if (C === pas.PasTree.TPasImplWithDo) {
        Result = P.Expressions.IndexOf(El) >= 0}
       else if (C === pas.PasTree.TPasImplCaseOf) {
        Result = P.CaseExpr === El}
       else if (C === pas.PasTree.TPasImplCaseStatement) {
        Result = P.Expressions.IndexOf(El) >= 0}
       else if (C === pas.PasTree.TPasImplForLoop) {
        Result = (P.StartExpr === El) || (P.EndExpr === El)}
       else if (C === pas.PasTree.TPasImplAssign) {
        Result = P.right === El}
       else if (C === pas.PasTree.TPasImplRaise) Result = P.ExceptAddr === El;
      return Result;
    };
    this.GetReference_NewInstanceClass = function (Ref) {
      var Result = null;
      Result = rtl.as(rtl.as(Ref.Context,$mod.TResolvedRefCtxConstructor).Typ,pas.PasTree.TPasClassType);
      return Result;
    };
    this.IsDynArray = function (TypeEl, OptionalOpenArray) {
      var Result = false;
      TypeEl = this.ResolveAliasType(TypeEl);
      if ((TypeEl === null) || (TypeEl.$class.ClassType() !== pas.PasTree.TPasArrayType)) return false;
      if (rtl.length(TypeEl.Ranges) !== 0) return false;
      if (OptionalOpenArray && ($mod.TPasResolverOption.proOpenAsDynArrays in this.FOptions)) {
        Result = true}
       else Result = (TypeEl.FParent === null) || (TypeEl.FParent.$class.ClassType() !== pas.PasTree.TPasArgument);
      return Result;
    };
    this.IsOpenArray = function (TypeEl) {
      var Result = false;
      Result = ((((TypeEl !== null) && (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) && (rtl.length(TypeEl.Ranges) === 0)) && (TypeEl.FParent !== null)) && (TypeEl.FParent.$class.ClassType() === pas.PasTree.TPasArgument);
      return Result;
    };
    this.IsDynOrOpenArray = function (TypeEl) {
      var Result = false;
      TypeEl = this.ResolveAliasType(TypeEl);
      Result = ((TypeEl !== null) && (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) && (rtl.length(TypeEl.Ranges) === 0);
      return Result;
    };
    this.IsVarInit = function (Expr) {
      var Result = false;
      var C = null;
      Result = false;
      if (Expr === null) return Result;
      if (Expr.FParent === null) return Result;
      C = Expr.FParent.$class.ClassType();
      if (C.InheritsFrom(pas.PasTree.TPasVariable)) {
        Result = Expr.FParent.Expr === Expr}
       else if (C === pas.PasTree.TPasArgument) Result = Expr.FParent.ValueExpr === Expr;
      return Result;
    };
    this.IsEmptyArrayExpr = function (ResolvedEl) {
      var Result = false;
      Result = (ResolvedEl.BaseType in rtl.createSet($mod.TResolverBaseType.btSet,$mod.TResolverBaseType.btArrayOrSet,$mod.TResolverBaseType.btArrayLit)) && (ResolvedEl.SubType === $mod.TResolverBaseType.btNone);
      return Result;
    };
    this.IsClassMethod = function (El) {
      var Result = false;
      var C = null;
      if (El === null) return false;
      C = El.$class.ClassType();
      Result = ((((C === pas.PasTree.TPasClassConstructor) || (C === pas.PasTree.TPasClassDestructor)) || (C === pas.PasTree.TPasClassProcedure)) || (C === pas.PasTree.TPasClassFunction)) || (C === pas.PasTree.TPasClassOperator);
      return Result;
    };
    this.IsClassField = function (El) {
      var Result = false;
      Result = (((El.$class.ClassType() === pas.PasTree.TPasVariable) || (El.$class.ClassType() === pas.PasTree.TPasConst)) && rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TVariableModifier.vmClass,pas.PasTree.TVariableModifier.vmStatic),El.VarModifiers),{})) && pas.PasTree.TPasClassType.isPrototypeOf(El.FParent);
      return Result;
    };
    this.IsExternalClass_Name = function (aClass, ExtName) {
      var Result = false;
      var AncestorScope = null;
      Result = false;
      if (aClass === null) return Result;
      while ((aClass !== null) && aClass.IsExternal) {
        if (aClass.ExternalName === ExtName) return true;
        AncestorScope = rtl.as(aClass.FData,$mod.TPasClassScope).AncestorScope;
        if (AncestorScope === null) return Result;
        aClass = rtl.as($mod.NoNil(AncestorScope.FElement),pas.PasTree.TPasClassType);
      };
      return Result;
    };
    this.IsProcedureType = function (ResolvedEl, HasValue) {
      var Result = false;
      var TypeEl = null;
      if (ResolvedEl.BaseType !== $mod.TResolverBaseType.btContext) return false;
      TypeEl = ResolvedEl.LoTypeEl;
      if (!pas.PasTree.TPasProcedureType.isPrototypeOf(TypeEl)) return false;
      if (HasValue && !($mod.TPasResolverResultFlag.rrfReadable in ResolvedEl.Flags)) return false;
      Result = true;
      return Result;
    };
    this.IsArrayType = function (ResolvedEl) {
      var Result = false;
      Result = (ResolvedEl.BaseType === $mod.TResolverBaseType.btContext) && pas.PasTree.TPasArrayType.isPrototypeOf(ResolvedEl.LoTypeEl);
      return Result;
    };
    this.IsArrayExpr = function (Expr) {
      var Result = null;
      var Ref = null;
      Result = null;
      if (Expr === null) return Result;
      if (Expr.Kind !== pas.PasTree.TPasExprKind.pekSet) return Result;
      if (!$mod.TResolvedReference.isPrototypeOf(Expr.FData)) return Result;
      Ref = Expr.FData;
      if (pas.PasTree.TPasArrayType.isPrototypeOf(Ref.FDeclaration)) Result = Ref.FDeclaration;
      return Result;
    };
    this.IsArrayOperatorAdd = function (Expr) {
      var Result = false;
      Result = (((Expr !== null) && (Expr.$class.ClassType() === pas.PasTree.TBinaryExpr)) && (Expr.OpCode === pas.PasTree.TExprOpCode.eopAdd)) && this.ElHasModeSwitch(Expr,pas.PScanner.TModeSwitch.msArrayOperators);
      return Result;
    };
    this.IsTypeCast = function (Params) {
      var Result = false;
      var Value = null;
      var Ref = null;
      var Decl = null;
      var C = null;
      Result = false;
      if ((Params === null) || (Params.Kind !== pas.PasTree.TPasExprKind.pekFuncParams)) return Result;
      Value = Params.Value;
      if (!this.IsNameExpr(Value)) return Result;
      if (!$mod.TResolvedReference.isPrototypeOf(Value.FData)) return Result;
      Ref = Value.FData;
      Decl = Ref.FDeclaration;
      C = Decl.$class.ClassType();
      if ((C === pas.PasTree.TPasAliasType) || (C === pas.PasTree.TPasTypeAliasType)) {
        Decl = this.ResolveAliasType(Decl);
        C = Decl.$class.ClassType();
      };
      if ((C === pas.PasTree.TPasProcedureType) || (C === pas.PasTree.TPasFunctionType)) {
        return true}
       else if (((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasEnumType)) {
        return true}
       else if ((C === pas.PasTree.TPasUnresolvedSymbolRef) && $mod.TResElDataBaseType.isPrototypeOf(Decl.FData)) return true;
      return Result;
    };
    this.IsInterfaceType = function (ResolvedEl, IntfType) {
      var Result = false;
      if (ResolvedEl.BaseType !== $mod.TResolverBaseType.btContext) return false;
      Result = this.IsInterfaceType$1(ResolvedEl.LoTypeEl,IntfType);
      return Result;
    };
    this.IsInterfaceType$1 = function (TypeEl, IntfType) {
      var Result = false;
      if (TypeEl === null) return false;
      TypeEl = this.ResolveAliasType(TypeEl);
      Result = ((TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && (TypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && (TypeEl.InterfaceType === IntfType);
      return Result;
    };
    this.IsTGUID = function (RecTypeEl) {
      var Result = false;
      var Members = null;
      var El = null;
      Result = false;
      if (!pas.SysUtils.SameText(RecTypeEl.FName,"TGUID")) return Result;
      if (pas.SysUtils.SameText(RecTypeEl.GetModule().FName,"system")) return true;
      Members = RecTypeEl.Members;
      if (Members.FCount < 4) return Result;
      El = rtl.getObject(Members.Get(0));
      if (!pas.SysUtils.SameText(El.FName,"D1")) return Result;
      El = rtl.getObject(Members.Get(1));
      if (!pas.SysUtils.SameText(El.FName,"D2")) return Result;
      El = rtl.getObject(Members.Get(2));
      if (!pas.SysUtils.SameText(El.FName,"D3")) return Result;
      El = rtl.getObject(Members.Get(3));
      if (!pas.SysUtils.SameText(El.FName,"D4")) return Result;
      Result = true;
      return Result;
    };
    this.IsTGUIDString = function (ResolvedEl) {
      var Result = false;
      var TypeEl = null;
      var C = null;
      var IdentEl = null;
      if (!(ResolvedEl.BaseType in $mod.btAllStrings)) return false;
      if ((ResolvedEl.ExprEl !== null) && (ResolvedEl.LoTypeEl !== null)) return true;
      IdentEl = ResolvedEl.IdentEl;
      if (IdentEl !== null) {
        C = IdentEl.$class.ClassType();
        if (C.InheritsFrom(pas.PasTree.TPasVariable)) {
          TypeEl = IdentEl.VarType}
         else if (C === pas.PasTree.TPasArgument) {
          TypeEl = IdentEl.ArgType}
         else if (C === pas.PasTree.TPasResultElement) {
          TypeEl = IdentEl.ResultType}
         else TypeEl = null;
        while (TypeEl !== null) {
          if ((TypeEl.$class.ClassType() === pas.PasTree.TPasAliasType) || (TypeEl.$class.ClassType() === pas.PasTree.TPasTypeAliasType)) {
            if (pas.SysUtils.SameText(TypeEl.FName,"TGUIDString")) return true;
            TypeEl = TypeEl.DestType;
          } else break;
        };
      };
      Result = false;
      return Result;
    };
    this.ProcNeedsParams = function (El) {
      var Result = false;
      Result = (El.Args.FCount > 0) && (rtl.getObject(El.Args.Get(0)).ValueExpr === null);
      return Result;
    };
    this.IsProcOverride = function (AncestorProc, DescendantProc) {
      var Result = false;
      var Proc = null;
      var OverriddenProc = null;
      Result = false;
      Proc = DescendantProc;
      if (!Proc.IsOverride()) return Result;
      if (!AncestorProc.IsOverride() && !AncestorProc.IsVirtual()) return Result;
      do {
        OverriddenProc = Proc.FData.OverriddenProc;
        if (AncestorProc === OverriddenProc) return true;
        Proc = OverriddenProc;
      } while (!(Proc === null));
      return Result;
    };
    this.GetTopLvlProc = function (El) {
      var Result = null;
      Result = null;
      while (El !== null) {
        if (pas.PasTree.TPasProcedure.isPrototypeOf(El)) Result = El;
        El = El.FParent;
      };
      return Result;
    };
    this.GetRangeLength = function (RangeExpr) {
      var Result = 0;
      var Range = null;
      Result = 0;
      Range = this.Eval(RangeExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
      if (Range === null) this.RaiseNotYetImplemented(20170910210416,RangeExpr,"");
      try {
        var $tmp1 = Range.Kind;
        if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeInt) {
          Result = (Range.RangeEnd - Range.RangeStart) + 1}
         else if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeUInt) {
          Result = (Range.RangeEnd - Range.RangeStart) + 1}
         else {
          this.RaiseNotYetImplemented(20170910210554,RangeExpr,"");
        };
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Range;
          }, set: function (v) {
            Range = v;
          }});
      };
      return Result;
    };
    this.EvalRangeLimit = function (RangeExpr, Flags, EvalLow, ErrorEl) {
      var Result = null;
      var Range = null;
      var EnumType = null;
      Result = null;
      Range = this.Eval(RangeExpr,rtl.unionSet(Flags,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst)),true);
      if (Range === null) this.RaiseNotYetImplemented(20170601191258,RangeExpr,"");
      var $tmp1 = Range.Kind;
      if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeInt) {
        var $tmp2 = Range.ElKind;
        if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskEnum) {
          EnumType = rtl.as($mod.NoNil(Range.ElType),pas.PasTree.TPasEnumType);
          if (EvalLow) {
            Result = pas.PasResolveEval.TResEvalEnum.$create("CreateValue",[Range.RangeStart,rtl.getObject(EnumType.Values.Get(0))])}
           else Result = pas.PasResolveEval.TResEvalEnum.$create("CreateValue",[Range.RangeEnd,rtl.getObject(EnumType.Values.Get(EnumType.Values.FCount - 1))]);
        } else if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskInt) {
          if (EvalLow) {
            Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue",[Range.RangeStart])}
           else Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue",[Range.RangeEnd])}
         else if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskChar) {
          if (EvalLow) {
            Result = pas.PasResolveEval.TResEvalUTF16.$create("CreateValue",[String.fromCharCode(Range.RangeStart)])}
           else Result = pas.PasResolveEval.TResEvalUTF16.$create("CreateValue",[String.fromCharCode(Range.RangeEnd)]);
        } else if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskBool) {
          if (EvalLow) {
            Result = pas.PasResolveEval.TResEvalBool.$create("CreateValue",[Range.RangeStart !== 0])}
           else Result = pas.PasResolveEval.TResEvalBool.$create("CreateValue",[Range.RangeEnd !== 0])}
         else {
          pas.PasResolveEval.ReleaseEvalValue({get: function () {
              return Range;
            }, set: function (v) {
              Range = v;
            }});
          this.RaiseNotYetImplemented(20170601195240,ErrorEl,"");
        };
      } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeUInt) {
        if (EvalLow) {
          Result = pas.PasResolveEval.TResEvalUInt.$create("CreateValue",[Range.RangeStart])}
         else Result = pas.PasResolveEval.TResEvalUInt.$create("CreateValue",[Range.RangeEnd])}
       else {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Range;
          }, set: function (v) {
            Range = v;
          }});
        this.RaiseNotYetImplemented(20170601195336,ErrorEl,"");
      };
      pas.PasResolveEval.ReleaseEvalValue({get: function () {
          return Range;
        }, set: function (v) {
          Range = v;
        }});
      return Result;
    };
    this.EvalTypeRange = function (Decl, Flags) {
      var Result = null;
      var C = null;
      var BaseTypeData = null;
      Result = null;
      Decl = this.ResolveAliasType(Decl);
      C = Decl.$class.ClassType();
      if (C === pas.PasTree.TPasRangeType) {
        Result = this.fExprEvaluator.Eval(Decl.RangeExpr,rtl.refSet(Flags));
        if ((Result !== null) && (Result.IdentEl === null)) {
          Result.IdentEl = Decl;
          return Result;
        };
      } else if (C === pas.PasTree.TPasEnumType) {
        Result = pas.PasResolveEval.TResEvalRangeInt.$create("CreateValue",[pas.PasResolveEval.TRESetElKind.revskEnum,Decl,0,Decl.Values.FCount - 1]);
        Result.IdentEl = Decl;
        return Result;
      } else if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
        if ($mod.TResElDataBaseType.isPrototypeOf(Decl.FData)) {
          BaseTypeData = Decl.FData;
          var $tmp1 = BaseTypeData.BaseType;
          if ($tmp1 === $mod.TResolverBaseType.btChar) {
            Result = pas.PasResolveEval.TResEvalRangeInt.$create("Create$1");
            Result.ElKind = pas.PasResolveEval.TRESetElKind.revskChar;
            Result.RangeStart = 0;
            Result.RangeEnd = 0xffff;
          } else if ($tmp1 === $mod.TResolverBaseType.btWideChar) {
            Result = pas.PasResolveEval.TResEvalRangeInt.$create("CreateValue",[pas.PasResolveEval.TRESetElKind.revskChar,null,0,0xffff])}
           else if ((($tmp1 === $mod.TResolverBaseType.btBoolean) || ($tmp1 === $mod.TResolverBaseType.btByteBool)) || ($tmp1 === $mod.TResolverBaseType.btWordBool)) {
            Result = pas.PasResolveEval.TResEvalRangeInt.$create("CreateValue",[pas.PasResolveEval.TRESetElKind.revskBool,null,0,1])}
           else if (((((((((($tmp1 === $mod.TResolverBaseType.btByte) || ($tmp1 === $mod.TResolverBaseType.btShortInt)) || ($tmp1 === $mod.TResolverBaseType.btWord)) || ($tmp1 === $mod.TResolverBaseType.btSmallInt)) || ($tmp1 === $mod.TResolverBaseType.btLongWord)) || ($tmp1 === $mod.TResolverBaseType.btLongint)) || ($tmp1 === $mod.TResolverBaseType.btIntSingle)) || ($tmp1 === $mod.TResolverBaseType.btUIntSingle)) || ($tmp1 === $mod.TResolverBaseType.btIntDouble)) || ($tmp1 === $mod.TResolverBaseType.btUIntDouble)) {
            Result = pas.PasResolveEval.TResEvalRangeInt.$create("Create$1");
            Result.ElKind = pas.PasResolveEval.TRESetElKind.revskInt;
            this.GetIntegerRange(BaseTypeData.BaseType,{p: Result, get: function () {
                return this.p.RangeStart;
              }, set: function (v) {
                this.p.RangeStart = v;
              }},{p: Result, get: function () {
                return this.p.RangeEnd;
              }, set: function (v) {
                this.p.RangeEnd = v;
              }});
          };
        };
      };
      return Result;
    };
    this.HasTypeInfo = function (El) {
      var Result = false;
      Result = false;
      if (El === null) return Result;
      if ($mod.TResElDataBaseType.isPrototypeOf(El.FData)) return true;
      if (El.FParent === null) return Result;
      if (pas.PasTree.TPasType.isPrototypeOf(El.FParent)) {
        if (!this.HasTypeInfo(El.FParent)) return Result;
      } else if (this.ElHasModeSwitch(El,pas.PScanner.TModeSwitch.msOmitRTTI)) return Result;
      Result = true;
      return Result;
    };
    this.GetActualBaseType = function (bt) {
      var Result = 0;
      var $tmp1 = bt;
      if ($tmp1 === $mod.TResolverBaseType.btChar) {
        Result = this.FBaseTypeChar}
       else if ($tmp1 === $mod.TResolverBaseType.btString) {
        Result = this.FBaseTypeString}
       else if ($tmp1 === $mod.TResolverBaseType.btExtended) {
        Result = this.FBaseTypeExtended}
       else {
        Result = bt;
      };
      return Result;
    };
    this.GetCombinedBoolean = function (Bool1, Bool2, ErrorEl) {
      var Result = 0;
      if (Bool1 === Bool2) return Bool1;
      var $tmp1 = Bool1;
      if ($tmp1 === $mod.TResolverBaseType.btBoolean) {
        Result = Bool2}
       else if ($tmp1 === $mod.TResolverBaseType.btByteBool) {
        if (Bool2 !== $mod.TResolverBaseType.btBoolean) Result = Bool2}
       else if ($tmp1 === $mod.TResolverBaseType.btWordBool) {
        if (!(Bool2 in rtl.createSet($mod.TResolverBaseType.btBoolean,$mod.TResolverBaseType.btByteBool))) Result = Bool2}
       else if ($tmp1 === $mod.TResolverBaseType.btLongBool) {
        if (!(Bool2 in rtl.createSet($mod.TResolverBaseType.btBoolean,$mod.TResolverBaseType.btByteBool,$mod.TResolverBaseType.btWordBool))) Result = Bool2}
       else {
        this.RaiseNotYetImplemented(20170420093805,ErrorEl,"");
      };
      return Result;
    };
    this.GetCombinedInt = function (Int1, Int2, ErrorEl) {
      var Result = 0;
      var Precision1 = 0;
      var Precision2 = 0;
      var Signed1 = false;
      var Signed2 = false;
      if (Int1.BaseType === Int2.BaseType) return Result;
      this.GetIntegerProps(Int1.BaseType,{get: function () {
          return Precision1;
        }, set: function (v) {
          Precision1 = v;
        }},{get: function () {
          return Signed1;
        }, set: function (v) {
          Signed1 = v;
        }});
      this.GetIntegerProps(Int2.BaseType,{get: function () {
          return Precision2;
        }, set: function (v) {
          Precision2 = v;
        }},{get: function () {
          return Signed2;
        }, set: function (v) {
          Signed2 = v;
        }});
      if (Precision1 === Precision2) {
        if (Signed1 !== Signed2) Precision1 = Math.max(Precision1,Precision2) + 1;
      };
      Result = this.GetIntegerBaseType(Math.max(Precision1,Precision2),Signed1 || Signed2,ErrorEl);
      return Result;
    };
    this.GetIntegerProps = function (bt, Precision, Signed) {
      var $tmp1 = bt;
      if ($tmp1 === $mod.TResolverBaseType.btByte) {
        Precision.set(8);
        Signed.set(false);
      } else if ($tmp1 === $mod.TResolverBaseType.btShortInt) {
        Precision.set(8);
        Signed.set(true);
      } else if ($tmp1 === $mod.TResolverBaseType.btWord) {
        Precision.set(16);
        Signed.set(false);
      } else if ($tmp1 === $mod.TResolverBaseType.btSmallInt) {
        Precision.set(16);
        Signed.set(true);
      } else if ($tmp1 === $mod.TResolverBaseType.btIntSingle) {
        Precision.set(23);
        Signed.set(true);
      } else if ($tmp1 === $mod.TResolverBaseType.btUIntSingle) {
        Precision.set(22);
        Signed.set(false);
      } else if ($tmp1 === $mod.TResolverBaseType.btLongWord) {
        Precision.set(32);
        Signed.set(false);
      } else if ($tmp1 === $mod.TResolverBaseType.btLongint) {
        Precision.set(32);
        Signed.set(true);
      } else if ($tmp1 === $mod.TResolverBaseType.btIntDouble) {
        Precision.set(53);
        Signed.set(true);
      } else if ($tmp1 === $mod.TResolverBaseType.btUIntDouble) {
        Precision.set(52);
        Signed.set(false);
      } else {
        this.RaiseInternalError(20170420095727,"");
      };
    };
    this.GetIntegerRange = function (bt, MinVal, MaxVal) {
      var Result = false;
      Result = true;
      if (bt === $mod.TResolverBaseType.btExtended) bt = this.FBaseTypeExtended;
      var $tmp1 = bt;
      if ($tmp1 === $mod.TResolverBaseType.btByte) {
        MinVal.set(0);
        MaxVal.set(255);
      } else if ($tmp1 === $mod.TResolverBaseType.btShortInt) {
        MinVal.set(-128);
        MaxVal.set(127);
      } else if ($tmp1 === $mod.TResolverBaseType.btWord) {
        MinVal.set(0);
        MaxVal.set(65535);
      } else if ($tmp1 === $mod.TResolverBaseType.btSmallInt) {
        MinVal.set(-32768);
        MaxVal.set(32767);
      } else if ($tmp1 === $mod.TResolverBaseType.btLongWord) {
        MinVal.set(0);
        MaxVal.set(4294967295);
      } else if ($tmp1 === $mod.TResolverBaseType.btLongint) {
        MinVal.set(-2147483648);
        MaxVal.set(2147483647);
      } else if (($tmp1 === $mod.TResolverBaseType.btSingle) || ($tmp1 === $mod.TResolverBaseType.btIntSingle)) {
        MinVal.set(-16777216);
        MaxVal.set(16777216);
      } else if ($tmp1 === $mod.TResolverBaseType.btUIntSingle) {
        MinVal.set(0);
        MaxVal.set(16777216);
      } else if (($tmp1 === $mod.TResolverBaseType.btDouble) || ($tmp1 === $mod.TResolverBaseType.btIntDouble)) {
        MinVal.set(-4503599627370496);
        MaxVal.set(4503599627370495);
      } else if ($tmp1 === $mod.TResolverBaseType.btUIntDouble) {
        MinVal.set(0);
        MaxVal.set(4503599627370495);
      } else if ($tmp1 === $mod.TResolverBaseType.btCurrency) {
        MinVal.set(-922337203685477);
        MaxVal.set(922337203685477);
      } else {
        Result = false;
      };
      return Result;
    };
    this.GetIntegerBaseType = function (Precision, Signed, ErrorEl) {
      var Result = 0;
      if (Precision <= 8) {
        if (Signed) {
          Result = $mod.TResolverBaseType.btShortInt}
         else Result = $mod.TResolverBaseType.btByte;
        if (this.GetBaseTypes(Result) !== null) return Result;
      };
      if (Precision <= 16) {
        if (Signed) {
          Result = $mod.TResolverBaseType.btSmallInt}
         else Result = $mod.TResolverBaseType.btWord;
        if (this.GetBaseTypes(Result) !== null) return Result;
      };
      if (((Precision <= 22) && !Signed) && (this.GetBaseTypes($mod.TResolverBaseType.btUIntSingle) !== null)) return $mod.TResolverBaseType.btUIntSingle;
      if (((Precision <= 23) && Signed) && (this.GetBaseTypes($mod.TResolverBaseType.btIntSingle) !== null)) return $mod.TResolverBaseType.btIntSingle;
      if (Precision <= 32) {
        if (Signed) {
          Result = $mod.TResolverBaseType.btLongint}
         else Result = $mod.TResolverBaseType.btLongWord;
        if (this.GetBaseTypes(Result) !== null) return Result;
      };
      if (((Precision <= 52) && !Signed) && (this.GetBaseTypes($mod.TResolverBaseType.btUIntDouble) !== null)) return $mod.TResolverBaseType.btUIntDouble;
      if (((Precision <= 53) && Signed) && (this.GetBaseTypes($mod.TResolverBaseType.btIntDouble) !== null)) return $mod.TResolverBaseType.btIntDouble;
      this.RaiseRangeCheck(20170420100336,ErrorEl);
      return Result;
    };
    this.GetSmallestIntegerBaseType = function (MinVal, MaxVal) {
      var Result = 0;
      var V = 0;
      if (MinVal > MaxVal) MinVal = MaxVal;
      if (MinVal < 0) {
        if (MaxVal > -(MinVal + 1)) {
          V = MaxVal}
         else V = -(MinVal + 1);
        if (V <= 127) {
          Result = $mod.TResolverBaseType.btShortInt}
         else if (V <= 32767) {
          Result = $mod.TResolverBaseType.btSmallInt}
         else if ((this.GetBaseTypes($mod.TResolverBaseType.btIntSingle) !== null) && (V < 16777216)) {
          Result = $mod.TResolverBaseType.btIntSingle}
         else if (V <= 2147483647) {
          Result = $mod.TResolverBaseType.btLongint}
         else if ((this.GetBaseTypes($mod.TResolverBaseType.btIntDouble) !== null) && (V < 4503599627370495)) {
          Result = $mod.TResolverBaseType.btIntDouble}
         else Result = $mod.TResolverBaseType.btIntDouble;
      } else {
        V = MaxVal;
        if (V <= 255) {
          Result = $mod.TResolverBaseType.btByte}
         else if (V <= 65535) {
          Result = $mod.TResolverBaseType.btWord}
         else if ((this.GetBaseTypes($mod.TResolverBaseType.btUIntSingle) !== null) && (V < 16777216)) {
          Result = $mod.TResolverBaseType.btUIntSingle}
         else if (V <= 4294967295) {
          Result = $mod.TResolverBaseType.btLongWord}
         else if ((this.GetBaseTypes($mod.TResolverBaseType.btUIntDouble) !== null) && (V < 4503599627370495)) {
          Result = $mod.TResolverBaseType.btUIntDouble}
         else Result = $mod.TResolverBaseType.btIntDouble;
      };
      return Result;
    };
    this.GetCombinedChar = function (Char1, Char2, ErrorEl) {
      var Result = 0;
      var bt1 = 0;
      var bt2 = 0;
      bt1 = this.GetActualBaseType(Char1.BaseType);
      bt2 = this.GetActualBaseType(Char2.BaseType);
      if (bt1 === bt2) return bt1;
      if (!(bt1 in $mod.btAllChars)) this.RaiseInternalError(20170420103128,"");
      Result = $mod.TResolverBaseType.btWideChar;
      if (Result === this.FBaseTypeChar) Result = $mod.TResolverBaseType.btChar;
      if (ErrorEl === null) ;
      return Result;
    };
    this.GetCombinedString = function (Str1, Str2, ErrorEl) {
      var Result = 0;
      var bt1 = 0;
      var bt2 = 0;
      bt1 = this.GetActualBaseType(Str1.BaseType);
      bt2 = this.GetActualBaseType(Str2.BaseType);
      if (bt1 === bt2) return bt1;
      var $tmp1 = bt1;
      if ($tmp1 === $mod.TResolverBaseType.btWideChar) {
        var $tmp2 = bt2;
        if ($tmp2 === $mod.TResolverBaseType.btWideString) {
          Result = $mod.TResolverBaseType.btWideString}
         else if (($tmp2 === $mod.TResolverBaseType.btString) || ($tmp2 === $mod.TResolverBaseType.btUnicodeString)) {
          Result = $mod.TResolverBaseType.btUnicodeString}
         else {
          this.RaiseNotYetImplemented(20170420103808,ErrorEl,"");
        };
      } else if ($tmp1 === $mod.TResolverBaseType.btString) {
        var $tmp3 = bt2;
        if (($tmp3 === $mod.TResolverBaseType.btWideChar) || ($tmp3 === $mod.TResolverBaseType.btUnicodeString)) {
          Result = $mod.TResolverBaseType.btUnicodeString}
         else if ($tmp3 === $mod.TResolverBaseType.btWideString) {
          Result = $mod.TResolverBaseType.btWideString}
         else {
          this.RaiseNotYetImplemented(20170420121201,ErrorEl,"");
        };
      } else if ($tmp1 === $mod.TResolverBaseType.btWideString) {
        var $tmp4 = bt2;
        if ((($tmp4 === $mod.TResolverBaseType.btChar) || ($tmp4 === $mod.TResolverBaseType.btWideChar)) || ($tmp4 === $mod.TResolverBaseType.btWideString)) {
          Result = $mod.TResolverBaseType.btWideString}
         else if (($tmp4 === $mod.TResolverBaseType.btString) || ($tmp4 === $mod.TResolverBaseType.btUnicodeString)) {
          Result = $mod.TResolverBaseType.btUnicodeString}
         else {
          this.RaiseNotYetImplemented(20170420121532,ErrorEl,"");
        };
      } else if ($tmp1 === $mod.TResolverBaseType.btUnicodeString) {
        Result = $mod.TResolverBaseType.btUnicodeString}
       else {
        this.RaiseNotYetImplemented(20170420103153,ErrorEl,"");
      };
      if (Result === this.FBaseTypeChar) {
        Result = $mod.TResolverBaseType.btChar}
       else if (Result === this.FBaseTypeString) Result = $mod.TResolverBaseType.btString;
      return Result;
    };
    this.IsElementSkipped = function (El) {
      var Result = false;
      Result = El === null;
      return Result;
    };
    this.FindLocalBuiltInSymbol = function (El) {
      var Result = null;
      var Data = null;
      Data = El.FData;
      if (Data === null) this.RaiseInternalError(20180215185302,pas.PasResolveEval.GetObjName(El));
      if (Data.$class.ClassType() === $mod.TResElDataBaseType) {
        Result = this.GetBaseTypes(Data.BaseType)}
       else if (Data.$class.ClassType() === $mod.TResElDataBuiltInProc) {
        Result = this.GetBuiltInProcs(Data.BuiltIn).FElement}
       else Result = null;
      return Result;
    };
    this.GetLastSection = function () {
      var Result = null;
      var Module = null;
      Result = null;
      Module = this.FRootElement;
      if (Module === null) return Result;
      if (pas.PasTree.TPasProgram.isPrototypeOf(Module)) {
        Result = Module.ProgramSection}
       else if (pas.PasTree.TPasLibrary.isPrototypeOf(Module)) {
        Result = Module.LibrarySection}
       else if (Module.ImplementationSection !== null) {
        Result = Module.ImplementationSection}
       else Result = Module.InterfaceSection;
      return Result;
    };
  });
  this.GetTreeDbg = function (El, Indent) {
    var Result = "";
    function LineBreak(SubIndent) {
      Indent += SubIndent;
      Result = (Result + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent);
    };
    var i = 0;
    var l = 0;
    if (El === null) return "nil";
    Result = ((El.FName + ":") + El.$classname) + "=";
    if (pas.PasTree.TPasExpr.isPrototypeOf(El)) {
      if (El.$class.ClassType() !== pas.PasTree.TBinaryExpr) Result = Result + pas.PasTree.OpcodeStrings[El.OpCode];
      if (El.$class.ClassType() === pas.PasTree.TUnaryExpr) {
        Result = Result + $mod.GetTreeDbg(El.Operand,Indent)}
       else if (El.$class.ClassType() === pas.PasTree.TBinaryExpr) {
        Result = ((((((Result + "Left={") + $mod.GetTreeDbg(El.left,Indent)) + "}") + pas.PasTree.OpcodeStrings[El.OpCode]) + "Right={") + $mod.GetTreeDbg(El.right,Indent)) + "}"}
       else if (El.$class.ClassType() === pas.PasTree.TPrimitiveExpr) {
        Result = Result + El.Value}
       else if (El.$class.ClassType() === pas.PasTree.TBoolConstExpr) {
        Result = Result + pas.SysUtils.BoolToStr$1(El.Value,"true","false")}
       else if (El.$class.ClassType() === pas.PasTree.TNilExpr) {
        Result = Result + "nil"}
       else if (El.$class.ClassType() === pas.PasTree.TInheritedExpr) {
        Result = Result + "inherited"}
       else if (El.$class.ClassType() === pas.PasTree.TSelfExpr) {
        Result = Result + "Self"}
       else if (El.$class.ClassType() === pas.PasTree.TParamsExpr) {
        LineBreak(2);
        Result = (Result + $mod.GetTreeDbg(El.Value,Indent)) + "(";
        l = rtl.length(El.Params);
        if (l > 0) {
          Indent += 2;
          for (var $l1 = 0, $end2 = l - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            LineBreak(0);
            Result = Result + $mod.GetTreeDbg(El.Params[i],Indent);
            if (i < (l - 1)) Result = Result + ",";
          };
          Indent -= 2;
        };
        Result = Result + ")";
      } else if (El.$class.ClassType() === pas.PasTree.TRecordValues) {
        Result = Result + "(";
        l = rtl.length(El.Fields);
        if (l > 0) {
          Indent += 2;
          for (var $l3 = 0, $end4 = l - 1; $l3 <= $end4; $l3++) {
            i = $l3;
            LineBreak(0);
            Result = ((Result + El.Fields[i].Name) + ":") + $mod.GetTreeDbg(El.Fields[i].ValueExp,Indent);
            if (i < (l - 1)) Result = Result + ",";
          };
          Indent -= 2;
        };
        Result = Result + ")";
      } else if (El.$class.ClassType() === pas.PasTree.TArrayValues) {
        Result = Result + "[";
        l = rtl.length(El.Values);
        if (l > 0) {
          Indent += 2;
          for (var $l5 = 0, $end6 = l - 1; $l5 <= $end6; $l5++) {
            i = $l5;
            LineBreak(0);
            Result = Result + $mod.GetTreeDbg(El.Values[i],Indent);
            if (i < (l - 1)) Result = Result + ",";
          };
          Indent -= 2;
        };
        Result = Result + "]";
      };
    } else if (pas.PasTree.TPasProcedure.isPrototypeOf(El)) {
      Result = Result + $mod.GetTreeDbg(El.ProcType,Indent);
    } else if (pas.PasTree.TPasProcedureType.isPrototypeOf(El)) {
      if (El.GetIsReference()) Result = (Result + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmIsNested];
      Result = Result + "(";
      l = El.Args.FCount;
      if (l > 0) {
        Indent += 2;
        for (var $l7 = 0, $end8 = l - 1; $l7 <= $end8; $l7++) {
          i = $l7;
          LineBreak(0);
          Result = Result + $mod.GetTreeDbg(rtl.getObject(El.Args.Get(i)),Indent);
          if (i < (l - 1)) Result = Result + ";";
        };
        Indent -= 2;
      };
      Result = Result + ")";
      if (pas.PasTree.TPasFunction.isPrototypeOf(El)) Result = (Result + ":") + $mod.GetTreeDbg(El.ProcType.ResultEl,Indent);
      if (El.GetIsOfObject()) Result = (Result + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmOfObject];
      if (El.GetIsNested()) Result = (Result + " ") + pas.PasTree.ProcTypeModifiers[pas.PasTree.TProcTypeModifier.ptmIsNested];
      if (pas.PasTree.cCallingConventions[El.CallingConvention] !== "") Result = (Result + "; ") + pas.PasTree.cCallingConventions[El.CallingConvention];
    } else if (El.$class.ClassType() === pas.PasTree.TPasResultElement) {
      Result = Result + $mod.GetTreeDbg(El.ResultType,Indent)}
     else if (El.$class.ClassType() === pas.PasTree.TPasArgument) {
      if (pas.PasTree.AccessNames[El.Access] !== "") Result = Result + pas.PasTree.AccessNames[El.Access];
      if (El.ArgType === null) {
        Result = Result + "untyped"}
       else Result = Result + $mod.GetTreeDbg(El.ArgType,Indent);
    } else if (El.$class.ClassType() === pas.PasTree.TPasUnresolvedSymbolRef) {
      if ($mod.TResElDataBuiltInProc.isPrototypeOf(El.FData)) Result = Result + El.FData.Signature;
    };
    return Result;
  };
  this.GetResolverResultDbg = function (T) {
    var Result = "";
    var HiTypeEl = null;
    Result = "[bt=" + $mod.ResBaseTypeNames[T.BaseType];
    if (T.SubType !== $mod.TResolverBaseType.btNone) Result = (Result + " Sub=") + $mod.ResBaseTypeNames[T.SubType];
    Result = (Result + " Ident=") + pas.PasResolveEval.GetObjName(T.IdentEl);
    HiTypeEl = $mod.ResolveSimpleAliasType(T.HiTypeEl);
    if (HiTypeEl !== T.LoTypeEl) {
      Result = (((Result + " LoType=") + pas.PasResolveEval.GetObjName(T.LoTypeEl)) + " HiTypeEl=") + pas.PasResolveEval.GetObjName(HiTypeEl)}
     else Result = (Result + " Type=") + pas.PasResolveEval.GetObjName(T.LoTypeEl);
    Result = ((((Result + " Expr=") + pas.PasResolveEval.GetObjName(T.ExprEl)) + " Flags=") + $mod.ResolverResultFlagsToStr(T.Flags)) + "]";
    return Result;
  };
  this.GetClassAncestorsDbg = function (El) {
    var Result = "";
    function GetClassDesc(C) {
      var Result = "";
      var Module = null;
      if (C.IsExternal) {
        Result = "class external "}
       else Result = "class ";
      Module = C.GetModule();
      if (Module !== null) Result = (Result + Module.FName) + ".";
      Result = Result + $mod.GetElementDbgPath(C);
      return Result;
    };
    var Scope = null;
    var AncestorScope = null;
    var AncestorEl = null;
    if (El === null) return "nil";
    Result = GetClassDesc(El);
    if ($mod.TPasClassScope.isPrototypeOf(El.FData)) {
      Scope = El.FData;
      AncestorScope = Scope.AncestorScope;
      while (AncestorScope !== null) {
        Result = (Result + pas.System.LineEnding) + "  ";
        AncestorEl = rtl.as($mod.NoNil(AncestorScope.FElement),pas.PasTree.TPasClassType);
        Result = Result + GetClassDesc(AncestorEl);
        AncestorScope = AncestorScope.AncestorScope;
      };
    };
    return Result;
  };
  this.ResolverResultFlagsToStr = function (Flags) {
    var Result = "";
    var f = 0;
    var s = "";
    Result = "";
    for (var $l1 in Flags) {
      f = +$l1;
      if (Result !== "") Result = Result + ",";
      s = $mod.TPasResolverResultFlag[f];
      Result = Result + s;
    };
    Result = ("[" + Result) + "]";
    return Result;
  };
  this.GetElementTypeName = function (El) {
    var Result = "";
    var C = null;
    if (El === null) return "?";
    C = El.$class.ClassType();
    if (C === pas.PasTree.TPrimitiveExpr) {
      Result = pas.PasTree.ExprKindNames[El.Kind]}
     else if (C === pas.PasTree.TUnaryExpr) {
      Result = "unary " + pas.PasTree.OpcodeStrings[El.OpCode]}
     else if (C === pas.PasTree.TBinaryExpr) {
      Result = pas.PasTree.ExprKindNames[El.Kind]}
     else if (C === pas.PasTree.TPasClassType) {
      Result = pas.PasTree.ObjKindNames[El.ObjKind]}
     else {
      Result = $mod.GetElementTypeName$1(C);
      if (Result === "") Result = El.ElementTypeName();
    };
    return Result;
  };
  this.GetElementTypeName$1 = function (C) {
    var Result = "";
    if (C === null) return "nil";
    if (C === pas.PasTree.TPrimitiveExpr) {
      Result = "primitive expression"}
     else if (C === pas.PasTree.TUnaryExpr) {
      Result = "unary expression"}
     else if (C === pas.PasTree.TBinaryExpr) {
      Result = "binary expression"}
     else if (C === pas.PasTree.TBoolConstExpr) {
      Result = "boolean const"}
     else if (C === pas.PasTree.TNilExpr) {
      Result = "nil"}
     else if (C === pas.PasTree.TPasAliasType) {
      Result = "alias"}
     else if (C === pas.PasTree.TPasPointerType) {
      Result = "pointer"}
     else if (C === pas.PasTree.TPasTypeAliasType) {
      Result = "type alias"}
     else if (C === pas.PasTree.TPasClassOfType) {
      Result = "class of"}
     else if (C === pas.PasTree.TPasSpecializeType) {
      Result = "specialize"}
     else if (C === pas.PasTree.TInlineSpecializeExpr) {
      Result = "inline-specialize"}
     else if (C === pas.PasTree.TPasRangeType) {
      Result = "range"}
     else if (C === pas.PasTree.TPasArrayType) {
      Result = "array"}
     else if (C === pas.PasTree.TPasFileType) {
      Result = "file"}
     else if (C === pas.PasTree.TPasEnumValue) {
      Result = "enum value"}
     else if (C === pas.PasTree.TPasEnumType) {
      Result = "enum type"}
     else if (C === pas.PasTree.TPasSetType) {
      Result = "set"}
     else if (C === pas.PasTree.TPasRecordType) {
      Result = "record"}
     else if (C === pas.PasTree.TPasClassType) {
      Result = "class"}
     else if (C === pas.PasTree.TPasArgument) {
      Result = "parameter"}
     else if (C === pas.PasTree.TPasProcedureType) {
      Result = "procedural type"}
     else if (C === pas.PasTree.TPasResultElement) {
      Result = "function result"}
     else if (C === pas.PasTree.TPasFunctionType) {
      Result = "functional type"}
     else if (C === pas.PasTree.TPasStringType) {
      Result = "string[]"}
     else if (C === pas.PasTree.TPasVariable) {
      Result = "var"}
     else if (C === pas.PasTree.TPasExportSymbol) {
      Result = "export"}
     else if (C === pas.PasTree.TPasConst) {
      Result = "const"}
     else if (C === pas.PasTree.TPasProperty) {
      Result = "property"}
     else if (C === pas.PasTree.TPasProcedure) {
      Result = "procedure"}
     else if (C === pas.PasTree.TPasFunction) {
      Result = "function"}
     else if (C === pas.PasTree.TPasOperator) {
      Result = "operator"}
     else if (C === pas.PasTree.TPasClassOperator) {
      Result = "class operator"}
     else if (C === pas.PasTree.TPasConstructor) {
      Result = "constructor"}
     else if (C === pas.PasTree.TPasClassConstructor) {
      Result = "class constructor"}
     else if (C === pas.PasTree.TPasDestructor) {
      Result = "destructor"}
     else if (C === pas.PasTree.TPasClassDestructor) {
      Result = "class destructor"}
     else if (C === pas.PasTree.TPasClassProcedure) {
      Result = "class procedure"}
     else if (C === pas.PasTree.TPasClassFunction) {
      Result = "class function"}
     else if (C === pas.PasTree.TPasMethodResolution) {
      Result = "method resolution"}
     else if (C === pas.PasTree.TInterfaceSection) {
      Result = "interfacesection"}
     else if (C === pas.PasTree.TImplementationSection) {
      Result = "implementation"}
     else if (C === pas.PasTree.TProgramSection) {
      Result = "program section"}
     else if (C === pas.PasTree.TLibrarySection) {
      Result = "library section"}
     else Result = C.$classname;
    return Result;
  };
  this.GetElementDbgPath = function (El) {
    var Result = "";
    if (El === null) return "nil";
    Result = "";
    while (El !== null) {
      if (Result !== "") Result = "." + Result;
      if (El.FName !== "") {
        Result = El.FName + Result}
       else Result = $mod.GetElementTypeName(El) + Result;
      El = El.FParent;
    };
    return Result;
  };
  this.ResolveSimpleAliasType = function (aType) {
    var Result = null;
    var C = null;
    while (aType !== null) {
      C = aType.$class.ClassType();
      if (C === pas.PasTree.TPasAliasType) {
        aType = aType.DestType}
       else if (((C === pas.PasTree.TPasClassType) && aType.IsForward) && $mod.TResolvedReference.isPrototypeOf(aType.FData)) {
        aType = rtl.as($mod.NoNil(aType.FData.FDeclaration),pas.PasTree.TPasType)}
       else return aType;
    };
    Result = null;
    return Result;
  };
  this.SetResolverIdentifier = function (ResolvedType, BaseType, IdentEl, LoTypeEl, HiTypeEl, Flags) {
    if (pas.PasTree.TPasExpr.isPrototypeOf(IdentEl)) throw pas.SysUtils.Exception.$create("Create$1",["20170729101017"]);
    ResolvedType.get().BaseType = BaseType;
    ResolvedType.get().SubType = $mod.TResolverBaseType.btNone;
    ResolvedType.get().IdentEl = IdentEl;
    ResolvedType.get().HiTypeEl = HiTypeEl;
    ResolvedType.get().LoTypeEl = LoTypeEl;
    ResolvedType.get().ExprEl = null;
    ResolvedType.get().Flags = rtl.refSet(Flags);
  };
  this.SetResolverTypeExpr = function (ResolvedType, BaseType, LoTypeEl, HiTypeEl, Flags) {
    ResolvedType.get().BaseType = BaseType;
    ResolvedType.get().SubType = $mod.TResolverBaseType.btNone;
    ResolvedType.get().IdentEl = null;
    ResolvedType.get().HiTypeEl = HiTypeEl;
    ResolvedType.get().LoTypeEl = LoTypeEl;
    ResolvedType.get().ExprEl = null;
    ResolvedType.get().Flags = rtl.refSet(Flags);
  };
  this.SetResolverValueExpr = function (ResolvedType, BaseType, LoTypeEl, HiTypeEl, ExprEl, Flags) {
    ResolvedType.get().BaseType = BaseType;
    ResolvedType.get().SubType = $mod.TResolverBaseType.btNone;
    ResolvedType.get().IdentEl = null;
    ResolvedType.get().HiTypeEl = HiTypeEl;
    ResolvedType.get().LoTypeEl = LoTypeEl;
    ResolvedType.get().ExprEl = ExprEl;
    ResolvedType.get().Flags = rtl.refSet(Flags);
  };
  this.ProcNeedsImplProc = function (Proc) {
    var Result = false;
    Result = true;
    if (Proc.IsExternal()) return false;
    if (Proc.IsForward()) return Result;
    if (Proc.FParent.$class.ClassType() === pas.PasTree.TInterfaceSection) return Result;
    if (Proc.FParent.$class.ClassType() === pas.PasTree.TPasClassType) {
      if (!Proc.IsAbstract()) return Result;
    };
    Result = false;
    return Result;
  };
  this.ProcNeedsBody = function (Proc) {
    var Result = false;
    var C = null;
    if (Proc.IsForward() || Proc.IsExternal()) return false;
    C = Proc.FParent.$class.ClassType();
    if ((C === pas.PasTree.TInterfaceSection) || C.InheritsFrom(pas.PasTree.TPasClassType)) return false;
    Result = true;
    return Result;
  };
  this.ProcHasGroupOverload = function (Proc) {
    var Result = false;
    var Data = null;
    if (Proc.IsOverload()) return true;
    Data = Proc.FData;
    Result = $mod.TPasProcedureScope.isPrototypeOf(Data) && ($mod.TPasProcedureScopeFlag.ppsfIsGroupOverload in Data.Flags);
    return Result;
  };
  this.ChompDottedIdentifier = function (Identifier) {
    var Result = "";
    var p = 0;
    Result = Identifier;
    p = Identifier.length;
    while (p > 0) {
      if (Identifier.charAt(p - 1) === ".") break;
      p -= 1;
    };
    Result = pas.SysUtils.LeftStr(Identifier,p - 1);
    return Result;
  };
  this.FirstDottedIdentifier = function (Identifier) {
    var Result = "";
    var p = 0;
    p = pas.System.Pos(".",Identifier);
    if (p < 1) {
      Result = Identifier}
     else Result = pas.SysUtils.LeftStr(Identifier,p - 1);
    return Result;
  };
  this.IsDottedIdentifierPrefix = function (Prefix, Identifier) {
    var Result = false;
    var l = 0;
    l = Prefix.length;
    if ((l > Identifier.length) || (pas.SysUtils.CompareText(Prefix,pas.SysUtils.LeftStr(Identifier,l)) !== 0)) return false;
    Result = (Identifier.length === l) || (Identifier.charAt((l + 1) - 1) === ".");
    return Result;
  };
  var Alpha = rtl.createSet(null,65,90,null,97,122,95);
  var AlphaNum = rtl.unionSet(Alpha,rtl.createSet(null,48,57));
  var Dot = ".";
  this.IsValidIdent = function (Ident, AllowDots, StrictDots) {
    var Result = false;
    var First = false;
    var I = 0;
    var Len = 0;
    Len = Ident.length;
    if (Len < 1) return false;
    First = true;
    for (var $l1 = 1, $end2 = Len; $l1 <= $end2; $l1++) {
      I = $l1;
      if (First) {
        Result = Ident.charCodeAt(I - 1) in Alpha;
        First = false;
      } else if (AllowDots && (Ident.charAt(I - 1) === Dot)) {
        if (StrictDots) {
          Result = I < Len;
          First = true;
        };
      } else Result = Ident.charCodeAt(I - 1) in AlphaNum;
      if (!Result) break;
    };
    return Result;
  };
  this.DotExprToName = function (Expr) {
    var Result = "";
    var C = null;
    var Prim = null;
    var Bin = null;
    var s = "";
    Result = "";
    if (Expr === null) return Result;
    C = Expr.$class.ClassType();
    if (C === pas.PasTree.TPrimitiveExpr) {
      Prim = Expr;
      var $tmp1 = Prim.Kind;
      if (($tmp1 === pas.PasTree.TPasExprKind.pekIdent) || ($tmp1 === pas.PasTree.TPasExprKind.pekString)) {
        Result = Prim.Value}
       else if ($tmp1 === pas.PasTree.TPasExprKind.pekSelf) {
        Result = "Self"}
       else {
        $mod.EPasResolve.$create("Create$1",[(("[20180309155400] DotExprToName " + pas.PasResolveEval.GetObjName(Prim)) + " ") + pas.PasTree.ExprKindNames[Prim.Kind]]);
      };
    } else if (C === pas.PasTree.TBinaryExpr) {
      Bin = Expr;
      if (Bin.OpCode === pas.PasTree.TExprOpCode.eopSubIdent) {
        Result = $mod.DotExprToName(Bin.left);
        if (Result === "") return Result;
        s = $mod.DotExprToName(Bin.right);
        if (s === "") return "";
        Result = (Result + ".") + s;
      };
    };
    return Result;
  };
  this.NoNil = function (o) {
    var Result = null;
    if (o === null) throw pas.SysUtils.Exception.$create("Create$1",[""]);
    Result = o;
    return Result;
  };
  this.dbgs = function (Flags) {
    var Result = "";
    var s = "";
    var f = 0;
    Result = "";
    for (var $l1 in Flags) {
      f = +$l1;
      if (f in Flags) {
        if (Result !== "") Result = Result + ",";
        s = $mod.TPasResolverComputeFlag[f];
        Result = Result + s;
      };
    };
    Result = ("[" + Result) + "]";
    return Result;
  };
  this.dbgs$1 = function (a) {
    var Result = "";
    Result = $mod.TResolvedRefAccess[a];
    return Result;
  };
  this.dbgs$2 = function (Flags) {
    var Result = "";
    var s = "";
    var f = 0;
    Result = "";
    for (var $l1 in Flags) {
      f = +$l1;
      if (f in Flags) {
        if (Result !== "") Result = Result + ",";
        s = $mod.TResolvedReferenceFlag[f];
        Result = Result + s;
      };
    };
    Result = ("[" + Result) + "]";
    return Result;
  };
  this.dbgs$3 = function (a) {
    var Result = "";
    Result = $mod.TPSRefAccess[a];
    return Result;
  };
});
rtl.module("PasUseAnalyzer",["System","JS","Classes","SysUtils","Types","PasTree","PScanner","PasResolveEval","PasResolver"],function () {
  "use strict";
  var $mod = this;
  this.nPAParameterInOverrideNotUsed = 4501;
  this.sPAParameterInOverrideNotUsed = 'Parameter "%s" not used';
  this.nPAUnitNotUsed = 5023;
  this.sPAUnitNotUsed = 'Unit "%s" not used in %s';
  this.nPAParameterNotUsed = 5024;
  this.sPAParameterNotUsed = 'Parameter "%s" not used';
  this.nPALocalVariableNotUsed = 5025;
  this.sPALocalVariableNotUsed = 'Local variable "%s" not used';
  this.nPAValueParameterIsAssignedButNeverUsed = 5026;
  this.sPAValueParameterIsAssignedButNeverUsed = 'Value parameter "%s" is assigned but never used';
  this.nPALocalVariableIsAssignedButNeverUsed = 5027;
  this.sPALocalVariableIsAssignedButNeverUsed = 'Local variable "%s" is assigned but never used';
  this.nPALocalXYNotUsed = 5028;
  this.sPALocalXYNotUsed = 'Local %s "%s" not used';
  this.nPAPrivateFieldIsNeverUsed = 5029;
  this.sPAPrivateFieldIsNeverUsed = 'Private field "%s" is never used';
  this.nPAPrivateFieldIsAssignedButNeverUsed = 5030;
  this.sPAPrivateFieldIsAssignedButNeverUsed = 'Private field "%s" is assigned but never used';
  this.nPAPrivateMethodIsNeverUsed = 5031;
  this.sPAPrivateMethodIsNeverUsed = 'Private method "%s" is never used';
  this.nPAFunctionResultDoesNotSeemToBeSet = 5033;
  this.sPAFunctionResultDoesNotSeemToBeSet = "Function result does not seem to be set";
  this.nPAPrivateTypeXNeverUsed = 5071;
  this.sPAPrivateTypeXNeverUsed = 'Private type "%s" never used';
  this.nPAPrivateConstXNeverUsed = 5072;
  this.sPAPrivateConstXNeverUsed = 'Private const "%s" never used';
  this.nPAPrivatePropertyXNeverUsed = 5073;
  this.sPAPrivatePropertyXNeverUsed = 'Private property "%s" never used';
  rtl.createClass($mod,"EPasAnalyzer",pas.PasResolver.EPasResolve,function () {
  });
  rtl.createClass($mod,"TPAMessage",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FRefCount = 0;
      this.Id = 0;
      this.MsgType = 0;
      this.MsgNumber = 0;
      this.MsgText = "";
      this.MsgPattern = "";
      this.Args = [];
      this.PosEl = null;
      this.Filename = "";
      this.Row = 0;
      this.Col = 0;
    };
    this.$final = function () {
      this.Args = undefined;
      this.PosEl = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      this.FRefCount = 1;
    };
    this.AddRef = function () {
      this.FRefCount += 1;
    };
    this.Release = function () {
      if (this.FRefCount === 0) throw pas.SysUtils.Exception.$create("Create$1",[""]);
      this.FRefCount -= 1;
      if (this.FRefCount === 0) this.$destroy("Destroy");
    };
  });
  $mod.$rtti.$MethodVar("TPAMessageEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Msg",$mod.$rtti["TPAMessage"]]]), methodkind: 0});
  this.TPAIdentifierAccess = {"0": "paiaNone", paiaNone: 0, "1": "paiaRead", paiaRead: 1, "2": "paiaWrite", paiaWrite: 2, "3": "paiaReadWrite", paiaReadWrite: 3, "4": "paiaWriteRead", paiaWriteRead: 4};
  $mod.$rtti.$Enum("TPAIdentifierAccess",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TPAIdentifierAccess});
  rtl.createClass($mod,"TPAElement",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FElement = null;
      this.Access = 0;
    };
    this.$final = function () {
      this.FElement = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetElement = function (AValue) {
      if (this.FElement === AValue) return;
      if (this.FElement !== null) this.FElement.Release();
      this.FElement = AValue;
      if (this.FElement !== null) this.FElement.AddRef();
    };
    this.Destroy = function () {
      this.SetElement(null);
      pas.System.TObject.Destroy.call(this);
    };
  });
  $mod.$rtti.$ClassRef("TPAElementClass",{instancetype: $mod.$rtti["TPAElement"]});
  rtl.createClass($mod,"TPAOverrideList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FElement = null;
      this.FOverrides = null;
    };
    this.$final = function () {
      this.FElement = undefined;
      this.FOverrides = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetOverrides = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.FOverrides.Get(Index));
      return Result;
    };
    this.SetElement = function (AValue) {
      if (this.FElement === AValue) return;
      if (this.FElement !== null) this.FElement.Release();
      this.FElement = AValue;
      if (this.FElement !== null) this.FElement.AddRef();
    };
    this.Create$1 = function () {
      this.FOverrides = pas.Classes.TFPList.$create("Create");
    };
    this.Destroy = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.FOverrides.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.FOverrides.Get(i)).Release();
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FOverrides;
        }, set: function (v) {
          this.p.FOverrides = v;
        }});
      this.SetElement(null);
      pas.System.TObject.Destroy.call(this);
    };
    this.Add = function (OverrideEl) {
      this.FOverrides.Add(OverrideEl);
      OverrideEl.AddRef();
    };
    this.Count = function () {
      var Result = 0;
      Result = this.FOverrides.FCount;
      return Result;
    };
    this.IndexOf = function (OverrideEl) {
      var Result = 0;
      Result = this.FOverrides.IndexOf(OverrideEl);
      return Result;
    };
  });
  $mod.$rtti.$ProcVar("TPASItemToNameProc",{procsig: rtl.newTIProcSig([["Item",rtl.pointer]],rtl.string)});
  rtl.createClass($mod,"TPasAnalyzerKeySet",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FItems = null;
      this.FCount = 0;
      this.FItemToName = null;
      this.FKeyToName = null;
    };
    this.$final = function () {
      this.FItems = undefined;
      this.FItemToName = undefined;
      this.FKeyToName = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (OnItemToName, OnKeyToName) {
      this.FItemToName = OnItemToName;
      this.FKeyToName = OnKeyToName;
      this.FItems = new Object();
    };
    this.Destroy = function () {
      this.FItems = null;
      pas.System.TObject.Destroy.call(this);
    };
    this.Clear = function () {
      this.FItems = new Object();
      this.FCount = 0;
    };
    this.FreeItems = function () {
      var List = [];
      var i = 0;
      List = Object.getOwnPropertyNames(this.FItems);
      for (var $l1 = 0, $end2 = rtl.length(List) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.FItems[List[i]]).$destroy("Destroy");
      };
      this.FItems = new Object();
      this.FCount = 0;
    };
    this.Add = function (Item, CheckDuplicates) {
      if (CheckDuplicates) if (this.ContainsItem(Item)) throw pas.SysUtils.Exception.$create("Create$1",["[20181101151755] TPasAnalyzerSet.Add duplicate"]);
      this.FItems["%" + this.FItemToName(Item)] = Item;
      this.FCount += 1;
    };
    this.Remove = function (Item) {
      var aName = "";
      aName = "%" + this.FItemToName(Item);
      if (!this.FItems.hasOwnProperty(aName)) return;
      pas.JS.JSDelete(this.FItems,aName);
      this.FCount -= 1;
    };
    this.ContainsItem = function (Item) {
      var Result = false;
      Result = this.FItems.hasOwnProperty("%" + this.FItemToName(Item));
      return Result;
    };
    this.ContainsKey = function (Key) {
      var Result = false;
      Result = this.FItems.hasOwnProperty("%" + this.FKeyToName(Key));
      return Result;
    };
    this.FindItem = function (Item) {
      var Result = null;
      var aName = "";
      aName = "%" + this.FItemToName(Item);
      if (!this.FItems.hasOwnProperty(aName)) {
        return null}
       else Result = this.FItems[aName];
      return Result;
    };
    this.FindKey = function (Key) {
      var Result = null;
      var aName = "";
      aName = "%" + this.FKeyToName(Key);
      if (!this.FItems.hasOwnProperty(aName)) {
        return null}
       else Result = this.FItems[aName];
      return Result;
    };
    this.Count = function () {
      var Result = 0;
      Result = this.FCount;
      return Result;
    };
    this.GetList = function () {
      var Result = null;
      var List = [];
      var i = 0;
      List = Object.getOwnPropertyNames(this.FItems);
      Result = pas.Classes.TFPList.$create("Create");
      for (var $l1 = 0, $end2 = rtl.length(List) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Result.Add(this.FItems[List[i]]);
      };
      return Result;
    };
  });
  this.TPasAnalyzerOption = {"0": "paoOnlyExports", paoOnlyExports: 0, "1": "paoImplReferences", paoImplReferences: 1};
  $mod.$rtti.$Enum("TPasAnalyzerOption",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TPasAnalyzerOption});
  $mod.$rtti.$Set("TPasAnalyzerOptions",{comptype: $mod.$rtti["TPasAnalyzerOption"]});
  this.TPAUseMode = {"0": "paumElement", paumElement: 0, "1": "paumAllPasUsable", paumAllPasUsable: 1, "2": "paumAllExports", paumAllExports: 2, "3": "paumTypeInfo", paumTypeInfo: 3};
  $mod.$rtti.$Enum("TPAUseMode",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TPAUseMode});
  $mod.$rtti.$Set("TPAUseModes",{comptype: $mod.$rtti["TPAUseMode"]});
  this.PAUseModeToPSRefAccess = [pas.PasResolver.TPSRefAccess.psraRead,pas.PasResolver.TPSRefAccess.psraRead,pas.PasResolver.TPSRefAccess.psraRead,pas.PasResolver.TPSRefAccess.psraTypeInfo];
  rtl.createClass($mod,"TPasAnalyzer",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FChecked = rtl.arraySetLength(null,null,4);
      this.FOnMessage = null;
      this.FOptions = {};
      this.FOverrideLists = null;
      this.FResolver = null;
      this.FScopeModule = null;
      this.FUsedElements = null;
    };
    this.$final = function () {
      this.FChecked = undefined;
      this.FOnMessage = undefined;
      this.FOptions = undefined;
      this.FOverrideLists = undefined;
      this.FResolver = undefined;
      this.FScopeModule = undefined;
      this.FUsedElements = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.UseElType = function (El, aType, Mode) {
      if (aType === null) return;
      this.MarkImplScopeRef(El,aType,$mod.PAUseModeToPSRefAccess[Mode]);
      this.UseType(aType,Mode);
    };
    this.AddOverride = function (OverriddenEl, OverrideEl) {
      var Result = false;
      var Item = null;
      var OverriddenPAEl = null;
      var TypeEl = null;
      Item = this.FOverrideLists.FindKey(OverriddenEl);
      if (Item === null) {
        Item = $mod.TPAOverrideList.$create("Create$1");
        Item.SetElement(OverriddenEl);
        this.FOverrideLists.Add(Item,false);
      } else {
        if (Item.IndexOf(OverrideEl) >= 0) return false;
      };
      Item.Add(OverrideEl);
      Result = true;
      OverriddenPAEl = this.FindElement(OverriddenEl);
      if (OverriddenPAEl !== null) {
        if (OverrideEl.$class.ClassType() === pas.PasTree.TPasProperty) {
          if (pas.PasTree.TPasType.isPrototypeOf(OverriddenEl)) {
            TypeEl = this.FResolver.ResolveAliasTypeEl(OverriddenEl);
            if ((TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && (TypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) {
              this.UseVariable(OverrideEl,pas.PasResolver.TResolvedRefAccess.rraRead,false);
              return Result;
            };
          };
          this.RaiseNotSupported(20180328221736,OverrideEl,$mod.GetElModName(OverriddenEl));
        } else this.UseElement(OverrideEl,pas.PasResolver.TResolvedRefAccess.rraNone,true);
      };
      return Result;
    };
    this.SetOptions = function (AValue) {
      if (rtl.eqSet(this.FOptions,AValue)) return;
      this.FOptions = rtl.refSet(AValue);
    };
    this.UpdateAccess = function (IsWrite, IsRead, Usage) {
      if (IsRead) {
        var $tmp1 = Usage.Access;
        if ($tmp1 === $mod.TPAIdentifierAccess.paiaNone) {
          Usage.Access = $mod.TPAIdentifierAccess.paiaRead}
         else if ($tmp1 === $mod.TPAIdentifierAccess.paiaRead) {}
        else if ($tmp1 === $mod.TPAIdentifierAccess.paiaWrite) {
          Usage.Access = $mod.TPAIdentifierAccess.paiaWriteRead}
         else if ($tmp1 === $mod.TPAIdentifierAccess.paiaReadWrite) {}
        else if ($tmp1 === $mod.TPAIdentifierAccess.paiaWriteRead) {}
        else {
          this.RaiseInconsistency(20170311183122,"");
        };
      };
      if (IsWrite) {
        var $tmp2 = Usage.Access;
        if ($tmp2 === $mod.TPAIdentifierAccess.paiaNone) {
          Usage.Access = $mod.TPAIdentifierAccess.paiaWrite}
         else if ($tmp2 === $mod.TPAIdentifierAccess.paiaRead) {
          Usage.Access = $mod.TPAIdentifierAccess.paiaReadWrite}
         else if ($tmp2 === $mod.TPAIdentifierAccess.paiaWrite) {}
        else if ($tmp2 === $mod.TPAIdentifierAccess.paiaReadWrite) {}
        else if ($tmp2 === $mod.TPAIdentifierAccess.paiaWriteRead) {}
        else {
          this.RaiseInconsistency(20170311183127,"");
        };
      };
    };
    this.OnUseScopeRef = function (Data, DeclScope) {
      if (DeclScope === null) ;
      while (Data !== null) {
        var $tmp1 = Data.Access;
        if ($tmp1 === pas.PasResolver.TPSRefAccess.psraNone) {}
        else if ($tmp1 === pas.PasResolver.TPSRefAccess.psraRead) {
          this.UseElement(Data.FElement,pas.PasResolver.TResolvedRefAccess.rraRead,false)}
         else if ($tmp1 === pas.PasResolver.TPSRefAccess.psraWrite) {
          this.UseElement(Data.FElement,pas.PasResolver.TResolvedRefAccess.rraAssign,false)}
         else if ($tmp1 === pas.PasResolver.TPSRefAccess.psraReadWrite) {
          this.UseElement(Data.FElement,pas.PasResolver.TResolvedRefAccess.rraReadAndAssign,false)}
         else if ($tmp1 === pas.PasResolver.TPSRefAccess.psraWriteRead) {
          this.UseElement(Data.FElement,pas.PasResolver.TResolvedRefAccess.rraAssign,false);
          this.UseElement(Data.FElement,pas.PasResolver.TResolvedRefAccess.rraRead,false);
        } else if ($tmp1 === pas.PasResolver.TPSRefAccess.psraTypeInfo) {
          this.UseTypeInfo(Data.FElement)}
         else {
          this.RaiseNotSupported(20180228191928,Data.FElement,pas.PasResolver.dbgs$3(Data.Access));
        };
        Data = Data.NextSameName;
      };
    };
    this.RaiseInconsistency = function (Id, Msg) {
      throw $mod.EPasAnalyzer.$create("Create$1",[(("[" + pas.SysUtils.IntToStr(Id)) + "]: ") + Msg]);
    };
    this.RaiseNotSupported = function (Id, El, Msg) {
      var s = "";
      var E = null;
      s = (("[" + pas.SysUtils.IntToStr(Id)) + "]: Element=") + $mod.GetElModName(El);
      if (Msg !== "") s = (s + " ") + Msg;
      E = $mod.EPasAnalyzer.$create("Create$1",[s]);
      E.SetPasElement(El);
      throw E;
    };
    this.FindTopImplScope = function (El) {
      var Result = null;
      var ProcScope = null;
      var C = null;
      var ImplProc = null;
      Result = null;
      while (El !== null) {
        C = El.$class.ClassType();
        if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
          ProcScope = El.FData;
          if (ProcScope.DeclarationProc !== null) ProcScope = ProcScope.DeclarationProc.FData;
          ImplProc = ProcScope.ImplProc;
          if (ImplProc === null) ImplProc = ProcScope.FElement;
          if (ImplProc.Body !== null) Result = ProcScope;
        } else if ((C === pas.PasTree.TInitializationSection) || (C === pas.PasTree.TFinalizationSection)) Result = El.FData;
        El = El.FParent;
      };
      return Result;
    };
    this.Add = function (El, CheckDuplicate, aClass) {
      var Result = null;
      if (El === null) this.RaiseInconsistency(20170308093407,"");
      if (CheckDuplicate && this.PAElementExists(El)) this.RaiseInconsistency(20170304201318,"");
      if (aClass === null) aClass = $mod.TPAElement;
      Result = aClass.$create("Create");
      Result.SetElement(El);
      this.FUsedElements.Add(Result,true);
      return Result;
    };
    this.PAElementExists = function (El) {
      var Result = false;
      Result = this.FUsedElements.ContainsKey(El);
      return Result;
    };
    this.CreateTree = function () {
      this.FUsedElements = $mod.TPasAnalyzerKeySet.$create("Create$1",[$mod.PAElement_ElToHashName,$mod.PasElementToHashName]);
    };
    this.MarkElementAsUsed = function (El, aClass) {
      var Self = this;
      var Result = false;
      function MarkModule(CurModule) {
        var Result = false;
        if (Self.PAElementExists(CurModule)) return false;
        Self.Add(CurModule,true,null);
        Result = true;
        return Result;
      };
      var CurModule = null;
      if (El === null) return false;
      CurModule = El.GetModule();
      if (CurModule === null) {
        if (El.$class.ClassType() === pas.PasTree.TPasUnresolvedSymbolRef) return false;
        Self.RaiseInconsistency(20170308093540,$mod.GetElModName(El));
      };
      if (Self.FScopeModule !== null) {
        if (CurModule !== Self.FScopeModule) {
          MarkModule(CurModule);
          return false;
        };
      };
      if (Self.PAElementExists(El)) return false;
      Self.Add(El,false,aClass);
      Result = true;
      if (Self.FScopeModule === null) {
        if (Self.IsIdentifier(El)) if (MarkModule(CurModule)) Self.UseModule(CurModule,$mod.TPAUseMode.paumElement);
      };
      return Result;
    };
    this.ElementVisited = function (El, Mode) {
      var Result = false;
      if (El === null) return true;
      if (this.FChecked[Mode].ContainsItem(El)) return true;
      Result = false;
      this.FChecked[Mode].Add(El,false);
      return Result;
    };
    this.MarkImplScopeRef = function (El, RefEl, Access) {
      var Self = this;
      function CheckImplRef() {
        var ElImplScope = null;
        var RefElImplScope = null;
        ElImplScope = Self.FindTopImplScope(El);
        if (ElImplScope === null) return;
        RefElImplScope = Self.FindTopImplScope(RefEl);
        if (RefElImplScope === ElImplScope) return;
        if ((RefEl.FName === "") && !pas.PasTree.TInterfaceSection.isPrototypeOf(RefEl)) return;
        if (pas.PasResolver.TPasProcedureScope.isPrototypeOf(ElImplScope)) {
          ElImplScope.AddReference(RefEl,Access)}
         else if (pas.PasResolver.TPasInitialFinalizationScope.isPrototypeOf(ElImplScope)) {
          ElImplScope.AddReference(RefEl,Access)}
         else Self.RaiseInconsistency(20180302142933,pas.PasResolveEval.GetObjName(ElImplScope));
      };
      if (RefEl === null) return;
      if (RefEl.FParent === El) return;
      if ($mod.TPasAnalyzerOption.paoImplReferences in Self.FOptions) CheckImplRef();
    };
    this.UseElement = function (El, Access, UseFull) {
      var C = null;
      if (El === null) return;
      C = El.$class.ClassType();
      if (C.InheritsFrom(pas.PasTree.TPasType)) {
        this.UseType(El,$mod.TPAUseMode.paumElement)}
       else if (C.InheritsFrom(pas.PasTree.TPasVariable)) {
        this.UseVariable(El,Access,UseFull)}
       else if (C === pas.PasTree.TPasArgument) {
        this.UseArgument(El,Access)}
       else if (C === pas.PasTree.TPasResultElement) {
        this.UseResultElement(El,Access)}
       else if (C === pas.PasTree.TPasResString) {
        this.UseResourcestring(El)}
       else if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
        this.UseProcedure(El)}
       else if (C.InheritsFrom(pas.PasTree.TPasExpr)) {
        this.UseExpr(El)}
       else if (C === pas.PasTree.TPasEnumValue) {
        this.UseExpr(El.Value);
        do {
          this.MarkElementAsUsed(El,null);
          El = El.FParent;
        } while (pas.PasTree.TPasType.isPrototypeOf(El));
      } else if (C === pas.PasTree.TPasMethodResolution) {}
      else if (C.InheritsFrom(pas.PasTree.TPasModule) || (C === pas.PasTree.TPasUsesUnit)) {}
      else this.RaiseNotSupported(20170307090947,El,"");
    };
    this.UseTypeInfo = function (El) {
      var Self = this;
      function UseSubEl(SubEl) {
        if (SubEl === null) return;
        Self.MarkImplScopeRef(El,SubEl,pas.PasResolver.TPSRefAccess.psraTypeInfo);
        Self.UseTypeInfo(SubEl);
      };
      var C = null;
      var Members = null;
      var Args = null;
      var i = 0;
      var Member = null;
      var MemberResolved = new pas.PasResolver.TPasResolverResult();
      var Prop = null;
      var ProcType = null;
      var ClassEl = null;
      if (Self.ElementVisited(El,$mod.TPAUseMode.paumTypeInfo)) return;
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasUnresolvedSymbolRef) {}
      else if ((C === pas.PasTree.TPasVariable) || (C === pas.PasTree.TPasConst)) {
        UseSubEl(El.VarType)}
       else if (C === pas.PasTree.TPasArgument) {
        UseSubEl(El.ArgType)}
       else if (C === pas.PasTree.TPasProperty) {
        Prop = El;
        Args = Self.FResolver.GetPasPropertyArgs(Prop);
        for (var $l1 = 0, $end2 = Args.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          UseSubEl(rtl.getObject(Args.Get(i)).ArgType);
        };
        UseSubEl(Self.FResolver.GetPasPropertyType(Prop));
        Self.UseElement(Self.FResolver.GetPasPropertyGetter(Prop),pas.PasResolver.TResolvedRefAccess.rraRead,false);
        Self.UseElement(Self.FResolver.GetPasPropertySetter(Prop),pas.PasResolver.TResolvedRefAccess.rraRead,false);
        Self.UseElement(Self.FResolver.GetPasPropertyIndex(Prop),pas.PasResolver.TResolvedRefAccess.rraRead,false);
        Self.UseElement(Self.FResolver.GetPasPropertyStoredExpr(Prop),pas.PasResolver.TResolvedRefAccess.rraRead,false);
        Self.UseElement(Self.FResolver.GetPasPropertyDefaultExpr(Prop),pas.PasResolver.TResolvedRefAccess.rraRead,false);
      } else if ((C === pas.PasTree.TPasAliasType) || (C === pas.PasTree.TPasTypeAliasType)) {
        UseSubEl(El.DestType)}
       else if (C === pas.PasTree.TPasEnumType) {}
      else if (C === pas.PasTree.TPasSetType) {
        UseSubEl(El.EnumType)}
       else if (C === pas.PasTree.TPasRangeType) {}
      else if (C === pas.PasTree.TPasArrayType) {
        UseSubEl(El.ElType);
        for (var $l3 = 0, $end4 = rtl.length(El.Ranges) - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          Member = El.Ranges[i];
          Self.FResolver.ComputeElement(Member,{get: function () {
              return MemberResolved;
            }, set: function (v) {
              MemberResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcConstant),null);
          UseSubEl(MemberResolved.HiTypeEl);
        };
      } else if (C === pas.PasTree.TPasPointerType) {
        UseSubEl(El.DestType)}
       else if (C === pas.PasTree.TPasClassType) {
        ClassEl = El;
        if (ClassEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
          Members = ClassEl.Members;
          for (var $l5 = 0, $end6 = Members.FCount - 1; $l5 <= $end6; $l5++) {
            i = $l5;
            Member = rtl.getObject(Members.Get(i));
            if (Self.IsUsed(Member)) Self.UseTypeInfo(Member);
          };
        };
      } else if (C === pas.PasTree.TPasClassOfType) {}
      else if (C === pas.PasTree.TPasRecordType) {
        Members = El.Members;
        for (var $l7 = 0, $end8 = Members.FCount - 1; $l7 <= $end8; $l7++) {
          i = $l7;
          Member = rtl.getObject(Members.Get(i));
          UseSubEl(Member);
        };
      } else if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
        UseSubEl(El.ProcType)}
       else if (C.InheritsFrom(pas.PasTree.TPasProcedureType)) {
        ProcType = El;
        for (var $l9 = 0, $end10 = ProcType.Args.FCount - 1; $l9 <= $end10; $l9++) {
          i = $l9;
          UseSubEl(rtl.getObject(ProcType.Args.Get(i)).ArgType);
        };
        if (pas.PasTree.TPasFunctionType.isPrototypeOf(El)) UseSubEl(El.ResultEl.ResultType);
      } else {
        Self.RaiseNotSupported(20170414153904,El,"");
      };
      Self.UseElement(El,pas.PasResolver.TResolvedRefAccess.rraNone,true);
    };
    this.UseModule = function (aModule, Mode) {
      var Self = this;
      function UseInitFinal(ImplBlock) {
        var Scope = null;
        if (ImplBlock === null) return;
        Scope = ImplBlock.FData;
        Self.UseScopeReferences(Scope.References);
        if ((Scope.References === null) && Self.IsImplBlockEmpty(ImplBlock)) return;
        if (!Self.PAElementExists(aModule)) Self.Add(aModule,true,null);
        Self.UseImplBlock(ImplBlock,true);
      };
      var ModScope = null;
      if (Self.ElementVisited(aModule,Mode)) return;
      if (Mode in rtl.createSet($mod.TPAUseMode.paumAllExports,$mod.TPAUseMode.paumAllPasUsable)) {
        if (pas.PasTree.TPasProgram.isPrototypeOf(aModule)) {
          Self.UseSection(aModule.ProgramSection,Mode)}
         else if (pas.PasTree.TPasLibrary.isPrototypeOf(aModule)) {
          Self.UseSection(aModule.LibrarySection,Mode)}
         else {
          Self.UseSection(aModule.InterfaceSection,Mode);
        };
      };
      UseInitFinal(aModule.InitializationSection);
      UseInitFinal(aModule.FinalizationSection);
      ModScope = rtl.as(aModule.FData,pas.PasResolver.TPasModuleScope);
      if (ModScope.FRangeErrorClass !== null) Self.UseClassType(ModScope.FRangeErrorClass,$mod.TPAUseMode.paumElement);
      if (ModScope.FRangeErrorConstructor !== null) Self.UseProcedure(ModScope.FRangeErrorConstructor);
      if (Mode === $mod.TPAUseMode.paumElement) if (!Self.PAElementExists(aModule)) Self.Add(aModule,true,null);
    };
    this.UseSection = function (Section, Mode) {
      var i = 0;
      var UsedModule = null;
      var Decl = null;
      var OnlyExports = false;
      var UsesClause = [];
      var C = null;
      if (Mode === $mod.TPAUseMode.paumElement) this.RaiseInconsistency(20170317172721,"");
      if (this.ElementVisited(Section,Mode)) return;
      OnlyExports = Mode === $mod.TPAUseMode.paumAllExports;
      if (Mode === $mod.TPAUseMode.paumAllPasUsable) this.MarkElementAsUsed(Section,null);
      UsesClause = Section.UsesClause;
      for (var $l1 = 0, $end2 = rtl.length(UsesClause) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.PasTree.TPasModule.isPrototypeOf(UsesClause[i].Module)) {
          UsedModule = UsesClause[i].Module;
          if (this.FScopeModule === null) {
            this.UseModule(UsedModule,$mod.TPAUseMode.paumAllExports)}
           else {
            if (this.IsImplBlockEmpty(UsedModule.InitializationSection) && this.IsImplBlockEmpty(UsedModule.FinalizationSection)) continue;
            if (!this.PAElementExists(UsedModule)) this.Add(UsedModule,true,null);
            this.UseImplBlock(UsedModule.InitializationSection,true);
            this.UseImplBlock(UsedModule.FinalizationSection,true);
          };
        };
      };
      for (var $l3 = 0, $end4 = Section.Declarations.FCount - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        Decl = rtl.getObject(Section.Declarations.Get(i));
        C = Decl.$class.ClassType();
        if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
          if (OnlyExports && rtl.eqSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TProcedureModifier.pmExport,pas.PasTree.TProcedureModifier.pmPublic),Decl.FModifiers),{})) continue;
          this.UseProcedure(Decl);
        } else if (C.InheritsFrom(pas.PasTree.TPasType)) {
          this.UseType(Decl,Mode)}
         else if (C.InheritsFrom(pas.PasTree.TPasVariable)) {
          if (OnlyExports && rtl.eqSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TVariableModifier.vmExport,pas.PasTree.TVariableModifier.vmPublic),Decl.VarModifiers),{})) continue;
          this.UseVariable(Decl,pas.PasResolver.TResolvedRefAccess.rraNone,true);
        } else if (C === pas.PasTree.TPasResString) {
          this.UseResourcestring(Decl)}
         else this.RaiseNotSupported(20170306165213,Decl,"");
      };
    };
    this.UseImplBlock = function (Block, Mark) {
      var i = 0;
      var El = null;
      if (Block === null) return;
      if (Mark && !this.MarkElementAsUsed(Block,null)) return;
      for (var $l1 = 0, $end2 = Block.Elements.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        El = rtl.getObject(Block.Elements.Get(i));
        if (pas.PasTree.TPasImplElement.isPrototypeOf(El)) {
          this.UseImplElement(El)}
         else this.RaiseNotSupported(20170306195110,El,"");
      };
    };
    this.UseImplElement = function (El) {
      var C = null;
      var ForLoop = null;
      var CaseOf = null;
      var i = 0;
      var j = 0;
      var CaseSt = null;
      var WithDo = null;
      var SubEl = null;
      var ParentEl = null;
      var ForScope = null;
      if (El === null) return;
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasImplBlock) {
        this.UseImplBlock(El,false)}
       else if (C === pas.PasTree.TPasImplSimple) {
        this.UseExpr(El.Expr)}
       else if (C === pas.PasTree.TPasImplAssign) {
        this.UseExpr(El.left);
        this.UseExpr(El.right);
      } else if (C === pas.PasTree.TPasImplAsmStatement) {}
      else if (C === pas.PasTree.TPasImplBeginBlock) {
        this.UseImplBlock(El,false)}
       else if (C === pas.PasTree.TPasImplCaseOf) {
        CaseOf = El;
        this.UseExpr(CaseOf.CaseExpr);
        for (var $l1 = 0, $end2 = CaseOf.Elements.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          SubEl = rtl.getObject(CaseOf.Elements.Get(i));
          if (SubEl.$class.ClassType() === pas.PasTree.TPasImplCaseStatement) {
            CaseSt = SubEl;
            for (var $l3 = 0, $end4 = CaseSt.Expressions.FCount - 1; $l3 <= $end4; $l3++) {
              j = $l3;
              this.UseExpr(rtl.as(rtl.getObject(CaseSt.Expressions.Get(j)),pas.PasTree.TPasExpr));
            };
            this.UseImplElement(CaseSt.Body);
          } else if (SubEl.$class.ClassType() === pas.PasTree.TPasImplCaseElse) {
            this.UseImplBlock(SubEl,false)}
           else this.RaiseNotSupported(20170307195329,SubEl,"");
        };
      } else if (C === pas.PasTree.TPasImplForLoop) {
        ForLoop = El;
        this.UseExpr(ForLoop.VariableName);
        this.UseExpr(ForLoop.StartExpr);
        this.UseExpr(ForLoop.EndExpr);
        ForScope = rtl.as(ForLoop.FData,pas.PasResolver.TPasForLoopScope);
        this.MarkImplScopeRef(ForLoop,ForScope.GetEnumerator,pas.PasResolver.TPSRefAccess.psraRead);
        this.UseProcedure(ForScope.GetEnumerator);
        this.MarkImplScopeRef(ForLoop,ForScope.MoveNext,pas.PasResolver.TPSRefAccess.psraRead);
        this.UseProcedure(ForScope.MoveNext);
        this.MarkImplScopeRef(ForLoop,ForScope.Current,pas.PasResolver.TPSRefAccess.psraRead);
        this.UseVariable(ForScope.Current,pas.PasResolver.TResolvedRefAccess.rraRead,false);
        this.UseImplElement(ForLoop.Body);
      } else if (C === pas.PasTree.TPasImplIfElse) {
        this.UseExpr(El.ConditionExpr);
        this.UseImplElement(El.IfBranch);
        this.UseImplElement(El.ElseBranch);
      } else if (C === pas.PasTree.TPasImplCommand) {}
      else if (C === pas.PasTree.TPasImplLabelMark) {}
      else if (C === pas.PasTree.TPasImplRepeatUntil) {
        this.UseImplBlock(El,false);
        this.UseExpr(El.ConditionExpr);
      } else if (C === pas.PasTree.TPasImplWhileDo) {
        this.UseExpr(El.ConditionExpr);
        this.UseImplBlock(El,false);
      } else if (C === pas.PasTree.TPasImplWithDo) {
        WithDo = El;
        for (var $l5 = 0, $end6 = WithDo.Expressions.FCount - 1; $l5 <= $end6; $l5++) {
          i = $l5;
          this.UseExpr(rtl.as(rtl.getObject(WithDo.Expressions.Get(i)),pas.PasTree.TPasExpr));
        };
        this.UseImplBlock(WithDo,false);
      } else if (C === pas.PasTree.TPasImplExceptOn) {
        this.UseElType(El,El.TypeEl,$mod.TPAUseMode.paumElement);
        this.UseImplElement(El.Body);
      } else if (C === pas.PasTree.TPasImplRaise) {
        if (El.ExceptObject !== null) {
          this.UseExpr(El.ExceptObject)}
         else {
          ParentEl = El.FParent;
          while (ParentEl !== null) {
            if (pas.PasTree.TPasImplExceptOn.isPrototypeOf(ParentEl)) {
              this.UseVariable(ParentEl.VarEl,pas.PasResolver.TResolvedRefAccess.rraRead,false);
              break;
            };
            ParentEl = ParentEl.FParent;
          };
        };
        this.UseExpr(El.ExceptAddr);
      } else if (C === pas.PasTree.TPasImplTry) {
        this.UseImplBlock(El,false);
        this.UseImplBlock(El.FinallyExcept,false);
        this.UseImplBlock(El.ElseBranch,false);
      } else this.RaiseNotSupported(20170307162715,El,"");
    };
    this.UseExpr = function (El) {
      var Ref = null;
      var C = null;
      var Params = [];
      var i = 0;
      var BuiltInProc = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var Decl = null;
      var ModScope = null;
      var Access = 0;
      var SubEl = null;
      if (El === null) return;
      Ref = null;
      if (pas.PasResolver.TResolvedReference.isPrototypeOf(El.FData)) {
        Ref = El.FData;
        Decl = Ref.FDeclaration;
        Access = Ref.Access;
        this.MarkImplScopeRef(El,Decl,pas.PasResolver.ResolvedToPSRefAccess[Access]);
        this.UseElement(Decl,Access,false);
        if (this.FResolver.IsNameExpr(El)) {
          if (Ref.WithExprScope !== null) {
            if (pas.PasResolver.TPasRecordScope.isPrototypeOf(Ref.WithExprScope.Scope)) {
              this.UseExprRef(El,Ref.WithExprScope.Expr,Access,false);
              return;
            };
          };
          if ((pas.PasTree.TPasVariable.isPrototypeOf(Decl) && pas.PasTree.TBinaryExpr.isPrototypeOf(El.FParent)) && (El.FParent.right === El)) {
            if (pas.PasTree.TPasRecordType.isPrototypeOf(Decl.FParent) || pas.PasTree.TPasVariant.isPrototypeOf(Decl.FParent)) {
              this.UseExprRef(El.FParent,El.FParent.left,Access,false);
            };
          };
        };
        if (pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(Decl)) {
          if (pas.PasResolver.TResElDataBuiltInProc.isPrototypeOf(Decl.FData)) {
            BuiltInProc = Decl.FData;
            var $tmp1 = BuiltInProc.BuiltIn;
            if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfTypeInfo) {
              Params = rtl.as(El.FParent,pas.PasTree.TParamsExpr).Params;
              if (rtl.length(Params) !== 1) this.RaiseNotSupported(20180226144217,El.FParent,"");
              this.FResolver.ComputeElement(Params[0],{get: function () {
                  return ParamResolved;
                }, set: function (v) {
                  ParamResolved = v;
                }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
              if (ParamResolved.IdentEl === null) this.RaiseNotSupported(20180628155107,Params[0],"");
              if (pas.PasTree.TPasFunction.isPrototypeOf(ParamResolved.IdentEl)) {
                SubEl = ParamResolved.IdentEl.GetFT().ResultEl.ResultType;
                this.MarkImplScopeRef(El,SubEl,pas.PasResolver.TPSRefAccess.psraTypeInfo);
                this.UseTypeInfo(SubEl);
              } else {
                SubEl = ParamResolved.IdentEl;
                this.MarkImplScopeRef(El,SubEl,pas.PasResolver.TPSRefAccess.psraTypeInfo);
                this.UseTypeInfo(SubEl);
              };
              return;
            } else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfAssert) {
              ModScope = rtl.as(this.FResolver.FRootElement.FData,pas.PasResolver.TPasModuleScope);
              if (ModScope.FAssertClass !== null) this.UseElType(El,ModScope.FAssertClass,$mod.TPAUseMode.paumElement);
            };
          };
        };
      };
      this.UseExpr(El.format1);
      this.UseExpr(El.format2);
      C = El.$class.ClassType();
      if ((((C === pas.PasTree.TPrimitiveExpr) || (C === pas.PasTree.TSelfExpr)) || (C === pas.PasTree.TBoolConstExpr)) || (C === pas.PasTree.TNilExpr)) {}
      else if (C === pas.PasTree.TBinaryExpr) {
        this.UseExpr(El.left);
        this.UseExpr(El.right);
      } else if (C === pas.PasTree.TUnaryExpr) {
        this.UseExpr(El.Operand)}
       else if (C === pas.PasTree.TParamsExpr) {
        this.UseExpr(El.Value);
        Params = El.Params;
        for (var $l2 = 0, $end3 = rtl.length(Params) - 1; $l2 <= $end3; $l2++) {
          i = $l2;
          this.UseExpr(Params[i]);
        };
      } else if (C === pas.PasTree.TArrayValues) {
        Params = El.Values;
        for (var $l4 = 0, $end5 = rtl.length(Params) - 1; $l4 <= $end5; $l4++) {
          i = $l4;
          this.UseExpr(Params[i]);
        };
      } else if (C === pas.PasTree.TRecordValues) {
        for (var $l6 = 0, $end7 = rtl.length(El.Fields) - 1; $l6 <= $end7; $l6++) {
          i = $l6;
          this.UseExpr(El.Fields[i].ValueExp);
        };
      } else if (C === pas.PasTree.TInheritedExpr) {
        this.UseInheritedExpr(El)}
       else this.RaiseNotSupported(20170307085444,El,"");
    };
    this.UseExprRef = function (El, Expr, Access, UseFull) {
      var Ref = null;
      var C = null;
      var Bin = null;
      var Params = null;
      var ValueResolved = new pas.PasResolver.TPasResolverResult();
      var Unary = null;
      C = Expr.$class.ClassType();
      if (C === pas.PasTree.TBinaryExpr) {
        Bin = Expr;
        if (Bin.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopSubIdent,pas.PasTree.TExprOpCode.eopNone)) this.UseExprRef(El,Bin.right,Access,UseFull);
      } else if (C === pas.PasTree.TParamsExpr) {
        Params = Expr;
        var $tmp1 = Params.Kind;
        if ($tmp1 === pas.PasTree.TPasExprKind.pekFuncParams) {
          if (this.FResolver.IsTypeCast(Params)) {
            this.UseExprRef(El,Params.Params[0],Access,UseFull)}
           else this.UseExprRef(El,Params.Value,Access,UseFull)}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekArrayParams) {
          this.FResolver.ComputeElement(Params.Value,{get: function () {
              return ValueResolved;
            }, set: function (v) {
              ValueResolved = v;
            }},{},null);
          if (!this.FResolver.IsDynArray(ValueResolved.LoTypeEl,true)) this.UseExprRef(El,Params.Value,Access,UseFull);
        } else if ($tmp1 === pas.PasTree.TPasExprKind.pekSet) {}
        else {
          this.RaiseNotSupported(20170403173817,Params,"");
        };
      } else if ((C === pas.PasTree.TSelfExpr) || ((C === pas.PasTree.TPrimitiveExpr) && (Expr.Kind === pas.PasTree.TPasExprKind.pekIdent))) {
        if (pas.PasResolver.TResolvedReference.isPrototypeOf(Expr.FData)) {
          Ref = Expr.FData;
          this.MarkImplScopeRef(El,Ref.FDeclaration,pas.PasResolver.ResolvedToPSRefAccess[Access]);
          this.UseElement(Ref.FDeclaration,Access,UseFull);
        };
      } else if (C === pas.PasTree.TUnaryExpr) {
        Unary = Expr;
        if (Unary.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopAdd,pas.PasTree.TExprOpCode.eopSubtract,pas.PasTree.TExprOpCode.eopAddress,pas.PasTree.TExprOpCode.eopDeref,pas.PasTree.TExprOpCode.eopMemAddress)) {
          this.UseExprRef(El,Unary.Operand,pas.PasResolver.TResolvedRefAccess.rraRead,false)}
         else this.RaiseNotSupported(20181015193334,Expr,pas.PasTree.OpcodeStrings[Unary.OpCode]);
      } else if ((Access === pas.PasResolver.TResolvedRefAccess.rraRead) && ((((C === pas.PasTree.TPrimitiveExpr) || (C === pas.PasTree.TNilExpr)) || (C === pas.PasTree.TBoolConstExpr)) || (C === pas.PasTree.TUnaryExpr))) {}
      else {
        this.RaiseNotSupported(20170306102159,Expr,"");
      };
    };
    this.UseInheritedExpr = function (El) {
      var P = null;
      var ProcScope = null;
      var Proc = null;
      var Args = null;
      var i = 0;
      var Arg = null;
      if ((El.FParent.$class.ClassType() === pas.PasTree.TBinaryExpr) && (El.FParent.OpCode === pas.PasTree.TExprOpCode.eopNone)) return;
      P = El.FParent;
      while (!P.$class.InheritsFrom(pas.PasTree.TPasProcedure)) P = P.FParent;
      ProcScope = rtl.as(P.FData,pas.PasResolver.TPasProcedureScope);
      if (ProcScope.DeclarationProc !== null) {
        Proc = ProcScope.DeclarationProc}
       else Proc = P;
      Args = Proc.ProcType.Args;
      for (var $l1 = 0, $end2 = Args.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Arg = rtl.getObject(Args.Get(i));
        var $tmp3 = Arg.Access;
        if ((($tmp3 === pas.PasTree.TArgumentAccess.argDefault) || ($tmp3 === pas.PasTree.TArgumentAccess.argConst)) || ($tmp3 === pas.PasTree.TArgumentAccess.argConstRef)) {
          this.UseArgument(Arg,pas.PasResolver.TResolvedRefAccess.rraRead)}
         else if ($tmp3 === pas.PasTree.TArgumentAccess.argVar) {
          this.UseArgument(Arg,pas.PasResolver.TResolvedRefAccess.rraVarParam)}
         else if ($tmp3 === pas.PasTree.TArgumentAccess.argOut) {
          this.UseArgument(Arg,pas.PasResolver.TResolvedRefAccess.rraOutParam)}
         else {
          this.RaiseNotSupported(20171107175406,Arg,"");
        };
      };
    };
    this.UseScopeReferences = function (Refs) {
      if (Refs === null) return;
      Refs.References.ForEachCall(rtl.createCallback(this,"OnUseScopeRef"),Refs.FScope);
    };
    this.UseProcedure = function (Proc) {
      var Self = this;
      function UseOverrides(CurProc) {
        var OverrideList = null;
        var i = 0;
        var OverrideProc = null;
        OverrideList = Self.FOverrideLists.FindKey(CurProc);
        if (OverrideList === null) return;
        i = 0;
        while (i < OverrideList.Count()) {
          OverrideProc = rtl.as(OverrideList.GetOverrides(i),pas.PasTree.TPasProcedure);
          Self.UseProcedure(OverrideProc);
          i += 1;
        };
      };
      var ProcScope = null;
      var ImplProc = null;
      var ClassScope = null;
      var Name = "";
      var Identifier = null;
      var El = null;
      var ClassEl = null;
      if (Proc === null) return;
      ProcScope = rtl.as(Proc.FData,pas.PasResolver.TPasProcedureScope);
      if (ProcScope.DeclarationProc !== null) return;
      if (!Self.MarkElementAsUsed(Proc,null)) return;
      Self.UseScopeReferences(ProcScope.References);
      Self.UseProcedureType(Proc.ProcType,false);
      ImplProc = Proc;
      if (ProcScope.ImplProc !== null) ImplProc = ProcScope.ImplProc;
      if (ImplProc.Body !== null) Self.UseImplBlock(ImplProc.Body.Body,false);
      if (Proc.IsOverride() && (ProcScope.OverriddenProc !== null)) Self.AddOverride(ProcScope.OverriddenProc,Proc);
      if (rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TProcedureModifier.pmOverride,pas.PasTree.TProcedureModifier.pmVirtual),Proc.FModifiers),{}) || ((Proc.FParent.$class.ClassType() === pas.PasTree.TPasClassType) && (Proc.FParent.ObjKind === pas.PasTree.TPasObjKind.okInterface))) UseOverrides(Proc);
      if (pas.PasTree.TPasClassType.isPrototypeOf(Proc.FParent)) {
        ClassScope = Proc.FParent.FData;
        ClassEl = ClassScope.FElement;
        if ((ClassEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) && Self.IsTypeInfoUsed(ClassEl)) Self.UseTypeInfo(Proc);
        if ((Proc.$class.ClassType() === pas.PasTree.TPasConstructor) || (Proc.$class.ClassType() === pas.PasTree.TPasDestructor)) {
          if (ClassScope.AncestorScope === null) {
            if (Proc.$class.ClassType() === pas.PasTree.TPasConstructor) {
              Name = "AfterConstruction"}
             else Name = "BeforeDestruction";
            Identifier = ClassScope.FindLocalIdentifier(Name);
            while (Identifier !== null) {
              El = Identifier.FElement;
              if ((El.$class.ClassType() === pas.PasTree.TPasProcedure) && (El.ProcType.Args.FCount === 0)) {
                Self.UseProcedure(El);
                break;
              };
              Identifier = Identifier.NextSameIdentifier;
            };
          };
        };
      };
    };
    this.UseProcedureType = function (ProcType, Mark) {
      var i = 0;
      var Arg = null;
      if (Mark && !this.MarkElementAsUsed(ProcType,null)) return;
      for (var $l1 = 0, $end2 = ProcType.Args.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Arg = rtl.getObject(ProcType.Args.Get(i));
        this.UseElType(ProcType,Arg.ArgType,$mod.TPAUseMode.paumElement);
        this.UseExpr(Arg.ValueExpr);
      };
      if (pas.PasTree.TPasFunctionType.isPrototypeOf(ProcType)) this.UseElType(ProcType,ProcType.ResultEl.ResultType,$mod.TPAUseMode.paumElement);
    };
    this.UseType = function (El, Mode) {
      var C = null;
      var i = 0;
      if (El === null) return;
      C = El.$class.ClassType();
      if (Mode === $mod.TPAUseMode.paumAllExports) {
        if (C === pas.PasTree.TPasRecordType) {
          this.UseRecordType(El,Mode)}
         else if (C === pas.PasTree.TPasClassType) this.UseClassType(El,Mode);
      } else {
        if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
          if (pas.PasResolver.TResElDataBaseType.isPrototypeOf(El.FData) || pas.PasResolver.TResElDataBuiltInProc.isPrototypeOf(El.FData)) {}
          else this.RaiseNotSupported(20170307101353,El,"");
        } else if (((C === pas.PasTree.TPasAliasType) || (C === pas.PasTree.TPasTypeAliasType)) || (C === pas.PasTree.TPasClassOfType)) {
          if (!this.MarkElementAsUsed(El,null)) return;
          this.UseElType(El,El.DestType,Mode);
          if (C === pas.PasTree.TPasTypeAliasType) this.UseExpr(El.Expr);
        } else if (C === pas.PasTree.TPasArrayType) {
          if (!this.MarkElementAsUsed(El,null)) return;
          for (var $l1 = 0, $end2 = rtl.length(El.Ranges) - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            this.UseExpr(El.Ranges[i]);
          };
          this.UseElType(El,El.ElType,Mode);
        } else if (C === pas.PasTree.TPasRecordType) {
          this.UseRecordType(El,Mode)}
         else if (C === pas.PasTree.TPasClassType) {
          this.UseClassType(El,Mode)}
         else if (C === pas.PasTree.TPasEnumType) {
          if (!this.MarkElementAsUsed(El,null)) return;
          for (var $l3 = 0, $end4 = El.Values.FCount - 1; $l3 <= $end4; $l3++) {
            i = $l3;
            this.UseElement(rtl.getObject(El.Values.Get(i)),pas.PasResolver.TResolvedRefAccess.rraRead,false);
          };
        } else if (C === pas.PasTree.TPasPointerType) {
          if (!this.MarkElementAsUsed(El,null)) return;
          this.UseElType(El,El.DestType,Mode);
        } else if (C === pas.PasTree.TPasRangeType) {
          if (!this.MarkElementAsUsed(El,null)) return;
          this.UseExpr(El.RangeExpr);
        } else if (C === pas.PasTree.TPasSetType) {
          if (!this.MarkElementAsUsed(El,null)) return;
          this.UseElType(El,El.EnumType,Mode);
        } else if (C.InheritsFrom(pas.PasTree.TPasProcedureType)) {
          this.UseProcedureType(El,true)}
         else this.RaiseNotSupported(20170306170315,El,"");
        if (Mode === $mod.TPAUseMode.paumAllPasUsable) this.UseTypeInfo(El);
      };
    };
    this.UseRecordType = function (El, Mode) {
      var i = 0;
      if (Mode === $mod.TPAUseMode.paumAllExports) return;
      this.MarkElementAsUsed(El,null);
      if (!this.ElementVisited(El,Mode)) {
        if ((Mode === $mod.TPAUseMode.paumAllPasUsable) || this.FResolver.IsTGUID(El)) for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          this.UseVariable(rtl.as(rtl.getObject(El.Members.Get(i)),pas.PasTree.TPasVariable),pas.PasResolver.TResolvedRefAccess.rraNone,true);
        };
      };
    };
    this.UseClassType = function (El, Mode) {
      var Self = this;
      function UseDelegations() {
        var OverrideList = null;
        var i = 0;
        var Prop = null;
        OverrideList = Self.FOverrideLists.FindKey(El);
        if (OverrideList === null) return;
        i = 0;
        while (i < OverrideList.Count()) {
          Prop = rtl.as(OverrideList.GetOverrides(i),pas.PasTree.TPasProperty);
          Self.UseVariable(Prop,pas.PasResolver.TResolvedRefAccess.rraRead,false);
          i += 1;
        };
      };
      function MarkAllInterfaceImplementations(Scope) {
        var i = 0;
        var j = 0;
        var o = null;
        var map = null;
        if (Scope.Interfaces === null) return;
        for (var $l1 = 0, $end2 = Scope.Interfaces.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          o = rtl.getObject(Scope.Interfaces.Get(i));
          if (pas.PasTree.TPasProperty.isPrototypeOf(o)) {
            Self.UseVariable(o,pas.PasResolver.TResolvedRefAccess.rraRead,false)}
           else if (pas.PasResolver.TPasClassIntfMap.isPrototypeOf(o)) {
            map = o;
            do {
              if (map.Intf !== null) Self.UseClassType(map.Intf,$mod.TPAUseMode.paumElement);
              if (map.Procs !== null) for (var $l3 = 0, $end4 = map.Procs.FCount - 1; $l3 <= $end4; $l3++) {
                j = $l3;
                Self.UseProcedure(rtl.getObject(map.Procs.Get(j)));
              };
              map = map.AncestorMap;
            } while (!(map === null));
          } else Self.RaiseNotSupported(20180405190114,El,pas.PasResolveEval.GetObjName(o));
        };
      };
      var i = 0;
      var Member = null;
      var AllPublished = false;
      var FirstTime = false;
      var IsCOMInterfaceRoot = false;
      var ProcScope = null;
      var ClassScope = null;
      var Ref = null;
      var j = 0;
      var List = null;
      var ProcList = null;
      var o = null;
      var map = null;
      var ImplProc = null;
      var IntfProc = null;
      FirstTime = true;
      var $tmp1 = Mode;
      if ($tmp1 === $mod.TPAUseMode.paumAllExports) {
        return}
       else if ($tmp1 === $mod.TPAUseMode.paumAllPasUsable) {
        if (Self.MarkElementAsUsed(El,null)) {
          Self.ElementVisited(El,Mode)}
         else {
          if (Self.ElementVisited(El,Mode)) return;
          FirstTime = false;
        };
      } else if ($tmp1 === $mod.TPAUseMode.paumElement) {
        if (!Self.MarkElementAsUsed(El,null)) return}
       else {
        Self.RaiseInconsistency(20170414152143,pas.SysUtils.IntToStr(Mode));
      };
      if (El.IsForward) {
        Ref = rtl.as(El.FData,pas.PasResolver.TResolvedReference);
        Self.UseClassType(rtl.as(Ref.FDeclaration,pas.PasTree.TPasClassType),Mode);
        return;
      };
      ClassScope = rtl.as(El.FData,pas.PasResolver.TPasClassScope);
      if (ClassScope === null) return;
      IsCOMInterfaceRoot = false;
      if (FirstTime) {
        Self.UseElType(El,ClassScope.DirectAncestor,$mod.TPAUseMode.paumElement);
        Self.UseElType(El,El.HelperForType,$mod.TPAUseMode.paumElement);
        Self.UseExpr(El.GUIDExpr);
        if (El.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
          UseDelegations();
          if ((El.InterfaceType === pas.PasTree.TPasClassInterfaceType.citCom) && (El.AncestorType === null)) IsCOMInterfaceRoot = true;
        };
        if (((El.ObjKind === pas.PasTree.TPasObjKind.okClass) && (Self.FScopeModule !== null)) && (ClassScope.Interfaces !== null)) MarkAllInterfaceImplementations(ClassScope);
      };
      AllPublished = Mode !== $mod.TPAUseMode.paumAllExports;
      for (var $l2 = 0, $end3 = El.Members.FCount - 1; $l2 <= $end3; $l2++) {
        i = $l2;
        Member = rtl.getObject(El.Members.Get(i));
        if (FirstTime && pas.PasTree.TPasProcedure.isPrototypeOf(Member)) {
          ProcScope = rtl.as(Member.FData,pas.PasResolver.TPasProcedureScope);
          if (Member.IsOverride() && (ProcScope.OverriddenProc !== null)) {
            Self.AddOverride(ProcScope.OverriddenProc,Member);
            if (Self.FScopeModule !== null) {
              Self.UseProcedure(Member);
              continue;
            };
          };
          if (IsCOMInterfaceRoot) {
            var $tmp4 = pas.SysUtils.LowerCase(Member.FName);
            if ($tmp4 === "queryinterface") {
              if (Member.ProcType.Args.FCount === 2) {
                Self.UseProcedure(Member);
                continue;
              }}
             else if ($tmp4 === "_addref") {
              if (Member.ProcType.Args.FCount === 0) {
                Self.UseProcedure(Member);
                continue;
              }}
             else if ($tmp4 === "_release") if (Member.ProcType.Args.FCount === 0) {
              Self.UseProcedure(Member);
              continue;
            };
          };
        };
        if (AllPublished && (Member.Visibility === pas.PasTree.TPasMemberVisibility.visPublished)) {
          if (!FirstTime) continue;
          Self.UseTypeInfo(Member);
        } else if (Mode === $mod.TPAUseMode.paumElement) {
          continue}
         else if (Self.IsModuleInternal(Member)) {
          continue}
         else if (((Mode === $mod.TPAUseMode.paumAllPasUsable) && FirstTime) && ((Member.$class.ClassType() === pas.PasTree.TPasProperty) || pas.PasTree.TPasType.isPrototypeOf(Member))) {
          Self.UseTypeInfo(Member);
        };
        Self.UseElement(Member,pas.PasResolver.TResolvedRefAccess.rraNone,true);
      };
      if (FirstTime) {
        List = ClassScope.Interfaces;
        if (List !== null) for (var $l5 = 0, $end6 = List.FCount - 1; $l5 <= $end6; $l5++) {
          i = $l5;
          o = rtl.getObject(List.Get(i));
          if (pas.PasTree.TPasProperty.isPrototypeOf(o)) {
            Self.AddOverride(rtl.getObject(El.Interfaces.Get(i)),o);
          } else if (pas.PasResolver.TPasClassIntfMap.isPrototypeOf(o)) {
            map = o;
            while (map !== null) {
              ProcList = map.Procs;
              if (ProcList !== null) for (var $l7 = 0, $end8 = ProcList.FCount - 1; $l7 <= $end8; $l7++) {
                j = $l7;
                ImplProc = rtl.getObject(ProcList.Get(j));
                if (ImplProc === null) continue;
                IntfProc = rtl.as(rtl.getObject(map.Intf.Members.Get(j)),pas.PasTree.TPasProcedure);
                Self.AddOverride(IntfProc,ImplProc);
              };
              map = map.AncestorMap;
            };
          } else Self.RaiseNotSupported(20180328224632,El,pas.PasResolveEval.GetObjName(o));
        };
      };
    };
    this.UseVariable = function (El, Access, UseFull) {
      var Self = this;
      var Usage = null;
      var UseRead = false;
      var UseWrite = false;
      function UpdateVarAccess(IsRead, IsWrite) {
        if (IsRead) {
          var $tmp1 = Usage.Access;
          if ($tmp1 === $mod.TPAIdentifierAccess.paiaNone) {
            Usage.Access = $mod.TPAIdentifierAccess.paiaRead;
            UseRead = true;
          } else if ($tmp1 === $mod.TPAIdentifierAccess.paiaRead) {}
          else if ($tmp1 === $mod.TPAIdentifierAccess.paiaWrite) {
            Usage.Access = $mod.TPAIdentifierAccess.paiaWriteRead;
            UseRead = true;
          } else if ($tmp1 === $mod.TPAIdentifierAccess.paiaReadWrite) {}
          else if ($tmp1 === $mod.TPAIdentifierAccess.paiaWriteRead) {}
          else {
            Self.RaiseInconsistency(20170311182420,"");
          };
        };
        if (IsWrite) {
          var $tmp2 = Usage.Access;
          if ($tmp2 === $mod.TPAIdentifierAccess.paiaNone) {
            Usage.Access = $mod.TPAIdentifierAccess.paiaWrite;
            UseWrite = true;
          } else if ($tmp2 === $mod.TPAIdentifierAccess.paiaRead) {
            Usage.Access = $mod.TPAIdentifierAccess.paiaReadWrite;
            UseWrite = true;
          } else if ($tmp2 === $mod.TPAIdentifierAccess.paiaWrite) {}
          else if ($tmp2 === $mod.TPAIdentifierAccess.paiaReadWrite) {}
          else if ($tmp2 === $mod.TPAIdentifierAccess.paiaWriteRead) {}
          else {
            Self.RaiseInconsistency(20170311182536,"");
          };
        };
      };
      var Prop = null;
      var i = 0;
      var IsRead = false;
      var IsWrite = false;
      var CanRead = false;
      var CanWrite = false;
      var ClassEl = null;
      if (El === null) return;
      if (El.$class.ClassType() === pas.PasTree.TPasProperty) {
        Prop = El;
        if (pas.PasTree.TPasClassType.isPrototypeOf(Prop.FParent)) {
          ClassEl = Prop.FParent;
          if ((ClassEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) && Self.IsTypeInfoUsed(ClassEl)) {
            UseFull = true;
            Self.UseTypeInfo(Prop);
          };
        };
      } else Prop = null;
      IsRead = false;
      IsWrite = false;
      if (UseFull) if (Prop !== null) {
        CanRead = Self.FResolver.GetPasPropertyGetter(Prop) !== null;
        CanWrite = Self.FResolver.GetPasPropertySetter(Prop) !== null;
        if (CanRead) {
          if (CanWrite) {
            Access = pas.PasResolver.TResolvedRefAccess.rraReadAndAssign}
           else Access = pas.PasResolver.TResolvedRefAccess.rraRead;
        } else if (CanWrite) {
          Access = pas.PasResolver.TResolvedRefAccess.rraAssign}
         else Access = pas.PasResolver.TResolvedRefAccess.rraNone;
      } else Access = pas.PasResolver.TResolvedRefAccess.rraRead;
      var $tmp1 = Access;
      if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraNone) {}
      else if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraRead) {
        IsRead = true}
       else if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraAssign) {
        IsWrite = true}
       else if ((($tmp1 === pas.PasResolver.TResolvedRefAccess.rraReadAndAssign) || ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraVarParam)) || ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraOutParam)) {
        IsRead = true;
        IsWrite = true;
      } else if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraParamToUnknownProc) {
        Self.RaiseInconsistency(20170307153439,"")}
       else {
        Self.RaiseInconsistency(20170308120949,"");
      };
      UseRead = false;
      UseWrite = false;
      if (Self.MarkElementAsUsed(El,null)) {
        Usage = Self.FindElement(El);
        if (El.Expr !== null) Usage.Access = $mod.TPAIdentifierAccess.paiaWrite;
        UpdateVarAccess(IsRead,IsWrite);
        Self.UseElType(El,El.VarType,$mod.TPAUseMode.paumElement);
        Self.UseExpr(El.Expr);
        Self.UseExpr(El.LibraryName);
        Self.UseExpr(El.ExportName);
        Self.UseExpr(El.AbsoluteExpr);
        if (Prop !== null) {
          for (var $l2 = 0, $end3 = Prop.FArgs.FCount - 1; $l2 <= $end3; $l2++) {
            i = $l2;
            Self.UseElType(Prop,rtl.getObject(Prop.FArgs.Get(i)).ArgType,$mod.TPAUseMode.paumElement);
          };
          Self.UseExpr(Prop.IndexExpr);
        };
      } else {
        Usage = Self.FindElement(El);
        if (Usage === null) return;
        UpdateVarAccess(IsRead,IsWrite);
      };
      if (Prop !== null) {
        if (UseRead) Self.UseElement(Self.FResolver.GetPasPropertyGetter(Prop),pas.PasResolver.TResolvedRefAccess.rraRead,false);
        if (UseWrite) Self.UseElement(Self.FResolver.GetPasPropertySetter(Prop),pas.PasResolver.TResolvedRefAccess.rraAssign,false);
      };
    };
    this.UseResourcestring = function (El) {
      if (!this.MarkElementAsUsed(El,null)) return;
      this.UseExpr(El.Expr);
    };
    this.UseArgument = function (El, Access) {
      var Usage = null;
      var IsRead = false;
      var IsWrite = false;
      IsRead = false;
      IsWrite = false;
      var $tmp1 = Access;
      if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraNone) {}
      else if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraRead) {
        IsRead = true}
       else if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraAssign) {
        IsWrite = true}
       else if ((($tmp1 === pas.PasResolver.TResolvedRefAccess.rraReadAndAssign) || ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraVarParam)) || ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraOutParam)) {
        IsRead = true;
        IsWrite = true;
      } else if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraParamToUnknownProc) {
        this.RaiseInconsistency(20170308121031,"")}
       else {
        this.RaiseInconsistency(20170308121037,"");
      };
      if (this.MarkElementAsUsed(El,null)) {
        Usage = this.FindElement(El);
      } else {
        Usage = this.FindElement(El);
        if (Usage === null) this.RaiseNotSupported(20170308121928,El,"");
      };
      this.UpdateAccess(IsWrite,IsRead,Usage);
    };
    this.UseResultElement = function (El, Access) {
      var IsRead = false;
      var IsWrite = false;
      var Usage = null;
      IsRead = false;
      IsWrite = false;
      var $tmp1 = Access;
      if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraNone) {}
      else if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraRead) {
        IsRead = true}
       else if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraAssign) {
        IsWrite = true}
       else if ((($tmp1 === pas.PasResolver.TResolvedRefAccess.rraReadAndAssign) || ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraVarParam)) || ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraOutParam)) {
        IsRead = true;
        IsWrite = true;
      } else if ($tmp1 === pas.PasResolver.TResolvedRefAccess.rraParamToUnknownProc) {
        this.RaiseInconsistency(20170308122319,"")}
       else {
        this.RaiseInconsistency(20170308122324,"");
      };
      if (this.MarkElementAsUsed(El,null)) {
        Usage = this.FindElement(El);
      } else {
        Usage = this.FindElement(El);
        if (Usage === null) this.RaiseNotSupported(20170308122333,El,"");
      };
      this.UpdateAccess(IsWrite,IsRead,Usage);
    };
    this.EmitElementHints = function (El) {
      var C = null;
      if (El === null) return;
      C = El.$class.ClassType();
      if (C.InheritsFrom(pas.PasTree.TPasVariable)) {
        this.EmitVariableHints(El)}
       else if (C.InheritsFrom(pas.PasTree.TPasType)) {
        this.EmitTypeHints(El)}
       else if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
        this.EmitProcedureHints(El)}
       else if (C === pas.PasTree.TPasMethodResolution) {}
      else this.RaiseInconsistency(20170312093126,"");
    };
    this.EmitSectionHints = function (Section) {
      var i = 0;
      var UsedModule = null;
      var aModule = null;
      var UsesClause = [];
      var Use = null;
      aModule = Section.GetModule();
      UsesClause = Section.UsesClause;
      for (var $l1 = 0, $end2 = rtl.length(UsesClause) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Use = UsesClause[i];
        if (pas.PasTree.TPasModule.isPrototypeOf(Use.Module)) {
          UsedModule = Use.Module;
          if (pas.SysUtils.CompareText(UsedModule.FName,"system") === 0) continue;
          if (!this.PAElementExists(UsedModule)) this.EmitMessage(20170311191725,pas.PScanner.TMessageType.mtHint,5023,$mod.sPAUnitNotUsed,[UsedModule.FName,aModule.FName],Use.Expr);
        };
      };
      this.EmitDeclarationsHints(Section);
    };
    this.EmitDeclarationsHints = function (El) {
      var i = 0;
      var Decl = null;
      var Usage = null;
      for (var $l1 = 0, $end2 = El.Declarations.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Decl = rtl.getObject(El.Declarations.Get(i));
        if (pas.PasTree.TPasVariable.isPrototypeOf(Decl)) {
          this.EmitVariableHints(Decl)}
         else if (pas.PasTree.TPasType.isPrototypeOf(Decl)) {
          this.EmitTypeHints(Decl)}
         else if (pas.PasTree.TPasProcedure.isPrototypeOf(Decl)) {
          this.EmitProcedureHints(Decl)}
         else {
          Usage = this.FindElement(Decl);
          if (Usage === null) {
            this.EmitMessage(20170311231734,pas.PScanner.TMessageType.mtHint,5028,$mod.sPALocalXYNotUsed,[Decl.ElementTypeName(),Decl.FName],Decl);
          };
        };
      };
    };
    this.EmitTypeHints = function (El) {
      var C = null;
      var Usage = null;
      var i = 0;
      var Member = null;
      Usage = this.FindElement(El);
      if (Usage === null) {
        if (El.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPrivate,pas.PasTree.TPasMemberVisibility.visStrictPrivate)) {
          this.EmitMessage(20170312000020,pas.PScanner.TMessageType.mtHint,5071,$mod.sPAPrivateTypeXNeverUsed,[El.FullName()],El)}
         else {
          if (pas.PasTree.TPasClassType.isPrototypeOf(El) && (El.ObjKind === pas.PasTree.TPasObjKind.okInterface)) return;
          this.EmitMessage(20170312000025,pas.PScanner.TMessageType.mtHint,5028,$mod.sPALocalXYNotUsed,[El.ElementTypeName(),El.FName],El);
        };
        return;
      };
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasRecordType) {
        for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          this.EmitVariableHints(rtl.as(rtl.getObject(El.Members.Get(i)),pas.PasTree.TPasVariable));
        };
      } else if (C === pas.PasTree.TPasClassType) {
        if (El.IsForward) return;
        for (var $l3 = 0, $end4 = El.Members.FCount - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          Member = rtl.getObject(El.Members.Get(i));
          this.EmitElementHints(Member);
        };
      };
    };
    this.EmitVariableHints = function (El) {
      var Usage = null;
      Usage = this.FindElement(El);
      if (Usage === null) {
        if (El.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPrivate,pas.PasTree.TPasMemberVisibility.visStrictPrivate)) {
          if (El.$class.ClassType() === pas.PasTree.TPasConst) {
            this.EmitMessage(20170311234602,pas.PScanner.TMessageType.mtHint,5072,$mod.sPAPrivateConstXNeverUsed,[El.FullName()],El)}
           else if (El.$class.ClassType() === pas.PasTree.TPasProperty) {
            this.EmitMessage(20170311234634,pas.PScanner.TMessageType.mtHint,5073,$mod.sPAPrivatePropertyXNeverUsed,[El.FullName()],El)}
           else this.EmitMessage(20170311231412,pas.PScanner.TMessageType.mtHint,5029,$mod.sPAPrivateFieldIsNeverUsed,[El.FullName()],El);
        } else if (El.$class.ClassType() === pas.PasTree.TPasVariable) {
          this.EmitMessage(20170311234201,pas.PScanner.TMessageType.mtHint,5025,$mod.sPALocalVariableNotUsed,[El.FName],El)}
         else this.EmitMessage(20170314221334,pas.PScanner.TMessageType.mtHint,5028,$mod.sPALocalXYNotUsed,[El.ElementTypeName(),El.FName],El);
      } else if (Usage.Access === $mod.TPAIdentifierAccess.paiaWrite) {
        if ((pas.PasTree.TVariableModifier.vmExternal in El.VarModifiers) || (pas.PasTree.TPasClassType.isPrototypeOf(El.FParent) && El.FParent.IsExternal)) return;
        if (El.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPrivate,pas.PasTree.TPasMemberVisibility.visStrictPrivate)) {
          this.EmitMessage(20170311234159,pas.PScanner.TMessageType.mtHint,5030,$mod.sPAPrivateFieldIsAssignedButNeverUsed,[El.FullName()],El)}
         else this.EmitMessage(20170311233825,pas.PScanner.TMessageType.mtHint,5027,$mod.sPALocalVariableIsAssignedButNeverUsed,[El.FName],El);
      };
    };
    this.EmitProcedureHints = function (El) {
      var Args = null;
      var i = 0;
      var Arg = null;
      var Usage = null;
      var ProcScope = null;
      var PosEl = null;
      var DeclProc = null;
      var ImplProc = null;
      ProcScope = rtl.as(El.FData,pas.PasResolver.TPasProcedureScope);
      if (ProcScope.DeclarationProc === null) {
        DeclProc = El}
       else DeclProc = ProcScope.DeclarationProc;
      if (ProcScope.ImplProc === null) {
        ImplProc = El}
       else ImplProc = ProcScope.ImplProc;
      if (!this.PAElementExists(DeclProc)) {
        if (ProcScope.DeclarationProc === null) {
          if (El.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visPrivate,pas.PasTree.TPasMemberVisibility.visStrictPrivate)) {
            this.EmitMessage(20170312093348,pas.PScanner.TMessageType.mtHint,5031,$mod.sPAPrivateMethodIsNeverUsed,[El.FullName()],El)}
           else this.EmitMessage(20170312093418,pas.PScanner.TMessageType.mtHint,5028,$mod.sPALocalXYNotUsed,[El.ElementTypeName(),El.FName],El);
        };
        return;
      };
      if (rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TProcedureModifier.pmAbstract,pas.PasTree.TProcedureModifier.pmAssembler,pas.PasTree.TProcedureModifier.pmExternal),DeclProc.FModifiers),{})) return;
      if (rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TProcedureModifier.pmAssembler),ImplProc.FModifiers),{})) return;
      if (pas.PasTree.TPasClassType.isPrototypeOf(El.FParent)) {
        if (El.FParent.ObjKind === pas.PasTree.TPasObjKind.okInterface) return;
      };
      if (ProcScope.DeclarationProc === null) {
        Args = El.ProcType.Args;
        for (var $l1 = 0, $end2 = Args.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Arg = rtl.getObject(Args.Get(i));
          Usage = this.FindElement(Arg);
          if ((Usage === null) || (Usage.Access === $mod.TPAIdentifierAccess.paiaNone)) {
            if ((pas.PasTree.TPasProcedureType.isPrototypeOf(Arg.FParent) && pas.PasTree.TPasProcedure.isPrototypeOf(Arg.FParent.FParent)) && rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TProcedureModifier.pmVirtual,pas.PasTree.TProcedureModifier.pmOverride),Arg.FParent.FParent.FModifiers),{})) {
              this.EmitMessage(20180625153623,pas.PScanner.TMessageType.mtHint,4501,$mod.sPAParameterInOverrideNotUsed,[Arg.FName],Arg)}
             else this.EmitMessage(20170312094401,pas.PScanner.TMessageType.mtHint,5024,$mod.sPAParameterNotUsed,[Arg.FName],Arg);
          } else {
            if ((Usage.Access === $mod.TPAIdentifierAccess.paiaWrite) && !(Arg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argOut,pas.PasTree.TArgumentAccess.argVar))) this.EmitMessage(20170312095348,pas.PScanner.TMessageType.mtHint,5026,$mod.sPAValueParameterIsAssignedButNeverUsed,[Arg.FName],Arg);
          };
        };
        if (pas.PasTree.TPasFunction.isPrototypeOf(El)) {
          PosEl = El.GetFT().ResultEl;
          if ((ProcScope.ImplProc !== null) && (ProcScope.ImplProc.GetFT().ResultEl !== null)) PosEl = ProcScope.ImplProc.GetFT().ResultEl;
          Usage = this.FindElement(El.GetFT().ResultEl);
          if ((Usage === null) || (Usage.Access in rtl.createSet($mod.TPAIdentifierAccess.paiaNone,$mod.TPAIdentifierAccess.paiaRead))) this.EmitMessage(20170313214038,pas.PScanner.TMessageType.mtHint,5033,$mod.sPAFunctionResultDoesNotSeemToBeSet,[],PosEl);
        };
      };
      if (El.Body !== null) {
        this.EmitDeclarationsHints(El.Body);
      };
    };
    this.Create$1 = function () {
      var m = 0;
      this.CreateTree();
      for (m = 0; m <= 3; m++) this.FChecked[m] = $mod.TPasAnalyzerKeySet.$create("Create$1",[$mod.PasElementToHashName,null]);
      this.FOverrideLists = $mod.TPasAnalyzerKeySet.$create("Create$1",[$mod.PAOverrideList_ElToHashName,$mod.PasElementToHashName]);
    };
    this.Destroy = function () {
      var m = 0;
      this.Clear();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FOverrideLists;
        }, set: function (v) {
          this.p.FOverrideLists = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FUsedElements;
        }, set: function (v) {
          this.p.FUsedElements = v;
        }});
      for (m = 0; m <= 3; m++) pas.SysUtils.FreeAndNil({a: m, p: this.FChecked, get: function () {
          return this.p[this.a];
        }, set: function (v) {
          this.p[this.a] = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.Clear = function () {
      var m = 0;
      this.FOverrideLists.FreeItems();
      this.FUsedElements.FreeItems();
      for (m = 0; m <= 3; m++) this.FChecked[m].Clear();
    };
    this.AnalyzeModule = function (aModule) {
      var Mode = 0;
      if (this.FResolver === null) this.RaiseInconsistency(20170314223032,"TPasAnalyzer.AnalyzeModule missing Resolver");
      if (this.FUsedElements.Count() > 0) this.RaiseInconsistency(20170315153243,"");
      this.FScopeModule = aModule;
      if (pas.PasTree.TPasProgram.isPrototypeOf(aModule) || pas.PasTree.TPasLibrary.isPrototypeOf(aModule)) {
        Mode = $mod.TPAUseMode.paumAllExports}
       else Mode = $mod.TPAUseMode.paumAllPasUsable;
      this.UseModule(aModule,Mode);
    };
    this.AnalyzeWholeProgram = function (aStartModule) {
      if (this.FResolver === null) this.RaiseInconsistency(20170315153201,"TPasAnalyzer.AnalyzeWholeProgram missing Resolver");
      if (this.FUsedElements.Count() > 0) this.RaiseInconsistency(20170315153252,"");
      this.FScopeModule = null;
      this.UseModule(aStartModule,$mod.TPAUseMode.paumAllExports);
      this.MarkElementAsUsed(aStartModule,null);
    };
    this.EmitModuleHints = function (aModule) {
      if (aModule.$class.ClassType() === pas.PasTree.TPasProgram) {
        this.EmitSectionHints(aModule.ProgramSection)}
       else if (aModule.$class.ClassType() === pas.PasTree.TPasLibrary) {
        this.EmitSectionHints(aModule.LibrarySection)}
       else {
        this.EmitSectionHints(aModule.InterfaceSection);
        this.EmitSectionHints(aModule.ImplementationSection);
      };
    };
    this.FindElement = function (El) {
      var Result = null;
      Result = this.FUsedElements.FindKey(El);
      return Result;
    };
    this.FindUsedElement = function (El) {
      var Result = null;
      var ProcScope = null;
      if (!this.IsIdentifier(El)) return null;
      if (pas.PasTree.TPasProcedure.isPrototypeOf(El)) {
        ProcScope = rtl.as(El.FData,pas.PasResolver.TPasProcedureScope);
        if ((ProcScope !== null) && (ProcScope.DeclarationProc !== null)) El = ProcScope.DeclarationProc;
      };
      Result = this.FindElement(El);
      return Result;
    };
    this.IsUsed = function (El) {
      var Result = false;
      Result = this.FindUsedElement(El) !== null;
      return Result;
    };
    this.IsTypeInfoUsed = function (El) {
      var Result = false;
      Result = this.FChecked[$mod.TPAUseMode.paumTypeInfo].ContainsItem(El);
      return Result;
    };
    this.IsModuleInternal = function (El) {
      var Result = false;
      if (El === null) return true;
      if (El.$class.ClassType() === pas.PasTree.TInterfaceSection) return false;
      if (this.IsExport(El)) return false;
      var $tmp1 = El.Visibility;
      if (($tmp1 === pas.PasTree.TPasMemberVisibility.visPrivate) || ($tmp1 === pas.PasTree.TPasMemberVisibility.visStrictPrivate)) {
        return true}
       else if ($tmp1 === pas.PasTree.TPasMemberVisibility.visPublished) return false;
      Result = this.IsModuleInternal(El.FParent);
      return Result;
    };
    this.IsExport = function (El) {
      var Result = false;
      if (pas.PasTree.TPasVariable.isPrototypeOf(El)) {
        Result = rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TVariableModifier.vmExport,pas.PasTree.TVariableModifier.vmPublic),El.VarModifiers),{})}
       else if (pas.PasTree.TPasProcedure.isPrototypeOf(El)) {
        Result = rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TProcedureModifier.pmExport,pas.PasTree.TProcedureModifier.pmPublic),El.FModifiers),{})}
       else Result = false;
      return Result;
    };
    this.IsIdentifier = function (El) {
      var Result = false;
      var C = null;
      C = El.$class.ClassType();
      Result = ((((C.InheritsFrom(pas.PasTree.TPasType) || C.InheritsFrom(pas.PasTree.TPasVariable)) || C.InheritsFrom(pas.PasTree.TPasProcedure)) || C.InheritsFrom(pas.PasTree.TPasModule)) || (C === pas.PasTree.TPasArgument)) || (C === pas.PasTree.TPasResString);
      return Result;
    };
    this.IsImplBlockEmpty = function (El) {
      var Result = false;
      Result = true;
      if ((El === null) || (El.Elements.FCount === 0)) return Result;
      Result = false;
      return Result;
    };
    this.EmitMessage = function (Id, MsgType, MsgNumber, Fmt, Args, PosEl) {
      var Msg = null;
      var El = null;
      var ProcScope = null;
      var ModScope = null;
      var Scanner = null;
      var State = 0;
      if (MsgType >= pas.PScanner.TMessageType.mtWarning) {
        El = PosEl;
        while (El !== null) {
          if (pas.PasTree.TPasProcedure.isPrototypeOf(El)) {
            ProcScope = rtl.as(El.FData,pas.PasResolver.TPasProcedureScope);
            if (ProcScope.ImplProc !== null) ProcScope = rtl.as(ProcScope.ImplProc.FData,pas.PasResolver.TPasProcedureScope);
            var $tmp1 = MsgType;
            if ($tmp1 === pas.PScanner.TMessageType.mtHint) {
              if (!(pas.PScanner.TBoolSwitch.bsHints in ProcScope.BoolSwitches)) return}
             else if ($tmp1 === pas.PScanner.TMessageType.mtNote) {
              if (!(pas.PScanner.TBoolSwitch.bsNotes in ProcScope.BoolSwitches)) return}
             else if ($tmp1 === pas.PScanner.TMessageType.mtWarning) if (!(pas.PScanner.TBoolSwitch.bsWarnings in ProcScope.BoolSwitches)) return;
            break;
          } else if (pas.PasTree.TPasModule.isPrototypeOf(El)) {
            ModScope = rtl.as(El.FData,pas.PasResolver.TPasModuleScope);
            var $tmp2 = MsgType;
            if ($tmp2 === pas.PScanner.TMessageType.mtHint) {
              if (!(pas.PScanner.TBoolSwitch.bsHints in ModScope.BoolSwitches)) return}
             else if ($tmp2 === pas.PScanner.TMessageType.mtNote) {
              if (!(pas.PScanner.TBoolSwitch.bsNotes in ModScope.BoolSwitches)) return}
             else if ($tmp2 === pas.PScanner.TMessageType.mtWarning) if (!(pas.PScanner.TBoolSwitch.bsWarnings in ModScope.BoolSwitches)) return;
            break;
          };
          El = El.FParent;
        };
        if ((this.FResolver !== null) && (this.FResolver.FCurrentParser !== null)) {
          Scanner = this.FResolver.FCurrentParser.FScanner;
          if (Scanner !== null) {
            State = Scanner.GetWarnMsgState(MsgNumber);
            var $tmp3 = State;
            if ($tmp3 === pas.PScanner.TWarnMsgState.wmsOff) {
              return;
            } else if ($tmp3 === pas.PScanner.TWarnMsgState.wmsError) MsgType = pas.PScanner.TMessageType.mtError;
          };
        };
      };
      Msg = $mod.TPAMessage.$create("Create$1");
      Msg.Id = Id;
      Msg.MsgType = MsgType;
      Msg.MsgNumber = MsgNumber;
      Msg.MsgPattern = Fmt;
      Msg.MsgText = pas.PScanner.SafeFormat(Fmt,Args);
      pas.PScanner.CreateMsgArgs({p: Msg, get: function () {
          return this.p.Args;
        }, set: function (v) {
          this.p.Args = v;
        }},Args);
      Msg.PosEl = PosEl;
      Msg.Filename = PosEl.SourceFilename;
      this.FResolver.$class.UnmangleSourceLineNumber(PosEl.SourceLinenumber,{p: Msg, get: function () {
          return this.p.Row;
        }, set: function (v) {
          this.p.Row = v;
        }},{p: Msg, get: function () {
          return this.p.Col;
        }, set: function (v) {
          this.p.Col = v;
        }});
      this.EmitMessage$1(Msg);
    };
    this.EmitMessage$1 = function (Msg) {
      if (!(this.FOnMessage != null)) {
        Msg.Release();
        return;
      };
      try {
        this.FOnMessage(this,Msg);
      } finally {
        Msg.Release();
      };
    };
    this.GetWarnIdentifierNumbers = function (Identifier, MsgNumbers) {
      var Self = this;
      var Result = false;
      function SetNumber(number) {
        MsgNumbers.set(rtl.arraySetLength(MsgNumbers.get(),0,1));
        MsgNumbers.get()[0] = number;
      };
      if (Identifier === "") return false;
      if (Identifier.charCodeAt(0) in rtl.createSet(null,48,57)) return false;
      Result = true;
      var $tmp1 = pas.SysUtils.UpperCase(Identifier);
      if ($tmp1 === "NO_RETVAL") {
        SetNumber(5033)}
       else {
        Result = false;
      };
      return Result;
    };
    this.GetUsedElements = function () {
      var Result = null;
      Result = this.FUsedElements.GetList();
      return Result;
    };
  });
  this.PasElementToHashName = function (Item) {
    var Result = "";
    Result = "" + Item.FPasElementId;
    return Result;
  };
  this.PAElement_ElToHashName = function (Item) {
    var Result = "";
    Result = "" + Item.FElement.FPasElementId;
    return Result;
  };
  this.PAOverrideList_ElToHashName = function (Item) {
    var Result = "";
    Result = "" + Item.FElement.FPasElementId;
    return Result;
  };
  this.GetElModName = function (El) {
    var Result = "";
    var aModule = null;
    if (El === null) return "nil";
    Result = (El.PathName() + ":") + El.$classname;
    aModule = El.GetModule();
    if (aModule === El) return Result;
    if (aModule === null) {
      Result = "NilModule." + Result}
     else Result = (aModule.FName + ".") + Result;
    return Result;
  };
  this.dbgs = function (a) {
    var Result = "";
    Result = $mod.TPAIdentifierAccess[a];
    return Result;
  };
});
rtl.module("jsbase",["System","JS","Classes","SysUtils"],function () {
  "use strict";
  var $mod = this;
  this.MinSafeIntDouble = -0x10000000000000;
  this.MaxSafeIntDouble = 0xfffffffffffff;
  this.TJSType = {"0": "jstUNDEFINED", jstUNDEFINED: 0, "1": "jstNull", jstNull: 1, "2": "jstBoolean", jstBoolean: 2, "3": "jstNumber", jstNumber: 3, "4": "jstString", jstString: 4, "5": "jstObject", jstObject: 5, "6": "jstReference", jstReference: 6, "7": "jstCompletion", jstCompletion: 7};
  $mod.$rtti.$Enum("TJSType",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TJSType});
  rtl.createClass($mod,"TJSValue",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FValueType = 0;
      this.FValue = undefined;
      this.FCustomValue = "";
    };
    this.ClearValue = function (ANewValue) {
      var $tmp1 = this.FValueType;
      if ($tmp1 === $mod.TJSType.jstUNDEFINED) {
        this.FValue = undefined}
       else if ($tmp1 === $mod.TJSType.jstString) {
        this.FValue = ""}
       else if ($tmp1 === $mod.TJSType.jstNumber) {
        this.FValue = 0}
       else if ($tmp1 === $mod.TJSType.jstBoolean) {
        this.FValue = false}
       else {
        this.FValue = null;
      };
      this.FValueType = ANewValue;
      this.FCustomValue = "";
    };
    this.GetAsBoolean = function () {
      var Result = false;
      if (this.FValueType === $mod.TJSType.jstBoolean) {
        Result = !(this.FValue == false)}
       else Result = false;
      return Result;
    };
    this.GetAsCompletion = function () {
      var Result = null;
      Result = rtl.getObject(this.FValue);
      return Result;
    };
    this.GetAsNumber = function () {
      var Result = 0.0;
      if (this.FValueType === $mod.TJSType.jstNumber) {
        Result = rtl.getNumber(this.FValue)}
       else Result = 0.0;
      return Result;
    };
    this.GetAsObject = function () {
      var Result = null;
      if (this.FValueType === $mod.TJSType.jstObject) {
        Result = rtl.getObject(this.FValue)}
       else Result = null;
      return Result;
    };
    this.GetAsReference = function () {
      var Result = null;
      if (this.FValueType === $mod.TJSType.jstReference) {
        Result = rtl.getObject(this.FValue)}
       else Result = null;
      return Result;
    };
    this.GetAsString = function () {
      var Result = "";
      if (this.FValueType === $mod.TJSType.jstString) {
        Result = "" + this.FValue}
       else Result = "";
      return Result;
    };
    this.GetIsNull = function () {
      var Result = false;
      Result = this.FValueType === $mod.TJSType.jstNull;
      return Result;
    };
    this.GetIsUndefined = function () {
      var Result = false;
      Result = this.FValueType === $mod.TJSType.jstUNDEFINED;
      return Result;
    };
    this.SetAsBoolean = function (AValue) {
      this.ClearValue($mod.TJSType.jstBoolean);
      this.FValue = AValue;
    };
    this.SetAsCompletion = function (AValue) {
      this.ClearValue($mod.TJSType.jstBoolean);
      this.FValue = AValue;
    };
    this.SetAsNumber = function (AValue) {
      this.ClearValue($mod.TJSType.jstNumber);
      this.FValue = AValue;
    };
    this.SetAsObject = function (AValue) {
      this.ClearValue($mod.TJSType.jstObject);
      this.FValue = AValue;
    };
    this.SetAsReference = function (AValue) {
      this.ClearValue($mod.TJSType.jstReference);
      this.FValue = AValue;
    };
    this.SetAsString = function (AValue) {
      this.ClearValue($mod.TJSType.jstString);
      this.FValue = AValue;
    };
    this.SetIsNull = function (AValue) {
      if (AValue) {
        this.ClearValue($mod.TJSType.jstNull)}
       else if (this.GetIsNull()) this.ClearValue($mod.TJSType.jstUNDEFINED);
    };
    this.SetIsUndefined = function (AValue) {
      if (AValue) {
        this.ClearValue($mod.TJSType.jstUNDEFINED)}
       else if (this.GetIsUndefined()) this.ClearValue($mod.TJSType.jstNull);
    };
    this.Create$1 = function () {
      this.SetIsUndefined(true);
    };
    this.CreateNull = function () {
      this.SetIsNull(true);
    };
    this.Create$2 = function (ANumber) {
      this.SetAsNumber(ANumber);
    };
    this.Create$3 = function (ABoolean) {
      this.SetAsBoolean(ABoolean);
    };
    this.Create$4 = function (AString) {
      this.SetAsString(AString);
    };
    this.Destroy = function () {
      this.ClearValue($mod.TJSType.jstUNDEFINED);
      pas.System.TObject.Destroy.call(this);
    };
  });
  var HexChars = rtl.createSet(null,48,57,null,97,102,null,65,70);
  this.IsValidJSIdentifier = function (Name, AllowEscapeSeq) {
    var Result = false;
    var p = 0;
    var l = 0;
    var i = 0;
    Result = false;
    if (Name === "") return Result;
    l = Name.length;
    p = 1;
    while (p <= l) {
      var $tmp1 = Name.charAt(p - 1);
      if (($tmp1 >= "0") && ($tmp1 <= "9")) {
        if (p === 1) {
          return Result}
         else p += 1}
       else if ((((($tmp1 >= "a") && ($tmp1 <= "z")) || (($tmp1 >= "A") && ($tmp1 <= "Z"))) || ($tmp1 === "_")) || ($tmp1 === "$")) {
        p += 1}
       else if ($tmp1 === "\\") {
        if (!AllowEscapeSeq) return Result;
        p += 1;
        if (p > l) return Result;
        if (Name.charAt(p - 1) === "x") {
          p += 1;
          if ((p > l) || !(Name.charCodeAt(p - 1) in HexChars)) return Result;
          p += 1;
          if ((p > l) || !(Name.charCodeAt(p - 1) in HexChars)) return Result;
        } else if (Name.charAt(p - 1) === "u") {
          p += 1;
          if (p > l) return Result;
          if (Name.charAt(p - 1) === "{") {
            i = 0;
            do {
              p += 1;
              if (p > l) return Result;
              var $tmp2 = Name.charAt(p - 1);
              if ($tmp2 === "}") {
                break}
               else if (($tmp2 >= "0") && ($tmp2 <= "9")) {
                i = ((i * 16) + Name.charCodeAt(p - 1)) - "0".charCodeAt()}
               else if (($tmp2 >= "a") && ($tmp2 <= "f")) {
                i = (((i * 16) + Name.charCodeAt(p - 1)) - "a".charCodeAt()) + 10}
               else if (($tmp2 >= "A") && ($tmp2 <= "F")) {
                i = (((i * 16) + Name.charCodeAt(p - 1)) - "A".charCodeAt()) + 10}
               else {
                return Result;
              };
              if (i > 0xFFFF) return Result;
            } while (!false);
            if ((i >= 0xD800) && (i < 0xE000)) return Result;
            p += 1;
          } else {
            for (i = 1; i <= 4; i++) {
              p += 1;
              if ((p > l) || !(Name.charCodeAt(p - 1) in HexChars)) return Result;
            };
          };
        } else return Result;
      } else if (($tmp1 === "‌") || ($tmp1 === "‍")) {
        p += 1}
       else if ((($tmp1 >= "ª") && ($tmp1 <= " ")) || (($tmp1 >= "‎") && ($tmp1 <= "퟿"))) {
        p += 1}
       else if (($tmp1 >= "\uD800") && ($tmp1 <= "\uDFFF")) {
        return Result}
       else if (($tmp1 >= "") && ($tmp1 <= "\uFFFF")) {
        p += 1}
       else {
        return Result;
      };
    };
    Result = true;
    return Result;
  };
  this.StrToJSString = function (S) {
    var Result = "";
    Result = S;
    return Result;
  };
  this.JSStringToString = function (S) {
    var Result = "";
    Result = S;
    return Result;
  };
});
rtl.module("jstoken",["System"],function () {
  "use strict";
  var $mod = this;
  this.TJSToken = {"0": "tjsUnknown", tjsUnknown: 0, "1": "tjsEOF", tjsEOF: 1, "2": "tjsWhiteSpace", tjsWhiteSpace: 2, "3": "tjsChar", tjsChar: 3, "4": "tjsString", tjsString: 4, "5": "tjsIdentifier", tjsIdentifier: 5, "6": "tjsNumber", tjsNumber: 6, "7": "tjsComment", tjsComment: 7, "8": "tjsREGEX", tjsREGEX: 8, "9": "tjsRESERVED", tjsRESERVED: 9, "10": "tjsANDAND", tjsANDAND: 10, "11": "tjsANDEQ", tjsANDEQ: 11, "12": "tjsBraceOpen", tjsBraceOpen: 12, "13": "tjsBraceClose", tjsBraceClose: 13, "14": "tjsSQuaredBraceOpen", tjsSQuaredBraceOpen: 14, "15": "tjsSQuaredBraceClose", tjsSQuaredBraceClose: 15, "16": "tjsCurlyBraceOpen", tjsCurlyBraceOpen: 16, "17": "tjsCurlyBraceClose", tjsCurlyBraceClose: 17, "18": "tjsCOMMA", tjsCOMMA: 18, "19": "tjsCOLON", tjsCOLON: 19, "20": "tjsDOT", tjsDOT: 20, "21": "tjsSEMICOLON", tjsSEMICOLON: 21, "22": "tjsASSIGN", tjsASSIGN: 22, "23": "tjsGT", tjsGT: 23, "24": "tjsLT", tjsLT: 24, "25": "tjsConditional", tjsConditional: 25, "26": "tjsPLUS", tjsPLUS: 26, "27": "tjsMINUS", tjsMINUS: 27, "28": "tjsMUL", tjsMUL: 28, "29": "tjsDIV", tjsDIV: 29, "30": "tjsAnd", tjsAnd: 30, "31": "tjsOR", tjsOR: 31, "32": "tjsInv", tjsInv: 32, "33": "tjsMod", tjsMod: 33, "34": "tjsXOR", tjsXOR: 34, "35": "tjsNot", tjsNot: 35, "36": "tjsEQ", tjsEQ: 36, "37": "tjsGE", tjsGE: 37, "38": "tjsLE", tjsLE: 38, "39": "tjsLSHIFT", tjsLSHIFT: 39, "40": "tjsLSHIFTEQ", tjsLSHIFTEQ: 40, "41": "tjsMINUSEQ", tjsMINUSEQ: 41, "42": "tjsMINUSMINUS", tjsMINUSMINUS: 42, "43": "tjsMODEQ", tjsMODEQ: 43, "44": "tjsDIVEQ", tjsDIVEQ: 44, "45": "tjsXOREq", tjsXOREq: 45, "46": "tjsNE", tjsNE: 46, "47": "tjsOREQ", tjsOREQ: 47, "48": "tjsOROR", tjsOROR: 48, "49": "tjsPLUSEQ", tjsPLUSEQ: 49, "50": "tjsPLUSPLUS", tjsPLUSPLUS: 50, "51": "tjsURSHIFT", tjsURSHIFT: 51, "52": "tjsURSHIFTEQ", tjsURSHIFTEQ: 52, "53": "tjsRSHIFT", tjsRSHIFT: 53, "54": "tjsRSHIFTEQ", tjsRSHIFTEQ: 54, "55": "tjsSEQ", tjsSEQ: 55, "56": "tjsSNE", tjsSNE: 56, "57": "tjsMULEQ", tjsMULEQ: 57, "58": "tjsBREAK", tjsBREAK: 58, "59": "tjsCASE", tjsCASE: 59, "60": "tjsCATCH", tjsCATCH: 60, "61": "tjsCONTINUE", tjsCONTINUE: 61, "62": "tjsDEFAULT", tjsDEFAULT: 62, "63": "tjsDELETE", tjsDELETE: 63, "64": "tjsDO", tjsDO: 64, "65": "tjsELSE", tjsELSE: 65, "66": "tjsFalse", tjsFalse: 66, "67": "tjsFINALLY", tjsFINALLY: 67, "68": "tjsFOR", tjsFOR: 68, "69": "tjsFUNCTION", tjsFUNCTION: 69, "70": "tjsIF", tjsIF: 70, "71": "tjsIN", tjsIN: 71, "72": "tjsINSTANCEOF", tjsINSTANCEOF: 72, "73": "tjsNEW", tjsNEW: 73, "74": "tjsNULL", tjsNULL: 74, "75": "tjsRETURN", tjsRETURN: 75, "76": "tjsSWITCH", tjsSWITCH: 76, "77": "tjsTHIS", tjsTHIS: 77, "78": "tjsTHROW", tjsTHROW: 78, "79": "tjsTrue", tjsTrue: 79, "80": "tjsTRY", tjsTRY: 80, "81": "tjsTYPEOF", tjsTYPEOF: 81, "82": "tjsVAR", tjsVAR: 82, "83": "tjsVOID", tjsVOID: 83, "84": "tjsWHILE", tjsWHILE: 84, "85": "tjsWITH", tjsWITH: 85};
  $mod.$rtti.$Enum("TJSToken",{minvalue: 0, maxvalue: 85, ordtype: 1, enumtype: this.TJSToken});
  this.FirstKeyword = $mod.TJSToken.tjsBREAK;
  this.LastKeyWord = $mod.TJSToken.tjsWITH;
  this.TokenInfos = ["unknown","EOF","whitespace","Char","String","identifier","number","comment","regular expression","reserved word","&&","&=","(",")","[","]","{","}",",",":",".",";","=",">","<","?","+","-","*","\/","&","|","~","%","^","!","==",">=","<=","<<","<<=","-=","--","%=","\/=","^=","!=","|=","||","+=","++",">>>",">>>=",">>",">>=","===","!==","*=","break","case","catch","continue","default","delete","do","else","false","finally","for","function","if","in","instanceof","new","null","return","switch","this","throw","true","try","typeof","var","void","while","with"];
});
rtl.module("jstree",["System","Classes","SysUtils","jsbase","jstoken"],function () {
  "use strict";
  var $mod = this;
  this.TJSElementFlag = {"0": "elIsConst", elIsConst: 0, "1": "elIsConstValid", elIsConstValid: 1};
  $mod.$rtti.$Enum("TJSElementFlag",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TJSElementFlag});
  $mod.$rtti.$Set("TJSElementFlags",{comptype: $mod.$rtti["TJSElementFlag"]});
  $mod.$rtti.$Class("TJSFunctionBody");
  rtl.createClass($mod,"TJSObject",pas.System.TObject,function () {
  });
  rtl.createClass($mod,"TJSLabelSet",$mod.TJSObject,function () {
    this.$init = function () {
      $mod.TJSObject.$init.call(this);
      this.FCont = false;
      this.FNext = null;
      this.FTarget = 0;
    };
    this.$final = function () {
      this.FNext = undefined;
      $mod.TJSObject.$final.call(this);
    };
  });
  rtl.createClass($mod,"TJSLabel",$mod.TJSObject,function () {
    this.$init = function () {
      $mod.TJSObject.$init.call(this);
      this.FLabelSet = null;
      this.FLocationLine = 0;
      this.FLocationPos = 0;
      this.FLocationSource = "";
      this.FName = "";
      this.FNext = null;
    };
    this.$final = function () {
      this.FLabelSet = undefined;
      this.FNext = undefined;
      $mod.TJSObject.$final.call(this);
    };
  });
  rtl.createClass($mod,"TJSFuncDef",$mod.TJSObject,function () {
    this.$init = function () {
      $mod.TJSObject.$init.call(this);
      this.FBody = null;
      this.FIsEmpty = false;
      this.FName = "";
      this.FParams = null;
    };
    this.$final = function () {
      this.FBody = undefined;
      this.FParams = undefined;
      $mod.TJSObject.$final.call(this);
    };
    this.SetParams = function (AValue) {
      if (this.FParams === AValue) return;
      this.FParams.Assign(AValue);
    };
    this.Create$1 = function () {
      this.FParams = pas.Classes.TStringList.$create("Create$1");
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FBody;
        }, set: function (v) {
          this.p.FBody = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FParams;
        }, set: function (v) {
          this.p.FParams = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSElement",$mod.TJSObject,function () {
    this.$init = function () {
      $mod.TJSObject.$init.call(this);
      this.FFlags = {};
      this.FLine = 0;
      this.FColumn = 0;
      this.FSource = "";
    };
    this.$final = function () {
      this.FFlags = undefined;
      $mod.TJSObject.$final.call(this);
    };
    this.Create$1 = function (ALine, AColumn, ASource) {
      this.FLine = ALine;
      this.FColumn = AColumn;
      this.FSource = ASource;
    };
    this.AssignPosition = function (El) {
      this.FSource = El.FSource;
      this.FLine = El.FLine;
      this.FColumn = El.FColumn;
    };
  });
  $mod.$rtti.$ClassRef("TJSElementClass",{instancetype: $mod.$rtti["TJSElement"]});
  rtl.createClass($mod,"TJSEmptyBlockStatement",$mod.TJSElement,function () {
  });
  rtl.createClass($mod,"TJSEmptyStatement",$mod.TJSElement,function () {
  });
  rtl.createClass($mod,"TJSLiteral",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FValue = null;
    };
    this.$final = function () {
      this.FValue = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Create$1 = function (ALine, AColumn, ASource) {
      this.FValue = pas.jsbase.TJSValue.$create("Create$1");
      $mod.TJSElement.Create$1.call(this,ALine,AColumn,ASource);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FValue;
        }, set: function (v) {
          this.p.FValue = v;
        }});
      pas.System.TObject.Destroy.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TJSRegularExpressionLiteral",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FPattern = null;
      this.FPatternFlags = null;
      this.FArgv = rtl.arraySetLength(null,null,2);
    };
    this.$final = function () {
      this.FPattern = undefined;
      this.FPatternFlags = undefined;
      this.FArgv = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.GetA = function (AIndex) {
      var Result = null;
      Result = this.FArgv[AIndex];
      return Result;
    };
    this.SetA = function (AIndex, AValue) {
      this.FArgv[AIndex] = AValue;
    };
    this.Create$1 = function (ALine, AColumn, ASource) {
      $mod.TJSElement.Create$1.call(this,ALine,AColumn,ASource);
      this.FPattern = pas.jsbase.TJSValue.$create("Create$1");
      this.FPatternFlags = pas.jsbase.TJSValue.$create("Create$1");
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FPattern;
        }, set: function (v) {
          this.p.FPattern = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FPatternFlags;
        }, set: function (v) {
          this.p.FPatternFlags = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSPrimaryExpression",$mod.TJSElement,function () {
  });
  rtl.createClass($mod,"TJSPrimaryExpressionThis",$mod.TJSPrimaryExpression,function () {
  });
  rtl.createClass($mod,"TJSPrimaryExpressionIdent",$mod.TJSPrimaryExpression,function () {
    this.$init = function () {
      $mod.TJSPrimaryExpression.$init.call(this);
      this.FName = "";
    };
  });
  rtl.createClass($mod,"TJSArrayLiteralElement",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FExpr = null;
      this.FElementIndex = 0;
    };
    this.$final = function () {
      this.FExpr = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FExpr;
        }, set: function (v) {
          this.p.FExpr = v;
        }});
      pas.Classes.TCollectionItem.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSArrayLiteralElements",pas.Classes.TCollection,function () {
    this.GetE = function (AIndex) {
      var Result = null;
      Result = this.GetItem(AIndex);
      return Result;
    };
    this.AddElement = function () {
      var Result = null;
      Result = this.Add();
      return Result;
    };
  });
  rtl.createClass($mod,"TJSArrayLiteral",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FElements = null;
    };
    this.$final = function () {
      this.FElements = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Create$1 = function (ALine, AColumn, ASource) {
      $mod.TJSElement.Create$1.call(this,ALine,AColumn,ASource);
      this.FElements = $mod.TJSArrayLiteralElements.$create("Create$1",[$mod.TJSArrayLiteralElement]);
    };
    this.AddElement = function (El) {
      var ArrEl = null;
      ArrEl = this.FElements.AddElement();
      ArrEl.FElementIndex = this.FElements.GetCount() - 1;
      ArrEl.FExpr = El;
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FElements;
        }, set: function (v) {
          this.p.FElements = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSObjectLiteralElement",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FExpr = null;
      this.FName = "";
    };
    this.$final = function () {
      this.FExpr = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FExpr;
        }, set: function (v) {
          this.p.FExpr = v;
        }});
      pas.Classes.TCollectionItem.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSObjectLiteralElements",pas.Classes.TCollection,function () {
    this.GetE = function (AIndex) {
      var Result = null;
      Result = this.GetItem(AIndex);
      return Result;
    };
    this.AddElement = function () {
      var Result = null;
      Result = this.Add();
      return Result;
    };
  });
  rtl.createClass($mod,"TJSObjectLiteral",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FElements = null;
    };
    this.$final = function () {
      this.FElements = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Create$1 = function (ALine, AColumn, ASource) {
      $mod.TJSElement.Create$1.call(this,ALine,AColumn,ASource);
      this.FElements = $mod.TJSObjectLiteralElements.$create("Create$1",[$mod.TJSObjectLiteralElement]);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FElements;
        }, set: function (v) {
          this.p.FElements = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSArguments",$mod.TJSArrayLiteral,function () {
  });
  rtl.createClass($mod,"TJSMemberExpression",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FMexpr = null;
    };
    this.$final = function () {
      this.FMexpr = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FMexpr;
        }, set: function (v) {
          this.p.FMexpr = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSNewMemberExpression",$mod.TJSMemberExpression,function () {
    this.$init = function () {
      $mod.TJSMemberExpression.$init.call(this);
      this.FArgs = null;
    };
    this.$final = function () {
      this.FArgs = undefined;
      $mod.TJSMemberExpression.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FArgs;
        }, set: function (v) {
          this.p.FArgs = v;
        }});
      $mod.TJSMemberExpression.Destroy.call(this);
    };
    this.AddArg = function (El) {
      if (this.FArgs === null) this.FArgs = $mod.TJSArguments.$create("Create$1",[this.FLine,this.FColumn,this.FSource]);
      this.FArgs.FElements.AddElement().FExpr = El;
    };
  });
  rtl.createClass($mod,"TJSDotMemberExpression",$mod.TJSMemberExpression,function () {
    this.$init = function () {
      $mod.TJSMemberExpression.$init.call(this);
      this.FName = "";
    };
  });
  rtl.createClass($mod,"TJSBracketMemberExpression",$mod.TJSMemberExpression,function () {
    this.$init = function () {
      $mod.TJSMemberExpression.$init.call(this);
      this.FName = null;
    };
    this.$final = function () {
      this.FName = undefined;
      $mod.TJSMemberExpression.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FName;
        }, set: function (v) {
          this.p.FName = v;
        }});
      $mod.TJSMemberExpression.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSCallExpression",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FArgs = null;
      this.FExpr = null;
    };
    this.$final = function () {
      this.FArgs = undefined;
      this.FExpr = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FExpr;
        }, set: function (v) {
          this.p.FExpr = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FArgs;
        }, set: function (v) {
          this.p.FArgs = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.AddArg = function (El) {
      this.FArgs.FElements.AddElement().FExpr = El;
    };
  });
  rtl.createClass($mod,"TJSUnary",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FA = null;
    };
    this.$final = function () {
      this.FA = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsUnknown;
      return Result;
    };
    this.PostFixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsUnknown;
      return Result;
    };
    this.PrefixOperator = function () {
      var Result = "";
      var T = 0;
      T = this.PrefixOperatorToken();
      if (T === pas.jstoken.TJSToken.tjsUnknown) {
        Result = ""}
       else {
        Result = pas.jstoken.TokenInfos[T];
        if (T in rtl.createSet(pas.jstoken.TJSToken.tjsTYPEOF,pas.jstoken.TJSToken.tjsVOID,pas.jstoken.TJSToken.tjsDELETE,pas.jstoken.TJSToken.tjsTHROW)) Result = Result + " ";
      };
      return Result;
    };
    this.PostFixOperator = function () {
      var Result = "";
      var T = 0;
      T = this.PostFixOperatorToken();
      if (T === pas.jstoken.TJSToken.tjsUnknown) {
        Result = ""}
       else Result = pas.jstoken.TokenInfos[T];
      return Result;
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FA;
        }, set: function (v) {
          this.p.FA = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  $mod.$rtti.$ClassRef("TJSUnaryClass",{instancetype: $mod.$rtti["TJSUnary"]});
  rtl.createClass($mod,"TJSVariableStatement",$mod.TJSUnary,function () {
  });
  rtl.createClass($mod,"TJSExpressionStatement",$mod.TJSUnary,function () {
  });
  rtl.createClass($mod,"TJSThrowStatement",$mod.TJSUnary,function () {
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsTHROW;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryExpression",$mod.TJSUnary,function () {
  });
  rtl.createClass($mod,"TJSUnaryDeleteExpression",$mod.TJSUnaryExpression,function () {
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsDELETE;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryVoidExpression",$mod.TJSUnaryExpression,function () {
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsVOID;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryTypeOfExpression",$mod.TJSUnaryExpression,function () {
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsTYPEOF;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryPrePlusPlusExpression",$mod.TJSUnaryExpression,function () {
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsPLUSPLUS;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryPreMinusMinusExpression",$mod.TJSUnaryExpression,function () {
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsMINUSMINUS;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryPlusExpression",$mod.TJSUnaryExpression,function () {
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsPLUS;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryMinusExpression",$mod.TJSUnaryExpression,function () {
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsMINUS;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryInvExpression",$mod.TJSUnaryExpression,function () {
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsInv;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryNotExpression",$mod.TJSUnaryExpression,function () {
    this.PrefixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsNot;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryPostPlusPlusExpression",$mod.TJSUnaryExpression,function () {
    this.PostFixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsPLUSPLUS;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSUnaryPostMinusMinusExpression",$mod.TJSUnaryExpression,function () {
    this.PostFixOperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsMINUSMINUS;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSBinary",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FA = null;
      this.FB = null;
    };
    this.$final = function () {
      this.FA = undefined;
      this.FB = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FB;
        }, set: function (v) {
          this.p.FB = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FA;
        }, set: function (v) {
          this.p.FA = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  $mod.$rtti.$ClassRef("TJSBinaryClass",{instancetype: $mod.$rtti["TJSBinary"]});
  rtl.createClass($mod,"TJSStatementList",$mod.TJSBinary,function () {
  });
  rtl.createClass($mod,"TJSVariableDeclarationList",$mod.TJSBinary,function () {
  });
  rtl.createClass($mod,"TJSWithStatement",$mod.TJSBinary,function () {
  });
  rtl.createClass($mod,"TJSBinaryExpression",$mod.TJSBinary,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsUnknown;
      return Result;
    };
    this.OperatorString = function () {
      var Result = "";
      var T = 0;
      T = this.OperatorToken();
      if (T !== pas.jstoken.TJSToken.tjsUnknown) {
        Result = pas.jstoken.TokenInfos[T];
      } else Result = "";
      return Result;
    };
    this.AllowCompact = function () {
      var Result = false;
      Result = true;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSLogicalOrExpression",$mod.TJSBinaryExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsOROR;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSLogicalAndExpression",$mod.TJSBinaryExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsANDAND;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSBitwiseAndExpression",$mod.TJSBinaryExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsAnd;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSBitwiseOrExpression",$mod.TJSBinaryExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsOR;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSBitwiseXOrExpression",$mod.TJSBinaryExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsXOR;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSEqualityExpression",$mod.TJSBinaryExpression,function () {
  });
  rtl.createClass($mod,"TJSEqualityExpressionEQ",$mod.TJSEqualityExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSEqualityExpressionNE",$mod.TJSEqualityExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsNE;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSEqualityExpressionSEQ",$mod.TJSEqualityExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsSEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSEqualityExpressionSNE",$mod.TJSEqualityExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsSNE;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSRelationalExpression",$mod.TJSBinaryExpression,function () {
  });
  rtl.createClass($mod,"TJSRelationalExpressionLT",$mod.TJSRelationalExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsLT;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSRelationalExpressionGT",$mod.TJSRelationalExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsGT;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSRelationalExpressionLE",$mod.TJSRelationalExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsLE;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSRelationalExpressionGE",$mod.TJSRelationalExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsGE;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSRelationalExpressionIn",$mod.TJSRelationalExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsIN;
      return Result;
    };
    this.AllowCompact = function () {
      var Result = false;
      Result = false;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSRelationalExpressionInstanceOf",$mod.TJSRelationalExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsINSTANCEOF;
      return Result;
    };
    this.AllowCompact = function () {
      var Result = false;
      Result = false;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSShiftExpression",$mod.TJSBinaryExpression,function () {
  });
  rtl.createClass($mod,"TJSLShiftExpression",$mod.TJSShiftExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsLSHIFT;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSRShiftExpression",$mod.TJSShiftExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsRSHIFT;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSURShiftExpression",$mod.TJSShiftExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsURSHIFT;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSAdditiveExpression",$mod.TJSBinaryExpression,function () {
  });
  rtl.createClass($mod,"TJSAdditiveExpressionPlus",$mod.TJSAdditiveExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsPLUS;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSAdditiveExpressionMinus",$mod.TJSAdditiveExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsMINUS;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSMultiplicativeExpression",$mod.TJSBinaryExpression,function () {
  });
  rtl.createClass($mod,"TJSMultiplicativeExpressionMul",$mod.TJSMultiplicativeExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsMUL;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSMultiplicativeExpressionDiv",$mod.TJSMultiplicativeExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsDIV;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSMultiplicativeExpressionMod",$mod.TJSMultiplicativeExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsMod;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSCommaExpression",$mod.TJSBinaryExpression,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsCOMMA;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSConditionalExpression",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FA = null;
      this.FB = null;
      this.FC = null;
    };
    this.$final = function () {
      this.FA = undefined;
      this.FB = undefined;
      this.FC = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FB;
        }, set: function (v) {
          this.p.FB = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FA;
        }, set: function (v) {
          this.p.FA = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FC;
        }, set: function (v) {
          this.p.FC = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSAssignStatement",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FExpr = null;
      this.FLHS = null;
    };
    this.$final = function () {
      this.FExpr = undefined;
      this.FLHS = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FLHS;
        }, set: function (v) {
          this.p.FLHS = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FExpr;
        }, set: function (v) {
          this.p.FExpr = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsUnknown;
      return Result;
    };
    this.OperatorString = function () {
      var Result = "";
      var t = 0;
      t = this.OperatorToken();
      if (pas.jstoken.TJSToken.tjsUnknown !== t) {
        Result = pas.jstoken.TokenInfos[t]}
       else Result = "";
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("TJSAssignStatementClass",{instancetype: $mod.$rtti["TJSAssignStatement"]});
  rtl.createClass($mod,"TJSSimpleAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsASSIGN;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSMulEqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsMULEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSDivEqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsDIVEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSModEqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsMODEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSAddEqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsPLUSEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSSubEqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsMINUSEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSLShiftEqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsLSHIFTEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSRShiftEqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsRSHIFTEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSURShiftEqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsURSHIFTEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSANDEqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsANDEQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSOREqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsOREQ;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSXOREqAssignStatement",$mod.TJSAssignStatement,function () {
    this.OperatorToken = function () {
      var Result = 0;
      Result = pas.jstoken.TJSToken.tjsXOREq;
      return Result;
    };
  });
  rtl.createClass($mod,"TJSVarDeclaration",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FInit = null;
      this.FName = "";
    };
    this.$final = function () {
      this.FInit = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FInit;
        }, set: function (v) {
          this.p.FInit = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSIfStatement",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FBFalse = null;
      this.FBTrue = null;
      this.FCond = null;
    };
    this.$final = function () {
      this.FBFalse = undefined;
      this.FBTrue = undefined;
      this.FCond = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FCond;
        }, set: function (v) {
          this.p.FCond = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FBTrue;
        }, set: function (v) {
          this.p.FBTrue = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FBFalse;
        }, set: function (v) {
          this.p.FBFalse = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSTargetStatement",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FTarget = 0;
      this.FTargetName = "";
    };
  });
  rtl.createClass($mod,"TJSBodyStatement",$mod.TJSTargetStatement,function () {
    this.$init = function () {
      $mod.TJSTargetStatement.$init.call(this);
      this.FBody = null;
    };
    this.$final = function () {
      this.FBody = undefined;
      $mod.TJSTargetStatement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FBody;
        }, set: function (v) {
          this.p.FBody = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSCondLoopStatement",$mod.TJSBodyStatement,function () {
    this.$init = function () {
      $mod.TJSBodyStatement.$init.call(this);
      this.FCond = null;
    };
    this.$final = function () {
      this.FCond = undefined;
      $mod.TJSBodyStatement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FCond;
        }, set: function (v) {
          this.p.FCond = v;
        }});
      $mod.TJSBodyStatement.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSWhileStatement",$mod.TJSCondLoopStatement,function () {
  });
  rtl.createClass($mod,"TJSDoWhileStatement",$mod.TJSWhileStatement,function () {
  });
  rtl.createClass($mod,"TJSForStatement",$mod.TJSCondLoopStatement,function () {
    this.$init = function () {
      $mod.TJSCondLoopStatement.$init.call(this);
      this.FIncr = null;
      this.FInit = null;
    };
    this.$final = function () {
      this.FIncr = undefined;
      this.FInit = undefined;
      $mod.TJSCondLoopStatement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FIncr;
        }, set: function (v) {
          this.p.FIncr = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FInit;
        }, set: function (v) {
          this.p.FInit = v;
        }});
      $mod.TJSCondLoopStatement.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSForInStatement",$mod.TJSBodyStatement,function () {
    this.$init = function () {
      $mod.TJSBodyStatement.$init.call(this);
      this.FLhs = null;
      this.FList = null;
    };
    this.$final = function () {
      this.FLhs = undefined;
      this.FList = undefined;
      $mod.TJSBodyStatement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FList;
        }, set: function (v) {
          this.p.FList = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FLhs;
        }, set: function (v) {
          this.p.FLhs = v;
        }});
      $mod.TJSBodyStatement.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSContinueStatement",$mod.TJSTargetStatement,function () {
  });
  rtl.createClass($mod,"TJSBreakStatement",$mod.TJSTargetStatement,function () {
  });
  rtl.createClass($mod,"TJSReturnStatement",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FExpr = null;
    };
    this.$final = function () {
      this.FExpr = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FExpr;
        }, set: function (v) {
          this.p.FExpr = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSCaseElement",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FBody = null;
      this.FExpr = null;
    };
    this.$final = function () {
      this.FBody = undefined;
      this.FExpr = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FExpr;
        }, set: function (v) {
          this.p.FExpr = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FBody;
        }, set: function (v) {
          this.p.FBody = v;
        }});
      pas.Classes.TCollectionItem.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSCaseElements",pas.Classes.TCollection,function () {
    this.GetC = function (AIndex) {
      var Result = null;
      Result = this.GetItem(AIndex);
      return Result;
    };
    this.AddCase = function () {
      var Result = null;
      Result = this.Add();
      return Result;
    };
  });
  rtl.createClass($mod,"TJSSwitchStatement",$mod.TJSTargetStatement,function () {
    this.$init = function () {
      $mod.TJSTargetStatement.$init.call(this);
      this.FCases = null;
      this.FCond = null;
      this.FDefault = null;
    };
    this.$final = function () {
      this.FCases = undefined;
      this.FCond = undefined;
      this.FDefault = undefined;
      $mod.TJSTargetStatement.$final.call(this);
    };
    this.Create$1 = function (ALine, AColumn, ASource) {
      $mod.TJSElement.Create$1.call(this,ALine,AColumn,ASource);
      this.FCases = $mod.TJSCaseElements.$create("Create$1",[$mod.TJSCaseElement]);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FCases;
        }, set: function (v) {
          this.p.FCases = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FCond;
        }, set: function (v) {
          this.p.FCond = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSLabeledStatement",$mod.TJSUnary,function () {
    this.$init = function () {
      $mod.TJSUnary.$init.call(this);
      this.FLabel = null;
      this.FTarget = 0;
    };
    this.$final = function () {
      this.FLabel = undefined;
      $mod.TJSUnary.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FLabel;
        }, set: function (v) {
          this.p.FLabel = v;
        }});
      $mod.TJSUnary.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSTryStatement",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FBCatch = null;
      this.FBFinally = null;
      this.FBlock = null;
      this.FIdent = "";
    };
    this.$final = function () {
      this.FBCatch = undefined;
      this.FBFinally = undefined;
      this.FBlock = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FBlock;
        }, set: function (v) {
          this.p.FBlock = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FBCatch;
        }, set: function (v) {
          this.p.FBCatch = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FBFinally;
        }, set: function (v) {
          this.p.FBFinally = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSTryCatchFinallyStatement",$mod.TJSTryStatement,function () {
  });
  rtl.createClass($mod,"TJSTryCatchStatement",$mod.TJSTryStatement,function () {
  });
  rtl.createClass($mod,"TJSTryFinallyStatement",$mod.TJSTryStatement,function () {
  });
  rtl.createClass($mod,"TJSFunctionDeclarationStatement",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FFuncDef = null;
    };
    this.$final = function () {
      this.FFuncDef = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FFuncDef;
        }, set: function (v) {
          this.p.FFuncDef = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSFunctionBody",$mod.TJSUnary,function () {
    this.$init = function () {
      $mod.TJSUnary.$init.call(this);
      this.FIsProgram = false;
    };
  });
  rtl.createClass($mod,"TJSElementNode",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FNode = null;
    };
    this.$final = function () {
      this.FNode = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FNode;
        }, set: function (v) {
          this.p.FNode = v;
        }});
      pas.Classes.TCollectionItem.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TJSElementNodes",pas.Classes.TCollection,function () {
    this.GetN = function (AIndex) {
      var Result = null;
      Result = this.GetItem(AIndex);
      return Result;
    };
    this.AddNode = function () {
      var Result = null;
      Result = this.Add();
      return Result;
    };
  });
  rtl.createClass($mod,"TJSSourceElements",$mod.TJSElement,function () {
    this.$init = function () {
      $mod.TJSElement.$init.call(this);
      this.FFunctions = null;
      this.FStatements = null;
      this.FVars = null;
    };
    this.$final = function () {
      this.FFunctions = undefined;
      this.FStatements = undefined;
      this.FVars = undefined;
      $mod.TJSElement.$final.call(this);
    };
    this.Create$1 = function (ALine, AColumn, ASource) {
      $mod.TJSElement.Create$1.call(this,ALine,AColumn,ASource);
      this.FStatements = $mod.TJSElementNodes.$create("Create$1",[$mod.TJSElementNode]);
      this.FFunctions = $mod.TJSElementNodes.$create("Create$1",[$mod.TJSElementNode]);
      this.FVars = $mod.TJSElementNodes.$create("Create$1",[$mod.TJSElementNode]);
    };
    this.Destroy = function () {
      var i = 0;
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FStatements;
        }, set: function (v) {
          this.p.FStatements = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FFunctions;
        }, set: function (v) {
          this.p.FFunctions = v;
        }});
      for (var $l1 = 0, $end2 = this.FVars.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.FVars.GetN(i).FNode = null;
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FVars;
        }, set: function (v) {
          this.p.FVars = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
});
rtl.module("jswriter",["System","JS","SysUtils","jsbase","jstree"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$Class("TTextWriter");
  $mod.$rtti.$MethodVar("TTextWriterWriting",{procsig: rtl.newTIProcSig([["Sender",$mod.$rtti["TTextWriter"]]]), methodkind: 0});
  rtl.createClass($mod,"TTextWriter",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FCurElement = null;
      this.FCurLine = 0;
      this.FCurColumn = 0;
      this.FOnWriting = null;
    };
    this.$final = function () {
      this.FCurElement = undefined;
      this.FOnWriting = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetCurElement = function (AValue) {
      this.FCurElement = AValue;
    };
    this.Writing = function () {
      if (this.FOnWriting != null) this.FOnWriting(this);
    };
    this.Create$1 = function () {
      this.FCurLine = 1;
      this.FCurColumn = 1;
    };
    this.Write = function (S) {
      var Result = 0;
      var c = "";
      var l = 0;
      var p = 0;
      if (S === "") return Result;
      this.Writing();
      Result = this.DoWrite(S);
      l = S.length;
      p = 1;
      while (p <= l) {
        c = S.charAt(p - 1);
        var $tmp1 = c;
        if (($tmp1 === "\n") || ($tmp1 === "\r")) {
          this.FCurColumn = 1;
          this.FCurLine += 1;
          p += 1;
          if (((p <= l) && (S.charCodeAt(p - 1) in rtl.createSet(10,13))) && (c !== S.charAt(p - 1))) p += 1;
        } else {
          this.FCurColumn += 1;
          p += 1;
        };
      };
      return Result;
    };
    this.WriteLn = function (S) {
      var Result = 0;
      Result = this.Write(S) + this.Write(pas.System.sLineBreak);
      return Result;
    };
    this.Write$1 = function (Fmt, Args) {
      var Result = 0;
      Result = this.Write(pas.SysUtils.Format(Fmt,Args));
      return Result;
    };
    this.WriteLn$1 = function (Fmt, Args) {
      var Result = 0;
      Result = this.WriteLn(pas.SysUtils.Format(Fmt,Args));
      return Result;
    };
    this.Write$2 = function (Args) {
      var Result = 0;
      var I = 0;
      var V = undefined;
      var S = "";
      Result = 0;
      for (var $l1 = 0, $end2 = rtl.length(Args) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        V = Args[I];
        S = "";
        var $tmp3 = typeof(V);
        if ($tmp3 === "boolean") {
          if (V) {
            S = "true"}
           else S = "false"}
         else if ($tmp3 === "number") {
          if (pas.JS.isInteger(V)) {
            S = "" + Math.floor(V)}
           else S = rtl.floatToStr(rtl.getNumber(V))}
         else if ($tmp3 === "string") {
          S = "" + V}
         else {
          continue;
        };
        Result = Result + this.Write(S);
      };
      return Result;
    };
    this.WriteLn$2 = function (Args) {
      var Result = 0;
      Result = this.Write$2(Args) + this.WriteLn("");
      return Result;
    };
  });
  $mod.$rtti.$DynArray("TBufferWriter_Buffer",{eltype: rtl.string});
  rtl.createClass($mod,"TBufferWriter",$mod.TTextWriter,function () {
    this.$init = function () {
      $mod.TTextWriter.$init.call(this);
      this.FBufPos = 0;
      this.FCapacity = 0;
      this.FBuffer = [];
    };
    this.$final = function () {
      this.FBuffer = undefined;
      $mod.TTextWriter.$final.call(this);
    };
    this.GetAsString = function () {
      var Result = "";
      if (this.FBufPos < rtl.length(this.FBuffer)) this.FBuffer.length = this.FBufPos;
      Result = this.FBuffer.join("");
      return Result;
    };
    this.GetBufferLength = function () {
      var Result = 0;
      Result = this.FBufPos;
      return Result;
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = rtl.length(this.FBuffer);
      return Result;
    };
    this.SetAsString = function (AValue) {
      this.FBuffer = rtl.arraySetLength(this.FBuffer,"",0);
      this.FCapacity = 0;
      this.FBufPos = 0;
      this.DoWrite(AValue);
    };
    this.SetCapacity = function (AValue) {
      if (this.FCapacity === AValue) return;
      this.FBuffer = rtl.arraySetLength(this.FBuffer,"",AValue);
      if (this.FBufPos > this.GetCapacity()) this.FBufPos = this.GetCapacity();
    };
    this.DoWrite = function (S) {
      var Result = 0;
      Result = S.length * 2;
      if (Result === 0) return Result;
      this.FBuffer.push(S);
      this.FBufPos += 1;
      this.FCapacity = this.FBufPos;
      return Result;
    };
    this.Create$2 = function (ACapacity) {
      $mod.TTextWriter.Create$1.call(this);
      this.SetCapacity(ACapacity);
    };
  });
  this.TJSEscapeQuote = {"0": "jseqSingle", jseqSingle: 0, "1": "jseqDouble", jseqDouble: 1, "2": "jseqBoth", jseqBoth: 2};
  $mod.$rtti.$Enum("TJSEscapeQuote",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TJSEscapeQuote});
  this.TWriteOption = {"0": "woCompact", woCompact: 0, "1": "woTabIndent", woTabIndent: 1, "2": "woEmptyStatementAsComment", woEmptyStatementAsComment: 2, "3": "woQuoteElementNames", woQuoteElementNames: 3, "4": "woCompactArrayLiterals", woCompactArrayLiterals: 4, "5": "woCompactObjectLiterals", woCompactObjectLiterals: 5, "6": "woCompactArguments", woCompactArguments: 6};
  $mod.$rtti.$Enum("TWriteOption",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TWriteOption});
  $mod.$rtti.$Set("TWriteOptions",{comptype: $mod.$rtti["TWriteOption"]});
  rtl.createClass($mod,"TJSWriter",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FCurIndent = 0;
      this.FFreeWriter = false;
      this.FIndentChar = "";
      this.FIndentSize = 0;
      this.FLastChar = "";
      this.FLinePos = 0;
      this.FOptions = {};
      this.FSkipCurlyBrackets = false;
      this.FSkipRoundBrackets = false;
      this.FWriter = null;
    };
    this.$final = function () {
      this.FOptions = undefined;
      this.FWriter = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetUseUTF8 = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.SetOptions = function (AValue) {
      if (rtl.eqSet(this.FOptions,AValue)) return;
      this.FOptions = rtl.refSet(AValue);
      if ($mod.TWriteOption.woTabIndent in this.FOptions) {
        this.FIndentChar = "\t"}
       else this.FIndentChar = " ";
    };
    this.Error = function (Msg) {
      throw $mod.EJSWriter.$create("Create$1",[Msg]);
    };
    this.Error$1 = function (Fmt, Args) {
      throw $mod.EJSWriter.$create("CreateFmt",[Fmt,Args]);
    };
    this.WriteIndent = function () {
      if ((this.FLinePos === 0) && (this.FCurIndent > 0)) {
        this.FLinePos = this.FWriter.Write(pas.System.StringOfChar(this.FIndentChar,this.FCurIndent));
        this.FLastChar = this.FIndentChar;
      };
    };
    this.Write = function (S) {
      this.WriteIndent();
      if (S === "") return;
      this.FLinePos = this.FLinePos + this.FWriter.Write(S);
      this.FLastChar = S.charAt(S.length - 1);
    };
    this.WriteLn = function (S) {
      this.WriteIndent();
      this.FWriter.WriteLn(S);
      this.FLastChar = "\n";
      this.FLinePos = 0;
    };
    var TabWidth = 4;
    this.WriteValue = function (V) {
      var Self = this;
      function GetLineIndent(S, p) {
        var Result = 0;
        var h = 0;
        var l = 0;
        h = p.get();
        l = S.length;
        Result = 0;
        while (h <= l) {
          var $tmp1 = S.charAt(h - 1);
          if ($tmp1 === "\t") {
            Result = Result + (4 - (Result % 4))}
           else if ($tmp1 === " ") {
            Result += 1}
           else {
            break;
          };
          h += 1;
        };
        p.set(h);
        return Result;
      };
      function SkipToNextLineStart(S, p) {
        var Result = 0;
        var l = 0;
        l = S.length;
        while (p <= l) {
          var $tmp1 = S.charAt(p - 1);
          if (($tmp1 === "\n") || ($tmp1 === "\r")) {
            if (((p < l) && (S.charCodeAt((p + 1) - 1) in rtl.createSet(10,13))) && (S.charAt(p - 1) !== S.charAt((p + 1) - 1))) {
              p += 2}
             else p += 1;
            break;
          } else {
            p += 1;
          };
        };
        Result = p;
        return Result;
      };
      var S = "";
      var S2 = "";
      var JS = "";
      var p = 0;
      var StartP = 0;
      var MinIndent = 0;
      var CurLineIndent = 0;
      var j = 0;
      var Exp = 0;
      var Code = 0;
      var i = 0;
      var D = 0.0;
      if (V.FCustomValue !== "") {
        JS = V.FCustomValue;
        if (JS === "") return;
        p = SkipToNextLineStart(JS,1);
        if (p > JS.length) {
          Self.Write(JS);
          return;
        };
        MinIndent = -1;
        do {
          CurLineIndent = GetLineIndent(JS,{get: function () {
              return p;
            }, set: function (v) {
              p = v;
            }});
          if ((MinIndent < 0) || (MinIndent > CurLineIndent)) MinIndent = CurLineIndent;
          p = SkipToNextLineStart(JS,p);
        } while (!(p > JS.length));
        p = 1;
        GetLineIndent(JS,{get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }});
        do {
          StartP = p;
          p = SkipToNextLineStart(JS,StartP);
          Self.Write(pas.System.Copy(JS,StartP,p - StartP));
          if (p > JS.length) break;
          CurLineIndent = GetLineIndent(JS,{get: function () {
              return p;
            }, set: function (v) {
              p = v;
            }});
          Self.Write(pas.System.StringOfChar(Self.FIndentChar,(Self.FCurIndent + CurLineIndent) - MinIndent));
        } while (!false);
        return;
      };
      var $tmp1 = V.FValueType;
      if ($tmp1 === pas.jsbase.TJSType.jstUNDEFINED) {
        S = "undefined"}
       else if ($tmp1 === pas.jsbase.TJSType.jstNull) {
        S = "null"}
       else if ($tmp1 === pas.jsbase.TJSType.jstBoolean) {
        if (V.GetAsBoolean()) {
          S = "true"}
         else S = "false"}
       else if ($tmp1 === pas.jsbase.TJSType.jstString) {
        JS = V.GetAsString();
        if (pas.System.Pos('"',JS) > 0) {
          JS = ("'" + Self.EscapeString(JS,$mod.TJSEscapeQuote.jseqSingle)) + "'"}
         else JS = ('"' + Self.EscapeString(JS,$mod.TJSEscapeQuote.jseqDouble)) + '"';
        Self.Write(JS);
        return;
      } else if ($tmp1 === pas.jsbase.TJSType.jstNumber) {
        if (((pas.System.Frac(V.GetAsNumber()) === 0) && (V.GetAsNumber() >= -4503599627370496)) && (V.GetAsNumber() <= 4503599627370495)) {
          S = "" + Math.round(V.GetAsNumber());
        } else {
          S = rtl.floatToStr(V.GetAsNumber());
          if (S.charAt(0) === " ") pas.System.Delete({get: function () {
              return S;
            }, set: function (v) {
              S = v;
            }},1,1);
          i = pas.System.Pos("E",S);
          if (i > 2) {
            j = i - 2;
            var $tmp2 = S.charAt(j - 1);
            if ($tmp2 === "0") {
              while ((j > 1) && (S.charAt(j - 1) === "0")) j -= 1;
              if (S.charAt(j - 1) === ".") j += 1;
              S2 = pas.SysUtils.LeftStr(S,j) + pas.System.Copy(S,i,S.length);
              pas.System.val$8(S2,{get: function () {
                  return D;
                }, set: function (v) {
                  D = v;
                }},{get: function () {
                  return Code;
                }, set: function (v) {
                  Code = v;
                }});
              if ((Code === 0) && (D === V.GetAsNumber())) S = S2;
            } else if ($tmp2 === "9") {
              while ((j > 1) && (S.charAt(j - 1) === "9")) j -= 1;
              S2 = pas.SysUtils.LeftStr(S,j) + pas.System.Copy(S,i,S.length);
              if (S.charAt(j - 1) === ".") pas.System.Insert("0",{get: function () {
                  return S2;
                }, set: function (v) {
                  S2 = v;
                }},j + 1);
              do {
                var $tmp3 = S2.charAt(j - 1);
                if (($tmp3 >= "0") && ($tmp3 <= "8")) {
                  S2 = rtl.setCharAt(S2,j - 1,String.fromCharCode(S2.charCodeAt(j - 1) + 1));
                  break;
                } else if ($tmp3 === "9") {
                  S2 = rtl.setCharAt(S2,j - 1,"0")}
                 else if ($tmp3 === ".") ;
                j -= 1;
                if ((j === 0) || !(S2.charCodeAt(j - 1) in rtl.createSet(null,48,57,46))) {
                  pas.System.val$6(pas.System.Copy(S,i + 1,S.length),{get: function () {
                      return Exp;
                    }, set: function (v) {
                      Exp = v;
                    }},{get: function () {
                      return Code;
                    }, set: function (v) {
                      Code = v;
                    }});
                  if (Code === 0) {
                    S2 = "1E" + pas.SysUtils.IntToStr(Exp + 1);
                    if (S.charAt(0) === "-") S2 = "-" + S2;
                  };
                  break;
                };
              } while (!false);
              pas.System.val$8(S2,{get: function () {
                  return D;
                }, set: function (v) {
                  D = v;
                }},{get: function () {
                  return Code;
                }, set: function (v) {
                  Code = v;
                }});
              if ((Code === 0) && (D === V.GetAsNumber())) S = S2;
            };
          };
          i = pas.System.Pos("E",S);
          if (i > 0) {
            pas.System.val$6(pas.System.Copy(S,i + 1,S.length),{get: function () {
                return Exp;
              }, set: function (v) {
                Exp = v;
              }},{get: function () {
                return Code;
              }, set: function (v) {
                Code = v;
              }});
            if (Code === 0) {
              if (Exp === 0) {
                pas.System.Delete({get: function () {
                    return S;
                  }, set: function (v) {
                    S = v;
                  }},i,S.length)}
               else if ((Exp >= -6) && (Exp <= 6)) {
                pas.System.Delete({get: function () {
                    return S;
                  }, set: function (v) {
                    S = v;
                  }},i,S.length);
                j = pas.System.Pos(".",S);
                if (j > 0) {
                  pas.System.Delete({get: function () {
                      return S;
                    }, set: function (v) {
                      S = v;
                    }},j,1)}
                 else {
                  j = 1;
                  while (!(S.charCodeAt(j - 1) in rtl.createSet(null,48,57))) j += 1;
                };
                if (Exp < 0) {
                  while (Exp < 0) {
                    if ((j > 1) && (S.charCodeAt((j - 1) - 1) in rtl.createSet(null,48,57))) {
                      j -= 1}
                     else pas.System.Insert("0",{get: function () {
                        return S;
                      }, set: function (v) {
                        S = v;
                      }},j);
                    Exp += 1;
                  };
                  pas.System.Insert(".",{get: function () {
                      return S;
                    }, set: function (v) {
                      S = v;
                    }},j);
                  if ((j === 1) || !(S.charCodeAt((j - 1) - 1) in rtl.createSet(null,48,57))) pas.System.Insert("0",{get: function () {
                      return S;
                    }, set: function (v) {
                      S = v;
                    }},j);
                  if (S.charAt(S.length - 1) === "0") pas.System.Delete({get: function () {
                      return S;
                    }, set: function (v) {
                      S = v;
                    }},S.length,1);
                } else {
                  while (Exp > 0) {
                    if ((j <= S.length) && (S.charCodeAt(j - 1) in rtl.createSet(null,48,57))) {
                      j += 1}
                     else pas.System.Insert("0",{get: function () {
                        return S;
                      }, set: function (v) {
                        S = v;
                      }},j);
                    Exp -= 1;
                  };
                  if (j <= S.length) pas.System.Insert(".",{get: function () {
                      return S;
                    }, set: function (v) {
                      S = v;
                    }},j);
                };
              } else {
                S = pas.SysUtils.LeftStr(S,i) + pas.SysUtils.IntToStr(Exp);
              };
            };
          };
        }}
       else if ($tmp1 === pas.jsbase.TJSType.jstObject) {}
      else if ($tmp1 === pas.jsbase.TJSType.jstReference) {}
      else if ($tmp1 === pas.jsbase.TJSType.jstCompletion) ;
      if (S === "") return;
      var $tmp4 = S.charAt(0);
      if ($tmp4 === "+") {
        if (Self.FLastChar === "+") Self.Write(" ")}
       else if ($tmp4 === "-") if (Self.FLastChar === "-") Self.Write(" ");
      Self.Write(S);
    };
    this.WriteRegularExpressionLiteral = function (El) {
      this.Write("\/");
      this.Write(this.EscapeString(El.FPattern.GetAsString(),$mod.TJSEscapeQuote.jseqBoth));
      this.Write("\/");
      if (El.FPatternFlags != null) this.Write(this.EscapeString(El.FPatternFlags.GetAsString(),$mod.TJSEscapeQuote.jseqBoth));
    };
    this.WriteVariableStatement = function (El) {
      this.Write("var ");
      this.FSkipRoundBrackets = true;
      this.WriteJS(El.FA);
    };
    this.WriteEmptyBlockStatement = function (El) {
      if (El === null) ;
      if ($mod.TWriteOption.woCompact in this.FOptions) {
        this.Write("{}")}
       else {
        this.WriteLn("{");
        this.Write("}");
      };
    };
    this.WriteEmptyStatement = function (El) {
      if (El === null) ;
      if ($mod.TWriteOption.woEmptyStatementAsComment in this.FOptions) this.Write("\/* Empty statement *\/");
    };
    this.WriteLiteral = function (El) {
      this.WriteValue(El.FValue);
    };
    this.WriteArrayLiteral = function (El) {
      var Chars = ["[]","()"];
      var i = 0;
      var C = 0;
      var isArgs = false;
      var WC = false;
      var MultiLine = false;
      var BC = "";
      isArgs = pas.jstree.TJSArguments.isPrototypeOf(El);
      BC = Chars[+isArgs];
      C = El.FElements.GetCount() - 1;
      if (C === -1) {
        this.Write(BC);
        return;
      };
      WC = (($mod.TWriteOption.woCompact in this.FOptions) || (!isArgs && ($mod.TWriteOption.woCompactArrayLiterals in this.FOptions))) || (isArgs && ($mod.TWriteOption.woCompactArguments in this.FOptions));
      MultiLine = !WC && (C > 4);
      if (MultiLine) {
        this.WriteLn(BC.charAt(0));
        this.Indent();
      } else this.Write(BC.charAt(0));
      for (var $l1 = 0, $end2 = C; $l1 <= $end2; $l1++) {
        i = $l1;
        this.FSkipRoundBrackets = true;
        this.WriteJS(El.FElements.GetE(i).FExpr);
        if (i < C) if (WC) {
          this.Write(",")}
         else if (MultiLine) {
          this.WriteLn(",")}
         else this.Write(", ");
      };
      if (MultiLine) {
        this.WriteLn("");
        this.Undent();
      };
      this.FWriter.SetCurElement(El);
      this.Write(BC.charAt(1));
    };
    this.WriteObjectLiteral = function (El) {
      var i = 0;
      var C = 0;
      var QE = false;
      var WC = false;
      var S = "";
      var Prop = null;
      C = El.FElements.GetCount() - 1;
      QE = $mod.TWriteOption.woQuoteElementNames in this.FOptions;
      if (C === -1) {
        this.Write("{}");
        return;
      };
      WC = ($mod.TWriteOption.woCompact in this.FOptions) || ($mod.TWriteOption.woCompactObjectLiterals in this.FOptions);
      if (WC) {
        this.Write("{")}
       else {
        this.WriteLn("{");
        this.Indent();
      };
      for (var $l1 = 0, $end2 = C; $l1 <= $end2; $l1++) {
        i = $l1;
        Prop = El.FElements.GetE(i);
        this.FWriter.SetCurElement(Prop.FExpr);
        S = Prop.FName;
        if (QE || !pas.jsbase.IsValidJSIdentifier(S,false)) S = ('"' + S) + '"';
        this.Write(S + ": ");
        this.Indent();
        this.FSkipRoundBrackets = true;
        this.WriteJS(Prop.FExpr);
        if (i < C) if (WC) {
          this.Write(", ")}
         else this.WriteLn(",");
        this.Undent();
      };
      this.FSkipRoundBrackets = false;
      if (!WC) {
        this.WriteLn("");
        this.Undent();
      };
      this.FWriter.SetCurElement(El);
      this.Write("}");
    };
    this.WriteMemberExpression = function (El) {
      var MExpr = null;
      var Args = null;
      if (pas.jstree.TJSNewMemberExpression.isPrototypeOf(El)) this.Write("new ");
      MExpr = El.FMexpr;
      if ((((pas.jstree.TJSPrimaryExpression.isPrototypeOf(MExpr) || pas.jstree.TJSDotMemberExpression.isPrototypeOf(MExpr)) || pas.jstree.TJSBracketMemberExpression.isPrototypeOf(MExpr)) || (pas.jstree.TJSCallExpression.isPrototypeOf(MExpr) && !pas.jstree.TJSNewMemberExpression.isPrototypeOf(El))) || pas.jstree.TJSLiteral.isPrototypeOf(MExpr)) {
        this.WriteJS(MExpr);
        this.FWriter.SetCurElement(El);
      } else {
        this.Write("(");
        this.WriteJS(MExpr);
        this.FWriter.SetCurElement(El);
        this.Write(")");
      };
      if (pas.jstree.TJSDotMemberExpression.isPrototypeOf(El)) {
        this.Write(".");
        this.Write(El.FName);
      } else if (pas.jstree.TJSBracketMemberExpression.isPrototypeOf(El)) {
        this.Write("[");
        this.FSkipRoundBrackets = true;
        this.WriteJS(El.FName);
        this.FWriter.SetCurElement(El);
        this.FSkipRoundBrackets = false;
        this.Write("]");
      } else if (pas.jstree.TJSNewMemberExpression.isPrototypeOf(El)) {
        Args = El.FArgs;
        if (Args != null) {
          this.FWriter.SetCurElement(Args);
          this.WriteArrayLiteral(Args);
        } else this.Write("()");
      };
    };
    this.WriteCallExpression = function (El) {
      this.WriteJS(El.FExpr);
      if (El.FArgs != null) {
        this.FWriter.SetCurElement(El.FArgs);
        this.WriteArrayLiteral(El.FArgs);
      } else {
        this.FWriter.SetCurElement(El);
        this.Write("()");
      };
    };
    this.WriteSwitchStatement = function (El) {
      var C = false;
      var I = 0;
      var EC = null;
      C = $mod.TWriteOption.woCompact in this.FOptions;
      this.Write("switch (");
      if (El.FCond != null) {
        this.FSkipRoundBrackets = true;
        this.WriteJS(El.FCond);
        this.FWriter.SetCurElement(El);
        this.FSkipRoundBrackets = false;
      };
      if (C) {
        this.Write(") {")}
       else this.WriteLn(") {");
      for (var $l1 = 0, $end2 = El.FCases.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        EC = El.FCases.GetC(I);
        if (EC === El.FDefault) {
          this.Write("default")}
         else {
          this.FWriter.SetCurElement(EC.FExpr);
          this.Write("case ");
          this.FSkipRoundBrackets = true;
          this.WriteJS(EC.FExpr);
          this.FSkipRoundBrackets = false;
        };
        if (EC.FBody != null) {
          this.FSkipCurlyBrackets = true;
          if (C) {
            this.Write(": ")}
           else this.WriteLn(":");
          this.Indent();
          this.WriteJS(EC.FBody);
          this.Undent();
          if (pas.jstree.TJSStatementList.isPrototypeOf(EC.FBody) || pas.jstree.TJSEmptyBlockStatement.isPrototypeOf(EC.FBody)) {
            if (C) {
              if (I < (El.FCases.GetCount() - 1)) this.Write(" ");
            } else this.WriteLn("");
          } else if (C) {
            this.Write("; ")}
           else this.WriteLn(";");
        } else {
          if (C) {
            this.Write(": ")}
           else this.WriteLn(":");
        };
      };
      this.FWriter.SetCurElement(El);
      this.Write("}");
    };
    this.WriteUnary = function (El) {
      var S = "";
      this.FSkipRoundBrackets = false;
      S = El.$class.PrefixOperator();
      if (S !== "") {
        var $tmp1 = S.charAt(0);
        if ($tmp1 === "+") {
          if (this.FLastChar === "+") this.Write(" ")}
         else if ($tmp1 === "-") if (this.FLastChar === "-") this.Write(" ");
        this.Write(S);
      };
      this.WriteJS(El.FA);
      if (S === "") {
        S = El.$class.PostFixOperator();
        if (S !== "") {
          this.FWriter.SetCurElement(El);
          if (((S === "-") && (this.FLastChar === "-")) || ((S === "+") && (this.FLastChar === "+"))) this.Write(" ");
          this.Write(S);
        };
      };
    };
    this.WriteAssignStatement = function (El) {
      var S = "";
      this.WriteJS(El.FLHS);
      this.FWriter.SetCurElement(El);
      S = El.$class.OperatorString();
      if (!($mod.TWriteOption.woCompact in this.FOptions)) S = (" " + S) + " ";
      this.Write(S);
      this.FSkipRoundBrackets = true;
      this.WriteJS(El.FExpr);
      this.FSkipRoundBrackets = false;
    };
    this.WriteForInStatement = function (El) {
      this.Write("for (");
      if (El.FLhs != null) {
        this.WriteJS(El.FLhs);
        this.FWriter.SetCurElement(El);
      };
      this.Write(" in ");
      if (El.FList != null) {
        this.WriteJS(El.FList);
        this.FWriter.SetCurElement(El);
      };
      this.Write(") ");
      if (El.FBody != null) this.WriteJS(El.FBody);
    };
    this.WriteWhileStatement = function (El) {
      if (pas.jstree.TJSDoWhileStatement.isPrototypeOf(El)) {
        this.Write("do ");
        if (El.FBody != null) {
          this.FSkipCurlyBrackets = false;
          this.WriteJS(El.FBody);
          this.FWriter.SetCurElement(El);
        };
        this.Write(" while (");
        if (El.FCond != null) {
          this.FSkipRoundBrackets = true;
          this.WriteJS(El.FCond);
          this.FWriter.SetCurElement(El);
          this.FSkipRoundBrackets = false;
        };
        this.Write(")");
      } else {
        this.Write("while (");
        if (El.FCond != null) {
          this.FSkipRoundBrackets = true;
          this.WriteJS(El.FCond);
          this.FWriter.SetCurElement(El);
          this.FSkipRoundBrackets = false;
        };
        this.Write(") ");
        if (El.FBody != null) this.WriteJS(El.FBody);
      };
    };
    this.WriteForStatement = function (El) {
      this.Write("for (");
      if (El.FInit != null) this.WriteJS(El.FInit);
      this.Write("; ");
      if (El.FCond != null) {
        this.FSkipRoundBrackets = true;
        this.WriteJS(El.FCond);
        this.FSkipRoundBrackets = false;
      };
      this.Write("; ");
      if (El.FIncr != null) this.WriteJS(El.FIncr);
      this.FWriter.SetCurElement(El);
      this.Write(") ");
      if (El.FBody != null) this.WriteJS(El.FBody);
    };
    this.WriteIfStatement = function (El) {
      var HasBTrue = false;
      var C = false;
      var HasBFalse = false;
      var BTrueNeedBrackets = false;
      C = $mod.TWriteOption.woCompact in this.FOptions;
      this.Write("if (");
      this.FSkipRoundBrackets = true;
      this.WriteJS(El.FCond);
      this.FWriter.SetCurElement(El);
      this.FSkipRoundBrackets = false;
      this.Write(")");
      if (!C) this.Write(" ");
      HasBTrue = !this.IsEmptyStatement(El.FBTrue);
      HasBFalse = !this.IsEmptyStatement(El.FBFalse);
      if (HasBTrue) {
        BTrueNeedBrackets = (HasBFalse && !pas.jstree.TJSStatementList.isPrototypeOf(El.FBTrue)) && !pas.jstree.TJSEmptyBlockStatement.isPrototypeOf(El.FBTrue);
        if (BTrueNeedBrackets) if (C) {
          this.Write("{")}
         else {
          this.WriteLn("{");
          this.Indent();
        };
        this.WriteJS(El.FBTrue);
        if (BTrueNeedBrackets) if (C) {
          this.Write("}")}
         else {
          this.Undent();
          this.WriteLn("}");
        };
      };
      if (HasBFalse) {
        this.FWriter.SetCurElement(El.FBFalse);
        if (!HasBTrue) {
          if (C) {
            this.Write("{}")}
           else this.WriteLn("{}");
        } else this.Write(" ");
        this.Write("else ");
        this.WriteJS(El.FBFalse);
      } else this.FWriter.SetCurElement(El);
    };
    this.WriteSourceElements = function (El) {
      var Self = this;
      var C = false;
      function WriteElements(Elements) {
        var I = 0;
        var E = null;
        if (Elements === null) return;
        for (var $l1 = 0, $end2 = Elements.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          E = Elements.GetN(I).FNode;
          Self.WriteJS(E);
          if (!C) {
            Self.WriteLn(";")}
           else if (I < (Elements.GetCount() - 1)) {
            Self.Write("; ")}
           else Self.Write(";");
        };
      };
      C = $mod.TWriteOption.woCompact in Self.FOptions;
      WriteElements(El.FVars);
      WriteElements(El.FFunctions);
      WriteElements(El.FStatements);
    };
    this.WriteStatementList = function (El) {
      var C = false;
      var B = false;
      var LastEl = null;
      C = $mod.TWriteOption.woCompact in this.FOptions;
      B = !this.FSkipCurlyBrackets;
      if (B) {
        this.Write("{");
        this.Indent();
        if (!C) this.WriteLn("");
      };
      if (!this.IsEmptyStatement(El.FA)) {
        this.WriteJS(El.FA);
        LastEl = El.FA;
        if (El.FB != null) {
          if (!pas.jstree.TJSStatementList.isPrototypeOf(LastEl)) {
            if (C) {
              this.Write("; ")}
             else this.WriteLn(";");
          };
          this.FSkipCurlyBrackets = true;
          this.WriteJS(El.FB);
          LastEl = El.FB;
        };
        if (!C && !pas.jstree.TJSStatementList.isPrototypeOf(LastEl)) this.WriteLn(";");
      } else if (El.FB != null) {
        this.WriteJS(El.FB);
        if (!C && !pas.jstree.TJSStatementList.isPrototypeOf(El.FB)) this.WriteLn(";");
      };
      if (B) {
        this.Undent();
        this.FWriter.SetCurElement(El);
        this.Write("}");
      };
    };
    this.WriteTryStatement = function (El) {
      var C = false;
      C = $mod.TWriteOption.woCompact in this.FOptions;
      this.Write("try {");
      if (!this.IsEmptyStatement(El.FBlock)) {
        if (!C) this.WriteLn("");
        this.FSkipCurlyBrackets = true;
        this.Indent();
        this.WriteJS(El.FBlock);
        if (!C && !pas.jstree.TJSStatementList.isPrototypeOf(El.FBlock)) this.WriteLn("");
        this.Undent();
      };
      this.FWriter.SetCurElement(El);
      this.Write("}");
      if (pas.jstree.TJSTryCatchFinallyStatement.isPrototypeOf(El) || pas.jstree.TJSTryCatchStatement.isPrototypeOf(El)) {
        this.Write(" catch");
        if (El.FIdent !== "") this.Write((" (" + El.FIdent) + ")");
        if (C) {
          this.Write(" {")}
         else this.WriteLn(" {");
        if (!this.IsEmptyStatement(El.FBCatch)) {
          this.FSkipCurlyBrackets = true;
          this.Indent();
          this.WriteJS(El.FBCatch);
          this.Undent();
          if (!C && !pas.jstree.TJSStatementList.isPrototypeOf(El.FBCatch)) this.WriteLn("");
        };
        this.FWriter.SetCurElement(El);
        this.Write("}");
      };
      if (pas.jstree.TJSTryCatchFinallyStatement.isPrototypeOf(El) || pas.jstree.TJSTryFinallyStatement.isPrototypeOf(El)) {
        if (C) {
          this.Write(" finally {")}
         else this.WriteLn(" finally {");
        if (!this.IsEmptyStatement(El.FBFinally)) {
          this.Indent();
          this.FSkipCurlyBrackets = true;
          this.WriteJS(El.FBFinally);
          this.Undent();
          if (!C && !pas.jstree.TJSStatementList.isPrototypeOf(El.FBFinally)) this.WriteLn("");
        };
        this.FWriter.SetCurElement(El);
        this.Write("}");
      };
    };
    this.WriteVarDeclaration = function (El) {
      this.Write(El.FName);
      if (El.FInit != null) {
        this.Write(" = ");
        this.FSkipRoundBrackets = true;
        this.WriteJS(El.FInit);
        this.FSkipRoundBrackets = false;
      };
    };
    this.WriteWithStatement = function (El) {
      this.Write("with (");
      this.FSkipRoundBrackets = true;
      this.WriteJS(El.FA);
      this.FSkipRoundBrackets = false;
      this.FWriter.SetCurElement(El);
      if ($mod.TWriteOption.woCompact in this.FOptions) {
        this.Write(") ")}
       else this.WriteLn(")");
      this.Indent();
      this.WriteJS(El.FB);
      this.Undent();
    };
    this.WriteVarDeclarationList = function (El) {
      this.WriteJS(El.FA);
      if (El.FB != null) {
        this.Write(", ");
        this.WriteJS(El.FB);
      };
    };
    this.WriteConditionalExpression = function (El) {
      var NeedBrackets = false;
      NeedBrackets = true;
      if (NeedBrackets) {
        this.Write("(");
        this.FSkipRoundBrackets = true;
      };
      this.WriteJS(El.FA);
      this.Write(" ? ");
      if (El.FB !== null) this.WriteJS(El.FB);
      this.Write(" : ");
      if (El.FC !== null) this.WriteJS(El.FC);
      if (NeedBrackets) this.Write(")");
    };
    this.WriteFunctionBody = function (El) {
      if (!this.IsEmptyStatement(El.FA)) this.WriteJS(El.FA);
    };
    this.WriteFunctionDeclarationStatement = function (El) {
      if (El.FFuncDef != null) this.WriteFuncDef(El.FFuncDef);
    };
    this.WriteLabeledStatement = function (El) {
      if (El.FLabel != null) {
        this.Write(El.FLabel.FName);
        if ($mod.TWriteOption.woCompact in this.FOptions) {
          this.Write(": ")}
         else this.WriteLn(":");
      };
      this.WriteJS(El.FA);
    };
    this.WriteReturnStatement = function (El) {
      if (El.FExpr === null) {
        this.Write("return")}
       else {
        this.Write("return ");
        this.FSkipRoundBrackets = true;
        this.WriteJS(El.FExpr);
        this.FSkipRoundBrackets = false;
      };
    };
    this.WriteTargetStatement = function (El) {
      var TN = "";
      TN = El.FTargetName;
      if (pas.jstree.TJSForStatement.isPrototypeOf(El)) {
        this.WriteForStatement(El)}
       else if (pas.jstree.TJSSwitchStatement.isPrototypeOf(El)) {
        this.WriteSwitchStatement(El)}
       else if (pas.jstree.TJSForInStatement.isPrototypeOf(El)) {
        this.WriteForInStatement(El)}
       else if (pas.jstree.TJSWhileStatement.isPrototypeOf(El)) {
        this.WriteWhileStatement(El)}
       else if (pas.jstree.TJSContinueStatement.isPrototypeOf(El)) {
        if (TN !== "") {
          this.Write("continue " + TN)}
         else this.Write("continue");
      } else if (pas.jstree.TJSBreakStatement.isPrototypeOf(El)) {
        if (TN !== "") {
          this.Write("break " + TN)}
         else this.Write("break");
      } else this.Error$1('Unknown target statement class: "%s"',[El.$classname]);
    };
    this.WriteFuncDef = function (FD) {
      var C = false;
      var I = 0;
      var A = null;
      var LastEl = null;
      LastEl = this.FWriter.FCurElement;
      C = $mod.TWriteOption.woCompact in this.FOptions;
      this.Write("function ");
      if (FD.FName !== "") this.Write(FD.FName);
      this.Write("(");
      if (FD.FParams != null) for (var $l1 = 0, $end2 = FD.FParams.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.Write(FD.FParams.Get(I));
        if (I < (FD.FParams.GetCount() - 1)) if (C) {
          this.Write(",")}
         else this.Write(", ");
      };
      this.Write(") {");
      if (!(C || FD.FIsEmpty)) {
        this.WriteLn("");
        this.Indent();
      };
      if (FD.FBody != null) {
        this.FSkipCurlyBrackets = true;
        this.WriteJS(FD.FBody);
        A = FD.FBody.FA;
        if ((((A != null) && !pas.jstree.TJSStatementList.isPrototypeOf(A)) && !pas.jstree.TJSSourceElements.isPrototypeOf(A)) && !pas.jstree.TJSEmptyBlockStatement.isPrototypeOf(A)) if (C) {
          this.Write("; ")}
         else this.WriteLn(";");
      };
      this.FWriter.SetCurElement(LastEl);
      if (C) {
        this.Write("}")}
       else {
        this.Undent();
        this.Write("}");
      };
    };
    this.WritePrimaryExpression = function (El) {
      if (pas.jstree.TJSPrimaryExpressionThis.isPrototypeOf(El)) {
        this.Write("this")}
       else if (pas.jstree.TJSPrimaryExpressionIdent.isPrototypeOf(El)) {
        this.Write(El.FName)}
       else this.Error$1(rtl.getResStr(pas.jswriter,"SErrUnknownJSClass"),[El.$classname]);
    };
    this.WriteBinary = function (El) {
      var S = "";
      var AllowCompact = false;
      var WithBrackets = false;
      WithBrackets = !this.FSkipRoundBrackets;
      if (WithBrackets) this.Write("(");
      this.FSkipRoundBrackets = false;
      this.WriteJS(El.FA);
      this.FWriter.SetCurElement(El);
      AllowCompact = false;
      if (pas.jstree.TJSBinaryExpression.isPrototypeOf(El)) {
        S = El.$class.OperatorString();
        AllowCompact = El.$class.AllowCompact();
      };
      if (!(AllowCompact && ($mod.TWriteOption.woCompact in this.FOptions))) {
        if (pas.jstree.TJSCommaExpression.isPrototypeOf(El)) {
          S = S + " "}
         else S = (" " + S) + " ";
      };
      this.FSkipRoundBrackets = false;
      this.Write(S);
      this.WriteJS(El.FB);
      this.FWriter.SetCurElement(El);
      if (WithBrackets) this.Write(")");
    };
    this.IsEmptyStatement = function (El) {
      var Result = false;
      if (El === null) return true;
      if ((El.$class.ClassType() === pas.jstree.TJSEmptyStatement) && !($mod.TWriteOption.woEmptyStatementAsComment in this.FOptions)) return true;
      Result = false;
      return Result;
    };
    this.HasLineEnding = function (El) {
      var Result = false;
      if (El !== null) {
        if ((El.$class.ClassType() === pas.jstree.TJSStatementList) || (El.$class.ClassType() === pas.jstree.TJSSourceElements)) return true;
      };
      Result = false;
      return Result;
    };
    this.EscapeString = function (S, Quote) {
      var Result = "";
      var I = 0;
      var J = 0;
      var L = 0;
      var R = "";
      var c = "";
      I = 1;
      J = 1;
      R = "";
      L = S.length;
      while (I <= L) {
        c = S.charAt(I - 1);
        if (((c.charCodeAt() in rtl.createSet(null,0,31,34,39,47,92)) || (c >= "\uFF00")) || ((c >= "\uD800") && (c <= "\uDFFF"))) {
          R = R + pas.System.Copy(S,J,I - J);
          var $tmp1 = c;
          if ($tmp1 === "\\") {
            R = R + "\\\\"}
           else if ($tmp1 === "\/") {
            R = R + "\\\/"}
           else if ($tmp1 === '"') {
            if (Quote === $mod.TJSEscapeQuote.jseqSingle) {
              R = R + '"'}
             else R = R + '\\"'}
           else if ($tmp1 === "'") {
            if (Quote === $mod.TJSEscapeQuote.jseqDouble) {
              R = R + "'"}
             else R = R + "\\'"}
           else if (((($tmp1 >= "\x00") && ($tmp1 <= "\x07")) || ($tmp1 === "\x0B")) || (($tmp1 >= "\x0E") && ($tmp1 <= "\x1F"))) {
            R = (R + "\\x") + rtl.hexStr(c.charCodeAt(),2)}
           else if ($tmp1 === "\b") {
            R = R + "\\b"}
           else if ($tmp1 === "\t") {
            R = R + "\\t"}
           else if ($tmp1 === "\n") {
            R = R + "\\n"}
           else if ($tmp1 === "\f") {
            R = R + "\\f"}
           else if ($tmp1 === "\r") {
            R = R + "\\r"}
           else if (($tmp1 >= "\uD800") && ($tmp1 <= "\uDFFF")) {
            if (I < L) {
              c = S.charAt((I + 1) - 1);
              if ((c >= "퀀") && (c <= "\uDFFF")) {
                I += 2;
                continue;
              } else R = (R + "\\u") + rtl.hexStr(c.charCodeAt(),4);
            } else R = (R + "\\u") + rtl.hexStr(c.charCodeAt(),4);
          } else if (($tmp1 >= "\uFF00") && ($tmp1 <= "\uFFFF")) R = (R + "\\u") + rtl.hexStr(c.charCodeAt(),4);
          J = I + 1;
        };
        I += 1;
      };
      R = R + pas.System.Copy(S,J,I - 1);
      Result = R;
      return Result;
    };
    this.Create$1 = function (AWriter) {
      this.FWriter = AWriter;
      this.FIndentChar = " ";
      this.FOptions = {};
    };
    this.Destroy = function () {
      if (this.FFreeWriter) {
        rtl.free(this,"FWriter");
        this.FWriter = null;
      };
      pas.System.TObject.Destroy.call(this);
    };
    this.WriteJS = function (El) {
      var C = null;
      this.FWriter.SetCurElement(El);
      C = El.$class.ClassType();
      if (C === pas.jstree.TJSEmptyBlockStatement) {
        this.WriteEmptyBlockStatement(El)}
       else if (C === pas.jstree.TJSEmptyStatement) {
        this.WriteEmptyStatement(El)}
       else if (C === pas.jstree.TJSLiteral) {
        this.WriteLiteral(El)}
       else if (C.InheritsFrom(pas.jstree.TJSPrimaryExpression)) {
        this.WritePrimaryExpression(El)}
       else if (C.InheritsFrom(pas.jstree.TJSArrayLiteral)) {
        this.WriteArrayLiteral(El)}
       else if (C === pas.jstree.TJSObjectLiteral) {
        this.WriteObjectLiteral(El)}
       else if (C.InheritsFrom(pas.jstree.TJSMemberExpression)) {
        this.WriteMemberExpression(El)}
       else if (C === pas.jstree.TJSRegularExpressionLiteral) {
        this.WriteRegularExpressionLiteral(El)}
       else if (C === pas.jstree.TJSCallExpression) {
        this.WriteCallExpression(El)}
       else if (C === pas.jstree.TJSLabeledStatement) {
        this.WriteLabeledStatement(El)}
       else if (C === pas.jstree.TJSFunctionBody) {
        this.WriteFunctionBody(El)}
       else if (C === pas.jstree.TJSVariableStatement) {
        this.WriteVariableStatement(El)}
       else if (C.InheritsFrom(pas.jstree.TJSUnary)) {
        this.WriteUnary(El)}
       else if (C === pas.jstree.TJSVariableDeclarationList) {
        this.WriteVarDeclarationList(El)}
       else if (C === pas.jstree.TJSStatementList) {
        this.WriteStatementList(El)}
       else if (C === pas.jstree.TJSWithStatement) {
        this.WriteWithStatement(El)}
       else if (C.InheritsFrom(pas.jstree.TJSBinary)) {
        this.WriteBinary(El)}
       else if (C === pas.jstree.TJSConditionalExpression) {
        this.WriteConditionalExpression(El)}
       else if (C.InheritsFrom(pas.jstree.TJSAssignStatement)) {
        this.WriteAssignStatement(El)}
       else if (C === pas.jstree.TJSVarDeclaration) {
        this.WriteVarDeclaration(El)}
       else if (C === pas.jstree.TJSIfStatement) {
        this.WriteIfStatement(El)}
       else if (C.InheritsFrom(pas.jstree.TJSTargetStatement)) {
        this.WriteTargetStatement(El)}
       else if (C === pas.jstree.TJSReturnStatement) {
        this.WriteReturnStatement(El)}
       else if (C.InheritsFrom(pas.jstree.TJSTryStatement)) {
        this.WriteTryStatement(El)}
       else if (C === pas.jstree.TJSFunctionDeclarationStatement) {
        this.WriteFunctionDeclarationStatement(El)}
       else if (C === pas.jstree.TJSSourceElements) {
        this.WriteSourceElements(El)}
       else if (El === null) {
        this.Error(rtl.getResStr(pas.jswriter,"SErrNilNode"))}
       else this.Error$1(rtl.getResStr(pas.jswriter,"SErrUnknownJSClass"),[El.$classname]);
      this.FSkipCurlyBrackets = false;
    };
    this.Indent = function () {
      this.FCurIndent += this.FIndentSize;
    };
    this.Undent = function () {
      if (this.FCurIndent >= this.FIndentSize) {
        this.FCurIndent -= this.FIndentSize}
       else this.FCurIndent = 0;
    };
  });
  rtl.createClass($mod,"EJSWriter",pas.SysUtils.Exception,function () {
  });
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$resourcestrings = {SErrUnknownJSClass: {org: "Unknown javascript element class : %s"}, SErrNilNode: {org: "Nil node in Javascript"}};
});
rtl.module("JSSrcMap",["System","JS","Classes","SysUtils","fpjson"],function () {
  "use strict";
  var $mod = this;
  this.Base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";
  rtl.createClass($mod,"EJSSourceMap",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"TSourceMapSegment",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.Index = 0;
      this.GeneratedLine = 0;
      this.GeneratedColumn = 0;
      this.SrcFileIndex = 0;
      this.SrcLine = 0;
      this.SrcColumn = 0;
      this.NameIndex = 0;
    };
  });
  rtl.createClass($mod,"TSourceMapSrc",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.Filename = "";
      this.TranslatedFilename = "";
      this.Source = "";
    };
  });
  this.TSourceMapOption = {"0": "smoAddMonotonous", smoAddMonotonous: 0, "1": "smoAutoLineStart", smoAutoLineStart: 1, "2": "smoSafetyHeader", smoSafetyHeader: 2, "3": "smoAllowSrcLine0", smoAllowSrcLine0: 3};
  $mod.$rtti.$Enum("TSourceMapOption",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TSourceMapOption});
  $mod.$rtti.$Set("TSourceMapOptions",{comptype: $mod.$rtti["TSourceMapOption"]});
  this.DefaultSourceMapOptions = rtl.createSet($mod.TSourceMapOption.smoAddMonotonous,$mod.TSourceMapOption.smoSafetyHeader);
  rtl.createClass($mod,"TSourceMap",pas.System.TObject,function () {
    rtl.createClass(this,"TStringToIndex",pas.System.TObject,function () {
      this.$init = function () {
        pas.System.TObject.$init.call(this);
        this.FItems$1 = null;
      };
      this.$final = function () {
        this.FItems$1 = undefined;
        pas.System.TObject.$final.call(this);
      };
      this.Create$3 = function () {
        this.FItems$1 = new Object();
      };
      this.Destroy = function () {
        this.FItems$1 = null;
        pas.System.TObject.Destroy.call(this);
      };
      this.Clear$1 = function () {
        this.FItems$1 = new Object();
      };
      this.Add = function (Value, Index) {
        this.FItems$1["%" + Value] = Index;
      };
      this.FindValue = function (Value) {
        var Result = 0;
        if (this.FItems$1.hasOwnProperty("%" + Value)) {
          Result = Math.floor(this.FItems$1["%" + Value])}
         else Result = -1;
        return Result;
      };
    });
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FGeneratedFilename = "";
      this.FNames = null;
      this.FNameToIndex = null;
      this.FItems = null;
      this.FOptions = {};
      this.FSorted = false;
      this.FSourceRoot = "";
      this.FSources = null;
      this.FSourceToIndex = null;
      this.FVersion = 0;
    };
    this.$final = function () {
      this.FNames = undefined;
      this.FNameToIndex = undefined;
      this.FItems = undefined;
      this.FOptions = undefined;
      this.FSources = undefined;
      this.FSourceToIndex = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetNames = function (Index) {
      var Result = "";
      Result = this.FNames.Get(Index);
      return Result;
    };
    this.GetItems = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.FItems.Get(Index));
      return Result;
    };
    this.GetSourceContents = function (Index) {
      var Result = "";
      Result = rtl.getObject(this.FSources.Get(Index)).Source;
      return Result;
    };
    this.GetSourceFiles = function (Index) {
      var Result = "";
      Result = rtl.getObject(this.FSources.Get(Index)).Filename;
      return Result;
    };
    this.GetSourceTranslatedFiles = function (Index) {
      var Result = "";
      Result = rtl.getObject(this.FSources.Get(Index)).TranslatedFilename;
      return Result;
    };
    this.SetGeneratedFilename = function (AValue) {
      if (this.FGeneratedFilename === AValue) return;
      this.FGeneratedFilename = AValue;
    };
    this.SetSorted = function (AValue) {
      if (this.FSorted === AValue) return;
      if (AValue) {
        this.Sort()}
       else this.FSorted = false;
    };
    this.SetSourceContents = function (Index, AValue) {
      rtl.getObject(this.FSources.Get(Index)).Source = AValue;
    };
    this.SetSourceTranslatedFiles = function (Index, AValue) {
      rtl.getObject(this.FSources.Get(Index)).TranslatedFilename = AValue;
    };
    this.Sort = function () {
      var i = 0;
      if (this.FSorted) return;
      this.FItems.Sort($mod.CompareSegmentWithGeneratedLineCol);
      for (var $l1 = 0, $end2 = this.Count() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetItems(i).Index = i;
      };
      this.FSorted = true;
    };
    this.Create$1 = function (aGeneratedFilename) {
      this.FOptions = rtl.refSet($mod.DefaultSourceMapOptions);
      this.FVersion = 3;
      this.FNames = pas.Classes.TStringList.$create("Create$1");
      this.FNameToIndex = this.TStringToIndex.$create("Create$3");
      this.FItems = pas.Classes.TFPList.$create("Create");
      this.FSources = pas.Classes.TFPList.$create("Create");
      this.FSourceToIndex = this.TStringToIndex.$create("Create$3");
      this.SetGeneratedFilename(aGeneratedFilename);
      this.FSorted = true;
    };
    this.Destroy = function () {
      this.Clear();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FSourceToIndex;
        }, set: function (v) {
          this.p.FSourceToIndex = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FSources;
        }, set: function (v) {
          this.p.FSources = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FItems;
        }, set: function (v) {
          this.p.FItems = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FNameToIndex;
        }, set: function (v) {
          this.p.FNameToIndex = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FNames;
        }, set: function (v) {
          this.p.FNames = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.Clear = function () {
      var i = 0;
      this.FGeneratedFilename = "";
      this.FSourceToIndex.Clear$1();
      for (var $l1 = 0, $end2 = this.FSources.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.FSources.Get(i)).$destroy("Destroy");
      };
      this.FSources.Clear();
      for (var $l3 = 0, $end4 = this.FItems.FCount - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        rtl.getObject(this.FItems.Get(i)).$destroy("Destroy");
      };
      this.FItems.Clear();
      this.FNameToIndex.Clear$1();
      this.FNames.Clear();
      this.FSourceRoot = "";
      this.FSorted = true;
    };
    this.AddMapping = function (GeneratedLine, GeneratedCol, SourceFile, SrcLine, SrcCol, Name) {
      var Self = this;
      var Result = null;
      function RaiseInvalid(Msg) {
        throw $mod.EJSSourceMap.$create("CreateFmt",['%s (GeneratedLine=%d GeneratedCol=%d SrcFile="%s" SrcLine=%d SrcCol=%d Name="%s")',[Msg,GeneratedLine,GeneratedCol,SourceFile,SrcLine,SrcCol,Name]]);
      };
      var NodeCnt = 0;
      var OtherNode = null;
      if (GeneratedLine < 1) RaiseInvalid("invalid GeneratedLine");
      if (GeneratedCol < 0) RaiseInvalid("invalid GeneratedCol");
      if (SourceFile === "") {
        if (Self.Count() === 0) RaiseInvalid("missing source file");
        if (SrcLine !== 1) RaiseInvalid("invalid SrcLine");
        if (SrcCol !== 0) RaiseInvalid("invalid SrcCol");
        if (Name !== "") RaiseInvalid("invalid Name");
      } else {
        if (SrcLine < 1) {
          if ((SrcLine < 0) || !($mod.TSourceMapOption.smoAllowSrcLine0 in Self.FOptions)) RaiseInvalid("invalid SrcLine");
        };
        if (SrcCol < 0) RaiseInvalid("invalid SrcCol");
      };
      NodeCnt = Self.Count();
      if (NodeCnt > 0) {
        OtherNode = Self.GetItems(NodeCnt - 1);
        if ((OtherNode.GeneratedLine > GeneratedLine) || ((OtherNode.GeneratedLine === GeneratedLine) && (OtherNode.GeneratedColumn > GeneratedCol))) {
          if ($mod.TSourceMapOption.smoAddMonotonous in Self.FOptions) {
            RaiseInvalid("GeneratedLine\/Col not monotonous")}
           else Self.FSorted = false;
        };
      };
      Result = $mod.TSourceMapSegment.$create("Create");
      Result.Index = Self.FItems.FCount;
      Result.GeneratedLine = GeneratedLine;
      Result.GeneratedColumn = GeneratedCol;
      if (SourceFile === "") {
        Result.SrcFileIndex = -1}
       else Result.SrcFileIndex = Self.IndexOfSourceFile(SourceFile,true);
      Result.SrcLine = SrcLine;
      Result.SrcColumn = SrcCol;
      if (Name !== "") {
        Result.NameIndex = Self.IndexOfName(Name,true)}
       else Result.NameIndex = -1;
      Self.FItems.Add(Result);
      return Result;
    };
    this.CreateMappings = function () {
      var Self = this;
      var Result = "";
      var buf = null;
      function AddStr(s) {
        buf.push(s);
      };
      function AddChar(c) {
        buf.push(c);
      };
      var i = 0;
      var LastGeneratedLine = 0;
      var LastGeneratedColumn = 0;
      var j = 0;
      var LastSrcFileIndex = 0;
      var LastSrcLine = 0;
      var LastSrcColumn = 0;
      var SrcLine = 0;
      var LastNameIndex = 0;
      var Item = null;
      Result = "";
      LastGeneratedLine = 1;
      LastGeneratedColumn = 0;
      LastSrcFileIndex = 0;
      LastSrcLine = 0;
      LastSrcColumn = 0;
      LastNameIndex = 0;
      buf = new Array();
      try {
        for (var $l1 = 0, $end2 = Self.Count() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Item = Self.GetItems(i);
          if (LastGeneratedLine < Item.GeneratedLine) {
            for (var $l3 = LastGeneratedLine + 1, $end4 = Item.GeneratedLine; $l3 <= $end4; $l3++) {
              j = $l3;
              AddChar(";");
              if (($mod.TSourceMapOption.smoAutoLineStart in Self.FOptions) && ((j < Item.GeneratedLine) || (Item.GeneratedColumn > 0))) {
                AddStr($mod.EncodeBase64VLQ(0 - LastGeneratedColumn));
                LastGeneratedColumn = 0;
                AddStr($mod.EncodeBase64VLQ(0));
                AddStr($mod.EncodeBase64VLQ(0));
                AddStr($mod.EncodeBase64VLQ(0));
                if (j === Item.GeneratedLine) AddChar(",");
              };
            };
            LastGeneratedLine = Item.GeneratedLine;
          } else if (i > 0) {
            if ((LastGeneratedLine === Item.GeneratedLine) && (LastGeneratedColumn === Item.GeneratedColumn)) continue;
            AddChar(",");
          };
          AddStr($mod.EncodeBase64VLQ(Item.GeneratedColumn - LastGeneratedColumn));
          LastGeneratedColumn = Item.GeneratedColumn;
          if (Item.SrcFileIndex < 0) continue;
          AddStr($mod.EncodeBase64VLQ(Item.SrcFileIndex - LastSrcFileIndex));
          LastSrcFileIndex = Item.SrcFileIndex;
          SrcLine = Item.SrcLine - 1;
          AddStr($mod.EncodeBase64VLQ(SrcLine - LastSrcLine));
          LastSrcLine = SrcLine;
          AddStr($mod.EncodeBase64VLQ(Item.SrcColumn - LastSrcColumn));
          LastSrcColumn = Item.SrcColumn;
          if (Item.NameIndex < 0) continue;
          AddStr($mod.EncodeBase64VLQ(Item.NameIndex - LastNameIndex));
          LastNameIndex = Item.NameIndex;
        };
        Result = buf.join("");
      } finally {
      };
      return Result;
    };
    var MaxInt = Math.floor(2147483647 / 2);
    this.ParseMappings = function (Mapping) {
      var Self = this;
      var p = 0;
      function Decode() {
        var Result = 0;
        Result = $mod.DecodeBase64VLQ$1(Mapping,{get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }});
        return Result;
      };
      function E(Msg) {
        throw $mod.EJSSourceMap.$create("CreateFmt",[Msg,[p]]);
      };
      var GeneratedLine = 0;
      var LastColumn = 0;
      var Column = 0;
      var LastSrcFileIndex = 0;
      var LastSrcLine = 0;
      var LastSrcColumn = 0;
      var LastNameIndex = 0;
      var SrcFileIndex = 0;
      var SrcLine = 0;
      var SrcColumn = 0;
      var NameIndex = 0;
      var l = 0;
      var ColDiff = 0;
      var SrcFileIndexDiff = 0;
      var SrcLineDiff = 0;
      var SrcColumnDiff = 0;
      var NameIndexDiff = 0;
      var Segment = null;
      l = Mapping.length;
      if (l === 0) return;
      p = 1;
      GeneratedLine = 1;
      LastColumn = 0;
      LastSrcFileIndex = 0;
      LastSrcLine = 0;
      LastSrcColumn = 0;
      LastNameIndex = 0;
      while (p <= l) {
        var $tmp1 = Mapping.charAt(p - 1);
        if ($tmp1 === ",") {
          p += 1;
        } else if ($tmp1 === ";") {
          GeneratedLine += 1;
          p += 1;
        } else {
          ColDiff = Decode();
          if ((ColDiff > 1073741823) || (ColDiff < -1073741823)) E("column out of range at %d");
          Column = LastColumn + (ColDiff & 0xFFFFFFFF);
          if ((Column > 1073741823) || (Column < -1073741823)) E("column out of range at %d");
          LastColumn = Column;
          Segment = $mod.TSourceMapSegment.$create("Create");
          Segment.Index = Self.FItems.FCount;
          Self.FItems.Add(Segment);
          Segment.GeneratedLine = GeneratedLine;
          Segment.GeneratedColumn = Column;
          Segment.SrcFileIndex = -1;
          Segment.NameIndex = -1;
          if ((p <= l) && !(Mapping.charCodeAt(p - 1) in rtl.createSet(44,59))) {
            SrcFileIndexDiff = Decode();
            if ((SrcFileIndexDiff > 1073741823) || (SrcFileIndexDiff < -1073741823)) E("src file index out of range at %d");
            SrcFileIndex = LastSrcFileIndex + (SrcFileIndexDiff & 0xFFFFFFFF);
            if ((SrcFileIndex < 0) || (SrcFileIndex >= Self.SourceCount())) E("src file index out of range at %d");
            LastSrcFileIndex = SrcFileIndex;
            Segment.SrcFileIndex = SrcFileIndex;
            SrcLineDiff = Decode();
            if ((SrcLineDiff > 1073741823) || (SrcLineDiff < -1073741823)) E("src line out of range at %d");
            SrcLine = LastSrcLine + (SrcLineDiff & 0xFFFFFFFF);
            if ((SrcLine > 1073741823) || (SrcLine < -1073741823)) E("src line out of range at %d");
            LastSrcLine = SrcLine;
            Segment.SrcLine = SrcLine + 1;
            SrcColumnDiff = Decode();
            if ((SrcColumnDiff > 1073741823) || (SrcColumnDiff < -1073741823)) E("src column out of range at %d");
            SrcColumn = LastSrcColumn + (SrcColumnDiff & 0xFFFFFFFF);
            if ((SrcColumn > 1073741823) || (SrcColumn < -1073741823)) E("src column out of range at %d");
            LastSrcColumn = SrcColumn;
            Segment.SrcColumn = SrcColumn;
            if ((p <= l) && !(Mapping.charCodeAt(p - 1) in rtl.createSet(44,59))) {
              NameIndexDiff = Decode();
              if ((NameIndexDiff > 1073741823) || (NameIndexDiff < -1073741823)) E("name index out of range at %d");
              NameIndex = LastNameIndex + (NameIndexDiff & 0xFFFFFFFF);
              if ((NameIndex < 0) || (NameIndex >= Self.NameCount())) E("name index out of range at %d");
              LastNameIndex = NameIndex;
              Segment.NameIndex = NameIndex;
            };
          };
        };
      };
    };
    this.ToJSON = function () {
      var Result = null;
      var Obj = null;
      var i = 0;
      var Arr = null;
      var Mappings = "";
      Result = null;
      Mappings = this.CreateMappings();
      Obj = pas.fpjson.TJSONObject.$create("Create$2");
      try {
        Obj.Add$4("version",this.FVersion);
        if (this.FGeneratedFilename !== "") Obj.Add$3("file",this.FGeneratedFilename);
        if (this.FSourceRoot !== "") Obj.Add$3("sourceRoot",this.FSourceRoot);
        Arr = pas.fpjson.TJSONArray.$create("Create$2");
        Obj.Add$6("sources",Arr);
        for (var $l1 = 0, $end2 = this.SourceCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Arr.Add$2(this.GetSourceTranslatedFiles(i));
        };
        i = this.SourceCount() - 1;
        while (i >= 0) if (this.GetSourceContents(i) === "") {
          i -= 1}
         else {
          Arr = pas.fpjson.TJSONArray.$create("Create$2");
          Obj.Add$6("sourcesContent",Arr);
          for (var $l3 = 0, $end4 = this.SourceCount() - 1; $l3 <= $end4; $l3++) {
            i = $l3;
            if (this.GetSourceContents(i) === "") {
              Arr.Add(pas.fpjson.TJSONNull.$create("Create$1"))}
             else Arr.Add$2(this.GetSourceContents(i));
          };
          break;
        };
        Arr = pas.fpjson.TJSONArray.$create("Create$2");
        Obj.Add$6("names",Arr);
        for (var $l5 = 0, $end6 = this.NameCount() - 1; $l5 <= $end6; $l5++) {
          i = $l5;
          Arr.Add$2(this.GetNames(i));
        };
        Obj.Add$3("mappings",Mappings);
        Result = Obj;
      } finally {
        if (Result === null) Obj = rtl.freeLoc(Obj);
      };
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      var Obj = null;
      Obj = this.ToJSON();
      try {
        if ($mod.TSourceMapOption.smoSafetyHeader in this.FOptions) {
          Result = $mod.DefaultSrcMapHeader() + Obj.GetAsJSON()}
         else Result = Obj.GetAsJSON();
      } finally {
        Obj = rtl.freeLoc(Obj);
      };
      return Result;
    };
    this.LoadFromJSON = function (Obj) {
      var aVersion = 0;
      var i = 0;
      var j = 0;
      var Arr = null;
      var Data = null;
      var aFilename = "";
      var aName = "";
      var aMappings = "";
      this.Clear();
      aVersion = Obj.Get$2("version",0);
      if (aVersion !== this.FVersion) throw $mod.EJSSourceMap.$create("CreateFmt",["unsupported version %d",[aVersion]]);
      this.SetGeneratedFilename(Obj.Get$4("file",""));
      this.FSourceRoot = Obj.Get$4("sourceRoot","");
      Arr = null;
      if (!Obj.Find$4("sources",{get: function () {
          return Arr;
        }, set: function (v) {
          Arr = v;
        }})) throw $mod.EJSSourceMap.$create("Create$1",["missing sources array"]);
      for (var $l1 = 0, $end2 = Arr.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Data = Arr.GetItem(i);
        if (!pas.fpjson.TJSONString.isPrototypeOf(Data)) throw $mod.EJSSourceMap.$create("CreateFmt",["sources must string, but found %s",[Data.$classname]]);
        aFilename = Data.GetAsString();
        j = this.IndexOfSourceFile(aFilename,true);
        if (j !== i) throw $mod.EJSSourceMap.$create("CreateFmt",['duplicate source file "%s" at %d',[aFilename,i]]);
      };
      Arr = null;
      if (Obj.Find$4("sourcesContent",{get: function () {
          return Arr;
        }, set: function (v) {
          Arr = v;
        }})) {
        if (Arr.GetCount() !== this.SourceCount()) throw $mod.EJSSourceMap.$create("CreateFmt",["number of elements in sources %d mismatch sourcesContent %d",[this.SourceCount(),Arr.GetCount()]]);
        for (var $l3 = 0, $end4 = Arr.GetCount() - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          Data = Arr.GetItem(i);
          if (pas.fpjson.TJSONString.isPrototypeOf(Data)) {
            this.SetSourceContents(i,Data.GetAsString())}
           else if (pas.fpjson.TJSONNull.isPrototypeOf(Data)) {}
          else throw $mod.EJSSourceMap.$create("CreateFmt",["sourcesContent[%d] must be string",[i]]);
        };
      };
      Arr = null;
      if (Obj.Find$4("names",{get: function () {
          return Arr;
        }, set: function (v) {
          Arr = v;
        }})) for (var $l5 = 0, $end6 = Arr.GetCount() - 1; $l5 <= $end6; $l5++) {
        i = $l5;
        Data = Arr.GetItem(i);
        if (!pas.fpjson.TJSONString.isPrototypeOf(Data)) throw $mod.EJSSourceMap.$create("CreateFmt",["names must string, but found %s",[Data.$classname]]);
        aName = Data.GetAsString();
        j = this.IndexOfName(aName,true);
        if (j !== i) throw $mod.EJSSourceMap.$create("CreateFmt",['duplicate name "%s" at %d',[aName,i]]);
      };
      aMappings = Obj.Get$4("mappings","");
      this.ParseMappings(aMappings);
    };
    this.SaveToStream = function (aStream) {
      var Obj = null;
      Obj = this.ToJSON();
      try {
        if ($mod.TSourceMapOption.smoSafetyHeader in this.FOptions) {
          aStream.push($mod.DefaultSrcMapHeader());
        };
        Obj.DumpJSON(aStream);
      } finally {
        Obj = rtl.freeLoc(Obj);
      };
    };
    this.IndexOfName = function (Name, AddIfNotExists) {
      var Result = 0;
      Result = this.FNameToIndex.FindValue(Name);
      if ((Result >= 0) || !AddIfNotExists) return Result;
      Result = this.FNames.GetCount();
      this.FNames.Add(Name);
      this.FNameToIndex.Add(Name,Result);
      return Result;
    };
    this.IndexOfSourceFile = function (SrcFile, AddIfNotExists) {
      var Result = 0;
      var Src = null;
      Result = this.FSourceToIndex.FindValue(SrcFile);
      if ((Result >= 0) || !AddIfNotExists) return Result;
      Src = $mod.TSourceMapSrc.$create("Create");
      Src.Filename = SrcFile;
      Src.TranslatedFilename = SrcFile;
      Result = this.FSources.FCount;
      this.FSources.Add(Src);
      this.FSourceToIndex.Add(SrcFile,Result);
      return Result;
    };
    this.IndexOfSegmentAt = function (GeneratedLine, GeneratedCol) {
      var Result = 0;
      var l = 0;
      var r = 0;
      var m = 0;
      var aSeg = null;
      this.Sort();
      l = 0;
      r = this.Count() - 1;
      aSeg = null;
      while (l <= r) {
        m = Math.floor((l + r) / 2);
        aSeg = this.GetItems(m);
        if (aSeg.GeneratedLine < GeneratedLine) {
          l = m + 1}
         else if (aSeg.GeneratedLine > GeneratedLine) {
          r = m - 1}
         else if (aSeg.GeneratedColumn < GeneratedCol) {
          l = m + 1}
         else if (aSeg.GeneratedColumn > GeneratedCol) {
          r = m - 1}
         else {
          Result = m;
          while (Result > 0) {
            aSeg = this.GetItems(Result - 1);
            if ((aSeg.GeneratedLine !== GeneratedLine) || (aSeg.GeneratedColumn !== GeneratedCol)) return Result;
            Result -= 1;
          };
          return Result;
        };
      };
      if (aSeg === null) return -1;
      if ((aSeg.GeneratedLine > GeneratedLine) || ((aSeg.GeneratedLine === GeneratedLine) && (aSeg.GeneratedColumn > GeneratedCol))) m -= 1;
      Result = m;
      return Result;
    };
    this.Count = function () {
      var Result = 0;
      Result = this.FItems.FCount;
      return Result;
    };
    this.SourceCount = function () {
      var Result = 0;
      Result = this.FSources.FCount;
      return Result;
    };
    this.NameCount = function () {
      var Result = 0;
      Result = this.FNames.GetCount();
      return Result;
    };
  });
  this.DefaultSrcMapHeader = function () {
    var Result = "";
    Result = ")]}'" + pas.System.LineEnding;
    return Result;
  };
  this.EncodeBase64VLQ = function (i) {
    var Result = "";
    function RaiseRange() {
      throw pas.SysUtils.ERangeError.$create("Create$1",["EncodeBase64VLQ"]);
    };
    var digits = 0;
    Result = "";
    if (i < 0) {
      i = -i;
      if (i > ((4503599627370495 - 1) >>> 1)) RaiseRange();
      i = (i << 1) + 1;
    } else {
      if (i > (4503599627370495 >>> 1)) RaiseRange();
      i = i << 1;
    };
    do {
      digits = i & 31;
      i = i >>> 5;
      if (i > 0) digits += 32;
      Result = Result + $mod.Base64Chars.charAt((digits + 1) - 1);
    } while (!(i === 0));
    return Result;
  };
  this.DecodeBase64VLQ = function (s) {
    var Result = 0;
    var p = 0;
    if (s === "") throw pas.SysUtils.EConvertError.$create("Create$1",["DecodeBase64VLQ empty"]);
    p = 1;
    Result = $mod.DecodeBase64VLQ$1(s,{get: function () {
        return p;
      }, set: function (v) {
        p = v;
      }});
    return Result;
  };
  var MaxShift = 32 - 5;
  this.DecodeBase64VLQ$1 = function (s, p) {
    var Result = 0;
    var run = 0;
    var l = 0;
    function RaiseInvalid() {
      p.set(run);
      throw pas.SysUtils.ERangeError.$create("Create$1",["DecodeBase64VLQ"]);
    };
    var c = "";
    var digit = 0;
    var Shift = 0;
    Result = 0;
    Shift = 0;
    run = p.get();
    l = s.length;
    do {
      if (run > l) RaiseInvalid();
      c = s.charAt(run - 1);
      var $tmp1 = c;
      if (($tmp1 >= "A") && ($tmp1 <= "Z")) {
        digit = c.charCodeAt() - "A".charCodeAt()}
       else if (($tmp1 >= "a") && ($tmp1 <= "z")) {
        digit = (c.charCodeAt() - "a".charCodeAt()) + 26}
       else if (($tmp1 >= "0") && ($tmp1 <= "9")) {
        digit = (c.charCodeAt() - "0".charCodeAt()) + 52}
       else if ($tmp1 === "+") {
        digit = 62}
       else if ($tmp1 === "\/") {
        digit = 63}
       else {
        RaiseInvalid();
      };
      run += 1;
      if (Shift > 27) RaiseInvalid();
      Result += (digit & 31) << Shift;
      Shift += 5;
    } while (!(digit < 32));
    if ((Result & 1) > 0) {
      Result = -(Result >>> 1)}
     else Result = Result >>> 1;
    p.set(run);
    return Result;
  };
  this.CompareSegmentWithGeneratedLineCol = function (Item1, Item2) {
    var Result = 0;
    if (Item1.GeneratedLine < Item2.GeneratedLine) {
      Result = -1}
     else if (Item1.GeneratedLine > Item2.GeneratedLine) {
      Result = 1}
     else if (Item1.GeneratedColumn < Item2.GeneratedColumn) {
      Result = -1}
     else if (Item1.GeneratedColumn > Item2.GeneratedColumn) {
      Result = 1}
     else if (Item1.Index < Item2.Index) {
      Result = -1}
     else if (Item1.Index > Item2.Index) {
      Result = 1}
     else Result = 0;
    return Result;
  };
  this.DebugSrcMapLine = function (GeneratedLine, GeneratedLineSrc, SrcMap, InfoLine) {
    var JS = "";
    var Origins = "";
    var Addition = "";
    var GeneratedCol = 0;
    var i = 0;
    var diff = 0;
    var GenColStep = 0;
    var LastSrcFile = 0;
    var LastSrcLine = 0;
    var aSeg = null;
    InfoLine.set("");
    JS = GeneratedLineSrc.get();
    Origins = "";
    GeneratedCol = 0;
    LastSrcFile = 0;
    LastSrcLine = -1;
    i = SrcMap.IndexOfSegmentAt(GeneratedLine,GeneratedCol);
    aSeg = null;
    if (i < 0) {
      i = 0;
      if (i === SrcMap.Count()) {
        aSeg = null}
       else aSeg = SrcMap.GetItems(i);
      if ((aSeg === null) || (aSeg.GeneratedLine > GeneratedLine)) {
        for (var $l1 = 1, $end2 = JS.length; $l1 <= $end2; $l1++) {
          i = $l1;
          Origins = Origins + "?";
        };
        GeneratedLineSrc.set(JS);
        InfoLine.set(Origins);
        return;
      } else {
        for (var $l3 = 1, $end4 = aSeg.GeneratedColumn; $l3 <= $end4; $l3++) {
          i = $l3;
          Origins = Origins + "?";
        };
      };
    } else {
      aSeg = SrcMap.GetItems(i);
      if (i > 0) LastSrcFile = SrcMap.GetItems(i - 1).SrcFileIndex;
    };
    do {
      Addition = "";
      if ((aSeg.GeneratedLine === GeneratedLine) && (aSeg.GeneratedColumn === GeneratedCol)) {
        Addition = "|";
        if (LastSrcFile !== aSeg.SrcFileIndex) {
          Addition = (Addition + SrcMap.GetSourceFiles(aSeg.SrcFileIndex)) + ",";
          LastSrcFile = aSeg.SrcFileIndex;
        };
        if (LastSrcLine !== aSeg.SrcLine) {
          Addition = (Addition + pas.SysUtils.IntToStr(aSeg.SrcLine)) + ",";
          LastSrcLine = aSeg.SrcLine;
        };
        Addition = Addition + pas.SysUtils.IntToStr(aSeg.SrcColumn);
        Origins = Origins + Addition;
      };
      i += 1;
      while (i < SrcMap.Count()) {
        aSeg = SrcMap.GetItems(i);
        if ((aSeg.GeneratedLine === GeneratedLine) && (aSeg.GeneratedColumn === GeneratedCol)) {
          i += 1}
         else break;
      };
      if (i === SrcMap.Count()) {
        aSeg = null}
       else aSeg = SrcMap.GetItems(i);
      if ((aSeg === null) || (aSeg.GeneratedLine > GeneratedLine)) {
        while (Origins.length < JS.length) Origins = Origins + ".";
        GeneratedLineSrc.set(JS);
        InfoLine.set(Origins);
        return;
      };
      GenColStep = aSeg.GeneratedColumn - GeneratedCol;
      diff = GenColStep - Addition.length;
      if (diff < 0) {
        pas.System.Insert(pas.System.StringOfChar("~",-diff),{get: function () {
            return JS;
          }, set: function (v) {
            JS = v;
          }},((Origins.length - Addition.length) + 1) + GenColStep)}
       else while (diff > 0) {
        Origins = Origins + ".";
        diff -= 1;
      };
      GeneratedCol = aSeg.GeneratedColumn;
    } while (!false);
  };
});
rtl.module("FPPas2Js",["System","Classes","SysUtils","Math","contnrs","jsbase","jstree","jswriter","PasTree","PScanner","PasResolveEval","PasResolver"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.nPasElementNotSupported = 4001;
  this.nNotSupportedX = 4002;
  this.nUnaryOpcodeNotSupported = 4003;
  this.nBinaryOpcodeNotSupported = 4004;
  this.nInvalidNumber = 4005;
  this.nInitializedArraysNotSupported = 4006;
  this.nMemberExprMustBeIdentifier = 4007;
  this.nCantWriteSetLiteral = 4008;
  this.nInvalidAbsoluteLocation = 4009;
  this.nForInJSArrDefaultGetterNotExtBracketAccessor = 4010;
  this.nInvalidFunctionReference = 4011;
  this.nMissingExternalName = 4012;
  this.nVirtualMethodNameMustMatchExternal = 4013;
  this.nPublishedNameMustMatchExternal = 4014;
  this.nInvalidVariableModifier = 4015;
  this.nNoArgumentsAllowedForExternalObjectConstructor = 4016;
  this.nNewInstanceFunctionMustBeVirtual = 4017;
  this.nNewInstanceFunctionMustHaveTwoParameters = 4018;
  this.nNewInstanceFunctionMustNotHaveOverloadAtX = 4019;
  this.nBracketAccessorOfExternalClassMustHaveOneParameter = 4020;
  this.nTypeXCannotBePublished = 4021;
  this.nNestedInheritedNeedsParameters = 4022;
  this.nFreeNeedsVar = 4023;
  this.nDuplicateGUIDXInYZ = 4024;
  this.nCantCallExtBracketAccessor = 4025;
  this.nJSNewNotSupported = 4026;
  this.ExtClassBracketAccessor = "[]";
  this.IsExtModePasClassInstance = 1;
  this.IsExtModePasClass = 2;
  this.TPas2JSBuiltInName = {"0": "pbifnArray_Concat", pbifnArray_Concat: 0, "1": "pbifnArray_ConcatN", pbifnArray_ConcatN: 1, "2": "pbifnArray_Copy", pbifnArray_Copy: 2, "3": "pbifnArray_Equal", pbifnArray_Equal: 3, "4": "pbifnArray_Length", pbifnArray_Length: 4, "5": "pbifnArray_SetLength", pbifnArray_SetLength: 5, "6": "pbifnArray_Static_Clone", pbifnArray_Static_Clone: 6, "7": "pbifnAs", pbifnAs: 7, "8": "pbifnAsExt", pbifnAsExt: 8, "9": "pbifnCheckMethodCall", pbifnCheckMethodCall: 9, "10": "pbifnCheckVersion", pbifnCheckVersion: 10, "11": "pbifnClassInstanceFree", pbifnClassInstanceFree: 11, "12": "pbifnClassInstanceNew", pbifnClassInstanceNew: 12, "13": "pbifnCreateClass", pbifnCreateClass: 13, "14": "pbifnCreateClassExt", pbifnCreateClassExt: 14, "15": "pbifnGetChar", pbifnGetChar: 15, "16": "pbifnGetNumber", pbifnGetNumber: 16, "17": "pbifnGetObject", pbifnGetObject: 17, "18": "pbifnGetResourcestring", pbifnGetResourcestring: 18, "19": "pbifnIntf_AddRef", pbifnIntf_AddRef: 19, "20": "pbifnIntf_Release", pbifnIntf_Release: 20, "21": "pbifnIntfAddMap", pbifnIntfAddMap: 21, "22": "pbifnIntfAsClass", pbifnIntfAsClass: 22, "23": "pbifnIntfCreate", pbifnIntfCreate: 23, "24": "pbifnIntfCreateTGUID", pbifnIntfCreateTGUID: 24, "25": "pbifnIntfExprRefsAdd", pbifnIntfExprRefsAdd: 25, "26": "pbifnIntfExprRefsCreate", pbifnIntfExprRefsCreate: 26, "27": "pbifnIntfExprRefsFree", pbifnIntfExprRefsFree: 27, "28": "pbifnIntfGetGUIDR", pbifnIntfGetGUIDR: 28, "29": "pbifnIntfGetIntfT", pbifnIntfGetIntfT: 29, "30": "pbifnIntfGuidRToStr", pbifnIntfGuidRToStr: 30, "31": "pbifnIntfIsClass", pbifnIntfIsClass: 31, "32": "pbifnIntfToClass", pbifnIntfToClass: 32, "33": "pbifnIntfSetIntfL", pbifnIntfSetIntfL: 33, "34": "pbifnIntfSetIntfP", pbifnIntfSetIntfP: 34, "35": "pbifnIntfStrToGUIDR", pbifnIntfStrToGUIDR: 35, "36": "pbifnIntfQueryIntfIsT", pbifnIntfQueryIntfIsT: 36, "37": "pbifnIntfQueryIntfT", pbifnIntfQueryIntfT: 37, "38": "pbifnIs", pbifnIs: 38, "39": "pbifnIsExt", pbifnIsExt: 39, "40": "pbifnFloatToStr", pbifnFloatToStr: 40, "41": "pbifnFreeLocalVar", pbifnFreeLocalVar: 41, "42": "pbifnFreeVar", pbifnFreeVar: 42, "43": "pbifnProcType_Create", pbifnProcType_Create: 43, "44": "pbifnProcType_Equal", pbifnProcType_Equal: 44, "45": "pbifnProgramMain", pbifnProgramMain: 45, "46": "pbifnRangeCheckArrayRead", pbifnRangeCheckArrayRead: 46, "47": "pbifnRangeCheckArrayWrite", pbifnRangeCheckArrayWrite: 47, "48": "pbifnRangeCheckChar", pbifnRangeCheckChar: 48, "49": "pbifnRangeCheckInt", pbifnRangeCheckInt: 49, "50": "pbifnRangeCheckGetCharAt", pbifnRangeCheckGetCharAt: 50, "51": "pbifnRangeCheckSetCharAt", pbifnRangeCheckSetCharAt: 51, "52": "pbifnRecordEqual", pbifnRecordEqual: 52, "53": "pbifnRTTIAddField", pbifnRTTIAddField: 53, "54": "pbifnRTTIAddFields", pbifnRTTIAddFields: 54, "55": "pbifnRTTIAddMethod", pbifnRTTIAddMethod: 55, "56": "pbifnRTTIAddProperty", pbifnRTTIAddProperty: 56, "57": "pbifnRTTIInherited", pbifnRTTIInherited: 57, "58": "pbifnRTTINewClass", pbifnRTTINewClass: 58, "59": "pbifnRTTINewClassRef", pbifnRTTINewClassRef: 59, "60": "pbifnRTTINewDynArray", pbifnRTTINewDynArray: 60, "61": "pbifnRTTINewEnum", pbifnRTTINewEnum: 61, "62": "pbifnRTTINewInt", pbifnRTTINewInt: 62, "63": "pbifnRTTINewInterface", pbifnRTTINewInterface: 63, "64": "pbifnRTTINewMethodVar", pbifnRTTINewMethodVar: 64, "65": "pbifnRTTINewPointer", pbifnRTTINewPointer: 65, "66": "pbifnRTTINewProcSig", pbifnRTTINewProcSig: 66, "67": "pbifnRTTINewProcVar", pbifnRTTINewProcVar: 67, "68": "pbifnRTTINewRecord", pbifnRTTINewRecord: 68, "69": "pbifnRTTINewRefToProcVar", pbifnRTTINewRefToProcVar: 69, "70": "pbifnRTTINewSet", pbifnRTTINewSet: 70, "71": "pbifnRTTINewStaticArray", pbifnRTTINewStaticArray: 71, "72": "pbifnSetCharAt", pbifnSetCharAt: 72, "73": "pbifnSet_Clone", pbifnSet_Clone: 73, "74": "pbifnSet_Create", pbifnSet_Create: 74, "75": "pbifnSet_Difference", pbifnSet_Difference: 75, "76": "pbifnSet_Equal", pbifnSet_Equal: 76, "77": "pbifnSet_Exclude", pbifnSet_Exclude: 77, "78": "pbifnSet_GreaterEqual", pbifnSet_GreaterEqual: 78, "79": "pbifnSet_Include", pbifnSet_Include: 79, "80": "pbifnSet_Intersect", pbifnSet_Intersect: 80, "81": "pbifnSet_LowerEqual", pbifnSet_LowerEqual: 81, "82": "pbifnSet_NotEqual", pbifnSet_NotEqual: 82, "83": "pbifnSet_Reference", pbifnSet_Reference: 83, "84": "pbifnSet_SymDiffSet", pbifnSet_SymDiffSet: 84, "85": "pbifnSet_Union", pbifnSet_Union: 85, "86": "pbifnSpaceLeft", pbifnSpaceLeft: 86, "87": "pbifnStringSetLength", pbifnStringSetLength: 87, "88": "pbifnUnitInit", pbifnUnitInit: 88, "89": "pbivnExceptObject", pbivnExceptObject: 89, "90": "pbivnIntfExprRefs", pbivnIntfExprRefs: 90, "91": "pbivnIntfGUID", pbivnIntfGUID: 91, "92": "pbivnIntfKind", pbivnIntfKind: 92, "93": "pbivnIntfMaps", pbivnIntfMaps: 93, "94": "pbivnImplementation", pbivnImplementation: 94, "95": "pbivnLoop", pbivnLoop: 95, "96": "pbivnLoopEnd", pbivnLoopEnd: 96, "97": "pbivnLoopIn", pbivnLoopIn: 97, "98": "pbivnModule", pbivnModule: 98, "99": "pbivnModules", pbivnModules: 99, "100": "pbivnPtrClass", pbivnPtrClass: 100, "101": "pbivnProcOk", pbivnProcOk: 101, "102": "pbivnResourceStrings", pbivnResourceStrings: 102, "103": "pbivnResourceStringOrg", pbivnResourceStringOrg: 103, "104": "pbivnRTL", pbivnRTL: 104, "105": "pbivnRTTI", pbivnRTTI: 105, "106": "pbivnRTTIArray_Dims", pbivnRTTIArray_Dims: 106, "107": "pbivnRTTIArray_ElType", pbivnRTTIArray_ElType: 107, "108": "pbivnRTTIClassRef_InstanceType", pbivnRTTIClassRef_InstanceType: 108, "109": "pbivnRTTIEnum_EnumType", pbivnRTTIEnum_EnumType: 109, "110": "pbivnRTTIInt_MaxValue", pbivnRTTIInt_MaxValue: 110, "111": "pbivnRTTIInt_MinValue", pbivnRTTIInt_MinValue: 111, "112": "pbivnRTTIInt_OrdType", pbivnRTTIInt_OrdType: 112, "113": "pbivnRTTILocal", pbivnRTTILocal: 113, "114": "pbivnRTTIMethodKind", pbivnRTTIMethodKind: 114, "115": "pbivnRTTIPointer_RefType", pbivnRTTIPointer_RefType: 115, "116": "pbivnRTTIProcFlags", pbivnRTTIProcFlags: 116, "117": "pbivnRTTIProcVar_ProcSig", pbivnRTTIProcVar_ProcSig: 117, "118": "pbivnRTTIPropDefault", pbivnRTTIPropDefault: 118, "119": "pbivnRTTIPropIndex", pbivnRTTIPropIndex: 119, "120": "pbivnRTTIPropStored", pbivnRTTIPropStored: 120, "121": "pbivnRTTISet_CompType", pbivnRTTISet_CompType: 121, "122": "pbivnSelf", pbivnSelf: 122, "123": "pbivnTObjectDestroy", pbivnTObjectDestroy: 123, "124": "pbivnWith", pbivnWith: 124, "125": "pbitnAnonymousPostfix", pbitnAnonymousPostfix: 125, "126": "pbitnIntDouble", pbitnIntDouble: 126, "127": "pbitnTI", pbitnTI: 127, "128": "pbitnTIClass", pbitnTIClass: 128, "129": "pbitnTIClassRef", pbitnTIClassRef: 129, "130": "pbitnTIDynArray", pbitnTIDynArray: 130, "131": "pbitnTIEnum", pbitnTIEnum: 131, "132": "pbitnTIInteger", pbitnTIInteger: 132, "133": "pbitnTIInterface", pbitnTIInterface: 133, "134": "pbitnTIMethodVar", pbitnTIMethodVar: 134, "135": "pbitnTIPointer", pbitnTIPointer: 135, "136": "pbitnTIProcVar", pbitnTIProcVar: 136, "137": "pbitnTIRecord", pbitnTIRecord: 137, "138": "pbitnTIRefToProcVar", pbitnTIRefToProcVar: 138, "139": "pbitnTISet", pbitnTISet: 139, "140": "pbitnTIStaticArray", pbitnTIStaticArray: 140, "141": "pbitnUIntDouble", pbitnUIntDouble: 141};
  $mod.$rtti.$Enum("TPas2JSBuiltInName",{minvalue: 0, maxvalue: 141, ordtype: 1, enumtype: this.TPas2JSBuiltInName});
  this.Pas2JSBuiltInNames = ["arrayConcat","arrayConcatN","arrayCopy","arrayEq","length","arraySetLength","$clone","as","asExt","checkMethodCall","checkVersion","$destroy","$create","createClass","createClassExt","getChar","getNumber","getObject","getResStr","_AddRef","_Release","addIntf","intfAsClass","createInterface","createTGUID","ref","createIntfRefs","free","getIntfGUIDR","getIntfT","guidrToStr","intfIsClass","intfToClass","setIntfL","setIntfP","strToGUIDR","queryIntfIsT","queryIntfT","is","isExt","floatToStr","freeLoc","free","createCallback","eqCallback","$main","rcArrR","rcArrW","rcc","rc","rcCharAt","rcSetCharAt","$equal","addField","addFields","addMethod","addProperty","$inherited","$Class","$ClassRef","$DynArray","$Enum","$Int","$Interface","$MethodVar","$Pointer","newTIProcSig","$ProcVar","$Record","$RefToProcVar","$Set","$StaticArray","setCharAt","cloneSet","createSet","diffSet","eqSet","excludeSet","geSet","includeSet","intersectSet","leSet","neSet","refSet","symDiffSet","unionSet","spaceLeft","strSetLength","$init","$e","$ir","$guid","$kind","$intfmaps","$impl","$l","$end","$in","$mod","pas","$class","$ok","$resourcestrings","org","rtl","$rtti","dims","eltype","instancetype","enumtype","maxvalue","minvalue","ordtype","$r","methodkind","reftype","flags","procsig","Default","index","stored","comptype","Self","tObjectDestroy","$with","$a","NativeInt","tTypeInfo","tTypeInfoClass","tTypeInfoClassRef","tTypeInfoDynArray","tTypeInfoEnum","tTypeInfoInteger","tTypeInfoInterface","tTypeInfoMethodVar","tTypeInfoPointer","tTypeInfoProcVar","tTypeInfoRecord","tTypeInfoRefToProcVar","tTypeInfoSet","tTypeInfoStaticArray","NativeUInt"];
  this.JSReservedWords = ["__extends","_super","anonymous","apply","array","await","bind","break","call","case","catch","class","constructor","continue","default","delete","do","each","else","enum","escape","eval","export","extends","false","for","function","getPrototypeOf","hasOwnProperty","if","implements","import","in","instanceof","interface","isPrototypeOf","let","new","null","package","private","propertyIsEnumerable","protected","prototype","public","return","static","super","switch","this","throw","toLocaleString","toString","true","try","undefined","var","while","with","yield"];
  this.JSReservedGlobalWords = ["Array","ArrayBuffer","Boolean","DataView","Date","Error","EvalError","Float32Array","Float64Array","Generator","GeneratorFunction","Infinity","Int16Array","Int32Array","Int8Array","InternalError","JSON","Map","Math","NaN","Number","Object","Promise","Proxy","RangeError","ReferenceError","Reflect","RegExp","Set","String","Symbol","SyntaxError","TypeError","URIError","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray","WeakMap","WeakSet","arguments","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","isFinite","isNaN","parseFloat","parseInt","unescape","uneval","valueOf"];
  rtl.createClass($mod,"EPas2JS",pas.SysUtils.Exception,function () {
    this.$init = function () {
      pas.SysUtils.Exception.$init.call(this);
      this.PasElement = null;
      this.MsgNumber = 0;
      this.Args = [];
      this.Id = 0;
      this.MsgType = 0;
    };
    this.$final = function () {
      this.PasElement = undefined;
      this.Args = undefined;
      pas.SysUtils.Exception.$final.call(this);
    };
  });
  this.TPasToJsPlatform = {"0": "PlatformBrowser", PlatformBrowser: 0, "1": "PlatformNodeJS", PlatformNodeJS: 1};
  $mod.$rtti.$Enum("TPasToJsPlatform",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TPasToJsPlatform});
  $mod.$rtti.$Set("TPasToJsPlatforms",{comptype: $mod.$rtti["TPasToJsPlatform"]});
  this.PasToJsPlatformNames = ["Browser","NodeJS"];
  this.TPasToJsProcessor = {"0": "ProcessorECMAScript5", ProcessorECMAScript5: 0, "1": "ProcessorECMAScript6", ProcessorECMAScript6: 1};
  $mod.$rtti.$Enum("TPasToJsProcessor",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TPasToJsProcessor});
  $mod.$rtti.$Set("TPasToJsProcessors",{comptype: $mod.$rtti["TPasToJsProcessor"]});
  this.PasToJsProcessorNames = ["ECMAScript5","ECMAScript6"];
  this.TPas2jsBaseType = {"0": "pbtNone", pbtNone: 0, "1": "pbtJSValue", pbtJSValue: 1};
  $mod.$rtti.$Enum("TPas2jsBaseType",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TPas2jsBaseType});
  $mod.$rtti.$Set("TPas2jsBaseTypes",{comptype: $mod.$rtti["TPas2jsBaseType"]});
  this.Pas2jsBaseTypeNames = ["None","JSValue"];
  this.ClassVarModifiersType = rtl.createSet(pas.PasTree.TVariableModifier.vmClass,pas.PasTree.TVariableModifier.vmStatic);
  this.LowJSNativeInt = -4503599627370496;
  this.HighJSNativeInt = 4503599627370495;
  this.LowJSBoolean = false;
  this.HighJSBoolean = true;
  rtl.createClass($mod,"TPas2JsElementData",pas.PasTree.TPasElementBase,function () {
    this.$init = function () {
      pas.PasTree.TPasElementBase.$init.call(this);
      this.FElement = null;
      this.Owner = null;
      this.Next = null;
    };
    this.$final = function () {
      this.FElement = undefined;
      this.Owner = undefined;
      this.Next = undefined;
      pas.PasTree.TPasElementBase.$final.call(this);
    };
    this.SetElement = function (AValue) {
      var Data = null;
      if (this.FElement === AValue) return;
      if (this.FElement !== null) {
        Data = this.FElement;
        while (Data.FData !== this) if (pas.PasTree.TPasElementBase.isPrototypeOf(Data.FData)) {
          Data = Data.FData}
         else {
          throw $mod.EPas2JS.$create("Create$1",[""]);
        };
        Data.FData = this.FData;
        this.FElement.Release();
      };
      this.FElement = AValue;
      if (this.FElement !== null) {
        this.FElement.AddRef();
        Data = this.FElement;
        while (pas.PasTree.TPasElementBase.isPrototypeOf(Data.FData)) Data = Data.FData;
        if (Data.FData !== null) {
          throw $mod.EPas2JS.$create("Create$1",[""]);
        };
        Data.FData = this;
      };
    };
    this.Create$1 = function () {
    };
    this.Destroy = function () {
      this.SetElement(null);
      this.Next = null;
      this.Owner = null;
      pas.System.TObject.Destroy.call(this);
    };
  });
  $mod.$rtti.$ClassRef("TPas2JsElementDataClass",{instancetype: $mod.$rtti["TPas2JsElementData"]});
  rtl.createClass($mod,"TPas2JSModuleScope",pas.PasResolver.TPasModuleScope,function () {
  });
  rtl.createClass($mod,"TPas2JSSectionScope",pas.PasResolver.TPasSectionScope,function () {
    this.$init = function () {
      pas.PasResolver.TPasSectionScope.$init.call(this);
      this.FElevatedLocals = null;
    };
    this.$final = function () {
      this.FElevatedLocals = undefined;
      pas.PasResolver.TPasSectionScope.$final.call(this);
    };
    this.InternalAddElevatedLocal = function (Item) {
      var OldItem = null;
      var LoName = "";
      LoName = pas.SysUtils.LowerCase(Item.Identifier);
      OldItem = this.FElevatedLocals.Find(LoName);
      if (OldItem !== null) {
        Item.NextSameIdentifier = OldItem;
        this.FElevatedLocals.Remove(LoName);
      };
      this.FElevatedLocals.Add(LoName,Item);
    };
    this.OnClearElevatedLocal = function (Item, Dummy) {
      var Ident = null;
      if (Dummy === null) ;
      while (Item !== null) {
        Ident = Item;
        Item = Item.NextSameIdentifier;
        Ident = rtl.freeLoc(Ident);
      };
    };
    this.Create$1 = function () {
      pas.PasResolver.TPasSectionScope.Create$1.call(this);
      this.FElevatedLocals = pas.PasResolver.TPasResHashList.$create("Create$1");
    };
    this.Destroy = function () {
      this.FElevatedLocals.ForEachCall(rtl.createCallback(this,"OnClearElevatedLocal"),null);
      this.FElevatedLocals = null;
      pas.PasResolver.TPasSectionScope.Destroy.call(this);
    };
    this.FindElevatedLocal = function (Identifier) {
      var Result = null;
      Result = this.FElevatedLocals.Find(pas.SysUtils.LowerCase(Identifier));
      return Result;
    };
    this.AddElevatedLocal = function (Identifier, El) {
      var Result = null;
      var Item = null;
      Item = pas.PasResolver.TPasIdentifier.$create("Create");
      Item.Identifier = Identifier;
      Item.SetElement(El);
      this.InternalAddElevatedLocal(Item);
      Result = Item;
      return Result;
    };
    this.WriteElevatedLocals = function (Prefix) {
      Prefix = Prefix + "  ";
      this.FElevatedLocals.ForEachCall(rtl.createCallback(this,"OnWriteItem"),Prefix);
    };
  });
  rtl.createClass($mod,"TPas2JSInitialFinalizationScope",pas.PasResolver.TPasInitialFinalizationScope,function () {
    this.$init = function () {
      pas.PasResolver.TPasInitialFinalizationScope.$init.call(this);
      this.JS = "";
    };
  });
  rtl.createClass($mod,"TPas2JSClassScope",pas.PasResolver.TPasClassScope,function () {
    this.$init = function () {
      pas.PasResolver.TPasClassScope.$init.call(this);
      this.NewInstanceFunction = null;
      this.GUID = "";
    };
    this.$final = function () {
      this.NewInstanceFunction = undefined;
      pas.PasResolver.TPasClassScope.$final.call(this);
    };
  });
  rtl.createClass($mod,"TPas2JSProcedureScope",pas.PasResolver.TPasProcedureScope,function () {
    this.$init = function () {
      pas.PasResolver.TPasProcedureScope.$init.call(this);
      this.OverloadName = "";
      this.ResultVarName = "";
      this.BodyJS = "";
      this.GlobalJS = null;
      this.EmptyJS = false;
    };
    this.$final = function () {
      this.GlobalJS = undefined;
      pas.PasResolver.TPasProcedureScope.$final.call(this);
    };
    this.AddGlobalJS = function (JS) {
      if (this.GlobalJS === null) this.GlobalJS = pas.Classes.TStringList.$create("Create$1");
      this.GlobalJS.Add(JS);
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.GlobalJS;
        }, set: function (v) {
          this.p.GlobalJS = v;
        }});
      pas.PasResolver.TPasProcedureScope.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TPas2JSWithExprScope",pas.PasResolver.TPasWithExprScope,function () {
    this.$init = function () {
      pas.PasResolver.TPasWithExprScope.$init.call(this);
      this.WithVarName = "";
    };
  });
  rtl.createClass($mod,"TResElDataPas2JSBaseType",pas.PasResolver.TResElDataBaseType,function () {
    this.$init = function () {
      pas.PasResolver.TResElDataBaseType.$init.call(this);
      this.JSBaseType = 0;
    };
  });
  this.msAllPas2jsModeSwitchesReadOnly = rtl.createSet(pas.PScanner.TModeSwitch.msClass,pas.PScanner.TModeSwitch.msResult,pas.PScanner.TModeSwitch.msRepeatForward,pas.PScanner.TModeSwitch.msInitFinal,pas.PScanner.TModeSwitch.msOut,pas.PScanner.TModeSwitch.msDefaultPara,pas.PScanner.TModeSwitch.msProperty,pas.PScanner.TModeSwitch.msExcept,pas.PScanner.TModeSwitch.msDefaultUnicodestring,pas.PScanner.TModeSwitch.msCBlocks);
  this.msAllPas2jsModeSwitches = rtl.unionSet($mod.msAllPas2jsModeSwitchesReadOnly,rtl.createSet(pas.PScanner.TModeSwitch.msDelphi,pas.PScanner.TModeSwitch.msObjfpc,pas.PScanner.TModeSwitch.msAutoDeref,pas.PScanner.TModeSwitch.msHintDirective,pas.PScanner.TModeSwitch.msNestedComment,pas.PScanner.TModeSwitch.msExternalClass,pas.PScanner.TModeSwitch.msArrayOperators,pas.PScanner.TModeSwitch.msIgnoreAttributes,pas.PScanner.TModeSwitch.msOmitRTTI));
  this.msAllPas2jsBoolSwitchesReadOnly = rtl.createSet(pas.PScanner.TBoolSwitch.bsLongStrings);
  this.msAllPas2jsBoolSwitches = rtl.unionSet($mod.msAllPas2jsBoolSwitchesReadOnly,rtl.createSet(pas.PScanner.TBoolSwitch.bsAssertions,pas.PScanner.TBoolSwitch.bsRangeChecks,pas.PScanner.TBoolSwitch.bsWriteableConst,pas.PScanner.TBoolSwitch.bsTypeInfo,pas.PScanner.TBoolSwitch.bsOverflowChecks,pas.PScanner.TBoolSwitch.bsHints,pas.PScanner.TBoolSwitch.bsNotes,pas.PScanner.TBoolSwitch.bsWarnings,pas.PScanner.TBoolSwitch.bsMacro,pas.PScanner.TBoolSwitch.bsScopedEnums,pas.PScanner.TBoolSwitch.bsObjectChecks));
  this.po_Pas2js = rtl.unionSet(pas.PasResolver.po_Resolver,rtl.createSet(pas.PScanner.TPOption.po_AsmWhole,pas.PScanner.TPOption.po_ResolveStandardTypes,pas.PScanner.TPOption.po_ExtConstWithoutExpr,pas.PScanner.TPOption.po_StopOnUnitInterface));
  this.btAllJSBaseTypes = rtl.createSet(pas.PasResolver.TResolverBaseType.btChar,pas.PasResolver.TResolverBaseType.btWideChar,pas.PasResolver.TResolverBaseType.btString,pas.PasResolver.TResolverBaseType.btUnicodeString,pas.PasResolver.TResolverBaseType.btDouble,pas.PasResolver.TResolverBaseType.btCurrency,pas.PasResolver.TResolverBaseType.btBoolean,pas.PasResolver.TResolverBaseType.btByteBool,pas.PasResolver.TResolverBaseType.btWordBool,pas.PasResolver.TResolverBaseType.btLongBool,pas.PasResolver.TResolverBaseType.btByte,pas.PasResolver.TResolverBaseType.btShortInt,pas.PasResolver.TResolverBaseType.btWord,pas.PasResolver.TResolverBaseType.btSmallInt,pas.PasResolver.TResolverBaseType.btLongWord,pas.PasResolver.TResolverBaseType.btLongint,pas.PasResolver.TResolverBaseType.btUIntDouble,pas.PasResolver.TResolverBaseType.btIntDouble,pas.PasResolver.TResolverBaseType.btPointer);
  this.bfAllJSBaseProcs = pas.PasResolver.bfAllStandardProcs;
  this.btAllJSStrings = rtl.createSet(pas.PasResolver.TResolverBaseType.btString);
  this.btAllJSChars = rtl.createSet(pas.PasResolver.TResolverBaseType.btChar);
  this.btAllJSStringAndChars = rtl.unionSet($mod.btAllJSStrings,$mod.btAllJSChars);
  this.btAllJSFloats = rtl.createSet(pas.PasResolver.TResolverBaseType.btDouble);
  this.btAllJSBooleans = rtl.createSet(pas.PasResolver.TResolverBaseType.btBoolean);
  this.btAllJSInteger = rtl.createSet(pas.PasResolver.TResolverBaseType.btByte,pas.PasResolver.TResolverBaseType.btShortInt,pas.PasResolver.TResolverBaseType.btWord,pas.PasResolver.TResolverBaseType.btSmallInt,pas.PasResolver.TResolverBaseType.btLongWord,pas.PasResolver.TResolverBaseType.btLongint,pas.PasResolver.TResolverBaseType.btIntDouble,pas.PasResolver.TResolverBaseType.btUIntDouble,pas.PasResolver.TResolverBaseType.btCurrency);
  this.btAllJSValueSrcTypes = rtl.unionSet(rtl.unionSet(rtl.unionSet(rtl.unionSet(rtl.createSet(pas.PasResolver.TResolverBaseType.btNil,pas.PasResolver.TResolverBaseType.btUntyped,pas.PasResolver.TResolverBaseType.btPointer),$mod.btAllJSInteger),$mod.btAllJSStringAndChars),$mod.btAllJSFloats),$mod.btAllJSBooleans);
  this.btAllJSValueTypeCastTo = rtl.unionSet(rtl.unionSet(rtl.unionSet(rtl.unionSet($mod.btAllJSInteger,$mod.btAllJSStringAndChars),$mod.btAllJSFloats),$mod.btAllJSBooleans),rtl.createSet(pas.PasResolver.TResolverBaseType.btPointer));
  this.DefaultPasResolverOptions = rtl.createSet(pas.PasResolver.TPasResolverOption.proFixCaseOfOverrides,pas.PasResolver.TPasResolverOption.proClassPropertyNonStatic,pas.PasResolver.TPasResolverOption.proPropertyAsVarParam,pas.PasResolver.TPasResolverOption.proClassOfIs,pas.PasResolver.TPasResolverOption.proExtClassInstanceNoTypeMembers,pas.PasResolver.TPasResolverOption.proOpenAsDynArrays,pas.PasResolver.TPasResolverOption.proProcTypeWithoutIsNested,pas.PasResolver.TPasResolverOption.proMethodAddrAsPointer);
  $mod.$rtti.$Class("TPas2JSResolver");
  rtl.createClass($mod,"TPas2jsPasScanner",pas.PScanner.TPascalScanner,function () {
    this.$init = function () {
      pas.PScanner.TPascalScanner.$init.call(this);
      this.FCompilerVersion = "";
      this.FResolver = null;
      this.FTargetPlatform = 0;
      this.FTargetProcessor = 0;
    };
    this.$final = function () {
      this.FResolver = undefined;
      pas.PScanner.TPascalScanner.$final.call(this);
    };
    this.HandleInclude = function (Param) {
      var Self = this;
      var Result = 0;
      function SetStr(s) {
        Result = pas.PScanner.TToken.tkString;
        Self.SetCurTokenString(("'" + s) + "'");
      };
      var Year = 0;
      var Month = 0;
      var Day = 0;
      var Hour = 0;
      var Minute = 0;
      var Second = 0;
      var MilliSecond = 0;
      var i = 0;
      var Scope = null;
      if ((Param !== "") && (Param.charAt(0) === "%")) {
        var $tmp1 = pas.SysUtils.LowerCase(Param);
        if ($tmp1 === "%date%") {
          pas.SysUtils.DecodeDate(pas.SysUtils.Now(),{get: function () {
              return Year;
            }, set: function (v) {
              Year = v;
            }},{get: function () {
              return Month;
            }, set: function (v) {
              Month = v;
            }},{get: function () {
              return Day;
            }, set: function (v) {
              Day = v;
            }});
          SetStr((((pas.SysUtils.IntToStr(Year) + "\/") + pas.SysUtils.IntToStr(Month)) + "\/") + pas.SysUtils.IntToStr(Day));
          return Result;
        } else if ($tmp1 === "%time%") {
          pas.SysUtils.DecodeTime(pas.SysUtils.Now(),{get: function () {
              return Hour;
            }, set: function (v) {
              Hour = v;
            }},{get: function () {
              return Minute;
            }, set: function (v) {
              Minute = v;
            }},{get: function () {
              return Second;
            }, set: function (v) {
              Second = v;
            }},{get: function () {
              return MilliSecond;
            }, set: function (v) {
              MilliSecond = v;
            }});
          SetStr(pas.SysUtils.Format("%2d:%2d:%2d",[Hour,Minute,Second]));
          return Result;
        } else if (((($tmp1 === "%pas2jstarget%") || ($tmp1 === "%fpctarget%")) || ($tmp1 === "%pas2jstargetos%")) || ($tmp1 === "%fpctargetos%")) {
          SetStr($mod.PasToJsPlatformNames[Self.FTargetPlatform]);
          return Result;
        } else if (($tmp1 === "%pas2jstargetcpu%") || ($tmp1 === "%fpctargetcpu%")) {
          SetStr($mod.PasToJsProcessorNames[Self.FTargetProcessor]);
          return Result;
        } else if (($tmp1 === "%pas2jsversion%") || ($tmp1 === "%fpcversion%")) {
          SetStr(Self.FCompilerVersion);
          return Result;
        } else if ($tmp1 === "%line%") {
          SetStr(pas.SysUtils.IntToStr(Self.FCurRow));
          return Result;
        } else if ($tmp1 === "%currentroutine%") {
          if (Self.FResolver !== null) for (var $l2 = Self.FResolver.FScopeCount - 1; $l2 >= 0; $l2--) {
            i = $l2;
            Scope = Self.FResolver.GetScopes(i);
            if (pas.PasTree.TPasProcedure.isPrototypeOf(Scope.FElement) && (Scope.FElement.FName !== "")) {
              SetStr(Scope.FElement.FName);
              return Result;
            };
          };
          SetStr("<anonymous>");
          return Result;
        } else {
          Self.DoLog$1(pas.PScanner.TMessageType.mtWarning,1028,rtl.getResStr(pas.PScanner,"SWarnIllegalCompilerDirectiveX"),["$i " + Param],false);
        };
      };
      Result = pas.PScanner.TPascalScanner.HandleInclude.call(Self,Param);
      return Result;
    };
    this.ReadNonPascalTillEndToken = function (StopAtLineEnd) {
      var Self = this;
      var Result = 0;
      var StartPos = 0;
      var MyTokenPos = 0;
      var s = "";
      var l = 0;
      function CommitTokenPos() {
        Self.FTokenPos = MyTokenPos;
      };
      function Add() {
        var AddLen = 0;
        AddLen = MyTokenPos - StartPos;
        if (AddLen === 0) {
          Self.SetCurTokenString("")}
         else {
          Self.SetCurTokenString(Self.FCurTokenString + pas.System.Copy(Self.FCurLine,StartPos,AddLen));
          StartPos = MyTokenPos;
        };
      };
      function DoEndOfLine() {
        var Result$1 = false;
        Add();
        if (StopAtLineEnd) {
          Result = pas.PScanner.TToken.tkLineEnding;
          CommitTokenPos();
          Self.SetCurToken(pas.PScanner.TToken.tkLineEnding);
          Self.FetchLine();
          return true;
        };
        if (!Self.FetchLine()) {
          Result = pas.PScanner.TToken.tkEOF;
          Self.SetCurToken(pas.PScanner.TToken.tkEOF);
          return true;
        };
        s = Self.FCurLine;
        l = s.length;
        MyTokenPos = 1;
        StartPos = MyTokenPos;
        Result$1 = false;
        return Result$1;
      };
      Self.SetCurTokenString("");
      s = Self.FCurLine;
      l = s.length;
      MyTokenPos = Self.FTokenPos;
      StartPos = MyTokenPos;
      do {
        if (MyTokenPos > l) if (DoEndOfLine()) return Result;
        var $tmp1 = s.charAt(MyTokenPos - 1);
        if ($tmp1 === "'") {
          MyTokenPos += 1;
          do {
            if (MyTokenPos > l) Self.Error(1002,rtl.getResStr(pas.PScanner,"SErrOpenString"));
            var $tmp2 = s.charAt(MyTokenPos - 1);
            if ($tmp2 === "'") {
              MyTokenPos += 1;
              break;
            } else if (($tmp2 === "\n") || ($tmp2 === "\r")) {
              break;
            } else {
              MyTokenPos += 1;
            };
          } while (!false);
        } else if ($tmp1 === '"') {
          MyTokenPos += 1;
          do {
            if (MyTokenPos > l) Self.Error(1002,rtl.getResStr(pas.PScanner,"SErrOpenString"));
            var $tmp3 = s.charAt(MyTokenPos - 1);
            if ($tmp3 === '"') {
              MyTokenPos += 1;
              break;
            } else if (($tmp3 === "\n") || ($tmp3 === "\r")) {
              break;
            } else {
              MyTokenPos += 1;
            };
          } while (!false);
        } else if ($tmp1 === "\/") {
          MyTokenPos += 1;
          if ((MyTokenPos <= l) && (s.charAt(MyTokenPos - 1) === "\/")) {
            do {
              MyTokenPos += 1;
            } while (!((MyTokenPos > l) || (s.charCodeAt(MyTokenPos - 1) in rtl.createSet(10,13))));
          };
        } else if ((((($tmp1 >= "0") && ($tmp1 <= "9")) || (($tmp1 >= "A") && ($tmp1 <= "Z"))) || (($tmp1 >= "a") && ($tmp1 <= "z"))) || ($tmp1 === "_")) {
          if ((pas.SysUtils.CompareText(pas.System.Copy(s,MyTokenPos,3),"end") === 0) && (((MyTokenPos + 3) > l) || !(s.charCodeAt((MyTokenPos + 3) - 1) in $impl.IdentChars))) {
            Add();
            if (Self.FCurTokenString !== "") {
              Result = pas.PScanner.TToken.tkWhitespace;
              CommitTokenPos();
              Self.SetCurToken(Result);
              return Result;
            };
            Result = pas.PScanner.TToken.tkend;
            Self.SetCurTokenString(pas.System.Copy(s,MyTokenPos,3));
            MyTokenPos += 3;
            CommitTokenPos();
            Self.SetCurToken(Result);
            return Result;
          } else {
            while ((MyTokenPos <= l) && (s.charCodeAt(MyTokenPos - 1) in $impl.IdentChars)) MyTokenPos += 1;
          };
        } else {
          MyTokenPos += 1;
        };
      } while (!false);
      return Result;
    };
  });
  rtl.createClass($mod,"TPas2JSResolver",pas.PasResolver.TPasResolver,function () {
    this.cJSValueConversion = 2 * 10000;
    this.$init = function () {
      pas.PasResolver.TPasResolver.$init.call(this);
      this.FJSBaseTypes = rtl.arraySetLength(null,null,2);
      this.FExternalNames = null;
      this.FFirstElementData = null;
      this.FLastElementData = null;
      this.FOverloadScopes = null;
    };
    this.$final = function () {
      this.FJSBaseTypes = undefined;
      this.FExternalNames = undefined;
      this.FFirstElementData = undefined;
      this.FLastElementData = undefined;
      this.FOverloadScopes = undefined;
      pas.PasResolver.TPasResolver.$final.call(this);
    };
    this.GetJSBaseTypes = function (aBaseType) {
      var Result = null;
      Result = this.FJSBaseTypes[aBaseType];
      return Result;
    };
    this.InternalAdd = function (Item) {
      var OldItem = null;
      var aName = "";
      aName = Item.Identifier;
      OldItem = this.FExternalNames.Find(aName);
      if (OldItem !== null) {
        Item.NextSameIdentifier = OldItem;
        this.FExternalNames.Remove(aName);
      };
      this.FExternalNames.Add(aName,Item);
    };
    this.OnClearHashItem = function (Item, Dummy) {
      var Ident = null;
      if (Dummy === null) ;
      while (Item !== null) {
        Ident = Item;
        Item = Item.NextSameIdentifier;
        Ident = rtl.freeLoc(Ident);
      };
    };
    this.HasOverloadIndex = function (El, WithElevatedLocal) {
      var Result = false;
      var C = null;
      var ProcScope = null;
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasProperty) {
        return false}
       else if (C === pas.PasTree.TPasConst) {
        if (!WithElevatedLocal && pas.PasTree.TProcedureBody.isPrototypeOf(El.FParent)) return false;
      } else if (C === pas.PasTree.TPasClassType) {
        if (El.IsForward) return false;
      } else if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
        if (El.IsOverride()) return true;
        ProcScope = El.FData;
        if (ProcScope.DeclarationProc !== null) return false;
      };
      Result = true;
      return Result;
    };
    this.GetOverloadIndex = function (Identifier, StopAt) {
      var Result = 0;
      var El = null;
      Result = 0;
      while (Identifier !== null) {
        El = Identifier.FElement;
        Identifier = Identifier.NextSameIdentifier;
        if (El === StopAt) {
          Result = 0}
         else if (this.HasOverloadIndex(El,false)) Result += 1;
      };
      return Result;
    };
    this.GetOverloadAt = function (Identifier, Index) {
      var Result = null;
      var El = null;
      var CurIdent = null;
      var Count = 0;
      if (Identifier === null) return null;
      Count = 0;
      CurIdent = Identifier;
      while (CurIdent !== null) {
        El = CurIdent.FElement;
        CurIdent = CurIdent.NextSameIdentifier;
        if (this.HasOverloadIndex(El,false)) Count += 1;
      };
      if (Count <= Index.get()) {
        Index.set(Index.get() - 1);
        return null;
      };
      CurIdent = Identifier;
      while (CurIdent !== null) {
        if (this.HasOverloadIndex(CurIdent.FElement,false)) {
          Count -= 1;
          if (Index.get() === Count) {
            Index.set(0);
            Result = CurIdent;
            return Result;
          };
        };
        CurIdent = CurIdent.NextSameIdentifier;
      };
      return Result;
    };
    this.GetOverloadIndex$1 = function (El) {
      var Result = 0;
      var i = 0;
      var j = 0;
      var Identifier = null;
      var Scope = null;
      var CurEl = null;
      Result = 0;
      if (!this.HasOverloadIndex(El,true)) return Result;
      for (var $l1 = this.FOverloadScopes.FCount - 1; $l1 >= 0; $l1--) {
        i = $l1;
        Scope = rtl.getObject(this.FOverloadScopes.Get(i));
        if ((Scope.$class.ClassType() === $mod.TPas2JSSectionScope) && (i < (this.FOverloadScopes.FCount - 1))) {
          Identifier = Scope.FindElevatedLocal(El.FName);
          j = 0;
          while (Identifier !== null) {
            CurEl = Identifier.FElement;
            Identifier = Identifier.NextSameIdentifier;
            if (CurEl === El) {
              j = 0}
             else j += 1;
          };
          Result += j;
        };
        Identifier = Scope.FindLocalIdentifier(El.FName);
        Result += this.GetOverloadIndex(Identifier,El);
      };
      Identifier = this.FindExternalName(El.FName);
      Result += this.GetOverloadIndex(Identifier,El);
      return Result;
    };
    this.GetOverloadAt$1 = function (aName, Index) {
      var Result = null;
      var i = 0;
      var Scope = null;
      Result = null;
      for (var $l1 = this.FOverloadScopes.FCount - 1; $l1 >= 0; $l1--) {
        i = $l1;
        Scope = rtl.getObject(this.FOverloadScopes.Get(i));
        if ((Scope.$class.ClassType() === $mod.TPas2JSSectionScope) && (i < (this.FOverloadScopes.FCount - 1))) {
          Result = Scope.FindElevatedLocal(aName);
          Result = this.GetOverloadAt(Result,{get: function () {
              return Index;
            }, set: function (v) {
              Index = v;
            }});
          if (Result !== null) return Result;
        };
        Result = Scope.FindLocalIdentifier(aName);
        Result = this.GetOverloadAt(Result,{get: function () {
            return Index;
          }, set: function (v) {
            Index = v;
          }});
        if (Result !== null) return Result;
      };
      Result = this.FindExternalName(aName);
      Result = this.GetOverloadAt(Result,{get: function () {
          return Index;
        }, set: function (v) {
          Index = v;
        }});
      return Result;
    };
    this.RenameOverload = function (El) {
      var Self = this;
      var Result = false;
      var OverloadIndex = 0;
      function GetDuplicate() {
        var Result = null;
        var Duplicate = null;
        Duplicate = Self.GetOverloadAt$1(El.FName,0);
        Result = Duplicate.FElement;
        return Result;
      };
      var NewName = "";
      var Duplicate = null;
      var ProcScope = null;
      OverloadIndex = Self.GetOverloadIndex$1(El);
      if (OverloadIndex === 0) return false;
      if ((El.$class.ClassType() === pas.PasTree.TPasClassFunction) && (El.FParent.FData.NewInstanceFunction === El)) {
        Duplicate = GetDuplicate();
        Self.RaiseMsg(20170324234324,4019,rtl.getResStr(pas.FPPas2Js,"sNewInstanceFunctionMustNotHaveOverloadAtX"),[Self.GetElementSourcePosStr(Duplicate)],El);
      };
      if (El.Visibility === pas.PasTree.TPasMemberVisibility.visPublished) {
        Duplicate = GetDuplicate();
        Self.RaiseMsg(20170413220924,3009,rtl.getResStr(pas.PasResolveEval,"sDuplicateIdentifier"),[Duplicate.FName,Self.GetElementSourcePosStr(Duplicate)],El);
      };
      NewName = (El.FName + "$") + pas.SysUtils.IntToStr(OverloadIndex);
      if ($mod.TPas2JSProcedureScope.isPrototypeOf(El.FData)) {
        ProcScope = El.FData;
        ProcScope.OverloadName = NewName;
        if (ProcScope.DeclarationProc !== null) Self.RaiseInternalError(20180322233222,pas.PasResolver.GetElementDbgPath(El));
        if (ProcScope.ImplProc !== null) ProcScope.ImplProc.FData.OverloadName = NewName;
      } else El.FName = NewName;
      Result = true;
      return Result;
    };
    this.RenameOverloadsInSection = function (aSection) {
      var IntfSection = null;
      if (aSection === null) return;
      IntfSection = null;
      if (aSection.$class.ClassType() === pas.PasTree.TImplementationSection) {
        IntfSection = this.FRootElement.InterfaceSection;
        this.PushOverloadScope(rtl.as(IntfSection.FData,pas.PasResolver.TPasIdentifierScope));
      };
      this.PushOverloadScope(rtl.as(aSection.FData,pas.PasResolver.TPasIdentifierScope));
      this.RenameOverloads(aSection,aSection.Declarations);
      this.RenameSubOverloads(aSection.Declarations);
      this.PopOverloadScope();
      if (IntfSection !== null) this.PopOverloadScope();
    };
    this.RenameOverloads = function (DeclEl, Declarations) {
      var i = 0;
      var El = null;
      var Proc = null;
      var ProcScope = null;
      var OvrProcScope = null;
      var ImplProcScope = null;
      if (DeclEl === null) ;
      for (var $l1 = 0, $end2 = Declarations.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        El = rtl.getObject(Declarations.Get(i));
        if (pas.PasTree.TPasProcedure.isPrototypeOf(El)) {
          Proc = El;
          ProcScope = rtl.as(Proc.FData,$mod.TPas2JSProcedureScope);
          if (ProcScope.DeclarationProc !== null) {
            continue}
           else if (Proc.IsOverride()) {
            if (ProcScope.OverriddenProc === null) this.RaiseInternalError(20171205183502,"");
            OvrProcScope = ProcScope.OverriddenProc.FData;
            if (OvrProcScope.OverloadName !== "") {
              ProcScope.OverloadName = OvrProcScope.OverloadName;
              if (ProcScope.ImplProc !== null) {
                ImplProcScope = ProcScope.ImplProc.FData;
                ImplProcScope.OverloadName = ProcScope.OverloadName;
              };
            };
            continue;
          } else if (Proc.IsExternal()) {
            continue;
          };
          this.RenameOverload(Proc);
        };
      };
    };
    this.RenameSubOverloads = function (Declarations) {
      var i = 0;
      var OldScopeCount = 0;
      var El = null;
      var Proc = null;
      var ProcScope = null;
      var ClassScope = null;
      var aScope = null;
      var ClassEl = null;
      var C = null;
      for (var $l1 = 0, $end2 = Declarations.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        El = rtl.getObject(Declarations.Get(i));
        C = El.$class.ClassType();
        if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
          Proc = El;
          ProcScope = rtl.as(Proc.FData,pas.PasResolver.TPasProcedureScope);
          if (Proc.Body !== null) {
            this.PushOverloadScope(ProcScope);
            this.RenameOverloads(Proc.Body,Proc.Body.Declarations);
            this.RenameSubOverloads(Proc.Body.Declarations);
            this.PopOverloadScope();
          };
        } else if (C === pas.PasTree.TPasClassType) {
          ClassEl = El;
          if (ClassEl.IsForward) continue;
          ClassScope = rtl.as(El.FData,$mod.TPas2JSClassScope);
          OldScopeCount = this.FOverloadScopes.FCount;
          aScope = ClassScope;
          do {
            this.PushOverloadScope(aScope);
            aScope = aScope.AncestorScope;
          } while (!(aScope === null));
          this.RenameOverloads(ClassEl,ClassEl.Members);
          this.RenameSubOverloads(ClassEl.Members);
          while (this.FOverloadScopes.FCount > OldScopeCount) this.PopOverloadScope();
        } else if (C === pas.PasTree.TPasConst) {
          this.RenameOverload(El)}
         else if (C.InheritsFrom(pas.PasTree.TPasVariable) && (El.FParent.$class.ClassType() === pas.PasTree.TPasClassType)) this.RenameOverload(El);
      };
    };
    this.PushOverloadScope = function (Scope) {
      this.FOverloadScopes.Add(Scope);
    };
    this.PopOverloadScope = function () {
      this.FOverloadScopes.Delete(this.FOverloadScopes.FCount - 1);
    };
    this.AddType = function (El) {
      pas.PasResolver.TPasResolver.AddType.call(this,El);
    };
    this.ResolveImplAsm = function (El) {
      var Lines = null;
      Lines = El.FTokens;
      if (Lines === null) return;
    };
    this.ResolveNameExpr = function (El, aName, Access) {
      var Self = this;
      function CheckTObjectFree(Ref) {
        var Bin = null;
        var Left = null;
        var LeftResolved = new pas.PasResolver.TPasResolverResult();
        var IdentEl = null;
        var C = null;
        if (!Self.IsTObjectFreeMethod(El)) return;
        if (Ref.WithExprScope !== null) {
          if (Self.GetNewInstanceExpr(Ref.WithExprScope.Expr) !== null) return;
          Self.RaiseMsg(20170517092407,4023,rtl.getResStr(pas.FPPas2Js,"sFreeNeedsVar"),[],El);
        };
        C = El.FParent.$class.ClassType();
        if (C === pas.PasTree.TBinaryExpr) {
          Bin = El.FParent;
          if ((Bin.right !== El) || (Bin.OpCode !== pas.PasTree.TExprOpCode.eopSubIdent)) Self.RaiseMsg(20170516151950,4023,rtl.getResStr(pas.FPPas2Js,"sFreeNeedsVar"),[],El);
          if (pas.PasResolver.TResolvedReferenceFlag.rrfImplicitCallWithoutParams in Ref.Flags) {}
          else if (pas.PasTree.TParamsExpr.isPrototypeOf(Bin.FParent)) {
            if (pas.PasTree.TPasExpr.isPrototypeOf(Bin.FParent.FParent)) Self.RaiseMsg(20170516161345,4023,rtl.getResStr(pas.FPPas2Js,"sFreeNeedsVar"),[],El);
          } else if (pas.PasTree.TPasImplElement.isPrototypeOf(Bin.FParent)) {}
          else {
            Self.RaiseMsg(20170516160347,4023,rtl.getResStr(pas.FPPas2Js,"sFreeNeedsVar"),[],El);
          };
          Left = Bin.left;
          Self.ComputeElement(Left,{get: function () {
              return LeftResolved;
            }, set: function (v) {
              LeftResolved = v;
            }},{},null);
          if (!(pas.PasResolver.TPasResolverResultFlag.rrfReadable in LeftResolved.Flags)) Self.RaiseMsg(20170516152300,4023,rtl.getResStr(pas.FPPas2Js,"sFreeNeedsVar"),[],El);
          if (!(pas.PasResolver.TPasResolverResultFlag.rrfWritable in LeftResolved.Flags)) Self.RaiseMsg(20170516152307,4023,rtl.getResStr(pas.FPPas2Js,"sFreeNeedsVar"),[],El);
          IdentEl = LeftResolved.IdentEl;
          if (IdentEl === null) Self.RaiseMsg(20170516152401,4023,rtl.getResStr(pas.FPPas2Js,"sFreeNeedsVar"),[],El);
          if (IdentEl.$class.ClassType() === pas.PasTree.TPasArgument) return;
          if ((IdentEl.$class.ClassType() === pas.PasTree.TPasVariable) || (IdentEl.$class.ClassType() === pas.PasTree.TPasConst)) return;
          if (IdentEl.$class.ClassType() === pas.PasTree.TPasResultElement) return;
          Self.RaiseMsg(20170516152455,4023,rtl.getResStr(pas.FPPas2Js,"sFreeNeedsVar"),[],El);
        } else if (C.InheritsFrom(pas.PasTree.TPasImplBlock)) {
          return;
        };
        Self.RaiseMsg(20170516152454,4023,rtl.getResStr(pas.FPPas2Js,"sFreeNeedsVar"),[],El);
      };
      function CheckResultEl(Ref) {
        var Func = null;
        var CurEl = null;
        var Lvl = 0;
        var ProcScope = null;
        var CurProcScope = null;
        Lvl = 0;
        CurEl = El;
        CurProcScope = null;
        while (CurEl !== null) {
          if (pas.PasTree.TPasFunction.isPrototypeOf(CurEl)) {
            Lvl += 1;
            ProcScope = rtl.as(CurEl.FData,$mod.TPas2JSProcedureScope);
            Func = rtl.as(ProcScope.DeclarationProc,pas.PasTree.TPasFunction);
            if (Func === null) Func = CurEl;
            if (Lvl === 1) {
              if (Func.GetFT().ResultEl === Ref.FDeclaration) return;
              if (ProcScope.ResultVarName !== "") return;
              CurProcScope = ProcScope;
            };
          };
          CurEl = CurEl.FParent;
        };
        if (Lvl < 2) Self.RaiseNotYetImplemented(20171003112020,El,"");
        CurProcScope.ResultVarName = (pas.PasResolver.ResolverResultVar + "$") + pas.SysUtils.IntToStr(Lvl - 1);
      };
      var Ref = null;
      pas.PasResolver.TPasResolver.ResolveNameExpr.call(Self,El,aName,Access);
      if (pas.PasResolver.TResolvedReference.isPrototypeOf(El.FData)) {
        Ref = El.FData;
        if (pas.SysUtils.CompareText(aName,"free") === 0) {
          CheckTObjectFree(Ref)}
         else if (pas.PasTree.TPasResultElement.isPrototypeOf(Ref.FDeclaration)) {
          CheckResultEl(Ref)}
         else if (Self.IsExternalClassConstructor(Ref.FDeclaration)) Self.CheckExternalClassConstructor(Ref);
      };
    };
    this.ResolveFuncParamsExpr = function (Params, Access) {
      var Value = null;
      var Ref = null;
      pas.PasResolver.TPasResolver.ResolveFuncParamsExpr.call(this,Params,Access);
      Value = Params.Value;
      if (pas.PasResolver.TResolvedReference.isPrototypeOf(Value.FData)) {
        Ref = Value.FData;
        if (this.IsExternalClassConstructor(Ref.FDeclaration)) this.CheckExternalClassConstructor(Ref);
      };
    };
    this.FinishInterfaceSection = function (Section) {
      pas.PasResolver.TPasResolver.FinishInterfaceSection.call(this,Section);
      if (this.FOverloadScopes === null) {
        this.FOverloadScopes = pas.Classes.TFPList.$create("Create");
        this.RenameOverloadsInSection(Section);
      };
    };
    this.FinishTypeSection = function (El) {
      var i = 0;
      var Decl = null;
      var C = null;
      var TypeEl = null;
      pas.PasResolver.TPasResolver.FinishTypeSection.call(this,El);
      for (var $l1 = 0, $end2 = El.Declarations.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Decl = rtl.getObject(El.Declarations.Get(i));
        C = Decl.$class.ClassType();
        if (C === pas.PasTree.TPasPointerType) {
          TypeEl = this.ResolveAliasType(Decl.DestType);
          if (TypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {}
          else this.RaiseMsg(20180423105726,4002,rtl.getResStr(pas.FPPas2Js,"sNotSupportedX"),["pointer of " + Decl.DestType.FName],Decl);
        };
      };
    };
    this.FinishModule = function (CurModule) {
      var ModuleClass = null;
      pas.PasResolver.TPasResolver.FinishModule.call(this,CurModule);
      if (this.FOverloadScopes === null) this.FOverloadScopes = pas.Classes.TFPList.$create("Create");
      try {
        ModuleClass = CurModule.$class.ClassType();
        if (ModuleClass === pas.PasTree.TPasModule) {
          this.RenameOverloadsInSection(CurModule.ImplementationSection)}
         else if (ModuleClass === pas.PasTree.TPasProgram) {
          this.RenameOverloadsInSection(CurModule.ProgramSection)}
         else if (CurModule.$class.ClassType() === pas.PasTree.TPasLibrary) {
          this.RenameOverloadsInSection(CurModule.LibrarySection)}
         else this.RaiseNotYetImplemented(20170221000032,CurModule,"");
      } finally {
        pas.SysUtils.FreeAndNil({p: this, get: function () {
            return this.p.FOverloadScopes;
          }, set: function (v) {
            this.p.FOverloadScopes = v;
          }});
      };
    };
    this.FinishEnumType = function (El) {
      var i = 0;
      var EnumValue = null;
      pas.PasResolver.TPasResolver.FinishEnumType.call(this,El);
      for (var $l1 = 0, $end2 = El.Values.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        EnumValue = rtl.getObject(El.Values.Get(i));
        if (EnumValue.Value !== null) this.RaiseNotYetImplemented(20180126202434,EnumValue,"enum const");
      };
    };
    this.FinishSetType = function (El) {
      var TypeEl = null;
      var C = null;
      var RangeValue = null;
      var bt = 0;
      pas.PasResolver.TPasResolver.FinishSetType.call(this,El);
      TypeEl = this.ResolveAliasType(El.EnumType);
      C = TypeEl.$class.ClassType();
      if (C === pas.PasTree.TPasEnumType) {
        return}
       else if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
        if (pas.PasResolver.TResElDataBaseType.isPrototypeOf(TypeEl.FData)) {
          bt = TypeEl.FData.BaseType;
          if (bt in rtl.createSet(pas.PasResolver.TResolverBaseType.btBoolean,pas.PasResolver.TResolverBaseType.btByte,pas.PasResolver.TResolverBaseType.btShortInt,pas.PasResolver.TResolverBaseType.btSmallInt,pas.PasResolver.TResolverBaseType.btWord,pas.PasResolver.TResolverBaseType.btChar,pas.PasResolver.TResolverBaseType.btWideChar)) return;
          this.RaiseMsg(20171110150000,4002,rtl.getResStr(pas.FPPas2Js,"sNotSupportedX"),["set of " + TypeEl.FName],El);
        };
      } else if (C === pas.PasTree.TPasRangeType) {
        RangeValue = this.Eval(TypeEl.RangeExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
        try {
          var $tmp1 = RangeValue.Kind;
          if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeInt) {
            if ((RangeValue.RangeEnd - RangeValue.RangeStart) > 0xffff) {
              this.RaiseMsg(20171110150159,4002,rtl.getResStr(pas.FPPas2Js,"sNotSupportedX"),["set of " + TypeEl.FName],El);
            };
            return;
          } else {
            this.RaiseMsg(20171110145211,4002,rtl.getResStr(pas.FPPas2Js,"sNotSupportedX"),["set of " + TypeEl.FName],El);
          };
        } finally {
          pas.PasResolveEval.ReleaseEvalValue({get: function () {
              return RangeValue;
            }, set: function (v) {
              RangeValue = v;
            }});
        };
      };
      this.RaiseMsg(20170415182320,4002,rtl.getResStr(pas.FPPas2Js,"sNotSupportedX"),["set of " + TypeEl.FName],El);
    };
    this.FinishRecordType = function (El) {
      if ((El.Variants !== null) && (El.Variants.FCount > 0)) this.RaiseMsg(20180104205309,3081,rtl.getResStr(pas.PasResolveEval,"sXIsNotSupported"),["variant record"],rtl.getObject(El.Variants.Get(0)));
      pas.PasResolver.TPasResolver.FinishRecordType.call(this,El);
    };
    this.FinishClassType = function (El) {
      var Scope = null;
      var CurScope = null;
      var Value = null;
      pas.PasResolver.TPasResolver.FinishClassType.call(this,El);
      if (El.IsExternal) {
        if (El.ExternalName === "") this.RaiseMsg(20170321151109,4012,rtl.getResStr(pas.FPPas2Js,"sMissingExternalName"),[],El);
        this.AddExternalPath(El.ExternalName,El);
      };
      if (El.IsPacked()) this.RaiseMsg(20180326155616,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),["packed"],El);
      if (El.IsForward) return;
      Scope = rtl.as(El.FData,$mod.TPas2JSClassScope);
      var $tmp1 = El.ObjKind;
      if ($tmp1 === pas.PasTree.TPasObjKind.okInterface) {
        if (!(El.InterfaceType in rtl.createSet(pas.PasTree.TPasClassInterfaceType.citCom,pas.PasTree.TPasClassInterfaceType.citCorba))) this.RaiseMsg(20180326155612,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),[pas.PasTree.InterfaceTypeNames[El.InterfaceType]],El);
        if (El.GUIDExpr !== null) {
          Value = this.Eval(El.GUIDExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
          try {
            var $tmp2 = Value.Kind;
            if ($tmp2 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
              Scope.GUID = Value.S}
             else {
              this.RaiseXExpectedButYFound(20180326160602,"string literal",El.GUIDExpr.ElementTypeName(),El.GUIDExpr);
            };
          } finally {
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }});
          };
        } else {
          Scope.GUID = this.GenerateGUID(El);
        };
        CurScope = Scope;
        do {
          CurScope = CurScope.AncestorScope;
          if (CurScope === null) break;
          if (pas.SysUtils.SameText(CurScope.GUID,Scope.GUID)) this.RaiseMsg(20180330232206,4024,rtl.getResStr(pas.FPPas2Js,"sDuplicateGUIDXInYZ"),[Scope.GUID,El.FName,CurScope.FElement.FName],El);
        } while (!false);
      };
    };
    this.FinishArrayType = function (El) {
      var ElType = null;
      pas.PasResolver.TPasResolver.FinishArrayType.call(this,El);
      ElType = this.ResolveAliasType(El.ElType);
      while (pas.PasTree.TPasArrayType.isPrototypeOf(ElType)) ElType = this.ResolveAliasType(ElType.ElType);
      if (this.IsInterfaceType$1(ElType,pas.PasTree.TPasClassInterfaceType.citCom)) this.RaiseMsg(20180404134515,4002,rtl.getResStr(pas.FPPas2Js,"sNotSupportedX"),["array of COM-interface"],El);
    };
    this.FinishAncestors = function (aClass) {
      var IntfList = null;
      var i = 0;
      var j = 0;
      var Scope = null;
      var IntfScope = null;
      var IntfType = null;
      var OrigIntfType = null;
      var GUIDs = null;
      pas.PasResolver.TPasResolver.FinishAncestors.call(this,aClass);
      Scope = aClass.FData;
      if (Scope === null) return;
      IntfList = aClass.Interfaces;
      GUIDs = pas.Classes.TStringList.$create("Create$1");
      try {
        for (var $l1 = 0, $end2 = IntfList.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          OrigIntfType = rtl.getObject(IntfList.Get(i));
          IntfType = this.ResolveAliasType(OrigIntfType);
          IntfScope = IntfType.FData;
          j = GUIDs.IndexOf(IntfScope.GUID);
          if (j >= 0) this.RaiseMsg(20180330231220,4024,rtl.getResStr(pas.FPPas2Js,"sDuplicateGUIDXInYZ"),[IntfScope.GUID,OrigIntfType.FName,GUIDs.GetObject(j).FName],aClass);
          GUIDs.AddObject(IntfScope.GUID,OrigIntfType);
        };
      } finally {
        GUIDs = rtl.freeLoc(GUIDs);
      };
    };
    var ClassFieldModifiersAllowed = rtl.createSet(pas.PasTree.TVariableModifier.vmClass,pas.PasTree.TVariableModifier.vmStatic,pas.PasTree.TVariableModifier.vmExternal,pas.PasTree.TVariableModifier.vmPublic);
    var RecordVarModifiersAllowed = rtl.createSet(pas.PasTree.TVariableModifier.vmExternal);
    var LocalVarModifiersAllowed = {};
    var ImplementationVarModifiersAllowed = rtl.createSet(pas.PasTree.TVariableModifier.vmExternal);
    var SectionVarModifiersAllowed = rtl.createSet(pas.PasTree.TVariableModifier.vmExternal,pas.PasTree.TVariableModifier.vmPublic);
    this.FinishVariable = function (El) {
      var Self = this;
      function RaiseVarModifierNotSupported(Allowed) {
        var s = "";
        var m = 0;
        s = "";
        for (m = 0; m <= 5; m++) if ((m in El.VarModifiers) && !(m in Allowed)) {
          s = pas.PasTree.TVariableModifier[m];
          Self.RaiseMsg(20170322134418,4015,rtl.getResStr(pas.FPPas2Js,"sInvalidVariableModifier"),[pas.PasTree.VariableModifierNames[m]],El);
        };
      };
      var ExtName = "";
      var ParentC = null;
      var AbsExpr = null;
      var ResolvedAbsol = new pas.PasResolver.TPasResolverResult();
      var AbsIdent = null;
      var TypeEl = null;
      var ElTypeEl = null;
      var GUID = new pas.System.TGuid();
      var i = 0;
      var SectionScope = null;
      pas.PasResolver.TPasResolver.FinishVariable.call(Self,El);
      ParentC = El.FParent.$class.ClassType();
      if (El.AbsoluteExpr !== null) {
        if (pas.PasTree.TVariableModifier.vmExternal in El.VarModifiers) Self.RaiseMsg(20171226105002,3052,rtl.getResStr(pas.PasResolveEval,"sXModifierMismatchY"),["absolute","external"],El.AbsoluteExpr);
        AbsExpr = El.AbsoluteExpr;
        Self.ComputeElement(AbsExpr,{get: function () {
            return ResolvedAbsol;
          }, set: function (v) {
            ResolvedAbsol = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        AbsIdent = ResolvedAbsol.IdentEl;
        if (ParentC === pas.PasTree.TProcedureBody) {
          if (pas.PasTree.TProcedureBody.isPrototypeOf(AbsIdent.FParent) || pas.PasTree.TPasArgument.isPrototypeOf(AbsIdent)) {}
          else {
            Self.RaiseMsg(20171226102424,4009,rtl.getResStr(pas.FPPas2Js,"sInvalidAbsoluteLocation"),[],El.AbsoluteExpr);
          };
        } else {
          Self.RaiseMsg(20170728133340,4015,rtl.getResStr(pas.FPPas2Js,"sInvalidVariableModifier"),["absolute"],El);
        };
      };
      if (ParentC === pas.PasTree.TPasClassType) {
        RaiseVarModifierNotSupported(ClassFieldModifiersAllowed);
        if (El.FParent.IsExternal) {
          if (El.Visibility === pas.PasTree.TPasMemberVisibility.visPublished) Self.RaiseMsg(20170413221516,3053,rtl.getResStr(pas.PasResolveEval,"sSymbolCannotBePublished"),[],El);
          if (!(pas.PasTree.TVariableModifier.vmExternal in El.VarModifiers)) {
            if ((El.$class.ClassType() === pas.PasTree.TPasVariable) || (El.$class.ClassType() === pas.PasTree.TPasConst)) {
              if (El.ExportName !== null) Self.RaiseMsg(20170322134321,4015,rtl.getResStr(pas.FPPas2Js,"sInvalidVariableModifier"),["export name"],El.ExportName);
              El.ExportName = pas.PasTree.TPrimitiveExpr.$create("Create$3",[El,pas.PasTree.TPasExprKind.pekString,("'" + El.FName) + "'"]);
            };
            El.VarModifiers = rtl.includeSet(El.VarModifiers,pas.PasTree.TVariableModifier.vmExternal);
          };
          if ((El.$class.ClassType() === pas.PasTree.TPasConst) && (El.Expr !== null)) El.IsConst = true;
        };
      } else if (ParentC === pas.PasTree.TPasRecordType) {
        RaiseVarModifierNotSupported(RecordVarModifiersAllowed);
        if (Self.IsInterfaceType$1(El.VarType,pas.PasTree.TPasClassInterfaceType.citCom)) Self.RaiseMsg(20180404135105,4002,rtl.getResStr(pas.FPPas2Js,"sNotSupportedX"),["COM-interface as record member"],El);
        if ((El.$class.ClassType() === pas.PasTree.TPasConst) && (El.Expr !== null)) El.IsConst = true;
      } else if (ParentC === pas.PasTree.TProcedureBody) {
        RaiseVarModifierNotSupported(LocalVarModifiersAllowed);
        if ((El.$class.ClassType() === pas.PasTree.TPasConst) && El.IsConst) {
          i = Self.FScopeCount - 1;
          while ((i >= 0) && !$mod.TPas2JSSectionScope.isPrototypeOf(Self.GetScopes(i))) i -= 1;
          if (i < 0) Self.RaiseNotYetImplemented(20180420131358,El,"");
          SectionScope = Self.GetScopes(i);
          SectionScope.AddElevatedLocal(El.FName,El);
        };
      } else if (ParentC === pas.PasTree.TImplementationSection) {
        RaiseVarModifierNotSupported(ImplementationVarModifiersAllowed)}
       else if (ParentC.InheritsFrom(pas.PasTree.TPasSection)) {
        RaiseVarModifierNotSupported(SectionVarModifiersAllowed);
      } else {
        Self.RaiseNotYetImplemented(20170324151259,El,"");
      };
      if (pas.PasTree.TVariableModifier.vmExternal in El.VarModifiers) {
        if (El.LibraryName !== null) Self.RaiseMsg(20170227094227,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),["library"],El.ExportName);
        if (El.ExportName === null) Self.RaiseMsg(20170227100750,4012,rtl.getResStr(pas.FPPas2Js,"sMissingExternalName"),[],El);
        ExtName = Self.ComputeConstString(El.ExportName,true,true);
        if ((El.Visibility === pas.PasTree.TPasMemberVisibility.visPublished) && (ExtName !== El.FName)) Self.RaiseMsg(20170407002940,4014,rtl.getResStr(pas.FPPas2Js,"sPublishedNameMustMatchExternal"),[],El.ExportName);
        if (pas.PasTree.TPasSection.isPrototypeOf(El.FParent) || ((El.$class.ClassType() === pas.PasTree.TPasConst) && pas.PasTree.TPasProcedure.isPrototypeOf(El.FParent))) Self.AddExternalPath(ExtName,El.ExportName);
      };
      if (El.VarType !== null) {
        TypeEl = Self.ResolveAliasType(El.VarType);
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          ElTypeEl = Self.ResolveAliasType(TypeEl.DestType);
          if (ElTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {}
          else Self.RaiseMsg(20180423110113,4002,rtl.getResStr(pas.FPPas2Js,"sNotSupportedX"),["pointer"],El);
        };
        if (El.Expr !== null) {
          if (TypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
            if (Self.GetAssignGUIDString(TypeEl,El.Expr,{get: function () {
                return GUID;
              }, set: function (v) {
                GUID = v;
              }})) ;
          };
        };
      };
    };
    this.FinishArgument = function (El) {
      var TypeEl = null;
      var ElTypeEl = null;
      pas.PasResolver.TPasResolver.FinishArgument.call(this,El);
      if (El.ArgType !== null) {
        TypeEl = this.ResolveAliasType(El.ArgType);
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          ElTypeEl = this.ResolveAliasType(TypeEl.DestType);
          if (ElTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {}
          else this.RaiseMsg(20180423110239,4002,rtl.getResStr(pas.FPPas2Js,"sNotSupportedX"),["pointer"],El);
        };
      };
    };
    this.FinishProcedureType = function (El) {
      var Proc = null;
      var pm = 0;
      var ExtName = "";
      var C = null;
      var AClass = null;
      var ClassScope = null;
      var ptm = 0;
      var TypeEl = null;
      var ElTypeEl = null;
      if (pas.PasTree.TPasRecordType.isPrototypeOf(El.FParent.FParent)) this.RaiseNotYetImplemented(20181107183603,El,"methods in records");
      pas.PasResolver.TPasResolver.FinishProcedureType.call(this,El);
      if (pas.PasTree.TPasFunctionType.isPrototypeOf(El)) {
        TypeEl = this.ResolveAliasType(El.ResultEl.ResultType);
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          ElTypeEl = this.ResolveAliasType(TypeEl.DestType);
          if (ElTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {}
          else this.RaiseMsg(20180423110824,4002,rtl.getResStr(pas.FPPas2Js,"sNotSupportedX"),["pointer"],El);
        };
      };
      if (pas.PasTree.TPasProcedure.isPrototypeOf(El.FParent)) {
        Proc = El.FParent;
        if (Proc.GetCallingConvention() !== pas.PasTree.TCallingConvention.ccDefault) this.RaiseMsg(20170211214731,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),[pas.PasTree.cCallingConventions[Proc.GetCallingConvention()]],Proc);
        for (pm = 0; pm <= 17; pm++) if ((pm in Proc.FModifiers) && !(pm in rtl.createSet(pas.PasTree.TProcedureModifier.pmVirtual,pas.PasTree.TProcedureModifier.pmAbstract,pas.PasTree.TProcedureModifier.pmOverride,pas.PasTree.TProcedureModifier.pmOverload,pas.PasTree.TProcedureModifier.pmReintroduce,pas.PasTree.TProcedureModifier.pmInline,pas.PasTree.TProcedureModifier.pmAssembler,pas.PasTree.TProcedureModifier.pmPublic,pas.PasTree.TProcedureModifier.pmExternal,pas.PasTree.TProcedureModifier.pmForward))) this.RaiseNotYetImplemented(20170208142159,El,"modifier " + pas.PasTree.ModifierNames[pm]);
        for (ptm = 0; ptm <= 4; ptm++) if ((ptm in Proc.ProcType.Modifiers) && !(ptm in rtl.createSet(pas.PasTree.TProcTypeModifier.ptmOfObject,pas.PasTree.TProcTypeModifier.ptmVarargs))) this.RaiseNotYetImplemented(20170411171454,El,"modifier " + pas.PasTree.ProcTypeModifiers[ptm]);
        if (rtl.leSet(rtl.createSet(pas.PasTree.TProcedureModifier.pmPublic,pas.PasTree.TProcedureModifier.pmExternal),Proc.FModifiers)) this.RaiseMsg(20170324150149,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[Proc.ElementTypeName(),"public, external"],Proc);
        if (Proc.PublicName !== null) this.RaiseMsg(20170324150417,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),["public name"],Proc.PublicName);
        if (Proc.FParent.$class.ClassType() === pas.PasTree.TPasClassType) {
          AClass = Proc.FParent;
          ClassScope = rtl.as(AClass.FData,$mod.TPas2JSClassScope);
          if (AClass.IsExternal) {
            if (!(pas.PasTree.TProcedureModifier.pmExternal in Proc.FModifiers)) {
              if (Proc.LibrarySymbolName !== null) this.RaiseMsg(20170322142158,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[Proc.ElementTypeName(),"symbol name"],Proc.LibrarySymbolName);
              Proc.FModifiers = rtl.unionSet(Proc.FModifiers,rtl.createSet(pas.PasTree.TProcedureModifier.pmExternal));
              Proc.LibrarySymbolName = pas.PasTree.TPrimitiveExpr.$create("Create$3",[Proc,pas.PasTree.TPasExprKind.pekString,("'" + Proc.FName) + "'"]);
            };
            if (Proc.Visibility === pas.PasTree.TPasMemberVisibility.visPublished) this.RaiseMsg(20170413221327,3053,rtl.getResStr(pas.PasResolveEval,"sSymbolCannotBePublished"),[],Proc);
            C = Proc.$class.ClassType();
            if ((((C === pas.PasTree.TPasProcedure) || (C === pas.PasTree.TPasFunction)) || (C === pas.PasTree.TPasClassProcedure)) || (C === pas.PasTree.TPasClassFunction)) {}
            else if (C === pas.PasTree.TPasConstructor) {
              if (Proc.IsVirtual()) this.RaiseMsg(20170323100447,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[Proc.ElementTypeName(),"virtual,external"],Proc);
              if (pas.SysUtils.CompareText(Proc.FName,"new") === 0) {
                ExtName = this.ComputeConstString(Proc.LibrarySymbolName,true,true);
                if (ExtName !== Proc.FName) this.RaiseMsg(20170323083511,4013,rtl.getResStr(pas.FPPas2Js,"sVirtualMethodNameMustMatchExternal"),[],Proc.LibrarySymbolName);
              } else if (El.Args.FCount > 0) this.RaiseMsg(20170322164357,4016,rtl.getResStr(pas.FPPas2Js,"sNoArgumentsAllowedForExternalObjectConstructor"),[],rtl.getObject(El.Args.Get(0)));
              if (pas.PasTree.TProcedureModifier.pmVirtual in Proc.FModifiers) this.RaiseMsg(20170322183141,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[Proc.ElementTypeName(),"virtual"],Proc.ProcType);
            } else this.RaiseMsg(20170322163210,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),[Proc.ElementTypeName()],Proc);
          } else {
            var $tmp1 = AClass.ObjKind;
            if ($tmp1 === pas.PasTree.TPasObjKind.okClass) {
              if (((((((ClassScope.NewInstanceFunction === null) && (ClassScope.AncestorScope !== null)) && ClassScope.AncestorScope.FElement.IsExternal) && (Proc.$class.ClassType() === pas.PasTree.TPasClassFunction)) && (Proc.Visibility in rtl.createSet(pas.PasTree.TPasMemberVisibility.visProtected,pas.PasTree.TPasMemberVisibility.visPublic,pas.PasTree.TPasMemberVisibility.visPublished))) && (Proc.GetFT().ResultEl.ResultType === AClass)) && rtl.eqSet(rtl.intersectSet(rtl.createSet(pas.PasTree.TProcedureModifier.pmOverride,pas.PasTree.TProcedureModifier.pmExternal),Proc.FModifiers),{})) {
                ClassScope.NewInstanceFunction = Proc;
                this.CheckNewInstanceFunction(ClassScope);
              };
            } else if ($tmp1 === pas.PasTree.TPasObjKind.okInterface) {
              for (var $l2 in Proc.FModifiers) {
                pm = +$l2;
                if (!(pm in rtl.createSet(pas.PasTree.TProcedureModifier.pmOverload,pas.PasTree.TProcedureModifier.pmReintroduce))) this.RaiseMsg(20180329141108,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[Proc.ElementTypeName(),pas.PasTree.ModifierNames[pm]],Proc);
              };
            };
          };
        };
        if (pas.PasTree.TProcedureModifier.pmExternal in Proc.FModifiers) {
          if (Proc.IsOverride()) this.RaiseMsg(20170321101715,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[Proc.ElementTypeName(),"override,external"],Proc);
          if (Proc.LibraryExpr !== null) this.RaiseMsg(20170211220712,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),["external library name"],Proc.LibraryExpr);
          if (Proc.LibrarySymbolName === null) this.RaiseMsg(20170227095454,4012,rtl.getResStr(pas.FPPas2Js,"sMissingExternalName"),["missing external name"],Proc);
          for (pm in rtl.createSet(pas.PasTree.TProcedureModifier.pmAssembler,pas.PasTree.TProcedureModifier.pmForward,pas.PasTree.TProcedureModifier.pmNoReturn,pas.PasTree.TProcedureModifier.pmInline)) if (pm in Proc.FModifiers) this.RaiseMsg(20170323100842,3016,rtl.getResStr(pas.PasResolveEval,"sInvalidXModifierY"),[Proc.ElementTypeName(),pas.PasTree.ModifierNames[pm]],Proc);
          ExtName = this.ComputeConstString(Proc.LibrarySymbolName,true,true);
          if (Proc.IsVirtual() && (Proc.FName !== ExtName)) this.RaiseMsg(20170321090049,4013,rtl.getResStr(pas.FPPas2Js,"sVirtualMethodNameMustMatchExternal"),[],Proc.LibrarySymbolName);
          if (Proc.Visibility === pas.PasTree.TPasMemberVisibility.visPublished) {
            if (Proc.FName !== ExtName) this.RaiseMsg(20170407002940,4014,rtl.getResStr(pas.FPPas2Js,"sPublishedNameMustMatchExternal"),[],Proc.LibrarySymbolName);
            if (ExtName === $mod.ExtClassBracketAccessor) this.RaiseMsg(20170409211805,3053,rtl.getResStr(pas.PasResolveEval,"sSymbolCannotBePublished"),[],Proc.LibrarySymbolName);
          };
          if (pas.PasTree.TPasSection.isPrototypeOf(Proc.FParent)) this.AddExternalPath(ExtName,Proc.LibrarySymbolName);
        };
      };
    };
    this.FinishPropertyOfClass = function (PropEl) {
      var Getter = null;
      var Setter = null;
      var GetterIsBracketAccessor = false;
      var SetterIsBracketAccessor = false;
      var Arg = null;
      var ArgResolved = new pas.PasResolver.TPasResolverResult();
      var ParentC = null;
      var IndexExpr = null;
      var PropArgs = null;
      pas.PasResolver.TPasResolver.FinishPropertyOfClass.call(this,PropEl);
      ParentC = PropEl.FParent.$class.ClassType();
      if (ParentC === pas.PasTree.TPasClassType) {
        if (PropEl.FParent.IsExternal) {
          if (PropEl.Visibility === pas.PasTree.TPasMemberVisibility.visPublished) this.RaiseMsg(20170413221703,3053,rtl.getResStr(pas.PasResolveEval,"sSymbolCannotBePublished"),[],PropEl);
        };
      };
      Getter = this.GetPasPropertyGetter(PropEl);
      GetterIsBracketAccessor = this.IsExternalBracketAccessor(Getter);
      Setter = this.GetPasPropertySetter(PropEl);
      SetterIsBracketAccessor = this.IsExternalBracketAccessor(Setter);
      IndexExpr = this.GetPasPropertyIndex(PropEl);
      PropArgs = this.GetPasPropertyArgs(PropEl);
      if (GetterIsBracketAccessor) {
        if ((PropArgs.FCount !== 1) || (IndexExpr !== null)) this.RaiseMsg(20170403001743,4020,rtl.getResStr(pas.FPPas2Js,"sBracketAccessorOfExternalClassMustHaveOneParameter"),[],PropEl);
      };
      if (SetterIsBracketAccessor) {
        if ((PropArgs.FCount !== 1) || (IndexExpr !== null)) this.RaiseMsg(20170403001806,4020,rtl.getResStr(pas.FPPas2Js,"sBracketAccessorOfExternalClassMustHaveOneParameter"),[],PropEl);
      };
      if (GetterIsBracketAccessor || SetterIsBracketAccessor) {
        Arg = rtl.getObject(PropArgs.Get(0));
        if (!(Arg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argDefault,pas.PasTree.TArgumentAccess.argConst))) this.RaiseMsg(20170403090225,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),['default or "const"',pas.PasTree.AccessNames[Arg.Access]],PropEl);
        this.ComputeElement(Arg,{get: function () {
            return ArgResolved;
          }, set: function (v) {
            ArgResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),Arg);
        if (!(ArgResolved.BaseType in rtl.unionSet(rtl.unionSet(rtl.unionSet($mod.btAllJSInteger,$mod.btAllJSStringAndChars),$mod.btAllJSBooleans),$mod.btAllJSFloats))) this.RaiseMsg(20170403090628,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[this.GetResolverResultDescription(ArgResolved,true),"string"],Arg);
      };
    };
    this.CheckExternalClassConstructor = function (Ref) {
      var TypeEl = null;
      if (!pas.PasResolver.TResolvedRefCtxConstructor.isPrototypeOf(Ref.Context)) this.RaiseMsg(20180511165144,4026,rtl.getResStr(pas.FPPas2Js,"sJSNewNotSupported"),[],Ref.FElement);
      TypeEl = Ref.Context.Typ;
      if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
        if (!TypeEl.IsExternal) this.RaiseMsg(20180511165316,4026,rtl.getResStr(pas.FPPas2Js,"sJSNewNotSupported"),[],Ref.FElement);
      } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
        TypeEl = this.ResolveAliasType(TypeEl.DestType);
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          if (!TypeEl.IsExternal) this.RaiseMsg(20180511175309,4026,rtl.getResStr(pas.FPPas2Js,"sJSNewNotSupported"),[],Ref.FElement);
        };
      };
    };
    this.CheckConditionExpr = function (El, ResolvedEl) {
      if ((ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btCustom) && this.IsJSBaseType$1(ResolvedEl,$mod.TPas2jsBaseType.pbtJSValue,false)) return;
      pas.PasResolver.TPasResolver.CheckConditionExpr.call(this,El,ResolvedEl);
    };
    this.CheckNewInstanceFunction = function (ClassScope) {
      var Proc = null;
      var Args = null;
      var Arg = null;
      var ResolvedArg = new pas.PasResolver.TPasResolverResult();
      Proc = ClassScope.NewInstanceFunction;
      if (!Proc.IsVirtual()) this.RaiseMsg(20170324231040,4017,rtl.getResStr(pas.FPPas2Js,"sNewInstanceFunctionMustBeVirtual"),[],Proc);
      Args = Proc.ProcType.Args;
      if (Args.FCount < 2) this.RaiseMsg(20170324232247,4018,rtl.getResStr(pas.FPPas2Js,"sNewInstanceFunctionMustHaveTwoParameters"),[],Proc.ProcType);
      Arg = rtl.getObject(Args.Get(0));
      if (Arg.Access !== pas.PasTree.TArgumentAccess.argDefault) this.RaiseMsg(20170324232655,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),["1",pas.PasTree.AccessNames[Arg.Access],"default (none)"],Arg);
      if (Arg.ArgType === null) this.RaiseMsg(20170324233201,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),["1","untyped","String"],Arg);
      this.ComputeElement(Arg.ArgType,{get: function () {
          return ResolvedArg;
        }, set: function (v) {
          ResolvedArg = v;
        }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
      if (ResolvedArg.BaseType !== pas.PasResolver.TResolverBaseType.btString) this.RaiseMsg(20170324233348,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),["1",this.GetResolverResultDescription(ResolvedArg,false),"String"],Arg);
      Arg = rtl.getObject(Args.Get(1));
      if (Arg.Access !== pas.PasTree.TArgumentAccess.argConst) this.RaiseMsg(20170324233457,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),["2",pas.PasTree.AccessNames[Arg.Access],"const"],Arg);
      if (Arg.ArgType !== null) this.RaiseMsg(20170324233508,3006,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypeArgNo"),["2","type","untyped"],Arg);
    };
    this.AddExternalName = function (aName, El) {
      var Result = null;
      var Item = null;
      Item = pas.PasResolver.TPasIdentifier.$create("Create");
      Item.Identifier = aName;
      Item.SetElement(El);
      this.InternalAdd(Item);
      Result = Item;
      return Result;
    };
    this.FindExternalName = function (aName) {
      var Result = null;
      Result = this.FExternalNames.Find(aName);
      return Result;
    };
    this.AddExternalPath = function (aName, El) {
      var p = 0;
      aName = pas.SysUtils.Trim(aName);
      if (aName === "") return;
      this.AddExternalName(aName,El);
      p = 1;
      while ((p <= aName.length) && (aName.charCodeAt(p - 1) in rtl.createSet(null,97,122,null,65,90,null,48,57,95,36))) p += 1;
      if (p > aName.length) return;
      this.AddExternalName(pas.SysUtils.LeftStr(aName,p - 1),El);
    };
    this.ClearElementData = function () {
      var Data = null;
      var Next = null;
      Data = this.FFirstElementData;
      while (Data !== null) {
        Next = Data.Next;
        Data = rtl.freeLoc(Data);
        Data = Next;
      };
      this.FFirstElementData = null;
      this.FLastElementData = null;
      this.FExternalNames.ForEachCall(rtl.createCallback(this,"OnClearHashItem"),null);
      this.FExternalNames.Clear();
    };
    this.GenerateGUID = function (El) {
      var Result = "";
      var Name = "";
      var i = 0;
      var BytePos = 0;
      var BitPos = 0;
      var v = 0;
      var Member = null;
      var Bytes = rtl.arraySetLength(null,0,16);
      var List = null;
      var Scope = null;
      Name = El.PathName();
      Scope = El.FData;
      if (Scope.AncestorScope !== null) {
        Name = Scope.AncestorScope.GUID + Name;
      };
      List = pas.Classes.TStringList.$create("Create$1");
      for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Member = rtl.getObject(El.Members.Get(i));
        if (pas.PasTree.TPasProcedure.isPrototypeOf(Member)) List.Add(Member.FName);
      };
      List.Sort();
      for (var $l3 = 0, $end4 = List.GetCount() - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        Name = (Name + ",") + List.Get(i);
      };
      List = rtl.freeLoc(List);
      BytePos = 0;
      BitPos = 0;
      for (var $l5 = 1, $end6 = Name.length; $l5 <= $end6; $l5++) {
        i = $l5;
        v = (Bytes[BytePos] << 8) + Bytes[(BytePos + 1) & 15];
        v = v + (Name.charCodeAt(i - 1) << (11 - BitPos));
        Bytes[BytePos] = (v >>> 8) & 0xff;
        Bytes[(BytePos + 1) & 15] = v & 0xff;
        BitPos += 5;
        if (BitPos > 7) {
          BitPos -= 8;
          BytePos = (BytePos + 1) & 15;
        };
      };
      Bytes[6] = (Bytes[6] & 0xf) + (3 << 4);
      Bytes[8] = (Bytes[8] & 0x3f) + (2 << 6);
      Result = "{";
      for (i = 0; i <= 3; i++) Result = Result + rtl.hexStr(Bytes[i],2);
      Result = Result + "-";
      for (i = 4; i <= 5; i++) Result = Result + rtl.hexStr(Bytes[i],2);
      Result = Result + "-";
      for (i = 6; i <= 7; i++) Result = Result + rtl.hexStr(Bytes[i],2);
      Result = Result + "-";
      for (i = 8; i <= 9; i++) Result = Result + rtl.hexStr(Bytes[i],2);
      Result = Result + "-";
      for (i = 10; i <= 15; i++) Result = Result + rtl.hexStr(Bytes[i],2);
      Result = Result + "}";
      return Result;
    };
    this.AddJSBaseType = function (aName, Typ) {
      var Result = null;
      var El = null;
      El = this.AddCustomBaseType(aName,$mod.TResElDataPas2JSBaseType);
      if (Typ !== $mod.TPas2jsBaseType.pbtNone) this.FJSBaseTypes[Typ] = El;
      Result = El.FData;
      Result.JSBaseType = Typ;
      return Result;
    };
    this.CheckAssignCompatibilityCustom = function (LHS, RHS, ErrorEl, RaiseOnIncompatible, Handled) {
      var Result = 0;
      var LeftBaseType = 0;
      var LArray = null;
      var ElTypeResolved = new pas.PasResolver.TPasResolverResult();
      var LTypeEl = null;
      var RTypeEl = null;
      var TIName = "";
      Result = 2147483647;
      if (LHS.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
        if (!pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(LHS.LoTypeEl)) {
          this.RaiseInternalError(20170325114554,"");
        };
        if (!$mod.TResElDataPas2JSBaseType.isPrototypeOf(LHS.LoTypeEl.FData)) return Result;
        Handled.set(true);
        LeftBaseType = LHS.LoTypeEl.FData.JSBaseType;
        if (LeftBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
          if (pas.PasResolver.TPasResolverResultFlag.rrfReadable in RHS.Flags) {
            if (RHS.BaseType in $mod.btAllJSValueSrcTypes) {
              Result = 20000}
             else if (RHS.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
              if (this.IsJSBaseType$1(RHS,$mod.TPas2jsBaseType.pbtJSValue,false)) Result = 0;
            } else if (RHS.BaseType === pas.PasResolver.TResolverBaseType.btContext) Result = 20000;
          } else if (RHS.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
            if (RHS.IdentEl !== null) {
              if (RHS.IdentEl.$class.ClassType() === pas.PasTree.TPasClassType) Result = 20000;
            };
          };
        };
      } else if (LHS.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
        LTypeEl = LHS.LoTypeEl;
        RTypeEl = RHS.LoTypeEl;
        if ((LTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) && (pas.PasResolver.TPasResolverResultFlag.rrfReadable in RHS.Flags)) {
          LArray = LTypeEl;
          if (rtl.length(LArray.Ranges) > 0) return Result;
          if ((RHS.BaseType !== pas.PasResolver.TResolverBaseType.btContext) || (RTypeEl.$class.ClassType() !== pas.PasTree.TPasArrayType)) return Result;
          this.ComputeElement(LArray.ElType,{get: function () {
              return ElTypeResolved;
            }, set: function (v) {
              ElTypeResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
          if (this.IsJSBaseType$1(ElTypeResolved,$mod.TPas2jsBaseType.pbtJSValue,false)) {
            Handled.set(true);
            Result = 20000;
          };
        } else if ((((LTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && (pas.PasResolver.TPasResolverResultFlag.rrfReadable in RHS.Flags)) && (RHS.BaseType === pas.PasResolver.TResolverBaseType.btPointer)) && this.IsSameType(RTypeEl,this.GetBaseTypes(pas.PasResolver.TResolverBaseType.btPointer),pas.PasResolver.TPRResolveAlias.prraNone)) {
          TIName = ($mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTI];
          if (this.IsExternalClass_Name(LTypeEl,TIName)) {
            Handled.set(true);
            Result = 10000;
          };
        };
      };
      if (RaiseOnIncompatible) ;
      if (ErrorEl === null) ;
      return Result;
    };
    this.CheckTypeCastClassInstanceToClass = function (FromClassRes, ToClassRes, ErrorEl) {
      var Result = 0;
      var ToClass = null;
      var ClassScope = null;
      if (FromClassRes.BaseType === pas.PasResolver.TResolverBaseType.btNil) return 0;
      ToClass = rtl.as(ToClassRes.LoTypeEl,pas.PasTree.TPasClassType);
      ClassScope = rtl.as(ToClass.FData,pas.PasResolver.TPasClassScope);
      if (ClassScope.AncestorScope === null) {
        Result = 10000 + 1}
       else Result = 2147483647;
      if (ErrorEl === null) ;
      return Result;
    };
    this.CheckEqualCompatibilityCustomType = function (LHS, RHS, ErrorEl, RaiseOnIncompatible) {
      var Result = 0;
      var LeftBaseType = 0;
      Result = 2147483647;
      if (LHS.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
        if (!pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(LHS.LoTypeEl)) {
          this.RaiseInternalError(20170330005841,"");
        };
        if (!$mod.TResElDataPas2JSBaseType.isPrototypeOf(LHS.LoTypeEl.FData)) return Result;
        LeftBaseType = LHS.LoTypeEl.FData.JSBaseType;
        if (LeftBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
          if (pas.PasResolver.TPasResolverResultFlag.rrfReadable in LHS.Flags) {
            if (pas.PasResolver.TPasResolverResultFlag.rrfReadable in RHS.Flags) {
              if (RHS.BaseType in $mod.btAllJSValueSrcTypes) {
                Result = 20000}
               else if (RHS.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
                if (this.IsJSBaseType$1(RHS,$mod.TPas2jsBaseType.pbtJSValue,false)) Result = 0;
              } else if (RHS.BaseType === pas.PasResolver.TResolverBaseType.btContext) Result = 20000;
            } else if (RHS.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
              if (RHS.IdentEl !== null) {
                if (RHS.IdentEl.$class.ClassType() === pas.PasTree.TPasClassType) Result = 20000;
              };
            };
          };
        };
      } else if (RHS.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
        return this.CheckEqualCompatibilityCustomType(RHS,LHS,ErrorEl,RaiseOnIncompatible)}
       else this.RaiseInternalError(20170330005725,"");
      return Result;
    };
    this.CheckForIn = function (Loop, VarResolved, InResolved) {
      var Result = false;
      var TypeEl = null;
      var ArgResolved = new pas.PasResolver.TPasResolverResult();
      var LengthResolved = new pas.PasResolver.TPasResolverResult();
      var PropResultResolved = new pas.PasResolver.TPasResolverResult();
      if (InResolved.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
        if (this.IsJSBaseType$1(InResolved,$mod.TPas2jsBaseType.pbtJSValue,true)) {
          if (!(VarResolved.BaseType in pas.PasResolver.btAllStrings)) this.RaiseXExpectedButYFound(20180423185800,"string",this.GetResolverResultDescription(VarResolved,true),Loop.StartExpr);
          return true;
        };
      } else if (InResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
        TypeEl = InResolved.LoTypeEl;
        if ((TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && TypeEl.IsExternal) {
          if (this.IsForInExtArray(Loop,VarResolved,InResolved,{get: function () {
              return ArgResolved;
            }, set: function (v) {
              ArgResolved = v;
            }},{get: function () {
              return LengthResolved;
            }, set: function (v) {
              LengthResolved = v;
            }},{get: function () {
              return PropResultResolved;
            }, set: function (v) {
              PropResultResolved = v;
            }})) return true;
          if (!(VarResolved.BaseType in pas.PasResolver.btAllStrings)) this.RaiseXExpectedButYFound(20180423191611,"string",this.GetResolverResultDescription(VarResolved,true),Loop.StartExpr);
          return true;
        };
      };
      Result = false;
      return Result;
    };
    this.ComputeUnaryNot = function (El, ResolvedEl, Flags) {
      if (ResolvedEl.get().BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
        if (this.IsJSBaseType$1(ResolvedEl.get(),$mod.TPas2jsBaseType.pbtJSValue,true)) {
          pas.PasResolver.SetResolverValueExpr(ResolvedEl,pas.PasResolver.TResolverBaseType.btBoolean,this.GetBaseTypes(pas.PasResolver.TResolverBaseType.btBoolean),this.GetBaseTypes(pas.PasResolver.TResolverBaseType.btBoolean),El,rtl.createSet(pas.PasResolver.TPasResolverResultFlag.rrfReadable));
          return;
        };
      };
      pas.PasResolver.TPasResolver.ComputeUnaryNot.call(this,El,ResolvedEl,rtl.refSet(Flags));
    };
    this.ComputeBinaryExprRes = function (Bin, ResolvedEl, Flags, LeftResolved, RightResolved) {
      var Self = this;
      function SetBaseType(BaseType) {
        pas.PasResolver.SetResolverValueExpr(ResolvedEl,BaseType,Self.GetBaseTypes(BaseType),Self.GetBaseTypes(BaseType),Bin,rtl.createSet(pas.PasResolver.TPasResolverResultFlag.rrfReadable));
      };
      var RightTypeEl = null;
      if ((LeftResolved.get().BaseType === pas.PasResolver.TResolverBaseType.btCustom) || (RightResolved.get().BaseType === pas.PasResolver.TResolverBaseType.btCustom)) {
        var $tmp1 = Bin.OpCode;
        if ($tmp1 === pas.PasTree.TExprOpCode.eopIs) if (Self.IsJSBaseType$1(LeftResolved.get(),$mod.TPas2jsBaseType.pbtJSValue,true)) {
          if (pas.PasTree.TPasType.isPrototypeOf(RightResolved.get().IdentEl) && pas.PasTree.TPasClassType.isPrototypeOf(Self.ResolveAliasType(RightResolved.get().IdentEl))) {
            SetBaseType(pas.PasResolver.TResolverBaseType.btBoolean);
            return;
          };
          RightTypeEl = RightResolved.get().LoTypeEl;
          if (pas.PasTree.TPasClassOfType.isPrototypeOf(RightTypeEl)) {
            SetBaseType(pas.PasResolver.TResolverBaseType.btBoolean);
            return;
          };
        };
      };
      pas.PasResolver.TPasResolver.ComputeBinaryExprRes.call(Self,Bin,ResolvedEl,rtl.refSet(Flags),LeftResolved,RightResolved);
    };
    this.BI_TypeInfo_OnGetCallResult = function (Proc, Params, ResolvedEl) {
      var Param = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var C = null;
      var TIName = "";
      var FindData = new pas.PasResolver.TPRFindData();
      var Abort = false;
      var bt = 0;
      var jbt = 0;
      var TypeEl = null;
      var FoundClass = null;
      var ScopeDepth = 0;
      Param = Params.Params[0];
      this.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
      if (ParamResolved.LoTypeEl === null) this.RaiseInternalError(20170413090726,"");
      if ((ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btProc) && pas.PasTree.TPasFunction.isPrototypeOf(ParamResolved.IdentEl)) {
        TypeEl = ParamResolved.IdentEl.GetFT().ResultEl.ResultType;
        this.ComputeElement(TypeEl,{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        ParamResolved.Flags = rtl.includeSet(ParamResolved.Flags,pas.PasResolver.TPasResolverResultFlag.rrfReadable);
        if (ParamResolved.LoTypeEl === null) this.RaiseInternalError(20170421124923,"");
      };
      TypeEl = ParamResolved.LoTypeEl;
      C = TypeEl.$class.ClassType();
      TIName = "";
      if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
        if ($mod.TResElDataPas2JSBaseType.isPrototypeOf(TypeEl.FData)) {
          jbt = TypeEl.FData.JSBaseType;
          if (jbt === $mod.TPas2jsBaseType.pbtJSValue) TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTI];
        } else if (pas.PasResolver.TResElDataBaseType.isPrototypeOf(TypeEl.FData)) {
          bt = TypeEl.FData.BaseType;
          if (bt in rtl.unionSet($mod.btAllJSInteger,rtl.createSet(pas.PasResolver.TResolverBaseType.btCurrency))) {
            TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIInteger]}
           else if (bt in rtl.createSet(pas.PasResolver.TResolverBaseType.btString,pas.PasResolver.TResolverBaseType.btChar,pas.PasResolver.TResolverBaseType.btDouble,pas.PasResolver.TResolverBaseType.btBoolean)) {
            TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTI]}
           else if (bt === pas.PasResolver.TResolverBaseType.btPointer) TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIPointer];
        };
      } else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
        if (C === pas.PasTree.TPasEnumType) {
          TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIEnum]}
         else if (C === pas.PasTree.TPasSetType) {
          TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTISet]}
         else if (C.InheritsFrom(pas.PasTree.TPasProcedureType)) {
          if (TypeEl.GetIsReference()) {
            TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIRefToProcVar]}
           else if (TypeEl.GetIsOfObject()) {
            TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIMethodVar]}
           else TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIProcVar];
        } else if (C === pas.PasTree.TPasRecordType) {
          TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIRecord]}
         else if (C === pas.PasTree.TPasClassType) {
          var $tmp1 = TypeEl.ObjKind;
          if ($tmp1 === pas.PasTree.TPasObjKind.okClass) {
            TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIClass]}
           else if ($tmp1 === pas.PasTree.TPasObjKind.okInterface) {
            TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIInterface]}
           else {
            this.RaiseNotYetImplemented(20180328195807,Param,"");
          };
        } else if (C === pas.PasTree.TPasClassOfType) {
          if (pas.PasResolver.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) {
            TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIClass]}
           else TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIClassRef];
        } else if (C === pas.PasTree.TPasArrayType) {
          if (rtl.length(TypeEl.Ranges) > 0) {
            TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIStaticArray]}
           else TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIDynArray];
        } else if (C === pas.PasTree.TPasPointerType) TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIPointer];
      } else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btSet) {
        if (pas.PasTree.TPasSetType.isPrototypeOf(ParamResolved.IdentEl)) TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTISet];
      } else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btRange) {
        this.ConvertRangeToElement({get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }});
        if (ParamResolved.BaseType in $mod.btAllJSInteger) {
          TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIInteger]}
         else if (ParamResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btChar,pas.PasResolver.TResolverBaseType.btBoolean)) {
          TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTI]}
         else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          TypeEl = ParamResolved.LoTypeEl;
          C = TypeEl.$class.ClassType();
          if (C === pas.PasTree.TPasEnumType) TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIEnum];
        };
      } else if (C === pas.PasTree.TPasRangeType) {
        if (ParamResolved.BaseType in $mod.btAllJSInteger) {
          TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTIInteger]}
         else if (ParamResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btChar,pas.PasResolver.TResolverBaseType.btBoolean)) TIName = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnTI];
      };
      if (TIName === "") {
        this.RaiseNotYetImplemented(20170413091852,Param,"");
      };
      this.ResetSubScopes({get: function () {
          return ScopeDepth;
        }, set: function (v) {
          ScopeDepth = v;
        }});
      FindData = new pas.PasResolver.TPRFindData();
      FindData.ErrorPosEl = Params;
      Abort = false;
      this.IterateElements(TIName,rtl.createCallback(this,"OnFindFirstElement"),FindData,{get: function () {
          return Abort;
        }, set: function (v) {
          Abort = v;
        }});
      this.RestoreSubScopes(ScopeDepth);
      if (pas.PasTree.TPasType.isPrototypeOf(FindData.Found)) {
        TypeEl = this.ResolveAliasType(FindData.Found);
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          FoundClass = FindData.Found;
          if (FoundClass.IsExternal && (FoundClass.ExternalName === (($mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + TIName))) {
            pas.PasResolver.SetResolverTypeExpr(ResolvedEl,pas.PasResolver.TResolverBaseType.btContext,FoundClass,FindData.Found,rtl.createSet(pas.PasResolver.TPasResolverResultFlag.rrfReadable));
            return;
          };
        };
      };
      pas.PasResolver.SetResolverTypeExpr(ResolvedEl,pas.PasResolver.TResolverBaseType.btPointer,this.GetBaseTypes(pas.PasResolver.TResolverBaseType.btPointer),this.GetBaseTypes(pas.PasResolver.TResolverBaseType.btPointer),rtl.createSet(pas.PasResolver.TPasResolverResultFlag.rrfReadable));
      if (Proc === null) ;
    };
    this.Create$2 = function () {
      var bt = 0;
      pas.PasResolver.TPasResolver.Create$1.apply(this,arguments);
      this.cInterfaceToTGUID = 10000 + 2;
      this.cInterfaceToString = 10000 + 1;
      this.FExternalNames = pas.PasResolver.TPasResHashList.$create("Create$1");
      this.FStoreSrcColumns = true;
      this.FOptions = rtl.unionSet(this.FOptions,$mod.DefaultPasResolverOptions);
      this.FScopeClass_Class = $mod.TPas2JSClassScope;
      this.FScopeClass_InitialFinalization = $mod.TPas2JSInitialFinalizationScope;
      this.FScopeClass_Module = $mod.TPas2JSModuleScope;
      this.FScopeClass_Proc = $mod.TPas2JSProcedureScope;
      this.FScopeClass_Section = $mod.TPas2JSSectionScope;
      this.FScopeClass_WithExpr = $mod.TPas2JSWithExprScope;
      for (bt = 1; bt <= 1; bt++) this.AddJSBaseType($mod.Pas2jsBaseTypeNames[bt],bt);
      this.FAnonymousElTypePostfix = $mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnAnonymousPostfix];
      this.FBaseTypeChar = pas.PasResolver.TResolverBaseType.btWideChar;
      this.FBaseTypeString = pas.PasResolver.TResolverBaseType.btUnicodeString;
      this.FBaseTypeLength = pas.PasResolver.TResolverBaseType.btIntDouble;
    };
    this.Destroy = function () {
      this.ClearElementData();
      this.FExternalNames = null;
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FOverloadScopes;
        }, set: function (v) {
          this.p.FOverloadScopes = v;
        }});
      pas.PasResolver.TPasResolver.Destroy.call(this);
    };
    this.ClearBuiltInIdentifiers = function () {
      var bt = 0;
      pas.PasResolver.TPasResolver.ClearBuiltInIdentifiers.call(this);
      for (bt = 0; bt <= 1; bt++) pas.PasTree.ReleaseAndNil({a: bt, p: this.FJSBaseTypes, get: function () {
          return this.p[this.a];
        }, set: function (v) {
          this.p[this.a] = v;
        }});
    };
    this.IsJSBaseType = function (TypeEl, Typ) {
      var Result = false;
      Result = (pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(TypeEl) && (pas.SysUtils.CompareText(TypeEl.FName,$mod.Pas2jsBaseTypeNames[Typ]) === 0)) && $mod.TResElDataPas2JSBaseType.isPrototypeOf(TypeEl.FData);
      return Result;
    };
    this.IsJSBaseType$1 = function (TypeResolved, Typ, HasValue) {
      var Result = false;
      if ((TypeResolved.BaseType !== pas.PasResolver.TResolverBaseType.btCustom) || !this.IsJSBaseType(TypeResolved.LoTypeEl,Typ)) return false;
      if (HasValue && !(pas.PasResolver.TPasResolverResultFlag.rrfReadable in TypeResolved.Flags)) return false;
      Result = true;
      return Result;
    };
    this.AddObjFPCBuiltInIdentifiers = function (TheBaseTypes, TheBaseProcs) {
      var InvalidTypes = {};
      var bt = 0;
      var InvalidProcs = {};
      var bf = 0;
      InvalidTypes = rtl.diffSet(TheBaseTypes,$mod.btAllJSBaseTypes);
      if (rtl.neSet(InvalidTypes,{})) for (var $l1 in InvalidTypes) {
        bt = +$l1;
        this.RaiseInternalError(20170409180202,this.GetBaseTypeNames(bt));
      };
      InvalidProcs = rtl.diffSet(TheBaseProcs,$mod.bfAllJSBaseProcs);
      if (rtl.neSet(InvalidProcs,{})) for (var $l2 in InvalidProcs) {
        bf = +$l2;
        this.RaiseInternalError(20170409180246,pas.PasResolver.ResolverBuiltInProcNames[bf]);
      };
      pas.PasResolver.TPasResolver.AddObjFPCBuiltInIdentifiers.call(this,rtl.diffSet(TheBaseTypes,rtl.createSet(pas.PasResolver.TResolverBaseType.btUIntDouble,pas.PasResolver.TResolverBaseType.btIntDouble)),TheBaseProcs);
      if (pas.PasResolver.TResolverBaseType.btUIntDouble in TheBaseTypes) this.AddBaseType($mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnUIntDouble],pas.PasResolver.TResolverBaseType.btUIntDouble);
      if (pas.PasResolver.TResolverBaseType.btIntDouble in TheBaseTypes) this.AddBaseType($mod.Pas2JSBuiltInNames[$mod.TPas2JSBuiltInName.pbitnIntDouble],pas.PasResolver.TResolverBaseType.btIntDouble);
    };
    this.CheckTypeCastRes = function (FromResolved, ToResolved, ErrorEl, RaiseOnError) {
      var Self = this;
      var Result = 0;
      function Incompatible(Id) {
        var Result = 0;
        if (RaiseOnError) Self.RaiseIncompatibleTypeRes(Id,3035,[],FromResolved,ToResolved,ErrorEl);
        Result = 2147483647;
        return Result;
      };
      var JSBaseType = 0;
      var C = null;
      var ToClass = null;
      var ToTypeEl = null;
      var FromTypeEl = null;
      Result = 2147483647;
      if (pas.PasResolver.TPasResolverResultFlag.rrfReadable in FromResolved.Flags) {
        if (ToResolved.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
          ToTypeEl = ToResolved.LoTypeEl;
          if (!pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(ToTypeEl)) Self.RaiseInternalError(20170325142826,"");
          if ($mod.TResElDataPas2JSBaseType.isPrototypeOf(ToTypeEl.FData)) {
            JSBaseType = ToTypeEl.FData.JSBaseType;
            if (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
              if (FromResolved.BaseType in $mod.btAllJSValueSrcTypes) {
                Result = 2}
               else if (FromResolved.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
                if (Self.IsJSBaseType$1(FromResolved,$mod.TPas2jsBaseType.pbtJSValue,false)) Result = 0;
              } else if (FromResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) Result = 2;
            };
            return Result;
          };
        } else if (FromResolved.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
          FromTypeEl = FromResolved.LoTypeEl;
          if (!pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(FromTypeEl)) Self.RaiseInternalError(20170325143016,"");
          if ($mod.TResElDataPas2JSBaseType.isPrototypeOf(FromTypeEl.FData)) {
            JSBaseType = FromTypeEl.FData.JSBaseType;
            if (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
              if (ToResolved.BaseType in $mod.btAllJSValueTypeCastTo) {
                Result = 2}
               else if (ToResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
                Result = 2;
              };
            };
            return Result;
          };
        } else if (ToResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          ToTypeEl = ToResolved.LoTypeEl;
          C = ToTypeEl.$class.ClassType();
          if (C === pas.PasTree.TPasClassType) {
            ToClass = ToTypeEl;
            if (ToClass.IsExternal) {
              if (FromResolved.BaseType in $mod.btAllJSStringAndChars) {
                if (Self.IsExternalClass_Name(ToClass,"String")) return 0;
              } else if (FromResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
                FromTypeEl = FromResolved.LoTypeEl;
                if (FromTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
                  if (Self.IsExternalClass_Name(ToClass,"Array") || Self.IsExternalClass_Name(ToClass,"Object")) return 0;
                } else if (FromTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
                  if (Self.IsExternalClass_Name(ToClass,"Object")) return 0;
                } else if (FromTypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
                  if (Self.IsExternalClass_Name(ToClass,"Object")) return 0;
                } else if (FromTypeEl.$class.InheritsFrom(pas.PasTree.TPasProcedureType)) {
                  if (Self.IsExternalClass_Name(ToClass,"Function") || Self.IsExternalClass_Name(ToClass,"Object")) return 0;
                };
              };
            };
          } else if (C === pas.PasTree.TPasArrayType) {
            if (FromResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
              FromTypeEl = FromResolved.LoTypeEl;
              if (((FromTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && FromTypeEl.IsExternal) && (Self.IsExternalClass_Name(FromTypeEl,"Array") || Self.IsExternalClass_Name(FromTypeEl,"Object"))) {
                return 2;
              };
            };
          } else if (C === pas.PasTree.TPasRecordType) {
            if (FromResolved.BaseType === pas.PasResolver.TResolverBaseType.btNone) {}
            else if (FromResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
              FromTypeEl = FromResolved.LoTypeEl;
              if (FromTypeEl === ToTypeEl) {
                return 1}
               else return Incompatible(20180503134526);
            } else return Incompatible(20180503134528);
          } else if (C.InheritsFrom(pas.PasTree.TPasProcedureType)) {
            if (FromResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
              FromTypeEl = FromResolved.LoTypeEl;
              if (FromTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
                if (Self.IsExternalClass_Name(FromTypeEl,"Function")) return 2;
              };
            };
          };
        };
      } else if (pas.PasTree.TPasType.isPrototypeOf(FromResolved.IdentEl)) {
        FromTypeEl = Self.ResolveAliasType(FromResolved.IdentEl);
        if (ToResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          ToTypeEl = ToResolved.LoTypeEl;
          if (((ToTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && ToTypeEl.IsExternal) && (ToTypeEl.ExternalName === "Object")) {
            if ((FromTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) || (FromTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType)) return 10000 + 1;
          };
        };
      };
      Result = pas.PasResolver.TPasResolver.CheckTypeCastRes.call(Self,FromResolved,ToResolved,ErrorEl,RaiseOnError);
      return Result;
    };
    this.FindLocalBuiltInSymbol = function (El) {
      var Result = null;
      Result = pas.PasResolver.TPasResolver.FindLocalBuiltInSymbol.call(this,El);
      if (Result !== null) return Result;
      if ($mod.TResElDataPas2JSBaseType.isPrototypeOf(El.FData)) Result = this.GetJSBaseTypes(El.FData.JSBaseType);
      return Result;
    };
    this.ExtractPasStringLiteral = function (El, S) {
      var Result = "";
      var p = 0;
      var StartP = 0;
      var i = 0;
      var l = 0;
      var c = "";
      Result = "";
      if (S === "") this.RaiseInternalError(20170207154543,"");
      p = 1;
      l = S.length;
      while (p <= l) {
        var $tmp1 = S.charAt(p - 1);
        if ($tmp1 === "'") {
          p += 1;
          StartP = p;
          do {
            if (p > l) this.RaiseInternalError(20170207155120,"");
            c = S.charAt(p - 1);
            var $tmp2 = c;
            if ($tmp2 === "'") {
              if (p > StartP) Result = Result + pas.jsbase.StrToJSString(pas.System.Copy(S,StartP,p - StartP));
              p += 1;
              StartP = p;
              if ((p > l) || (S.charAt(p - 1) !== "'")) break;
              Result = Result + "'";
              p += 1;
              StartP = p;
            } else {
              p += 1;
            };
          } while (!false);
          if (p > StartP) Result = Result + pas.jsbase.StrToJSString(pas.System.Copy(S,StartP,p - StartP));
        } else if ($tmp1 === "#") {
          p += 1;
          if (p > l) this.RaiseInternalError(20170207155121,"");
          if (S.charAt(p - 1) === "$") {
            p += 1;
            StartP = p;
            i = 0;
            while (p <= l) {
              c = S.charAt(p - 1);
              var $tmp3 = c;
              if (($tmp3 >= "0") && ($tmp3 <= "9")) {
                i = ((i * 16) + c.charCodeAt()) - "0".charCodeAt()}
               else if (($tmp3 >= "a") && ($tmp3 <= "f")) {
                i = (((i * 16) + c.charCodeAt()) - "a".charCodeAt()) + 10}
               else if (($tmp3 >= "A") && ($tmp3 <= "F")) {
                i = (((i * 16) + c.charCodeAt()) - "A".charCodeAt()) + 10}
               else {
                break;
              };
              if (i > 0x10ffff) this.RaiseNotYetImplemented(20170207164657,El,"maximum codepoint is $10ffff");
              p += 1;
            };
            if (p === StartP) this.RaiseInternalError(20170207164956,"");
            Result = Result + $mod.CodePointToJSString(i);
          } else {
            StartP = p;
            i = 0;
            while (p <= l) {
              c = S.charAt(p - 1);
              var $tmp4 = c;
              if (($tmp4 >= "0") && ($tmp4 <= "9")) {
                i = ((i * 10) + c.charCodeAt()) - "0".charCodeAt()}
               else {
                break;
              };
              if (i > 0x10ffff) this.RaiseNotYetImplemented(20170207171140,El,"maximum codepoint is $10ffff");
              p += 1;
            };
            if (p === StartP) this.RaiseInternalError(20170207171148,"");
            Result = Result + $mod.CodePointToJSString(i);
          };
        } else if ($tmp1 === "^") {
          p += 1;
          if (p > l) this.RaiseInternalError(20181025125920,"");
          c = S.charAt(p - 1);
          var $tmp5 = c;
          if (($tmp5 >= "a") && ($tmp5 <= "z")) {
            Result = Result + String.fromCharCode((c.charCodeAt() - "a".charCodeAt()) + 1)}
           else if (($tmp5 >= "A") && ($tmp5 <= "Z")) {
            Result = Result + String.fromCharCode((c.charCodeAt() - "A".charCodeAt()) + 1)}
           else {
            this.RaiseInternalError(20170207160412,"");
          };
          p += 1;
        } else {
          this.RaiseNotYetImplemented(20170207154653,El,"ord=" + pas.SysUtils.IntToStr(S.charCodeAt(p - 1)));
        };
      };
      return Result;
    };
    this.ResolverToJSValue = function (Value, ErrorEl) {
      var Result = null;
      Result = null;
      if (Value === null) return Result;
      var $tmp1 = Value.Kind;
      if ($tmp1 === pas.PasResolveEval.TREVKind.revkBool) {
        Result = pas.jsbase.TJSValue.$create("Create$3",[Value.B])}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkInt) {
        Result = pas.jsbase.TJSValue.$create("Create$2",[Value.Int])}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkUInt) {
        Result = pas.jsbase.TJSValue.$create("Create$2",[Value.UInt])}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkFloat) {
        Result = pas.jsbase.TJSValue.$create("Create$2",[Value.FloatValue])}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
        Result = pas.jsbase.TJSValue.$create("Create$4",[Value.S])}
       else {
        this.RaiseNotYetImplemented(20170914092413,ErrorEl,"");
      };
      return Result;
    };
    this.ComputeConstString = function (Expr, StoreCustomData, NotEmpty) {
      var Result = "";
      var Value = null;
      Result = "";
      if (Expr === null) this.RaiseInternalError(20170215123600,"");
      Value = this.Eval(Expr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refAutoConst),StoreCustomData);
      try {
        var $tmp1 = Value.Kind;
        if ($tmp1 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
          Result = Value.S}
         else {
          Result = pas.PasResolveEval.TREVKind[Value.Kind];
          this.RaiseXExpectedButYFound(20170211221121,"string literal",Result,Expr);
        };
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
      };
      if (NotEmpty && (Result === "")) this.RaiseXExpectedButYFound(20170321085318,"string literal","empty",Expr);
      return Result;
    };
    this.CheckAssignExprRangeToCustom = function (LeftResolved, RValue, RHS) {
      var LeftBaseType = 0;
      if (LeftResolved.BaseType !== pas.PasResolver.TResolverBaseType.btCustom) return;
      if (!pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(LeftResolved.LoTypeEl)) {
        this.RaiseInternalError(20170902165913,"");
      };
      if (!$mod.TResElDataPas2JSBaseType.isPrototypeOf(LeftResolved.LoTypeEl.FData)) return;
      LeftBaseType = LeftResolved.LoTypeEl.FData.JSBaseType;
      if (LeftBaseType === $mod.TPas2jsBaseType.pbtJSValue) {}
      else this.RaiseNotYetImplemented(20170902170153,RHS,"");
      if (RHS === null) ;
      if (RValue === null) ;
    };
    this.HasStaticArrayCloneFunc = function (Arr) {
      var Result = false;
      var l = 0;
      var ElType = null;
      l = rtl.length(Arr.Ranges);
      if (l === 0) return false;
      if (l > 1) return false;
      ElType = this.ResolveAliasType(Arr.ElType);
      if (pas.PasTree.TPasArrayType.isPrototypeOf(ElType)) {
        Result = rtl.length(ElType.Ranges) > 0}
       else if (pas.PasTree.TPasRecordType.isPrototypeOf(ElType)) {
        Result = true}
       else if (pas.PasTree.TPasSetType.isPrototypeOf(ElType)) {
        Result = true}
       else Result = false;
      return Result;
    };
    this.IsTGUID = function (TypeEl) {
      var Result = false;
      var Members = null;
      var El = null;
      Result = false;
      if (!pas.SysUtils.SameText(TypeEl.FName,"TGUID")) return Result;
      Members = TypeEl.Members;
      if (Members.FCount < 4) return Result;
      El = rtl.getObject(Members.Get(0));
      if (!pas.SysUtils.SameText(El.FName,"D1")) return Result;
      El = rtl.getObject(Members.Get(1));
      if (!pas.SysUtils.SameText(El.FName,"D2")) return Result;
      El = rtl.getObject(Members.Get(2));
      if (!pas.SysUtils.SameText(El.FName,"D3")) return Result;
      El = rtl.getObject(Members.Get(3));
      if (!pas.SysUtils.SameText(El.FName,"D4")) return Result;
      Result = true;
      return Result;
    };
    this.GetAssignGUIDString = function (TypeEl, Expr, GUID) {
      var Result = false;
      var Value = null;
      var GUIDStr = "";
      Result = false;
      if (Expr === null) return Result;
      if (!this.IsTGUID(TypeEl)) return Result;
      Value = this.Eval(Expr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refAutoConst),true);
      try {
        var $tmp1 = Value.Kind;
        if ($tmp1 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
          GUIDStr = Value.S}
         else {
          this.RaiseXExpectedButYFound(20180415092350,"GUID string literal",Value.AsString(),Expr);
        };
        if (!pas.SysUtils.TryStringToGUID(GUIDStr,GUID)) this.RaiseXExpectedButYFound(20180415092351,"GUID string literal",Value.AsString(),Expr);
        Result = true;
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
      };
      return Result;
    };
    this.GetElementData = function (El, DataClass) {
      var Result = null;
      Result = null;
      do {
        if (El.$class.InheritsFrom(DataClass)) return El;
        if (El.FData === null) return Result;
        El = rtl.as(El.FData,pas.PasTree.TPasElementBase);
      } while (!false);
      return Result;
    };
    this.AddElementData = function (Data) {
      Data.Owner = this;
      if (this.FFirstElementData !== null) {
        this.FLastElementData.Next = Data;
        this.FLastElementData = Data;
      } else {
        this.FFirstElementData = Data;
        this.FLastElementData = Data;
      };
    };
    this.CreateElementData = function (DataClass, El) {
      var Result = null;
      Result = DataClass.$create("Create$1");
      Result.SetElement(El);
      this.AddElementData(Result);
      return Result;
    };
    this.RaiseMsg = function (Id, MsgNumber, Fmt, Args, ErrorPosEl) {
      pas.PasResolver.TPasResolver.RaiseMsg.call(this,Id,MsgNumber,Fmt,Args,ErrorPosEl);
    };
    this.GetOverloadName = function (El) {
      var Result = "";
      var Data = null;
      Data = El.FData;
      if ($mod.TPas2JSProcedureScope.isPrototypeOf(Data)) {
        Result = Data.OverloadName;
        if (Result !== "") return Result;
      };
      Result = El.FName;
      return Result;
    };
    this.GetBaseDescription = function (R, AddPath) {
      var Result = "";
      if ((R.BaseType === pas.PasResolver.TResolverBaseType.btCustom) && $mod.TResElDataPas2JSBaseType.isPrototypeOf(R.LoTypeEl.FData)) {
        Result = $mod.Pas2jsBaseTypeNames[R.LoTypeEl.FData.JSBaseType]}
       else Result = pas.PasResolver.TPasResolver.GetBaseDescription.call(this,R,AddPath);
      return Result;
    };
    this.HasTypeInfo = function (El) {
      var Result = false;
      Result = pas.PasResolver.TPasResolver.HasTypeInfo.call(this,El);
      if (!Result) return Result;
      if ((El.$class.ClassType() === pas.PasTree.TPasClassType) && El.IsExternal) return false;
      if (pas.PasTree.TProcedureBody.isPrototypeOf(El.FParent)) Result = false;
      return Result;
    };
    this.ProcHasImplElements = function (Proc) {
      var Result = false;
      var Scope = null;
      Result = pas.PasResolver.TPasResolver.ProcHasImplElements.call(this,Proc);
      if (Result) return Result;
      Scope = rtl.as(Proc.FData,$mod.TPas2JSProcedureScope);
      if (Scope.ImplProc !== null) Scope = rtl.as(Scope.ImplProc.FData,$mod.TPas2JSProcedureScope);
      if (Scope.BodyJS !== "") Result = !Scope.EmptyJS;
      return Result;
    };
    this.IsTObjectFreeMethod = function (El) {
      var Result = false;
      var Ref = null;
      var Decl = null;
      Result = false;
      if (El === null) return Result;
      if (El.$class.ClassType() !== pas.PasTree.TPrimitiveExpr) return Result;
      if (!pas.PasResolver.TResolvedReference.isPrototypeOf(El.FData)) return Result;
      Ref = El.FData;
      if (pas.SysUtils.CompareText(El.Value,"free") !== 0) return Result;
      Decl = Ref.FDeclaration;
      if ((((!(Decl.$class.ClassType() === pas.PasTree.TPasProcedure) || (Decl.FParent.$class.ClassType() !== pas.PasTree.TPasClassType)) || (pas.SysUtils.CompareText(Decl.FParent.FName,"tobject") !== 0)) || (pas.PasTree.TProcedureModifier.pmExternal in Decl.FModifiers)) || (Decl.ProcType.Args.FCount > 0)) return Result;
      Result = true;
      return Result;
    };
    this.IsExternalBracketAccessor = function (El) {
      var Result = false;
      var ExtName = "";
      if (!pas.PasTree.TPasProcedure.isPrototypeOf(El) || (El.LibrarySymbolName === null)) return false;
      ExtName = this.ComputeConstString(El.LibrarySymbolName,false,false);
      Result = ExtName === $mod.ExtClassBracketAccessor;
      return Result;
    };
    this.IsExternalClassConstructor = function (El) {
      var Result = false;
      var P = null;
      if ((El.$class.ClassType() === pas.PasTree.TPasConstructor) && (pas.PasTree.TProcedureModifier.pmExternal in El.FModifiers)) {
        P = El.FParent;
        if (((P !== null) && (P.$class.ClassType() === pas.PasTree.TPasClassType)) && P.IsExternal) return true;
      };
      Result = false;
      return Result;
    };
    this.IsForInExtArray = function (Loop, VarResolved, InResolved, ArgResolved, LengthResolved, PropResultResolved) {
      var Result = false;
      var TypeEl = null;
      var aClass = null;
      var ClassScope = null;
      var DefProp = null;
      var Arg0 = null;
      var Getter = null;
      var ClassDotScope = null;
      var Ident = null;
      var LengthVar = null;
      Result = false;
      ArgResolved.set(new pas.PasResolver.TPasResolverResult());
      LengthResolved.set(new pas.PasResolver.TPasResolverResult());
      PropResultResolved.set(new pas.PasResolver.TPasResolverResult());
      TypeEl = InResolved.LoTypeEl;
      if ((TypeEl.$class.ClassType() !== pas.PasTree.TPasClassType) || !TypeEl.IsExternal) {
        return Result;
      };
      aClass = TypeEl;
      ClassScope = aClass.FData;
      DefProp = ClassScope.DefaultProperty;
      if ((DefProp === null) || (DefProp.FArgs.FCount !== 1)) {
        return Result;
      };
      Arg0 = rtl.getObject(DefProp.FArgs.Get(0));
      if (!(Arg0.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argDefault,pas.PasTree.TArgumentAccess.argConst))) {
        return Result;
      };
      this.ComputeElement(Arg0,ArgResolved,{},null);
      if (!(ArgResolved.get().BaseType in $mod.btAllJSInteger)) {
        return Result;
      };
      ClassDotScope = this.PushClassDotScope({get: function () {
          return aClass;
        }, set: function (v) {
          aClass = v;
        }});
      Ident = ClassDotScope.FindIdentifier("length");
      this.PopScope();
      if ((Ident === null) || !pas.PasTree.TPasVariable.isPrototypeOf(Ident.FElement)) {
        return Result;
      };
      LengthVar = Ident.FElement;
      this.ComputeElement(LengthVar,LengthResolved,{},null);
      if (!this.IsSameType(LengthResolved.get().LoTypeEl,ArgResolved.get().LoTypeEl,pas.PasResolver.TPRResolveAlias.prraNone)) {
        return Result;
      };
      Result = true;
      Getter = this.GetPasPropertyGetter(DefProp);
      if (!this.IsExternalBracketAccessor(Getter)) this.RaiseMsg(20180519141636,4010,rtl.getResStr(pas.FPPas2Js,"sForInJSArrDefaultGetterNotExtBracketAccessor"),[],Loop.StartExpr);
      this.ComputeElement(DefProp.VarType,PropResultResolved,{},null);
      PropResultResolved.get().Flags = rtl.includeSet(PropResultResolved.get().Flags,pas.PasResolver.TPasResolverResultFlag.rrfReadable);
      this.CheckAssignResCompatibility(VarResolved,PropResultResolved.get(),Loop.VariableName,true);
      return Result;
    };
  });
  this.TCtxAccess = {"0": "caRead", caRead: 0, "1": "caAssign", caAssign: 1, "2": "caByReference", caByReference: 2};
  $mod.$rtti.$Enum("TCtxAccess",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TCtxAccess});
  $mod.$rtti.$Class("TFunctionContext");
  $mod.$rtti.$Class("TConvertContext");
  $mod.$rtti.$ClassRef("TConvertContextClass",{instancetype: $mod.$rtti["TConvertContext"]});
  rtl.createClass($mod,"TConvertContext",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.PasElement = null;
      this.JSElement = null;
      this.Resolver = null;
      this.Parent = null;
      this.IsGlobal = false;
      this.Access = 0;
      this.AccessContext = null;
      this.TmpVarCount = 0;
      this.ScannerBoolSwitches = {};
      this.ScannerModeSwitches = {};
    };
    this.$final = function () {
      this.PasElement = undefined;
      this.JSElement = undefined;
      this.Resolver = undefined;
      this.Parent = undefined;
      this.AccessContext = undefined;
      this.ScannerBoolSwitches = undefined;
      this.ScannerModeSwitches = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (PasEl, JSEl, aParent) {
      this.PasElement = PasEl;
      this.JSElement = JSEl;
      this.Parent = aParent;
      if (this.Parent !== null) {
        this.Resolver = this.Parent.Resolver;
        this.Access = aParent.Access;
        this.AccessContext = aParent.AccessContext;
        this.ScannerBoolSwitches = rtl.refSet(aParent.ScannerBoolSwitches);
        this.ScannerModeSwitches = rtl.refSet(aParent.ScannerModeSwitches);
      };
    };
    this.GetRootModule = function () {
      var Result = null;
      var aContext = null;
      aContext = this;
      while (aContext.Parent !== null) aContext = aContext.Parent;
      if (pas.PasTree.TPasModule.isPrototypeOf(aContext.PasElement)) {
        Result = aContext.PasElement}
       else Result = null;
      return Result;
    };
    this.GetNonDotContext = function () {
      var Result = null;
      Result = this;
      while ($mod.TDotContext.isPrototypeOf(Result)) Result = Result.Parent;
      return Result;
    };
    this.GetFunctionContext = function () {
      var Result = null;
      Result = this.GetContextOfType($mod.TFunctionContext);
      return Result;
    };
    this.GetLocalName = function (El) {
      var Result = "";
      if (this.Parent !== null) {
        Result = this.Parent.GetLocalName(El)}
       else Result = "";
      return Result;
    };
    this.GetSelfContext = function () {
      var Result = null;
      var Ctx = null;
      Ctx = this;
      while (Ctx !== null) {
        if ($mod.TFunctionContext.isPrototypeOf(Ctx) && pas.PasTree.TPasClassType.isPrototypeOf(Ctx.ThisPas)) return Ctx;
        Ctx = Ctx.Parent;
      };
      Result = null;
      return Result;
    };
    this.GetContextOfPasElement = function (El) {
      var Result = null;
      var ctx = null;
      Result = null;
      ctx = this;
      do {
        if (ctx.PasElement === El) return ctx;
        ctx = ctx.Parent;
      } while (!(ctx === null));
      return Result;
    };
    this.GetFuncContextOfPasElement = function (El) {
      var Result = null;
      var ctx = null;
      var Scope = null;
      Result = null;
      if (pas.PasTree.TPasProcedure.isPrototypeOf(El)) {
        Scope = El.FData;
        if (Scope.ImplProc !== null) El = Scope.ImplProc;
      };
      ctx = this;
      do {
        if ((ctx.PasElement === El) && $mod.TFunctionContext.isPrototypeOf(ctx)) return ctx;
        ctx = ctx.Parent;
      } while (!(ctx === null));
      return Result;
    };
    this.GetContextOfType = function (aType) {
      var Result = null;
      var ctx = null;
      Result = null;
      ctx = this;
      do {
        if (aType.isPrototypeOf(ctx)) return ctx;
        ctx = ctx.Parent;
      } while (!(ctx === null));
      return Result;
    };
    this.CreateLocalIdentifier = function (Prefix) {
      var Result = "";
      this.TmpVarCount += 1;
      Result = Prefix + pas.SysUtils.IntToStr(this.TmpVarCount);
      return Result;
    };
    this.CurrentModeSwitches = function () {
      var Result = {};
      if (this.Resolver === null) {
        Result = rtl.refSet(pas.PScanner.OBJFPCModeSwitches)}
       else Result = rtl.refSet(this.Resolver.FCurrentParser.GetCurrentModeSwitches());
      return Result;
    };
    this.GetGlobalFunc = function () {
      var Result = null;
      var Ctx = null;
      Ctx = this;
      while (Ctx !== null) {
        if ((Ctx.IsGlobal && (Ctx.JSElement !== null)) && $mod.TFunctionContext.isPrototypeOf(Ctx)) return Ctx;
        Ctx = Ctx.Parent;
      };
      Result = null;
      return Result;
    };
    this.WriteStack = function () {
      var Self = this;
      var SelfCtx = null;
      function W(Index, AContext) {
        if (AContext === SelfCtx) pas.System.Writeln("  SelfContext:");
        AContext.DoWriteStack(Index);
        if (AContext.Parent !== null) W(Index + 1,AContext.Parent);
      };
      SelfCtx = Self.GetSelfContext();
      pas.System.Writeln("TConvertContext.WriteStack: START");
      W(1,Self);
      pas.System.Writeln("TConvertContext.WriteStack: END");
    };
    this.DoWriteStack = function (Index) {
      pas.System.Writeln("  ",Index," ",this.ToString());
    };
    this.ToString = function () {
      var Result = "";
      Result = ((((((("[" + this.$classname) + "]") + " pas=") + pas.PasResolveEval.GetObjName(this.PasElement)) + " js=") + pas.PasResolveEval.GetObjName(this.JSElement)) + " Global=") + pas.SysUtils.BoolToStr(this.IsGlobal,true);
      return Result;
    };
  });
  rtl.createClass($mod,"TRootContext",$mod.TConvertContext,function () {
    this.$init = function () {
      $mod.TConvertContext.$init.call(this);
      this.ResourceStrings = null;
    };
    this.$final = function () {
      this.ResourceStrings = undefined;
      $mod.TConvertContext.$final.call(this);
    };
  });
  rtl.createClass($mod,"TFCLocalIdentifier",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.Element = null;
      this.Name = "";
    };
    this.$final = function () {
      this.Element = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (aName, TheEl) {
      this.Name = aName;
      this.Element = TheEl;
    };
  });
  rtl.createClass($mod,"TFunctionContext",$mod.TConvertContext,function () {
    this.$init = function () {
      $mod.TConvertContext.$init.call(this);
      this.LocalVars = [];
      this.ThisPas = null;
      this.IntfElReleases = null;
      this.ResultNeedsIntfRelease = false;
      this.IntfExprReleaseCount = 0;
      this.BodySt = null;
      this.TrySt = null;
      this.FinallyFirst = null;
      this.FinallyLast = null;
    };
    this.$final = function () {
      this.LocalVars = undefined;
      this.ThisPas = undefined;
      this.IntfElReleases = undefined;
      this.BodySt = undefined;
      this.TrySt = undefined;
      this.FinallyFirst = undefined;
      this.FinallyLast = undefined;
      $mod.TConvertContext.$final.call(this);
    };
    this.Destroy = function () {
      var i = 0;
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.IntfElReleases;
        }, set: function (v) {
          this.p.IntfElReleases = v;
        }});
      for (var $l1 = 0, $end2 = rtl.length(this.LocalVars) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        pas.SysUtils.FreeAndNil({a: i, p: this.LocalVars, get: function () {
            return this.p[this.a];
          }, set: function (v) {
            this.p[this.a] = v;
          }});
      };
      pas.System.TObject.Destroy.call(this);
    };
    this.AddLocalVar = function (aName, El) {
      var l = 0;
      l = rtl.length(this.LocalVars);
      this.LocalVars = rtl.arraySetLength(this.LocalVars,null,l + 1);
      this.LocalVars[l] = $mod.TFCLocalIdentifier.$create("Create$1",[aName,El]);
    };
    this.Add_InterfaceRelease = function (El) {
      if (this.IntfElReleases === null) this.IntfElReleases = pas.Classes.TFPList.$create("Create");
      if (this.IntfElReleases.IndexOf(El) >= 0) return;
      this.IntfElReleases.Add(El);
    };
    this.ToString = function () {
      var Result = "";
      var V = null;
      Result = $mod.TConvertContext.ToString.call(this);
      if (this.ThisPas !== null) {
        Result = Result + " this";
        V = this.FindLocalIdentifier(this.ThisPas);
        if (V !== null) Result = ((Result + '="') + V.Name) + '"';
        Result = (Result + "=") + pas.PasResolveEval.GetObjName(this.ThisPas);
      };
      return Result;
    };
    this.GetLocalName = function (El) {
      var Result = "";
      var V = null;
      if (El === null) return "";
      V = this.FindLocalIdentifier(El);
      if (V !== null) {
        Result = V.Name}
       else if (this.ThisPas === El) {
        Result = "this"}
       else {
        Result = $mod.TConvertContext.GetLocalName.call(this,El);
        if (Result === "this") Result = "";
      };
      return Result;
    };
    this.IndexOfLocalVar = function (aName) {
      var Result = 0;
      var i = 0;
      for (var $l1 = 0, $end2 = rtl.length(this.LocalVars) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.LocalVars[i].Name === aName) return i;
      };
      Result = -1;
      return Result;
    };
    this.IndexOfLocalVar$1 = function (El) {
      var Result = 0;
      var i = 0;
      if (El === null) return -1;
      for (var $l1 = 0, $end2 = rtl.length(this.LocalVars) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.LocalVars[i].Element === El) return i;
      };
      Result = -1;
      return Result;
    };
    this.FindLocalVar = function (aName) {
      var Result = null;
      var i = 0;
      i = this.IndexOfLocalVar(aName);
      if (i >= 0) {
        Result = this.LocalVars[i]}
       else Result = null;
      return Result;
    };
    this.FindLocalIdentifier = function (El) {
      var Result = null;
      var i = 0;
      i = this.IndexOfLocalVar$1(El);
      if (i >= 0) {
        Result = this.LocalVars[i]}
       else Result = null;
      return Result;
    };
    this.DoWriteStack = function (Index) {
      var i = 0;
      $mod.TConvertContext.DoWriteStack.call(this,Index);
      for (var $l1 = 0, $end2 = rtl.length(this.LocalVars) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        pas.System.Writeln("    ",i," ",this.LocalVars[i].Name,": ",pas.PasResolveEval.GetObjName(this.LocalVars[i].Element));
      };
    };
  });
  rtl.createClass($mod,"TObjectContext",$mod.TConvertContext,function () {
  });
  rtl.createClass($mod,"TSectionContext",$mod.TFunctionContext,function () {
    this.Create$1 = function (PasEl, JSEl, aParent) {
      $mod.TConvertContext.Create$1.apply(this,arguments);
      this.IsGlobal = true;
    };
  });
  rtl.createClass($mod,"TDotContext",$mod.TConvertContext,function () {
    this.$init = function () {
      $mod.TConvertContext.$init.call(this);
      this.LeftResolved = new pas.PasResolver.TPasResolverResult();
      this.JS = null;
    };
    this.$final = function () {
      this.LeftResolved = undefined;
      this.JS = undefined;
      $mod.TConvertContext.$final.call(this);
    };
  });
  rtl.createClass($mod,"TAssignContext",$mod.TConvertContext,function () {
    this.$init = function () {
      $mod.TConvertContext.$init.call(this);
      this.LeftResolved = new pas.PasResolver.TPasResolverResult();
      this.RightResolved = new pas.PasResolver.TPasResolverResult();
      this.RightSide = null;
      this.PropertyEl = null;
      this.Setter = null;
      this.Call = null;
    };
    this.$final = function () {
      this.LeftResolved = undefined;
      this.RightResolved = undefined;
      this.RightSide = undefined;
      this.PropertyEl = undefined;
      this.Setter = undefined;
      this.Call = undefined;
      $mod.TConvertContext.$final.call(this);
    };
    this.Create$1 = function (PasEl, JSEl, aParent) {
      $mod.TConvertContext.Create$1.call(this,PasEl,JSEl,aParent);
      this.Access = $mod.TCtxAccess.caAssign;
      this.AccessContext = this;
    };
  });
  rtl.createClass($mod,"TParamContext",$mod.TConvertContext,function () {
    this.$init = function () {
      $mod.TConvertContext.$init.call(this);
      this.Arg = null;
      this.Expr = null;
      this.ResolvedExpr = new pas.PasResolver.TPasResolverResult();
      this.Getter = null;
      this.Setter = null;
      this.ReusingReference = false;
    };
    this.$final = function () {
      this.Arg = undefined;
      this.Expr = undefined;
      this.ResolvedExpr = undefined;
      this.Getter = undefined;
      this.Setter = undefined;
      $mod.TConvertContext.$final.call(this);
    };
    this.Create$1 = function (PasEl, JSEl, aParent) {
      $mod.TConvertContext.Create$1.call(this,PasEl,JSEl,aParent);
      this.Access = $mod.TCtxAccess.caAssign;
      this.AccessContext = this;
    };
  });
  this.TPasToJsConverterOption = {"0": "coLowerCase", coLowerCase: 0, "1": "coSwitchStatement", coSwitchStatement: 1, "2": "coEnumNumbers", coEnumNumbers: 2, "3": "coUseStrict", coUseStrict: 3, "4": "coNoTypeInfo", coNoTypeInfo: 4, "5": "coEliminateDeadCode", coEliminateDeadCode: 5, "6": "coStoreImplJS", coStoreImplJS: 6, "7": "coRTLVersionCheckMain", coRTLVersionCheckMain: 7, "8": "coRTLVersionCheckSystem", coRTLVersionCheckSystem: 8, "9": "coRTLVersionCheckUnit", coRTLVersionCheckUnit: 9};
  $mod.$rtti.$Enum("TPasToJsConverterOption",{minvalue: 0, maxvalue: 9, ordtype: 1, enumtype: this.TPasToJsConverterOption});
  $mod.$rtti.$Set("TPasToJsConverterOptions",{comptype: $mod.$rtti["TPasToJsConverterOption"]});
  this.DefaultPasToJSOptions = rtl.createSet($mod.TPasToJsConverterOption.coLowerCase);
  this.DefaultJSWriterOptions = rtl.createSet(pas.jswriter.TWriteOption.woCompactArrayLiterals,pas.jswriter.TWriteOption.woCompactObjectLiterals,pas.jswriter.TWriteOption.woCompactArguments);
  $mod.$rtti.$MethodVar("TPas2JSIsElementUsedEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["El",pas.PasTree.$rtti["TPasElement"]]],rtl.boolean), methodkind: 1});
  $mod.$rtti.$DynArray("TJSReservedWordList",{eltype: rtl.string});
  this.TRefPathKind = {"0": "rpkPath", rpkPath: 0, "1": "rpkPathWithDot", rpkPathWithDot: 1, "2": "rpkPathAndName", rpkPathAndName: 2};
  $mod.$rtti.$Enum("TRefPathKind",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TRefPathKind});
  rtl.createClass($mod,"TPasToJSConverter",pas.System.TObject,function () {
    this.pfVar = 1;
    this.pfConst = 2;
    this.pfOut = 4;
    this.pfArray = 8;
    this.pfStatic = 1;
    this.pfVarargs = 2;
    this.pfExternal = 4;
    this.pfGetFunction = 1;
    this.pfSetProcedure = 2;
    this.pfStoredTrue = 0;
    this.pfStoredFalse = 4;
    this.pfStoredField = 8;
    this.pfStoredFunction = 12;
    this.pfHasIndex = 16;
    this.TMethodKind = {"0": "mkProcedure", mkProcedure: 0, "1": "mkFunction", mkFunction: 1, "2": "mkConstructor", mkConstructor: 2, "3": "mkDestructor", mkDestructor: 3, "4": "mkClassProcedure", mkClassProcedure: 4, "5": "mkClassFunction", mkClassFunction: 5};
    $mod.$rtti.$Enum("TPasToJSConverter.TMethodKind",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TMethodKind});
    this.TOrdType = {"0": "otSByte", otSByte: 0, "1": "otUByte", otUByte: 1, "2": "otSWord", otSWord: 2, "3": "otUWord", otUWord: 3, "4": "otSLong", otSLong: 4, "5": "otULong", otULong: 5, "6": "otSIntDouble", otSIntDouble: 6, "7": "otUIntDouble", otUIntDouble: 7};
    $mod.$rtti.$Enum("TPasToJSConverter.TOrdType",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TOrdType});
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FBuiltInNames = rtl.arraySetLength(null,"",142);
      this.FOnIsElementUsed = null;
      this.FOnIsTypeInfoUsed = null;
      this.FOptions = {};
      this.FReservedWords = [];
      this.FRTLVersion = 0.0;
      this.FTargetPlatform = 0;
      this.FTargetProcessor = 0;
    };
    this.$final = function () {
      this.FBuiltInNames = undefined;
      this.FOnIsElementUsed = undefined;
      this.FOnIsTypeInfoUsed = undefined;
      this.FOptions = undefined;
      this.FReservedWords = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetUseEnumNumbers = function () {
      var Result = false;
      Result = $mod.TPasToJsConverterOption.coEnumNumbers in this.FOptions;
      return Result;
    };
    this.GetUseLowerCase = function () {
      var Result = false;
      Result = $mod.TPasToJsConverterOption.coLowerCase in this.FOptions;
      return Result;
    };
    this.GetUseSwitchStatement = function () {
      var Result = false;
      Result = $mod.TPasToJsConverterOption.coSwitchStatement in this.FOptions;
      return Result;
    };
    this.CreatePrimitiveDotExpr = function (AName, Src) {
      var Result = null;
      var p = 0;
      var DotExpr = null;
      var Ident = null;
      if (AName === "") this.RaiseInconsistency(20170402230134,Src);
      p = $mod.PosLast(".",AName);
      if (p > 0) {
        if (Src !== null) {
          DotExpr = this.CreateElement(pas.jstree.TJSDotMemberExpression,Src)}
         else DotExpr = pas.jstree.TJSDotMemberExpression.$create("Create$1",[0,0,""]);
        DotExpr.FName = pas.System.Copy(AName,p + 1,AName.length);
        DotExpr.FMexpr = this.CreatePrimitiveDotExpr(pas.SysUtils.LeftStr(AName,p - 1),Src);
        Result = DotExpr;
      } else {
        if (Src !== null) {
          Ident = this.CreateElement(pas.jstree.TJSPrimaryExpressionIdent,Src)}
         else Ident = pas.jstree.TJSPrimaryExpressionIdent.$create("Create$1",[0,0,""]);
        Ident.FName = AName;
        Result = Ident;
      };
      return Result;
    };
    this.CreateSubDeclNameExpr = function (El, Name, AContext, PosEl) {
      var Result = null;
      var CurName = "";
      var ParentName = "";
      if (PosEl === null) PosEl = El;
      CurName = this.TransformVariableName(El,Name,false,AContext);
      if (!pas.PasTree.TProcedureBody.isPrototypeOf(El.FParent)) {
        ParentName = AContext.GetLocalName(El.FParent);
        if (ParentName === "") ParentName = "this";
        CurName = (ParentName + ".") + CurName;
      };
      Result = this.CreatePrimitiveDotExpr(CurName,PosEl);
      return Result;
    };
    this.CreateSubDeclNameExpr$1 = function (El, AContext, PosEl) {
      var Result = null;
      var Name = "";
      if (AContext.Resolver !== null) {
        Name = AContext.Resolver.GetOverloadName(El)}
       else Name = El.FName;
      Result = this.CreateSubDeclNameExpr(El,Name,AContext,PosEl);
      return Result;
    };
    this.CreateIdentifierExpr = function (El, AContext) {
      var Result = null;
      Result = this.CreatePrimitiveDotExpr(this.TransformVariableName$1(El,AContext),El);
      return Result;
    };
    this.CreateIdentifierExpr$1 = function (AName, CheckGlobal, PosEl, AContext) {
      var Result = null;
      Result = this.CreatePrimitiveDotExpr(this.TransformVariableName(PosEl,AName,CheckGlobal,AContext),PosEl);
      return Result;
    };
    this.CreateSwitchStatement = function (El, AContext) {
      var Result = null;
      var SwitchEl = null;
      var JSCaseEl = null;
      var SubEl = null;
      var St = null;
      var ok = false;
      var i = 0;
      var j = 0;
      var BreakSt = null;
      var BodySt = null;
      var StList = null;
      var Expr = null;
      Result = null;
      SwitchEl = this.CreateElement(pas.jstree.TJSSwitchStatement,El);
      ok = false;
      try {
        SwitchEl.FCond = this.ConvertExpression(El.CaseExpr,AContext);
        for (var $l1 = 0, $end2 = El.Elements.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          SubEl = rtl.getObject(El.Elements.Get(i));
          if (!pas.PasTree.TPasImplCaseStatement.isPrototypeOf(SubEl)) continue;
          St = SubEl;
          JSCaseEl = null;
          for (var $l3 = 0, $end4 = St.Expressions.FCount - 1; $l3 <= $end4; $l3++) {
            j = $l3;
            Expr = rtl.getObject(St.Expressions.Get(j));
            JSCaseEl = SwitchEl.FCases.AddCase();
            JSCaseEl.FExpr = this.ConvertExpression(Expr,AContext);
          };
          BodySt = null;
          if (St.Body !== null) BodySt = this.ConvertElement(St.Body,AContext);
          BreakSt = this.CreateElement(pas.jstree.TJSBreakStatement,St);
          if (BodySt === null) {
            BodySt = BreakSt}
           else {
            if (pas.jstree.TJSStatementList.isPrototypeOf(BodySt)) {
              StList = BodySt;
              this.AddToStatementList({get: function () {
                  return BodySt;
                }, set: function (v) {
                  BodySt = v;
                }},{get: function () {
                  return StList;
                }, set: function (v) {
                  StList = v;
                }},BreakSt,St);
            } else {
              StList = this.CreateElement(pas.jstree.TJSStatementList,St);
              StList.FA = BodySt;
              StList.FB = BreakSt;
              BodySt = StList;
            };
          };
          JSCaseEl.FBody = BodySt;
        };
        if (El.ElseBranch !== null) {
          JSCaseEl = SwitchEl.FCases.AddCase();
          JSCaseEl.FBody = this.ConvertImplBlockElements(El.ElseBranch,AContext,false);
          SwitchEl.FDefault = JSCaseEl;
        };
        ok = true;
      } finally {
        if (!ok) SwitchEl = rtl.freeLoc(SwitchEl);
      };
      Result = SwitchEl;
      return Result;
    };
    this.CreateTypeDecl = function (El, AContext) {
      var Result = null;
      var C = null;
      Result = null;
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasClassType) {
        Result = this.ConvertClassType(El,AContext)}
       else if (C === pas.PasTree.TPasClassOfType) {
        Result = this.ConvertClassOfType(El,AContext)}
       else if (C === pas.PasTree.TPasRecordType) {
        Result = this.ConvertRecordType(El,AContext)}
       else if (C === pas.PasTree.TPasEnumType) {
        Result = this.ConvertEnumType(El,AContext)}
       else if (C === pas.PasTree.TPasSetType) {
        Result = this.ConvertSetType(El,AContext)}
       else if (C === pas.PasTree.TPasRangeType) {
        Result = this.ConvertRangeType(El,AContext)}
       else if (C === pas.PasTree.TPasAliasType) {}
      else if (C === pas.PasTree.TPasTypeAliasType) {
        Result = this.ConvertTypeAliasType(El,AContext)}
       else if (C === pas.PasTree.TPasPointerType) {
        Result = this.ConvertPointerType(El,AContext)}
       else if ((C === pas.PasTree.TPasProcedureType) || (C === pas.PasTree.TPasFunctionType)) {
        Result = this.ConvertProcedureType(El,AContext)}
       else if (C === pas.PasTree.TPasArrayType) {
        Result = this.ConvertArrayType(El,AContext)}
       else {
        this.RaiseNotSupported(El,AContext,20170208144053,"");
      };
      return Result;
    };
    this.CreateVarDecl = function (El, AContext) {
      var Result = null;
      var C = null;
      var V = null;
      var AssignSt = null;
      var Obj = null;
      var ObjLit = null;
      Result = null;
      if (El.AbsoluteExpr !== null) return Result;
      if (pas.PasTree.TVariableModifier.vmExternal in El.VarModifiers) return Result;
      if ($mod.TObjectContext.isPrototypeOf(AContext)) {
        Obj = rtl.as(AContext.JSElement,pas.jstree.TJSObjectLiteral);
        ObjLit = Obj.FElements.AddElement();
        ObjLit.FName = this.TransformVariableName$1(El,AContext);
        ObjLit.FExpr = this.CreateVarInit(El,AContext);
      } else if (AContext.IsGlobal) {
        AssignSt = this.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
        Result = AssignSt;
        AssignSt.FLHS = this.CreateSubDeclNameExpr$1(El,AContext,null);
        AssignSt.FExpr = this.CreateVarInit(El,AContext);
      } else {
        C = this.ConvertVariable(El,AContext);
        if (C === null) this.RaiseInconsistency(20180501114300,El);
        V = this.CreateElement(pas.jstree.TJSVariableStatement,El);
        V.FA = C;
        Result = V;
      };
      return Result;
    };
    this.AddToSourceElements = function (Src, El) {
      var List = null;
      var AddEl = null;
      while (El !== null) {
        if (pas.jstree.TJSStatementList.isPrototypeOf(El)) {
          List = rtl.as(El,pas.jstree.TJSStatementList);
          AddEl = List.FA;
          El = List.FB;
          List.FA = null;
          List.FB = null;
          pas.SysUtils.FreeAndNil({get: function () {
              return List;
            }, set: function (v) {
              List = v;
            }});
        } else {
          AddEl = El;
          El = null;
        };
        Src.FStatements.AddNode().FNode = AddEl;
      };
    };
    this.RemoveFromSourceElements = function (Src, El) {
      var Statements = null;
      var i = 0;
      Statements = Src.FStatements;
      for (var $l1 = Statements.GetCount() - 1; $l1 >= 0; $l1--) {
        i = $l1;
        if (Statements.GetN(i).FNode === El) Statements.Delete(i);
      };
    };
    this.GetBuildInNames = function (bin) {
      var Result = "";
      Result = this.FBuiltInNames[bin];
      return Result;
    };
    this.SetBuildInNames = function (bin, AValue) {
      this.FBuiltInNames[bin] = AValue;
    };
    this.SetReservedWords = function (AValue) {
      var i = 0;
      if (this.FReservedWords === AValue) return;
      for (var $l1 = 0, $end2 = rtl.length(AValue) - 2; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.CompareStr(AValue[i],AValue[i + 1]) >= 0) throw pas.SysUtils.Exception.$create("Create$1",[((('TPasToJSConverter.SetPreservedWords "' + AValue[i]) + '" >= "') + AValue[i + 1]) + '"']);
      };
      this.FReservedWords = AValue;
    };
    this.SetUseEnumNumbers = function (AValue) {
      if (AValue) {
        this.FOptions = rtl.includeSet(this.FOptions,$mod.TPasToJsConverterOption.coEnumNumbers)}
       else this.FOptions = rtl.excludeSet(this.FOptions,$mod.TPasToJsConverterOption.coEnumNumbers);
    };
    this.SetUseLowerCase = function (AValue) {
      if (AValue) {
        this.FOptions = rtl.includeSet(this.FOptions,$mod.TPasToJsConverterOption.coLowerCase)}
       else this.FOptions = rtl.excludeSet(this.FOptions,$mod.TPasToJsConverterOption.coLowerCase);
    };
    this.SetUseSwitchStatement = function (AValue) {
      if (AValue) {
        this.FOptions = rtl.includeSet(this.FOptions,$mod.TPasToJsConverterOption.coSwitchStatement)}
       else this.FOptions = rtl.excludeSet(this.FOptions,$mod.TPasToJsConverterOption.coSwitchStatement);
    };
    this.DoError = function (Id, Msg) {
      var E = null;
      E = $mod.EPas2JS.$create("Create$1",[Msg]);
      E.Id = Id;
      E.MsgType = pas.PScanner.TMessageType.mtError;
      throw E;
    };
    this.DoError$1 = function (Id, Msg, Args) {
      var E = null;
      E = $mod.EPas2JS.$create("CreateFmt",[Msg,Args]);
      E.Id = Id;
      E.MsgType = pas.PScanner.TMessageType.mtError;
      throw E;
    };
    this.DoError$2 = function (Id, MsgNumber, MsgPattern, Args, El) {
      var E = null;
      E = $mod.EPas2JS.$create("CreateFmt",[MsgPattern,Args]);
      E.PasElement = El;
      E.MsgNumber = MsgNumber;
      E.Id = Id;
      E.MsgType = pas.PScanner.TMessageType.mtError;
      pas.PScanner.CreateMsgArgs({p: E, get: function () {
          return this.p.Args;
        }, set: function (v) {
          this.p.Args = v;
        }},Args);
      throw E;
    };
    this.RaiseNotSupported = function (El, AContext, Id, Msg) {
      var E = null;
      if (AContext === null) ;
      E = $mod.EPas2JS.$create("CreateFmt",[rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),[((pas.PasResolveEval.GetObjName(El) + " [") + pas.SysUtils.IntToStr(Id)) + "]"]]);
      if (Msg !== "") E.fMessage = (E.fMessage + ": ") + Msg;
      E.PasElement = El;
      E.MsgNumber = 4001;
      E.Args = rtl.arraySetLength(E.Args,"",1);
      E.Args[0] = El.$classname;
      E.Id = Id;
      E.MsgType = pas.PScanner.TMessageType.mtError;
      throw E;
    };
    this.RaiseIdentifierNotFound = function (Identifier, El, Id) {
      var E = null;
      E = $mod.EPas2JS.$create("CreateFmt",[rtl.getResStr(pas.PasResolveEval,"sIdentifierNotFound"),[Identifier]]);
      E.PasElement = El;
      E.MsgNumber = 3001;
      E.Args = rtl.arraySetLength(E.Args,"",1);
      E.Args[0] = Identifier;
      E.Id = Id;
      E.MsgType = pas.PScanner.TMessageType.mtError;
      throw E;
    };
    this.RaiseInconsistency = function (Id, El) {
      var s = "";
      s = ("TPasToJSConverter.RaiseInconsistency[" + pas.SysUtils.IntToStr(Id)) + "]: you found a bug";
      if (El !== null) {
        s = s + pas.PasResolver.GetElementDbgPath(El);
        if (El.FName !== "") {
          s = s + El.FName}
         else s = s + pas.PasResolver.GetElementTypeName(El);
        s = (s + " at ") + $mod.TPas2JSResolver.GetDbgSourcePosStr(El);
      };
      throw pas.SysUtils.Exception.$create("Create$1",[s]);
    };
    this.GetExpressionValueType = function (El, AContext) {
      var Self = this;
      var Result = 0;
      function CombineValueType(A, B) {
        var Result = 0;
        if (A === pas.jsbase.TJSType.jstUNDEFINED) {
          Result = B}
         else if (B === pas.jsbase.TJSType.jstUNDEFINED) {
          Result = A}
         else Result = A;
        return Result;
      };
      var A = 0;
      var B = 0;
      if (pas.PasTree.TBoolConstExpr.isPrototypeOf(El)) {
        Result = pas.jsbase.TJSType.jstBoolean}
       else if (pas.PasTree.TPrimitiveExpr.isPrototypeOf(El)) {
        var $tmp1 = El.Kind;
        if ($tmp1 === pas.PasTree.TPasExprKind.pekIdent) {
          Result = Self.GetPasIdentValueType(El.FName,AContext)}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekNumber) {
          Result = pas.jsbase.TJSType.jstNumber}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekString) {
          Result = pas.jsbase.TJSType.jstString}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekSet) {
          Result = pas.jsbase.TJSType.jstUNDEFINED}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekNil) {
          Result = pas.jsbase.TJSType.jstNull}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekBoolConst) {
          Result = pas.jsbase.TJSType.jstBoolean}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekRange) {
          Result = pas.jsbase.TJSType.jstUNDEFINED}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekFuncParams) {
          Result = pas.jsbase.TJSType.jstUNDEFINED}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekArrayParams) {
          Result = pas.jsbase.TJSType.jstUNDEFINED}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekListOfExp) {
          Result = pas.jsbase.TJSType.jstUNDEFINED}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekInherited) {
          Result = pas.jsbase.TJSType.jstUNDEFINED}
         else if ($tmp1 === pas.PasTree.TPasExprKind.pekSelf) Result = pas.jsbase.TJSType.jstObject;
      } else if (pas.PasTree.TUnaryExpr.isPrototypeOf(El)) {
        Result = Self.GetExpressionValueType(El.Operand,AContext)}
       else if (pas.PasTree.TBinaryExpr.isPrototypeOf(El)) {
        A = Self.GetExpressionValueType(El.left,AContext);
        B = Self.GetExpressionValueType(El.right,AContext);
        Result = CombineValueType(A,B);
      } else Result = pas.jsbase.TJSType.jstUNDEFINED;
      return Result;
    };
    this.GetPasIdentValueType = function (AName, AContext) {
      var Result = 0;
      if (AContext === null) ;
      if (AName === "") ;
      Result = pas.jsbase.TJSType.jstUNDEFINED;
      return Result;
    };
    this.ComputeConstString = function (Expr, AContext, NotEmpty) {
      var Result = "";
      var Prim = null;
      if (AContext.Resolver !== null) {
        Result = AContext.Resolver.ComputeConstString(Expr,false,NotEmpty)}
       else {
        Result = "";
        if (pas.PasTree.TPrimitiveExpr.isPrototypeOf(Expr)) {
          Prim = Expr;
          if (Prim.Kind === pas.PasTree.TPasExprKind.pekString) {
            Result = Prim.Value}
           else this.RaiseNotSupported(Prim,AContext,20170215124733,"");
        } else this.RaiseNotSupported(Expr,AContext,20170322121331,"");
      };
      return Result;
    };
    this.IsLiteralInteger = function (El, number) {
      var Result = false;
      var Value = null;
      Result = false;
      if (!pas.jstree.TJSLiteral.isPrototypeOf(El)) return Result;
      Value = El.FValue;
      if (Value.FValueType === pas.jsbase.TJSType.jstNumber) try {
        number.set(Math.round(Value.GetAsNumber()));
        if (number.get() === Value.GetAsNumber()) return true;
      } catch ($e) {
      };
      return Result;
    };
    this.IsLiteralNumber = function (El, n) {
      var Result = false;
      var Value = null;
      if (!pas.jstree.TJSLiteral.isPrototypeOf(El)) return false;
      Value = El.FValue;
      if (Value.FValueType !== pas.jsbase.TJSType.jstNumber) return false;
      Result = true;
      n.set(Value.GetAsNumber());
      return Result;
    };
    this.GetOverloadName = function (El, AContext) {
      var Result = "";
      if (AContext.Resolver !== null) {
        Result = AContext.Resolver.GetOverloadName(El)}
       else Result = El.FName;
      return Result;
    };
    this.CanClashWithGlobal = function (El) {
      var Result = false;
      var C = null;
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasArgument) {
        Result = true}
       else if (pas.PasTree.TProcedureBody.isPrototypeOf(El.FParent)) {
        Result = true}
       else if (pas.PasTree.TPasImplExceptOn.isPrototypeOf(El.FParent)) {
        Result = true}
       else Result = false;
      return Result;
    };
    this.TransformVariableName = function (ErrorEl, AName, CheckGlobal, AContext) {
      var Result = "";
      var i = 0;
      var c = "";
      if (AContext === null) ;
      if (pas.System.Pos(".",AName) > 0) this.RaiseInconsistency(20170203164711,ErrorEl);
      if (this.GetUseLowerCase()) {
        Result = pas.SysUtils.LowerCase(AName)}
       else Result = AName;
      if (!this.IsReservedWord(Result,CheckGlobal)) return Result;
      for (var $l1 = 1, $end2 = Result.length; $l1 <= $end2; $l1++) {
        i = $l1;
        c = Result.charAt(i - 1);
        var $tmp3 = c;
        if ((($tmp3 >= "a") && ($tmp3 <= "z")) || (($tmp3 >= "A") && ($tmp3 <= "Z"))) {
          Result = rtl.setCharAt(Result,i - 1,String.fromCharCode(c.charCodeAt() ^ 32));
          if (!this.IsReservedWord(Result,CheckGlobal)) return Result;
        };
      };
      this.RaiseNotSupported(ErrorEl,AContext,20170203131832,"");
      return Result;
    };
    this.TransformVariableName$1 = function (El, AContext) {
      var Result = "";
      var aType = null;
      if (pas.PasTree.TPasProcedure.isPrototypeOf(El) && (El.LibrarySymbolName !== null)) {
        Result = this.ComputeConstString(El.LibrarySymbolName,AContext,true)}
       else if (pas.PasTree.TPasVariable.isPrototypeOf(El) && (El.ExportName !== null)) {
        Result = this.ComputeConstString(El.ExportName,AContext,true)}
       else if (pas.PasTree.TPasType.isPrototypeOf(El)) {
        if (AContext.Resolver !== null) {
          aType = AContext.Resolver.ResolveAliasType(El)}
         else aType = El;
        Result = this.TransformVariableName(El,aType.FName,this.CanClashWithGlobal(aType),AContext);
      } else Result = this.TransformVariableName(El,this.GetOverloadName(El,AContext),this.CanClashWithGlobal(El),AContext);
      return Result;
    };
    this.TransformModuleName = function (El, AddModulesPrefix, AContext) {
      var Result = "";
      var p = 0;
      var StartP = 0;
      var aName = "";
      var Part = "";
      if (pas.PasTree.TPasProgram.isPrototypeOf(El)) {
        Result = "program"}
       else {
        Result = "";
        aName = El.FName;
        p = 1;
        while (p <= aName.length) {
          StartP = p;
          while ((p <= aName.length) && (aName.charAt(p - 1) !== ".")) p += 1;
          Part = pas.System.Copy(aName,StartP,p - StartP);
          Part = this.TransformVariableName(El,Part,false,AContext);
          if (Result !== "") Result = Result + ".";
          Result = Result + Part;
          p += 1;
        };
      };
      if (AddModulesPrefix) {
        if (pas.System.Pos(".",Result) > 0) {
          Result = ((this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnModules] + '["') + Result) + '"]'}
         else Result = (this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnModules] + ".") + Result;
      };
      return Result;
    };
    this.IsReservedWord = function (aName, CheckGlobal) {
      var Result = false;
      var l = 0;
      var r = 0;
      var m = 0;
      var cmp = 0;
      Result = true;
      if (aName === this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnModules]) return Result;
      if (aName === this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL]) return Result;
      l = 0;
      r = 59;
      while (l <= r) {
        m = Math.floor((l + r) / 2);
        cmp = pas.SysUtils.CompareStr(aName,$mod.JSReservedWords[m]);
        if (cmp > 0) {
          l = m + 1}
         else if (cmp < 0) {
          r = m - 1}
         else return Result;
      };
      l = 0;
      r = rtl.length(this.FReservedWords) - 1;
      while (l <= r) {
        m = Math.floor((l + r) / 2);
        cmp = pas.SysUtils.CompareStr(aName,this.FReservedWords[m]);
        if (cmp > 0) {
          l = m + 1}
         else if (cmp < 0) {
          r = m - 1}
         else return Result;
      };
      if (CheckGlobal) {
        l = 0;
        r = 51;
        while (l <= r) {
          m = Math.floor((l + r) / 2);
          cmp = pas.SysUtils.CompareStr(aName,$mod.JSReservedGlobalWords[m]);
          if (cmp > 0) {
            l = m + 1}
           else if (cmp < 0) {
            r = m - 1}
           else return Result;
        };
      };
      Result = false;
      return Result;
    };
    this.GetTypeInfoName = function (El, AContext, ErrorEl) {
      var Result = "";
      var C = null;
      var bt = 0;
      var jbt = 0;
      var CurEl = null;
      var aName = "";
      Result = "";
      El = pas.PasResolver.ResolveSimpleAliasType(El);
      if (El === null) this.RaiseInconsistency(20170409172756,El);
      if (El === AContext.PasElement) {
        if (pas.PasTree.TPasClassType.isPrototypeOf(El)) {
          Result = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTILocal];
          return Result;
        } else this.RaiseNotSupported(ErrorEl,AContext,20170905150746,"cannot typeinfo itself");
      };
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
        if (El.FName === "") this.DoError$2(20170905150752,4021,rtl.getResStr(pas.FPPas2Js,"sTypeXCannotBePublished"),["typeinfo of anonymous " + El.ElementTypeName()],ErrorEl);
        if (pas.PasResolver.TResElDataBaseType.isPrototypeOf(El.FData)) {
          bt = El.FData.BaseType;
          var $tmp1 = bt;
          if ((((((((((((($tmp1 === pas.PasResolver.TResolverBaseType.btShortInt) || ($tmp1 === pas.PasResolver.TResolverBaseType.btByte)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btSmallInt)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btWord)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btLongint)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btLongWord)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btIntDouble)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btUIntDouble)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btString)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btChar)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btDouble)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btBoolean)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btPointer)) {
            Result = (this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + pas.SysUtils.LowerCase(AContext.Resolver.GetBaseTypeNames(bt));
            return Result;
          } else if ($tmp1 === pas.PasResolver.TResolverBaseType.btCurrency) {
            Result = (this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + pas.SysUtils.LowerCase(AContext.Resolver.GetBaseTypeNames(pas.PasResolver.TResolverBaseType.btIntDouble));
            return Result;
          } else if ($tmp1 === pas.PasResolver.TResolverBaseType.btCustom) if ($mod.TResElDataPas2JSBaseType.isPrototypeOf(El.FData)) {
            jbt = El.FData.JSBaseType;
            var $tmp2 = jbt;
            if ($tmp2 === $mod.TPas2jsBaseType.pbtJSValue) {
              Result = (this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + pas.SysUtils.LowerCase($mod.Pas2jsBaseTypeNames[jbt]);
              return Result;
            };
          };
        };
      } else if (((((((((((C === pas.PasTree.TPasEnumType) || (C === pas.PasTree.TPasSetType)) || (C === pas.PasTree.TPasClassType)) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasArrayType)) || (C === pas.PasTree.TPasProcedureType)) || (C === pas.PasTree.TPasFunctionType)) || (C === pas.PasTree.TPasPointerType)) || (C === pas.PasTree.TPasTypeAliasType)) || (C === pas.PasTree.TPasRecordType)) || (C === pas.PasTree.TPasRangeType)) {
        CurEl = El;
        do {
          if (CurEl.FName !== "") {
            if (CurEl.$class.ClassType() === pas.PasTree.TPasTypeAliasType) {
              aName = this.TransformVariableName(CurEl,CurEl.FName,true,AContext)}
             else aName = this.TransformVariableName$1(CurEl,AContext);
            if (aName === "") this.RaiseNotSupported(CurEl,AContext,20170905144902,"name conversion failed");
            Result = aName + Result;
          } else {
            Result = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbitnAnonymousPostfix] + Result;
          };
          CurEl = CurEl.FParent;
          if (CurEl === null) break;
          C = CurEl.$class.ClassType();
          if ((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasRecordType)) {
            Result = "." + Result}
           else if ((((C.InheritsFrom(pas.PasTree.TPasType) || (C === pas.PasTree.TPasVariable)) || (C === pas.PasTree.TPasConst)) || (C === pas.PasTree.TPasArgument)) || (C === pas.PasTree.TPasProperty)) {}
          else break;
        } while (!false);
        if (pas.PasTree.TPasSection.isPrototypeOf(CurEl)) return Result;
      };
      aName = El.FName;
      if (aName === "") aName = El.$classname;
      this.DoError$2(20170409173329,4021,rtl.getResStr(pas.FPPas2Js,"sTypeXCannotBePublished"),[aName],ErrorEl);
      return Result;
    };
    this.IsElementUsed = function (El) {
      var Result = false;
      if (this.FOnIsElementUsed != null) {
        Result = this.FOnIsElementUsed(this,El)}
       else Result = true;
      return Result;
    };
    this.IsSystemUnit = function (aModule) {
      var Result = false;
      Result = (pas.SysUtils.CompareText(aModule.FName,"system") === 0) && (aModule.$class.ClassType() === pas.PasTree.TPasModule);
      return Result;
    };
    this.HasTypeInfo = function (El, AContext) {
      var Result = false;
      Result = false;
      if ($mod.TPasToJsConverterOption.coNoTypeInfo in this.FOptions) return Result;
      if (AContext.Resolver === null) return Result;
      if (!AContext.Resolver.HasTypeInfo(El)) return Result;
      if ((this.FOnIsTypeInfoUsed != null) && !this.FOnIsTypeInfoUsed(this,El)) return Result;
      Result = true;
      return Result;
    };
    this.IsClassRTTICreatedBefore = function (aClass, Before, AConText) {
      var Result = false;
      var Decls = null;
      var i = 0;
      var List = null;
      var C = null;
      var aParent = null;
      var Decl = null;
      Result = false;
      aParent = aClass.FParent;
      if (aParent !== Before.FParent) return true;
      if (!aParent.$class.InheritsFrom(pas.PasTree.TPasDeclarations)) this.RaiseInconsistency(20170412101457,aClass);
      Decls = aParent;
      List = Decls.Declarations;
      for (var $l1 = 0, $end2 = List.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Decl = rtl.getObject(List.Get(i));
        if (Decl === Before) return Result;
        if (Decl === aClass) return true;
        C = Decl.$class.ClassType();
        if (C === pas.PasTree.TPasClassType) {
          if ((Decl.IsForward && pas.PasResolver.TResolvedReference.isPrototypeOf(Decl.FData)) && (Decl.FData.FDeclaration === aClass)) return true;
        } else if (C === pas.PasTree.TPasClassOfType) {
          if (AConText.Resolver.ResolveAliasType(Decl.DestType) === aClass) return true;
        };
      };
      return Result;
    };
    this.FindAvailableLocalName = function (aName, JSExpr) {
      var Self = this;
      var StartJSName = "";
      var JSName = "";
      var n = 0;
      var Changed = false;
      function Next() {
        var ch = "";
        Changed = true;
        if ((n === 0) && (JSName.length === 1)) {
          ch = JSName.charAt(0);
          var $tmp1 = ch;
          if (($tmp1 >= "a") && ($tmp1 <= "x")) {
            JSName = String.fromCharCode(ch.charCodeAt() + 1)}
           else if ($tmp1 === "z") JSName = "a";
          if (JSName === StartJSName) {
            n = 1;
            JSName = StartJSName + pas.SysUtils.IntToStr(n);
          };
        } else {
          n += 1;
          JSName = StartJSName + pas.SysUtils.IntToStr(n);
        };
      };
      function Find(El) {
        var C = null;
        var Call = null;
        var i = 0;
        if (El === null) return;
        C = El.$class.ClassType();
        if (C === pas.jstree.TJSPrimaryExpressionIdent) {
          if (El.FName === JSName) Next();
        } else if (C.InheritsFrom(pas.jstree.TJSMemberExpression)) {
          Find(El.FMexpr);
          if (C === pas.jstree.TJSBracketMemberExpression) {
            Find(El.FName)}
           else if (C === pas.jstree.TJSNewMemberExpression) {
            var $with1 = El.FArgs.FElements;
            for (var $l2 = 0, $end3 = $with1.GetCount() - 1; $l2 <= $end3; $l2++) {
              i = $l2;
              Find($with1.GetE(i).FExpr);
            };
          };
        } else if (C === pas.jstree.TJSCallExpression) {
          Call = El;
          Find(Call.FExpr);
          if (Call.FArgs !== null) {
            var $with4 = Call.FArgs.FElements;
            for (var $l5 = 0, $end6 = $with4.GetCount() - 1; $l5 <= $end6; $l5++) {
              i = $l5;
              Find($with4.GetE(i).FExpr);
            };
          };
        } else if (C.InheritsFrom(pas.jstree.TJSUnary)) {
          Find(El.FA)}
         else if (C.InheritsFrom(pas.jstree.TJSBinary)) {
          Find(El.FA);
          Find(El.FB);
        } else if (C === pas.jstree.TJSArrayLiteral) {
          var $with7 = El.FElements;
          for (var $l8 = 0, $end9 = $with7.GetCount() - 1; $l8 <= $end9; $l8++) {
            i = $l8;
            Find($with7.GetE(i).FExpr);
          };
        } else if (C === pas.jstree.TJSConditionalExpression) {
          Find(El.FA);
          Find(El.FB);
          Find(El.FC);
        } else if (C.InheritsFrom(pas.jstree.TJSAssignStatement)) {
          Find(El.FLHS);
          Find(El.FExpr);
        } else if (C === pas.jstree.TJSVarDeclaration) {
          Find(El.FInit)}
         else if (C === pas.jstree.TJSObjectLiteral) {
          var $with10 = El.FElements;
          for (var $l11 = 0, $end12 = $with10.GetCount() - 1; $l11 <= $end12; $l11++) {
            i = $l11;
            Find($with10.GetE(i).FExpr);
          };
        } else if (C === pas.jstree.TJSIfStatement) {
          Find(El.FCond);
          Find(El.FBTrue);
          Find(El.FBFalse);
        } else if (C.InheritsFrom(pas.jstree.TJSBodyStatement)) {
          Find(El.FBody);
          if (C.InheritsFrom(pas.jstree.TJSCondLoopStatement)) {
            Find(El.FCond);
            if (C === pas.jstree.TJSForStatement) {
              Find(El.FInit);
              Find(El.FIncr);
            };
          } else if (C === pas.jstree.TJSForInStatement) {
            Find(El.FLhs);
            Find(El.FList);
          };
        } else if (C === pas.jstree.TJSSwitchStatement) {
          Find(El.FCond);
          var $with13 = El.FCases;
          for (var $l14 = 0, $end15 = $with13.GetCount() - 1; $l14 <= $end15; $l14++) {
            i = $l14;
            var $with16 = $with13.GetC(i);
            Find($with16.FExpr);
            Find($with16.FBody);
          };
          if (El.FDefault !== null) {
            var $with17 = El.FDefault;
            Find($with17.FExpr);
            Find($with17.FBody);
          };
        };
      };
      if (JSExpr === null) return;
      StartJSName = aName.get();
      JSName = StartJSName;
      n = 0;
      Changed = false;
      Find(JSExpr);
      if (!Changed) return;
      do {
        Changed = false;
        Find(JSExpr);
      } while (Changed);
      aName.set(pas.jsbase.JSStringToString(JSName));
    };
    this.CreateElement = function (C, Src) {
      var Result = null;
      var Line = 0;
      var Col = 0;
      if (Src != null) {
        pas.PasResolver.TPasResolver.UnmangleSourceLineNumber(Src.SourceLinenumber,{get: function () {
            return Line;
          }, set: function (v) {
            Line = v;
          }},{get: function () {
            return Col;
          }, set: function (v) {
            Col = v;
          }});
        Result = C.$create("Create$1",[Line,Col,Src.SourceFilename]);
      } else Result = C.$create("Create$1",[0,0,""]);
      return Result;
    };
    this.CreateFreeOrNewInstanceExpr = function (Ref, AContext) {
      var Result = null;
      var C = null;
      var Proc = null;
      var ProcScope = null;
      var ClassScope = null;
      var aClass = null;
      var ArgEx = null;
      var FunName = "";
      Result = null;
      Proc = rtl.as(Ref.FDeclaration,pas.PasTree.TPasProcedure);
      if (Proc.FName === "") this.RaiseInconsistency(20170125191914,Proc);
      ProcScope = rtl.as(Proc.FData,pas.PasResolver.TPasProcedureScope);
      ClassScope = ProcScope.ClassScope;
      aClass = ClassScope.FElement;
      if (aClass.FName === "") this.RaiseInconsistency(20170125191923,aClass);
      C = this.CreateCallExpression(Ref.FElement);
      try {
        if (pas.PasResolver.TResolvedReferenceFlag.rrfNewInstance in Ref.Flags) {
          FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnClassInstanceNew]}
         else FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnClassInstanceFree];
        FunName = this.CreateReferencePath(Proc,AContext,$mod.TRefPathKind.rpkPathWithDot,false,Ref) + FunName;
        C.FExpr = this.CreatePrimitiveDotExpr(FunName,Ref.FElement);
        ArgEx = this.CreateLiteralString(Ref.FElement,this.TransformVariableName$1(Proc,AContext));
        C.AddArg(ArgEx);
        Result = C;
      } finally {
        if (Result === null) C = rtl.freeLoc(C);
      };
      return Result;
    };
    this.CreateFunctionSt = function (El, WithBody, WithSrc) {
      var Result = null;
      var FuncSt = null;
      FuncSt = this.CreateElement(pas.jstree.TJSFunctionDeclarationStatement,El);
      Result = FuncSt;
      FuncSt.FFuncDef = this.CreateFunctionDef(El,WithBody,WithSrc);
      return Result;
    };
    this.CreateFunctionDef = function (El, WithBody, WithSrc) {
      var Result = null;
      Result = pas.jstree.TJSFuncDef.$create("Create$1");
      if (WithBody) {
        Result.FBody = this.CreateElement(pas.jstree.TJSFunctionBody,El);
        if (WithSrc) Result.FBody.FA = this.CreateElement(pas.jstree.TJSSourceElements,El);
      };
      return Result;
    };
    this.CreateProcedureCall = function (Call, Args, TargetProc, AContext) {
      if (Call.get() === null) Call.set(this.CreateElement(pas.jstree.TJSCallExpression,Args));
      if (((Args === null) || (rtl.length(Args.Params) === 0)) && ((TargetProc === null) || (TargetProc.Args.FCount === 0))) return;
      if (Call.get().FArgs === null) Call.get().FArgs = this.CreateElement(pas.jstree.TJSArguments,Args);
      this.CreateProcedureCallArgs(Call.get().FArgs.FElements,Args,TargetProc,AContext);
    };
    this.CreateProcedureCallArgs = function (Elements, Args, TargetProc, AContext) {
      var ArgContext = null;
      var i = 0;
      var Arg = null;
      var TargetArgs = null;
      var TargetArg = null;
      var OldAccess = 0;
      ArgContext = AContext.GetNonDotContext();
      i = 0;
      OldAccess = ArgContext.Access;
      if (TargetProc !== null) {
        TargetArgs = TargetProc.Args}
       else TargetArgs = null;
      if (Args !== null) while (i < rtl.length(Args.Params)) {
        if ((TargetArgs !== null) && (i < TargetArgs.FCount)) {
          TargetArg = rtl.getObject(TargetArgs.Get(i))}
         else TargetArg = null;
        Arg = this.CreateProcCallArg(Args.Params[i],TargetArg,ArgContext);
        Elements.AddElement().FExpr = Arg;
        i += 1;
      };
      if (TargetProc !== null) {
        while (i < TargetArgs.FCount) {
          TargetArg = rtl.getObject(TargetArgs.Get(i));
          if (TargetArg.ValueExpr === null) {
            this.RaiseNotSupported(Args,AContext,20170201193601,"");
          };
          AContext.Access = $mod.TCtxAccess.caRead;
          Arg = this.ConvertElement(TargetArg.ValueExpr,ArgContext);
          Elements.AddElement().FExpr = Arg;
          i += 1;
        };
      };
      ArgContext.Access = OldAccess;
    };
    this.CreateProcCallArg = function (El, TargetArg, AContext) {
      var Result = null;
      var ExprResolved = new pas.PasResolver.TPasResolverResult();
      var ArgResolved = new pas.PasResolver.TPasResolverResult();
      var ExprFlags = {};
      var NeedVar = false;
      var ArgTypeIsArray = false;
      var ArgTypeEl = null;
      var ExprTypeEl = null;
      var Call = null;
      var aResolver = null;
      Result = null;
      if (TargetArg === null) {
        AContext.Access = $mod.TCtxAccess.caRead;
        Result = this.ConvertElement(El,AContext);
        return Result;
      };
      if (!(TargetArg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argDefault,pas.PasTree.TArgumentAccess.argVar,pas.PasTree.TArgumentAccess.argOut,pas.PasTree.TArgumentAccess.argConst))) this.DoError$2(20170213220927,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),[pas.PasTree.AccessNames[TargetArg.Access]],El);
      aResolver = AContext.Resolver;
      NeedVar = TargetArg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argVar,pas.PasTree.TArgumentAccess.argOut);
      aResolver.ComputeElement(TargetArg,{get: function () {
          return ArgResolved;
        }, set: function (v) {
          ArgResolved = v;
        }},{},null);
      ArgTypeEl = ArgResolved.LoTypeEl;
      ExprFlags = {};
      if (NeedVar) {
        ExprFlags = rtl.includeSet(ExprFlags,pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc)}
       else if (aResolver.IsProcedureType(ArgResolved,true)) ExprFlags = rtl.includeSet(ExprFlags,pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProcType);
      ArgTypeIsArray = pas.PasTree.TPasArrayType.isPrototypeOf(ArgTypeEl);
      aResolver.ComputeElement(El,{get: function () {
          return ExprResolved;
        }, set: function (v) {
          ExprResolved = v;
        }},rtl.refSet(ExprFlags),null);
      if (NeedVar) {
        Result = this.CreateProcCallArgRef(El,new pas.PasResolver.TPasResolverResult(ExprResolved),TargetArg,AContext)}
       else {
        AContext.Access = $mod.TCtxAccess.caRead;
        if (ArgTypeIsArray) {
          if (ExprResolved.BaseType === pas.PasResolver.TResolverBaseType.btNil) {
            Result = this.CreateElement(pas.jstree.TJSArrayLiteral,El);
            return Result;
          };
          Result = this.CreateArrayInit(ArgTypeEl,El,El,AContext);
        };
        if (Result === null) Result = this.ConvertElement(El,AContext);
        if ((ExprResolved.BaseType === pas.PasResolver.TResolverBaseType.btSet) && (ExprResolved.IdentEl !== null)) {
          if (TargetArg.Access === pas.PasTree.TArgumentAccess.argDefault) {
            Result = this.CreateReferencedSet(El,Result);
          };
        } else if (ArgResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) {
          if (ExprResolved.BaseType !== pas.PasResolver.TResolverBaseType.btCurrency) {
            Result = this.CreateMulNumber(El,Result,10000);
          };
        } else if (ExprResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) {
          if (ArgResolved.BaseType !== pas.PasResolver.TResolverBaseType.btCurrency) {
            Result = this.CreateDivideNumber(El,Result,10000);
          };
        } else if (ExprResolved.BaseType in pas.PasResolver.btAllStrings) {
          if (ArgTypeEl === null) {}
          else if (ArgTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
            if (aResolver.IsTGUID(ArgTypeEl)) {
              Call = this.CreateCallExpression(El);
              Call.FExpr = this.CreatePrimitiveDotExpr((this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfStrToGUIDR],El);
              Call.AddArg(Result);
              Result = Call;
            };
          };
        } else if (ExprResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          ExprTypeEl = ExprResolved.LoTypeEl;
          if (ExprTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
            if (rtl.length(ExprTypeEl.Ranges) > 0) {
              if (TargetArg.Access === pas.PasTree.TArgumentAccess.argDefault) {
                Result = this.CreateCloneStaticArray(El,ExprTypeEl,Result,AContext);
              };
            };
          } else if (ExprTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
            if (ArgTypeEl === null) {}
            else if (ArgResolved.BaseType in pas.PasResolver.btAllStrings) {
              if (ExprTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
                Result = this.CreateDotExpression(El,Result,this.CreatePrimitiveDotExpr(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnIntfGUID],El),false);
              };
            } else if (ArgTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
              if ((ExprTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) && aResolver.IsTGUID(ArgTypeEl)) {
                Call = this.CreateCallExpression(El);
                Call.FExpr = this.CreatePrimitiveDotExpr((this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGetGUIDR],El);
                Call.AddArg(Result);
                Result = Call;
                if (TargetArg.Access === pas.PasTree.TArgumentAccess.argDefault) {
                  Result = this.CreateCloneRecord(El,ArgTypeEl,Result,AContext);
                };
              } else this.RaiseNotSupported(El,AContext,20180410160008,"");
            } else if (ArgTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
              var $tmp1 = ExprTypeEl.ObjKind;
              if ($tmp1 === pas.PasTree.TPasObjKind.okClass) {
                var $tmp2 = ArgTypeEl.ObjKind;
                if ($tmp2 === pas.PasTree.TPasObjKind.okClass) {}
                else if ($tmp2 === pas.PasTree.TPasObjKind.okInterface) {
                  Call = this.CreateCallExpression(El);
                  var $tmp3 = ArgTypeEl.InterfaceType;
                  if ($tmp3 === pas.PasTree.TPasClassInterfaceType.citCom) {
                    Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfQueryIntfT]]);
                    Call.AddArg(Result);
                    Result = Call;
                    Call.AddArg(this.CreateReferencePathExpr(ArgTypeEl,AContext,false,null));
                    Call = this.CreateIntfRef(Call,AContext,El);
                    Result = Call;
                  } else if ($tmp3 === pas.PasTree.TPasClassInterfaceType.citCorba) {
                    Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGetIntfT]]);
                    Call.AddArg(Result);
                    Result = Call;
                    Call.AddArg(this.CreateReferencePathExpr(ArgTypeEl,AContext,false,null));
                  } else {
                    this.RaiseNotSupported(El,AContext,20180401230251,pas.PasTree.InterfaceTypeNames[ArgTypeEl.InterfaceType]);
                  };
                } else {
                  this.RaiseNotSupported(El,AContext,20180328134244,pas.PasTree.ObjKindNames[ArgTypeEl.ObjKind]);
                };
              } else if ($tmp1 === pas.PasTree.TPasObjKind.okInterface) {
                var $tmp4 = ExprTypeEl.ObjKind;
                if ($tmp4 === pas.PasTree.TPasObjKind.okInterface) {}
                else {
                  this.RaiseNotSupported(El,AContext,20180328134305,pas.PasTree.ObjKindNames[ArgTypeEl.ObjKind]);
                };
              } else {
                this.RaiseNotSupported(El,AContext,20180328134146,pas.PasTree.ObjKindNames[ExprTypeEl.ObjKind]);
              };
            };
          } else if (ExprTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
            if ((ArgResolved.BaseType in pas.PasResolver.btAllStrings) && aResolver.IsTGUID(ExprTypeEl)) {
              Call = this.CreateCallExpression(El);
              Call.FExpr = this.CreatePrimitiveDotExpr((this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGuidRToStr],El);
              Call.AddArg(Result);
              Result = Call;
              return Result;
            };
            if (TargetArg.Access === pas.PasTree.TArgumentAccess.argDefault) {
              Result = this.CreateCloneRecord(El,ExprTypeEl,Result,AContext);
            };
          };
        };
      };
      return Result;
    };
    var GetPathName = "p";
    var SetPathName = "s";
    var ParamName = "a";
    this.CreateProcCallArgRef = function (El, ResolvedEl, TargetArg, AContext) {
      var Self = this;
      var Result = null;
      var Obj = null;
      function AddVar(aName, Expr) {
        var ObjLit = null;
        if (Expr.get() === null) return;
        ObjLit = Obj.FElements.AddElement();
        ObjLit.FName = aName;
        ObjLit.FExpr = Expr.get();
        Expr.set(null);
      };
      var ParamContext = null;
      var FullGetter = null;
      var GetPathExpr = null;
      var SetPathExpr = null;
      var GetExpr = null;
      var SetExpr = null;
      var ParamExpr = null;
      var RHS = null;
      var AssignSt = null;
      var ObjLit = null;
      var FuncSt = null;
      var RetSt = null;
      var GetDotPos = 0;
      var SetDotPos = 0;
      var GetPath = "";
      var SetPath = "";
      var BracketExpr = null;
      var DotExpr = null;
      var SetterArgName = "";
      var TypeEl = null;
      var FuncContext = null;
      var IsCOMIntf = false;
      Obj = null;
      FullGetter = null;
      ParamContext = $mod.TParamContext.$create("Create$1",[El,null,AContext]);
      GetPathExpr = null;
      SetPathExpr = null;
      GetExpr = null;
      SetExpr = null;
      SetterArgName = $impl.TempRefObjSetterArgName;
      try {
        ParamContext.Access = $mod.TCtxAccess.caByReference;
        ParamContext.Arg = TargetArg;
        ParamContext.Expr = El;
        ParamContext.ResolvedExpr = new pas.PasResolver.TPasResolverResult(ResolvedEl);
        FullGetter = Self.ConvertElement(El,ParamContext);
        if (ParamContext.ReusingReference) {
          Result = FullGetter;
          return Result;
        };
        if ((ParamContext.Getter === null) !== (ParamContext.Setter === null)) {
          Self.RaiseInconsistency(20170213222941,El);
        };
        Obj = Self.CreateElement(pas.jstree.TJSObjectLiteral,El);
        if (FullGetter.$class.ClassType() === pas.jstree.TJSPrimaryExpressionIdent) {
          if ((ParamContext.Getter !== null) && (ParamContext.Getter !== FullGetter)) Self.RaiseInconsistency(20170213224339,El);
          GetPath = FullGetter.FName;
          GetDotPos = $mod.PosLast(".",GetPath);
          if (GetDotPos > 0) {
            GetPathExpr = Self.CreatePrimitiveDotExpr(pas.SysUtils.LeftStr(GetPath,GetDotPos - 1),El);
            GetExpr = Self.CreatePrimitiveDotExpr((("this." + GetPathName) + ".") + pas.System.Copy$1(GetPath,GetDotPos + 1),El);
            if (ParamContext.Setter === null) SetExpr = Self.CreatePrimitiveDotExpr((("this." + GetPathName) + ".") + pas.System.Copy$1(GetPath,GetDotPos + 1),El);
          } else {
            GetExpr = FullGetter;
            FullGetter = null;
            if (ParamContext.Setter === null) SetExpr = Self.CreatePrimitiveDotExpr(GetPath,El);
          };
          if (ParamContext.Setter !== null) {
            SetExpr = ParamContext.Setter;
            ParamContext.Setter = null;
            if (SetExpr.$class.ClassType() === pas.jstree.TJSPrimaryExpressionIdent) {
              SetPath = SetExpr.FName;
              SetDotPos = $mod.PosLast(".",SetPath);
              pas.SysUtils.FreeAndNil({get: function () {
                  return SetExpr;
                }, set: function (v) {
                  SetExpr = v;
                }});
              if (pas.SysUtils.LeftStr(GetPath,GetDotPos) === pas.SysUtils.LeftStr(SetPath,SetDotPos)) {
                SetExpr = Self.CreatePrimitiveDotExpr((("this." + GetPathName) + ".") + pas.System.Copy$1(SetPath,GetDotPos + 1),El);
              } else {
                SetPathExpr = Self.CreatePrimitiveDotExpr(pas.SysUtils.LeftStr(SetPath,SetDotPos - 1),El);
                SetExpr = Self.CreatePrimitiveDotExpr((("this." + SetPathName) + ".") + pas.System.Copy$1(SetPath,GetDotPos + 1),El);
              };
            };
          };
        } else if (FullGetter.$class.ClassType() === pas.jstree.TJSDotMemberExpression) {
          if (ParamContext.Setter !== null) Self.RaiseNotSupported(El,AContext,20170214231900,"");
          DotExpr = FullGetter;
          GetPathExpr = DotExpr.FMexpr;
          DotExpr.FMexpr = Self.CreatePrimitiveDotExpr("this." + GetPathName,El);
          GetExpr = DotExpr;
          FullGetter = null;
          SetExpr = Self.CreatePrimitiveDotExpr((("this." + GetPathName) + ".") + DotExpr.FName,El);
        } else if (FullGetter.$class.ClassType() === pas.jstree.TJSBracketMemberExpression) {
          if (ParamContext.Setter !== null) Self.RaiseNotSupported(El,AContext,20170214215150,"");
          BracketExpr = FullGetter;
          ParamExpr = BracketExpr.FName;
          BracketExpr.FName = Self.CreatePrimitiveDotExpr("this." + ParamName,El);
          AddVar(ParamName,{get: function () {
              return ParamExpr;
            }, set: function (v) {
              ParamExpr = v;
            }});
          GetPathExpr = BracketExpr.FMexpr;
          BracketExpr.FMexpr = Self.CreatePrimitiveDotExpr("this." + GetPathName,El);
          GetExpr = BracketExpr;
          FullGetter = null;
          BracketExpr = Self.CreateElement(pas.jstree.TJSBracketMemberExpression,El);
          SetExpr = BracketExpr;
          BracketExpr.FMexpr = Self.CreatePrimitiveDotExpr("this." + GetPathName,El);
          BracketExpr.FName = Self.CreatePrimitiveDotExpr("this." + ParamName,El);
        } else {
          Self.RaiseNotSupported(El,AContext,20170213230336,"");
        };
        if (((SetExpr.$class.ClassType() === pas.jstree.TJSPrimaryExpressionIdent) || (SetExpr.$class.ClassType() === pas.jstree.TJSDotMemberExpression)) || (SetExpr.$class.ClassType() === pas.jstree.TJSBracketMemberExpression)) {
          Self.FindAvailableLocalName({get: function () {
              return SetterArgName;
            }, set: function (v) {
              SetterArgName = v;
            }},SetExpr);
          RHS = Self.CreatePrimitiveDotExpr(SetterArgName,El);
          TypeEl = ResolvedEl.LoTypeEl;
          IsCOMIntf = (pas.PasTree.TPasClassType.isPrototypeOf(TypeEl) && (TypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && (TypeEl.InterfaceType === pas.PasTree.TPasClassInterfaceType.citCom);
          if (IsCOMIntf && (TargetArg.ArgType !== null)) {
            SetExpr = Self.CreateAssignComIntfVar(ResolvedEl,{get: function () {
                return SetExpr;
              }, set: function (v) {
                SetExpr = v;
              }},{get: function () {
                return RHS;
              }, set: function (v) {
                RHS = v;
              }},AContext,El);
          } else {
            AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
            AssignSt.FLHS = SetExpr;
            AssignSt.FExpr = RHS;
            SetExpr = AssignSt;
            if (IsCOMIntf && (TargetArg.ArgType === null)) {
              FuncContext = AContext.GetFunctionContext();
              if (pas.PasTree.TPasResultElement.isPrototypeOf(ResolvedEl.IdentEl)) {
                FuncContext.ResultNeedsIntfRelease = true}
               else FuncContext.Add_InterfaceRelease(ResolvedEl.IdentEl);
            };
          };
        } else if (SetExpr.$class.ClassType() === pas.jstree.TJSCallExpression) {}
        else Self.RaiseInconsistency(20170213225940,El);
        AddVar(GetPathName,{get: function () {
            return GetPathExpr;
          }, set: function (v) {
            GetPathExpr = v;
          }});
        ObjLit = Obj.FElements.AddElement();
        ObjLit.FName = $impl.TempRefObjGetterName;
        FuncSt = Self.CreateFunctionSt(El,true,false);
        ObjLit.FExpr = FuncSt;
        RetSt = Self.CreateElement(pas.jstree.TJSReturnStatement,El);
        FuncSt.FFuncDef.FBody.FA = RetSt;
        RetSt.FExpr = GetExpr;
        GetExpr = null;
        AddVar(SetPathName,{get: function () {
            return SetPathExpr;
          }, set: function (v) {
            SetPathExpr = v;
          }});
        ObjLit = Obj.FElements.AddElement();
        ObjLit.FName = $impl.TempRefObjSetterName;
        FuncSt = Self.CreateFunctionSt(El,true,false);
        ObjLit.FExpr = FuncSt;
        FuncSt.FFuncDef.FParams.Add(SetterArgName);
        FuncSt.FFuncDef.FBody.FA = SetExpr;
        SetExpr = null;
        Result = Obj;
      } finally {
        if (Result === null) {
          GetPathExpr = rtl.freeLoc(GetPathExpr);
          SetPathExpr = rtl.freeLoc(SetPathExpr);
          GetExpr = rtl.freeLoc(GetExpr);
          SetExpr = rtl.freeLoc(SetExpr);
          Obj = rtl.freeLoc(Obj);
          rtl.free(ParamContext,"Setter");
          FullGetter = rtl.freeLoc(FullGetter);
        };
        ParamContext = rtl.freeLoc(ParamContext);
      };
      return Result;
    };
    this.CreateArrayEl = function (El, JS, AContext) {
      var Result = null;
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      var ArrayType = null;
      var TypeEl = null;
      Result = JS;
      AContext.Resolver.ComputeElement(El,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProcType),null);
      if (ResolvedEl.IdentEl !== null) {
        if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btSet) {
          Result = this.CreateReferencedSet(El,Result);
        } else if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          TypeEl = ResolvedEl.LoTypeEl;
          if (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
            ArrayType = TypeEl;
            if (rtl.length(ArrayType.Ranges) > 0) Result = this.CreateCloneStaticArray(El,ArrayType,Result,AContext);
          } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
            Result = this.CreateCloneRecord(El,TypeEl,Result,AContext);
          };
        };
      };
      return Result;
    };
    this.CreateArgumentAccess = function (Arg, AContext, PosEl) {
      var Result = null;
      var Call = null;
      var AssignContext = null;
      var ParamContext = null;
      var Name = "";
      if (Arg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argVar,pas.PasTree.TArgumentAccess.argOut)) {
        var $tmp1 = AContext.Access;
        if ($tmp1 === $mod.TCtxAccess.caRead) {
          Call = this.CreateCallExpression(PosEl);
          Call.FExpr = this.CreateDotExpression(PosEl,this.CreateIdentifierExpr$1(Arg.FName,true,PosEl,AContext),this.CreatePrimitiveDotExpr($impl.TempRefObjGetterName,PosEl),false);
          Result = Call;
          return Result;
        } else if ($tmp1 === $mod.TCtxAccess.caAssign) {
          AssignContext = rtl.as(AContext.AccessContext,$mod.TAssignContext);
          if (AssignContext.Call !== null) this.RaiseNotSupported(Arg,AContext,20170214120606,"");
          Call = this.CreateCallExpression(PosEl);
          AssignContext.Call = Call;
          Call.FExpr = this.CreateDotExpression(PosEl,this.CreateIdentifierExpr$1(Arg.FName,true,PosEl,AContext),this.CreatePrimitiveDotExpr($impl.TempRefObjSetterName,PosEl),false);
          Call.AddArg(AssignContext.RightSide);
          AssignContext.RightSide = null;
          Result = Call;
          return Result;
        } else if ($tmp1 === $mod.TCtxAccess.caByReference) {
          ParamContext = rtl.as(AContext.AccessContext,$mod.TParamContext);
          ParamContext.ReusingReference = true;
          Result = this.CreateIdentifierExpr$1(Arg.FName,true,PosEl,AContext);
          return Result;
        } else {
          this.RaiseNotSupported(Arg,AContext,20170214120739,"");
        };
      };
      if ((pas.SysUtils.CompareText(Arg.FName,"Self") === 0) && (AContext.GetSelfContext() !== null)) {
        Name = AContext.GetLocalName(Arg)}
       else Name = this.TransformVariableName(Arg,Arg.FName,true,AContext);
      Result = this.CreatePrimitiveDotExpr(Name,PosEl);
      return Result;
    };
    this.CreateUnary = function (Members, E) {
      var Result = null;
      var unary = null;
      var asi = null;
      unary = pas.jstree.TJSUnary.$create("Create$1",[0,0,""]);
      asi = pas.jstree.TJSSimpleAssignStatement.$create("Create$1",[0,0,""]);
      unary.FA = asi;
      asi.FExpr = E;
      asi.FLHS = this.CreateMemberExpression(Members);
      Result = unary;
      return Result;
    };
    this.CreateUnaryPlus = function (Expr, El) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSUnaryPlusExpression,El);
      Result.FA = Expr;
      return Result;
    };
    this.CreateMemberExpression = function (Members) {
      var Result = null;
      var pex = null;
      var MExpr = null;
      var LastMExpr = null;
      var k = 0;
      if (rtl.length(Members) < 2) this.DoError(20161024192715,"internal error: member expression with less than two members");
      LastMExpr = null;
      for (var $l1 = rtl.length(Members) - 1; $l1 >= 1; $l1--) {
        k = $l1;
        MExpr = pas.jstree.TJSDotMemberExpression.$create("Create$1",[0,0,""]);
        MExpr.FName = Members[k];
        if (LastMExpr === null) {
          Result = MExpr}
         else LastMExpr.FMexpr = MExpr;
        LastMExpr = MExpr;
      };
      pex = pas.jstree.TJSPrimaryExpressionIdent.$create("Create$1",[0,0,""]);
      pex.FName = Members[0];
      LastMExpr.FMexpr = pex;
      return Result;
    };
    this.CreateCallExpression = function (El) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSCallExpression,El);
      Result.FArgs = this.CreateElement(pas.jstree.TJSArguments,El);
      return Result;
    };
    this.CreateCallCharCodeAt = function (Arg, aNumber, El) {
      var Result = null;
      Result = this.CreateCallExpression(El);
      Result.FExpr = this.CreateDotExpression(El,Arg,this.CreatePrimitiveDotExpr("charCodeAt",El),false);
      if (aNumber !== 0) Result.FArgs.AddElement(this.CreateLiteralNumber(El,aNumber));
      return Result;
    };
    this.CreateCallFromCharCode = function (Arg, El) {
      var Result = null;
      Result = this.CreateCallExpression(El);
      Result.FExpr = this.CreateMemberExpression(["String","fromCharCode"]);
      Result.AddArg(Arg);
      return Result;
    };
    this.CreateUsesList = function (UsesSection, AContext) {
      var Result = null;
      var ArgArray = null;
      var i = 0;
      var anUnitName = "";
      var ArgEx = null;
      var UsesClause = [];
      var aModule = null;
      UsesClause = UsesSection.UsesClause;
      ArgArray = pas.jstree.TJSArrayLiteral.$create("Create$1",[0,0,""]);
      for (var $l1 = 0, $end2 = rtl.length(UsesClause) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        aModule = rtl.as(UsesClause[i].Module,pas.PasTree.TPasModule);
        if (!this.IsElementUsed(aModule) && !this.IsSystemUnit(aModule)) continue;
        anUnitName = this.TransformModuleName(aModule,false,AContext);
        ArgEx = this.CreateLiteralString(UsesSection,anUnitName);
        ArgArray.FElements.AddElement().FExpr = ArgEx;
      };
      Result = ArgArray;
      return Result;
    };
    this.AddToStatementList = function (First, Last, Add, Src) {
      var SL2 = null;
      if (Add === null) return;
      if (pas.jstree.TJSStatementList.isPrototypeOf(Add)) {
        if (Add.FA === null) {
          if (Add.FB !== null) throw pas.SysUtils.Exception.$create("Create$1",["internal error: AddToStatementList add list A=nil, B<>nil, B=" + Add.FB.$classname]);
          pas.SysUtils.FreeAndNil({get: function () {
              return Add;
            }, set: function (v) {
              Add = v;
            }});
        } else if (Last.get() === null) {
          Last.set(Add);
          First.set(Last.get());
        } else {
          if (Last.get().FB !== null) {
            SL2 = this.CreateElement(pas.jstree.TJSStatementList,Src);
            SL2.FA = Last.get().FB;
            Last.get().FB = SL2;
            Last.set(SL2);
          };
          Last.get().FB = Add;
          while (pas.jstree.TJSStatementList.isPrototypeOf(Last.get().FB)) Last.set(Last.get().FB);
        };
      } else {
        if (Last.get() === null) {
          Last.set(this.CreateElement(pas.jstree.TJSStatementList,Src));
          First.set(Last.get());
          Last.get().FA = Add;
        } else if (Last.get().FB === null) {
          Last.get().FB = Add}
         else {
          while (pas.jstree.TJSStatementList.isPrototypeOf(Last.get().FB)) Last.set(Last.get().FB);
          SL2 = this.CreateElement(pas.jstree.TJSStatementList,Src);
          SL2.FA = Last.get().FB;
          Last.get().FB = SL2;
          Last.set(SL2);
          Last.get().FB = Add;
        };
      };
    };
    this.AddToStatementList$1 = function (St, Add, Src) {
      var First = null;
      var Last = null;
      First = St;
      Last = St;
      while (pas.jstree.TJSStatementList.isPrototypeOf(Last.FB)) Last = Last.FB;
      this.AddToStatementList({get: function () {
          return First;
        }, set: function (v) {
          First = v;
        }},{get: function () {
          return Last;
        }, set: function (v) {
          Last = v;
        }},Add,Src);
    };
    this.AddToVarStatement = function (VarStat, Add, Src) {
      var List = null;
      if (VarStat.FA === null) {
        VarStat.FA = Add}
       else {
        List = this.CreateElement(pas.jstree.TJSVariableDeclarationList,Src);
        List.FA = VarStat.FA;
        List.FB = Add;
        VarStat.FA = List;
      };
    };
    this.CreateValInit = function (PasType, Expr, El, AContext) {
      var Result = null;
      var T = null;
      var Lit = null;
      var bt = 0;
      var JSBaseType = 0;
      var C = null;
      var aResolver = null;
      var Value = null;
      T = PasType;
      aResolver = AContext.Resolver;
      if (aResolver !== null) T = aResolver.ResolveAliasType(T);
      if (T === null) {
        if (Expr === null) {
          if (aResolver === null) return this.CreateLiteralUndefined(El);
          this.RaiseInconsistency(20170415185745,El);
        };
        Result = this.ConvertElement(Expr,AContext);
        if (Result === null) {
          this.RaiseNotSupported(Expr,AContext,20170415185927,"");
        };
        return Result;
      };
      C = T.$class.ClassType();
      if (C === pas.PasTree.TPasArrayType) {
        Result = this.CreateArrayInit(T,Expr,El,AContext)}
       else if (C === pas.PasTree.TPasRecordType) {
        Result = this.CreateRecordInit(T,Expr,El,AContext)}
       else if (Expr != null) {
        Result = this.ConvertElement(Expr,AContext)}
       else if (C === pas.PasTree.TPasSetType) {
        Result = this.CreateElement(pas.jstree.TJSObjectLiteral,El)}
       else if ((C === pas.PasTree.TPasRangeType) && (aResolver !== null)) {
        Value = AContext.Resolver.Eval(T.RangeExpr.left,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
        try {
          var $tmp1 = Value.Kind;
          if (($tmp1 === pas.PasResolveEval.TREVKind.revkInt) || ($tmp1 === pas.PasResolveEval.TREVKind.revkUInt)) {
            Result = this.CreateLiteralNumber(El,0)}
           else {
            Result = this.ConvertConstValue(Value,AContext,El);
          };
        } finally {
          pas.PasResolveEval.ReleaseEvalValue({get: function () {
              return Value;
            }, set: function (v) {
              Value = v;
            }});
        };
      } else {
        Lit = this.CreateElement(pas.jstree.TJSLiteral,El);
        Result = Lit;
        if (((((C === pas.PasTree.TPasPointerType) || (C === pas.PasTree.TPasClassType)) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasProcedureType)) || (C === pas.PasTree.TPasFunctionType)) {
          Lit.FValue.SetIsNull(true)}
         else if (C === pas.PasTree.TPasStringType) {
          Lit.FValue.SetAsString("")}
         else if (C === pas.PasTree.TPasEnumType) {
          Lit.FValue.SetAsNumber(0)}
         else if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
          if (pas.PasResolver.TResElDataBaseType.isPrototypeOf(T.FData)) {
            bt = T.FData.BaseType;
            if (bt in $mod.btAllJSInteger) {
              Lit.FValue.SetAsNumber(0)}
             else if (bt in $mod.btAllJSFloats) {
              Lit.FValue.FCustomValue = "0.0"}
             else if (bt in $mod.btAllJSStringAndChars) {
              Lit.FValue.SetAsString("")}
             else if (bt in $mod.btAllJSBooleans) {
              Lit.FValue.SetAsBoolean(false)}
             else if (bt in rtl.createSet(pas.PasResolver.TResolverBaseType.btNil,pas.PasResolver.TResolverBaseType.btPointer,pas.PasResolver.TResolverBaseType.btProc)) {
              Lit.FValue.SetIsNull(true)}
             else if ((bt === pas.PasResolver.TResolverBaseType.btCustom) && $mod.TResElDataPas2JSBaseType.isPrototypeOf(T.FData)) {
              JSBaseType = T.FData.JSBaseType;
              if (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue) Lit.FValue.SetIsUndefined(true);
            } else {
              this.RaiseNotSupported(PasType,AContext,20170208162121,"");
            };
          } else if (aResolver !== null) {
            this.RaiseNotSupported(El,AContext,20170415190259,"");
          } else if (((((pas.SysUtils.CompareText(T.FName,"longint") === 0) || (pas.SysUtils.CompareText(T.FName,"int64") === 0)) || (pas.SysUtils.CompareText(T.FName,"real") === 0)) || (pas.SysUtils.CompareText(T.FName,"double") === 0)) || (pas.SysUtils.CompareText(T.FName,"single") === 0)) {
            Lit.FValue.SetAsNumber(0.0)}
           else if (pas.SysUtils.CompareText(T.FName,"boolean") === 0) {
            Lit.FValue.SetAsBoolean(false)}
           else if ((pas.SysUtils.CompareText(T.FName,"string") === 0) || (pas.SysUtils.CompareText(T.FName,"char") === 0)) {
            Lit.FValue.SetAsString("")}
           else {
            Lit.FValue.SetIsUndefined(true);
          };
        } else {
          this.RaiseNotSupported(PasType,AContext,20170208161506,"");
        };
      };
      if (Result === null) {
        this.RaiseNotSupported(El,AContext,20170415190103,"");
      };
      return Result;
    };
    this.CreateVarInit = function (El, AContext) {
      var Result = null;
      Result = this.CreateValInit(El.VarType,El.Expr,El,AContext);
      return Result;
    };
    this.CreateVarStatement = function (aName, Init, El) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSVariableStatement,El);
      Result.FA = this.CreateVarDecl$1(aName,Init,El);
      return Result;
    };
    this.CreateVarDecl$1 = function (aName, Init, El) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSVarDeclaration,El);
      Result.FName = aName;
      Result.FInit = Init;
      return Result;
    };
    this.CreateLiteralNumber = function (El, n) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSLiteral,El);
      Result.FValue.SetAsNumber(n);
      return Result;
    };
    this.CreateLiteralHexNumber = function (El, n, Digits) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSLiteral,El);
      Result.FValue.SetAsNumber(n);
      Result.FValue.FCustomValue = "0x" + rtl.hexStr(n,Digits);
      return Result;
    };
    this.CreateLiteralString = function (El, s) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSLiteral,El);
      Result.FValue.SetAsString(s);
      return Result;
    };
    this.CreateLiteralJSString = function (El, s) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSLiteral,El);
      Result.FValue.SetAsString(s);
      return Result;
    };
    this.CreateLiteralBoolean = function (El, b) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSLiteral,El);
      Result.FValue.SetAsBoolean(b);
      return Result;
    };
    this.CreateLiteralNull = function (El) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSLiteral,El);
      Result.FValue.SetIsNull(true);
      return Result;
    };
    this.CreateLiteralUndefined = function (El) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSLiteral,El);
      Result.FValue.SetIsUndefined(true);
      return Result;
    };
    this.CreateLiteralCustomValue = function (El, s) {
      var Result = null;
      Result = this.CreateElement(pas.jstree.TJSLiteral,El);
      Result.FValue.FCustomValue = s;
      return Result;
    };
    this.CreateSetLiteralElement = function (Expr, AContext) {
      var Result = null;
      var LitVal = null;
      var NewEl = null;
      var WS = "";
      var ExprResolved = new pas.PasResolver.TPasResolverResult();
      var Call = null;
      var DotExpr = null;
      var aResolver = null;
      Result = this.ConvertElement(Expr,AContext);
      if (Result === null) this.RaiseNotSupported(Expr,AContext,20170415192209,"");
      if (Result.$class.ClassType() === pas.jstree.TJSLiteral) {
        LitVal = Result.FValue;
        var $tmp1 = LitVal.FValueType;
        if ($tmp1 === pas.jsbase.TJSType.jstBoolean) {
          if (LitVal.GetAsBoolean() === false) {
            NewEl = this.CreateLiteralNumber(Expr,0)}
           else NewEl = this.CreateLiteralNumber(Expr,1);
          Result = rtl.freeLoc(Result);
          return NewEl;
        } else if ($tmp1 === pas.jsbase.TJSType.jstNumber) {
          return Result}
         else if ($tmp1 === pas.jsbase.TJSType.jstString) {
          WS = LitVal.GetAsString();
          Result = rtl.freeLoc(Result);
          if (WS.length !== 1) this.DoError$2(20170415193254,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["char","string"],Expr);
          Result = this.CreateLiteralNumber(Expr,WS.charCodeAt(1 - 1));
          return Result;
        } else {
          this.RaiseNotSupported(Expr,AContext,20170415205955,"");
        };
      } else if (Result.$class.ClassType() === pas.jstree.TJSCallExpression) {
        Call = Result;
        if (pas.jstree.TJSDotMemberExpression.isPrototypeOf(Call.FExpr)) {
          DotExpr = Call.FExpr;
          if (DotExpr.FName === "charCodeAt") return Result;
          if (DotExpr.FName === "charAt") {
            DotExpr.FName = "charCodeAt";
            return Result;
          };
        };
      };
      aResolver = AContext.Resolver;
      if (aResolver !== null) {
        aResolver.ComputeElement(Expr,{get: function () {
            return ExprResolved;
          }, set: function (v) {
            ExprResolved = v;
          }},{},null);
        if ((ExprResolved.BaseType in $mod.btAllJSStringAndChars) || ((ExprResolved.BaseType === pas.PasResolver.TResolverBaseType.btRange) && (ExprResolved.SubType in $mod.btAllJSChars))) {
          Result = this.CreateCallCharCodeAt(Result,0,Expr);
        } else if (ExprResolved.BaseType in $mod.btAllJSInteger) {}
        else if (ExprResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          if (ExprResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {}
          else this.RaiseNotSupported(Expr,AContext,20170415191933,"");
        } else {
          this.RaiseNotSupported(Expr,AContext,20170415191822,"");
        };
      };
      return Result;
    };
    this.ConvertCharLiteralToInt = function (Lit, ErrorEl, AContext) {
      var JS = "";
      if (Lit.FValue.FValueType !== pas.jsbase.TJSType.jstString) this.RaiseInconsistency(20171112020856,ErrorEl);
      if (Lit.FValue.FCustomValue !== "") {
        JS = Lit.FValue.FCustomValue}
       else JS = Lit.FValue.GetAsString();
      if (JS.length !== 1) this.RaiseNotSupported(ErrorEl,AContext,20171112021003,"");
      Lit.FValue.SetAsNumber(JS.charCodeAt(1 - 1));
    };
    this.ClonePrimaryExpression = function (El, Src) {
      var Result = null;
      Result = this.CreateElement(El.$class.ClassType(),Src);
      if (Result.$class.ClassType() === pas.jstree.TJSPrimaryExpressionIdent) Result.FName = El.FName;
      return Result;
    };
    this.CreateMulNumber = function (El, JS, n) {
      var Result = null;
      var Mul = null;
      var Value = null;
      if (pas.jstree.TJSLiteral.isPrototypeOf(JS)) {
        Value = JS.FValue;
        var $tmp1 = Value.FValueType;
        if ($tmp1 === pas.jsbase.TJSType.jstUNDEFINED) {
          Value.SetAsNumber(NaN);
          return JS;
        } else if ($tmp1 === pas.jsbase.TJSType.jstNull) {
          Value.SetAsNumber(0);
          return JS;
        } else if ($tmp1 === pas.jsbase.TJSType.jstBoolean) {
          if (Value.GetAsBoolean()) {
            Value.SetAsNumber(n)}
           else Value.SetAsNumber(0);
          return JS;
        } else if ($tmp1 === pas.jsbase.TJSType.jstNumber) if (isNaN(Value.GetAsNumber()) || pas.Math.IsInfinite(Value.GetAsNumber())) {}
        else {
          Value.SetAsNumber(Value.GetAsNumber() * n);
          return JS;
        };
      };
      Mul = this.CreateElement(pas.jstree.TJSMultiplicativeExpressionMul,El);
      Result = Mul;
      Mul.FA = JS;
      Mul.FB = this.CreateLiteralNumber(El,n);
      return Result;
    };
    this.CreateDivideNumber = function (El, JS, n) {
      var Result = null;
      var Mul = null;
      var Value = null;
      if ((n !== 0) && pas.jstree.TJSLiteral.isPrototypeOf(JS)) {
        Value = JS.FValue;
        var $tmp1 = Value.FValueType;
        if ($tmp1 === pas.jsbase.TJSType.jstUNDEFINED) {
          Value.SetAsNumber(NaN);
          return JS;
        } else if ($tmp1 === pas.jsbase.TJSType.jstNull) {
          Value.SetAsNumber(0);
          return JS;
        } else if ($tmp1 === pas.jsbase.TJSType.jstBoolean) {
          if (Value.GetAsBoolean()) {
            Value.SetAsNumber(1 / n)}
           else Value.SetAsNumber(0);
          return JS;
        } else if ($tmp1 === pas.jsbase.TJSType.jstNumber) if (isNaN(Value.GetAsNumber()) || pas.Math.IsInfinite(Value.GetAsNumber())) {}
        else {
          Value.SetAsNumber(Value.GetAsNumber() / n);
          return JS;
        };
      };
      Mul = this.CreateElement(pas.jstree.TJSMultiplicativeExpressionDiv,El);
      Result = Mul;
      Mul.FA = JS;
      Mul.FB = this.CreateLiteralNumber(El,n);
      return Result;
    };
    this.CreateMathFloor = function (El, JS) {
      var Result = null;
      var Value = null;
      if (pas.jstree.TJSLiteral.isPrototypeOf(JS)) {
        Value = JS.FValue;
        var $tmp1 = Value.FValueType;
        if ($tmp1 === pas.jsbase.TJSType.jstUNDEFINED) {
          Value.SetAsNumber(NaN);
          return JS;
        } else if ($tmp1 === pas.jsbase.TJSType.jstNull) {
          Value.SetAsNumber(0);
          return JS;
        } else if ($tmp1 === pas.jsbase.TJSType.jstBoolean) {
          if (Value.GetAsBoolean()) {
            Value.SetAsNumber(1)}
           else Value.SetAsNumber(0);
          return JS;
        } else if ($tmp1 === pas.jsbase.TJSType.jstNumber) if (isNaN(Value.GetAsNumber()) || pas.Math.IsInfinite(Value.GetAsNumber())) {
          return JS}
         else {
          Value.SetAsNumber(pas.System.Trunc(Value.GetAsNumber()));
          return JS;
        };
      };
      Result = this.CreateCallExpression(El);
      Result.FExpr = this.CreatePrimitiveDotExpr("Math.floor",El);
      Result.AddArg(JS);
      return Result;
    };
    this.CreateDotExpression = function (aParent, Left, Right, CheckRightIntfRef) {
      var Result = null;
      var Dot = null;
      var RightParent = null;
      var Expr = null;
      var ok = false;
      var Call = null;
      Result = null;
      if (Left === null) this.RaiseInconsistency(20170201140827,aParent);
      if (Right === null) this.RaiseInconsistency(20170211192018,aParent);
      if (CheckRightIntfRef && this.IsInterfaceRef(Right)) {
        Call = Right;
        Expr = Call.FArgs.FElements.GetE(1).FExpr;
        Call.FArgs.FElements.GetE(1).FExpr = this.CreateDotExpression(aParent,Left,Expr,false);
        Result = Call;
        return Result;
      };
      ok = false;
      try {
        Result = Right;
        RightParent = null;
        do {
          if (Right.$class.ClassType() === pas.jstree.TJSCallExpression) {
            RightParent = Right;
            Right = Right.FExpr;
            if (Right === null) {
              RightParent.FExpr = Left;
              ok = true;
              return Result;
            };
          } else if (Right.$class.ClassType() === pas.jstree.TJSBracketMemberExpression) {
            RightParent = Right;
            Right = Right.FMexpr;
            if (Right === null) {
              RightParent.FMexpr = Left;
              ok = true;
              return Result;
            };
          } else if (Right.$class.ClassType() === pas.jstree.TJSDotMemberExpression) {
            RightParent = Right;
            Right = Right.FMexpr;
            if (Right === null) {
              RightParent.FMexpr = Left;
              ok = true;
              return Result;
            };
          } else if (Right.$class.ClassType() === pas.jstree.TJSPrimaryExpressionIdent) {
            Dot = this.CreateElement(pas.jstree.TJSDotMemberExpression,aParent);
            if (Result === Right) {
              Result = Dot}
             else if (pas.jstree.TJSBracketMemberExpression.isPrototypeOf(RightParent)) {
              RightParent.FMexpr = Dot}
             else if (pas.jstree.TJSCallExpression.isPrototypeOf(RightParent)) {
              RightParent.FExpr = Dot}
             else if (pas.jstree.TJSDotMemberExpression.isPrototypeOf(RightParent)) {
              RightParent.FMexpr = Dot}
             else {
              Dot = rtl.freeLoc(Dot);
              this.RaiseInconsistency(20170129141307,aParent);
            };
            Dot.FMexpr = Left;
            Dot.FName = Right.FName;
            pas.SysUtils.FreeAndNil({get: function () {
                return Right;
              }, set: function (v) {
                Right = v;
              }});
            break;
          } else {
            this.DoError$2(20161024191240,4007,rtl.getResStr(pas.FPPas2Js,"sMemberExprMustBeIdentifier"),[],aParent);
          };
        } while (!false);
        ok = true;
      } finally {
        if (!ok) {
          Left = rtl.freeLoc(Left);
          pas.SysUtils.FreeAndNil({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }});
        };
      };
      return Result;
    };
    this.CreateReferencePath = function (El, AContext, Kind, Full, Ref) {
      var Self = this;
      var Result = "";
      function IsLocalVar() {
        var Result = false;
        Result = false;
        if (El.$class.ClassType() === pas.PasTree.TPasArgument) return true;
        if (El.$class.ClassType() === pas.PasTree.TPasResultElement) return true;
        if (AContext.Resolver === null) return true;
        if (El.FParent === null) Self.RaiseNotSupported(El,AContext,20170203121306,pas.PasResolveEval.GetObjName(El));
        if (El.FParent.$class.ClassType() === pas.PasTree.TPasImplExceptOn) return true;
        if (!pas.PasTree.TProcedureBody.isPrototypeOf(El.FParent)) return Result;
        Result = true;
        return Result;
      };
      function Prepend(aPath, Prefix) {
        if ((aPath.get() !== "") && (aPath.get().charAt(0) !== "[")) aPath.set("." + aPath.get());
        aPath.set(Prefix + aPath.get());
      };
      function IsClassFunction(Proc) {
        var Result = false;
        var C = null;
        if (Proc === null) return false;
        C = Proc.$class.ClassType();
        Result = (((C === pas.PasTree.TPasClassFunction) || (C === pas.PasTree.TPasClassProcedure)) || (C === pas.PasTree.TPasClassConstructor)) || (C === pas.PasTree.TPasClassDestructor);
        return Result;
      };
      function Append_GetClass(Member) {
        if (rtl.as(Member.FParent,pas.PasTree.TPasClassType).IsExternal) return;
        if (Result !== "") {
          Result = (Result + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnPtrClass]}
         else Result = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnPtrClass];
      };
      function GetAbsoluteAlias() {
        var Result = "";
        var AbsolResolved = new pas.PasResolver.TPasResolverResult();
        AContext.Resolver.ComputeElement(El.AbsoluteExpr,{get: function () {
            return AbsolResolved;
          }, set: function (v) {
            AbsolResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        Result = Self.CreateReferencePath(AbsolResolved.IdentEl,AContext,Kind,Full,Ref);
        return Result;
      };
      function ImplToDecl(El) {
        var Result = null;
        var ProcScope = null;
        Result = El;
        if (pas.PasResolver.TPasProcedureScope.isPrototypeOf(El.FData)) {
          ProcScope = El.FData;
          if (ProcScope.DeclarationProc !== null) Result = ProcScope.DeclarationProc;
        };
        return Result;
      };
      function IsA(SrcType, DstType) {
        var Result = false;
        while (SrcType !== null) {
          if (SrcType === DstType) return true;
          if (SrcType.$class.ClassType() === pas.PasTree.TPasClassType) {
            SrcType = SrcType.FData.DirectAncestor}
           else if ((SrcType.$class.ClassType() === pas.PasTree.TPasAliasType) || (SrcType.$class.ClassType() === pas.PasTree.TPasTypeAliasType)) {
            SrcType = SrcType.DestType}
           else return false;
        };
        Result = false;
        return Result;
      };
      var FoundModule = null;
      var ParentEl = null;
      var Dot = null;
      var WithData = null;
      var ShortName = "";
      var SelfContext = null;
      var ElClass = null;
      Result = "";
      if (pas.PasTree.TPasType.isPrototypeOf(El) && (AContext !== null)) El = AContext.Resolver.ResolveAliasType(El);
      ElClass = El.$class.ClassType();
      if ((ElClass.InheritsFrom(pas.PasTree.TPasVariable) && (El.AbsoluteExpr !== null)) && (AContext.Resolver !== null)) return GetAbsoluteAlias();
      if ($mod.TDotContext.isPrototypeOf(AContext)) {
        Dot = AContext;
        if (Dot.Resolver !== null) {
          if (ElClass.InheritsFrom(pas.PasTree.TPasVariable)) {
            if ((rtl.neSet(rtl.intersectSet($mod.ClassVarModifiersType,El.VarModifiers),{}) && (Dot.Access === $mod.TCtxAccess.caAssign)) && Dot.Resolver.ResolvedElIsClassInstance(Dot.LeftResolved)) {
              Append_GetClass(El);
            };
          } else if (IsClassFunction(El)) {
            if (Dot.Resolver.ResolvedElIsClassInstance(Dot.LeftResolved)) Append_GetClass(El);
          };
        };
      } else if ((Ref !== null) && (Ref.WithExprScope !== null)) {
        WithData = rtl.as(Ref.WithExprScope,$mod.TPas2JSWithExprScope);
        Prepend({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},WithData.WithVarName);
      } else if (IsLocalVar()) {}
      else if ((ElClass.InheritsFrom(pas.PasTree.TPasProcedure) && (El.LibrarySymbolName !== null)) && !pas.PasTree.TPasClassType.isPrototypeOf(El.FParent)) {
        if (Kind === $mod.TRefPathKind.rpkPathAndName) {
          Result = Self.ComputeConstString(El.LibrarySymbolName,AContext,true)}
         else Result = "";
        return Result;
      } else if ((ElClass.InheritsFrom(pas.PasTree.TPasVariable) && (El.ExportName !== null)) && !pas.PasTree.TPasClassType.isPrototypeOf(El.FParent)) {
        if (Kind === $mod.TRefPathKind.rpkPathAndName) {
          Result = Self.ComputeConstString(El.ExportName,AContext,true)}
         else Result = "";
        return Result;
      } else if ((ElClass === pas.PasTree.TPasClassType) && El.IsExternal) {
        Result = El.ExternalName;
        return Result;
      } else {
        if (El.FParent === null) Self.RaiseNotSupported(El,AContext,20170201172141,pas.PasResolveEval.GetObjName(El));
        El = ImplToDecl(El);
        ParentEl = El.FParent;
        while (ParentEl !== null) {
          ParentEl = ImplToDecl(ParentEl);
          ShortName = AContext.GetLocalName(ParentEl);
          if (ParentEl.$class.ClassType() === pas.PasTree.TImplementationSection) {
            if (ShortName !== "") {
              Prepend({get: function () {
                  return Result;
                }, set: function (v) {
                  Result = v;
                }},ShortName)}
             else {
              FoundModule = El.GetModule();
              if (FoundModule === null) Self.RaiseInconsistency(20161024192755,El);
              Prepend({get: function () {
                  return Result;
                }, set: function (v) {
                  Result = v;
                }},(Self.TransformModuleName(FoundModule,true,AContext) + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnImplementation]);
            };
            break;
          } else if (pas.PasTree.TPasModule.isPrototypeOf(ParentEl)) {
            if (ShortName !== "") {
              Prepend({get: function () {
                  return Result;
                }, set: function (v) {
                  Result = v;
                }},ShortName)}
             else Prepend({get: function () {
                return Result;
              }, set: function (v) {
                Result = v;
              }},Self.TransformModuleName(ParentEl,true,AContext));
            break;
          } else if ((ParentEl.$class.ClassType() === pas.PasTree.TPasClassType) || (ParentEl.$class.ClassType() === pas.PasTree.TPasRecordType)) {
            if (Full) {
              Prepend({get: function () {
                  return Result;
                }, set: function (v) {
                  Result = v;
                }},ParentEl.FName)}
             else {
              SelfContext = AContext.GetSelfContext();
              if (ShortName !== "") {
                Prepend({get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }},ShortName)}
               else if ((El.FParent !== ParentEl) || pas.PasTree.TPasType.isPrototypeOf(El)) {
                Prepend({get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }},ParentEl.FName)}
               else if ((SelfContext !== null) && IsA(SelfContext.ThisPas,ParentEl)) {
                ShortName = SelfContext.GetLocalName(SelfContext.ThisPas);
                Prepend({get: function () {
                    return Result;
                  }, set: function (v) {
                    Result = v;
                  }},ShortName);
              } else {
                Self.RaiseNotSupported(El,AContext,20180125004049,"");
              };
              if (((El.FParent === ParentEl) && (SelfContext !== null)) && !IsClassFunction(SelfContext.PasElement)) {
                if (pas.PasTree.TPasVariable.isPrototypeOf(El)) {
                  if (rtl.neSet(rtl.intersectSet($mod.ClassVarModifiersType,El.VarModifiers),{}) && (AContext.Access === $mod.TCtxAccess.caAssign)) {
                    Append_GetClass(El);
                  };
                } else if (IsClassFunction(El)) Append_GetClass(El);
              };
              if (ShortName !== "") break;
            };
          } else if (ParentEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
            if ((ShortName !== "") && !Full) {
              Prepend({get: function () {
                  return Result;
                }, set: function (v) {
                  Result = v;
                }},ShortName);
              break;
            } else Prepend({get: function () {
                return Result;
              }, set: function (v) {
                Result = v;
              }},ParentEl.FName);
          };
          ParentEl = ParentEl.FParent;
          if (pas.PasTree.TProcedureBody.isPrototypeOf(ParentEl)) break;
        };
      };
      var $tmp1 = Kind;
      if ($tmp1 === $mod.TRefPathKind.rpkPathWithDot) {
        if (Result !== "") Result = Result + "."}
       else if ($tmp1 === $mod.TRefPathKind.rpkPathAndName) {
        ShortName = Self.TransformVariableName$1(El,AContext);
        if (Result === "") {
          Result = ShortName}
         else if ((ShortName !== "") && (ShortName.charCodeAt(0) in rtl.createSet(91,40))) {
          Result = Result + ShortName}
         else Result = (Result + ".") + ShortName;
      };
      return Result;
    };
    this.CreateReferencePathExpr = function (El, AContext, Full, Ref) {
      var Result = null;
      var Name = "";
      var Src = null;
      Name = this.CreateReferencePath(El,AContext,$mod.TRefPathKind.rpkPathAndName,Full,Ref);
      if (Ref !== null) {
        Src = Ref.FElement}
       else Src = null;
      Result = this.CreatePrimitiveDotExpr(Name,Src);
      return Result;
    };
    this.CreateImplementationSection = function (El, AContext) {
      var Result = null;
      var Src = null;
      var ImplContext = null;
      var ImplDecl = null;
      var ImplVarSt = null;
      var FunDecl = null;
      var ModVarName = "";
      var ImplVarName = "";
      Result = null;
      FunDecl = this.CreateFunctionSt(El,true,true);
      Src = FunDecl.FFuncDef.FBody.FA;
      ImplContext = $mod.TSectionContext.$create("Create$1",[El,Src,AContext]);
      try {
        if ($mod.TPasToJsConverterOption.coUseStrict in this.FOptions) this.AddToSourceElements(Src,this.CreateLiteralString(El,"use strict"));
        ImplContext.ThisPas = El;
        ModVarName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnModule];
        this.AddToSourceElements(Src,this.CreateVarStatement(ModVarName,this.CreatePrimitiveDotExpr("this",El),El));
        ImplContext.AddLocalVar(ModVarName,El);
        ImplVarName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnImplementation];
        ImplVarSt = this.CreateVarStatement(ImplVarName,this.CreateMemberExpression([ModVarName,ImplVarName]),El.ImplementationSection);
        this.AddToSourceElements(Src,ImplVarSt);
        ImplContext.AddLocalVar(ImplVarName,El.ImplementationSection);
        ImplDecl = this.ConvertDeclarations(El.ImplementationSection,ImplContext);
        if (ImplDecl !== null) this.RaiseInconsistency(20170910175032,El);
        if (Src.FStatements.GetN(Src.FStatements.GetCount() - 1).FNode === ImplVarSt) return Result;
        this.AddToSourceElements(Src,ImplDecl);
        Result = FunDecl;
      } finally {
        ImplContext = rtl.freeLoc(ImplContext);
        if (Result === null) FunDecl = rtl.freeLoc(FunDecl);
      };
      return Result;
    };
    this.CreateInitSection = function (El, Src, AContext) {
      if (El.InitializationSection != null) this.AddToSourceElements(Src,this.ConvertInitializationSection(El.InitializationSection,AContext));
      if (El.FinalizationSection != null) throw pas.SysUtils.Exception.$create("Create$1",["TPasToJSConverter.ConvertInitializationSection: finalization section is not supported"]);
    };
    this.CreateReferencedSet = function (El, SetExpr) {
      var Result = null;
      var Call = null;
      Call = this.CreateCallExpression(El);
      Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Reference]]);
      Call.AddArg(SetExpr);
      Result = Call;
      return Result;
    };
    this.CreateRecordInit = function (aRecord, Expr, El, AContext) {
      var Result = null;
      var NewMemE = null;
      var aResolver = null;
      var ObjLit = null;
      var GUID = new pas.System.TGuid();
      Result = null;
      if (Expr !== null) {
        aResolver = AContext.Resolver;
        if (aResolver !== null) {
          if (aResolver.GetAssignGUIDString(aRecord,Expr,{get: function () {
              return GUID;
            }, set: function (v) {
              GUID = v;
            }})) {
            ObjLit = this.CreateGUIDObjLit(aRecord,GUID,El,AContext);
            NewMemE = this.CreateNewRecord(El,aRecord,AContext);
            Result = NewMemE;
            NewMemE.AddArg(ObjLit);
            return Result;
          };
        };
        if (pas.PasTree.TRecordValues.isPrototypeOf(Expr)) Result = this.ConvertRecordValues(Expr,AContext);
        if (Result === null) this.RaiseNotSupported(Expr,AContext,20161024192747,"");
      } else {
        Result = this.CreateNewRecord(El,aRecord,AContext);
      };
      return Result;
    };
    this.CreateNewRecord = function (El, RecTypeEl, AContext) {
      var Result = null;
      var Expr = null;
      Expr = this.CreateReferencePathExpr(RecTypeEl,AContext,false,null);
      Result = this.CreateElement(pas.jstree.TJSNewMemberExpression,El);
      Result.FMexpr = Expr;
      return Result;
    };
    this.CreateCloneRecord = function (El, RecTypeEl, RecordExpr, AContext) {
      var Result = null;
      var NewExpr = null;
      var Expr = null;
      Expr = this.CreateReferencePathExpr(RecTypeEl,AContext,false,null);
      if (pas.jstree.TJSNewMemberExpression.isPrototypeOf(RecordExpr)) {
        if ($mod.JSEquals(Expr,RecordExpr.FMexpr)) {
          Expr = rtl.freeLoc(Expr);
          return RecordExpr;
        };
      };
      NewExpr = this.CreateElement(pas.jstree.TJSNewMemberExpression,El);
      NewExpr.FMexpr = Expr;
      NewExpr.AddArg(RecordExpr);
      Result = NewExpr;
      return Result;
    };
    this.CreateArrayConcat = function (ElTypeResolved, PosEl, AContext) {
      var Result = null;
      var Call = null;
      Result = null;
      Call = this.CreateCallExpression(PosEl);
      try {
        if (ElTypeResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          if (ElTypeResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
            Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Concat]]);
            Call.AddArg(this.CreateReferencePathExpr(ElTypeResolved.LoTypeEl,AContext,false,null));
          };
        } else if (ElTypeResolved.BaseType === pas.PasResolver.TResolverBaseType.btSet) {
          Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Concat]]);
          Call.AddArg(this.CreateLiteralString(PosEl,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Reference]));
        };
        if (Call.FExpr === null) {
          Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_ConcatN]]);
        };
        Result = Call;
      } finally {
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.CreateArrayConcat$1 = function (ArrayType, PosEl, AContext) {
      var Result = null;
      var ElTypeResolved = new pas.PasResolver.TPasResolverResult();
      if (rtl.length(ArrayType.Ranges) > 1) this.RaiseNotSupported(PosEl,AContext,20170331001021,"");
      AContext.Resolver.ComputeElement(ArrayType.ElType,{get: function () {
          return ElTypeResolved;
        }, set: function (v) {
          ElTypeResolved = v;
        }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
      Result = this.CreateArrayConcat(new pas.PasResolver.TPasResolverResult(ElTypeResolved),PosEl,AContext);
      return Result;
    };
    this.CreateCallback = function (El, ResolvedEl, AContext) {
      var Result = null;
      var Call = null;
      var Target = null;
      var DotExpr = null;
      var Prim = null;
      var aName = "";
      var DotPos = 0;
      var FunName = "";
      var ProcScope = null;
      Result = null;
      if (!pas.PasTree.TPasProcedure.isPrototypeOf(ResolvedEl.IdentEl)) this.RaiseInconsistency(20170215140756,El);
      Target = this.ConvertElement(El,AContext);
      ProcScope = ResolvedEl.IdentEl.FData;
      if (ProcScope.ClassScope === null) {
        Result = Target;
        return Result;
      };
      Call = null;
      try {
        Call = this.CreateCallExpression(El);
        Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnProcType_Create]]);
        FunName = "";
        if (Target.$class.ClassType() === pas.jstree.TJSDotMemberExpression) {
          DotExpr = Target;
          FunName = DotExpr.FName;
          DotPos = $mod.PosLast(".",FunName);
          if (DotPos > 0) {
            DotExpr.FName = pas.SysUtils.LeftStr(FunName,DotPos - 1);
            FunName = pas.System.Copy$1(FunName,DotPos + 1);
            if (!pas.jsbase.IsValidJSIdentifier(DotExpr.FName,false)) {
              this.DoError$2(20170215161802,4011,rtl.getResStr(pas.FPPas2Js,"sInvalidFunctionReference"),[],El);
            };
          } else {
            Target = DotExpr.FMexpr;
            DotExpr.FMexpr = null;
            pas.SysUtils.FreeAndNil({get: function () {
                return DotExpr;
              }, set: function (v) {
                DotExpr = v;
              }});
          };
          if (!pas.jsbase.IsValidJSIdentifier(FunName,false)) {
            this.DoError$2(20170215161802,4011,rtl.getResStr(pas.FPPas2Js,"sInvalidFunctionReference"),[],El);
          };
          Call.AddArg(Target);
          Call.AddArg(this.CreateLiteralString(El,FunName));
        } else if (Target.$class.ClassType() === pas.jstree.TJSPrimaryExpressionIdent) {
          Prim = Target;
          aName = Prim.FName;
          DotPos = $mod.PosLast(".",aName);
          if (DotPos < 1) this.DoError$2(20170418135806,4011,rtl.getResStr(pas.FPPas2Js,"sInvalidFunctionReference"),[],El);
          FunName = pas.System.Copy$1(aName,DotPos + 1);
          Prim.FName = pas.SysUtils.LeftStr(aName,DotPos - 1);
          Call.AddArg(Prim);
          Call.AddArg(this.CreateLiteralString(El,FunName));
        } else {
          this.DoError$2(20170418135820,4011,rtl.getResStr(pas.FPPas2Js,"sInvalidFunctionReference"),[],El);
        };
        Result = Call;
      } finally {
        if (Result === null) {
          Target = rtl.freeLoc(Target);
          Call = rtl.freeLoc(Call);
        };
      };
      return Result;
    };
    this.ConvertExternalBracketAccessorCall = function (El, AContext) {
      var Result = null;
      var Ref = null;
      var ArgContext = null;
      var ok = false;
      var AssignSt = null;
      var IndexJS = null;
      var WithData = null;
      var Path = "";
      var BracketJS = null;
      Result = null;
      if (rtl.length(El.Params) < 1) this.RaiseInconsistency(20180511151259,El);
      if (!pas.PasResolver.TResolvedReference.isPrototypeOf(El.Value.FData)) this.RaiseInconsistency(20180511144445,El);
      Ref = El.Value.FData;
      ArgContext = AContext.GetNonDotContext();
      ok = false;
      try {
        IndexJS = this.ConvertElement(El.Params[0],ArgContext);
        if (Ref.WithExprScope !== null) {
          WithData = rtl.as(Ref.WithExprScope,$mod.TPas2JSWithExprScope);
          Path = WithData.WithVarName;
        } else {
          Path = "this";
        };
        BracketJS = this.CreateElement(pas.jstree.TJSBracketMemberExpression,El);
        Result = BracketJS;
        BracketJS.FName = IndexJS;
        BracketJS.FMexpr = this.CreatePrimitiveDotExpr(Path,El);
        if (rtl.length(El.Params) > 1) {
          AssignSt = this.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
          AssignSt.FLHS = Result;
          Result = AssignSt;
          AssignSt.FExpr = this.ConvertElement(El.Params[1],ArgContext);
        };
        if (rtl.length(El.Params) > 2) this.DoError$2(20180511144047,4025,rtl.getResStr(pas.FPPas2Js,"sCantCallExtBracketAccessor"),[],El);
        ok = true;
      } finally {
        if (!ok) Result = rtl.freeLoc(Result);
      };
      return Result;
    };
    this.CreateAssignStatement = function (LeftEl, AssignContext) {
      var Result = null;
      var LHS = null;
      var AssignSt = null;
      Result = null;
      LHS = this.ConvertElement(LeftEl,AssignContext);
      if (AssignContext.Call !== null) {
        if (AssignContext.RightSide !== null) {
          LHS = rtl.freeLoc(LHS);
          this.RaiseInconsistency(20170207215447,LeftEl);
        };
        Result = LHS;
      } else {
        AssignSt = this.CreateElement(pas.jstree.TJSSimpleAssignStatement,AssignContext.PasElement);
        AssignSt.FLHS = LHS;
        AssignSt.FExpr = AssignContext.RightSide;
        AssignContext.RightSide = null;
        Result = AssignSt;
      };
      return Result;
    };
    this.CreateGetEnumeratorLoop = function (El, AContext) {
      var Self = this;
      var Result = null;
      var PosEl = null;
      var CurInVarName = "";
      function CreateInName() {
        var Result = null;
        var Ident = null;
        Ident = Self.CreateElement(pas.jstree.TJSPrimaryExpressionIdent,PosEl);
        Ident.FName = CurInVarName;
        Result = Ident;
        return Result;
      };
      var ForScope = null;
      var Statements = null;
      var VarSt = null;
      var FuncContext = null;
      var List = null;
      var GetCurrent = null;
      var J = null;
      var Call = null;
      var TrySt = null;
      var WhileSt = null;
      var AssignSt = null;
      var GetEnumeratorFunc = null;
      var MoveNextFunc = null;
      var CurrentProp = null;
      var DotContext = null;
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      var EnumeratorTypeEl = null;
      var NeedTryFinally = false;
      var NeedIntfRef = false;
      ForScope = El.FData;
      NeedTryFinally = true;
      NeedIntfRef = false;
      GetEnumeratorFunc = ForScope.GetEnumerator;
      if (GetEnumeratorFunc === null) Self.RaiseNotSupported(El,AContext,20171225104212,"");
      if (GetEnumeratorFunc.$class.ClassType() !== pas.PasTree.TPasFunction) Self.RaiseNotSupported(El,AContext,20171225104237,"");
      AContext.Resolver.ComputeElement(GetEnumeratorFunc.GetFT().ResultEl,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
      EnumeratorTypeEl = ResolvedEl.LoTypeEl;
      if (pas.PasTree.TPasClassType.isPrototypeOf(EnumeratorTypeEl)) {
        var $tmp1 = EnumeratorTypeEl.ObjKind;
        if ($tmp1 === pas.PasTree.TPasObjKind.okClass) {}
        else if ($tmp1 === pas.PasTree.TPasObjKind.okInterface) {
          var $tmp2 = EnumeratorTypeEl.InterfaceType;
          if ($tmp2 === pas.PasTree.TPasClassInterfaceType.citCom) {
            NeedIntfRef = true}
           else if ($tmp2 === pas.PasTree.TPasClassInterfaceType.citCorba) {
            NeedTryFinally = false}
           else {
            Self.RaiseNotSupported(El.VariableName,AContext,20180328192842,"");
          };
        } else {
          Self.RaiseNotSupported(El.VariableName,AContext,20180328192452,"");
        };
      };
      MoveNextFunc = ForScope.MoveNext;
      if (MoveNextFunc === null) Self.RaiseNotSupported(El,AContext,20171225104249,"");
      if (MoveNextFunc.$class.ClassType() !== pas.PasTree.TPasFunction) Self.RaiseNotSupported(El,AContext,20171225104256,"");
      CurrentProp = ForScope.Current;
      if (CurrentProp === null) Self.RaiseNotSupported(El,AContext,20171225104306,"");
      if (CurrentProp.$class.ClassType() !== pas.PasTree.TPasProperty) Self.RaiseNotSupported(El,AContext,20171225104316,"");
      FuncContext = AContext;
      while ((FuncContext.Parent !== null) && !$mod.TFunctionContext.isPrototypeOf(FuncContext)) FuncContext = FuncContext.Parent;
      PosEl = El;
      Statements = Self.CreateElement(pas.jstree.TJSStatementList,PosEl);
      DotContext = null;
      try {
        VarSt = Self.CreateElement(pas.jstree.TJSVariableStatement,PosEl);
        Statements.FA = VarSt;
        List = Self.ConvertElement(El.StartExpr,AContext);
        PosEl = El.StartExpr;
        Call = Self.CreateElement(pas.jstree.TJSCallExpression,PosEl);
        Call.FExpr = Self.CreateDotExpression(PosEl,List,Self.CreateIdentifierExpr(GetEnumeratorFunc,AContext),true);
        CurInVarName = FuncContext.CreateLocalIdentifier(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnLoopIn]);
        VarSt.FA = Self.CreateVarDecl$1(CurInVarName,Call,PosEl);
        PosEl = El.VariableName;
        TrySt = null;
        if (NeedTryFinally) {
          TrySt = Self.CreateElement(pas.jstree.TJSTryFinallyStatement,PosEl);
          Statements.FB = TrySt;
        };
        WhileSt = Self.CreateElement(pas.jstree.TJSWhileStatement,PosEl);
        if (TrySt !== null) {
          TrySt.FBlock = WhileSt}
         else Statements.FB = WhileSt;
        Call = Self.CreateElement(pas.jstree.TJSCallExpression,PosEl);
        WhileSt.FCond = Call;
        Call.FExpr = Self.CreateDotExpression(PosEl,CreateInName(),Self.CreateIdentifierExpr(MoveNextFunc,AContext),false);
        AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,PosEl);
        WhileSt.FBody = AssignSt;
        AssignSt.FLHS = Self.ConvertElement(El.VariableName,AContext);
        DotContext = $mod.TDotContext.$create("Create$1",[El.StartExpr,null,AContext]);
        try {
          GetCurrent = Self.CreatePropertyGet(CurrentProp,null,DotContext,PosEl);
          if (DotContext.JS !== null) Self.RaiseNotSupported(El,AContext,20180509134302,pas.PasResolveEval.GetObjName(DotContext.JS));
        } finally {
          pas.SysUtils.FreeAndNil({get: function () {
              return DotContext;
            }, set: function (v) {
              DotContext = v;
            }});
        };
        AssignSt.FExpr = Self.CreateDotExpression(PosEl,CreateInName(),GetCurrent,true);
        if (El.Body !== null) {
          J = Self.ConvertElement(El.Body,AContext);
          if (J !== null) {
            List = Self.CreateElement(pas.jstree.TJSStatementList,PosEl);
            List.FA = WhileSt.FBody;
            List.FB = J;
            WhileSt.FBody = List;
          };
        };
        PosEl = El.StartExpr;
        if (TrySt !== null) {
          if (NeedIntfRef) {
            Call = Self.CreateCallExpression(PosEl);
            TrySt.FBFinally = Call;
            Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntf_Release]]);
            Call.AddArg(CreateInName());
          } else TrySt.FBFinally = Self.CreateCallRTLFreeLoc(CreateInName(),CreateInName(),PosEl);
        };
        Result = Statements;
      } finally {
        DotContext = rtl.freeLoc(DotContext);
        if (Result === null) Statements = rtl.freeLoc(Statements);
      };
      return Result;
    };
    this.CreateCallRTLFreeLoc = function (Setter, Getter, Src) {
      var Result = null;
      var Call = null;
      var AssignSt = null;
      Call = this.CreateCallExpression(Src);
      Call.FExpr = this.CreateMemberExpression([this.GetBuildInNames($mod.TPas2JSBuiltInName.pbivnRTL),this.GetBuildInNames($mod.TPas2JSBuiltInName.pbifnFreeLocalVar)]);
      Call.FArgs.AddElement(Getter);
      AssignSt = this.CreateElement(pas.jstree.TJSSimpleAssignStatement,Src);
      AssignSt.FLHS = Setter;
      AssignSt.FExpr = Call;
      Result = AssignSt;
      return Result;
    };
    this.CreatePropertyGet = function (Prop, Ref, AContext, PosEl) {
      var Result = null;
      var aResolver = null;
      var Decl = null;
      var IndexExpr = null;
      var Call = null;
      var Value = null;
      var Name = "";
      var TypeEl = null;
      aResolver = AContext.Resolver;
      Decl = aResolver.GetPasPropertyGetter(Prop);
      if (pas.PasTree.TPasFunction.isPrototypeOf(Decl)) {
        Value = null;
        Call = this.CreateCallExpression(PosEl);
        try {
          Call.FExpr = this.CreateReferencePathExpr(Decl,AContext,false,Ref);
          IndexExpr = aResolver.GetPasPropertyIndex(Prop);
          if (IndexExpr !== null) {
            Value = aResolver.Eval(IndexExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
            Call.AddArg(this.ConvertConstValue(Value,AContext.GetFunctionContext(),PosEl));
          };
          TypeEl = aResolver.GetPasPropertyType(Prop);
          if (aResolver.IsInterfaceType$1(TypeEl,pas.PasTree.TPasClassInterfaceType.citCom)) Call = this.CreateIntfRef(Call,AContext,PosEl);
          Result = Call;
        } finally {
          pas.PasResolveEval.ReleaseEvalValue({get: function () {
              return Value;
            }, set: function (v) {
              Value = v;
            }});
          if (Result === null) Call = rtl.freeLoc(Call);
        };
      } else {
        Name = this.CreateReferencePath(Decl,AContext,$mod.TRefPathKind.rpkPathAndName,false,Ref);
        Result = this.CreatePrimitiveDotExpr(Name,PosEl);
      };
      return Result;
    };
    this.CreatePrecompiledJS = function (El) {
      var Result = "";
      var aWriter = null;
      var aJSWriter = null;
      aJSWriter = null;
      aWriter = pas.jswriter.TBufferWriter.$create("Create$2",[1000]);
      try {
        aJSWriter = pas.jswriter.TJSWriter.$create("Create$1",[aWriter]);
        aJSWriter.SetOptions(rtl.refSet($mod.DefaultJSWriterOptions));
        aJSWriter.FIndentSize = 2;
        aJSWriter.WriteJS(El);
        Result = aWriter.GetAsString();
      } finally {
        aJSWriter = rtl.freeLoc(aJSWriter);
        aWriter = rtl.freeLoc(aWriter);
      };
      return Result;
    };
    this.CreateArrayInit = function (ArrayType, Expr, El, AContext) {
      var Self = this;
      var Result = null;
      function ConvertArrayExpr(CurArrType, RgIndex, CurExpr) {
        var Result = null;
        var NextArrType = null;
        var NextRgIndex = 0;
        var IsLastRange = false;
        function ConvertSubExpr(SubExpr) {
          var Result = null;
          if (IsLastRange) {
            Result = Self.ConvertElement(SubExpr,AContext)}
           else Result = ConvertArrayExpr(NextArrType,NextRgIndex,SubExpr);
          return Result;
        };
        function ConvertSubValues(ExprArray) {
          var Result = null;
          var i = 0;
          var JS = null;
          var Param = null;
          Result = Self.CreateElement(pas.jstree.TJSArrayLiteral,El);
          for (var $l1 = 0, $end2 = rtl.length(ExprArray) - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            Param = ExprArray[i];
            JS = ConvertSubExpr(Param);
            JS = Self.CreateArrayEl(Param,JS,AContext);
            Result.FElements.AddElement().FExpr = JS;
          };
          return Result;
        };
        function IsAdd(AnExpr) {
          var Result = false;
          Result = (AnExpr.$class.ClassType() === pas.PasTree.TBinaryExpr) && (AnExpr.OpCode === pas.PasTree.TExprOpCode.eopAdd);
          return Result;
        };
        function TraverseAdd(Bin, ConcatCall) {
          if (IsAdd(Bin.left)) {
            TraverseAdd(Bin.left,ConcatCall)}
           else ConcatCall.AddArg(ConvertArrayExpr(NextArrType,NextRgIndex,Bin.left));
          if (IsAdd(Bin.right)) {
            TraverseAdd(Bin.right,ConcatCall)}
           else ConcatCall.AddArg(ConvertArrayExpr(NextArrType,NextRgIndex,Bin.right));
        };
        var ElTypeResolved = new pas.PasResolver.TPasResolverResult();
        var Call = null;
        Result = null;
        IsLastRange = false;
        NextArrType = CurArrType;
        NextRgIndex = RgIndex + 1;
        if (RgIndex >= (rtl.length(CurArrType.Ranges) - 1)) {
          AContext.Resolver.ComputeElement(CurArrType.ElType,{get: function () {
              return ElTypeResolved;
            }, set: function (v) {
              ElTypeResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
          if ((ElTypeResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) && (ElTypeResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) {
            NextArrType = ElTypeResolved.LoTypeEl;
            NextRgIndex = 0;
          } else IsLastRange = true;
        };
        if (CurExpr.$class.ClassType() === pas.PasTree.TArrayValues) {
          Result = ConvertSubValues(CurExpr.Values);
          return Result;
        } else if ((CurExpr.$class.ClassType() === pas.PasTree.TParamsExpr) && (CurExpr.Kind === pas.PasTree.TPasExprKind.pekSet)) {
          Result = ConvertSubValues(CurExpr.Params);
          return Result;
        } else if (IsAdd(CurExpr)) {
          Call = Self.CreateArrayConcat$1(ArrayType,CurExpr,AContext);
          try {
            TraverseAdd(CurExpr,Call);
            Result = Call;
          } finally {
            if (Result === null) Call = rtl.freeLoc(Call);
          };
          return Result;
        };
        Result = Self.ConvertElement(CurExpr,AContext);
        return Result;
      };
      var Call = null;
      var ArrLit = null;
      var i = 0;
      var DimSize = 0;
      var RangeResolved = new pas.PasResolver.TPasResolverResult();
      var ElTypeResolved = new pas.PasResolver.TPasResolverResult();
      var ExprResolved = new pas.PasResolver.TPasResolverResult();
      var Range = null;
      var Lit = null;
      var CurArrayType = null;
      var DefaultValue = null;
      var US = "";
      var DimLits = null;
      var aResolver = null;
      var CompFlags = {};
      aResolver = AContext.Resolver;
      if (Expr != null) {
        if (aResolver === null) Self.DoError$2(20161024192739,4006,rtl.getResStr(pas.FPPas2Js,"sInitializedArraysNotSupported"),[],ArrayType);
        if (aResolver.fExprEvaluator.IsConst(Expr)) {
          CompFlags = rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcConstant)}
         else CompFlags = {};
        aResolver.ComputeElement(Expr,{get: function () {
            return ExprResolved;
          }, set: function (v) {
            ExprResolved = v;
          }},rtl.refSet(CompFlags),null);
        if ((ExprResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btArrayOrSet,pas.PasResolver.TResolverBaseType.btArrayLit)) || ((ExprResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) && (ExprResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType))) {
          Result = ConvertArrayExpr(ArrayType,0,Expr)}
         else if (ExprResolved.BaseType in pas.PasResolver.btAllStringAndChars) {
          US = pas.jsbase.StrToJSString(aResolver.ComputeConstString(Expr,false,true));
          ArrLit = Self.CreateElement(pas.jstree.TJSArrayLiteral,El);
          Result = ArrLit;
          for (var $l1 = 1, $end2 = US.length; $l1 <= $end2; $l1++) {
            i = $l1;
            ArrLit.FElements.AddElement().FExpr = Self.CreateLiteralJSString(Expr,US.charAt(i - 1));
          };
        } else Self.RaiseNotSupported(Expr,AContext,20170223133034,"");
      } else if (rtl.length(ArrayType.Ranges) === 0) {
        Result = Self.CreateElement(pas.jstree.TJSArrayLiteral,El);
      } else {
        if (aResolver === null) Self.RaiseNotSupported(El,AContext,20170223113050,"");
        Result = null;
        DimLits = pas.contnrs.TObjectList.$create("Create$3",[true]);
        try {
          Call = Self.CreateCallExpression(El);
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_SetLength]]);
          Call.AddArg(Self.CreateLiteralNull(El));
          CurArrayType = ArrayType;
          while (true) {
            for (var $l3 = 0, $end4 = rtl.length(CurArrayType.Ranges) - 1; $l3 <= $end4; $l3++) {
              i = $l3;
              Range = CurArrayType.Ranges[i];
              DimSize = aResolver.GetRangeLength(Range);
              if (DimSize === 0) {
                aResolver.ComputeElement(Range,{get: function () {
                    return RangeResolved;
                  }, set: function (v) {
                    RangeResolved = v;
                  }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcConstant),null);
                Self.RaiseNotSupported(Range,AContext,20170223113318,pas.PasResolver.GetResolverResultDbg(RangeResolved));
              };
              Lit = Self.CreateLiteralNumber(El,DimSize);
              DimLits.Add$1(Lit);
            };
            aResolver.ComputeElement(CurArrayType.ElType,{get: function () {
                return ElTypeResolved;
              }, set: function (v) {
                ElTypeResolved = v;
              }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
            if (pas.PasTree.TPasArrayType.isPrototypeOf(ElTypeResolved.LoTypeEl)) {
              CurArrayType = ElTypeResolved.LoTypeEl;
              if (rtl.length(CurArrayType.Ranges) > 0) {
                continue;
              };
            };
            break;
          };
          if (pas.PasTree.TPasRecordType.isPrototypeOf(ElTypeResolved.LoTypeEl)) {
            DefaultValue = Self.CreateReferencePathExpr(ElTypeResolved.LoTypeEl,AContext,false,null);
          } else DefaultValue = Self.CreateValInit(ElTypeResolved.LoTypeEl,null,El,AContext);
          Call.AddArg(DefaultValue);
          for (var $l5 = 0, $end6 = DimLits.GetCount() - 1; $l5 <= $end6; $l5++) {
            i = $l5;
            Call.AddArg(DimLits.GetItem(i));
          };
          DimLits.FFreeObjects = false;
          DimLits.Clear();
          Result = Call;
        } finally {
          DimLits = rtl.freeLoc(DimLits);
          if (Result === null) Call = rtl.freeLoc(Call);
        };
      };
      if (Result === null) Self.RaiseInconsistency(20180617233317,Expr);
      return Result;
    };
    this.CreateCmpArrayWithNil = function (El, JSArray, OpCode) {
      var Result = null;
      var Call = null;
      var BinExpr = null;
      if (!(OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopEqual,pas.PasTree.TExprOpCode.eopNotEqual))) this.RaiseInconsistency(20170401184819,El);
      Call = this.CreateCallExpression(El);
      Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Length]]);
      Call.AddArg(JSArray);
      if (OpCode === pas.PasTree.TExprOpCode.eopEqual) {
        BinExpr = this.CreateElement(pas.jstree.TJSEqualityExpressionSEQ,El)}
       else BinExpr = this.CreateElement(pas.jstree.TJSRelationalExpressionGT,El);
      BinExpr.FA = Call;
      BinExpr.FB = this.CreateLiteralNumber(El,0);
      Result = BinExpr;
      return Result;
    };
    this.CreateCloneStaticArray = function (El, ArrTypeEl, ArrayExpr, AContext) {
      var Result = null;
      var Call = null;
      var Path = "";
      var FuncContext = null;
      var DotExpr = null;
      var i = 0;
      var JSExpr = null;
      if (pas.jstree.TJSArrayLiteral.isPrototypeOf(ArrayExpr)) return ArrayExpr;
      if (AContext.Resolver.HasStaticArrayCloneFunc(ArrTypeEl)) {
        if (ArrTypeEl.FName === "") this.RaiseNotSupported(El,AContext,20180218230407,"copy anonymous multi dim static array");
        if (rtl.length(ArrTypeEl.Ranges) > 1) this.RaiseNotSupported(El,AContext,20180218231700,"copy multi dim static array");
        FuncContext = AContext.GetFunctionContext();
        Path = this.CreateReferencePath(ArrTypeEl,FuncContext,$mod.TRefPathKind.rpkPathAndName,false,null) + this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Static_Clone];
        Call = this.CreateCallExpression(El);
        Call.FExpr = this.CreatePrimitiveDotExpr(Path,El);
        Call.AddArg(ArrayExpr);
        Result = Call;
      } else {
        if (pas.jstree.TJSCallExpression.isPrototypeOf(ArrayExpr)) {
          Call = ArrayExpr;
          if (pas.jstree.TJSDotMemberExpression.isPrototypeOf(Call.FExpr)) {
            DotExpr = Call.FExpr;
            if (((DotExpr.FName === "slice") && (Call.FArgs !== null)) && (Call.FArgs.FElements.GetCount() === 1)) {
              JSExpr = Call.FArgs.FElements.GetE(0).FExpr;
              if (this.IsLiteralInteger(JSExpr,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }}) && (i === 0)) return Call;
            };
          };
        };
        Call = this.CreateCallExpression(El);
        Call.FExpr = this.CreateDotExpression(El,ArrayExpr,this.CreatePrimitiveDotExpr("slice",El),false);
        Call.AddArg(this.CreateLiteralNumber(El,0));
        Result = Call;
      };
      return Result;
    };
    this.CreateTypeInfoRef = function (El, AContext, ErrorEl) {
      var Result = null;
      var aName = "";
      var aModName = "";
      var CurEl = null;
      var aModule = null;
      var Bracket = null;
      El = pas.PasResolver.ResolveSimpleAliasType(El);
      aName = this.GetTypeInfoName(El,AContext,ErrorEl);
      if (aName === this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTILocal]) {
        Result = this.CreatePrimitiveDotExpr(aName,El)}
       else if (pas.SysUtils.LeftStr(aName,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL].length + 1) === (this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".")) {
        Result = this.CreatePrimitiveDotExpr(aName,El)}
       else {
        CurEl = El;
        while (CurEl !== null) {
          if (pas.PasTree.TPasSection.isPrototypeOf(CurEl)) {
            aModule = rtl.as(CurEl.FParent,pas.PasTree.TPasModule);
            aModName = AContext.GetLocalName(aModule);
            if (aModName === "") aModName = this.TransformModuleName(aModule,true,AContext);
            Bracket = this.CreateElement(pas.jstree.TJSBracketMemberExpression,El);
            Bracket.FMexpr = this.CreateMemberExpression([aModName,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTI]]);
            Bracket.FName = this.CreateLiteralString(El,aName);
            Result = Bracket;
            return Result;
          };
          CurEl = CurEl.FParent;
        };
        aName = El.FName;
        if (aName === "") aName = El.$classname;
        this.DoError$2(20170905152041,4021,rtl.getResStr(pas.FPPas2Js,"sTypeXCannotBePublished"),[aName],ErrorEl);
      };
      return Result;
    };
    this.CreateRTTIArgList = function (Parent, Args, AContext) {
      var Result = null;
      var Params = null;
      var i = 0;
      Result = null;
      if (Args.FCount === 0) {
        Result = this.CreateLiteralNull(Parent)}
       else {
        try {
          Params = this.CreateElement(pas.jstree.TJSArrayLiteral,Parent);
          for (var $l1 = 0, $end2 = Args.FCount - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            this.AddRTTIArgument(rtl.getObject(Args.Get(i)),Params,AContext);
          };
          Result = Params;
        } finally {
          if (Result === null) Params = rtl.freeLoc(Params);
        };
      };
      return Result;
    };
    this.AddRTTIArgument = function (Arg, TargetParams, AContext) {
      var Param = null;
      var ArgName = "";
      var Flags = 0;
      var ArrType = null;
      Param = this.CreateElement(pas.jstree.TJSArrayLiteral,Arg);
      TargetParams.FElements.AddElement().FExpr = Param;
      ArgName = this.TransformVariableName(Arg,Arg.FName,true,AContext);
      Param.FElements.AddElement().FExpr = this.CreateLiteralString(Arg,ArgName);
      Flags = 0;
      if (Arg.ArgType === null) {
        Param.FElements.AddElement().FExpr = this.CreateLiteralNull(Arg)}
       else if ((Arg.ArgType.FName === "") && (Arg.ArgType.$class.ClassType() === pas.PasTree.TPasArrayType)) {
        Flags += 8;
        ArrType = Arg.ArgType;
        Param.FElements.AddElement().FExpr = this.CreateTypeInfoRef(ArrType.ElType,AContext,Arg);
      } else Param.FElements.AddElement().FExpr = this.CreateTypeInfoRef(Arg.ArgType,AContext,Arg);
      var $tmp1 = Arg.Access;
      if ($tmp1 === pas.PasTree.TArgumentAccess.argDefault) {}
      else if ($tmp1 === pas.PasTree.TArgumentAccess.argConst) {
        Flags += 2}
       else if ($tmp1 === pas.PasTree.TArgumentAccess.argVar) {
        Flags += 1}
       else if ($tmp1 === pas.PasTree.TArgumentAccess.argOut) {
        Flags += 4}
       else {
        this.RaiseNotSupported(Arg,AContext,20170409192127,pas.PasTree.AccessNames[Arg.Access]);
      };
      if (Flags > 0) Param.FElements.AddElement().FExpr = this.CreateLiteralNumber(Arg,Flags);
    };
    this.CreateRTTINewType = function (El, CallFuncName, IsForward, AContext, ObjLit) {
      var Result = null;
      var RttiPath = "";
      var TypeName = "";
      var Call = null;
      var aModule = null;
      Result = null;
      ObjLit.set(null);
      aModule = El.GetModule();
      if (aModule === null) this.RaiseInconsistency(20170418115552,El);
      RttiPath = AContext.GetLocalName(aModule);
      if (RttiPath === "") RttiPath = this.TransformModuleName(AContext.GetRootModule(),true,AContext);
      Call = this.CreateCallExpression(El);
      try {
        Call.FExpr = this.CreateMemberExpression([RttiPath,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTI],CallFuncName]);
        TypeName = this.GetTypeInfoName(El,AContext,El);
        Call.AddArg(this.CreateLiteralString(El,TypeName));
        if (pas.PasTree.TPasTypeAliasType.isPrototypeOf(El)) {
          Call.AddArg(this.CreateTypeInfoRef(El.DestType,AContext,El));
        };
        if (!IsForward) {
          ObjLit.set(this.CreateElement(pas.jstree.TJSObjectLiteral,El));
          Call.AddArg(ObjLit.get());
        };
        Result = Call;
      } finally {
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.CreateRTTIClassField = function (V, AContext) {
      var Result = null;
      var Call = null;
      var JSTypeInfo = null;
      var aName = "";
      Result = null;
      JSTypeInfo = this.CreateTypeInfoRef(V.VarType,AContext,V);
      Call = this.CreateCallExpression(V);
      Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTILocal],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTIAddField]]);
      aName = this.TransformVariableName$1(V,AContext);
      Call.AddArg(this.CreateLiteralString(V,aName));
      Call.AddArg(JSTypeInfo);
      Result = Call;
      return Result;
    };
    this.CreateRTTIClassMethod = function (Proc, AContext) {
      var Self = this;
      var Result = null;
      var OptionsEl = null;
      var ResultTypeInfo = null;
      var Call = null;
      function AddOption(aName, JS) {
        var ObjLit = null;
        if (OptionsEl === null) {
          OptionsEl = Self.CreateElement(pas.jstree.TJSObjectLiteral,Proc);
          if (ResultTypeInfo === null) Call.AddArg(Self.CreateLiteralNull(Proc));
          Call.AddArg(OptionsEl);
        };
        ObjLit = OptionsEl.FElements.AddElement();
        ObjLit.FName = aName;
        ObjLit.FExpr = JS;
      };
      var FunName = "";
      var C = null;
      var MethodKind = 0;
      var Flags = 0;
      var ResultEl = null;
      var ProcScope = null;
      var OverriddenProcScope = null;
      var OverriddenClass = null;
      Result = null;
      if (Proc.IsOverride()) {
        ProcScope = rtl.as(Proc.FData,pas.PasResolver.TPasProcedureScope);
        if (ProcScope.OverriddenProc.Visibility === pas.PasTree.TPasMemberVisibility.visPublished) {
          OverriddenProcScope = rtl.as(ProcScope.OverriddenProc.FData,pas.PasResolver.TPasProcedureScope);
          OverriddenClass = rtl.as(OverriddenProcScope.ClassScope.FElement,pas.PasTree.TPasClassType);
          if (Self.HasTypeInfo(OverriddenClass,AContext)) return Result;
        };
      };
      OptionsEl = null;
      ResultTypeInfo = null;
      try {
        Call = Self.CreateCallExpression(Proc);
        Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTILocal],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTIAddMethod]]);
        FunName = Self.TransformVariableName$1(Proc,AContext);
        Call.AddArg(Self.CreateLiteralString(Proc,FunName));
        C = Proc.$class.ClassType();
        if (C === pas.PasTree.TPasProcedure) {
          MethodKind = $mod.TPasToJSConverter.TMethodKind.mkProcedure}
         else if (C === pas.PasTree.TPasFunction) {
          MethodKind = $mod.TPasToJSConverter.TMethodKind.mkFunction}
         else if (C === pas.PasTree.TPasConstructor) {
          MethodKind = $mod.TPasToJSConverter.TMethodKind.mkConstructor}
         else if (C === pas.PasTree.TPasDestructor) {
          MethodKind = $mod.TPasToJSConverter.TMethodKind.mkDestructor}
         else if (C === pas.PasTree.TPasClassProcedure) {
          MethodKind = $mod.TPasToJSConverter.TMethodKind.mkClassProcedure}
         else if (C === pas.PasTree.TPasClassFunction) {
          MethodKind = $mod.TPasToJSConverter.TMethodKind.mkClassFunction}
         else Self.RaiseNotSupported(Proc,AContext,20170409190242,"");
        Call.AddArg(Self.CreateLiteralNumber(Proc,MethodKind));
        Call.AddArg(Self.CreateRTTIArgList(Proc,Proc.ProcType.Args,AContext));
        if (C.InheritsFrom(pas.PasTree.TPasFunction)) {
          ResultEl = Proc.GetFT().ResultEl;
          ResultTypeInfo = Self.CreateTypeInfoRef(ResultEl.ResultType,AContext,ResultEl);
          if (ResultTypeInfo !== null) Call.AddArg(ResultTypeInfo);
        };
        Flags = 0;
        if (Proc.IsStatic()) Flags += 1;
        if (pas.PasTree.TProcTypeModifier.ptmVarargs in Proc.ProcType.Modifiers) Flags += 2;
        if (Proc.IsExternal()) Flags += 4;
        if (Flags > 0) AddOption(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIProcFlags],Self.CreateLiteralNumber(Proc,Flags));
        Result = Call;
      } finally {
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.CreateRTTIClassProperty = function (Prop, AContext) {
      var Self = this;
      var Result = null;
      var Call = null;
      var OptionsEl = null;
      function GetAccessorName(Decl) {
        var Result = "";
        Result = Self.TransformVariableName$1(Decl,AContext);
        return Result;
      };
      function AddOption(aName, JS) {
        var ObjLit = null;
        if (OptionsEl === null) {
          OptionsEl = Self.CreateElement(pas.jstree.TJSObjectLiteral,Prop);
          Call.AddArg(OptionsEl);
        };
        ObjLit = OptionsEl.FElements.AddElement();
        ObjLit.FName = aName;
        ObjLit.FExpr = JS;
      };
      var PropName = "";
      var Flags = 0;
      var GetterPas = null;
      var SetterPas = null;
      var DeclEl = null;
      var ResultTypeInfo = null;
      var DefValue = null;
      var VarType = null;
      var StoredExpr = null;
      var IndexExpr = null;
      var DefaultExpr = null;
      var StoredResolved = new pas.PasResolver.TPasResolverResult();
      var VarTypeResolved = new pas.PasResolver.TPasResolverResult();
      var StoredValue = null;
      var PasValue = null;
      var IndexValue = null;
      var aResolver = null;
      Result = null;
      aResolver = AContext.Resolver;
      OptionsEl = null;
      try {
        Call = Self.CreateCallExpression(Prop);
        Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTILocal],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTIAddProperty]]);
        PropName = Self.TransformVariableName(Prop,Prop.FName,false,AContext);
        Call.AddArg(Self.CreateLiteralString(Prop,PropName));
        Flags = 0;
        GetterPas = aResolver.GetPasPropertyGetter(Prop);
        if (pas.PasTree.TPasProcedure.isPrototypeOf(GetterPas)) Flags += 1;
        SetterPas = aResolver.GetPasPropertySetter(Prop);
        if (pas.PasTree.TPasProcedure.isPrototypeOf(SetterPas)) Flags += 2;
        StoredExpr = aResolver.GetPasPropertyStoredExpr(Prop);
        IndexExpr = aResolver.GetPasPropertyIndex(Prop);
        if (IndexExpr !== null) Flags += 16;
        DefaultExpr = aResolver.GetPasPropertyDefaultExpr(Prop);
        if (StoredExpr !== null) {
          aResolver.ComputeElement(StoredExpr,{get: function () {
              return StoredResolved;
            }, set: function (v) {
              StoredResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
          if (pas.PasTree.TPasProcedure.isPrototypeOf(StoredResolved.IdentEl)) {
            Flags += 12}
           else {
            if ((StoredResolved.BaseType === pas.PasResolver.TResolverBaseType.btBoolean) && (StoredResolved.ExprEl !== null)) {
              StoredValue = aResolver.Eval(StoredExpr,{},true);
              if (StoredValue !== null) try {
                if (StoredValue.Kind !== pas.PasResolveEval.TREVKind.revkBool) Self.RaiseInconsistency(20170924082845,Prop);
                StoredExpr = null;
                if (StoredValue.B) {
                  Flags += 0}
                 else Flags += 4;
              } finally {
                pas.PasResolveEval.ReleaseEvalValue({get: function () {
                    return StoredValue;
                  }, set: function (v) {
                    StoredValue = v;
                  }});
              };
            };
            if (StoredExpr !== null) Flags += 8;
          };
        };
        Call.AddArg(Self.CreateLiteralNumber(Prop,Flags));
        VarType = aResolver.GetPasPropertyType(Prop);
        aResolver.ComputeElement(VarType,{get: function () {
            return VarTypeResolved;
          }, set: function (v) {
            VarTypeResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
        ResultTypeInfo = Self.CreateTypeInfoRef(VarType,AContext,Prop);
        if (ResultTypeInfo !== null) {
          Call.AddArg(ResultTypeInfo)}
         else Call.AddArg(Self.CreateLiteralNull(Prop));
        if (GetterPas === null) {
          Call.AddArg(Self.CreateLiteralString(Prop,""))}
         else Call.AddArg(Self.CreateLiteralString(Prop,GetAccessorName(GetterPas)));
        if (SetterPas === null) {
          Call.AddArg(Self.CreateLiteralString(Prop,""))}
         else Call.AddArg(Self.CreateLiteralString(Prop,GetAccessorName(SetterPas)));
        IndexExpr = aResolver.GetPasPropertyIndex(Prop);
        if (IndexExpr !== null) {
          IndexValue = aResolver.Eval(IndexExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
          try {
            AddOption(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIPropIndex],Self.ConvertConstValue(IndexValue,AContext,Prop));
          } finally {
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return IndexValue;
              }, set: function (v) {
                IndexValue = v;
              }});
          };
        };
        if (StoredExpr !== null) {
          DeclEl = rtl.as(StoredExpr.FData,pas.PasResolver.TResolvedReference).FDeclaration;
          AddOption(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIPropStored],Self.CreateLiteralString(Prop,GetAccessorName(DeclEl)));
        };
        if (DefaultExpr !== null) {
          PasValue = aResolver.Eval(DefaultExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),false);
          try {
            DefValue = null;
            if (VarTypeResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btSet,pas.PasResolver.TResolverBaseType.btArrayOrSet)) DefValue = Self.CreateValInit(VarType,DefaultExpr,DefaultExpr,AContext);
            if (DefValue === null) DefValue = Self.ConvertConstValue(PasValue,AContext,Prop);
            AddOption(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIPropDefault],DefValue);
          } finally {
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return PasValue;
              }, set: function (v) {
                PasValue = v;
              }});
          };
        };
        Result = Call;
      } finally {
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.CreateRTTIAnonymous = function (El, AContext, First, Last) {
      var C = null;
      var JS = null;
      if (El.FName !== "") this.RaiseNotSupported(El,AContext,20170905162324,"inconsistency");
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasArrayType) {
        JS = this.ConvertArrayType(El,AContext);
        this.AddToStatementList(First,Last,JS,El);
      };
    };
    this.AddIntfDelegations = function (ClassEl, Prop, FinishedGUIDs, ObjLit, aContext) {
      var i = 0;
      var Expr = null;
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      var OrigIntfType = null;
      var OrigPropType = null;
      var PropType = null;
      var IntfType = null;
      var LitEl = null;
      var Scope = null;
      var FunSt = null;
      var aResolver = null;
      var GetterJS = null;
      var RetSt = null;
      var Call = null;
      var FunName = "";
      aResolver = aContext.Resolver;
      GetterJS = null;
      try {
        for (var $l1 = 0, $end2 = rtl.length(Prop.Implements) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Expr = Prop.Implements[i];
          aResolver.ComputeElement(Expr,{get: function () {
              return ResolvedEl;
            }, set: function (v) {
              ResolvedEl = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
          if (!pas.PasTree.TPasType.isPrototypeOf(ResolvedEl.IdentEl)) this.RaiseInconsistency(20180327183019,Expr);
          OrigIntfType = ResolvedEl.IdentEl;
          IntfType = rtl.as(aResolver.ResolveAliasType(OrigIntfType),pas.PasTree.TPasClassType);
          Scope = rtl.as(IntfType.FData,$mod.TPas2JSClassScope);
          if (Scope.GUID === "") this.RaiseInconsistency(20180327184912,Expr);
          if (FinishedGUIDs.IndexOf(Scope.GUID) >= 0) continue;
          FinishedGUIDs.Add(Scope.GUID);
          LitEl = ObjLit.FElements.AddElement();
          LitEl.FName = Scope.GUID;
          FunSt = this.CreateFunctionSt(ClassEl,true,false);
          LitEl.FExpr = FunSt;
          RetSt = this.CreateElement(pas.jstree.TJSReturnStatement,Prop);
          FunSt.FFuncDef.FBody.FA = RetSt;
          OrigPropType = aResolver.GetPasPropertyType(Prop);
          aResolver.ComputeElement(OrigPropType,{get: function () {
              return ResolvedEl;
            }, set: function (v) {
              ResolvedEl = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
          if (!pas.PasTree.TPasType.isPrototypeOf(ResolvedEl.IdentEl)) this.RaiseInconsistency(20180327190201,Prop);
          PropType = aResolver.ResolveAliasType(ResolvedEl.IdentEl);
          if (!pas.PasTree.TPasClassType.isPrototypeOf(PropType)) this.RaiseInconsistency(20180327190442,Prop);
          if (aResolver.GetPasPropertyArgs(Prop).FCount > 0) this.RaiseNotSupported(Prop,aContext,20180327191159,"");
          GetterJS = this.CreatePropertyGet(Prop,null,aContext,Prop);
          var $tmp3 = PropType.ObjKind;
          if ($tmp3 === pas.PasTree.TPasObjKind.okClass) {
            var $tmp4 = IntfType.InterfaceType;
            if ($tmp4 === pas.PasTree.TPasClassInterfaceType.citCom) {
              FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfQueryIntfT]}
             else if ($tmp4 === pas.PasTree.TPasClassInterfaceType.citCorba) {
              FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGetIntfT]}
             else {
              this.RaiseNotSupported(Prop,aContext,20180406085319,pas.PasTree.InterfaceTypeNames[IntfType.InterfaceType]);
            };
            Call = this.CreateCallExpression(Prop);
            RetSt.FExpr = Call;
            Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],FunName]);
            Call.AddArg(GetterJS);
            GetterJS = null;
            Call.AddArg(this.CreateReferencePathExpr(IntfType,aContext,false,null));
          } else if ($tmp3 === pas.PasTree.TPasObjKind.okInterface) {
            var $tmp5 = IntfType.InterfaceType;
            if ($tmp5 === pas.PasTree.TPasClassInterfaceType.citCom) {
              if (this.IsInterfaceRef(GetterJS)) {
                GetterJS = this.RemoveIntfRef(GetterJS,aContext)}
               else {
                Call = this.CreateCallExpression(Prop);
                Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntf_AddRef]]);
                Call.AddArg(GetterJS);
                GetterJS = Call;
              };
            } else if ($tmp5 === pas.PasTree.TPasClassInterfaceType.citCorba) {}
            else {
              this.RaiseNotSupported(Prop,aContext,20180406085053,pas.PasTree.InterfaceTypeNames[IntfType.InterfaceType]);
            };
            RetSt.FExpr = GetterJS;
            GetterJS = null;
          } else {
            this.RaiseNotSupported(Prop,aContext,20180327190538,pas.PasTree.ObjKindNames[PropType.ObjKind]);
          };
        };
      } finally {
        GetterJS = rtl.freeLoc(GetterJS);
      };
    };
    this.CreateGUIDObjLit = function (aTGUIDRecord, GUID, PosEl, AContext) {
      var Result = null;
      var Members = null;
      var PropEl = null;
      var MemberEl = null;
      var ArrLit = null;
      var i = 0;
      Members = aTGUIDRecord.Members;
      Result = this.CreateElement(pas.jstree.TJSObjectLiteral,PosEl);
      PropEl = Result.FElements.AddElement();
      MemberEl = rtl.getObject(Members.Get(0));
      if (!pas.SysUtils.SameText(MemberEl.FName,"D1")) this.RaiseInconsistency(20180415094721,PosEl);
      PropEl.FName = this.TransformVariableName$1(MemberEl,AContext);
      PropEl.FExpr = this.CreateLiteralHexNumber(PosEl,GUID.D1,8);
      PropEl = Result.FElements.AddElement();
      MemberEl = rtl.getObject(Members.Get(1));
      PropEl.FName = this.TransformVariableName$1(MemberEl,AContext);
      PropEl.FExpr = this.CreateLiteralHexNumber(PosEl,GUID.D2,4);
      PropEl = Result.FElements.AddElement();
      MemberEl = rtl.getObject(Members.Get(2));
      PropEl.FName = this.TransformVariableName$1(MemberEl,AContext);
      PropEl.FExpr = this.CreateLiteralHexNumber(PosEl,GUID.D3,4);
      PropEl = Result.FElements.AddElement();
      MemberEl = rtl.getObject(Members.Get(3));
      PropEl.FName = this.TransformVariableName$1(MemberEl,AContext);
      ArrLit = this.CreateElement(pas.jstree.TJSArrayLiteral,PosEl);
      PropEl.FExpr = ArrLit;
      for (i = 0; i <= 7; i++) ArrLit.AddElement(this.CreateLiteralHexNumber(PosEl,GUID.D4[i],2));
      return Result;
    };
    this.CreateAssignComIntfVar = function (LeftResolved, LHS, RHS, AContext, PosEl) {
      var Self = this;
      var Result = null;
      function AddProcRelease(Proc, SubEl) {
        var FuncContext = null;
        FuncContext = AContext.GetFuncContextOfPasElement(Proc);
        if (FuncContext !== null) {
          if (pas.PasTree.TPasResultElement.isPrototypeOf(SubEl)) {
            FuncContext.ResultNeedsIntfRelease = true}
           else FuncContext.Add_InterfaceRelease(SubEl);
        } else {
          Self.RaiseInconsistency(20180401164150,PosEl);
        };
      };
      var Call = null;
      var AssignSt = null;
      var Prim = null;
      var IdentEl = null;
      var Proc = null;
      var ok = false;
      var SkipAddRef = false;
      Result = null;
      ok = false;
      try {
        SkipAddRef = false;
        if (Self.IsInterfaceRef(RHS.get())) {
          RHS.set(Self.RemoveIntfRef(RHS.get(),AContext));
          SkipAddRef = true;
        };
        Call = Self.CreateCallExpression(PosEl);
        Result = Call;
        if (pas.jstree.TJSDotMemberExpression.isPrototypeOf(LHS.get())) {
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfSetIntfP]]);
          Call.AddArg(LHS.get().FMexpr);
          LHS.get().FMexpr = null;
          Call.AddArg(Self.CreateLiteralJSString(PosEl,LHS.get().FName));
          pas.SysUtils.FreeAndNil(LHS);
          Call.AddArg(RHS.get());
          RHS.set(null);
          if (SkipAddRef) Call.AddArg(Self.CreateLiteralBoolean(PosEl,true));
        } else if (pas.jstree.TJSBracketMemberExpression.isPrototypeOf(LHS.get())) {
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfSetIntfP]]);
          Call.AddArg(LHS.get().FMexpr);
          LHS.get().FMexpr = null;
          Call.AddArg(LHS.get().FName);
          pas.SysUtils.FreeAndNil(LHS);
          Call.AddArg(RHS.get());
          RHS.set(null);
          if (SkipAddRef) Call.AddArg(Self.CreateLiteralBoolean(PosEl,true));
        } else if (pas.jstree.TJSPrimaryExpressionIdent.isPrototypeOf(LHS.get())) {
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfSetIntfL]]);
          Prim = Self.CreateElement(pas.jstree.TJSPrimaryExpressionIdent,PosEl);
          Prim.FName = LHS.get().FName;
          Call.AddArg(Prim);
          Call.AddArg(RHS.get());
          RHS.set(null);
          if (SkipAddRef) Call.AddArg(Self.CreateLiteralBoolean(PosEl,true));
          AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,PosEl);
          AssignSt.FLHS = LHS.get();
          LHS.set(null);
          AssignSt.FExpr = Call;
          Result = AssignSt;
        } else Self.RaiseNotSupported(PosEl,AContext,20180401105030,pas.PasResolveEval.GetObjName(LHS.get()));
        IdentEl = LeftResolved.IdentEl;
        if (IdentEl !== null) {
          if ((IdentEl.$class.ClassType() === pas.PasTree.TPasVariable) && pas.PasTree.TProcedureBody.isPrototypeOf(IdentEl.FParent)) {
            Proc = IdentEl.FParent.FParent;
            AddProcRelease(Proc,IdentEl);
          } else if (((IdentEl.$class.ClassType() === pas.PasTree.TPasArgument) && pas.PasTree.TPasProcedureType.isPrototypeOf(IdentEl.FParent)) && pas.PasTree.TPasProcedure.isPrototypeOf(IdentEl.FParent.FParent)) {
            Proc = IdentEl.FParent.FParent;
            AddProcRelease(Proc,IdentEl);
          } else if (IdentEl.$class.ClassType() === pas.PasTree.TPasResultElement) {
            Proc = IdentEl.FParent.FParent;
            AddProcRelease(Proc,IdentEl);
          };
        };
        ok = true;
      } finally {
        if (!ok) Result = rtl.freeLoc(Result);
      };
      return Result;
    };
    this.IsInterfaceRef = function (Expr) {
      var Result = false;
      var Call = null;
      var DotExpr = null;
      Result = false;
      if (Expr === null) return Result;
      if (Expr.$class.ClassType() !== pas.jstree.TJSCallExpression) return Result;
      Call = Expr;
      if (Call.FExpr.$class.ClassType() !== pas.jstree.TJSDotMemberExpression) return Result;
      DotExpr = Call.FExpr;
      Result = ((DotExpr.FName === this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfExprRefsAdd]) && pas.jstree.TJSPrimaryExpressionIdent.isPrototypeOf(DotExpr.FMexpr)) && (DotExpr.FMexpr.FName === this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnIntfExprRefs]);
      return Result;
    };
    this.CreateIntfRef = function (Expr, aContext, PosEl) {
      var Result = null;
      var FuncContext = null;
      var Call = null;
      FuncContext = aContext.GetFunctionContext();
      if (FuncContext === null) this.RaiseNotSupported(PosEl,aContext,20180402183859,"");
      if (this.IsInterfaceRef(Expr)) return Expr;
      FuncContext.IntfExprReleaseCount += 1;
      Call = this.CreateCallExpression(PosEl);
      Call.FExpr = this.CreatePrimitiveDotExpr((this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnIntfExprRefs] + ".") + this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfExprRefsAdd],PosEl);
      Call.AddArg(this.CreateLiteralNumber(PosEl,FuncContext.IntfExprReleaseCount));
      Call.AddArg(Expr);
      Result = Call;
      return Result;
    };
    this.RemoveIntfRef = function (Call, AContext) {
      var Result = null;
      var Lit = null;
      var LitValue = null;
      var FuncContext = null;
      Lit = Call.FArgs.FElements.GetE(1);
      Result = Lit.FExpr;
      Lit.FExpr = null;
      Lit = Call.FArgs.FElements.GetE(0);
      if (pas.jstree.TJSLiteral.isPrototypeOf(Lit.FExpr)) {
        LitValue = Lit.FExpr.FValue;
        FuncContext = AContext.GetFunctionContext();
        if ((FuncContext !== null) && (FuncContext.IntfExprReleaseCount === LitValue.GetAsNumber())) FuncContext.IntfExprReleaseCount -= 1;
      };
      Call = rtl.freeLoc(Call);
      return Result;
    };
    this.CreateFunctionTryFinally = function (FuncContext) {
      if (FuncContext.TrySt !== null) return;
      FuncContext.TrySt = this.CreateElement(pas.jstree.TJSTryFinallyStatement,FuncContext.PasElement);
      FuncContext.TrySt.FBlock = FuncContext.BodySt;
      FuncContext.BodySt = FuncContext.TrySt;
    };
    this.AddFunctionFinallySt = function (NewEl, PosEl, FuncContext) {
      this.CreateFunctionTryFinally(FuncContext);
      this.AddToStatementList({p: FuncContext, get: function () {
          return this.p.FinallyFirst;
        }, set: function (v) {
          this.p.FinallyFirst = v;
        }},{p: FuncContext, get: function () {
          return this.p.FinallyLast;
        }, set: function (v) {
          this.p.FinallyLast = v;
        }},NewEl,PosEl);
      FuncContext.TrySt.FBFinally = FuncContext.FinallyFirst;
    };
    this.AddFunctionFinallyRelease = function (SubEl, FuncContext) {
      var Call = null;
      Call = this.CreateCallExpression(SubEl);
      this.AddFunctionFinallySt(Call,SubEl,FuncContext);
      Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntf_Release]]);
      Call.AddArg(this.CreateReferencePathExpr(SubEl,FuncContext,false,null));
    };
    this.AddInFrontOfFunctionTry = function (NewEl, PosEl, FuncContext) {
      var St = null;
      var OldSt = null;
      this.CreateFunctionTryFinally(FuncContext);
      if (FuncContext.BodySt === FuncContext.TrySt) {
        St = this.CreateElement(pas.jstree.TJSStatementList,PosEl);
        St.FA = NewEl;
        St.FB = FuncContext.TrySt;
        FuncContext.BodySt = St;
      } else if (pas.jstree.TJSStatementList.isPrototypeOf(FuncContext.BodySt)) {
        OldSt = FuncContext.BodySt;
        while (pas.jstree.TJSStatementList.isPrototypeOf(OldSt.FB)) OldSt = OldSt.FB;
        St = this.CreateElement(pas.jstree.TJSStatementList,PosEl);
        St.FA = NewEl;
        St.FB = OldSt.FB;
        OldSt.FB = St;
      } else this.RaiseInconsistency(20180402103144,PosEl);
    };
    this.AddInterfaceReleases = function (FuncContext, PosEl) {
      var i = 0;
      var P = null;
      var Call = null;
      var VarSt = null;
      if (FuncContext.IntfExprReleaseCount > 0) {
        Call = this.CreateCallExpression(PosEl);
        Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfExprRefsCreate]]);
        VarSt = this.CreateVarStatement(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnIntfExprRefs],Call,PosEl);
        this.AddInFrontOfFunctionTry(VarSt,PosEl,FuncContext);
        Call = this.CreateCallExpression(PosEl);
        Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnIntfExprRefs],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfExprRefsFree]]);
        this.AddFunctionFinallySt(Call,PosEl,FuncContext);
      };
      if (FuncContext.IntfElReleases !== null) for (var $l1 = 0, $end2 = FuncContext.IntfElReleases.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        P = rtl.getObject(FuncContext.IntfElReleases.Get(i));
        if (P.$class.ClassType() === pas.PasTree.TPasVariable) {
          this.AddFunctionFinallyRelease(P,FuncContext)}
         else if (P.$class.ClassType() === pas.PasTree.TPasArgument) {
          Call = this.CreateCallExpression(P);
          this.AddInFrontOfFunctionTry(Call,PosEl,FuncContext);
          Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntf_AddRef]]);
          Call.AddArg(this.CreateReferencePathExpr(P,FuncContext,false,null));
          this.AddFunctionFinallyRelease(P,FuncContext);
        } else this.RaiseInconsistency(20180401165742,P);
      };
    };
    this.AddRTLVersionCheck = function (FuncContext, PosEl) {
      var St = null;
      var Call = null;
      var NewSt = null;
      St = FuncContext.BodySt;
      Call = this.CreateCallExpression(PosEl);
      Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnCheckVersion]]);
      Call.AddArg(this.CreateLiteralNumber(PosEl,this.FRTLVersion));
      if (St === null) {
        FuncContext.BodySt = Call}
       else if (pas.jstree.TJSEmptyBlockStatement.isPrototypeOf(St)) {
        St = rtl.freeLoc(St);
        FuncContext.BodySt = Call;
      } else if (pas.jstree.TJSStatementList.isPrototypeOf(St)) {
        NewSt = this.CreateElement(pas.jstree.TJSStatementList,PosEl);
        NewSt.FA = Call;
        NewSt.FB = St;
        FuncContext.BodySt = NewSt;
      } else {
        this.RaiseNotSupported(PosEl,FuncContext,20181002154026,pas.PasResolveEval.GetObjName(St));
      };
    };
    this.ConvertImplBlockElements = function (El, AContext, NilIfEmpty) {
      var Result = null;
      var First = null;
      var Last = null;
      var I = 0;
      var PasImpl = null;
      var JSImpl = null;
      if (!((El.Elements != null) && (El.Elements.FCount > 0))) {
        if (NilIfEmpty) {
          Result = null}
         else Result = this.CreateElement(pas.jstree.TJSEmptyBlockStatement,El);
      } else {
        First = null;
        Result = First;
        Last = First;
        for (var $l1 = 0, $end2 = El.Elements.FCount - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          PasImpl = rtl.getObject(El.Elements.Get(I));
          JSImpl = this.ConvertElement(PasImpl,AContext);
          if (JSImpl === null) continue;
          this.AddToStatementList({get: function () {
              return First;
            }, set: function (v) {
              First = v;
            }},{get: function () {
              return Last;
            }, set: function (v) {
              Last = v;
            }},JSImpl,PasImpl);
          Result = First;
        };
      };
      return Result;
    };
    this.ConvertBeginEndStatement = function (El, AContext, NilIfEmpty) {
      var Result = null;
      Result = this.ConvertImplBlockElements(El,AContext,NilIfEmpty);
      return Result;
    };
    this.ConvertStatement = function (El, AContext) {
      var Result = null;
      Result = null;
      if (pas.PasTree.TPasImplRaise.isPrototypeOf(El)) {
        Result = this.ConvertRaiseStatement(El,AContext)}
       else if (pas.PasTree.TPasImplAssign.isPrototypeOf(El)) {
        Result = this.ConvertAssignStatement(El,AContext)}
       else if (pas.PasTree.TPasImplWhileDo.isPrototypeOf(El)) {
        Result = this.ConvertWhileStatement(El,AContext)}
       else if (pas.PasTree.TPasImplSimple.isPrototypeOf(El)) {
        Result = this.ConvertSimpleStatement(El,AContext)}
       else if (pas.PasTree.TPasImplWithDo.isPrototypeOf(El)) {
        Result = this.ConvertWithStatement(El,AContext)}
       else if (pas.PasTree.TPasImplExceptOn.isPrototypeOf(El)) {
        Result = this.ConvertExceptOn(El,AContext)}
       else if (pas.PasTree.TPasImplForLoop.isPrototypeOf(El)) {
        Result = this.ConvertForStatement(El,AContext)}
       else if (pas.PasTree.TPasImplAsmStatement.isPrototypeOf(El)) {
        Result = this.ConvertAsmStatement(El,AContext)}
       else this.RaiseNotSupported(El,AContext,20161024192759,"");
      return Result;
    };
    this.ConvertAssignStatement = function (El, AContext) {
      var Self = this;
      var Result = null;
      function NotSupported(AssignContext, id) {
        Self.RaiseNotSupported(El,AContext,id,(pas.PasResolver.GetResolverResultDbg(AssignContext.LeftResolved) + pas.PasTree.AssignKindNames[El.Kind]) + pas.PasResolver.GetResolverResultDbg(AssignContext.RightResolved));
      };
      function CreateRangeCheck(AssignSt, MinVal, MaxVal, RTLFunc) {
        var Result = null;
        var Call = null;
        Call = Self.CreateCallExpression(El);
        Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[RTLFunc],El);
        if (AssignSt.$class.ClassType() === pas.jstree.TJSSimpleAssignStatement) {
          Result = AssignSt;
          Call.AddArg(AssignSt.FExpr);
          AssignSt.FExpr = Call;
        } else {
          Call.AddArg(AssignSt);
          Result = Call;
        };
        Call.AddArg(Self.CreateLiteralNumber(El.right,MinVal));
        Call.AddArg(Self.CreateLiteralNumber(El.right,MaxVal));
        return Result;
      };
      function CreateRangeCheckType(AssignSt, aType) {
        var Result = null;
        var Value = null;
        Result = AssignSt;
        Value = AContext.Resolver.EvalTypeRange(aType,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst));
        if (Value === null) Self.RaiseNotSupported(El,AContext,20180424110758,"range checking " + pas.PasResolveEval.GetObjName(aType));
        try {
          var $tmp1 = Value.Kind;
          if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeInt) {
            var $tmp2 = Value.ElKind;
            if (($tmp2 === pas.PasResolveEval.TRESetElKind.revskEnum) || ($tmp2 === pas.PasResolveEval.TRESetElKind.revskInt)) {
              Result = CreateRangeCheck(AssignSt,Value.RangeStart,Value.RangeEnd,$mod.TPas2JSBuiltInName.pbifnRangeCheckInt)}
             else if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskChar) Result = CreateRangeCheck(AssignSt,Value.RangeStart,Value.RangeEnd,$mod.TPas2JSBuiltInName.pbifnRangeCheckChar);
          } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeUInt) {
            Result = CreateRangeCheck(AssignSt,Value.RangeStart,Value.RangeEnd,$mod.TPas2JSBuiltInName.pbifnRangeCheckInt)}
           else {
            Self.RaiseNotSupported(El,AContext,20180424111037,"range checking " + Value.AsDebugString());
          };
        } finally {
          pas.PasResolveEval.ReleaseEvalValue({get: function () {
              return Value;
            }, set: function (v) {
              Value = v;
            }});
        };
        return Result;
      };
      var LHS = null;
      var T = null;
      var AssignContext = null;
      var Flags = {};
      var LeftIsProcType = false;
      var NeedClone = false;
      var Call = null;
      var MinVal = 0;
      var MaxVal = 0;
      var RightTypeEl = null;
      var LeftTypeEl = null;
      var aResolver = null;
      var NewMemE = null;
      var NewME = null;
      var ObjLit = null;
      var GUID = new pas.System.TGuid();
      Result = null;
      LHS = null;
      aResolver = AContext.Resolver;
      AssignContext = $mod.TAssignContext.$create("Create$1",[El,null,AContext]);
      try {
        if (aResolver !== null) {
          aResolver.ComputeElement(El.left,{p: AssignContext, get: function () {
              return this.p.LeftResolved;
            }, set: function (v) {
              this.p.LeftResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
          Flags = {};
          LeftIsProcType = aResolver.IsProcedureType(AssignContext.LeftResolved,true);
          if (LeftIsProcType) {
            if (pas.PScanner.TModeSwitch.msDelphi in AContext.CurrentModeSwitches()) {
              Flags = rtl.includeSet(Flags,pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc)}
             else Flags = rtl.includeSet(Flags,pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProcType);
          };
          aResolver.ComputeElement(El.right,{p: AssignContext, get: function () {
              return this.p.RightResolved;
            }, set: function (v) {
              this.p.RightResolved = v;
            }},rtl.refSet(Flags),null);
          if ((LeftIsProcType && (pas.PScanner.TModeSwitch.msDelphi in AContext.CurrentModeSwitches())) && (AssignContext.RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btProc)) {
            AssignContext.RightSide = Self.CreateCallback(El.right,new pas.PasResolver.TPasResolverResult(AssignContext.RightResolved),AContext);
          } else if (AssignContext.RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btNil) {
            if (aResolver.IsArrayType(AssignContext.LeftResolved)) {
              AssignContext.RightSide = Self.CreateElement(pas.jstree.TJSArrayLiteral,El.right);
            };
          } else if (AssignContext.LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
            LeftTypeEl = AssignContext.LeftResolved.LoTypeEl;
            if ((LeftTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) && (AssignContext.RightResolved.BaseType in pas.PasResolver.btAllStrings)) {
              if (aResolver.GetAssignGUIDString(LeftTypeEl,El.right,{get: function () {
                  return GUID;
                }, set: function (v) {
                  GUID = v;
                }})) {
                NewMemE = Self.CreateNewRecord(El,LeftTypeEl,AContext);
                AssignContext.RightSide = NewMemE;
                ObjLit = Self.CreateGUIDObjLit(LeftTypeEl,GUID,El,AContext);
                NewMemE.AddArg(ObjLit);
              } else Self.RaiseNotSupported(El,AContext,20180415101516,"");
            };
          };
        };
        if (AssignContext.RightSide === null) AssignContext.RightSide = Self.ConvertElement(El.right,AContext);
        if ((AssignContext.RightResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btSet,pas.PasResolver.TResolverBaseType.btArrayOrSet)) && (AssignContext.RightResolved.IdentEl !== null)) {
          AssignContext.RightSide = Self.CreateReferencedSet(El.right,AssignContext.RightSide);
        } else if (AssignContext.LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) {
          if (AssignContext.RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) {}
          else if (AssignContext.RightResolved.BaseType in $mod.btAllJSFloats) {
            AssignContext.RightSide = Self.CreateMulNumber(El,AssignContext.RightSide,10000);
            AssignContext.RightSide = Self.CreateMathFloor(El,AssignContext.RightSide);
          } else if (AssignContext.RightResolved.BaseType in $mod.btAllJSInteger) {
            AssignContext.RightSide = Self.CreateMulNumber(El,AssignContext.RightSide,10000);
          } else Self.RaiseNotSupported(El,AContext,20181016094542,pas.PasResolver.GetResolverResultDbg(AssignContext.RightResolved));
        } else if (AssignContext.RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) {
          AssignContext.RightSide = Self.CreateDivideNumber(El,AssignContext.RightSide,10000);
        } else if (AssignContext.RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          RightTypeEl = AssignContext.RightResolved.LoTypeEl;
          if (RightTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
            if (rtl.length(RightTypeEl.Ranges) > 0) {
              AssignContext.RightSide = Self.CreateCloneStaticArray(El.right,RightTypeEl,AssignContext.RightSide,AContext);
            };
          } else if (RightTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
            if (AssignContext.LeftResolved.BaseType in pas.PasResolver.btAllStrings) {
              if (RightTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
                AssignContext.RightSide = Self.CreateDotExpression(El,AssignContext.RightSide,Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnIntfGUID],El),false);
              };
            } else if (AssignContext.LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
              LeftTypeEl = AssignContext.LeftResolved.LoTypeEl;
              if (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
                if ((RightTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) && pas.SysUtils.SameText(LeftTypeEl.FName,"TGUID")) {
                  NewME = Self.CreateNewRecord(El,LeftTypeEl,AContext);
                  Call = Self.CreateCallExpression(El);
                  NewME.AddArg(Call);
                  Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGetGUIDR],El);
                  Call.AddArg(AssignContext.RightSide);
                  AssignContext.RightSide = NewME;
                } else Self.RaiseNotSupported(El,AContext,20180413194856,"");
              } else if (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
                var $tmp1 = LeftTypeEl.ObjKind;
                if ($tmp1 === pas.PasTree.TPasObjKind.okClass) {
                  var $tmp2 = RightTypeEl.ObjKind;
                  if ($tmp2 === pas.PasTree.TPasObjKind.okClass) {}
                  else {
                    NotSupported(AssignContext,20180327202735);
                  };
                } else if ($tmp1 === pas.PasTree.TPasObjKind.okInterface) {
                  var $tmp3 = RightTypeEl.ObjKind;
                  if ($tmp3 === pas.PasTree.TPasObjKind.okClass) {
                    if (RightTypeEl.IsExternal) Self.RaiseNotSupported(El.right,AContext,20180327210004,"external class instance");
                    if (AssignContext.LeftResolved.LoTypeEl === null) Self.RaiseNotSupported(El.right,AContext,20180327204021,"");
                    Call = Self.CreateCallExpression(El.right);
                    var $tmp4 = LeftTypeEl.InterfaceType;
                    if ($tmp4 === pas.PasTree.TPasClassInterfaceType.citCom) {
                      Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfQueryIntfT]]);
                      Call.AddArg(AssignContext.RightSide);
                      AssignContext.RightSide = Call;
                      Call.AddArg(Self.CreateReferencePathExpr(AssignContext.LeftResolved.LoTypeEl,AContext,false,null));
                      Call = Self.CreateIntfRef(Call,AContext,El);
                      AssignContext.RightSide = Call;
                    } else if ($tmp4 === pas.PasTree.TPasClassInterfaceType.citCorba) {
                      Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGetIntfT]]);
                      Call.AddArg(AssignContext.RightSide);
                      AssignContext.RightSide = Call;
                      Call.AddArg(Self.CreateReferencePathExpr(AssignContext.LeftResolved.LoTypeEl,AContext,false,null));
                    } else {
                      Self.RaiseNotSupported(El,AContext,20180401225931,pas.PasTree.InterfaceTypeNames[RightTypeEl.InterfaceType]);
                    };
                  } else if ($tmp3 === pas.PasTree.TPasObjKind.okInterface) {}
                  else {
                    NotSupported(AssignContext,20180327203326);
                  };
                } else {
                  NotSupported(AssignContext,20180327203334);
                };
              };
            };
          } else if (RightTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
            NeedClone = true;
            if (AssignContext.LeftResolved.BaseType in pas.PasResolver.btAllStrings) {
              if (aResolver.IsTGUID(RightTypeEl)) {
                Call = Self.CreateCallExpression(El);
                Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGuidRToStr],El);
                Call.AddArg(AssignContext.RightSide);
                AssignContext.RightSide = Call;
                NeedClone = false;
              };
            };
            if (NeedClone) {
              AssignContext.RightSide = Self.CreateCloneRecord(El.right,RightTypeEl,AssignContext.RightSide,AContext);
            };
          };
        };
        LHS = Self.ConvertElement(El.left,AssignContext);
        if (AssignContext.Call !== null) {
          if (AssignContext.RightSide !== null) Self.RaiseInconsistency(20170207215544,El.left);
          Result = LHS;
        } else {
          if (AssignContext.RightSide === null) Self.RaiseInconsistency(20180622211919,El);
          LeftTypeEl = AssignContext.LeftResolved.LoTypeEl;
          if (AssignContext.LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
            if ((pas.PasTree.TPasClassType.isPrototypeOf(LeftTypeEl) && (LeftTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && (LeftTypeEl.InterfaceType === pas.PasTree.TPasClassInterfaceType.citCom)) {
              Result = Self.CreateAssignComIntfVar(AssignContext.LeftResolved,{get: function () {
                  return LHS;
                }, set: function (v) {
                  LHS = v;
                }},{p: AssignContext, get: function () {
                  return this.p.RightSide;
                }, set: function (v) {
                  this.p.RightSide = v;
                }},AssignContext,El);
              if (Result !== null) return Result;
            };
          };
          var $tmp5 = El.Kind;
          if ($tmp5 === pas.PasTree.TAssignKind.akDefault) {
            T = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,El)}
           else if ($tmp5 === pas.PasTree.TAssignKind.akAdd) {
            T = Self.CreateElement(pas.jstree.TJSAddEqAssignStatement,El)}
           else if ($tmp5 === pas.PasTree.TAssignKind.akMinus) {
            T = Self.CreateElement(pas.jstree.TJSSubEqAssignStatement,El)}
           else if ($tmp5 === pas.PasTree.TAssignKind.akMul) {
            T = Self.CreateElement(pas.jstree.TJSMulEqAssignStatement,El)}
           else if ($tmp5 === pas.PasTree.TAssignKind.akDivision) {
            T = Self.CreateElement(pas.jstree.TJSDivEqAssignStatement,El)}
           else {
            Self.RaiseNotSupported(El,AContext,20161107221807,"");
          };
          T.FExpr = AssignContext.RightSide;
          AssignContext.RightSide = null;
          T.FLHS = LHS;
          Result = T;
          LHS = null;
          if ((pas.PScanner.TBoolSwitch.bsRangeChecks in AContext.ScannerBoolSwitches) && !pas.jstree.TJSLiteral.isPrototypeOf(T.FExpr)) {
            if (AssignContext.LeftResolved.BaseType in $mod.btAllJSInteger) {
              if (pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(LeftTypeEl)) {
                if (!aResolver.GetIntegerRange(AssignContext.LeftResolved.BaseType,{get: function () {
                    return MinVal;
                  }, set: function (v) {
                    MinVal = v;
                  }},{get: function () {
                    return MaxVal;
                  }, set: function (v) {
                    MaxVal = v;
                  }})) Self.RaiseNotSupported(El.left,AContext,20180119154120,"");
                Result = CreateRangeCheck(Result,MinVal,MaxVal,$mod.TPas2JSBuiltInName.pbifnRangeCheckInt);
              } else if (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasRangeType) Result = CreateRangeCheckType(Result,LeftTypeEl);
            } else if (AssignContext.LeftResolved.BaseType in $mod.btAllJSChars) {
              Result = CreateRangeCheckType(Result,LeftTypeEl)}
             else if (AssignContext.LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
              if (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) Result = CreateRangeCheckType(Result,LeftTypeEl);
            } else if (AssignContext.LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btRange) {
              if (AssignContext.LeftResolved.SubType in $mod.btAllJSChars) {
                Result = CreateRangeCheckType(Result,LeftTypeEl)}
               else if (AssignContext.LeftResolved.SubType === pas.PasResolver.TResolverBaseType.btContext) Result = CreateRangeCheckType(Result,LeftTypeEl);
            };
          };
        };
      } finally {
        if (Result === null) LHS = rtl.freeLoc(LHS);
        rtl.free(AssignContext,"RightSide");
        AssignContext = rtl.freeLoc(AssignContext);
      };
      return Result;
    };
    this.ConvertRaiseStatement = function (El, AContext) {
      var Result = null;
      var E = null;
      var T = null;
      if (El.ExceptObject !== null) {
        E = this.ConvertElement(El.ExceptObject,AContext)}
       else E = this.CreatePrimitiveDotExpr(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnExceptObject],El);
      T = this.CreateElement(pas.jstree.TJSThrowStatement,El);
      T.FA = E;
      Result = T;
      return Result;
    };
    this.ConvertIfStatement = function (El, AContext) {
      var Result = null;
      var C = null;
      var BThen = null;
      var BElse = null;
      var T = null;
      Result = null;
      if (AContext === null) ;
      C = null;
      BThen = null;
      BElse = null;
      try {
        C = this.ConvertElement(El.ConditionExpr,AContext);
        if (El.IfBranch != null) BThen = this.ConvertElement(El.IfBranch,AContext);
        if (El.ElseBranch != null) BElse = this.ConvertElement(El.ElseBranch,AContext);
        T = this.CreateElement(pas.jstree.TJSIfStatement,El);
        T.FCond = C;
        T.FBTrue = BThen;
        T.FBFalse = BElse;
        Result = T;
      } finally {
        if (Result === null) {
          pas.SysUtils.FreeAndNil({get: function () {
              return C;
            }, set: function (v) {
              C = v;
            }});
          pas.SysUtils.FreeAndNil({get: function () {
              return BThen;
            }, set: function (v) {
              BThen = v;
            }});
          pas.SysUtils.FreeAndNil({get: function () {
              return BElse;
            }, set: function (v) {
              BElse = v;
            }});
        };
      };
      return Result;
    };
    this.ConvertWhileStatement = function (El, AContext) {
      var Result = null;
      var C = null;
      var B = null;
      var W = null;
      var ok = false;
      Result = null;
      C = null;
      B = null;
      ok = false;
      try {
        C = this.ConvertElement(El.ConditionExpr,AContext);
        if (El.Body != null) {
          B = this.ConvertElement(El.Body,AContext)}
         else B = this.CreateElement(pas.jstree.TJSEmptyBlockStatement,El);
        ok = true;
      } finally {
        if (!ok) {
          pas.SysUtils.FreeAndNil({get: function () {
              return B;
            }, set: function (v) {
              B = v;
            }});
          pas.SysUtils.FreeAndNil({get: function () {
              return C;
            }, set: function (v) {
              C = v;
            }});
        };
      };
      W = this.CreateElement(pas.jstree.TJSWhileStatement,El);
      W.FCond = C;
      W.FBody = B;
      Result = W;
      return Result;
    };
    this.ConvertRepeatStatement = function (El, AContext) {
      var Result = null;
      var C = null;
      var N = null;
      var W = null;
      var B = null;
      Result = null;
      C = null;
      B = null;
      try {
        C = this.ConvertElement(El.ConditionExpr,AContext);
        if (pas.jstree.TJSUnaryNotExpression.isPrototypeOf(C)) {
          B = C;
          C = B.FA;
          B.FA = null;
          B = rtl.freeLoc(B);
          B = null;
        } else {
          N = this.CreateElement(pas.jstree.TJSUnaryNotExpression,El.ConditionExpr);
          N.FA = C;
          C = N;
        };
        B = this.ConvertImplBlockElements(El,AContext,false);
        W = this.CreateElement(pas.jstree.TJSDoWhileStatement,El);
        W.FCond = C;
        W.FBody = B;
        Result = W;
      } finally {
        if (Result === null) {
          pas.SysUtils.FreeAndNil({get: function () {
              return B;
            }, set: function (v) {
              B = v;
            }});
          pas.SysUtils.FreeAndNil({get: function () {
              return C;
            }, set: function (v) {
              C = v;
            }});
        };
      };
      return Result;
    };
    this.ConvertForStatement = function (El, AContext) {
      var Self = this;
      var Result = null;
      var TInKind = {"0": "ikNone", ikNone: 0, "1": "ikEnum", ikEnum: 1, "2": "ikBool", ikBool: 2, "3": "ikChar", ikChar: 3, "4": "ikString", ikString: 4, "5": "ikArray", ikArray: 5, "6": "ikSetInt", ikSetInt: 6, "7": "ikSetBool", ikSetBool: 7, "8": "ikSetChar", ikSetChar: 8, "9": "ikSetString", ikSetString: 9};
      var aResolver = null;
      function ConvExpr(Expr) {
        var Result = null;
        var ResolvedEl = new pas.PasResolver.TPasResolverResult();
        Result = Self.ConvertElement(Expr,AContext);
        if (pas.jstree.TJSLiteral.isPrototypeOf(Result)) {
          var $tmp1 = Result.FValue.FValueType;
          if ($tmp1 === pas.jsbase.TJSType.jstBoolean) {
            Result.FValue.SetAsNumber(Result.FValue.GetAsBoolean() + 0)}
           else if ($tmp1 === pas.jsbase.TJSType.jstNumber) {
            return Result}
           else if ($tmp1 === pas.jsbase.TJSType.jstString) {
            Self.ConvertCharLiteralToInt(Result,Expr,AContext);
            return Result;
          } else {
            Result = rtl.freeLoc(Result);
            Self.RaiseNotSupported(Expr,AContext,20171112021222,"");
          };
        } else if (aResolver !== null) {
          aResolver.ComputeElement(Expr,{get: function () {
              return ResolvedEl;
            }, set: function (v) {
              ResolvedEl = v;
            }},{},null);
          if ((ResolvedEl.BaseType in pas.PasResolver.btAllChars) || ((ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btRange) && (ResolvedEl.SubType in pas.PasResolver.btAllChars))) {
            Result = Self.CreateCallCharCodeAt(Result,0,Expr);
          } else if ((ResolvedEl.BaseType in $mod.btAllJSBooleans) || ((ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btRange) && (ResolvedEl.SubType in $mod.btAllJSBooleans))) {
            Result = Self.CreateUnaryPlus(Result,Expr);
          };
        };
        return Result;
      };
      function GetOrd(Value, ErrorEl) {
        var Result = 0;
        var OrdValue = null;
        if (Value === null) return 0;
        OrdValue = aResolver.fExprEvaluator.OrdValue(Value,ErrorEl);
        var $tmp1 = OrdValue.Kind;
        if ($tmp1 === pas.PasResolveEval.TREVKind.revkInt) {
          Result = OrdValue.Int}
         else {
          Self.RaiseNotSupported(ErrorEl,AContext,20171112133917,"");
        };
        if (Value !== OrdValue) pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return OrdValue;
          }, set: function (v) {
            OrdValue = v;
          }});
        return Result;
      };
      function GetEnumValue(EnumType, Int) {
        var Result = null;
        if ((($mod.TPasToJsConverterOption.coEnumNumbers in Self.FOptions) || (Int < 0)) || (Int >= EnumType.Values.FCount)) {
          Result = pas.PasResolveEval.TResEvalInt.$create("CreateValue",[Int])}
         else Result = pas.PasResolveEval.TResEvalEnum.$create("CreateValue",[Int,rtl.as(rtl.getObject(EnumType.Values.Get(Int)),pas.PasTree.TPasEnumValue)]);
        return Result;
      };
      var FuncContext = null;
      var VarResolved = new pas.PasResolver.TPasResolverResult();
      var InResolved = new pas.PasResolver.TPasResolverResult();
      var StartValue = null;
      var EndValue = null;
      var InValue = null;
      var StartInt = 0;
      var EndInt = 0;
      var HasLoopVar = false;
      var HasEndVar = false;
      var HasInVar = false;
      var InKind = 0;
      var ForScope = null;
      function InitWithResolver() {
        var Result$1 = false;
        var EnumType = null;
        var TypeEl = null;
        var ArgResolved = new pas.PasResolver.TPasResolverResult();
        var LengthResolved = new pas.PasResolver.TPasResolverResult();
        var PropResultResolved = new pas.PasResolver.TPasResolverResult();
        Result$1 = true;
        aResolver.ComputeElement(El.VariableName,{get: function () {
            return VarResolved;
          }, set: function (v) {
            VarResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        if (!pas.PasTree.TPasVariable.isPrototypeOf(VarResolved.IdentEl) && !pas.PasTree.TPasResultElement.isPrototypeOf(VarResolved.IdentEl)) Self.DoError$2(20170213214404,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["var",aResolver.GetResolverResultDescription(VarResolved,false)],El.VariableName);
        var $tmp1 = El.LoopType;
        if (($tmp1 === pas.PasTree.TLoopType.ltNormal) || ($tmp1 === pas.PasTree.TLoopType.ltDown)) {
          StartValue = aResolver.Eval(El.StartExpr,{},false);
          StartInt = GetOrd(StartValue,El.StartExpr);
          EndValue = aResolver.Eval(El.EndExpr,{},false);
          EndInt = GetOrd(EndValue,El.EndExpr);
        } else if ($tmp1 === pas.PasTree.TLoopType.ltIn) {
          if (ForScope.GetEnumerator !== null) {
            Result = Self.CreateGetEnumeratorLoop(El,AContext);
            return false;
          };
          aResolver.ComputeElement(El.StartExpr,{get: function () {
              return InResolved;
            }, set: function (v) {
              InResolved = v;
            }},{},null);
          HasInVar = true;
          InValue = aResolver.Eval(El.StartExpr,{},false);
          if (InValue === null) {
            if (pas.PasTree.TPasType.isPrototypeOf(InResolved.IdentEl)) {
              TypeEl = aResolver.ResolveAliasType(InResolved.IdentEl);
              if (pas.PasTree.TPasArrayType.isPrototypeOf(TypeEl)) {
                if (rtl.length(TypeEl.Ranges) === 1) InValue = aResolver.Eval(TypeEl.Ranges[0],rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
              } else if (pas.PasTree.TPasSetType.isPrototypeOf(TypeEl)) InValue = aResolver.EvalTypeRange(TypeEl.EnumType,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst));
            };
          };
          if (InValue !== null) {
            var $tmp2 = InValue.Kind;
            if ($tmp2 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
              InKind = TInKind.ikString;
              StartInt = 0;
              EndInt = InValue.S.length - 1;
              pas.PasResolveEval.ReleaseEvalValue({get: function () {
                  return InValue;
                }, set: function (v) {
                  InValue = v;
                }});
            } else if (($tmp2 === pas.PasResolveEval.TREVKind.revkRangeInt) || ($tmp2 === pas.PasResolveEval.TREVKind.revkSetOfInt)) {
              if (InValue.Kind === pas.PasResolveEval.TREVKind.revkSetOfInt) {
                if (rtl.length(InValue.Ranges) === 0) return false;
                if (rtl.length(InValue.Ranges) > 1) {
                  var $tmp3 = InValue.ElKind;
                  if (($tmp3 === pas.PasResolveEval.TRESetElKind.revskEnum) || ($tmp3 === pas.PasResolveEval.TRESetElKind.revskInt)) {
                    InKind = TInKind.ikSetInt}
                   else if ($tmp3 === pas.PasResolveEval.TRESetElKind.revskChar) {
                    InKind = TInKind.ikSetChar}
                   else if ($tmp3 === pas.PasResolveEval.TRESetElKind.revskBool) InKind = TInKind.ikSetBool;
                  HasInVar = false;
                  HasLoopVar = InKind !== TInKind.ikSetInt;
                  HasEndVar = false;
                  return Result$1;
                };
              };
              StartInt = InValue.RangeStart;
              EndInt = InValue.RangeEnd;
              HasInVar = false;
              HasEndVar = false;
              var $tmp4 = InValue.ElKind;
              if ($tmp4 === pas.PasResolveEval.TRESetElKind.revskEnum) {
                if ($mod.TPasToJsConverterOption.coEnumNumbers in Self.FOptions) {
                  InKind = TInKind.ikNone}
                 else {
                  InKind = TInKind.ikEnum;
                  EnumType = InValue.ElType;
                  StartValue = GetEnumValue(EnumType,StartInt);
                  EndValue = GetEnumValue(EnumType,EndInt);
                }}
               else if ($tmp4 === pas.PasResolveEval.TRESetElKind.revskInt) {
                InKind = TInKind.ikNone}
               else if ($tmp4 === pas.PasResolveEval.TRESetElKind.revskChar) {
                InKind = TInKind.ikChar}
               else if ($tmp4 === pas.PasResolveEval.TRESetElKind.revskBool) {
                InKind = TInKind.ikBool}
               else {
                Self.RaiseNotSupported(El.StartExpr,AContext,20171113023419,"");
              };
            } else {
              Self.RaiseNotSupported(El.StartExpr,AContext,20171112161527,"");
            };
          } else if (pas.PasResolver.TPasResolverResultFlag.rrfReadable in InResolved.Flags) {
            if (InResolved.BaseType in pas.PasResolver.btAllStrings) {
              InKind = TInKind.ikString;
              StartInt = 0;
            } else if (InResolved.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
              if (aResolver.IsJSBaseType$1(InResolved,$mod.TPas2jsBaseType.pbtJSValue,false)) {
                InKind = TInKind.ikSetString;
                HasInVar = false;
                HasLoopVar = false;
                HasEndVar = false;
                return Result$1;
              };
            } else if (InResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
              TypeEl = InResolved.LoTypeEl;
              if (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
                if (rtl.length(TypeEl.Ranges) <= 1) {
                  InKind = TInKind.ikArray;
                  StartInt = 0;
                } else {
                  Self.RaiseNotSupported(El.StartExpr,AContext,20171220010147,"");
                };
              } else if ((TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && TypeEl.IsExternal) {
                if (aResolver.IsForInExtArray(El,VarResolved,InResolved,{get: function () {
                    return ArgResolved;
                  }, set: function (v) {
                    ArgResolved = v;
                  }},{get: function () {
                    return LengthResolved;
                  }, set: function (v) {
                    LengthResolved = v;
                  }},{get: function () {
                    return PropResultResolved;
                  }, set: function (v) {
                    PropResultResolved = v;
                  }})) {
                  InKind = TInKind.ikArray;
                  StartInt = 0;
                } else {
                  InKind = TInKind.ikSetString;
                  HasInVar = false;
                  HasLoopVar = false;
                  HasEndVar = false;
                  return Result$1;
                };
              } else {
                Self.RaiseNotSupported(El.StartExpr,AContext,20171113012226,"");
              };
            } else if (InResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btSet,pas.PasResolver.TResolverBaseType.btArrayOrSet)) {
              if (InResolved.SubType in $mod.btAllJSBooleans) {
                InKind = TInKind.ikSetBool}
               else if (InResolved.SubType in pas.PasResolver.btAllChars) {
                InKind = TInKind.ikSetChar}
               else InKind = TInKind.ikSetInt;
              HasInVar = false;
              HasLoopVar = true;
              HasEndVar = false;
              return Result$1;
            } else {
              Self.RaiseNotSupported(El.StartExpr,AContext,20171220221747,"");
            };
          } else {
            Self.RaiseNotSupported(El.StartExpr,AContext,20171112195629,"");
          };
        };
        if (EndValue !== null) {
          HasEndVar = false;
          if (StartValue !== null) {
            if (StartInt <= EndInt) {
              if (StartValue.Kind in rtl.createSet(pas.PasResolveEval.TREVKind.revkInt,pas.PasResolveEval.TREVKind.revkUInt,pas.PasResolveEval.TREVKind.revkEnum)) HasLoopVar = false;
            } else {
              if ($mod.TPasToJsConverterOption.coEliminateDeadCode in Self.FOptions) return Result$1;
            };
          };
        };
        return Result$1;
      };
      function CreateStrictNotEqual0(Left, PosEl) {
        var Result = null;
        var SNE = null;
        SNE = Self.CreateElement(pas.jstree.TJSEqualityExpressionSNE,PosEl);
        SNE.FA = Left;
        SNE.FB = Self.CreateLiteralNumber(PosEl,0);
        Result = SNE;
        return Result;
      };
      var ForSt = null;
      var List = null;
      var SimpleAss = null;
      var Incr = null;
      var BinExp = null;
      var VarStat = null;
      var CurLoopVarName = "";
      var CurEndVarName = "";
      var CurInVarName = "";
      var PosEl = null;
      var Statements = null;
      var V = null;
      var Call = null;
      var Br = null;
      Result = null;
      if (AContext.Access !== $mod.TCtxAccess.caRead) Self.RaiseInconsistency(20170213213740,El);
      aResolver = AContext.Resolver;
      ForScope = rtl.as(El.FData,pas.PasResolver.TPasForLoopScope);
      var $tmp1 = El.LoopType;
      if (($tmp1 === pas.PasTree.TLoopType.ltNormal) || ($tmp1 === pas.PasTree.TLoopType.ltDown)) {}
      else if ($tmp1 === pas.PasTree.TLoopType.ltIn) {
        if (aResolver === null) Self.RaiseNotSupported(El,AContext,20171112160707,"")}
       else {
        Self.RaiseNotSupported(El,AContext,20171110141937,"");
      };
      FuncContext = AContext;
      while ((FuncContext.Parent !== null) && !$mod.TFunctionContext.isPrototypeOf(FuncContext)) FuncContext = FuncContext.Parent;
      StartValue = null;
      StartInt = 0;
      EndValue = null;
      EndInt = 0;
      InValue = null;
      InKind = TInKind.ikNone;
      Statements = null;
      try {
        HasLoopVar = true;
        HasEndVar = true;
        HasInVar = false;
        if ((aResolver !== null) && !InitWithResolver()) return Result;
        if (HasInVar) {
          CurInVarName = FuncContext.CreateLocalIdentifier(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnLoopIn])}
         else CurInVarName = "";
        if (HasLoopVar) {
          CurLoopVarName = FuncContext.CreateLocalIdentifier(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnLoop])}
         else CurLoopVarName = "";
        if (HasEndVar) {
          CurEndVarName = FuncContext.CreateLocalIdentifier(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnLoopEnd])}
         else CurEndVarName = "";
        if (InKind in rtl.createSet(TInKind.ikSetInt,TInKind.ikSetBool,TInKind.ikSetChar,TInKind.ikSetString)) {
          ForSt = Self.CreateElement(pas.jstree.TJSForInStatement,El)}
         else ForSt = Self.CreateElement(pas.jstree.TJSForStatement,El);
        Statements = ForSt;
        PosEl = El;
        if (!HasLoopVar && (HasEndVar || HasInVar)) {
          List = Self.CreateElement(pas.jstree.TJSStatementList,El);
          SimpleAss = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,El.VariableName);
          List.FA = SimpleAss;
          List.FB = Statements;
          Statements = List;
          SimpleAss.FLHS = Self.ConvertElement(El.VariableName,AContext);
          if (StartValue !== null) {
            SimpleAss.FExpr = Self.CreateLiteralNumber(El.StartExpr,StartInt)}
           else SimpleAss.FExpr = Self.ConvertElement(El.StartExpr,AContext);
          PosEl = El.StartExpr;
        };
        if (ForSt.$class.ClassType() === pas.jstree.TJSForInStatement) {
          if (HasLoopVar) {
            VarStat = Self.CreateElement(pas.jstree.TJSVariableStatement,PosEl);
            VarStat.FA = Self.CreatePrimitiveDotExpr(CurLoopVarName,PosEl);
            ForSt.FLhs = VarStat;
          } else ForSt.FLhs = Self.ConvertElement(El.VariableName,AContext);
          ForSt.FList = Self.ConvertElement(El.StartExpr,AContext);
        } else if ((HasLoopVar || HasEndVar) || HasInVar) {
          VarStat = Self.CreateElement(pas.jstree.TJSVariableStatement,El);
          ForSt.FInit = VarStat;
          if (HasInVar) {
            PosEl = El.StartExpr;
            if ((InValue !== null) && (InValue.Kind !== pas.PasResolveEval.TREVKind.revkSetOfInt)) {
              V = Self.ConvertConstValue(InValue,AContext,PosEl)}
             else V = Self.ConvertElement(El.StartExpr,AContext);
            V = Self.CreateVarDecl$1(CurInVarName,V,PosEl);
            Self.AddToVarStatement(VarStat,V,PosEl);
          };
          if (HasLoopVar) {
            PosEl = El.StartExpr;
            if (StartValue !== null) {
              V = Self.CreateLiteralNumber(PosEl,StartInt)}
             else if (El.LoopType === pas.PasTree.TLoopType.ltIn) {
              V = Self.CreateLiteralNumber(PosEl,StartInt)}
             else V = ConvExpr(El.StartExpr);
            V = Self.CreateVarDecl$1(CurLoopVarName,V,PosEl);
            Self.AddToVarStatement(VarStat,V,PosEl);
          };
          if (HasEndVar) {
            PosEl = El.EndExpr;
            if (PosEl === null) PosEl = El.StartExpr;
            if (EndValue !== null) {
              V = Self.CreateLiteralNumber(PosEl,EndInt)}
             else if (El.LoopType === pas.PasTree.TLoopType.ltIn) {
              var $tmp2 = InKind;
              if ((($tmp2 === TInKind.ikEnum) || ($tmp2 === TInKind.ikBool)) || ($tmp2 === TInKind.ikChar)) {
                V = Self.CreateLiteralNumber(PosEl,EndInt)}
               else if ($tmp2 === TInKind.ikString) {
                V = Self.CreateElement(pas.jstree.TJSAdditiveExpressionMinus,PosEl);
                V.FA = Self.CreatePrimitiveDotExpr(CurInVarName + ".length",PosEl);
                V.FB = Self.CreateLiteralNumber(PosEl,1);
              } else if ($tmp2 === TInKind.ikArray) {
                Call = Self.CreateCallExpression(PosEl);
                Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Length],PosEl);
                Call.AddArg(Self.CreatePrimitiveDotExpr(CurInVarName,PosEl));
                V = Self.CreateElement(pas.jstree.TJSAdditiveExpressionMinus,PosEl);
                V.FA = Call;
                V.FB = Self.CreateLiteralNumber(PosEl,1);
              } else {
                Self.RaiseNotSupported(El.StartExpr,AContext,20171113015445,"");
              };
            } else V = ConvExpr(El.EndExpr);
            V = Self.CreateVarDecl$1(CurEndVarName,V,PosEl);
            Self.AddToVarStatement(VarStat,V,PosEl);
          };
        } else {
          SimpleAss = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,El.VariableName);
          ForSt.FInit = SimpleAss;
          SimpleAss.FLHS = Self.ConvertElement(El.VariableName,AContext);
          if (StartValue !== null) {
            SimpleAss.FExpr = Self.CreateLiteralNumber(El.StartExpr,StartInt)}
           else SimpleAss.FExpr = Self.ConvertElement(El.StartExpr,AContext);
          PosEl = El.StartExpr;
        };
        if (ForSt.$class.ClassType() === pas.jstree.TJSForStatement) {
          if (El.EndExpr !== null) PosEl = El.EndExpr;
          if (El.Down()) {
            BinExp = Self.CreateElement(pas.jstree.TJSRelationalExpressionGE,PosEl)}
           else BinExp = Self.CreateElement(pas.jstree.TJSRelationalExpressionLE,PosEl);
          ForSt.FCond = BinExp;
          if (HasLoopVar) {
            BinExp.FA = Self.CreatePrimitiveDotExpr(CurLoopVarName,PosEl)}
           else BinExp.FA = Self.ConvertElement(El.VariableName,AContext);
          if (HasEndVar) {
            BinExp.FB = Self.CreatePrimitiveDotExpr(CurEndVarName,PosEl)}
           else BinExp.FB = Self.CreateLiteralNumber(PosEl,EndInt);
          if (El.Down()) {
            Incr = Self.CreateElement(pas.jstree.TJSUnaryPostMinusMinusExpression,PosEl)}
           else Incr = Self.CreateElement(pas.jstree.TJSUnaryPostPlusPlusExpression,PosEl);
          ForSt.FIncr = Incr;
          if (HasLoopVar) {
            Incr.FA = Self.CreatePrimitiveDotExpr(CurLoopVarName,PosEl)}
           else Incr.FA = Self.ConvertElement(El.VariableName,AContext);
        };
        if (HasLoopVar) {
          PosEl = El.Body;
          if (PosEl === null) PosEl = El;
          PosEl = El.VariableName;
          SimpleAss = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,PosEl);
          ForSt.FBody = SimpleAss;
          SimpleAss.FLHS = Self.ConvertElement(El.VariableName,AContext);
          SimpleAss.FExpr = Self.CreatePrimitiveDotExpr(CurLoopVarName,PosEl);
          if (aResolver !== null) {
            if (InKind !== TInKind.ikNone) {
              var $tmp3 = InKind;
              if (($tmp3 === TInKind.ikEnum) || ($tmp3 === TInKind.ikSetInt)) {
                if (ForSt.$class.ClassType() === pas.jstree.TJSForInStatement) SimpleAss.FExpr = Self.CreateUnaryPlus(SimpleAss.FExpr,PosEl)}
               else if (($tmp3 === TInKind.ikBool) || ($tmp3 === TInKind.ikSetBool)) {
                SimpleAss.FExpr = CreateStrictNotEqual0(SimpleAss.FExpr,PosEl)}
               else if (($tmp3 === TInKind.ikChar) || ($tmp3 === TInKind.ikSetChar)) {
                SimpleAss.FExpr = Self.CreateCallFromCharCode(SimpleAss.FExpr,PosEl)}
               else if ($tmp3 === TInKind.ikString) {
                Call = Self.CreateCallExpression(PosEl);
                Call.FExpr = Self.CreateDotExpression(PosEl,Self.CreatePrimitiveDotExpr(CurInVarName,El.StartExpr),Self.CreatePrimitiveDotExpr("charAt",PosEl),false);
                Call.AddArg(SimpleAss.FExpr);
                SimpleAss.FExpr = Call;
              } else if ($tmp3 === TInKind.ikArray) {
                Br = Self.CreateElement(pas.jstree.TJSBracketMemberExpression,PosEl);
                Br.FMexpr = Self.CreatePrimitiveDotExpr(CurInVarName,El.StartExpr);
                Br.FName = SimpleAss.FExpr;
                SimpleAss.FExpr = Br;
              } else {
                Self.RaiseNotSupported(El.StartExpr,AContext,20171113002550,"");
              };
            } else if ((VarResolved.BaseType in pas.PasResolver.btAllChars) || ((VarResolved.BaseType === pas.PasResolver.TResolverBaseType.btRange) && (VarResolved.SubType in pas.PasResolver.btAllChars))) {
              SimpleAss.FExpr = Self.CreateCallFromCharCode(SimpleAss.FExpr,PosEl);
            } else if ((VarResolved.BaseType in $mod.btAllJSBooleans) || ((VarResolved.BaseType === pas.PasResolver.TResolverBaseType.btRange) && (VarResolved.SubType in $mod.btAllJSBooleans))) {
              SimpleAss.FExpr = CreateStrictNotEqual0(SimpleAss.FExpr,PosEl);
            };
          };
        };
        if (El.Body !== null) {
          V = Self.ConvertElement(El.Body,AContext);
          if (ForSt.FBody === null) {
            ForSt.FBody = V}
           else {
            List = Self.CreateElement(pas.jstree.TJSStatementList,El.Body);
            List.FA = ForSt.FBody;
            List.FB = V;
            ForSt.FBody = List;
          };
        };
        Result = Statements;
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return StartValue;
          }, set: function (v) {
            StartValue = v;
          }});
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return EndValue;
          }, set: function (v) {
            EndValue = v;
          }});
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return InValue;
          }, set: function (v) {
            InValue = v;
          }});
        if (Result === null) Statements = rtl.freeLoc(Statements);
      };
      return Result;
    };
    this.ConvertFinalizationSection = function (El, AContext) {
      var Result = null;
      Result = null;
      this.RaiseNotSupported(El,AContext,20161024192519,"");
      return Result;
    };
    this.ConvertInitializationSection = function (El, AContext) {
      var Result = null;
      var FDS = null;
      var FunName = "";
      var IsMain = false;
      var NeedRTLCheckVersion = false;
      var AssignSt = null;
      var FuncContext = null;
      var Body = null;
      var Scope = null;
      var Line = 0;
      var Col = 0;
      var Lit = null;
      Result = null;
      Scope = El.FData;
      if (Scope.JS !== "") {
        pas.PasResolver.TPasResolver.UnmangleSourceLineNumber(El.FParent.SourceLinenumber,{get: function () {
            return Line;
          }, set: function (v) {
            Line = v;
          }},{get: function () {
            return Col;
          }, set: function (v) {
            Col = v;
          }});
        Lit = pas.jstree.TJSLiteral.$create("Create$1",[Line,Col,El.FParent.SourceFilename]);
        Lit.FValue.FCustomValue = pas.jsbase.StrToJSString(Scope.JS);
        Result = Lit;
        return Result;
      };
      IsMain = (El.FParent !== null) && pas.PasTree.TPasProgram.isPrototypeOf(El.FParent);
      if (IsMain) {
        FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnProgramMain]}
       else FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnUnitInit];
      NeedRTLCheckVersion = IsMain && ($mod.TPasToJsConverterOption.coRTLVersionCheckMain in this.FOptions);
      FuncContext = null;
      AssignSt = this.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
      try {
        AssignSt.FLHS = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnModule],FunName]);
        FDS = this.CreateFunctionSt(El,(El.Elements.FCount > 0) || NeedRTLCheckVersion,false);
        AssignSt.FExpr = FDS;
        if (El.Elements.FCount > 0) {
          Body = FDS.FFuncDef.FBody;
          FuncContext = $mod.TFunctionContext.$create("Create$1",[El,Body,AContext]);
          Body.FA = this.ConvertImplBlockElements(El,FuncContext,false);
          FuncContext.BodySt = Body.FA;
          this.AddInterfaceReleases(FuncContext,El);
          Body.FA = FuncContext.BodySt;
        };
        if (NeedRTLCheckVersion) {
          Body = FDS.FFuncDef.FBody;
          if (FuncContext === null) FuncContext = $mod.TFunctionContext.$create("Create$1",[El,Body,AContext]);
          this.AddRTLVersionCheck(FuncContext,El);
          Body.FA = FuncContext.BodySt;
        };
        Result = AssignSt;
      } finally {
        FuncContext = rtl.freeLoc(FuncContext);
        if (Result === null) AssignSt = rtl.freeLoc(AssignSt);
      };
      if (($mod.TPasToJsConverterOption.coStoreImplJS in this.FOptions) && (AContext.Resolver !== null)) Scope.JS = this.CreatePrecompiledJS(Result);
      return Result;
    };
    this.ConvertSimpleStatement = function (El, AContext) {
      var Result = null;
      var E = null;
      var C = null;
      E = this.ConvertElement(El.Expr,AContext);
      if (E === null) return null;
      C = E.$class.ClassType();
      if ((C === pas.jstree.TJSExpressionStatement) || (C === pas.jstree.TJSStatementList)) {
        Result = E}
       else {
        Result = this.CreateElement(pas.jstree.TJSExpressionStatement,El);
        Result.FA = E;
      };
      return Result;
    };
    this.ConvertWithStatement = function (El, AContext) {
      var Result = null;
      var B = null;
      var E = null;
      var Expr = null;
      var W = null;
      var W2 = null;
      var I = 0;
      var ok = false;
      var PasExpr = null;
      var V = null;
      var FuncContext = null;
      var FirstSt = null;
      var LastSt = null;
      var WithScope = null;
      var WithExprScope = null;
      Result = null;
      if (AContext.Resolver !== null) {
        FuncContext = AContext.GetContextOfType($mod.TFunctionContext);
        if (FuncContext === null) this.RaiseInconsistency(20170212003759,El);
        FirstSt = null;
        LastSt = null;
        try {
          WithScope = rtl.as(El.FData,pas.PasResolver.TPasWithScope);
          for (var $l1 = 0, $end2 = El.Expressions.FCount - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            PasExpr = rtl.getObject(El.Expressions.Get(I));
            Expr = this.ConvertElement(PasExpr,AContext);
            WithExprScope = rtl.as(WithScope.ExpressionScopes.GetItem(I),$mod.TPas2JSWithExprScope);
            if (pas.jstree.TJSPrimaryExpressionIdent.isPrototypeOf(Expr) && pas.jsbase.IsValidJSIdentifier(Expr.FName,false)) {
              WithExprScope.WithVarName = Expr.FName;
              Expr = rtl.freeLoc(Expr);
            } else if (pas.jstree.TJSPrimaryExpressionThis.isPrototypeOf(Expr)) {
              WithExprScope.WithVarName = "this";
              Expr = rtl.freeLoc(Expr);
            } else {
              WithExprScope.WithVarName = FuncContext.CreateLocalIdentifier(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnWith]);
              V = this.CreateVarStatement(WithExprScope.WithVarName,Expr,PasExpr);
              this.AddToStatementList({get: function () {
                  return FirstSt;
                }, set: function (v) {
                  FirstSt = v;
                }},{get: function () {
                  return LastSt;
                }, set: function (v) {
                  LastSt = v;
                }},V,PasExpr);
            };
          };
          if (El.Body != null) {
            B = this.ConvertElement(El.Body,AContext);
            this.AddToStatementList({get: function () {
                return FirstSt;
              }, set: function (v) {
                FirstSt = v;
              }},{get: function () {
                return LastSt;
              }, set: function (v) {
                LastSt = v;
              }},B,El.Body);
          };
          Result = FirstSt;
        } finally {
          if (Result === null) pas.SysUtils.FreeAndNil({get: function () {
              return FirstSt;
            }, set: function (v) {
              FirstSt = v;
            }});
        };
      } else {
        W = null;
        if (El.Body != null) {
          B = this.ConvertElement(El.Body,AContext)}
         else B = this.CreateElement(pas.jstree.TJSEmptyBlockStatement,El);
        ok = false;
        try {
          for (var $l3 = 0, $end4 = El.Expressions.FCount - 1; $l3 <= $end4; $l3++) {
            I = $l3;
            E = this.ConvertElement(rtl.getObject(El.Expressions.Get(I)),AContext);
            W2 = this.CreateElement(pas.jstree.TJSWithStatement,rtl.getObject(El.Expressions.Get(I)));
            if (!(Result != null)) Result = W2;
            if (W != null) W.FB = W2;
            W = W2;
            W.FA = E;
          };
          ok = true;
        } finally {
          if (!ok) {
            pas.SysUtils.FreeAndNil({get: function () {
                return E;
              }, set: function (v) {
                E = v;
              }});
            pas.SysUtils.FreeAndNil({get: function () {
                return Result;
              }, set: function (v) {
                Result = v;
              }});
          };
        };
        W.FB = B;
      };
      return Result;
    };
    this.ConvertTryStatement = function (El, AContext) {
      var Result = null;
      var T = null;
      var ExceptBlock = null;
      var i = 0;
      var ExceptOn = null;
      var IfSt = null;
      var Last = null;
      Result = null;
      T = null;
      try {
        if (pas.PasTree.TPasImplTryFinally.isPrototypeOf(El.FinallyExcept)) {
          T = this.CreateElement(pas.jstree.TJSTryFinallyStatement,El);
          T.FBlock = this.ConvertImplBlockElements(El,AContext,true);
          T.FBFinally = this.ConvertImplBlockElements(El.FinallyExcept,AContext,true);
        } else {
          T = this.CreateElement(pas.jstree.TJSTryCatchStatement,El);
          T.FBlock = this.ConvertImplBlockElements(El,AContext,true);
          T.FIdent = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnExceptObject];
          ExceptBlock = El.FinallyExcept;
          if ((ExceptBlock.Elements.FCount > 0) && pas.PasTree.TPasImplExceptOn.isPrototypeOf(rtl.getObject(ExceptBlock.Elements.Get(0)))) {
            Last = null;
            for (var $l1 = 0, $end2 = ExceptBlock.Elements.FCount - 1; $l1 <= $end2; $l1++) {
              i = $l1;
              ExceptOn = rtl.as(rtl.getObject(ExceptBlock.Elements.Get(i)),pas.PasTree.TPasImplExceptOn);
              IfSt = rtl.as(this.ConvertExceptOn(ExceptOn,AContext),pas.jstree.TJSIfStatement);
              if (Last === null) {
                T.FBCatch = IfSt}
               else Last.FBFalse = IfSt;
              Last = IfSt;
            };
            if (El.ElseBranch !== null) {
              Last.FBFalse = this.ConvertImplBlockElements(El.ElseBranch,AContext,true)}
             else {
              Last.FBFalse = this.CreateElement(pas.jstree.TJSThrowStatement,El);
              Last.FBFalse.FA = this.CreatePrimitiveDotExpr(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnExceptObject],El);
            };
          } else {
            if (El.ElseBranch !== null) this.RaiseNotSupported(El.ElseBranch,AContext,20170205003014,"");
            T.FBCatch = this.ConvertImplBlockElements(ExceptBlock,AContext,true);
          };
        };
        Result = T;
      } finally {
        if (Result === null) T = rtl.freeLoc(T);
      };
      return Result;
    };
    this.ConvertExceptOn = function (El, AContext) {
      var Result = null;
      var IfSt = null;
      var ListFirst = null;
      var ListLast = null;
      var DotExpr = null;
      var Call = null;
      var V = null;
      Result = null;
      IfSt = this.CreateElement(pas.jstree.TJSIfStatement,El);
      try {
        DotExpr = this.CreateElement(pas.jstree.TJSDotMemberExpression,El);
        DotExpr.FMexpr = this.CreateReferencePathExpr(El.TypeEl,AContext,false,null);
        DotExpr.FName = "isPrototypeOf";
        Call = this.CreateCallExpression(El);
        Call.FExpr = DotExpr;
        Call.AddArg(this.CreatePrimitiveDotExpr(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnExceptObject],El));
        IfSt.FCond = Call;
        if (El.VarEl !== null) {
          ListFirst = this.CreateElement(pas.jstree.TJSStatementList,El.Body);
          ListLast = ListFirst;
          IfSt.FBTrue = ListFirst;
          V = this.CreateVarStatement(this.TransformVariableName(El,El.VariableName(),true,AContext),this.CreatePrimitiveDotExpr(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnExceptObject],El),El);
          ListFirst.FA = V;
          if (El.Body !== null) this.AddToStatementList({get: function () {
              return ListFirst;
            }, set: function (v) {
              ListFirst = v;
            }},{get: function () {
              return ListLast;
            }, set: function (v) {
              ListLast = v;
            }},this.ConvertElement(El.Body,AContext),El);
        } else if (El.Body !== null) IfSt.FBTrue = this.ConvertElement(El.Body,AContext);
        Result = IfSt;
      } finally {
        if (Result === null) IfSt = rtl.freeLoc(IfSt);
      };
      return Result;
    };
    this.ConvertCaseOfStatement = function (El, AContext) {
      var Result = null;
      var SubEl = null;
      var St = null;
      var ok = false;
      var IsCaseOfString = false;
      var i = 0;
      var j = 0;
      var JSExpr = null;
      var StList = null;
      var Expr = null;
      var IfSt = null;
      var LastIfSt = null;
      var TmpVarName = "";
      var VarDecl = null;
      var VarSt = null;
      var JSOrExpr = null;
      var JSAndExpr = null;
      var JSLEExpr = null;
      var JSGEExpr = null;
      var JSEQExpr = null;
      var aResolver = null;
      var CaseResolved = new pas.PasResolver.TPasResolverResult();
      Result = null;
      aResolver = AContext.Resolver;
      IsCaseOfString = false;
      if (aResolver !== null) {
        aResolver.ComputeElement(El.CaseExpr,{get: function () {
            return CaseResolved;
          }, set: function (v) {
            CaseResolved = v;
          }},{},null);
        if (CaseResolved.BaseType in pas.PasResolver.btAllStrings) IsCaseOfString = true;
      };
      if (this.GetUseSwitchStatement()) {
        ok = true;
        for (var $l1 = 0, $end2 = El.Elements.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          SubEl = rtl.getObject(El.Elements.Get(i));
          if (!pas.PasTree.TPasImplCaseStatement.isPrototypeOf(SubEl)) continue;
          St = SubEl;
          for (var $l3 = 0, $end4 = St.Expressions.FCount - 1; $l3 <= $end4; $l3++) {
            j = $l3;
            Expr = rtl.getObject(St.Expressions.Get(j));
            if (pas.PasTree.TBinaryExpr.isPrototypeOf(Expr) && (Expr.Kind === pas.PasTree.TPasExprKind.pekRange)) {
              ok = false;
              break;
            };
          };
          if (!ok) break;
        };
        if (ok) {
          Result = this.CreateSwitchStatement(El,AContext);
          return Result;
        };
      };
      StList = this.CreateElement(pas.jstree.TJSStatementList,El);
      ok = false;
      try {
        TmpVarName = AContext.CreateLocalIdentifier("$tmp");
        VarSt = this.CreateElement(pas.jstree.TJSVariableStatement,El.CaseExpr);
        StList.FA = VarSt;
        VarDecl = this.CreateElement(pas.jstree.TJSVarDeclaration,El.CaseExpr);
        VarSt.FA = VarDecl;
        VarDecl.FName = TmpVarName;
        VarDecl.FInit = this.ConvertExpression(El.CaseExpr,AContext);
        LastIfSt = null;
        for (var $l5 = 0, $end6 = El.Elements.FCount - 1; $l5 <= $end6; $l5++) {
          i = $l5;
          SubEl = rtl.getObject(El.Elements.Get(i));
          if (pas.PasTree.TPasImplCaseStatement.isPrototypeOf(SubEl)) {
            St = SubEl;
            IfSt = this.CreateElement(pas.jstree.TJSIfStatement,SubEl);
            if (LastIfSt === null) {
              StList.FB = IfSt}
             else LastIfSt.FBFalse = IfSt;
            LastIfSt = IfSt;
            for (var $l7 = 0, $end8 = St.Expressions.FCount - 1; $l7 <= $end8; $l7++) {
              j = $l7;
              Expr = rtl.getObject(St.Expressions.Get(j));
              if (pas.PasTree.TBinaryExpr.isPrototypeOf(Expr) && (Expr.Kind === pas.PasTree.TPasExprKind.pekRange)) {
                JSAndExpr = this.CreateElement(pas.jstree.TJSLogicalAndExpression,Expr);
                JSExpr = JSAndExpr;
                JSGEExpr = this.CreateElement(pas.jstree.TJSRelationalExpressionGE,Expr);
                JSAndExpr.FA = JSGEExpr;
                JSGEExpr.FA = this.CreatePrimitiveDotExpr(TmpVarName,El.CaseExpr);
                JSGEExpr.FB = this.ConvertExpression(Expr.left,AContext);
                JSLEExpr = this.CreateElement(pas.jstree.TJSRelationalExpressionLE,Expr);
                JSAndExpr.FB = JSLEExpr;
                JSLEExpr.FA = this.CreatePrimitiveDotExpr(TmpVarName,El.CaseExpr);
                JSLEExpr.FB = this.ConvertExpression(Expr.right,AContext);
                if (IsCaseOfString) {
                  JSEQExpr = this.CreateElement(pas.jstree.TJSEqualityExpressionSEQ,Expr);
                  JSEQExpr.FA = this.CreateDotExpression(Expr,this.CreatePrimitiveDotExpr(TmpVarName,El.CaseExpr),this.CreatePrimitiveDotExpr("length",Expr),false);
                  JSEQExpr.FB = this.CreateLiteralNumber(Expr,1);
                  JSAndExpr = this.CreateElement(pas.jstree.TJSLogicalAndExpression,Expr);
                  JSAndExpr.FA = JSEQExpr;
                  JSAndExpr.FB = JSExpr;
                  JSExpr = JSAndExpr;
                };
              } else {
                JSEQExpr = this.CreateElement(pas.jstree.TJSEqualityExpressionSEQ,Expr);
                JSExpr = JSEQExpr;
                JSEQExpr.FA = this.CreatePrimitiveDotExpr(TmpVarName,El.CaseExpr);
                JSEQExpr.FB = this.ConvertExpression(Expr,AContext);
              };
              if (IfSt.FCond === null) {
                IfSt.FCond = JSExpr}
               else {
                JSOrExpr = this.CreateElement(pas.jstree.TJSLogicalOrExpression,St);
                JSOrExpr.FA = IfSt.FCond;
                JSOrExpr.FB = JSExpr;
                IfSt.FCond = JSOrExpr;
              };
            };
            if (St.Body !== null) {
              IfSt.FBTrue = this.ConvertElement(St.Body,AContext)}
             else IfSt.FBTrue = this.CreateElement(pas.jstree.TJSEmptyStatement,St);
          } else if (pas.PasTree.TPasImplCaseElse.isPrototypeOf(SubEl)) {
            if (LastIfSt === null) this.RaiseNotSupported(SubEl,AContext,20161128120802,"case-of needs at least one case");
            LastIfSt.FBFalse = this.ConvertImplBlockElements(El.ElseBranch,AContext,true);
          } else this.RaiseNotSupported(SubEl,AContext,20161128113055,"");
        };
        ok = true;
      } finally {
        if (!ok) StList = rtl.freeLoc(StList);
      };
      Result = StList;
      return Result;
    };
    this.ConvertAsmStatement = function (El, AContext) {
      var Result = null;
      var s = "";
      var L = null;
      var AsmLines = null;
      var Line = 0;
      var Col = 0;
      var StartLine = 0;
      if (AContext === null) ;
      AsmLines = El.FTokens;
      s = pas.SysUtils.Trim(AsmLines.GetTextStr());
      if ((s !== "") && (s.charAt(s.length - 1) === ";")) pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},s.length,1);
      if (s === "") {
        Result = this.CreateElement(pas.jstree.TJSEmptyStatement,El)}
       else {
        StartLine = 0;
        while ((StartLine < AsmLines.GetCount()) && (pas.SysUtils.Trim(AsmLines.Get(StartLine)) === "")) StartLine += 1;
        pas.PasResolver.TPasResolver.UnmangleSourceLineNumber(El.SourceLinenumber,{get: function () {
            return Line;
          }, set: function (v) {
            Line = v;
          }},{get: function () {
            return Col;
          }, set: function (v) {
            Col = v;
          }});
        if (StartLine > 0) Col = 1;
        L = pas.jstree.TJSLiteral.$create("Create$1",[Line + StartLine,Col,El.SourceFilename]);
        L.FValue.FCustomValue = s;
        Result = L;
      };
      return Result;
    };
    this.ConvertConstValue = function (Value, AContext, El) {
      var Result = null;
      var Ranges = [];
      var Range = new pas.PasResolveEval.TResEvalSet.TItem();
      var Call = null;
      var i = 0;
      Result = null;
      if (Value === null) this.RaiseNotSupported(El,AContext,20170910211948,"");
      var $tmp1 = Value.Kind;
      if ($tmp1 === pas.PasResolveEval.TREVKind.revkNil) {
        Result = this.CreateLiteralNull(El)}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkBool) {
        Result = this.CreateLiteralBoolean(El,Value.B)}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkInt) {
        Result = this.CreateLiteralNumber(El,Value.Int)}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkUInt) {
        Result = this.CreateLiteralNumber(El,Value.UInt)}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkFloat) {
        Result = this.CreateLiteralNumber(El,Value.FloatValue)}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
        Result = this.CreateLiteralJSString(El,Value.S)}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkEnum) {
        Result = this.CreateReferencePathExpr(Value.GetEnumValue(),AContext,false,null)}
       else if ($tmp1 === pas.PasResolveEval.TREVKind.revkSetOfInt) {
        if (pas.PasTree.TPasExpr.isPrototypeOf(Value.IdentEl)) {
          Result = this.ConvertElement(Value.IdentEl,AContext)}
         else {
          Call = this.CreateCallExpression(El);
          try {
            Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Create]]);
            Ranges = Value.Ranges;
            for (var $l2 = 0, $end3 = rtl.length(Ranges) - 1; $l2 <= $end3; $l2++) {
              i = $l2;
              Range = new pas.PasResolveEval.TResEvalSet.TItem(Ranges[i]);
              if (Range.RangeStart === Range.RangeEnd) {
                Call.AddArg(this.CreateLiteralNumber(El,Range.RangeStart));
              } else {
                Call.AddArg(this.CreateLiteralNull(El));
                Call.AddArg(this.CreateLiteralNumber(El,Range.RangeStart));
                Call.AddArg(this.CreateLiteralNumber(El,Range.RangeEnd));
              };
            };
            Result = Call;
          } finally {
            if (Result === null) Call = rtl.freeLoc(Call);
          };
        }}
       else {
        this.RaiseNotSupported(El,AContext,20170910211951,"");
      };
      return Result;
    };
    this.ConvertArrayValues = function (El, AContext) {
      var Result = null;
      var ArrLit = null;
      var I = 0;
      ArrLit = this.CreateElement(pas.jstree.TJSArrayLiteral,El);
      for (var $l1 = 0, $end2 = rtl.length(El.Values) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        ArrLit.AddElement(this.ConvertElement(El.Values[I],AContext));
      };
      Result = ArrLit;
      return Result;
    };
    this.ConvertInheritedExpression = function (El, AContext) {
      var Self = this;
      var Result = null;
      function CreateAncestorCall(ParentEl, Apply, AncestorProc, ParamsExpr) {
        var Result = null;
        var FunName = "";
        var SelfName = "";
        var Call = null;
        var SelfContext = null;
        var ClassScope = null;
        var AncestorScope = null;
        var AncestorClass = null;
        var aClass = null;
        Result = null;
        SelfContext = AContext.GetSelfContext();
        if (SelfContext === null) Self.RaiseInconsistency(20170418114702,El);
        SelfName = SelfContext.GetLocalName(SelfContext.ThisPas);
        if (Apply && (SelfContext !== AContext)) Self.DoError$2(20170418204325,4022,rtl.getResStr(pas.FPPas2Js,"sNestedInheritedNeedsParameters"),[],El);
        if (pas.PasTree.TPasClassType.isPrototypeOf(AncestorProc.FParent) && AncestorProc.FParent.IsExternal) {
          aClass = rtl.as(SelfContext.ThisPas,pas.PasTree.TPasClassType);
          if (aClass.FData === null) Self.RaiseInconsistency(20170323111252,aClass);
          ClassScope = aClass.FData;
          AncestorScope = ClassScope.AncestorScope;
          if (AncestorScope === null) Self.RaiseInconsistency(20170323111306,aClass);
          AncestorClass = rtl.as(AncestorScope.FElement,pas.PasTree.TPasClassType);
          FunName = (Self.CreateReferencePath(AncestorClass,AContext,$mod.TRefPathKind.rpkPathAndName,true,null) + ".") + Self.TransformVariableName$1(AncestorProc,AContext);
        } else FunName = Self.CreateReferencePath(AncestorProc,AContext,$mod.TRefPathKind.rpkPathAndName,true,null);
        if (Apply && (SelfContext === AContext)) {
          FunName = FunName + ".apply"}
         else FunName = FunName + ".call";
        Call = null;
        try {
          Call = Self.CreateCallExpression(ParentEl);
          Call.FExpr = Self.CreatePrimitiveDotExpr(FunName,ParentEl);
          Call.AddArg(Self.CreatePrimitiveDotExpr(SelfName,ParentEl));
          if (Apply) {
            Call.AddArg(Self.CreatePrimitiveDotExpr("arguments",ParentEl))}
           else Self.CreateProcedureCall({get: function () {
              return Call;
            }, set: function (v) {
              Call = v;
            }},ParamsExpr,AncestorProc.ProcType,AContext);
          if (pas.PasTree.TPasFunction.isPrototypeOf(AncestorProc) && AContext.Resolver.IsInterfaceType$1(AncestorProc.GetFT().ResultEl.ResultType,pas.PasTree.TPasClassInterfaceType.citCom)) Call = Self.CreateIntfRef(Call,AContext,El);
          Result = Call;
        } finally {
          if (Result === null) Call = rtl.freeLoc(Call);
        };
        return Result;
      };
      var Right = null;
      var Ref = null;
      var PrimExpr = null;
      var AncestorProc = null;
      var ParamsExpr = null;
      Result = null;
      if ((pas.PasTree.TBinaryExpr.isPrototypeOf(El.FParent) && (El.FParent.OpCode === pas.PasTree.TExprOpCode.eopNone)) && (El.FParent.left === El)) {
        AncestorProc = null;
        ParamsExpr = null;
        Right = El.FParent.right;
        if (Right.$class.ClassType() === pas.PasTree.TPrimitiveExpr) {
          PrimExpr = Right;
          Ref = rtl.as(PrimExpr.FData,pas.PasResolver.TResolvedReference);
          if (pas.PasResolver.TResolvedReferenceFlag.rrfImplicitCallWithoutParams in Ref.Flags) {
            AncestorProc = rtl.as(Ref.FDeclaration,pas.PasTree.TPasProcedure);
          } else {
            Result = Self.ConvertPrimitiveExpression(PrimExpr,AContext);
            return Result;
          };
        } else if (Right.$class.ClassType() === pas.PasTree.TParamsExpr) {
          ParamsExpr = Right;
          if (ParamsExpr.Kind === pas.PasTree.TPasExprKind.pekFuncParams) {
            if (pas.PasTree.TPrimitiveExpr.isPrototypeOf(ParamsExpr.Value)) {
              PrimExpr = ParamsExpr.Value;
              Ref = rtl.as(PrimExpr.FData,pas.PasResolver.TResolvedReference);
              AncestorProc = rtl.as(Ref.FDeclaration,pas.PasTree.TPasProcedure);
            } else Self.DoError$2(20170418205802,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["inherited name()",ParamsExpr.Value.ElementTypeName()],ParamsExpr.Value);
          } else {
            Result = Self.ConvertElement(Right,AContext);
            return Result;
          };
        } else {
          Self.DoError$2(20170418205955,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["inherited name()",Right.ElementTypeName()],Right);
        };
        if (AncestorProc === null) {
          Self.RaiseNotSupported(El,AContext,20170201190824,"");
        };
        Result = CreateAncestorCall(Right,false,AncestorProc,ParamsExpr);
      } else {
        if (El.FData === null) return Result;
        Ref = El.FData;
        AncestorProc = rtl.as(Ref.FDeclaration,pas.PasTree.TPasProcedure);
        Result = CreateAncestorCall(El,true,AncestorProc,null);
      };
      return Result;
    };
    this.ConvertNilExpr = function (El, AContext) {
      var Result = null;
      if (AContext === null) ;
      Result = this.CreateLiteralNull(El);
      return Result;
    };
    this.ConvertParamsExpression = function (El, AContext) {
      var Result = null;
      Result = null;
      var $tmp1 = El.Kind;
      if ($tmp1 === pas.PasTree.TPasExprKind.pekFuncParams) {
        Result = this.ConvertFuncParams(El,AContext)}
       else if ($tmp1 === pas.PasTree.TPasExprKind.pekArrayParams) {
        Result = this.ConvertArrayParams(El,AContext)}
       else if ($tmp1 === pas.PasTree.TPasExprKind.pekSet) {
        Result = this.ConvertArrayOrSetLiteral(El,AContext)}
       else {
        this.RaiseNotSupported(El,AContext,20170209103235,pas.PasTree.ExprKindNames[El.Kind]);
      };
      return Result;
    };
    this.ConvertArrayParams = function (El, AContext) {
      var Self = this;
      var Result = null;
      var ArgContext = null;
      function RaiseIllegalBrackets(id, ResolvedEl) {
        Self.DoError$2(id,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),["[",AContext.Resolver.GetResolverResultDescription(ResolvedEl,true)],El);
      };
      function GetValueReference() {
        var Result = null;
        var Value = null;
        Result = null;
        Value = El.Value;
        if ((Value.$class.ClassType() === pas.PasTree.TPrimitiveExpr) && pas.PasResolver.TResolvedReference.isPrototypeOf(Value.FData)) return Value.FData;
        return Result;
      };
      function ConvertIndexMinus1(Param) {
        var Result = null;
        var NeedMinus1 = false;
        var JSVal = null;
        var MinusJS = null;
        Result = Self.ConvertElement(Param,ArgContext);
        NeedMinus1 = true;
        if (pas.jstree.TJSLiteral.isPrototypeOf(Result)) {
          JSVal = Result.FValue;
          if (JSVal.FValueType === pas.jsbase.TJSType.jstNumber) {
            JSVal.SetAsNumber(JSVal.GetAsNumber() - 1);
            NeedMinus1 = false;
          };
        };
        if (NeedMinus1) {
          MinusJS = Self.CreateElement(pas.jstree.TJSAdditiveExpressionMinus,Param);
          MinusJS.FA = Result;
          MinusJS.FB = Self.CreateLiteralNumber(Param,1);
          Result = MinusJS;
        };
        return Result;
      };
      function ConvertStringBracket(ResolvedValue) {
        var CallEx = null;
        var SetStrCall = null;
        var Param = null;
        var DotExpr = null;
        var AssignContext = null;
        var AssignSt = null;
        var OldAccess = 0;
        var IndexExpr = null;
        var Arg = null;
        var IsRangeCheck = false;
        Result = null;
        IsRangeCheck = (pas.PScanner.TBoolSwitch.bsRangeChecks in AContext.ScannerBoolSwitches) && (AContext.Access in rtl.createSet($mod.TCtxAccess.caRead,$mod.TCtxAccess.caAssign));
        Param = El.Params[0];
        var $tmp1 = AContext.Access;
        if ($tmp1 === $mod.TCtxAccess.caAssign) {
          AssignContext = rtl.as(AContext.AccessContext,$mod.TAssignContext);
          if (AssignContext.RightSide === null) Self.RaiseInconsistency(20180123192020,El);
          AssignSt = null;
          SetStrCall = null;
          CallEx = null;
          try {
            CallEx = Self.CreateCallExpression(El);
            if (IsRangeCheck) {
              CallEx.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRangeCheckSetCharAt]])}
             else CallEx.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSetCharAt]]);
            OldAccess = AContext.Access;
            AContext.Access = $mod.TCtxAccess.caRead;
            CallEx.AddArg(Self.ConvertElement(El.Value,AContext));
            CallEx.AddArg(ConvertIndexMinus1(Param));
            AContext.Access = OldAccess;
            CallEx.AddArg(AssignContext.RightSide);
            AssignContext.RightSide = null;
            if (pas.PasTree.TPasArgument.isPrototypeOf(ResolvedValue.IdentEl)) {
              Arg = ResolvedValue.IdentEl;
              if (Arg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argVar,pas.PasTree.TArgumentAccess.argOut)) {
                SetStrCall = Self.CreateCallExpression(El.Value);
                SetStrCall.FExpr = Self.CreateMemberExpression([Self.TransformVariableName$1(Arg,AContext),$impl.TempRefObjSetterName]);
                SetStrCall.AddArg(CallEx);
                AssignContext.Call = CallEx;
                CallEx = null;
                Result = SetStrCall;
              };
            } else if (pas.PasTree.TPasProperty.isPrototypeOf(ResolvedValue.IdentEl)) Self.RaiseNotSupported(El,AContext,20180124115924,"");
            if (Result === null) {
              AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
              AssignSt.FExpr = CallEx;
              AssignContext.Call = CallEx;
              CallEx = null;
              OldAccess = AContext.Access;
              AContext.Access = $mod.TCtxAccess.caRead;
              AssignSt.FLHS = Self.ConvertElement(El.Value,AContext);
              Result = AssignSt;
            };
          } finally {
            if (Result === null) {
              CallEx = rtl.freeLoc(CallEx);
              SetStrCall = rtl.freeLoc(SetStrCall);
              AssignSt = rtl.freeLoc(AssignSt);
            };
          };
        } else if ($tmp1 === $mod.TCtxAccess.caRead) {
          CallEx = Self.CreateCallExpression(El);
          try {
            if (IsRangeCheck && !pas.PasTree.TBinaryExpr.IsRightSubIdent(El)) {
              CallEx.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRangeCheckGetCharAt],El);
              CallEx.AddArg(Self.ConvertElement(El.Value,AContext));
            } else {
              DotExpr = Self.CreateElement(pas.jstree.TJSDotMemberExpression,El);
              CallEx.FExpr = DotExpr;
              DotExpr.FMexpr = Self.ConvertElement(El.Value,AContext);
              DotExpr.FName = "charAt";
            };
            IndexExpr = ConvertIndexMinus1(Param);
            CallEx.AddArg(IndexExpr);
            Result = CallEx;
          } finally {
            if (Result === null) CallEx = rtl.freeLoc(CallEx);
          };
        } else {
          Self.RaiseNotSupported(El,AContext,20170213213101,"");
        };
      };
      function ConvCharToInt(Arg, Param) {
        if (pas.jstree.TJSLiteral.isPrototypeOf(Arg.get()) && (Arg.get().FValue.FValueType === pas.jsbase.TJSType.jstString)) {
          Self.ConvertCharLiteralToInt(Arg.get(),Param,ArgContext);
        } else {
          Arg.set(Self.CreateCallCharCodeAt(Arg.get(),0,Param));
        };
      };
      function ConvertArray(ArrayEl) {
        var BracketEx = null;
        var Sub = null;
        var i = 0;
        var ArgNo = 0;
        var Arg = null;
        var ArrJS = null;
        var OldAccess = 0;
        var Ranges = [];
        var Int = 0;
        var Param = null;
        var JSAdd = null;
        var LowRg = null;
        var IsRangeCheck = false;
        var ok = false;
        var NeedRangeCheck = false;
        var CallEx = null;
        var AssignContext = null;
        var ArgList = null;
        Result = null;
        Arg = null;
        ArrJS = null;
        ArgList = pas.Classes.TFPList.$create("Create");
        NeedRangeCheck = false;
        ok = false;
        try {
          OldAccess = AContext.Access;
          AContext.Access = $mod.TCtxAccess.caRead;
          ArrJS = Self.ConvertElement(El.Value,AContext);
          AContext.Access = OldAccess;
          ArgNo = 0;
          do {
            Ranges = ArrayEl.Ranges;
            for (var $l1 = 1, $end2 = Math.max(rtl.length(Ranges),1); $l1 <= $end2; $l1++) {
              i = $l1;
              Param = El.Params[ArgNo];
              ArgContext.Access = $mod.TCtxAccess.caRead;
              Arg = Self.ConvertElement(Param,ArgContext);
              ArgContext.Access = OldAccess;
              if (!pas.jstree.TJSLiteral.isPrototypeOf(Arg)) NeedRangeCheck = true;
              if (i <= rtl.length(Ranges)) {
                LowRg = ArgContext.Resolver.EvalRangeLimit(Ranges[i - 1],rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true,El);
                if (LowRg === null) Self.RaiseNotSupported(Param,ArgContext,20170910163341,"");
                try {
                  Int = 0;
                  var $tmp3 = LowRg.Kind;
                  if ($tmp3 === pas.PasResolveEval.TREVKind.revkBool) {
                    if (LowRg.B === false) {
                      if (pas.jstree.TJSLiteral.isPrototypeOf(Arg) && (Arg.FValue.FValueType === pas.jsbase.TJSType.jstBoolean)) {
                        if (Arg.FValue.GetAsBoolean()) {
                          Arg.FValue.SetAsNumber(1)}
                         else Arg.FValue.SetAsNumber(0);
                      } else {
                        Arg = Self.CreateUnaryPlus(Arg,Param);
                      };
                    } else {
                      if (pas.jstree.TJSLiteral.isPrototypeOf(Arg) && (Arg.FValue.FValueType === pas.jsbase.TJSType.jstBoolean)) {
                        if (Arg.FValue.GetAsBoolean()) {
                          Arg.FValue.SetAsNumber(0)}
                         else ArgContext.Resolver.fExprEvaluator.EmitRangeCheckConst(20170910203312,"false","true","true",Param,pas.PScanner.TMessageType.mtError);
                      } else {
                        JSAdd = Self.CreateElement(pas.jstree.TJSAdditiveExpressionMinus,Param);
                        JSAdd.FA = Self.CreateLiteralNumber(Param,1);
                        JSAdd.FB = Arg;
                        Arg = JSAdd;
                      };
                    }}
                   else if ($tmp3 === pas.PasResolveEval.TREVKind.revkEnum) {
                    Int = LowRg.Index}
                   else if ($tmp3 === pas.PasResolveEval.TREVKind.revkInt) {
                    Int = LowRg.Int}
                   else if ($tmp3 === pas.PasResolveEval.TREVKind.revkUnicodeString) {
                    if (LowRg.S.length !== 1) {
                      ArgContext.Resolver.RaiseXExpectedButYFound(20170910213247,"char","string",Param)}
                     else Int = LowRg.S.charAt(0).charCodeAt();
                    ConvCharToInt({get: function () {
                        return Arg;
                      }, set: function (v) {
                        Arg = v;
                      }},Param);
                  } else {
                    Self.RaiseNotSupported(Param,ArgContext,20170910170446,"");
                  };
                  if (Int !== 0) {
                    if (pas.jstree.TJSLiteral.isPrototypeOf(Arg) && (Arg.FValue.FValueType === pas.jsbase.TJSType.jstNumber)) {
                      Arg.FValue.SetAsNumber(Arg.FValue.GetAsNumber() - Int)}
                     else {
                      if (Int > 0) {
                        JSAdd = Self.CreateElement(pas.jstree.TJSAdditiveExpressionMinus,Param);
                        JSAdd.FA = Arg;
                        JSAdd.FB = Self.CreateLiteralNumber(Param,Int);
                        Arg = JSAdd;
                      } else {
                        JSAdd = Self.CreateElement(pas.jstree.TJSAdditiveExpressionPlus,Param);
                        JSAdd.FA = Arg;
                        JSAdd.FB = Self.CreateLiteralNumber(Param,-Int);
                        Arg = JSAdd;
                      };
                    };
                  };
                } finally {
                  pas.PasResolveEval.ReleaseEvalValue({get: function () {
                      return LowRg;
                    }, set: function (v) {
                      LowRg = v;
                    }});
                };
              };
              ArgList.Add(Arg);
              Arg = null;
              ArgNo += 1;
              if (ArgNo > rtl.length(El.Params)) Self.RaiseInconsistency(20170206180553,El);
            };
            if (ArgNo === rtl.length(El.Params)) break;
            ArrayEl = rtl.as(AContext.Resolver.ResolveAliasType(ArrayEl.ElType),pas.PasTree.TPasArrayType);
          } while (!false);
          IsRangeCheck = (NeedRangeCheck && (pas.PScanner.TBoolSwitch.bsRangeChecks in AContext.ScannerBoolSwitches)) && (AContext.Access in rtl.createSet($mod.TCtxAccess.caRead,$mod.TCtxAccess.caAssign));
          if (IsRangeCheck && !pas.PasTree.TBinaryExpr.IsRightSubIdent(El)) {
            CallEx = Self.CreateCallExpression(El);
            Result = CallEx;
            if (AContext.Access === $mod.TCtxAccess.caRead) {
              CallEx.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRangeCheckArrayRead],El)}
             else CallEx.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRangeCheckArrayWrite],El);
            CallEx.AddArg(ArrJS);
            ArrJS = null;
            for (var $l4 = 0, $end5 = ArgList.FCount - 1; $l4 <= $end5; $l4++) {
              i = $l4;
              CallEx.AddArg(rtl.getObject(ArgList.Get(i)));
            };
            ArgList.Clear();
            if (AContext.Access === $mod.TCtxAccess.caAssign) {
              AssignContext = rtl.as(AContext.AccessContext,$mod.TAssignContext);
              if (AssignContext.Call !== null) Self.RaiseNotSupported(El,AContext,20180424192155,"");
              CallEx.AddArg(AssignContext.RightSide);
              AssignContext.RightSide = null;
              AssignContext.Call = CallEx;
            };
          } else {
            BracketEx = Self.CreateElement(pas.jstree.TJSBracketMemberExpression,El);
            BracketEx.FMexpr = ArrJS;
            ArrJS = null;
            for (var $l6 = 0, $end7 = ArgList.FCount - 1; $l6 <= $end7; $l6++) {
              i = $l6;
              if (BracketEx.FName !== null) {
                Sub = BracketEx;
                BracketEx = Self.CreateElement(pas.jstree.TJSBracketMemberExpression,El);
                BracketEx.FMexpr = Sub;
              };
              BracketEx.FName = rtl.getObject(ArgList.Get(i));
            };
            Result = BracketEx;
            ArgList.Clear();
          };
          ok = true;
        } finally {
          if (!ok) {
            ArrJS = rtl.freeLoc(ArrJS);
            for (var $l8 = 0, $end9 = ArgList.FCount - 1; $l8 <= $end9; $l8++) {
              i = $l8;
              rtl.getObject(ArgList.Get(i)).$destroy("Destroy");
            };
            Arg = rtl.freeLoc(Arg);
            Result = rtl.freeLoc(Result);
          };
          ArgList = rtl.freeLoc(ArgList);
        };
      };
      function IsJSBracketAccessorAndConvert(Prop, AccessEl, AContext, ChompPropName) {
        var Result$1 = false;
        var Bracket = null;
        var OldAccess = 0;
        var PathEl = null;
        var Ref = null;
        var Path = "";
        if (!AContext.Resolver.IsExternalBracketAccessor(AccessEl)) return false;
        Result$1 = true;
        if (AContext.Resolver.GetPasPropertyArgs(Prop).FCount !== 1) Self.RaiseInconsistency(20170403003753,Prop);
        Bracket = Self.CreateElement(pas.jstree.TJSBracketMemberExpression,El.Params[0]);
        try {
          PathEl = El.Value;
          if (ChompPropName) {
            if ((pas.PasTree.TPrimitiveExpr.isPrototypeOf(PathEl) && (PathEl.Kind === pas.PasTree.TPasExprKind.pekIdent)) && pas.PasResolver.TResolvedReference.isPrototypeOf(PathEl.FData)) {
              Ref = PathEl.FData;
              Path = Self.CreateReferencePath(Prop,AContext,$mod.TRefPathKind.rpkPath,false,Ref);
              if (Path !== "") Bracket.FMexpr = Self.CreatePrimitiveDotExpr(Path,PathEl);
              PathEl = null;
            } else if (((pas.PasTree.TBinaryExpr.isPrototypeOf(PathEl) && (PathEl.OpCode === pas.PasTree.TExprOpCode.eopSubIdent)) && pas.PasTree.TPrimitiveExpr.isPrototypeOf(PathEl.right)) && (PathEl.right.Kind === pas.PasTree.TPasExprKind.pekIdent)) {
              PathEl = PathEl.left;
            } else Self.RaiseNotSupported(El.Value,AContext,20170402225050,"");
          };
          if ((PathEl !== null) && (Bracket.FMexpr === null)) {
            OldAccess = AContext.Access;
            AContext.Access = $mod.TCtxAccess.caRead;
            Bracket.FMexpr = Self.ConvertElement(PathEl,AContext);
            AContext.Access = OldAccess;
          };
          OldAccess = ArgContext.Access;
          ArgContext.Access = $mod.TCtxAccess.caRead;
          Bracket.FName = Self.ConvertElement(El.Params[0],ArgContext);
          ArgContext.Access = OldAccess;
          Result = Bracket;
          Bracket = null;
        } finally {
          Bracket = rtl.freeLoc(Bracket);
        };
        return Result$1;
      };
      function ConvertIndexedProperty(Prop, AContext) {
        var Call = null;
        var i = 0;
        var TargetArg = null;
        var Elements = null;
        var Arg = null;
        var AccessEl = null;
        var AssignContext = null;
        var OldAccess = 0;
        var IndexExpr = null;
        var Value = null;
        var PropArgs = null;
        var aResolver = null;
        var TypeEl = null;
        Result = null;
        AssignContext = null;
        aResolver = AContext.Resolver;
        Call = Self.CreateCallExpression(El);
        try {
          var $tmp1 = AContext.Access;
          if ($tmp1 === $mod.TCtxAccess.caAssign) {
            AccessEl = aResolver.GetPasPropertySetter(Prop);
            if (IsJSBracketAccessorAndConvert(Prop,AccessEl,AContext,true)) {
              pas.SysUtils.FreeAndNil({get: function () {
                  return Call;
                }, set: function (v) {
                  Call = v;
                }});
              return;
            };
            AssignContext = rtl.as(AContext.AccessContext,$mod.TAssignContext);
            AssignContext.PropertyEl = Prop;
            AssignContext.Setter = AccessEl;
            AssignContext.Call = Call;
          } else if ($tmp1 === $mod.TCtxAccess.caRead) {
            AccessEl = aResolver.GetPasPropertyGetter(Prop);
            if (IsJSBracketAccessorAndConvert(Prop,AccessEl,AContext,true)) {
              pas.SysUtils.FreeAndNil({get: function () {
                  return Call;
                }, set: function (v) {
                  Call = v;
                }});
              return;
            };
          } else {
            Self.RaiseNotSupported(El,AContext,20170213213317,"");
          };
          Call.FExpr = Self.CreateReferencePathExpr(AccessEl,AContext,false,GetValueReference());
          Elements = Call.FArgs.FElements;
          OldAccess = ArgContext.Access;
          PropArgs = aResolver.GetPasPropertyArgs(Prop);
          i = 0;
          while (i < PropArgs.FCount) {
            TargetArg = rtl.getObject(PropArgs.Get(i));
            Arg = Self.CreateProcCallArg(El.Params[i],TargetArg,ArgContext);
            Elements.AddElement().FExpr = Arg;
            i += 1;
          };
          while (i < PropArgs.FCount) {
            TargetArg = rtl.getObject(PropArgs.Get(i));
            if (TargetArg.ValueExpr === null) {
              Self.RaiseInconsistency(20170206185126,TargetArg);
            };
            AContext.Access = $mod.TCtxAccess.caRead;
            Arg = Self.ConvertElement(TargetArg.ValueExpr,ArgContext);
            Elements.AddElement().FExpr = Arg;
            i += 1;
          };
          IndexExpr = aResolver.GetPasPropertyIndex(Prop);
          if (IndexExpr !== null) {
            Value = aResolver.Eval(IndexExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
            try {
              Elements.AddElement().FExpr = Self.ConvertConstValue(Value,ArgContext,El);
            } finally {
              pas.PasResolveEval.ReleaseEvalValue({get: function () {
                  return Value;
                }, set: function (v) {
                  Value = v;
                }});
            };
          };
          if (AssignContext !== null) {
            Elements.AddElement().FExpr = AssignContext.RightSide;
            AssignContext.RightSide = null;
          };
          ArgContext.Access = OldAccess;
          if (AContext.Access === $mod.TCtxAccess.caRead) {
            TypeEl = aResolver.GetPasPropertyType(Prop);
            if (aResolver.IsInterfaceType$1(TypeEl,pas.PasTree.TPasClassInterfaceType.citCom)) Call = Self.CreateIntfRef(Call,AContext,El);
          };
          Result = Call;
        } finally {
          if (Result === null) {
            if ((AssignContext !== null) && (AssignContext.Call === Call)) AssignContext.Call = null;
            Call = rtl.freeLoc(Call);
          };
        };
      };
      function ConvertDefaultProperty(ResolvedEl, Prop) {
        var DotContext = null;
        var Left = null;
        var Right = null;
        var OldAccess = 0;
        var AccessEl = null;
        var SetAccessEl = null;
        var $tmp1 = AContext.Access;
        if ($tmp1 === $mod.TCtxAccess.caAssign) {
          AccessEl = AContext.Resolver.GetPasPropertySetter(Prop);
          if (IsJSBracketAccessorAndConvert(Prop,AccessEl,AContext,false)) return;
        } else if ($tmp1 === $mod.TCtxAccess.caRead) {
          AccessEl = AContext.Resolver.GetPasPropertyGetter(Prop);
          if (IsJSBracketAccessorAndConvert(Prop,AccessEl,AContext,false)) return;
        } else if ($tmp1 === $mod.TCtxAccess.caByReference) {
          AccessEl = AContext.Resolver.GetPasPropertyGetter(Prop);
          SetAccessEl = AContext.Resolver.GetPasPropertySetter(Prop);
          if (AContext.Resolver.IsExternalBracketAccessor(AccessEl)) {
            if (AContext.Resolver.IsExternalBracketAccessor(SetAccessEl)) {
              if (!IsJSBracketAccessorAndConvert(Prop,AccessEl,AContext,false)) Self.RaiseNotSupported(El,AContext,20170405090845,"");
              return;
            };
          };
          Self.RaiseNotSupported(El,AContext,20170403000550,"");
        } else {
          Self.RaiseNotSupported(El,AContext,20170402233834,"");
        };
        DotContext = null;
        Left = null;
        Right = null;
        try {
          OldAccess = AContext.Access;
          AContext.Access = $mod.TCtxAccess.caRead;
          Left = Self.ConvertElement(El.Value,AContext);
          AContext.Access = OldAccess;
          DotContext = $mod.TDotContext.$create("Create$1",[El.Value,Left,AContext]);
          DotContext.LeftResolved = new pas.PasResolver.TPasResolverResult(ResolvedEl);
          ConvertIndexedProperty(Prop,DotContext);
          if (DotContext.JS !== null) Self.RaiseNotSupported(El,AContext,20180509134226,pas.PasResolveEval.GetObjName(DotContext.JS));
          Right = Result;
          Result = null;
        } finally {
          DotContext = rtl.freeLoc(DotContext);
          if (Right === null) Left = rtl.freeLoc(Left);
        };
        Result = Self.CreateDotExpression(El,Left,Right,true);
      };
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      var TypeEl = null;
      var DestType = null;
      var ClassScope = null;
      var B = null;
      var OldAccess = 0;
      var aClass = null;
      var aResolver = null;
      if (El.Kind !== pas.PasTree.TPasExprKind.pekArrayParams) Self.RaiseInconsistency(20170209113713,El);
      ArgContext = AContext.GetNonDotContext();
      if (AContext.Resolver === null) {
        if (rtl.length(El.Params) > 1) Self.RaiseNotSupported(El,AContext,20170207151325,"Cannot convert 2-dim arrays");
        B = Self.CreateElement(pas.jstree.TJSBracketMemberExpression,El);
        try {
          OldAccess = AContext.Access;
          AContext.Access = $mod.TCtxAccess.caRead;
          B.FMexpr = Self.ConvertElement(El.Value,AContext);
          OldAccess = ArgContext.Access;
          ArgContext.Access = $mod.TCtxAccess.caRead;
          B.FName = Self.ConvertElement(El.Params[0],ArgContext);
          ArgContext.Access = OldAccess;
          Result = B;
        } finally {
          if (Result === null) B = rtl.freeLoc(B);
        };
        return Result;
      };
      aResolver = AContext.Resolver;
      aResolver.ComputeElement(El.Value,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},{},null);
      if (ResolvedEl.BaseType in $mod.btAllJSStrings) {
        ConvertStringBracket(ResolvedEl)}
       else if ((pas.PasTree.TPasProperty.isPrototypeOf(ResolvedEl.IdentEl) && pas.PasTree.TPrimitiveExpr.isPrototypeOf(El.Value)) && (aResolver.GetPasPropertyArgs(ResolvedEl.IdentEl).FCount > 0)) {
        ConvertIndexedProperty(ResolvedEl.IdentEl,AContext)}
       else if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
        TypeEl = ResolvedEl.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
          aClass = TypeEl;
          ClassScope = rtl.as(aClass.FData,$mod.TPas2JSClassScope);
          if (ClassScope.DefaultProperty !== null) {
            ConvertDefaultProperty(ResolvedEl,ClassScope.DefaultProperty)}
           else Self.RaiseInconsistency(20170206180448,aClass);
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType) {
          DestType = aResolver.ResolveAliasType(TypeEl.DestType);
          ClassScope = rtl.as(DestType.FData,$mod.TPas2JSClassScope);
          if (ClassScope.DefaultProperty === null) Self.RaiseInconsistency(20170206180503,DestType);
          ConvertDefaultProperty(ResolvedEl,ClassScope.DefaultProperty);
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
          ConvertArray(TypeEl)}
         else RaiseIllegalBrackets(20170206181220,ResolvedEl);
      } else RaiseIllegalBrackets(20170206180222,ResolvedEl);
      return Result;
    };
    this.ConvertFuncParams = function (El, AContext) {
      var Result = null;
      var Ref = null;
      var Decl = null;
      var Left = null;
      var BuiltInProc = null;
      var TargetProcType = null;
      var Call = null;
      var Elements = null;
      var JsArrLit = null;
      var OldAccess = 0;
      var DeclResolved = new pas.PasResolver.TPasResolverResult();
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var ValueResolved = new pas.PasResolver.TPasResolverResult();
      var Param = null;
      var JSBaseType = 0;
      var C = null;
      var aName = "";
      var aClassTypeEl = null;
      var ParamTypeEl = null;
      var TypeEl = null;
      var aResolver = null;
      var NeedIntfRef = false;
      var DestRange = null;
      var SrcRange = null;
      var LastArg = null;
      var CallArgs = null;
      Result = null;
      if (El.Kind !== pas.PasTree.TPasExprKind.pekFuncParams) this.RaiseInconsistency(20170209113515,El);
      aResolver = AContext.Resolver;
      Call = null;
      Elements = null;
      TargetProcType = null;
      if (pas.PasResolver.TResolvedReference.isPrototypeOf(El.Value.FData)) {
        Ref = El.Value.FData;
        Decl = Ref.FDeclaration;
        if (pas.PasTree.TPasType.isPrototypeOf(Decl)) Decl = aResolver.ResolveAliasType(Decl);
        C = Decl.$class.ClassType();
        if (C === pas.PasTree.TPasUnresolvedSymbolRef) {
          if (pas.PasResolver.TResElDataBuiltInProc.isPrototypeOf(Decl.FData)) {
            BuiltInProc = Decl.FData;
            var $tmp1 = BuiltInProc.BuiltIn;
            if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfLength) {
              Result = this.ConvertBuiltIn_Length(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfSetLength) {
              Result = this.ConvertBuiltIn_SetLength(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfInclude) {
              Result = this.ConvertBuiltIn_ExcludeInclude(El,AContext,true)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfExclude) {
              Result = this.ConvertBuiltIn_ExcludeInclude(El,AContext,false)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfExit) {
              Result = this.ConvertBuiltIn_Exit(El,AContext)}
             else if (($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfInc) || ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfDec)) {
              Result = this.ConvertBuiltIn_IncDec(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfAssigned) {
              Result = this.ConvertBuiltIn_Assigned(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfChr) {
              Result = this.ConvertBuiltIn_Chr(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfOrd) {
              Result = this.ConvertBuiltIn_Ord(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfLow) {
              Result = this.ConvertBuiltIn_LowHigh(El,AContext,true)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfHigh) {
              Result = this.ConvertBuiltIn_LowHigh(El,AContext,false)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfPred) {
              Result = this.ConvertBuiltIn_PredSucc(El,AContext,true)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfSucc) {
              Result = this.ConvertBuiltIn_PredSucc(El,AContext,false)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfStrProc) {
              Result = this.ConvertBuiltIn_StrProc(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfStrFunc) {
              Result = this.ConvertBuiltIn_StrFunc(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfWriteStr) {
              Result = this.ConvertBuiltIn_WriteStr(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfConcatArray) {
              Result = this.ConvertBuiltIn_ConcatArray(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfCopyArray) {
              Result = this.ConvertBuiltIn_CopyArray(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfInsertArray) {
              Result = this.ConvertBuiltIn_InsertArray(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfDeleteArray) {
              Result = this.ConvertBuiltIn_DeleteArray(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfTypeInfo) {
              Result = this.ConvertBuiltIn_TypeInfo(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfAssert) {
              Result = this.ConvertBuiltIn_Assert(El,AContext);
              if (Result === null) return Result;
            } else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfNew) {
              Result = this.ConvertBuiltIn_New(El,AContext)}
             else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfDispose) {
              Result = this.ConvertBuiltIn_Dispose(El,AContext);
              if (Result === null) return Result;
            } else if ($tmp1 === pas.PasResolver.TResolverBuiltInProc.bfDefault) {
              Result = this.ConvertBuiltIn_Default(El,AContext)}
             else {
              this.RaiseNotSupported(El,AContext,20161130164955,"built in proc " + pas.PasResolver.ResolverBuiltInProcNames[BuiltInProc.BuiltIn]);
            };
            if (Result === null) this.RaiseInconsistency(20170210121932,El);
            return Result;
          } else if (pas.PasResolver.TResElDataBaseType.isPrototypeOf(Decl.FData)) {
            Result = this.ConvertTypeCastToBaseType(El,AContext,Decl.FData);
            return Result;
          } else this.RaiseNotSupported(El,AContext,20170325160624,"");
        } else if (aResolver.IsExternalClassConstructor(Decl)) {
          Left = El;
          while (Left.FParent.$class.ClassType() === pas.PasTree.TParamsExpr) Left = Left.FParent;
          if ((Left.FParent.$class.ClassType() === pas.PasTree.TBinaryExpr) && (Left.FParent.right === Left)) {
            Left = Left.FParent.left}
           else Left = null;
          Result = this.ConvertExternalConstructor(Left,Ref,El,AContext);
          return Result;
        } else if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
          TargetProcType = Decl.ProcType;
          if (aResolver.IsExternalBracketAccessor(Decl)) return this.ConvertExternalBracketAccessorCall(El,AContext);
        } else if (((((((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasRecordType)) || (C === pas.PasTree.TPasEnumType)) || (C === pas.PasTree.TPasRangeType)) || (C === pas.PasTree.TPasArrayType)) || (C === pas.PasTree.TPasPointerType)) {
          Param = El.Params[0];
          aResolver.ComputeElement(Param,{get: function () {
              return ParamResolved;
            }, set: function (v) {
              ParamResolved = v;
            }},{},null);
          ParamTypeEl = ParamResolved.LoTypeEl;
          Result = this.ConvertElement(Param,AContext);
          if (C === pas.PasTree.TPasRangeType) {
            DestRange = aResolver.EvalTypeRange(Decl,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst));
            SrcRange = null;
            try {
              if (DestRange === null) this.RaiseNotSupported(El,AContext,20180424124708,"");
              SrcRange = aResolver.EvalTypeRange(ParamResolved.LoTypeEl,{});
              if (SrcRange === null) this.RaiseNotSupported(El,AContext,20180424125331,"");
              var $tmp2 = DestRange.Kind;
              if ($tmp2 === pas.PasResolveEval.TREVKind.revkRangeInt) {
                var $tmp3 = DestRange.ElKind;
                if (($tmp3 === pas.PasResolveEval.TRESetElKind.revskEnum) || ($tmp3 === pas.PasResolveEval.TRESetElKind.revskInt)) {
                  var $tmp4 = SrcRange.Kind;
                  if ($tmp4 === pas.PasResolveEval.TREVKind.revkRangeInt) {
                    var $tmp5 = SrcRange.ElKind;
                    if (($tmp5 === pas.PasResolveEval.TRESetElKind.revskEnum) || ($tmp5 === pas.PasResolveEval.TRESetElKind.revskInt)) {}
                    else {
                      this.RaiseNotSupported(El,AContext,20180424130705,"");
                    };
                  } else if ($tmp4 === pas.PasResolveEval.TREVKind.revkRangeUInt) {}
                  else {
                    this.RaiseNotSupported(El,AContext,20180424125608,"");
                  };
                } else {
                  this.RaiseNotSupported(El,AContext,20180424125419,"");
                };
              } else {
                this.RaiseNotSupported(El,AContext,20180424124814,"");
              };
            } finally {
              pas.PasResolveEval.ReleaseEvalValue({get: function () {
                  return SrcRange;
                }, set: function (v) {
                  SrcRange = v;
                }});
              pas.PasResolveEval.ReleaseEvalValue({get: function () {
                  return DestRange;
                }, set: function (v) {
                  DestRange = v;
                }});
            };
          } else if (C === pas.PasTree.TPasClassType) {
            if (pas.PasTree.TPasClassType.isPrototypeOf(ParamTypeEl)) {
              var $tmp6 = Decl.ObjKind;
              if ($tmp6 === pas.PasTree.TPasObjKind.okClass) {
                var $tmp7 = ParamTypeEl.ObjKind;
                if ($tmp7 === pas.PasTree.TPasObjKind.okClass) {}
                else if ($tmp7 === pas.PasTree.TPasObjKind.okInterface) {
                  if (!Decl.IsExternal) {
                    Call = this.CreateCallExpression(El);
                    Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfToClass]]);
                    Call.AddArg(Result);
                    Result = Call;
                    Call.AddArg(this.CreateReferencePathExpr(Decl,AContext,false,null));
                    return Result;
                  }}
                 else {
                  this.RaiseNotSupported(El,AContext,20180327221211,pas.PasTree.ObjKindNames[ParamTypeEl.ObjKind]);
                };
              } else if ($tmp6 === pas.PasTree.TPasObjKind.okInterface) {
                var $tmp8 = ParamTypeEl.ObjKind;
                if ($tmp8 === pas.PasTree.TPasObjKind.okClass) {
                  var $tmp9 = Decl.InterfaceType;
                  if ($tmp9 === pas.PasTree.TPasClassInterfaceType.citCom) {
                    Call = this.CreateCallExpression(El);
                    Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfQueryIntfT]]);
                    Call.AddArg(Result);
                    Result = Call;
                    Call.AddArg(this.CreateReferencePathExpr(Decl,AContext,false,null));
                    Result = this.CreateIntfRef(Result,AContext,El);
                  } else if ($tmp9 === pas.PasTree.TPasClassInterfaceType.citCorba) {
                    Call = this.CreateCallExpression(El);
                    Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGetIntfT]]);
                    Call.AddArg(Result);
                    Result = Call;
                    Call.AddArg(this.CreateReferencePathExpr(Decl,AContext,false,null));
                  } else {
                    this.RaiseNotSupported(El,AContext,20180416102614,pas.PasTree.InterfaceTypeNames[Decl.InterfaceType]);
                  };
                  return Result;
                } else if ($tmp8 === pas.PasTree.TPasObjKind.okInterface) {}
                else {
                  this.RaiseNotSupported(El,AContext,20180327221233,pas.PasTree.ObjKindNames[ParamTypeEl.ObjKind]);
                };
              } else {
                this.RaiseNotSupported(El,AContext,20180327221130,pas.PasTree.ObjKindNames[Decl.ObjKind]);
              };
            };
          };
          if (pas.PScanner.TBoolSwitch.bsObjectChecks in AContext.ScannerBoolSwitches) {
            if ((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) {
              if (C === pas.PasTree.TPasClassOfType) {
                aClassTypeEl = rtl.as(aResolver.ResolveAliasType(Decl.DestType),pas.PasTree.TPasClassType)}
               else aClassTypeEl = Decl;
              aName = this.CreateReferencePath(aClassTypeEl,AContext,$mod.TRefPathKind.rpkPathAndName,false,null);
              Call = this.CreateCallExpression(El);
              Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnAsExt]]);
              Call.AddArg(Result);
              Call.AddArg(this.CreatePrimitiveDotExpr(aName,El.Value));
              if (aClassTypeEl.IsExternal) {}
              else if (C === pas.PasTree.TPasClassOfType) {
                Call.AddArg(this.CreateLiteralNumber(El.Value,2))}
               else Call.AddArg(this.CreateLiteralNumber(El.Value,1));
              Result = Call;
            };
          } else if ((ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btCustom) && $mod.TResElDataPas2JSBaseType.isPrototypeOf(ParamTypeEl.FData)) {
            JSBaseType = ParamTypeEl.FData.JSBaseType;
            if (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
              if (((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) || (C === pas.PasTree.TPasRecordType)) {
                Call = this.CreateCallExpression(El);
                Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnGetObject]]);
                Call.AddArg(Result);
                Result = Call;
              };
            };
          };
          return Result;
        } else if (C.InheritsFrom(pas.PasTree.TPasVariable)) {
          aResolver.ComputeElement(Decl,{get: function () {
              return DeclResolved;
            }, set: function (v) {
              DeclResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
          if (pas.PasTree.TPasProcedureType.isPrototypeOf(DeclResolved.LoTypeEl)) {
            TargetProcType = DeclResolved.LoTypeEl}
           else this.RaiseNotSupported(El,AContext,20170217115244,"");
        } else if (C === pas.PasTree.TPasArgument) {
          aResolver.ComputeElement(Decl,{get: function () {
              return DeclResolved;
            }, set: function (v) {
              DeclResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
          if (pas.PasTree.TPasProcedureType.isPrototypeOf(DeclResolved.LoTypeEl)) {
            TargetProcType = DeclResolved.LoTypeEl}
           else this.RaiseNotSupported(El,AContext,20170328224020,"");
        } else if ((C === pas.PasTree.TPasProcedureType) || (C === pas.PasTree.TPasFunctionType)) {
          aResolver.ComputeElement(El.Value,{get: function () {
              return ValueResolved;
            }, set: function (v) {
              ValueResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
          if (pas.PasTree.TPasType.isPrototypeOf(ValueResolved.IdentEl) && pas.PasTree.TPasProcedureType.isPrototypeOf(aResolver.ResolveAliasType(ValueResolved.IdentEl))) {
            Param = El.Params[0];
            Result = this.ConvertElement(Param,AContext);
            return Result;
          } else {
            TargetProcType = Decl;
          };
        } else {
          this.RaiseNotSupported(El,AContext,20170215114337,"");
        };
        if (rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasResolver.TResolvedReferenceFlag.rrfNewInstance,pas.PasResolver.TResolvedReferenceFlag.rrfFreeInstance),Ref.Flags),{})) {
          Call = this.CreateFreeOrNewInstanceExpr(Ref,AContext);
          if (pas.PasResolver.TResolvedReferenceFlag.rrfNewInstance in Ref.Flags) {
            JsArrLit = this.CreateElement(pas.jstree.TJSArrayLiteral,El);
            Call.AddArg(JsArrLit);
            Elements = JsArrLit.FElements;
          } else Elements = Call.FArgs.FElements;
        };
      };
      NeedIntfRef = false;
      if (pas.PasTree.TPasFunctionType.isPrototypeOf(TargetProcType) && (aResolver !== null)) {
        TypeEl = aResolver.ResolveAliasType(TargetProcType.ResultEl.ResultType);
        if ((pas.PasTree.TPasClassType.isPrototypeOf(TypeEl) && (TypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && (TypeEl.InterfaceType === pas.PasTree.TPasClassInterfaceType.citCom)) NeedIntfRef = true;
      };
      if (Call === null) {
        Call = this.CreateCallExpression(El);
        Elements = Call.FArgs.FElements;
      };
      OldAccess = AContext.Access;
      try {
        AContext.Access = $mod.TCtxAccess.caRead;
        if (Call.FExpr === null) Call.FExpr = this.ConvertElement(El.Value,AContext);
        if (Call.FArgs === null) {
          Call.FArgs = this.CreateElement(pas.jstree.TJSArguments,El);
          Elements = Call.FArgs.FElements;
        } else if (Elements === null) this.RaiseInconsistency(20180720154413,El);
        this.CreateProcedureCallArgs(Elements,El,TargetProcType,AContext);
        CallArgs = Call.FArgs;
        if ((Elements.GetCount() === 0) && (CallArgs.FElements.GetCount() > 0)) {
          LastArg = CallArgs.FElements.GetE(CallArgs.FElements.GetCount() - 1);
          if (!pas.jstree.TJSArrayLiteral.isPrototypeOf(LastArg.FExpr)) this.RaiseNotSupported(El,AContext,20180720161317,"");
          JsArrLit = LastArg.FExpr;
          if (JsArrLit.FElements !== Elements) this.RaiseNotSupported(El,AContext,20180720161324,"");
          LastArg = rtl.freeLoc(LastArg);
        };
        if (CallArgs.FElements.GetCount() === 0) {
          CallArgs = rtl.freeLoc(CallArgs);
          Call.FArgs = null;
        };
        if (NeedIntfRef) Call = this.CreateIntfRef(Call,AContext,El);
        Result = Call;
      } finally {
        AContext.Access = OldAccess;
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.ConvertExternalConstructor = function (Left, Ref, ParamsExpr, AContext) {
      var Result = null;
      var Proc = null;
      var ExtName = "";
      var NewExpr = null;
      var Call = null;
      var LeftResolved = new pas.PasResolver.TPasResolverResult();
      var OldAccess = 0;
      var ExtNameEl = null;
      var WithData = null;
      Result = null;
      NewExpr = null;
      Call = null;
      ExtNameEl = null;
      try {
        Proc = rtl.as(Ref.FDeclaration,pas.PasTree.TPasConstructor);
        ExtNameEl = null;
        if (Left !== null) {
          if (AContext.Resolver !== null) {
            AContext.Resolver.ComputeElement(Left,{get: function () {
                return LeftResolved;
              }, set: function (v) {
                LeftResolved = v;
              }},{},null);
            if (LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btModule) {
              Left = null;
            };
          };
          if (Left !== null) {
            OldAccess = AContext.Access;
            AContext.Access = $mod.TCtxAccess.caRead;
            ExtNameEl = this.ConvertElement(Left,AContext);
            AContext.Access = OldAccess;
          };
        };
        if (ExtNameEl === null) {
          if (Ref.WithExprScope !== null) {
            WithData = rtl.as(Ref.WithExprScope,$mod.TPas2JSWithExprScope);
            ExtName = WithData.WithVarName;
          } else ExtName = rtl.as(Proc.FParent,pas.PasTree.TPasClassType).ExternalName;
          if (ExtName === "") this.DoError$2(20180511163944,4026,rtl.getResStr(pas.FPPas2Js,"sJSNewNotSupported"),[],ParamsExpr);
          ExtNameEl = this.CreatePrimitiveDotExpr(ExtName,Ref.FElement);
        };
        if (pas.SysUtils.CompareText(Proc.FName,"new") === 0) {
          NewExpr = this.CreateElement(pas.jstree.TJSNewMemberExpression,Ref.FElement);
          NewExpr.FMexpr = ExtNameEl;
          NewExpr.FArgs = this.CreateElement(pas.jstree.TJSArguments,Ref.FElement);
          ExtNameEl = null;
          if (ParamsExpr !== null) this.CreateProcedureCallArgs(NewExpr.FArgs.FElements,ParamsExpr,Proc.ProcType,AContext);
          Result = NewExpr;
          NewExpr = null;
        } else this.RaiseInconsistency(20170323083214,Proc);
      } finally {
        ExtNameEl = rtl.freeLoc(ExtNameEl);
        NewExpr = rtl.freeLoc(NewExpr);
        Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.ConvertTObjectFree_Bin = function (Bin, NameExpr, AContext) {
      var Self = this;
      var Result = null;
      function CreateCallRTLFree(Obj, Prop) {
        var Result = null;
        var Call = null;
        Call = Self.CreateCallExpression(Bin.right);
        Call.FExpr = Self.CreateMemberExpression([Self.GetBuildInNames($mod.TPas2JSBuiltInName.pbivnRTL),Self.GetBuildInNames($mod.TPas2JSBuiltInName.pbifnFreeVar)]);
        Call.FArgs.AddElement(Obj);
        Call.FArgs.AddElement(Prop);
        Result = Call;
        return Result;
      };
      var LeftJS = null;
      var Obj = null;
      var Prop = null;
      var Getter = null;
      var Setter = null;
      var DotExpr = null;
      var BracketJS = null;
      var aName = "";
      Result = null;
      LeftJS = Self.ConvertElement(Bin.left,AContext);
      try {
        if (pas.jstree.TJSPrimaryExpressionIdent.isPrototypeOf(LeftJS)) {
          aName = LeftJS.FName;
          if (pas.System.Pos(".",aName) > 0) Self.RaiseInconsistency(20170516173832,Bin.left);
          Getter = LeftJS;
          Setter = Self.ClonePrimaryExpression(LeftJS,Bin.left);
          Result = Self.CreateCallRTLFreeLoc(Setter,Getter,NameExpr);
        } else if (pas.jstree.TJSDotMemberExpression.isPrototypeOf(LeftJS)) {
          DotExpr = LeftJS;
          Obj = DotExpr.FMexpr;
          DotExpr.FMexpr = null;
          Prop = Self.CreateLiteralJSString(Bin.right,DotExpr.FName);
          pas.SysUtils.FreeAndNil({get: function () {
              return LeftJS;
            }, set: function (v) {
              LeftJS = v;
            }});
          Result = CreateCallRTLFree(Obj,Prop);
        } else if (pas.jstree.TJSBracketMemberExpression.isPrototypeOf(LeftJS)) {
          BracketJS = LeftJS;
          Obj = BracketJS.FMexpr;
          BracketJS.FMexpr = null;
          Prop = BracketJS.FName;
          BracketJS.FName = null;
          pas.SysUtils.FreeAndNil({get: function () {
              return LeftJS;
            }, set: function (v) {
              LeftJS = v;
            }});
          Result = CreateCallRTLFree(Obj,Prop);
        } else Self.RaiseNotSupported(Bin.left,AContext,20170516164659,"invalid scope for Free");
      } finally {
        if (Result === null) LeftJS = rtl.freeLoc(LeftJS);
      };
      return Result;
    };
    this.ConvertTObjectFree_With = function (NameExpr, AContext) {
      var Result = null;
      var WithExprScope = null;
      var Getter = null;
      var Setter = null;
      Result = null;
      WithExprScope = rtl.as(NameExpr.FData.WithExprScope,$mod.TPas2JSWithExprScope);
      if (WithExprScope === null) this.RaiseInconsistency(20181027133210,NameExpr);
      if (AContext.Resolver.GetNewInstanceExpr(WithExprScope.Expr) !== null) {
        Getter = this.CreatePrimitiveDotExpr(WithExprScope.WithVarName,WithExprScope.Expr);
        Setter = this.CreatePrimitiveDotExpr(WithExprScope.WithVarName,WithExprScope.Expr);
        Result = this.CreateCallRTLFreeLoc(Setter,Getter,NameExpr);
        return Result;
      };
      this.RaiseInconsistency(20170517092248,NameExpr);
      return Result;
    };
    this.ConvertTypeCastToBaseType = function (El, AContext, ToBaseTypeData) {
      var Self = this;
      var Result = null;
      var to_bt = 0;
      var Param = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var JSBaseType = 0;
      var JSBaseTypeData = null;
      function IsParamPas2JSBaseType() {
        var Result = false;
        var TypeEl = null;
        if (ParamResolved.BaseType !== pas.PasResolver.TResolverBaseType.btCustom) return false;
        TypeEl = ParamResolved.LoTypeEl;
        if (TypeEl.$class.ClassType() !== pas.PasTree.TPasUnresolvedSymbolRef) return false;
        if (!$mod.TResElDataPas2JSBaseType.isPrototypeOf(TypeEl.FData)) return false;
        Result = true;
        JSBaseTypeData = TypeEl.FData;
        JSBaseType = JSBaseTypeData.JSBaseType;
        return Result;
      };
      function CreateBitWiseAnd(Value, Mask, Shift) {
        var Result = null;
        var AndEx = null;
        var Hex = "";
        var i = 0;
        var ShiftEx = null;
        AndEx = Self.CreateElement(pas.jstree.TJSBitwiseAndExpression,El);
        Result = AndEx;
        AndEx.FA = Value;
        AndEx.FB = Self.CreateLiteralNumber(El,Mask);
        if (Mask > 999999) {
          Hex = rtl.hexStr(Mask,8);
          i = 1;
          while (i < 8) if (Hex.charAt(i - 1) === "0") {
            i += 1}
           else break;
          Hex = pas.System.Copy(Hex,i,8);
          AndEx.FB.FValue.FCustomValue = "0x" + Hex;
        };
        if (Shift > 0) {
          ShiftEx = Self.CreateElement(pas.jstree.TJSLShiftExpression,El);
          ShiftEx.FA = Result;
          Result = ShiftEx;
          ShiftEx.FB = Self.CreateLiteralNumber(El,Shift);
          ShiftEx = Self.CreateElement(pas.jstree.TJSRShiftExpression,El);
          ShiftEx.FA = Result;
          Result = ShiftEx;
          ShiftEx.FB = Self.CreateLiteralNumber(El,Shift);
        };
        return Result;
      };
      var NotEqual = null;
      var CondExpr = null;
      var Call = null;
      var NotExpr = null;
      var AddExpr = null;
      var TypeEl = null;
      var C = null;
      var Int = 0;
      var MinVal = 0;
      var MaxVal = 0;
      var aResolver = null;
      var ShiftEx = null;
      Result = null;
      Param = El.Params[0];
      aResolver = AContext.Resolver;
      aResolver.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      JSBaseTypeData = null;
      JSBaseType = $mod.TPas2jsBaseType.pbtNone;
      to_bt = ToBaseTypeData.BaseType;
      if (to_bt in $mod.btAllJSInteger) {
        if (ParamResolved.BaseType in $mod.btAllJSInteger) {
          Result = Self.ConvertElement(Param,AContext);
          if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) {
            if (to_bt !== pas.PasResolver.TResolverBaseType.btCurrency) Result = Self.CreateMathFloor(Param,Self.CreateDivideNumber(Param,Result,10000));
          } else if (to_bt === pas.PasResolver.TResolverBaseType.btCurrency) Result = Self.CreateMulNumber(Param,Result,10000);
          if ((to_bt !== pas.PasResolver.TResolverBaseType.btIntDouble) && !pas.jstree.TJSLiteral.isPrototypeOf(Result)) {
            if (pas.PScanner.TBoolSwitch.bsRangeChecks in AContext.ScannerBoolSwitches) {
              if (!aResolver.GetIntegerRange(to_bt,{get: function () {
                  return MinVal;
                }, set: function (v) {
                  MinVal = v;
                }},{get: function () {
                  return MaxVal;
                }, set: function (v) {
                  MaxVal = v;
                }})) Self.RaiseNotSupported(Param,AContext,20180425131839,"");
              Call = Self.CreateCallExpression(El);
              Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRangeCheckInt],El);
              Call.AddArg(Result);
              Result = Call;
              Call.AddArg(Self.CreateLiteralNumber(El,MinVal));
              Call.AddArg(Self.CreateLiteralNumber(El,MaxVal));
            } else {
              var $tmp1 = to_bt;
              if ($tmp1 === pas.PasResolver.TResolverBaseType.btByte) {
                if (ParamResolved.BaseType !== pas.PasResolver.TResolverBaseType.btByte) Result = CreateBitWiseAnd(Result,255,0)}
               else if ($tmp1 === pas.PasResolver.TResolverBaseType.btShortInt) {
                if (ParamResolved.BaseType !== pas.PasResolver.TResolverBaseType.btShortInt) Result = CreateBitWiseAnd(Result,255,24)}
               else if ($tmp1 === pas.PasResolver.TResolverBaseType.btWord) {
                if (!(ParamResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btByte,pas.PasResolver.TResolverBaseType.btWord))) Result = CreateBitWiseAnd(Result,65535,0)}
               else if ($tmp1 === pas.PasResolver.TResolverBaseType.btSmallInt) {
                if (!(ParamResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btShortInt,pas.PasResolver.TResolverBaseType.btSmallInt))) Result = CreateBitWiseAnd(Result,65535,16)}
               else if ($tmp1 === pas.PasResolver.TResolverBaseType.btLongWord) {
                if (!(ParamResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btByte,pas.PasResolver.TResolverBaseType.btWord,pas.PasResolver.TResolverBaseType.btLongWord,pas.PasResolver.TResolverBaseType.btUIntSingle))) {
                  ShiftEx = Self.CreateElement(pas.jstree.TJSURShiftExpression,El);
                  ShiftEx.FA = Result;
                  ShiftEx.FB = Self.CreateLiteralNumber(El,0);
                  Result = ShiftEx;
                }}
               else if ($tmp1 === pas.PasResolver.TResolverBaseType.btLongint) if (!(ParamResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btShortInt,pas.PasResolver.TResolverBaseType.btSmallInt,pas.PasResolver.TResolverBaseType.btLongint,pas.PasResolver.TResolverBaseType.btIntSingle))) Result = CreateBitWiseAnd(Result,0xffffffff,0);
            };
          };
          return Result;
        } else if (ParamResolved.BaseType in $mod.btAllJSBooleans) {
          Result = Self.ConvertElement(Param,AContext);
          CondExpr = Self.CreateElement(pas.jstree.TJSConditionalExpression,El);
          CondExpr.FA = Result;
          if (to_bt === pas.PasResolver.TResolverBaseType.btCurrency) {
            CondExpr.FB = Self.CreateLiteralNumber(El,10000)}
           else CondExpr.FB = Self.CreateLiteralNumber(El,1);
          CondExpr.FC = Self.CreateLiteralNumber(El,0);
          Result = CondExpr;
          return Result;
        } else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          if (ParamResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
            Result = Self.ConvertElement(Param,AContext);
            if (to_bt === pas.PasResolver.TResolverBaseType.btCurrency) Result = Self.CreateMulNumber(Param,Result,10000);
            return Result;
          };
        } else if (IsParamPas2JSBaseType()) {
          if (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
            Result = Self.ConvertElement(Param,AContext);
            if (to_bt === pas.PasResolver.TResolverBaseType.btCurrency) Result = Self.CreateMulNumber(Param,Result,10000);
            Result = Self.CreateMathFloor(El,Result);
            return Result;
          };
        } else if ((to_bt === pas.PasResolver.TResolverBaseType.btCurrency) && (ParamResolved.BaseType in $mod.btAllJSFloats)) {
          Result = Self.ConvertElement(Param,AContext);
          Result = Self.CreateMulNumber(Param,Result,10000);
          return Result;
        };
      } else if (to_bt in $mod.btAllJSBooleans) {
        if (ParamResolved.BaseType in $mod.btAllJSBooleans) {
          Result = Self.ConvertElement(Param,AContext);
          return Result;
        } else if (ParamResolved.BaseType in $mod.btAllJSInteger) {
          Result = Self.ConvertElement(Param,AContext);
          NotEqual = Self.CreateElement(pas.jstree.TJSEqualityExpressionNE,El);
          NotEqual.FA = Result;
          NotEqual.FB = Self.CreateLiteralNumber(El,0);
          Result = NotEqual;
          return Result;
        } else if (IsParamPas2JSBaseType()) {
          if (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
            Result = Self.ConvertElement(Param,AContext);
            NotExpr = Self.CreateElement(pas.jstree.TJSUnaryNotExpression,El);
            NotExpr.FA = Self.CreateElement(pas.jstree.TJSEqualityExpressionEQ,El);
            NotExpr.FA.FA = Result;
            NotExpr.FA.FB = Self.CreateLiteralBoolean(El,false);
            Result = NotExpr;
            return Result;
          };
        };
      } else if (to_bt in $mod.btAllJSFloats) {
        if (ParamResolved.BaseType in rtl.unionSet($mod.btAllJSFloats,$mod.btAllJSInteger)) {
          Result = Self.ConvertElement(Param,AContext);
          if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) Result = Self.CreateDivideNumber(El,Result,10000);
          return Result;
        } else if (IsParamPas2JSBaseType()) {
          if (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
            Result = Self.ConvertElement(Param,AContext);
            Call = Self.CreateCallExpression(El);
            Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnGetNumber]]);
            Call.AddArg(Result);
            Result = Call;
            return Result;
          };
        };
      } else if (to_bt in $mod.btAllJSStrings) {
        if (ParamResolved.BaseType in $mod.btAllJSStringAndChars) {
          Result = Self.ConvertElement(Param,AContext);
          return Result;
        } else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btPointer) {
          Result = Self.ConvertElement(Param,AContext);
          return Result;
        } else if (IsParamPas2JSBaseType()) {
          if (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
            Result = Self.ConvertElement(Param,AContext);
            AddExpr = Self.CreateElement(pas.jstree.TJSAdditiveExpressionPlus,El);
            AddExpr.FA = Self.CreateLiteralString(El,"");
            AddExpr.FB = Result;
            Result = AddExpr;
            return Result;
          };
        };
      } else if (to_bt === pas.PasResolver.TResolverBaseType.btChar) {
        if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btChar) {
          Result = Self.ConvertElement(Param,AContext);
          return Result;
        } else if ((ParamResolved.BaseType in $mod.btAllJSInteger) || ((ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) && (aResolver.ResolveAliasType(ParamResolved.LoTypeEl).$class.ClassType() === pas.PasTree.TPasEnumType))) {
          Result = Self.ConvertElement(Param,AContext);
          if ((Self.IsLiteralInteger(Result,{get: function () {
              return Int;
            }, set: function (v) {
              Int = v;
            }}) && (Int >= 0)) && (Int <= 0xffff)) {
            pas.SysUtils.FreeAndNil({get: function () {
                return Result;
              }, set: function (v) {
                Result = v;
              }});
            Result = Self.CreateLiteralJSString(Param,String.fromCharCode(Int));
          } else {
            Result = Self.CreateCallFromCharCode(Result,El);
          };
          return Result;
        } else if ((ParamResolved.BaseType in rtl.unionSet(pas.PasResolver.btArrayRangeTypes,rtl.createSet(pas.PasResolver.TResolverBaseType.btRange))) || (IsParamPas2JSBaseType() && (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue))) {
          Result = Self.ConvertElement(Param,AContext);
          if (Self.IsLiteralInteger(Result,{get: function () {
              return Int;
            }, set: function (v) {
              Int = v;
            }})) {
            if ((Int >= 0) && (Int <= 0xffff)) {
              pas.SysUtils.FreeAndNil({get: function () {
                  return Result;
                }, set: function (v) {
                  Result = v;
                }});
              Result = Self.CreateLiteralJSString(Param,String.fromCharCode(Int));
            } else {
              Result = Self.CreateCallFromCharCode(Result,El);
            };
          } else {
            Call = Self.CreateCallExpression(El);
            Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnGetChar]]);
            Call.AddArg(Result);
            Result = Call;
          };
          return Result;
        };
      } else if (to_bt === pas.PasResolver.TResolverBaseType.btPointer) {
        if (IsParamPas2JSBaseType()) {
          if (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
            Result = Self.ConvertElement(Param,AContext);
            return Result;
          };
        } else if (ParamResolved.BaseType in $mod.btAllJSStrings) {
          Result = Self.ConvertElement(Param,AContext);
          return Result;
        } else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          Result = Self.ConvertElement(Param,AContext);
          return Result;
        };
      } else if ((to_bt === pas.PasResolver.TResolverBaseType.btCustom) && $mod.TResElDataPas2JSBaseType.isPrototypeOf(ToBaseTypeData)) {
        JSBaseType = ToBaseTypeData.JSBaseType;
        if (JSBaseType === $mod.TPas2jsBaseType.pbtJSValue) {
          Result = Self.ConvertElement(Param,AContext);
          if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
            TypeEl = ParamResolved.LoTypeEl;
            C = TypeEl.$class.ClassType();
            if (C === pas.PasTree.TPasClassType) {
              Call = Self.CreateCallExpression(El);
              Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnGetObject]]);
              Call.AddArg(Result);
              Result = Call;
            };
          };
          return Result;
        };
      };
      Self.RaiseNotSupported(El,AContext,20170325161150,"");
      return Result;
    };
    this.ConvertArrayOrSetLiteral = function (El, AContext) {
      var Self = this;
      var Result = null;
      var Call = null;
      var ArgContext = null;
      function AddArg(Expr) {
        Call.AddArg(Self.CreateSetLiteralElement(Expr,ArgContext));
      };
      var i = 0;
      var ArgEl = null;
      var aResolver = null;
      var ArrayType = null;
      if (El.Kind !== pas.PasTree.TPasExprKind.pekSet) Self.RaiseInconsistency(20170209112737,El);
      if (AContext.Access !== $mod.TCtxAccess.caRead) Self.DoError$2(20170209112926,4008,rtl.getResStr(pas.FPPas2Js,"sCantWriteSetLiteral"),[],El);
      aResolver = AContext.Resolver;
      if (aResolver !== null) {
        ArrayType = aResolver.IsArrayExpr(El);
        if (ArrayType !== null) {
          Result = Self.CreateArrayInit(ArrayType,El,El,AContext);
          return Result;
        };
      };
      if (rtl.length(El.Params) === 0) {
        Result = Self.CreateElement(pas.jstree.TJSObjectLiteral,El)}
       else {
        Result = null;
        ArgContext = AContext.GetNonDotContext();
        Call = Self.CreateCallExpression(El);
        try {
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Create]]);
          for (var $l1 = 0, $end2 = rtl.length(El.Params) - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            ArgEl = El.Params[i];
            if ((ArgEl.$class.ClassType() === pas.PasTree.TBinaryExpr) && (ArgEl.Kind === pas.PasTree.TPasExprKind.pekRange)) {
              Call.AddArg(Self.CreateLiteralNull(ArgEl));
              AddArg(ArgEl.left);
              AddArg(ArgEl.right);
            } else AddArg(ArgEl);
          };
          Result = Call;
        } finally {
          if (Result === null) Call = rtl.freeLoc(Call);
        };
      };
      return Result;
    };
    this.ConvertBuiltIn_Length = function (El, AContext) {
      var Result = null;
      var Arg = null;
      var Param = null;
      var RangeEl = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var Ranges = [];
      var Call = null;
      var RgLen = 0;
      Result = null;
      Param = El.Params[0];
      AContext.Resolver.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
        if (pas.PasTree.TPasArrayType.isPrototypeOf(ParamResolved.LoTypeEl)) {
          Ranges = ParamResolved.LoTypeEl.Ranges;
          if (rtl.length(Ranges) > 0) {
            if (rtl.length(Ranges) > 1) this.RaiseNotSupported(El,AContext,20170223131042,"");
            RangeEl = Ranges[0];
            RgLen = AContext.Resolver.GetRangeLength(RangeEl);
            Result = this.CreateLiteralNumber(El,RgLen);
            return Result;
          } else {
            Result = this.ConvertElement(El.Params[0],AContext);
            Call = this.CreateCallExpression(El);
            Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Length]]);
            Call.AddArg(Result);
            Result = Call;
            return Result;
          };
        };
      };
      Arg = this.ConvertElement(Param,AContext);
      Result = this.CreateDotExpression(El,Arg,this.CreatePrimitiveDotExpr("length",El),false);
      return Result;
    };
    this.ConvertBuiltIn_SetLength = function (El, AContext) {
      var Result = null;
      var Param0 = null;
      var ResolvedParam0 = new pas.PasResolver.TPasResolverResult();
      var ArrayType = null;
      var Call = null;
      var ValInit = null;
      var AssignContext = null;
      var ElType = null;
      var TypeEl = null;
      var i = 0;
      Result = null;
      Param0 = El.Params[0];
      if (AContext.Access !== $mod.TCtxAccess.caRead) this.RaiseInconsistency(20170213213621,El);
      AContext.Resolver.ComputeElement(Param0,{get: function () {
          return ResolvedParam0;
        }, set: function (v) {
          ResolvedParam0 = v;
        }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
      TypeEl = ResolvedParam0.LoTypeEl;
      if (pas.PasTree.TPasArrayType.isPrototypeOf(TypeEl)) {
        ArrayType = TypeEl;
        AssignContext = $mod.TAssignContext.$create("Create$1",[El,null,AContext]);
        try {
          AContext.Resolver.ComputeElement(Param0,{p: AssignContext, get: function () {
              return this.p.LeftResolved;
            }, set: function (v) {
              this.p.LeftResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
          AssignContext.RightResolved = new pas.PasResolver.TPasResolverResult(ResolvedParam0);
          Call = this.CreateCallExpression(El);
          AssignContext.RightSide = Call;
          Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_SetLength]]);
          Call.AddArg(this.ConvertElement(Param0,AContext));
          for (var $l1 = 3, $end2 = rtl.length(El.Params); $l1 <= $end2; $l1++) {
            i = $l1;
            ElType = AContext.Resolver.ResolveAliasType(ArrayType.ElType);
            ArrayType = rtl.as(ElType,pas.PasTree.TPasArrayType);
          };
          ElType = AContext.Resolver.ResolveAliasType(ArrayType.ElType);
          if (ElType.$class.ClassType() === pas.PasTree.TPasRecordType) {
            ValInit = this.CreateReferencePathExpr(ElType,AContext,false,null)}
           else ValInit = this.CreateValInit(ElType,null,Param0,AContext);
          Call.AddArg(ValInit);
          for (var $l3 = 1, $end4 = rtl.length(El.Params) - 1; $l3 <= $end4; $l3++) {
            i = $l3;
            Call.AddArg(this.ConvertElement(El.Params[i],AContext));
          };
          Result = this.CreateAssignStatement(Param0,AssignContext);
        } finally {
          rtl.free(AssignContext,"RightSide");
          AssignContext = rtl.freeLoc(AssignContext);
        };
      } else if (ResolvedParam0.BaseType === pas.PasResolver.TResolverBaseType.btString) {
        AssignContext = $mod.TAssignContext.$create("Create$1",[El,null,AContext]);
        try {
          AContext.Resolver.ComputeElement(Param0,{p: AssignContext, get: function () {
              return this.p.LeftResolved;
            }, set: function (v) {
              this.p.LeftResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
          AssignContext.RightResolved = new pas.PasResolver.TPasResolverResult(AssignContext.LeftResolved);
          Call = this.CreateCallExpression(El);
          AssignContext.RightSide = Call;
          Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnStringSetLength]]);
          Call.AddArg(this.ConvertElement(Param0,AContext));
          Call.AddArg(this.ConvertElement(El.Params[1],AContext));
          Result = this.CreateAssignStatement(Param0,AssignContext);
        } finally {
          rtl.free(AssignContext,"RightSide");
          AssignContext = rtl.freeLoc(AssignContext);
        };
      } else this.RaiseNotSupported(El.Value,AContext,20170130141026,"setlength " + pas.PasResolver.GetResolverResultDbg(ResolvedParam0));
      return Result;
    };
    this.ConvertBuiltIn_ExcludeInclude = function (El, AContext, IsInclude) {
      var Result = null;
      var Call = null;
      var Param0 = null;
      var AssignContext = null;
      var FunName = "";
      Result = null;
      Param0 = El.Params[0];
      AssignContext = $mod.TAssignContext.$create("Create$1",[El,null,AContext]);
      try {
        AContext.Resolver.ComputeElement(Param0,{p: AssignContext, get: function () {
            return this.p.LeftResolved;
          }, set: function (v) {
            this.p.LeftResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        AssignContext.RightResolved = new pas.PasResolver.TPasResolverResult(AssignContext.LeftResolved);
        Call = this.CreateCallExpression(El);
        AssignContext.RightSide = Call;
        if (IsInclude) {
          FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Include]}
         else FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Exclude];
        Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],FunName]);
        Call.AddArg(this.ConvertElement(Param0,AContext));
        Call.AddArg(this.ConvertElement(El.Params[1],AContext));
        Result = this.CreateAssignStatement(Param0,AssignContext);
      } finally {
        rtl.free(AssignContext,"RightSide");
        AssignContext = rtl.freeLoc(AssignContext);
      };
      return Result;
    };
    this.ConvertBuiltInContinue = function (El, AContext) {
      var Result = null;
      if (AContext === null) ;
      Result = this.CreateElement(pas.jstree.TJSContinueStatement,El);
      return Result;
    };
    this.ConvertBuiltInBreak = function (El, AContext) {
      var Result = null;
      if (AContext === null) ;
      Result = this.CreateElement(pas.jstree.TJSBreakStatement,El);
      return Result;
    };
    this.ConvertBuiltIn_Exit = function (El, AContext) {
      var Result = null;
      var ProcEl = null;
      var Scope = null;
      var VarName = "";
      var FuncContext = null;
      var AssignSt = null;
      var St = null;
      ProcEl = El.FParent;
      while ((ProcEl !== null) && !pas.PasTree.TPasProcedure.isPrototypeOf(ProcEl)) ProcEl = ProcEl.FParent;
      Result = this.CreateElement(pas.jstree.TJSReturnStatement,El);
      if (pas.PasTree.TParamsExpr.isPrototypeOf(El) && (rtl.length(El.Params) > 0)) {
        Result.FExpr = this.ConvertExpression(El.Params[0],AContext);
      } else {
        if (pas.PasTree.TPasFunction.isPrototypeOf(ProcEl)) {
          Scope = rtl.as(ProcEl.FData,$mod.TPas2JSProcedureScope);
          VarName = Scope.ResultVarName;
          if (VarName === "") VarName = pas.PasResolver.ResolverResultVar;
          Result.FExpr = this.CreatePrimitiveDotExpr(VarName,El);
        };
      };
      FuncContext = AContext.GetFunctionContext();
      if ((FuncContext !== null) && FuncContext.ResultNeedsIntfRelease) {
        AssignSt = this.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
        AssignSt.FLHS = this.CreatePrimitiveDotExpr(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnProcOk],El);
        AssignSt.FExpr = this.CreateLiteralBoolean(El,true);
        St = this.CreateElement(pas.jstree.TJSStatementList,El);
        St.FA = AssignSt;
        St.FB = Result;
        Result = St;
      };
      return Result;
    };
    this.ConvertBuiltIn_IncDec = function (El, AContext) {
      var Result = null;
      var AssignSt = null;
      var Expr = null;
      var SrcEl = null;
      var ExprResolved = new pas.PasResolver.TPasResolverResult();
      var ExprArg = null;
      var LHS = null;
      var ValueJS = null;
      var Call = null;
      var IsInc = false;
      var AddJS = null;
      var AssignContext = null;
      Result = null;
      IsInc = pas.SysUtils.CompareText(rtl.as(El.Value,pas.PasTree.TPrimitiveExpr).Value,"inc") === 0;
      Expr = El.Params[0];
      AContext.Resolver.ComputeElement(Expr,{get: function () {
          return ExprResolved;
        }, set: function (v) {
          ExprResolved = v;
        }},{},null);
      if (rtl.length(El.Params) === 1) {
        ValueJS = this.CreateLiteralNumber(El,1)}
       else ValueJS = this.ConvertExpression(El.Params[1],AContext);
      SrcEl = El.Value;
      AssignSt = null;
      Call = null;
      AssignContext = null;
      LHS = null;
      try {
        if (pas.PasTree.TPasArgument.isPrototypeOf(ExprResolved.IdentEl)) {
          ExprArg = ExprResolved.IdentEl;
          if (ExprArg.Access in rtl.createSet(pas.PasTree.TArgumentAccess.argVar,pas.PasTree.TArgumentAccess.argOut)) {
            Call = this.CreateCallExpression(SrcEl);
            Call.FExpr = this.CreateDotExpression(SrcEl,this.CreateIdentifierExpr(ExprResolved.IdentEl,AContext),this.CreatePrimitiveDotExpr($impl.TempRefObjSetterName,SrcEl),false);
            if (IsInc) {
              AddJS = this.CreateElement(pas.jstree.TJSAdditiveExpressionPlus,SrcEl)}
             else AddJS = this.CreateElement(pas.jstree.TJSAdditiveExpressionMinus,SrcEl);
            Call.AddArg(AddJS);
            AddJS.FA = this.CreateElement(pas.jstree.TJSCallExpression,SrcEl);
            AddJS.FA.FExpr = this.CreateDotExpression(SrcEl,this.CreateIdentifierExpr(ExprResolved.IdentEl,AContext),this.CreatePrimitiveDotExpr($impl.TempRefObjGetterName,SrcEl),false);
            AddJS.FB = ValueJS;
            ValueJS = null;
            Result = Call;
            return Result;
          };
        } else if (pas.PasTree.TPasProperty.isPrototypeOf(ExprResolved.IdentEl)) {
          this.RaiseNotSupported(Expr,AContext,20170501151316,"");
        };
        AssignContext = $mod.TAssignContext.$create("Create$1",[Expr,null,AContext]);
        AContext.Resolver.ComputeElement(Expr,{p: AssignContext, get: function () {
            return this.p.LeftResolved;
          }, set: function (v) {
            this.p.LeftResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        pas.PasResolver.SetResolverValueExpr({p: AssignContext, get: function () {
            return this.p.RightResolved;
          }, set: function (v) {
            this.p.RightResolved = v;
          }},AssignContext.LeftResolved.BaseType,AssignContext.LeftResolved.LoTypeEl,AssignContext.LeftResolved.HiTypeEl,Expr,rtl.createSet(pas.PasResolver.TPasResolverResultFlag.rrfReadable));
        AssignContext.RightSide = ValueJS;
        ValueJS = null;
        LHS = this.ConvertElement(Expr,AssignContext);
        if (AssignContext.Call !== null) {
          this.RaiseNotSupported(El,AContext,20181101154351,"");
        } else {
          if (AssignContext.RightSide === null) this.RaiseInconsistency(20180622211919,El);
        };
        if (IsInc) {
          AssignSt = this.CreateElement(pas.jstree.TJSAddEqAssignStatement,SrcEl)}
         else AssignSt = this.CreateElement(pas.jstree.TJSSubEqAssignStatement,SrcEl);
        AssignSt.FLHS = LHS;
        LHS = null;
        AssignSt.FExpr = AssignContext.RightSide;
        AssignContext.RightSide = null;
        Result = AssignSt;
      } finally {
        ValueJS = rtl.freeLoc(ValueJS);
        if (Result === null) {
          AssignSt = rtl.freeLoc(AssignSt);
          Call = rtl.freeLoc(Call);
          LHS = rtl.freeLoc(LHS);
        };
        if (AssignContext !== null) {
          rtl.free(AssignContext,"RightSide");
          AssignContext = rtl.freeLoc(AssignContext);
        };
      };
      return Result;
    };
    this.ConvertBuiltIn_Assigned = function (El, AContext) {
      var Result = null;
      var NE = null;
      var Param = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var C = null;
      var GT = null;
      var Call = null;
      Result = null;
      if (AContext.Resolver === null) this.RaiseInconsistency(20170210105235,El);
      Param = El.Params[0];
      AContext.Resolver.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProcType),null);
      if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btPointer) {
        Result = this.ConvertElement(Param,AContext);
        NE = this.CreateElement(pas.jstree.TJSEqualityExpressionNE,El);
        NE.FA = Result;
        NE.FB = this.CreateLiteralNull(El);
        Result = NE;
      } else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
        C = ParamResolved.LoTypeEl.$class.ClassType();
        if (((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasClassOfType)) || C.InheritsFrom(pas.PasTree.TPasProcedureType)) {
          Result = this.ConvertElement(Param,AContext);
          NE = this.CreateElement(pas.jstree.TJSEqualityExpressionNE,El);
          NE.FA = Result;
          NE.FB = this.CreateLiteralNull(El);
          Result = NE;
        } else if (C === pas.PasTree.TPasArrayType) {
          Result = this.ConvertElement(Param,AContext);
          GT = this.CreateElement(pas.jstree.TJSRelationalExpressionGT,El);
          Call = this.CreateCallExpression(El);
          Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Length]]);
          Call.AddArg(Result);
          GT.FA = Call;
          GT.FB = this.CreateLiteralNumber(El,0);
          Result = GT;
        } else this.RaiseNotSupported(El,AContext,20170328124606,"");
      };
      return Result;
    };
    this.ConvertBuiltIn_Chr = function (El, AContext) {
      var Result = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var Param = null;
      Result = null;
      if (AContext.Resolver === null) this.RaiseInconsistency(20170325185847,El);
      Param = El.Params[0];
      AContext.Resolver.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (ParamResolved.BaseType in $mod.btAllJSInteger) {
        Result = this.ConvertElement(Param,AContext);
        Result = this.CreateCallFromCharCode(Result,El);
        return Result;
      };
      this.DoError$2(20170325185906,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["integer",AContext.Resolver.GetResolverResultDescription(ParamResolved,false)],Param);
      return Result;
    };
    this.ConvertBuiltIn_Ord = function (El, AContext) {
      var Result = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var SubParamResolved = new pas.PasResolver.TPasResolverResult();
      var Param = null;
      var SubParam = null;
      var Call = null;
      var SubParams = null;
      var SubParamJS = null;
      var Minus = null;
      var Add = null;
      Result = null;
      if (AContext.Resolver === null) this.RaiseInconsistency(20170210105235,El);
      Param = El.Params[0];
      AContext.Resolver.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btChar) {
        if (pas.PasTree.TParamsExpr.isPrototypeOf(Param)) {
          SubParams = Param;
          if (SubParams.Kind === pas.PasTree.TPasExprKind.pekArrayParams) {
            SubParam = SubParams.Value;
            AContext.Resolver.ComputeElement(SubParam,{get: function () {
                return SubParamResolved;
              }, set: function (v) {
                SubParamResolved = v;
              }},{},null);
            if (SubParamResolved.BaseType in $mod.btAllJSStrings) {
              SubParamJS = this.ConvertElement(SubParam,AContext);
              Call = null;
              try {
                Call = this.CreateCallExpression(El);
                Call.FExpr = this.CreateDotExpression(El,SubParamJS,this.CreatePrimitiveDotExpr("charCodeAt",El),false);
                Minus = this.CreateElement(pas.jstree.TJSAdditiveExpressionMinus,Param);
                Call.AddArg(Minus);
                if (rtl.length(SubParams.Params) !== 1) this.RaiseInconsistency(20170405231706,El);
                Minus.FA = this.ConvertElement(SubParams.Params[0],AContext);
                Minus.FB = this.CreateLiteralNumber(Param,1);
                Result = Call;
              } finally {
                if (Result === null) Call = rtl.freeLoc(Call);
              };
              return Result;
            };
          };
        };
        Result = this.ConvertElement(Param,AContext);
        Result = this.CreateCallCharCodeAt(Result,0,El);
        return Result;
      } else if (ParamResolved.BaseType in $mod.btAllJSBooleans) {
        Result = this.ConvertElement(Param,AContext);
        Add = this.CreateElement(pas.jstree.TJSAdditiveExpressionPlus,El);
        Add.FA = Result;
        Add.FB = this.CreateLiteralNumber(El,0);
        Result = Add;
        return Result;
      } else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
        if (ParamResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
          Result = this.ConvertElement(Param,AContext);
          return Result;
        };
      };
      this.DoError$2(20170210105339,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["enum",AContext.Resolver.GetResolverResultDescription(ParamResolved,false)],Param);
      return Result;
    };
    this.ConvertBuiltIn_LowHigh = function (El, AContext, IsLow) {
      var Self = this;
      var Result = null;
      function CreateEnumValue(TypeEl) {
        var EnumValue = null;
        if (IsLow) {
          EnumValue = rtl.getObject(TypeEl.Values.Get(0))}
         else EnumValue = rtl.getObject(TypeEl.Values.Get(TypeEl.Values.FCount - 1));
        Result = Self.CreateReferencePathExpr(EnumValue,AContext,false,null);
      };
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      var Param = null;
      var TypeEl = null;
      var Ranges = [];
      var Value = null;
      var Call = null;
      var MinusExpr = null;
      var MinVal = 0;
      var MaxVal = 0;
      Result = null;
      if (AContext.Resolver === null) Self.RaiseInconsistency(20170210120659,El);
      Param = El.Params[0];
      AContext.Resolver.ComputeElement(Param,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},{},null);
      var $tmp1 = ResolvedEl.BaseType;
      if ($tmp1 === pas.PasResolver.TResolverBaseType.btContext) {
        TypeEl = ResolvedEl.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
          CreateEnumValue(TypeEl);
          return Result;
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasSetType) {
          if (TypeEl.EnumType !== null) {
            TypeEl = TypeEl.EnumType;
            CreateEnumValue(TypeEl);
            return Result;
          };
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
          Ranges = TypeEl.Ranges;
          if (IsLow) {
            if (rtl.length(Ranges) === 0) {
              Result = Self.CreateLiteralNumber(El,0);
              return Result;
            } else {
              Value = AContext.Resolver.EvalRangeLimit(Ranges[0],rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true,El);
              if (Value === null) Self.RaiseNotSupported(El,AContext,20170910160817,"");
              try {
                Result = Self.ConvertConstValue(Value,AContext,Param);
              } finally {
                pas.PasResolveEval.ReleaseEvalValue({get: function () {
                    return Value;
                  }, set: function (v) {
                    Value = v;
                  }});
              };
              return Result;
            };
          } else {
            if (rtl.length(Ranges) === 0) {
              Result = Self.ConvertElement(Param,AContext);
              Call = Self.CreateCallExpression(El);
              Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Length]]);
              Call.AddArg(Result);
              MinusExpr = Self.CreateElement(pas.jstree.TJSAdditiveExpressionMinus,El);
              MinusExpr.FA = Call;
              MinusExpr.FB = Self.CreateLiteralNumber(El,1);
              Result = MinusExpr;
              return Result;
            } else {
              Value = AContext.Resolver.EvalRangeLimit(Ranges[0],rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),false,El);
              if (Value === null) Self.RaiseNotSupported(El,AContext,20170910161555,"");
              try {
                Result = Self.ConvertConstValue(Value,AContext,Param);
              } finally {
                pas.PasResolveEval.ReleaseEvalValue({get: function () {
                    return Value;
                  }, set: function (v) {
                    Value = v;
                  }});
              };
              return Result;
            };
          };
        };
      } else if (((($tmp1 === pas.PasResolver.TResolverBaseType.btBoolean) || ($tmp1 === pas.PasResolver.TResolverBaseType.btByteBool)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btWordBool)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btLongBool)) {
        if (IsLow) {
          Result = Self.CreateLiteralBoolean(El,false)}
         else Result = Self.CreateLiteralBoolean(El,true);
        return Result;
      } else if (($tmp1 === pas.PasResolver.TResolverBaseType.btChar) || ($tmp1 === pas.PasResolver.TResolverBaseType.btWideChar)) {
        if (IsLow) {
          Result = Self.CreateLiteralJSString(El,"\x00")}
         else Result = Self.CreateLiteralJSString(El,"\uFFFF");
        return Result;
      } else if (($tmp1 >= pas.PasResolver.TResolverBaseType.btByte) && ($tmp1 <= pas.PasResolver.TResolverBaseType.btIntDouble)) {
        TypeEl = ResolvedEl.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasUnresolvedSymbolRef) {
          if (pas.PasResolver.TResElDataBaseType.isPrototypeOf(TypeEl.FData)) {
            AContext.Resolver.GetIntegerRange(ResolvedEl.BaseType,{get: function () {
                return MinVal;
              }, set: function (v) {
                MinVal = v;
              }},{get: function () {
                return MaxVal;
              }, set: function (v) {
                MaxVal = v;
              }});
            if (IsLow) {
              Result = Self.CreateLiteralNumber(El,MinVal)}
             else Result = Self.CreateLiteralNumber(El,MaxVal);
            return Result;
          };
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasRangeType) {
          Value = AContext.Resolver.EvalRangeLimit(TypeEl.RangeExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),IsLow,El);
          try {
            var $tmp2 = Value.Kind;
            if ($tmp2 === pas.PasResolveEval.TREVKind.revkInt) {
              Result = Self.CreateLiteralNumber(El,Value.Int)}
             else if ($tmp2 === pas.PasResolveEval.TREVKind.revkUInt) {
              Result = Self.CreateLiteralNumber(El,Value.UInt)}
             else {
              Self.RaiseNotSupported(El,AContext,20170925214317,"");
            };
            return Result;
          } finally {
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }});
          };
        };
        Self.RaiseNotSupported(El,AContext,20170925214351,"");
      } else if (($tmp1 === pas.PasResolver.TResolverBaseType.btSet) || ($tmp1 === pas.PasResolver.TResolverBaseType.btArrayOrSet)) {
        TypeEl = ResolvedEl.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
          CreateEnumValue(TypeEl);
          return Result;
        };
      };
      Self.DoError$2(20170210110717,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["enum or array",AContext.Resolver.GetResolverResultDescription(ResolvedEl,false)],Param);
      return Result;
    };
    this.ConvertBuiltIn_PredSucc = function (El, AContext, IsPred) {
      var Self = this;
      var Result = null;
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      var TypeEl = null;
      function EnumExpected(Id) {
        Self.DoError$2(Id,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["enum",AContext.Resolver.GetResolverResultDescription(ResolvedEl,false)],El.Params[0]);
      };
      function CreateAdd(Param) {
        var V = null;
        var Expr = null;
        V = Self.ConvertElement(Param,AContext);
        if (IsPred) {
          Expr = Self.CreateElement(pas.jstree.TJSAdditiveExpressionMinus,El)}
         else Expr = Self.CreateElement(pas.jstree.TJSAdditiveExpressionPlus,El);
        Expr.FA = V;
        Expr.FB = Self.CreateLiteralNumber(El,1);
        Result = Expr;
      };
      function CreateSwitchBool() {
        if (IsPred) {
          Result = Self.CreateLiteralBoolean(El,false)}
         else Result = Self.CreateLiteralBoolean(El,true);
      };
      function CreateCharPredSucc(Param) {
        var V = null;
        var Call = null;
        var Expr = null;
        V = Self.ConvertElement(Param,AContext);
        Call = Self.CreateCallCharCodeAt(V,0,El);
        if (IsPred) {
          Expr = Self.CreateElement(pas.jstree.TJSAdditiveExpressionMinus,El)}
         else Expr = Self.CreateElement(pas.jstree.TJSAdditiveExpressionPlus,El);
        Expr.FA = Call;
        Expr.FB = Self.CreateLiteralNumber(El,1);
        Call = Self.CreateCallFromCharCode(Expr,El);
        Result = Call;
      };
      var Param = null;
      var Value = null;
      Result = null;
      if (AContext.Resolver === null) Self.RaiseInconsistency(20170210120648,El);
      Param = El.Params[0];
      AContext.Resolver.ComputeElement(Param,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},{},null);
      TypeEl = ResolvedEl.LoTypeEl;
      if (ResolvedEl.BaseType in $mod.btAllJSInteger) {
        CreateAdd(Param);
        return Result;
      } else if (ResolvedEl.BaseType in $mod.btAllJSBooleans) {
        CreateSwitchBool();
        return Result;
      } else if (ResolvedEl.BaseType in $mod.btAllJSChars) {
        CreateCharPredSucc(Param);
        return Result;
      } else if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
          CreateAdd(Param);
          return Result;
        } else EnumExpected(20180424115902);
      } else if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btRange) {
        if (ResolvedEl.SubType in $mod.btAllJSInteger) {
          CreateAdd(Param);
          return Result;
        } else if (ResolvedEl.SubType in $mod.btAllJSBooleans) {
          CreateAdd(Param);
          return Result;
        } else if (ResolvedEl.SubType === pas.PasResolver.TResolverBaseType.btContext) {
          if (TypeEl.$class.ClassType() === pas.PasTree.TPasRangeType) {
            Value = AContext.Resolver.EvalTypeRange(TypeEl,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst));
            if (Value !== null) try {
              var $tmp1 = Value.Kind;
              if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeInt) {
                var $tmp2 = Value.ElKind;
                if (($tmp2 === pas.PasResolveEval.TRESetElKind.revskEnum) || ($tmp2 === pas.PasResolveEval.TRESetElKind.revskInt)) {
                  CreateAdd(Param);
                  return Result;
                } else if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskChar) {
                  EnumExpected(20180424115736)}
                 else if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskBool) {
                  CreateSwitchBool();
                  return Result;
                } else {
                  EnumExpected(20180424115959);
                };
              } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeUInt) {
                CreateAdd(Param);
                return Result;
              } else {
                EnumExpected(20180424115757);
              };
            } finally {
              pas.PasResolveEval.ReleaseEvalValue({get: function () {
                  return Value;
                }, set: function (v) {
                  Value = v;
                }});
            };
          } else EnumExpected(20180424115934);
        };
      };
      EnumExpected(20170210120039);
      return Result;
    };
    this.ConvertBuiltIn_StrProc = function (El, AContext) {
      var Result = null;
      var AssignContext = null;
      var StrVar = null;
      var TypeEl = null;
      Result = null;
      AssignContext = $mod.TAssignContext.$create("Create$1",[El,null,AContext]);
      try {
        StrVar = El.Params[1];
        AContext.Resolver.ComputeElement(StrVar,{p: AssignContext, get: function () {
            return this.p.LeftResolved;
          }, set: function (v) {
            this.p.LeftResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        AssignContext.RightSide = this.ConvertBuiltInStrParam(El.Params[0],AContext,false,true);
        TypeEl = AContext.Resolver.GetBaseTypes(pas.PasResolver.TResolverBaseType.btString);
        pas.PasResolver.SetResolverValueExpr({p: AssignContext, get: function () {
            return this.p.RightResolved;
          }, set: function (v) {
            this.p.RightResolved = v;
          }},pas.PasResolver.TResolverBaseType.btString,TypeEl,TypeEl,El,rtl.createSet(pas.PasResolver.TPasResolverResultFlag.rrfReadable));
        Result = this.CreateAssignStatement(StrVar,AssignContext);
      } finally {
        rtl.free(AssignContext,"RightSide");
        AssignContext = rtl.freeLoc(AssignContext);
      };
      return Result;
    };
    this.ConvertBuiltIn_StrFunc = function (El, AContext) {
      var Result = null;
      var i = 0;
      var Param = null;
      var Sum = null;
      var Add = null;
      var AddEl = null;
      Result = null;
      Sum = null;
      Add = null;
      try {
        for (var $l1 = 0, $end2 = rtl.length(El.Params) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Param = El.Params[i];
          Add = this.ConvertBuiltInStrParam(Param,AContext,true,i === 0);
          if (Sum === null) {
            Sum = Add}
           else {
            AddEl = this.CreateElement(pas.jstree.TJSAdditiveExpressionPlus,Param);
            AddEl.FA = Sum;
            AddEl.FB = Add;
            Sum = AddEl;
          };
          Add = null;
        };
        Result = Sum;
      } finally {
        Add = rtl.freeLoc(Add);
        if (Result === null) Sum = rtl.freeLoc(Sum);
      };
      return Result;
    };
    this.ConvertBuiltInStrParam = function (El, AContext, IsStrFunc, IsFirst) {
      var Self = this;
      var Result = null;
      var Add = null;
      function PrependStrLit() {
        var PlusEl = null;
        PlusEl = Self.CreateElement(pas.jstree.TJSAdditiveExpressionPlus,El);
        PlusEl.FA = Self.CreateLiteralString(El,"");
        PlusEl.FB = Add;
        Add = PlusEl;
      };
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      var NeedStrLit = false;
      var Call = null;
      var Bracket = null;
      var Arg = null;
      Result = null;
      AContext.Resolver.ComputeElement(El,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},{},null);
      Add = null;
      Call = null;
      Bracket = null;
      try {
        NeedStrLit = false;
        if (ResolvedEl.BaseType in rtl.diffSet(rtl.unionSet($mod.btAllJSBooleans,$mod.btAllJSInteger),rtl.createSet(pas.PasResolver.TResolverBaseType.btCurrency))) {
          NeedStrLit = true;
          Add = Self.ConvertElement(El,AContext);
        } else if (ResolvedEl.BaseType in rtl.unionSet($mod.btAllJSFloats,rtl.createSet(pas.PasResolver.TResolverBaseType.btCurrency))) {
          Call = Self.CreateCallExpression(El);
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnFloatToStr]]);
          Arg = Self.ConvertElement(El,AContext);
          if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) Arg = Self.CreateDivideNumber(El,Arg,10000);
          Call.AddArg(Arg);
          if (El.format1 !== null) Call.AddArg(Self.ConvertElement(El.format1,AContext));
          if (El.format2 !== null) Call.AddArg(Self.ConvertElement(El.format2,AContext));
          Result = Call;
          Call = null;
          return Result;
        } else if (IsStrFunc && (ResolvedEl.BaseType in $mod.btAllJSStringAndChars)) {
          Add = Self.ConvertElement(El,AContext)}
         else if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          if (ResolvedEl.LoTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) {
            Bracket = Self.CreateElement(pas.jstree.TJSBracketMemberExpression,El);
            Bracket.FMexpr = Self.CreateReferencePathExpr(ResolvedEl.LoTypeEl,AContext,false,null);
            Bracket.FName = Self.ConvertElement(El,AContext);
            Add = Bracket;
            Bracket = null;
          } else Self.RaiseNotSupported(El,AContext,20170320123827,"");
        } else Self.RaiseNotSupported(El,AContext,20170320093001,"");
        if (El.format1 !== null) {
          if (NeedStrLit) PrependStrLit();
          Call = Self.CreateCallExpression(El);
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSpaceLeft]]);
          Call.AddArg(Add);
          Add = null;
          Call.AddArg(Self.ConvertElement(El.format1,AContext));
          Add = Call;
          Call = null;
        } else if (IsFirst && NeedStrLit) PrependStrLit();
        Result = Add;
      } finally {
        Call = rtl.freeLoc(Call);
        Bracket = rtl.freeLoc(Bracket);
        if (Result === null) Add = rtl.freeLoc(Add);
      };
      return Result;
    };
    this.ConvertBuiltIn_WriteStr = function (El, AContext) {
      var Result = null;
      var AssignContext = null;
      var StrVar = null;
      var TypeEl = null;
      var JS = null;
      var AddJS = null;
      var i = 0;
      Result = null;
      AssignContext = $mod.TAssignContext.$create("Create$1",[El,null,AContext]);
      try {
        StrVar = El.Params[0];
        AContext.Resolver.ComputeElement(StrVar,{p: AssignContext, get: function () {
            return this.p.LeftResolved;
          }, set: function (v) {
            this.p.LeftResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        for (var $l1 = 1, $end2 = rtl.length(El.Params) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          JS = this.ConvertBuiltInStrParam(El.Params[i],AContext,false,true);
          if (AssignContext.RightSide === null) {
            AssignContext.RightSide = JS}
           else {
            AddJS = this.CreateElement(pas.jstree.TJSAdditiveExpressionPlus,El);
            AddJS.FA = AssignContext.RightSide;
            AssignContext.RightSide = AddJS;
            AddJS.FB = JS;
          };
        };
        TypeEl = AContext.Resolver.GetBaseTypes(pas.PasResolver.TResolverBaseType.btString);
        pas.PasResolver.SetResolverValueExpr({p: AssignContext, get: function () {
            return this.p.RightResolved;
          }, set: function (v) {
            this.p.RightResolved = v;
          }},pas.PasResolver.TResolverBaseType.btString,TypeEl,TypeEl,El,rtl.createSet(pas.PasResolver.TPasResolverResultFlag.rrfReadable));
        Result = this.CreateAssignStatement(StrVar,AssignContext);
      } finally {
        rtl.free(AssignContext,"RightSide");
        AssignContext = rtl.freeLoc(AssignContext);
      };
      return Result;
    };
    this.ConvertBuiltIn_ConcatArray = function (El, AContext) {
      var Result = null;
      var Params = [];
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var Param0 = null;
      var Param = null;
      var ArrayType = null;
      var i = 0;
      var Call = null;
      var JS = null;
      Result = null;
      Params = El.Params;
      if (rtl.length(Params) < 1) this.RaiseInconsistency(20170331000332,El);
      Param0 = El.Params[0];
      if (rtl.length(Params) === 1) {
        Result = this.ConvertElement(Param0,AContext);
      } else {
        Call = null;
        AContext.Resolver.ComputeElement(Param0,{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},{},null);
        if (pas.PasTree.TPasArrayType.isPrototypeOf(ParamResolved.LoTypeEl)) {
          ArrayType = ParamResolved.LoTypeEl;
          Call = this.CreateArrayConcat$1(ArrayType,El,AContext);
        } else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btArrayLit) {
          ParamResolved.BaseType = ParamResolved.SubType;
          ParamResolved.SubType = pas.PasResolver.TResolverBaseType.btNone;
          Call = this.CreateArrayConcat(new pas.PasResolver.TPasResolverResult(ParamResolved),El,AContext);
        };
        if (Call === null) {
          this.RaiseNotSupported(Param0,AContext,20170331000846,"");
        };
        try {
          for (var $l1 = 0, $end2 = rtl.length(Params) - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            Param = Params[i];
            JS = this.ConvertElement(Param,AContext);
            JS = this.CreateArrayEl(Param,JS,AContext);
            Call.AddArg(JS);
          };
          Result = Call;
        } finally {
          if (Result === null) Call = rtl.freeLoc(Call);
        };
      };
      return Result;
    };
    this.ConvertBuiltIn_CopyArray = function (El, AContext) {
      var Result = null;
      var Param = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var ElTypeResolved = new pas.PasResolver.TPasResolverResult();
      var C = null;
      var TypeParam = null;
      var Call = null;
      var ArrayType = null;
      Result = null;
      Call = null;
      try {
        Param = El.Params[0];
        AContext.Resolver.ComputeElement(El,{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},{},null);
        if ((ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) && (ParamResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType)) {
          ArrayType = ParamResolved.LoTypeEl;
          AContext.Resolver.ComputeElement(ArrayType.ElType,{get: function () {
              return ElTypeResolved;
            }, set: function (v) {
              ElTypeResolved = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
        } else if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btArrayLit) {
          ElTypeResolved = new pas.PasResolver.TPasResolverResult(ParamResolved);
          ElTypeResolved.BaseType = ElTypeResolved.SubType;
          ElTypeResolved.SubType = pas.PasResolver.TResolverBaseType.btNone;
        };
        TypeParam = null;
        if (ElTypeResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          C = ElTypeResolved.LoTypeEl.$class.ClassType();
          if (C === pas.PasTree.TPasRecordType) TypeParam = this.CreateReferencePathExpr(ElTypeResolved.LoTypeEl,AContext,false,null);
        } else if (ElTypeResolved.BaseType === pas.PasResolver.TResolverBaseType.btSet) TypeParam = this.CreateLiteralString(El,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Reference]);
        if (TypeParam === null) TypeParam = this.CreateLiteralNumber(El,0);
        Call = this.CreateCallExpression(El);
        Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Copy]]);
        Call.AddArg(TypeParam);
        Call.AddArg(this.ConvertElement(Param,AContext));
        if (rtl.length(El.Params) === 1) {
          Call.AddArg(this.CreateLiteralNumber(El,0))}
         else Call.AddArg(this.ConvertElement(El.Params[1],AContext));
        if (rtl.length(El.Params) >= 3) Call.AddArg(this.ConvertElement(El.Params[2],AContext));
        Result = Call;
      } finally {
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      if (El === null) ;
      if (AContext === null) ;
      return Result;
    };
    this.ConvertBuiltIn_InsertArray = function (El, AContext) {
      var Result = null;
      var ArrEl = null;
      var Call = null;
      Result = null;
      Call = null;
      try {
        Call = this.CreateCallExpression(El);
        ArrEl = this.ConvertElement(El.Params[1],AContext);
        Call.FExpr = this.CreateDotExpression(El,ArrEl,this.CreatePrimitiveDotExpr("splice",El),false);
        Call.AddArg(this.ConvertElement(El.Params[2],AContext));
        Call.AddArg(this.CreateLiteralNumber(El,0));
        Call.AddArg(this.ConvertElement(El.Params[0],AContext));
        Result = Call;
      } finally {
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.ConvertBuiltIn_DeleteArray = function (El, AContext) {
      var Result = null;
      var ArrEl = null;
      var Call = null;
      Result = null;
      Call = null;
      try {
        Call = this.CreateCallExpression(El);
        ArrEl = this.ConvertElement(El.Params[0],AContext);
        Call.FExpr = this.CreateDotExpression(El,ArrEl,this.CreatePrimitiveDotExpr("splice",El),false);
        Call.AddArg(this.ConvertElement(El.Params[1],AContext));
        Call.AddArg(this.ConvertElement(El.Params[2],AContext));
        Result = Call;
      } finally {
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.ConvertBuiltIn_TypeInfo = function (El, AContext) {
      var Result = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var Param = null;
      var ResultEl = null;
      var TypeEl = null;
      Result = null;
      Param = El.Params[0];
      AContext.Resolver.ComputeElement(Param,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
      if ((ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btProc) && pas.PasTree.TPasFunction.isPrototypeOf(ParamResolved.IdentEl)) {
        ResultEl = ParamResolved.IdentEl.GetFT().ResultEl;
        AContext.Resolver.ComputeElement(ResultEl.ResultType,{get: function () {
            return ParamResolved;
          }, set: function (v) {
            ParamResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        ParamResolved.Flags = rtl.includeSet(ParamResolved.Flags,pas.PasResolver.TPasResolverResultFlag.rrfReadable);
        ParamResolved.IdentEl = ResultEl;
      };
      TypeEl = pas.PasResolver.ResolveSimpleAliasType(ParamResolved.HiTypeEl);
      if (TypeEl === null) {
        this.RaiseNotSupported(El,AContext,20170413001544,"")}
       else if (pas.PasTree.TPasType.isPrototypeOf(ParamResolved.IdentEl)) {
        Result = this.CreateTypeInfoRef(ParamResolved.IdentEl,AContext,Param)}
       else if (((pas.PasResolver.TPasResolverResultFlag.rrfReadable in ParamResolved.Flags) && ((TypeEl.$class.ClassType() === pas.PasTree.TPasClassType) || (TypeEl.$class.ClassType() === pas.PasTree.TPasClassOfType))) && ((pas.PasTree.TPasVariable.isPrototypeOf(ParamResolved.IdentEl) || (ParamResolved.IdentEl.$class.ClassType() === pas.PasTree.TPasArgument)) || (ParamResolved.IdentEl.$class.ClassType() === pas.PasTree.TPasResultElement))) {
        Result = this.ConvertElement(Param,AContext);
        Result = this.CreateDotExpression(El,Result,this.CreatePrimitiveDotExpr(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTI],Param),false);
      } else Result = this.CreateTypeInfoRef(TypeEl,AContext,Param);
      return Result;
    };
    this.ConvertBuiltIn_Assert = function (El, AContext) {
      var Result = null;
      var IfSt = null;
      var ThrowSt = null;
      var ModScope = null;
      var aConstructor = null;
      var Ref = null;
      var ArrLit = null;
      var Call = null;
      var FunName = "";
      var PosEl = null;
      Result = null;
      if (!(pas.PScanner.TBoolSwitch.bsAssertions in AContext.ScannerBoolSwitches)) return Result;
      Ref = null;
      IfSt = this.CreateElement(pas.jstree.TJSIfStatement,El);
      try {
        PosEl = El.Params[0];
        IfSt.FCond = this.ConvertExpression(El.Params[0],AContext);
        ThrowSt = this.CreateElement(pas.jstree.TJSThrowStatement,PosEl);
        IfSt.FBTrue = ThrowSt;
        aConstructor = null;
        if (pas.PasResolver.TResolvedReference.isPrototypeOf(El.FData)) {
          Ref = El.FData;
          if (pas.PasTree.TPasConstructor.isPrototypeOf(Ref.FDeclaration)) aConstructor = Ref.FDeclaration;
          Ref = null;
        };
        if (aConstructor !== null) {
          Ref = pas.PasResolver.TResolvedReference.$create("Create$1");
          ModScope = rtl.as(El.GetModule().FData,pas.PasResolver.TPasModuleScope);
          Ref.SetDeclaration(ModScope.FAssertClass);
          FunName = this.CreateReferencePath(ModScope.FAssertClass,AContext,$mod.TRefPathKind.rpkPathAndName,true,Ref);
          FunName = (FunName + ".") + this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnClassInstanceNew];
          Call = this.CreateCallExpression(PosEl);
          Call.FExpr = this.CreatePrimitiveDotExpr(FunName,PosEl);
          Call.AddArg(this.CreateLiteralString(PosEl,this.TransformVariableName$1(aConstructor,AContext)));
          ThrowSt.FA = Call;
          if (rtl.length(El.Params) > 1) {
            ArrLit = this.CreateElement(pas.jstree.TJSArrayLiteral,El.Params[1]);
            Call.AddArg(ArrLit);
            ArrLit.AddElement(this.ConvertExpression(El.Params[1],AContext));
          };
        };
        if (ThrowSt.FA === null) {
          if (rtl.length(El.Params) > 1) {
            ThrowSt.FA = this.ConvertExpression(El.Params[1],AContext)}
           else ThrowSt.FA = this.CreateLiteralJSString(El.Params[0],"assert failed");
        };
        Result = IfSt;
      } finally {
        Ref = rtl.freeLoc(Ref);
        if (Result === null) IfSt = rtl.freeLoc(IfSt);
      };
      return Result;
    };
    this.ConvertBuiltIn_New = function (El, AContext) {
      var Result = null;
      var Param0 = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var AssignContext = null;
      var TypeEl = null;
      var SubTypeEl = null;
      var aResolveR = null;
      var RecType = null;
      Result = null;
      Param0 = El.Params[0];
      aResolveR = AContext.Resolver;
      aResolveR.ComputeElement(Param0,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      RecType = null;
      if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
        TypeEl = ParamResolved.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          SubTypeEl = aResolveR.ResolveAliasType(TypeEl.DestType);
          if (SubTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) RecType = SubTypeEl;
        };
      };
      if (RecType === null) this.DoError$2(20180425011901,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[aResolveR.GetResolverResultDescription(ParamResolved,true),"pointer of record"],Param0);
      AssignContext = $mod.TAssignContext.$create("Create$1",[El,null,AContext]);
      try {
        aResolveR.ComputeElement(Param0,{p: AssignContext, get: function () {
            return this.p.LeftResolved;
          }, set: function (v) {
            this.p.LeftResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        AssignContext.RightResolved = new pas.PasResolver.TPasResolverResult(AssignContext.LeftResolved);
        AssignContext.RightSide = this.CreateNewRecord(El,RecType,AContext);
        Result = this.CreateAssignStatement(Param0,AssignContext);
      } finally {
        rtl.free(AssignContext,"RightSide");
        AssignContext = rtl.freeLoc(AssignContext);
      };
      return Result;
    };
    this.ConvertBuiltIn_Dispose = function (El, AContext) {
      var Result = null;
      var Param0 = null;
      var aResolveR = null;
      var ParamResolved = new pas.PasResolver.TPasResolverResult();
      var TypeEl = null;
      var SubTypeEl = null;
      var RecType = null;
      var AssignContext = null;
      Result = null;
      Param0 = El.Params[0];
      aResolveR = AContext.Resolver;
      aResolveR.ComputeElement(Param0,{get: function () {
          return ParamResolved;
        }, set: function (v) {
          ParamResolved = v;
        }},{},null);
      RecType = null;
      if (ParamResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
        TypeEl = ParamResolved.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
          SubTypeEl = aResolveR.ResolveAliasType(TypeEl.DestType);
          if (SubTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) RecType = SubTypeEl;
        };
      };
      if (RecType === null) this.DoError$2(20180425012910,3028,rtl.getResStr(pas.PasResolveEval,"sIncompatibleTypesGotExpected"),[aResolveR.GetResolverResultDescription(ParamResolved,true),"pointer of record"],Param0);
      if (!(pas.PasResolver.TPasResolverResultFlag.rrfWritable in ParamResolved.Flags)) return null;
      AssignContext = $mod.TAssignContext.$create("Create$1",[El,null,AContext]);
      try {
        aResolveR.ComputeElement(Param0,{p: AssignContext, get: function () {
            return this.p.LeftResolved;
          }, set: function (v) {
            this.p.LeftResolved = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        AssignContext.RightResolved = new pas.PasResolver.TPasResolverResult(AssignContext.LeftResolved);
        AssignContext.RightSide = this.CreateLiteralNull(El);
        Result = this.CreateAssignStatement(Param0,AssignContext);
      } finally {
        rtl.free(AssignContext,"RightSide");
        AssignContext = rtl.freeLoc(AssignContext);
      };
      return Result;
    };
    this.ConvertBuiltIn_Default = function (El, AContext) {
      var Self = this;
      var Result = null;
      function CreateEnumValue(TypeEl) {
        var EnumValue = null;
        EnumValue = rtl.getObject(TypeEl.Values.Get(0));
        Result = Self.CreateReferencePathExpr(EnumValue,AContext,false,null);
      };
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      var Param = null;
      var TypeEl = null;
      var Value = null;
      var MinVal = 0;
      var MaxVal = 0;
      var C = null;
      Result = null;
      if (AContext.Resolver === null) Self.RaiseInconsistency(20180501011029,El);
      Param = El.Params[0];
      AContext.Resolver.ComputeElement(Param,{get: function () {
          return ResolvedEl;
        }, set: function (v) {
          ResolvedEl = v;
        }},{},null);
      var $tmp1 = ResolvedEl.BaseType;
      if (((($tmp1 === pas.PasResolver.TResolverBaseType.btBoolean) || ($tmp1 === pas.PasResolver.TResolverBaseType.btByteBool)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btWordBool)) || ($tmp1 === pas.PasResolver.TResolverBaseType.btLongBool)) {
        Result = Self.CreateLiteralBoolean(El,false);
        return Result;
      } else if (($tmp1 === pas.PasResolver.TResolverBaseType.btChar) || ($tmp1 === pas.PasResolver.TResolverBaseType.btWideChar)) {
        Result = Self.CreateLiteralJSString(El,"\x00");
        return Result;
      } else if (($tmp1 === pas.PasResolver.TResolverBaseType.btString) || ($tmp1 === pas.PasResolver.TResolverBaseType.btUnicodeString)) {
        Result = Self.CreateLiteralJSString(El,"");
        return Result;
      } else if (($tmp1 >= pas.PasResolver.TResolverBaseType.btByte) && ($tmp1 <= pas.PasResolver.TResolverBaseType.btIntDouble)) {
        TypeEl = ResolvedEl.LoTypeEl;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasUnresolvedSymbolRef) {
          if (pas.PasResolver.TResElDataBaseType.isPrototypeOf(TypeEl.FData)) {
            AContext.Resolver.GetIntegerRange(ResolvedEl.BaseType,{get: function () {
                return MinVal;
              }, set: function (v) {
                MinVal = v;
              }},{get: function () {
                return MaxVal;
              }, set: function (v) {
                MaxVal = v;
              }});
            Result = Self.CreateLiteralNumber(El,MinVal);
            return Result;
          };
        } else if (TypeEl.$class.ClassType() === pas.PasTree.TPasRangeType) {
          Value = AContext.Resolver.EvalRangeLimit(TypeEl.RangeExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true,El);
          try {
            var $tmp2 = Value.Kind;
            if ($tmp2 === pas.PasResolveEval.TREVKind.revkInt) {
              Result = Self.CreateLiteralNumber(El,Value.Int)}
             else if ($tmp2 === pas.PasResolveEval.TREVKind.revkUInt) {
              Result = Self.CreateLiteralNumber(El,Value.UInt)}
             else {
              Self.RaiseNotSupported(El,AContext,20180501011646,"");
            };
            return Result;
          } finally {
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }});
          };
        };
        Self.RaiseNotSupported(El,AContext,20180501011649,"");
      } else if (($tmp1 === pas.PasResolver.TResolverBaseType.btSingle) || ($tmp1 === pas.PasResolver.TResolverBaseType.btDouble)) {
        Result = Self.CreateLiteralNumber(El,0);
        Result.FValue.FCustomValue = "0.0";
        return Result;
      } else if ($tmp1 === pas.PasResolver.TResolverBaseType.btCurrency) {
        Result = Self.CreateLiteralNumber(El,0);
        return Result;
      } else if ($tmp1 === pas.PasResolver.TResolverBaseType.btContext) {
        TypeEl = ResolvedEl.LoTypeEl;
        C = TypeEl.$class.ClassType();
        if (C === pas.PasTree.TPasEnumType) {
          CreateEnumValue(TypeEl);
          return Result;
        } else if (C === pas.PasTree.TPasSetType) {
          Result = Self.CreateElement(pas.jstree.TJSObjectLiteral,El);
          return Result;
        } else if (C === pas.PasTree.TPasArrayType) {
          Result = Self.CreateArrayInit(TypeEl,null,El,AContext);
          return Result;
        } else if (C === pas.PasTree.TPasRecordType) {
          Result = Self.CreateRecordInit(TypeEl,null,El,AContext);
          return Result;
        } else if (C === pas.PasTree.TPasRangeType) {
          Value = AContext.Resolver.Eval(TypeEl.RangeExpr.left,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
          try {
            Result = Self.ConvertConstValue(Value,AContext,El);
          } finally {
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }});
          };
        } else if ((C === pas.PasTree.TPasClassType) || (C === pas.PasTree.TPasPointerType)) {
          Result = Self.CreateLiteralNull(El);
          return Result;
        };
      } else if ($tmp1 === pas.PasResolver.TResolverBaseType.btRange) {
        if (pas.PasTree.TPasRangeType.isPrototypeOf(ResolvedEl.LoTypeEl)) {
          Value = AContext.Resolver.Eval(ResolvedEl.LoTypeEl.RangeExpr.left,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
          try {
            Result = Self.ConvertConstValue(Value,AContext,El);
          } finally {
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }});
          };
          return Result;
        };
      } else if ($tmp1 === pas.PasResolver.TResolverBaseType.btSet) {
        Result = Self.CreateElement(pas.jstree.TJSObjectLiteral,El);
        return Result;
      };
      Self.DoError$2(20180501011723,3010,rtl.getResStr(pas.PasResolveEval,"sXExpectedButYFound"),["record",AContext.Resolver.GetResolverResultDescription(ResolvedEl,false)],Param);
      return Result;
    };
    this.ConvertRecordValues = function (El, AContext) {
      var Result = null;
      var ObjLit = null;
      var i = 0;
      var RecFields = [];
      var Field = null;
      var Ref = null;
      var Member = null;
      var NewMemE = null;
      var aResolver = null;
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      var RecType = null;
      var ok = false;
      var ObjLitEl = null;
      Result = null;
      aResolver = AContext.Resolver;
      ok = false;
      try {
        if (aResolver !== null) {
          aResolver.ComputeElement(El,{get: function () {
              return ResolvedEl;
            }, set: function (v) {
              ResolvedEl = v;
            }},{},null);
          if ((ResolvedEl.BaseType !== pas.PasResolver.TResolverBaseType.btContext) || (ResolvedEl.LoTypeEl.$class.ClassType() !== pas.PasTree.TPasRecordType)) this.RaiseNotSupported(El,AContext,20180429210932,"");
          RecType = ResolvedEl.LoTypeEl;
          NewMemE = this.CreateNewRecord(El,RecType,AContext);
          Result = NewMemE;
          ObjLit = this.CreateElement(pas.jstree.TJSObjectLiteral,El);
          NewMemE.AddArg(ObjLit);
        } else {
          ObjLit = this.CreateElement(pas.jstree.TJSObjectLiteral,El);
          Result = ObjLit;
        };
        RecFields = El.Fields;
        for (var $l1 = 0, $end2 = rtl.length(RecFields) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Field = RecFields[i];
          Ref = rtl.as(Field.NameExp.FData,pas.PasResolver.TResolvedReference);
          Member = rtl.as(Ref.FDeclaration,pas.PasTree.TPasVariable);
          ObjLitEl = ObjLit.FElements.AddElement();
          ObjLitEl.FName = this.TransformVariableName$1(Member,AContext);
          ObjLitEl.FExpr = this.CreateValInit(Member.VarType,Field.ValueExp,Field.NameExp,AContext);
        };
        ok = true;
      } finally {
        if (!ok) Result = rtl.freeLoc(Result);
      };
      return Result;
    };
    this.ConvertSelfExpression = function (El, AContext) {
      var Result = null;
      Result = this.ConvertIdentifierExpr(El,"Self",AContext);
      return Result;
    };
    var BinClasses = [null,pas.jstree.TJSAdditiveExpressionPlus,pas.jstree.TJSAdditiveExpressionMinus,pas.jstree.TJSMultiplicativeExpressionMul,pas.jstree.TJSMultiplicativeExpressionDiv,pas.jstree.TJSMultiplicativeExpressionDiv,pas.jstree.TJSMultiplicativeExpressionMod,null,pas.jstree.TJSURShiftExpression,pas.jstree.TJSLShiftExpression,null,null,null,null,pas.jstree.TJSEqualityExpressionSEQ,pas.jstree.TJSEqualityExpressionSNE,pas.jstree.TJSRelationalExpressionLT,pas.jstree.TJSRelationalExpressionGT,pas.jstree.TJSRelationalExpressionLE,pas.jstree.TJSRelationalExpressionGE,null,pas.jstree.TJSRelationalExpressionInstanceOf,null,null,null,null,null,null];
    this.ConvertBinaryExpression = function (El, AContext) {
      var Self = this;
      var Result = null;
      var LeftResolved = new pas.PasResolver.TPasResolverResult();
      var RightResolved = new pas.PasResolver.TPasResolverResult();
      function NotSupportedRes(id) {
        Self.RaiseNotSupported(El,AContext,id,(pas.PasResolver.GetResolverResultDbg(LeftResolved) + pas.PasTree.ExprKindNames[El.Kind]) + pas.PasResolver.GetResolverResultDbg(RightResolved));
      };
      var R = null;
      var C = null;
      var A = null;
      var B = null;
      var UseBitwiseOp = false;
      var Call = null;
      var Flags = {};
      var ModeSwitches = {};
      var aResolver = null;
      var LeftTypeEl = null;
      var RightTypeEl = null;
      Result = null;
      aResolver = AContext.Resolver;
      var $tmp1 = El.OpCode;
      if ($tmp1 === pas.PasTree.TExprOpCode.eopSubIdent) {
        Result = Self.ConvertSubIdentExpression(El,AContext);
        return Result;
      } else if ($tmp1 === pas.PasTree.TExprOpCode.eopNone) if (pas.PasTree.TInheritedExpr.isPrototypeOf(El.left)) {
        Result = Self.ConvertInheritedExpression(El.left,AContext);
        return Result;
      };
      if (AContext.Access !== $mod.TCtxAccess.caRead) {
        Self.DoError$2(20170209152633,3008,rtl.getResStr(pas.PasResolveEval,"sVariableIdentifierExpected"),[],El);
      };
      Call = null;
      A = Self.ConvertElement(El.left,AContext);
      B = null;
      try {
        B = Self.ConvertElement(El.right,AContext);
        if (aResolver !== null) {
          ModeSwitches = rtl.refSet(AContext.CurrentModeSwitches());
          Flags = {};
          if (El.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopEqual,pas.PasTree.TExprOpCode.eopNotEqual)) if (!(pas.PScanner.TModeSwitch.msDelphi in ModeSwitches)) Flags = rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProcType);
          aResolver.ComputeElement(El.left,{get: function () {
              return LeftResolved;
            }, set: function (v) {
              LeftResolved = v;
            }},rtl.refSet(Flags),null);
          Flags = {};
          if ((El.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopEqual,pas.PasTree.TExprOpCode.eopNotEqual)) && !(pas.PScanner.TModeSwitch.msDelphi in ModeSwitches)) {
            if (LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btNil) {
              Flags = rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProcType)}
             else if (aResolver.IsProcedureType(LeftResolved,true)) {
              Flags = rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProcType)}
             else Flags = {};
          };
          aResolver.ComputeElement(El.right,{get: function () {
              return RightResolved;
            }, set: function (v) {
              RightResolved = v;
            }},rtl.refSet(Flags),null);
          Result = Self.ConvertBinaryExpressionRes(El,AContext,LeftResolved,RightResolved,{get: function () {
              return A;
            }, set: function (v) {
              A = v;
            }},{get: function () {
              return B;
            }, set: function (v) {
              B = v;
            }});
          if (Result !== null) return Result;
        };
        C = BinClasses[El.OpCode];
        if (C === null) {
          var $tmp2 = El.OpCode;
          if ($tmp2 === pas.PasTree.TExprOpCode.eopAs) {
            Call = Self.CreateCallExpression(El);
            LeftTypeEl = LeftResolved.LoTypeEl;
            RightTypeEl = RightResolved.LoTypeEl;
            if (pas.PasTree.TPasClassType.isPrototypeOf(LeftTypeEl)) {
              if (pas.PasTree.TPasClassType.isPrototypeOf(RightTypeEl)) {
                var $tmp3 = LeftTypeEl.ObjKind;
                if ($tmp3 === pas.PasTree.TPasObjKind.okClass) {
                  var $tmp4 = RightTypeEl.ObjKind;
                  if ($tmp4 === pas.PasTree.TPasObjKind.okClass) {
                    if (RightResolved.LoTypeEl.IsExternal) {
                      Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnAsExt],El)}
                     else Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnAs],El)}
                   else if ($tmp4 === pas.PasTree.TPasObjKind.okInterface) {
                    var $tmp5 = RightTypeEl.InterfaceType;
                    if ($tmp5 === pas.PasTree.TPasClassInterfaceType.citCom) {
                      Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfQueryIntfT],El);
                      Call.AddArg(A);
                      Call.AddArg(B);
                      Call = Self.CreateIntfRef(Call,AContext,El);
                      Result = Call;
                      return Result;
                    } else if ($tmp5 === pas.PasTree.TPasClassInterfaceType.citCorba) {
                      Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGetIntfT],El)}
                     else {
                      Self.RaiseNotSupported(El,AContext,20180401225752,"");
                    };
                  } else {
                    NotSupportedRes(20180327214535);
                  };
                } else if ($tmp3 === pas.PasTree.TPasObjKind.okInterface) {
                  var $tmp6 = RightTypeEl.ObjKind;
                  if ($tmp6 === pas.PasTree.TPasObjKind.okClass) {
                    Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfAsClass],El)}
                   else if ($tmp6 === pas.PasTree.TPasObjKind.okInterface) {
                    Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnAs],El)}
                   else {
                    NotSupportedRes(20180327214545);
                  };
                } else {
                  NotSupportedRes(20180327214559);
                };
              } else if (pas.PasTree.TPasClassOfType.isPrototypeOf(RightTypeEl)) {
                Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnAs],El);
              };
            };
            Call.AddArg(A);
            Call.AddArg(B);
            Result = Call;
            return Result;
          } else if ((($tmp2 === pas.PasTree.TExprOpCode.eopAnd) || ($tmp2 === pas.PasTree.TExprOpCode.eopOr)) || ($tmp2 === pas.PasTree.TExprOpCode.eopXor)) {
            if (aResolver !== null) {
              UseBitwiseOp = (LeftResolved.BaseType in $mod.btAllJSInteger) || (RightResolved.BaseType in $mod.btAllJSInteger)}
             else UseBitwiseOp = (Self.GetExpressionValueType(El.left,AContext) === pas.jsbase.TJSType.jstNumber) || (Self.GetExpressionValueType(El.right,AContext) === pas.jsbase.TJSType.jstNumber);
            if (UseBitwiseOp) {
              var $tmp7 = El.OpCode;
              if ($tmp7 === pas.PasTree.TExprOpCode.eopAnd) {
                C = pas.jstree.TJSBitwiseAndExpression}
               else if ($tmp7 === pas.PasTree.TExprOpCode.eopOr) {
                C = pas.jstree.TJSBitwiseOrExpression}
               else if ($tmp7 === pas.PasTree.TExprOpCode.eopXor) C = pas.jstree.TJSBitwiseXOrExpression;
            } else {
              var $tmp8 = El.OpCode;
              if ($tmp8 === pas.PasTree.TExprOpCode.eopAnd) {
                C = pas.jstree.TJSLogicalAndExpression}
               else if ($tmp8 === pas.PasTree.TExprOpCode.eopOr) {
                C = pas.jstree.TJSLogicalOrExpression}
               else if ($tmp8 === pas.PasTree.TExprOpCode.eopXor) {
                C = pas.jstree.TJSBitwiseXOrExpression}
               else {
                Self.DoError$2(20161024191234,4004,rtl.getResStr(pas.FPPas2Js,"sBinaryOpcodeNotSupported"),["logical XOR"],El);
              };
            };
          } else if ($tmp2 === pas.PasTree.TExprOpCode.eopPower) {
            Call = Self.CreateCallExpression(El);
            Call.FExpr = Self.CreatePrimitiveDotExpr("Math.pow",El);
            Call.AddArg(A);
            Call.AddArg(B);
            Result = Call;
          } else {
            if (C === null) Self.DoError$2(20161024191244,4004,rtl.getResStr(pas.FPPas2Js,"sBinaryOpcodeNotSupported"),[pas.PasTree.OpcodeStrings[El.OpCode]],El);
          };
        };
        if ((Result === null) && (C !== null)) {
          R = Self.CreateElement(C,El);
          R.FA = A;
          A = null;
          R.FB = B;
          B = null;
          Result = R;
          if (El.OpCode === pas.PasTree.TExprOpCode.eopDiv) {
            Result = Self.CreateMathFloor(El,Result);
          };
        };
      } finally {
        if (Result === null) {
          A = rtl.freeLoc(A);
          B = rtl.freeLoc(B);
        };
      };
      return Result;
    };
    this.ConvertBinaryExpressionRes = function (El, AContext, LeftResolved, RightResolved, A, B) {
      var Self = this;
      var Result = null;
      function NotSupported(id) {
        Self.RaiseNotSupported(El,AContext,id,(pas.PasResolver.GetResolverResultDbg(LeftResolved) + pas.PasTree.ExprKindNames[El.Kind]) + pas.PasResolver.GetResolverResultDbg(RightResolved));
      };
      function CreateEqualCallback() {
        var Result = null;
        var Call = null;
        var NotEl = null;
        Call = Self.CreateCallExpression(El);
        Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnProcType_Equal]]);
        Call.AddArg(A.get());
        A.set(null);
        Call.AddArg(B.get());
        B.set(null);
        if (El.OpCode === pas.PasTree.TExprOpCode.eopNotEqual) {
          NotEl = Self.CreateElement(pas.jstree.TJSUnaryNotExpression,El);
          NotEl.FA = Call;
          Result = NotEl;
        } else Result = Call;
        return Result;
      };
      function ConcatArray(ArrayType) {
        var Call = null;
        Call = Self.CreateArrayConcat$1(ArrayType,El,AContext);
        Result = Call;
        Call.AddArg(A.get());
        A.set(null);
        Call.AddArg(B.get());
        B.set(null);
      };
      var aResolver = null;
      var FunName = "";
      var Call = null;
      var DotExpr = null;
      var NotEl = null;
      var InOp = null;
      var TypeEl = null;
      var LeftTypeEl = null;
      var RightTypeEl = null;
      var SNE = null;
      var JSBinClass = null;
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      Result = null;
      aResolver = AContext.Resolver;
      LeftTypeEl = LeftResolved.LoTypeEl;
      RightTypeEl = RightResolved.LoTypeEl;
      if ((LeftResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btSet,pas.PasResolver.TResolverBaseType.btArrayOrSet)) && (RightResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btSet,pas.PasResolver.TResolverBaseType.btArrayOrSet))) {
        var $tmp1 = El.OpCode;
        if ($tmp1 === pas.PasTree.TExprOpCode.eopAdd) {
          FunName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Union]}
         else if ($tmp1 === pas.PasTree.TExprOpCode.eopSubtract) {
          FunName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Difference]}
         else if ($tmp1 === pas.PasTree.TExprOpCode.eopMultiply) {
          FunName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Intersect]}
         else if ($tmp1 === pas.PasTree.TExprOpCode.eopSymmetricaldifference) {
          FunName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_SymDiffSet]}
         else if ($tmp1 === pas.PasTree.TExprOpCode.eopEqual) {
          FunName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Equal]}
         else if ($tmp1 === pas.PasTree.TExprOpCode.eopNotEqual) {
          FunName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_NotEqual]}
         else if ($tmp1 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) {
          FunName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_GreaterEqual]}
         else if ($tmp1 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
          FunName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_LowerEqual]}
         else {
          Self.DoError$2(20170209151300,4004,rtl.getResStr(pas.FPPas2Js,"sBinaryOpcodeNotSupported"),[pas.PasTree.OpcodeStrings[El.OpCode]],El);
        };
        Call = Self.CreateCallExpression(El);
        Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],FunName]);
        Call.AddArg(A.get());
        A.set(null);
        Call.AddArg(B.get());
        B.set(null);
        Result = Call;
        return Result;
      } else if ((El.OpCode === pas.PasTree.TExprOpCode.eopIn) && (RightResolved.BaseType in rtl.createSet(pas.PasResolver.TResolverBaseType.btSet,pas.PasResolver.TResolverBaseType.btArrayOrSet))) {
        if (!pas.jstree.TJSLiteral.isPrototypeOf(A.get()) || (A.get().FValue.FValueType !== pas.jsbase.TJSType.jstNumber)) {
          pas.SysUtils.FreeAndNil(A);
          A.set(Self.CreateSetLiteralElement(El.left,AContext));
        };
        InOp = Self.CreateElement(pas.jstree.TJSRelationalExpressionIn,El);
        InOp.FA = A.get();
        A.set(null);
        InOp.FB = B.get();
        B.set(null);
        Result = InOp;
        return Result;
      } else if ((El.OpCode === pas.PasTree.TExprOpCode.eopAdd) && ((LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) && (LeftResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType))) {
        ConcatArray(LeftResolved.LoTypeEl);
        return Result;
      } else if ((El.OpCode === pas.PasTree.TExprOpCode.eopAdd) && ((RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) && (RightResolved.LoTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType))) {
        ConcatArray(RightResolved.LoTypeEl);
        return Result;
      } else if ((El.OpCode === pas.PasTree.TExprOpCode.eopAdd) && (LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btArrayLit)) {
        pas.PasResolver.SetResolverValueExpr({get: function () {
            return ResolvedEl;
          }, set: function (v) {
            ResolvedEl = v;
          }},LeftResolved.SubType,LeftResolved.LoTypeEl,LeftResolved.HiTypeEl,El.left,rtl.refSet(LeftResolved.Flags));
        Call = Self.CreateArrayConcat(new pas.PasResolver.TPasResolverResult(ResolvedEl),El,AContext);
        Result = Call;
        Call.AddArg(A.get());
        A.set(null);
        Call.AddArg(B.get());
        B.set(null);
        return Result;
      } else if ((LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) || (RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency)) {
        var $tmp2 = El.OpCode;
        if (((((((($tmp2 === pas.PasTree.TExprOpCode.eopAdd) || ($tmp2 === pas.PasTree.TExprOpCode.eopSubtract)) || ($tmp2 === pas.PasTree.TExprOpCode.eopEqual)) || ($tmp2 === pas.PasTree.TExprOpCode.eopNotEqual)) || ($tmp2 === pas.PasTree.TExprOpCode.eopLessThan)) || ($tmp2 === pas.PasTree.TExprOpCode.eopGreaterThan)) || ($tmp2 === pas.PasTree.TExprOpCode.eopLessthanEqual)) || ($tmp2 === pas.PasTree.TExprOpCode.eopGreaterThanEqual)) {
          var $tmp3 = El.OpCode;
          if ($tmp3 === pas.PasTree.TExprOpCode.eopAdd) {
            JSBinClass = pas.jstree.TJSAdditiveExpressionPlus}
           else if ($tmp3 === pas.PasTree.TExprOpCode.eopSubtract) {
            JSBinClass = pas.jstree.TJSAdditiveExpressionMinus}
           else if ($tmp3 === pas.PasTree.TExprOpCode.eopEqual) {
            JSBinClass = pas.jstree.TJSEqualityExpressionSEQ}
           else if ($tmp3 === pas.PasTree.TExprOpCode.eopNotEqual) {
            JSBinClass = pas.jstree.TJSEqualityExpressionSNE}
           else if ($tmp3 === pas.PasTree.TExprOpCode.eopLessThan) {
            JSBinClass = pas.jstree.TJSRelationalExpressionLT}
           else if ($tmp3 === pas.PasTree.TExprOpCode.eopGreaterThan) {
            JSBinClass = pas.jstree.TJSRelationalExpressionGT}
           else if ($tmp3 === pas.PasTree.TExprOpCode.eopLessthanEqual) {
            JSBinClass = pas.jstree.TJSRelationalExpressionLE}
           else if ($tmp3 === pas.PasTree.TExprOpCode.eopGreaterThanEqual) JSBinClass = pas.jstree.TJSRelationalExpressionGE;
          Result = Self.CreateElement(JSBinClass,El);
          if (LeftResolved.BaseType !== pas.PasResolver.TResolverBaseType.btCurrency) A.set(Self.CreateMulNumber(El,A.get(),10000));
          Result.FA = A.get();
          A.set(null);
          if (RightResolved.BaseType !== pas.PasResolver.TResolverBaseType.btCurrency) B.set(Self.CreateMulNumber(El,B.get(),10000));
          Result.FB = B.get();
          B.set(null);
          return Result;
        } else if ($tmp2 === pas.PasTree.TExprOpCode.eopMultiply) {
          Result = Self.CreateElement(pas.jstree.TJSMultiplicativeExpressionMul,El);
          Result.FA = A.get();
          A.set(null);
          Result.FB = B.get();
          B.set(null);
          if ((LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) && (RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency)) Result = Self.CreateDivideNumber(El,Result,10000);
          return Result;
        } else if ($tmp2 === pas.PasTree.TExprOpCode.eopDivide) {
          Result = Self.CreateElement(pas.jstree.TJSMultiplicativeExpressionDiv,El);
          Result.FA = A.get();
          A.set(null);
          Result.FB = B.get();
          B.set(null);
          if ((LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) && (RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency)) Result = Self.CreateMulNumber(El,Result,10000);
          Result = Self.CreateMathFloor(El,Result);
          return Result;
        } else if ($tmp2 === pas.PasTree.TExprOpCode.eopPower) {
          if (LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) A.set(Self.CreateDivideNumber(El,A.get(),10000));
          if (RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btCurrency) B.set(Self.CreateDivideNumber(El,B.get(),10000));
          Call = Self.CreateCallExpression(El);
          Call.FExpr = Self.CreatePrimitiveDotExpr("Math.pow",El);
          Call.AddArg(A.get());
          A.set(null);
          Call.AddArg(B.get());
          B.set(null);
          Result = Self.CreateMulNumber(El,Call,10000);
          Result = Self.CreateMathFloor(El,Result);
        } else {
          Self.RaiseNotSupported(El,AContext,20180422104215,"");
        };
      } else if ((LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btPointer) || ((LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) && (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType))) {
        var $tmp4 = El.OpCode;
        if (($tmp4 === pas.PasTree.TExprOpCode.eopEqual) || ($tmp4 === pas.PasTree.TExprOpCode.eopNotEqual)) {}
        else {
          Self.DoError$2(20180423114054,3084,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierAfter"),[pas.PasTree.OpcodeStrings[El.OpCode],aResolver.GetResolverResultDescription(LeftResolved,true)],El);
        };
      } else if ((RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btPointer) || ((RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) && (RightTypeEl.$class.ClassType() === pas.PasTree.TPasPointerType))) {
        var $tmp5 = El.OpCode;
        if (($tmp5 === pas.PasTree.TExprOpCode.eopEqual) || ($tmp5 === pas.PasTree.TExprOpCode.eopNotEqual)) {}
        else {
          Self.DoError$2(20180423114246,3085,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierInFrontOf"),[pas.PasTree.OpcodeStrings[El.OpCode],aResolver.GetResolverResultDescription(RightResolved,true)],El);
        };
      } else if (El.OpCode === pas.PasTree.TExprOpCode.eopIs) {
        Call = Self.CreateCallExpression(El);
        Result = Call;
        Call.AddArg(A.get());
        A.set(null);
        if (pas.PasTree.TPasType.isPrototypeOf(RightResolved.IdentEl)) {
          TypeEl = aResolver.ResolveAliasType(RightResolved.IdentEl)}
         else TypeEl = null;
        if (pas.PasTree.TPasClassOfType.isPrototypeOf(TypeEl)) {
          pas.SysUtils.FreeAndNil(B);
          TypeEl = aResolver.ResolveAliasType(TypeEl.DestType);
          B.set(Self.CreateReferencePathExpr(TypeEl,AContext,false,null));
        };
        if (LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btCustom) {
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIsExt]]);
          Call.AddArg(B.get());
          B.set(null);
          if (pas.PasTree.TPasClassType.isPrototypeOf(RightTypeEl)) {
            Call.AddArg(Self.CreateLiteralNumber(El.right,1))}
           else if (pas.PasTree.TPasClassOfType.isPrototypeOf(RightTypeEl)) {
            Call.AddArg(Self.CreateLiteralNumber(El.right,2))}
           else NotSupported(20180119005904);
        } else if (pas.PasTree.TPasClassType.isPrototypeOf(RightTypeEl) && RightTypeEl.IsExternal) {
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIsExt]]);
          Call.AddArg(B.get());
          B.set(null);
        } else if (pas.PasTree.TPasClassOfType.isPrototypeOf(LeftTypeEl)) {
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIs]]);
          Call.AddArg(B.get());
          B.set(null);
        } else {
          if (pas.PasTree.TPasClassType.isPrototypeOf(LeftTypeEl)) {
            if (pas.PasTree.TPasClassType.isPrototypeOf(RightTypeEl)) {
              var $tmp6 = LeftTypeEl.ObjKind;
              if ($tmp6 === pas.PasTree.TPasObjKind.okClass) {
                var $tmp7 = RightTypeEl.ObjKind;
                if ($tmp7 === pas.PasTree.TPasObjKind.okClass) {}
                else if ($tmp7 === pas.PasTree.TPasObjKind.okInterface) {
                  var $tmp8 = RightTypeEl.InterfaceType;
                  if ($tmp8 === pas.PasTree.TPasClassInterfaceType.citCom) {
                    Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfQueryIntfIsT]]);
                    Call.AddArg(B.get());
                    B.set(null);
                  } else if ($tmp8 === pas.PasTree.TPasClassInterfaceType.citCorba) {
                    Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGetIntfT]]);
                    Call.AddArg(B.get());
                    B.set(null);
                    SNE = Self.CreateElement(pas.jstree.TJSEqualityExpressionSNE,El);
                    Result = SNE;
                    SNE.FA = Call;
                    SNE.FB = Self.CreateLiteralNull(El);
                  } else {
                    Self.RaiseNotSupported(El,AContext,20180401225502,pas.PasTree.InterfaceTypeNames[RightTypeEl.InterfaceType]);
                  };
                  return Result;
                } else {
                  NotSupported(20180327210501);
                };
              } else if ($tmp6 === pas.PasTree.TPasObjKind.okInterface) {
                var $tmp9 = RightTypeEl.ObjKind;
                if ($tmp9 === pas.PasTree.TPasObjKind.okClass) {
                  Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfIsClass]]);
                  Call.AddArg(B.get());
                  B.set(null);
                  return Result;
                } else if ($tmp9 === pas.PasTree.TPasObjKind.okInterface) {}
                else {
                  NotSupported(20180327210741);
                };
              } else {
                NotSupported(20180327210251);
              };
            };
          };
          DotExpr = Self.CreateElement(pas.jstree.TJSDotMemberExpression,El);
          DotExpr.FMexpr = B.get();
          B.set(null);
          DotExpr.FName = "isPrototypeOf";
          Call.FExpr = DotExpr;
        };
        return Result;
      } else if (El.OpCode in rtl.createSet(pas.PasTree.TExprOpCode.eopEqual,pas.PasTree.TExprOpCode.eopNotEqual)) {
        if (aResolver.IsProcedureType(LeftResolved,true)) {
          if (RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btNil) {}
          else if (aResolver.IsProcedureType(RightResolved,true) || aResolver.IsJSBaseType$1(RightResolved,$mod.TPas2jsBaseType.pbtJSValue,true)) return CreateEqualCallback();
        } else if (aResolver.IsProcedureType(RightResolved,true)) {
          if (LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btNil) {}
          else if (aResolver.IsJSBaseType$1(LeftResolved,$mod.TPas2jsBaseType.pbtJSValue,true)) return CreateEqualCallback();
        } else if (LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btNil) {
          if (RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
            RightTypeEl = RightResolved.LoTypeEl;
            if (RightTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
              pas.SysUtils.FreeAndNil(A);
              Result = Self.CreateCmpArrayWithNil(El,B.get(),El.OpCode);
              B.set(null);
              return Result;
            };
          };
        } else if (LeftResolved.BaseType in pas.PasResolver.btAllStrings) {
          if (RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
            RightTypeEl = RightResolved.LoTypeEl;
            if (RightTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
              if (aResolver.IsTGUID(RightTypeEl)) {
                Call = Self.CreateCallExpression(El);
                Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfCreateTGUID],El);
                Call.AddArg(A.get());
                A.set(Call);
                Call = Self.CreateCallExpression(El);
                Call.FExpr = Self.CreateDotExpression(El,B.get(),Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRecordEqual],El),false);
                B.set(null);
                Call.AddArg(A.get());
                A.set(null);
                if (El.OpCode === pas.PasTree.TExprOpCode.eopNotEqual) {
                  NotEl = Self.CreateElement(pas.jstree.TJSUnaryNotExpression,El);
                  NotEl.FA = Call;
                  Result = NotEl;
                } else Result = Call;
                return Result;
              };
            } else if (RightTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
              if (RightTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
                B.set(Self.CreateDotExpression(El.left,B.get(),Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnIntfGUID],El.left),false));
              };
            };
          };
        } else if (LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          LeftTypeEl = LeftResolved.LoTypeEl;
          if (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
            if (RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
              RightTypeEl = RightResolved.LoTypeEl;
              if (RightTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
                Call = Self.CreateCallExpression(El);
                Call.FExpr = Self.CreateDotExpression(El,A.get(),Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRecordEqual],El),false);
                A.set(null);
                Call.AddArg(B.get());
                B.set(null);
                if (El.OpCode === pas.PasTree.TExprOpCode.eopNotEqual) {
                  NotEl = Self.CreateElement(pas.jstree.TJSUnaryNotExpression,El);
                  NotEl.FA = Call;
                  Result = NotEl;
                } else Result = Call;
                return Result;
              } else if (((RightTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) && (RightTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface)) && aResolver.IsTGUID(LeftTypeEl)) {
                Call = Self.CreateCallExpression(El);
                Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGetGUIDR],El);
                Call.AddArg(B.get());
                B.set(Call);
                Call = Self.CreateCallExpression(El);
                Call.FExpr = Self.CreateDotExpression(El,A.get(),Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRecordEqual],El),false);
                A.set(null);
                Call.AddArg(B.get());
                B.set(null);
                if (El.OpCode === pas.PasTree.TExprOpCode.eopNotEqual) {
                  NotEl = Self.CreateElement(pas.jstree.TJSUnaryNotExpression,El);
                  NotEl.FA = Call;
                  Result = NotEl;
                } else Result = Call;
                return Result;
              };
            } else if ((RightResolved.BaseType in pas.PasResolver.btAllStrings) && aResolver.IsTGUID(LeftTypeEl)) {
              Call = Self.CreateCallExpression(El);
              Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfCreateTGUID],El);
              Call.AddArg(B.get());
              B.set(Call);
              Call = Self.CreateCallExpression(El);
              Call.FExpr = Self.CreateDotExpression(El,A.get(),Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRecordEqual],El),false);
              A.set(null);
              Call.AddArg(B.get());
              B.set(null);
              if (El.OpCode === pas.PasTree.TExprOpCode.eopNotEqual) {
                NotEl = Self.CreateElement(pas.jstree.TJSUnaryNotExpression,El);
                NotEl.FA = Call;
                Result = NotEl;
              } else Result = Call;
              return Result;
            };
          } else if (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasClassType) {
            if (RightResolved.BaseType in pas.PasResolver.btAllStrings) {
              if (LeftTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
                A.set(Self.CreateDotExpression(El.left,A.get(),Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnIntfGUID],El.left),false));
              };
            } else if (RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
              RightTypeEl = RightResolved.LoTypeEl;
              if (RightTypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
                if ((LeftTypeEl.ObjKind === pas.PasTree.TPasObjKind.okInterface) && aResolver.IsTGUID(RightTypeEl)) {
                  Call = Self.CreateCallExpression(El);
                  Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfGetGUIDR],El);
                  Call.AddArg(A.get());
                  A.set(Call);
                  Call = Self.CreateCallExpression(El);
                  Call.FExpr = Self.CreateDotExpression(El,B.get(),Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRecordEqual],El),false);
                  B.set(null);
                  Call.AddArg(A.get());
                  A.set(null);
                  if (El.OpCode === pas.PasTree.TExprOpCode.eopNotEqual) {
                    NotEl = Self.CreateElement(pas.jstree.TJSUnaryNotExpression,El);
                    NotEl.FA = Call;
                    Result = NotEl;
                  } else Result = Call;
                  return Result;
                };
              };
            };
          } else if (LeftTypeEl.$class.ClassType() === pas.PasTree.TPasArrayType) {
            if (RightResolved.BaseType === pas.PasResolver.TResolverBaseType.btNil) {
              pas.SysUtils.FreeAndNil(B);
              Result = Self.CreateCmpArrayWithNil(El,A.get(),El.OpCode);
              A.set(null);
              return Result;
            };
          };
        };
        if (aResolver.IsJSBaseType$1(LeftResolved,$mod.TPas2jsBaseType.pbtJSValue,false) || aResolver.IsJSBaseType$1(RightResolved,$mod.TPas2jsBaseType.pbtJSValue,false)) {
          if (El.OpCode === pas.PasTree.TExprOpCode.eopEqual) {
            Result = Self.CreateElement(pas.jstree.TJSEqualityExpressionEQ,El)}
           else Result = Self.CreateElement(pas.jstree.TJSEqualityExpressionNE,El);
          Result.FA = A.get();
          A.set(null);
          Result.FB = B.get();
          B.set(null);
          return Result;
        };
      };
      return Result;
    };
    this.ConvertSubIdentExpression = function (El, AContext) {
      var Result = null;
      var Left = null;
      var Right = null;
      var DotContext = null;
      var OldAccess = 0;
      var LeftResolved = new pas.PasResolver.TPasResolverResult();
      var RightRef = null;
      var ParamsExpr = null;
      var RightEl = null;
      var RightRefDecl = null;
      var aResolver = null;
      Result = null;
      aResolver = AContext.Resolver;
      ParamsExpr = null;
      RightEl = El.right;
      while (RightEl.$class.ClassType() === pas.PasTree.TParamsExpr) {
        ParamsExpr = RightEl;
        RightEl = ParamsExpr.Value;
      };
      RightRef = null;
      RightRefDecl = null;
      if ((RightEl.$class.ClassType() === pas.PasTree.TPrimitiveExpr) && pas.PasResolver.TResolvedReference.isPrototypeOf(RightEl.FData)) {
        RightRef = RightEl.FData;
        RightRefDecl = RightRef.FDeclaration;
        if (aResolver.IsExternalClassConstructor(RightRefDecl)) {
          if (ParamsExpr !== null) {
            Result = this.ConvertParamsExpression(rtl.as(El.right,pas.PasTree.TParamsExpr),AContext);
          } else Result = this.ConvertExternalConstructor(El.left,RightRef,null,AContext);
          return Result;
        } else if (aResolver.IsTObjectFreeMethod(RightEl)) {
          Result = this.ConvertTObjectFree_Bin(El,RightEl,AContext);
          return Result;
        } else if ((RightRef.Access in pas.PasResolver.rraAllWrite) && aResolver.IsClassField(RightRefDecl)) {
          Left = this.CreateReferencePathExpr(RightRefDecl.FParent,AContext,false,null);
          Result = this.CreateElement(pas.jstree.TJSDotMemberExpression,El);
          Result.FMexpr = Left;
          Result.FName = this.TransformVariableName$1(RightRefDecl,AContext);
          return Result;
        };
      };
      if (aResolver !== null) {
        aResolver.ComputeElement(El.left,{get: function () {
            return LeftResolved;
          }, set: function (v) {
            LeftResolved = v;
          }},{},null);
        if (LeftResolved.BaseType === pas.PasResolver.TResolverBaseType.btModule) {
          Result = this.ConvertElement(El.right,AContext);
          return Result;
        };
      };
      OldAccess = AContext.Access;
      AContext.Access = $mod.TCtxAccess.caRead;
      Left = this.ConvertElement(El.left,AContext);
      if (Left === null) this.RaiseInconsistency(20170201140821,El);
      AContext.Access = OldAccess;
      DotContext = $mod.TDotContext.$create("Create$1",[El,Left,AContext]);
      Right = null;
      try {
        DotContext.LeftResolved = new pas.PasResolver.TPasResolverResult(LeftResolved);
        Right = this.ConvertElement(El.right,DotContext);
        if (DotContext.JS !== null) {
          Left = null;
          Right = null;
          return DotContext.JS;
        };
      } finally {
        DotContext = rtl.freeLoc(DotContext);
        if (Right === null) Left = rtl.freeLoc(Left);
      };
      if (pas.jstree.TJSLiteral.isPrototypeOf(Right)) {
        pas.SysUtils.FreeAndNil({get: function () {
            return Left;
          }, set: function (v) {
            Left = v;
          }});
        return Right;
      };
      Result = this.CreateDotExpression(El,Left,Right,true);
      return Result;
    };
    this.ConvertBoolConstExpression = function (El, AContext) {
      var Result = null;
      if (AContext === null) ;
      Result = this.CreateLiteralBoolean(El,El.Value);
      return Result;
    };
    this.ConvertPrimitiveExpression = function (El, AContext) {
      var Self = this;
      var Result = null;
      function DeleteLeadingZeroes(s) {
        var Result = "";
        var i = 0;
        Result = s;
        i = 1;
        if (Result.charAt(0) === "$") {
          while (i < Result.length) {
            if (((Result.charAt(i - 1) === "0") && (Result.charCodeAt((i + 1) - 1) in rtl.createSet(null,48,57,null,65,70,null,97,102))) && ((i === 1) || !(Result.charCodeAt((i - 1) - 1) in rtl.createSet(null,48,57,null,65,70,null,97,102)))) {
              pas.System.Delete({get: function () {
                  return Result;
                }, set: function (v) {
                  Result = v;
                }},i,1)}
             else i += 1;
          }}
         else while (i < Result.length) {
          if (((Result.charAt(i - 1) === "0") && (Result.charCodeAt((i + 1) - 1) in rtl.createSet(null,48,57))) && ((i === 1) || !(Result.charCodeAt((i - 1) - 1) in rtl.createSet(46,null,48,57)))) {
            pas.System.Delete({get: function () {
                return Result;
              }, set: function (v) {
                Result = v;
              }},i,1)}
           else i += 1;
        };
        return Result;
      };
      var L = null;
      var number = 0.0;
      var ConversionError = 0;
      var Code = 0;
      var i = 0;
      var S = "";
      Result = null;
      var $tmp1 = El.Kind;
      if ($tmp1 === pas.PasTree.TPasExprKind.pekString) {
        if (AContext.Resolver !== null) {
          Result = Self.CreateLiteralJSString(El,AContext.Resolver.ExtractPasStringLiteral(El,El.Value))}
         else {
          S = pas.SysUtils.DeQuoteString(El.Value,"'");
          Result = Self.CreateLiteralString(El,S);
        };
      } else if ($tmp1 === pas.PasTree.TPasExprKind.pekNumber) {
        var $tmp2 = El.Value.charAt(0);
        if (($tmp2 >= "0") && ($tmp2 <= "9")) {
          pas.System.val$8(El.Value,{get: function () {
              return number;
            }, set: function (v) {
              number = v;
            }},{get: function () {
              return ConversionError;
            }, set: function (v) {
              ConversionError = v;
            }});
          if (ConversionError !== 0) Self.DoError$2(20161024191248,4005,rtl.getResStr(pas.FPPas2Js,"sInvalidNumber"),[El.Value],El);
          L = Self.CreateLiteralNumber(El,number);
          L.FValue.FCustomValue = DeleteLeadingZeroes(El.Value);
        } else if ((($tmp2 === "$") || ($tmp2 === "&")) || ($tmp2 === "%")) {
          pas.System.val(El.Value,{get: function () {
              return i;
            }, set: function (v) {
              i = v;
            }},{get: function () {
              return Code;
            }, set: function (v) {
              Code = v;
            }});
          if (Code !== 0) Self.DoError$2(20161024224442,4005,rtl.getResStr(pas.FPPas2Js,"sInvalidNumber"),[El.Value],El);
          number = i;
          if (number !== i) Self.DoError$2(20161024230812,4005,rtl.getResStr(pas.FPPas2Js,"sInvalidNumber"),[El.Value],El);
          L = Self.CreateLiteralNumber(El,number);
          S = DeleteLeadingZeroes(El.Value);
          S = pas.System.Copy(S,2,S.length);
          var $tmp3 = El.Value.charAt(0);
          if ($tmp3 === "$") {
            S = "0x" + S}
           else if ($tmp3 === "&") {
            if (Self.FTargetProcessor === $mod.TPasToJsProcessor.ProcessorECMAScript5) {
              S = ""}
             else S = "0o" + S}
           else if ($tmp3 === "%") if (Self.FTargetProcessor === $mod.TPasToJsProcessor.ProcessorECMAScript5) {
            S = ""}
           else S = "0b" + S;
          L.FValue.FCustomValue = S;
        } else {
          Self.DoError$2(20161024223232,4005,rtl.getResStr(pas.FPPas2Js,"sInvalidNumber"),[El.Value],El);
        };
        Result = L;
      } else if ($tmp1 === pas.PasTree.TPasExprKind.pekIdent) {
        Result = Self.ConvertIdentifierExpr(El,El.Value,AContext)}
       else {
        Self.RaiseNotSupported(El,AContext,20161024222543,"");
      };
      return Result;
    };
    this.ConvertIdentifierExpr = function (El, aName, AContext) {
      var Self = this;
      var Result = null;
      function CallImplicit(Decl) {
        var ProcType = null;
        var ResolvedEl = new pas.PasResolver.TPasResolverResult();
        var Call = null;
        var NeedIntfRef = false;
        ProcType = null;
        if (pas.PasTree.TPasProcedure.isPrototypeOf(Decl)) {
          ProcType = Decl.ProcType}
         else {
          AContext.Resolver.ComputeElement(El,{get: function () {
              return ResolvedEl;
            }, set: function (v) {
              ResolvedEl = v;
            }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
          if (pas.PasTree.TPasProcedureType.isPrototypeOf(ResolvedEl.LoTypeEl)) {
            ProcType = ResolvedEl.LoTypeEl}
           else Self.RaiseNotSupported(El,AContext,20170217005025,"");
        };
        NeedIntfRef = false;
        if (pas.PasTree.TPasFunctionType.isPrototypeOf(ProcType) && AContext.Resolver.IsInterfaceType$1(ProcType.ResultEl.ResultType,pas.PasTree.TPasClassInterfaceType.citCom)) NeedIntfRef = true;
        Call = null;
        try {
          Self.CreateProcedureCall({get: function () {
              return Call;
            }, set: function (v) {
              Call = v;
            }},null,ProcType,AContext);
          Call.FExpr = Result;
          if (NeedIntfRef) Call = Self.CreateIntfRef(Call,AContext,El);
          Result = Call;
        } finally {
          if (Result !== Call) Call = rtl.freeLoc(Call);
        };
      };
      var Decl = null;
      var Name = "";
      var Ref = null;
      var Call = null;
      var BuiltInProc = null;
      var Prop = null;
      var IsImplicitCall = false;
      var AssignContext = null;
      var TargetProcType = null;
      var ArrLit = null;
      var IndexExpr = null;
      var Func = null;
      var FuncScope = null;
      var Value = null;
      var aResolver = null;
      var BracketExpr = null;
      var PathExpr = null;
      Result = null;
      if (!pas.PasResolver.TResolvedReference.isPrototypeOf(El.FData)) {
        if (AContext.Resolver !== null) {
          Self.RaiseIdentifierNotFound(aName,El,20161024191306)}
         else Result = Self.CreateIdentifierExpr$1(aName,true,El,AContext);
        return Result;
      };
      aResolver = AContext.Resolver;
      Ref = El.FData;
      Decl = Ref.FDeclaration;
      if (aResolver.IsExternalClassConstructor(Decl)) {
        Result = Self.ConvertExternalConstructor(null,Ref,null,AContext);
        return Result;
      };
      if (aResolver.IsExternalBracketAccessor(Decl)) Self.DoError$2(20180511154132,4025,rtl.getResStr(pas.FPPas2Js,"sCantCallExtBracketAccessor"),[],El);
      if (rtl.neSet(rtl.intersectSet(rtl.createSet(pas.PasResolver.TResolvedReferenceFlag.rrfNewInstance,pas.PasResolver.TResolvedReferenceFlag.rrfFreeInstance),Ref.Flags),{})) {
        Call = Self.CreateFreeOrNewInstanceExpr(Ref,AContext);
        Result = Call;
        if (pas.PasTree.TPasProcedure.isPrototypeOf(Decl)) {
          TargetProcType = Decl.ProcType;
          if (TargetProcType.Args.FCount > 0) {
            ArrLit = Self.CreateElement(pas.jstree.TJSArrayLiteral,El);
            Self.CreateProcedureCallArgs(ArrLit.FElements,null,TargetProcType,AContext);
            Call.AddArg(ArrLit);
          };
        };
        return Result;
      };
      if ((Ref.WithExprScope !== null) && aResolver.IsTObjectFreeMethod(El)) {
        Result = Self.ConvertTObjectFree_With(El,AContext);
        return Result;
      };
      Prop = null;
      AssignContext = null;
      IsImplicitCall = pas.PasResolver.TResolvedReferenceFlag.rrfImplicitCallWithoutParams in Ref.Flags;
      if (Decl.$class.ClassType() === pas.PasTree.TPasProperty) {
        Prop = Decl;
        var $tmp1 = AContext.Access;
        if ($tmp1 === $mod.TCtxAccess.caAssign) {
          Decl = aResolver.GetPasPropertySetter(Prop);
          if (pas.PasTree.TPasProcedure.isPrototypeOf(Decl)) {
            AssignContext = rtl.as(AContext.AccessContext,$mod.TAssignContext);
            if (AssignContext.Call !== null) Self.RaiseNotSupported(El,AContext,20170206000310,"");
            AssignContext.PropertyEl = Prop;
            AssignContext.Setter = Decl;
            Call = Self.CreateCallExpression(El);
            AssignContext.Call = Call;
            Call.FExpr = Self.CreateReferencePathExpr(Decl,AContext,false,Ref);
            IndexExpr = aResolver.GetPasPropertyIndex(Prop);
            if (IndexExpr !== null) {
              Value = aResolver.Eval(IndexExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
              try {
                Call.AddArg(Self.ConvertConstValue(Value,AssignContext,El));
              } finally {
                pas.PasResolveEval.ReleaseEvalValue({get: function () {
                    return Value;
                  }, set: function (v) {
                    Value = v;
                  }});
              };
            };
            Call.AddArg(AssignContext.RightSide);
            AssignContext.RightSide = null;
            Result = Call;
            return Result;
          };
        } else if ($tmp1 === $mod.TCtxAccess.caRead) {
          Result = Self.CreatePropertyGet(Prop,Ref,AContext,El);
          if (pas.jstree.TJSCallExpression.isPrototypeOf(Result)) return Result;
          if (!IsImplicitCall) return Result;
        } else {
          Self.RaiseNotSupported(El,AContext,20170213212623,"");
        };
      } else if (Decl.$class.ClassType() === pas.PasTree.TPasArgument) {
        Result = Self.CreateArgumentAccess(Decl,AContext,El);
        if (IsImplicitCall) CallImplicit(Decl);
        return Result;
      } else if ((Ref.Access in pas.PasResolver.rraAllWrite) && aResolver.IsClassField(Decl)) {
        PathExpr = Self.CreateReferencePathExpr(Decl.FParent,AContext,false,null);
        Result = Self.CreateElement(pas.jstree.TJSDotMemberExpression,El);
        Result.FMexpr = PathExpr;
        Result.FName = Self.TransformVariableName$1(Decl,AContext);
        return Result;
      } else if (Decl.$class.ClassType() === pas.PasTree.TPasConst) {
        if (Decl.IsConst && (Decl.Expr !== null)) {
          Value = aResolver.Eval(Decl.Expr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
          if (Value !== null) try {
            if (Value.Kind in rtl.createSet(pas.PasResolveEval.TREVKind.revkNil,pas.PasResolveEval.TREVKind.revkBool,pas.PasResolveEval.TREVKind.revkInt,pas.PasResolveEval.TREVKind.revkUInt,pas.PasResolveEval.TREVKind.revkFloat,pas.PasResolveEval.TREVKind.revkEnum)) {
              Result = Self.ConvertConstValue(Value,AContext,El);
              return Result;
            };
          } finally {
            pas.PasResolveEval.ReleaseEvalValue({get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }});
          };
          if (pas.PasTree.TVariableModifier.vmExternal in Decl.VarModifiers) {
            Result = Self.ConvertElement(Decl.Expr,AContext);
            return Result;
          };
        };
      } else if (Decl.$class.ClassType() === pas.PasTree.TPasResString) {
        Call = Self.CreateCallExpression(El);
        Result = Call;
        Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnGetResourcestring]]);
        Call.AddArg(Self.CreatePrimitiveDotExpr(Self.TransformModuleName(Decl.GetModule(),true,AContext),El));
        Call.AddArg(Self.CreateLiteralString(El,Self.TransformVariableName$1(Decl,AContext)));
        return Result;
      } else if (pas.PasResolver.TResElDataBuiltInProc.isPrototypeOf(Decl.FData)) {
        BuiltInProc = Decl.FData;
        var $tmp2 = BuiltInProc.BuiltIn;
        if ($tmp2 === pas.PasResolver.TResolverBuiltInProc.bfBreak) {
          Result = Self.ConvertBuiltInBreak(El,AContext)}
         else if ($tmp2 === pas.PasResolver.TResolverBuiltInProc.bfContinue) {
          Result = Self.ConvertBuiltInContinue(El,AContext)}
         else if ($tmp2 === pas.PasResolver.TResolverBuiltInProc.bfExit) {
          Result = Self.ConvertBuiltIn_Exit(El,AContext)}
         else {
          Self.RaiseNotSupported(El,AContext,20161130164955,"built in proc " + pas.PasResolver.ResolverBuiltInProcNames[BuiltInProc.BuiltIn]);
        };
        if (Result === null) Self.RaiseInconsistency(20170214120048,Decl);
        return Result;
      };
      if (pas.PasTree.TPasModule.isPrototypeOf(Decl)) {
        Name = Self.TransformModuleName(Decl,true,AContext)}
       else if (pas.PasTree.TPasResultElement.isPrototypeOf(Decl)) {
        Name = pas.PasResolver.ResolverResultVar;
        Func = rtl.as(Decl.FParent.FParent,pas.PasTree.TPasFunction);
        FuncScope = rtl.as(Func.FData,$mod.TPas2JSProcedureScope);
        if (FuncScope.ImplProc !== null) FuncScope = rtl.as(FuncScope.ImplProc.FData,$mod.TPas2JSProcedureScope);
        if (FuncScope.ResultVarName !== "") Name = FuncScope.ResultVarName;
      } else if (Decl.$class.ClassType() === pas.PasTree.TPasEnumValue) {
        if (Self.GetUseEnumNumbers()) {
          Result = Self.CreateLiteralNumber(El,rtl.as(Decl.FParent,pas.PasTree.TPasEnumType).Values.IndexOf(Decl));
          return Result;
        } else {
          Name = Self.CreateReferencePath(Decl,AContext,$mod.TRefPathKind.rpkPathAndName,true,null);
        };
      } else if ((pas.SysUtils.CompareText(aName,"Self") === 0) && (AContext.GetSelfContext() !== null)) {
        Name = AContext.GetLocalName(Decl)}
       else Name = Self.CreateReferencePath(Decl,AContext,$mod.TRefPathKind.rpkPathAndName,false,Ref);
      if (Name === "") Self.RaiseNotSupported(El,AContext,20180509134804,pas.PasResolveEval.GetObjName(Decl));
      if (Result === null) {
        if ((((Name.charAt(0) === "[") && (Name.charAt(Name.length - 1) === "]")) && $mod.TDotContext.isPrototypeOf(AContext)) && (AContext.JSElement !== null)) {
          if (IsImplicitCall) Self.RaiseNotSupported(El,AContext,20180509134951,Name);
          BracketExpr = Self.CreateElement(pas.jstree.TJSBracketMemberExpression,El);
          AContext.JS = BracketExpr;
          BracketExpr.FMexpr = AContext.JSElement;
          Result = Self.CreateLiteralCustomValue(El,pas.System.Copy(Name,2,Name.length - 2));
          BracketExpr.FName = Result;
          return Result;
        };
        Result = Self.CreatePrimitiveDotExpr(Name,El);
      };
      if (IsImplicitCall) CallImplicit(Decl);
      return Result;
    };
    this.ConvertUnaryExpression = function (El, AContext) {
      var Self = this;
      var Result = null;
      function NotSupported(Id) {
        var ResolvedEl = new pas.PasResolver.TPasResolverResult();
        if (AContext.Resolver !== null) {
          AContext.Resolver.ComputeElement(El.Operand,{get: function () {
              return ResolvedEl;
            }, set: function (v) {
              ResolvedEl = v;
            }},{},El);
          Self.DoError$2(Id,3085,rtl.getResStr(pas.PasResolveEval,"sIllegalQualifierInFrontOf"),[pas.PasTree.OpcodeStrings[El.OpCode],AContext.Resolver.GetResolverResultDescription(ResolvedEl,false)],El);
        } else Self.DoError$2(Id,4003,rtl.getResStr(pas.FPPas2Js,"sUnaryOpcodeNotSupported"),[pas.PasTree.OpcodeStrings[El.OpCode]],El);
      };
      function DerefPointer(TypeEl) {
        var Result$1 = false;
        if (TypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
          Result = Self.ConvertElement(El.Operand,AContext);
          return true;
        };
        Result$1 = false;
        return Result$1;
      };
      var U = null;
      var E = null;
      var ResolvedOp = new pas.PasResolver.TPasResolverResult();
      var ResolvedEl = new pas.PasResolver.TPasResolverResult();
      var BitwiseNot = false;
      var aResolver = null;
      var TypeEl = null;
      var SubTypeEl = null;
      if (AContext === null) ;
      aResolver = AContext.Resolver;
      Result = null;
      U = null;
      var $tmp1 = El.OpCode;
      if ($tmp1 === pas.PasTree.TExprOpCode.eopAdd) {
        E = Self.ConvertElement(El.Operand,AContext);
        U = Self.CreateUnaryPlus(E,El);
        U.FA = E;
      } else if ($tmp1 === pas.PasTree.TExprOpCode.eopSubtract) {
        E = Self.ConvertElement(El.Operand,AContext);
        U = Self.CreateElement(pas.jstree.TJSUnaryMinusExpression,El);
        U.FA = E;
      } else if ($tmp1 === pas.PasTree.TExprOpCode.eopNot) {
        E = Self.ConvertElement(El.Operand,AContext);
        BitwiseNot = true;
        if (aResolver !== null) {
          aResolver.ComputeElement(El.Operand,{get: function () {
              return ResolvedOp;
            }, set: function (v) {
              ResolvedOp = v;
            }},{},null);
          BitwiseNot = ResolvedOp.BaseType in $mod.btAllJSInteger;
        };
        if (BitwiseNot) {
          U = Self.CreateElement(pas.jstree.TJSUnaryInvExpression,El)}
         else U = Self.CreateElement(pas.jstree.TJSUnaryNotExpression,El);
        U.FA = E;
      } else if ($tmp1 === pas.PasTree.TExprOpCode.eopAddress) {
        if (aResolver === null) NotSupported(20180423162321);
        aResolver.ComputeElement(El.Operand,{get: function () {
            return ResolvedEl;
          }, set: function (v) {
            ResolvedEl = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btProc) {
          if (pas.PasTree.TPasProcedure.isPrototypeOf(ResolvedEl.IdentEl)) {
            Result = Self.CreateCallback(El.Operand,new pas.PasResolver.TPasResolverResult(ResolvedEl),AContext);
            return Result;
          };
        } else if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          TypeEl = ResolvedEl.LoTypeEl;
          if (TypeEl.$class.ClassType() === pas.PasTree.TPasRecordType) {
            Result = Self.ConvertElement(El.Operand,AContext);
            return Result;
          };
        };
      } else if ($tmp1 === pas.PasTree.TExprOpCode.eopDeref) {
        if (aResolver === null) NotSupported(20180423162350);
        aResolver.ComputeElement(El.Operand,{get: function () {
            return ResolvedEl;
          }, set: function (v) {
            ResolvedEl = v;
          }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcNoImplicitProc),null);
        if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btPointer) {
          TypeEl = ResolvedEl.LoTypeEl;
          if (DerefPointer(TypeEl)) return Result;
        } else if (ResolvedEl.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
          TypeEl = ResolvedEl.LoTypeEl;
          if (TypeEl.$class.ClassType() === pas.PasTree.TPasPointerType) {
            SubTypeEl = aResolver.ResolveAliasType(TypeEl.DestType);
            if (DerefPointer(SubTypeEl)) return Result;
          };
        };
      } else if ($tmp1 === pas.PasTree.TExprOpCode.eopMemAddress) {
        Result = Self.ConvertElement(El.Operand,AContext);
        return Result;
      };
      if (U === null) NotSupported(20180423162324);
      Result = U;
      return Result;
    };
    this.ConvertElement = function (El, AContext) {
      var Result = null;
      var C = null;
      if (El === null) {
        Result = null;
        this.RaiseInconsistency(20161024190203,El);
      };
      C = El.$class.ClassType();
      if (C === pas.PasTree.TPasConst) {
        Result = this.ConvertConst(El,AContext)}
       else if (C === pas.PasTree.TPasProperty) {
        Result = this.ConvertProperty(El,AContext)}
       else if (C === pas.PasTree.TPasVariable) {
        Result = this.ConvertVariable(El,AContext)}
       else if (C === pas.PasTree.TPasResString) {
        Result = this.ConvertResString(El,AContext)}
       else if (C === pas.PasTree.TPasExportSymbol) {
        Result = this.ConvertExportSymbol(El,AContext)}
       else if (C === pas.PasTree.TPasLabels) {
        Result = this.ConvertLabels(El,AContext)}
       else if (C === pas.PasTree.TPasImplLabelMark) {
        Result = this.ConvertLabelMark(El,AContext)}
       else if (C.InheritsFrom(pas.PasTree.TPasExpr)) {
        Result = this.ConvertExpression(El,AContext)}
       else if (C.InheritsFrom(pas.PasTree.TPasDeclarations)) {
        Result = this.ConvertDeclarations(El,AContext)}
       else if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
        Result = this.ConvertProcedure(El,AContext)}
       else if (C.InheritsFrom(pas.PasTree.TPasImplBlock)) {
        Result = this.ConvertImplBlock(El,AContext)}
       else if (C === pas.PasTree.TPasImplCommand) {
        Result = this.ConvertImplCommand(El,AContext)}
       else if (C.InheritsFrom(pas.PasTree.TPasModule)) {
        Result = this.ConvertModule(El,AContext)}
       else if (C === pas.PasTree.TPasPackage) {
        Result = this.ConvertPackage(El,AContext)}
       else {
        Result = null;
        this.RaiseNotSupported(El,AContext,20161024190449,"");
      };
      return Result;
    };
    this.ConvertProperty = function (El, AContext) {
      var Result = null;
      Result = null;
      if (El.DispIDExpr !== null) this.RaiseNotSupported(El.DispIDExpr,AContext,20170215103029,"property dispid expression");
      return Result;
    };
    this.ConvertConst = function (El, AContext) {
      var Result = null;
      var AssignSt = null;
      var Obj = null;
      var ObjLit = null;
      var ConstContext = null;
      var C = null;
      var V = null;
      var Src = null;
      var Proc = null;
      var ProcScope = null;
      Result = null;
      if (El.AbsoluteExpr !== null) return Result;
      if (pas.PasTree.TVariableModifier.vmExternal in El.VarModifiers) return Result;
      if (!AContext.IsGlobal) {
        ConstContext = AContext.GetGlobalFunc();
        if (!pas.jstree.TJSSourceElements.isPrototypeOf(ConstContext.JSElement)) {
          this.RaiseNotSupported(El,AContext,20170220153216,"");
        };
        Src = ConstContext.JSElement;
        C = this.ConvertVariable(El,AContext);
        if (C === null) this.RaiseInconsistency(20180501114422,El);
        V = this.CreateElement(pas.jstree.TJSVariableStatement,El);
        V.FA = C;
        this.AddToSourceElements(Src,V);
        if (($mod.TPasToJsConverterOption.coStoreImplJS in this.FOptions) && (AContext.Resolver !== null)) {
          Proc = AContext.Resolver.GetTopLvlProc(AContext.PasElement);
          if (Proc !== null) {
            ProcScope = Proc.FData;
            ProcScope.AddGlobalJS(this.CreatePrecompiledJS(V));
          };
        };
      } else if ($mod.TObjectContext.isPrototypeOf(AContext)) {
        Obj = rtl.as(AContext.JSElement,pas.jstree.TJSObjectLiteral);
        ObjLit = Obj.FElements.AddElement();
        ObjLit.FName = this.TransformVariableName$1(El,AContext);
        ObjLit.FExpr = this.CreateVarInit(El,AContext);
      } else {
        AssignSt = this.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
        Result = AssignSt;
        AssignSt.FLHS = this.CreateSubDeclNameExpr$1(El,AContext,null);
        AssignSt.FExpr = this.CreateVarInit(El,AContext);
      };
      return Result;
    };
    this.ConvertDeclarations = function (El, AContext) {
      var Self = this;
      var Result = null;
      var SLFirst = null;
      var SLLast = null;
      var IsProcBody = false;
      var IsFunction = false;
      var IsAssembler = false;
      var HasResult = false;
      var PasProc = null;
      var ProcScope = null;
      var ProcBody = null;
      var ResultEl = null;
      var ResultVarName = "";
      var ResStrVarEl = null;
      var ResStrVarElAdd = false;
      function Add(NewEl, PosEl) {
        if ($mod.TObjectContext.isPrototypeOf(AContext)) {}
        else if (AContext.IsGlobal && pas.jstree.TJSSourceElements.isPrototypeOf(AContext.JSElement)) {
          Self.AddToSourceElements(AContext.JSElement,NewEl)}
         else {
          Self.AddToStatementList({get: function () {
              return SLFirst;
            }, set: function (v) {
              SLFirst = v;
            }},{get: function () {
              return SLLast;
            }, set: function (v) {
              SLLast = v;
            }},NewEl,PosEl);
          Result = SLFirst;
        };
      };
      function AddFunctionResultInit() {
        var VarSt = null;
        var PasFun = null;
        var FunType = null;
        var SrcEl = null;
        var Scope = null;
        PasFun = rtl.as(El.FParent,pas.PasTree.TPasFunction);
        FunType = PasFun.GetFT();
        ResultEl = FunType.ResultEl;
        Scope = rtl.as(PasFun.FData,$mod.TPas2JSProcedureScope);
        if (Scope.ResultVarName !== "") {
          ResultVarName = Scope.ResultVarName}
         else ResultVarName = pas.PasResolver.ResolverResultVar;
        SrcEl = ResultEl;
        VarSt = Self.CreateVarStatement(ResultVarName,Self.CreateValInit(ResultEl.ResultType,null,SrcEl,AContext),ResultEl);
        Add(VarSt,ResultEl);
        Result = SLFirst;
      };
      function AddFunctionResultReturn() {
        var RetSt = null;
        RetSt = Self.CreateElement(pas.jstree.TJSReturnStatement,ResultEl);
        RetSt.FExpr = Self.CreatePrimitiveDotExpr(ResultVarName,ResultEl);
        Add(RetSt,ResultEl);
      };
      function AddResourceString(ResStr) {
        var Value = null;
        var ObjLit = null;
        var Lit = null;
        var RootContext = null;
        Value = AContext.Resolver.Eval(ResStr.Expr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true);
        if ((ResStrVarEl === null) && (El.$class.ClassType() === pas.PasTree.TImplementationSection)) {
          RootContext = AContext.GetContextOfType($mod.TRootContext);
          ResStrVarEl = RootContext.ResourceStrings;
        };
        if (ResStrVarEl === null) {
          ResStrVarEl = Self.CreateElement(pas.jstree.TJSVarDeclaration,El);
          ResStrVarEl.FName = (Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnModule] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnResourceStrings];
          ResStrVarElAdd = true;
          ObjLit = Self.CreateElement(pas.jstree.TJSObjectLiteral,El);
          ResStrVarEl.FInit = ObjLit;
          RootContext = AContext.GetContextOfType($mod.TRootContext);
          RootContext.ResourceStrings = ResStrVarEl;
        };
        Lit = ResStrVarEl.FInit.FElements.AddElement();
        Lit.FName = Self.TransformVariableName$1(ResStr,AContext);
        ObjLit = Self.CreateElement(pas.jstree.TJSObjectLiteral,ResStr);
        Lit.FExpr = ObjLit;
        Lit = ObjLit.FElements.AddElement();
        Lit.FName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnResourceStringOrg];
        Lit.FExpr = Self.ConvertConstValue(Value,AContext,ResStr);
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }});
      };
      function AddResultInterfacRelease(FuncContext) {
        var AssignSt = null;
        var IfSt = null;
        var VarSt = null;
        var Call = null;
        Self.AddInterfaceReleases(FuncContext,ProcBody);
        if (FuncContext.ResultNeedsIntfRelease) {
          VarSt = Self.CreateVarStatement(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnProcOk],Self.CreateLiteralBoolean(ProcBody,false),ProcBody);
          Self.AddInFrontOfFunctionTry(VarSt,ProcBody,FuncContext);
          AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,ProcBody);
          Self.AddToStatementList$1(rtl.as(FuncContext.TrySt.FBlock,pas.jstree.TJSStatementList),AssignSt,ProcBody);
          AssignSt.FLHS = Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnProcOk],ProcBody);
          AssignSt.FExpr = Self.CreateLiteralBoolean(ProcBody,true);
          IfSt = Self.CreateElement(pas.jstree.TJSIfStatement,ProcBody);
          Self.AddFunctionFinallySt(IfSt,ProcBody,FuncContext);
          IfSt.FCond = Self.CreateElement(pas.jstree.TJSUnaryNotExpression,ProcBody);
          IfSt.FCond.FA = Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnProcOk],ProcBody);
          Call = Self.CreateCallExpression(ProcBody);
          IfSt.FBTrue = Call;
          Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntf_Release]]);
          Call.AddArg(Self.CreatePrimitiveDotExpr(ResultVarName,ProcBody));
        };
      };
      var E = null;
      var BodySt = null;
      var I = 0;
      var P = null;
      var C = null;
      var SectionScope = null;
      Result = null;
      IsProcBody = pas.PasTree.TProcedureBody.isPrototypeOf(El) && (El.Body !== null);
      IsFunction = IsProcBody && pas.PasTree.TPasFunction.isPrototypeOf(El.FParent);
      IsAssembler = IsProcBody && pas.PasTree.TPasImplAsmStatement.isPrototypeOf(El.Body);
      HasResult = IsFunction && !IsAssembler;
      if ((AContext.Resolver !== null) && pas.PasTree.TPasSection.isPrototypeOf(El)) {
        SectionScope = rtl.as(El.FData,$mod.TPas2JSSectionScope);
        AContext.ScannerBoolSwitches = rtl.refSet(SectionScope.BoolSwitches);
        AContext.ScannerModeSwitches = rtl.refSet(SectionScope.ModeSwitches);
      };
      SLFirst = null;
      SLLast = null;
      ResultEl = null;
      ResultVarName = "";
      ResStrVarEl = null;
      ResStrVarElAdd = false;
      try {
        if (HasResult) AddFunctionResultInit();
        for (var $l1 = 0, $end2 = El.Declarations.FCount - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          P = rtl.getObject(El.Declarations.Get(I));
          if (!Self.IsElementUsed(P)) continue;
          E = null;
          C = P.$class.ClassType();
          if (C === pas.PasTree.TPasConst) {
            E = Self.ConvertConst(P,AContext)}
           else if (C === pas.PasTree.TPasVariable) {
            E = Self.CreateVarDecl(P,AContext)}
           else if (C.InheritsFrom(pas.PasTree.TPasType)) {
            E = Self.CreateTypeDecl(P,AContext)}
           else if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
            PasProc = P;
            if (PasProc.IsForward()) continue;
            ProcScope = PasProc.FData;
            if ((ProcScope.DeclarationProc !== null) && !ProcScope.DeclarationProc.IsForward()) continue;
            if (ProcScope.DeclarationProc !== null) PasProc = ProcScope.DeclarationProc;
            E = Self.ConvertProcedure(PasProc,AContext);
          } else if (C === pas.PasTree.TPasResString) {
            if (!pas.PasTree.TPasSection.isPrototypeOf(El)) Self.RaiseNotSupported(P,AContext,20171004185348,"");
            AddResourceString(P);
            continue;
          } else Self.RaiseNotSupported(rtl.as(P,pas.PasTree.TPasElement),AContext,20161024191434,"");
          Add(E,P);
        };
        if (IsProcBody) {
          ProcBody = El.Body;
          if ((ProcBody.Elements.FCount > 0) || IsAssembler) {
            BodySt = Self.ConvertElement(ProcBody,AContext);
            if ($mod.TFunctionContext.isPrototypeOf(AContext)) {
              AContext.BodySt = BodySt;
              AddResultInterfacRelease(AContext);
              BodySt = AContext.BodySt;
            };
            Add(BodySt,ProcBody);
          };
        };
        if (HasResult) AddFunctionResultReturn();
        if (ResStrVarEl !== null) {
          if (ResStrVarElAdd) Add(ResStrVarEl,El);
          ResStrVarEl = null;
        };
      } finally {
        ResStrVarEl = rtl.freeLoc(ResStrVarEl);
      };
      return Result;
    };
    this.ConvertExportSymbol = function (El, AContext) {
      var Result = null;
      this.RaiseNotSupported(El,AContext,20161024192650,"");
      Result = null;
      return Result;
    };
    this.ConvertExpression = function (El, AContext) {
      var Result = null;
      Result = null;
      if (El.$class.ClassType() === pas.PasTree.TUnaryExpr) {
        Result = this.ConvertUnaryExpression(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TBinaryExpr) {
        Result = this.ConvertBinaryExpression(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TPrimitiveExpr) {
        Result = this.ConvertPrimitiveExpression(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TBoolConstExpr) {
        Result = this.ConvertBoolConstExpression(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TNilExpr) {
        Result = this.ConvertNilExpr(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TInheritedExpr) {
        Result = this.ConvertInheritedExpression(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TSelfExpr) {
        Result = this.ConvertSelfExpression(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TParamsExpr) {
        Result = this.ConvertParamsExpression(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TRecordValues) {
        Result = this.ConvertRecordValues(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TArrayValues) {
        Result = this.ConvertArrayValues(El,AContext)}
       else this.RaiseNotSupported(El,AContext,20161024191314,"");
      return Result;
    };
    this.ConvertImplBlock = function (El, AContext) {
      var Result = null;
      Result = null;
      if (pas.PasTree.TPasImplStatement.isPrototypeOf(El)) {
        Result = this.ConvertStatement(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TPasImplIfElse) {
        Result = this.ConvertIfStatement(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TPasImplRepeatUntil) {
        Result = this.ConvertRepeatStatement(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TPasImplBeginBlock) {
        Result = this.ConvertBeginEndStatement(El,AContext,true)}
       else if (El.$class.ClassType() === pas.PasTree.TInitializationSection) {
        Result = this.ConvertInitializationSection(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TFinalizationSection) {
        Result = this.ConvertFinalizationSection(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TPasImplTry) {
        Result = this.ConvertTryStatement(El,AContext)}
       else if (El.$class.ClassType() === pas.PasTree.TPasImplCaseOf) {
        Result = this.ConvertCaseOfStatement(El,AContext)}
       else this.RaiseNotSupported(El,AContext,20161024192156,"");
      return Result;
    };
    this.ConvertImplCommand = function (El, AContext) {
      var Result = null;
      if (El.Command !== "") this.RaiseNotSupported(El,AContext,20181013224809,El.Command);
      if (!pas.PasTree.TPasImplIfElse.isPrototypeOf(El.FParent)) this.RaiseNotSupported(El,AContext,20181013224929,pas.PasResolveEval.GetObjName(El.FParent));
      Result = null;
      return Result;
    };
    this.ConvertLabelMark = function (El, AContext) {
      var Result = null;
      this.RaiseNotSupported(El,AContext,20161024192857,"");
      Result = null;
      return Result;
    };
    this.ConvertLabels = function (El, AContext) {
      var Result = null;
      this.RaiseNotSupported(El,AContext,20161024192701,"");
      Result = null;
      return Result;
    };
    this.ConvertModule = function (El, AContext) {
      var Result = null;
      var OuterSrc = null;
      var Src = null;
      var RegModuleCall = null;
      var Call = null;
      var ArgArray = null;
      var FunDecl = null;
      var ImplFunc = null;
      var UsesSection = null;
      var ModuleName = "";
      var ModVarName = "";
      var IntfContext = null;
      var ImplVarSt = null;
      var HasImplUsesClause = false;
      var ok = false;
      var NeedRTLCheckVersion = false;
      var UsesClause = [];
      Result = null;
      OuterSrc = this.CreateElement(pas.jstree.TJSSourceElements,El);
      Result = OuterSrc;
      ok = false;
      try {
        RegModuleCall = this.CreateCallExpression(El);
        this.AddToSourceElements(OuterSrc,RegModuleCall);
        RegModuleCall.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],"module"]);
        ArgArray = RegModuleCall.FArgs;
        RegModuleCall.FArgs = ArgArray;
        ModuleName = this.TransformModuleName(El,false,AContext);
        ArgArray.FElements.AddElement().FExpr = this.CreateLiteralString(El,ModuleName);
        UsesSection = null;
        if (pas.PasTree.TPasProgram.isPrototypeOf(El)) {
          UsesSection = El.ProgramSection}
         else if (pas.PasTree.TPasLibrary.isPrototypeOf(El)) {
          UsesSection = El.LibrarySection}
         else UsesSection = El.InterfaceSection;
        ArgArray.FElements.AddElement().FExpr = this.CreateUsesList(UsesSection,AContext);
        FunDecl = this.CreateFunctionSt(El,true,true);
        ArgArray.AddElement(FunDecl);
        Src = rtl.as(FunDecl.FFuncDef.FBody.FA,pas.jstree.TJSSourceElements);
        if ($mod.TPasToJsConverterOption.coUseStrict in this.FOptions) this.AddToSourceElements(Src,this.CreateLiteralString(El,"use strict"));
        NeedRTLCheckVersion = ($mod.TPasToJsConverterOption.coRTLVersionCheckUnit in this.FOptions) || (($mod.TPasToJsConverterOption.coRTLVersionCheckSystem in this.FOptions) && this.IsSystemUnit(El));
        if (NeedRTLCheckVersion) {
          Call = this.CreateCallExpression(El);
          Call.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnCheckVersion]]);
          Call.AddArg(this.CreateLiteralNumber(El,this.FRTLVersion));
          this.AddToSourceElements(Src,Call);
        };
        ImplVarSt = null;
        HasImplUsesClause = false;
        IntfContext = $mod.TSectionContext.$create("Create$1",[El,Src,AContext]);
        try {
          IntfContext.ThisPas = El;
          if (pas.PasResolver.TPasModuleScope.isPrototypeOf(El.FData)) IntfContext.ScannerBoolSwitches = rtl.refSet(El.FData.BoolSwitches);
          ModVarName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnModule];
          IntfContext.AddLocalVar(ModVarName,El);
          this.AddToSourceElements(Src,this.CreateVarStatement(ModVarName,this.CreatePrimitiveDotExpr("this",El),El));
          if (pas.PasTree.TPasProgram.isPrototypeOf(El)) {
            if (El.ProgramSection != null) this.AddToSourceElements(Src,this.ConvertDeclarations(El.ProgramSection,IntfContext));
            this.CreateInitSection(El,Src,IntfContext);
          } else if (pas.PasTree.TPasLibrary.isPrototypeOf(El)) {
            if (El.LibrarySection != null) this.AddToSourceElements(Src,this.ConvertDeclarations(El.LibrarySection,IntfContext));
            this.CreateInitSection(El,Src,IntfContext);
          } else {
            if (El.ImplementationSection != null) {
              ImplVarSt = this.CreateVarStatement(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnImplementation],this.CreateMemberExpression([ModVarName,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnImplementation]]),El);
              this.AddToSourceElements(Src,ImplVarSt);
              IntfContext.AddLocalVar(this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnImplementation],El.ImplementationSection);
            };
            if (El.InterfaceSection != null) this.AddToSourceElements(Src,this.ConvertDeclarations(El.InterfaceSection,IntfContext));
            this.CreateInitSection(El,Src,IntfContext);
            if (El.ImplementationSection != null) {
              UsesClause = El.ImplementationSection.UsesClause;
              if (rtl.length(UsesClause) > 0) {
                ArgArray.AddElement(this.CreateUsesList(El.ImplementationSection,AContext));
                HasImplUsesClause = true;
              };
            };
          };
        } finally {
          IntfContext = rtl.freeLoc(IntfContext);
        };
        if (ImplVarSt !== null) {
          ImplFunc = this.CreateImplementationSection(El,AContext);
          if (ImplFunc === null) {
            this.RemoveFromSourceElements(Src,ImplVarSt);
          } else {
            if (!HasImplUsesClause) ArgArray.AddElement(this.CreateLiteralNull(El));
            ArgArray.AddElement(ImplFunc);
          };
        };
        ok = true;
      } finally {
        if (!ok) pas.SysUtils.FreeAndNil({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      };
      return Result;
    };
    this.ConvertPackage = function (El, AContext) {
      var Result = null;
      this.RaiseNotSupported(El,AContext,20161024192555,"");
      Result = null;
      return Result;
    };
    this.ConvertProcedure = function (El, AContext) {
      var Self = this;
      var Result = null;
      var BodyJS = null;
      var FirstSt = null;
      var LastSt = null;
      function AddBodyStatement(Add, Src) {
        Self.AddToStatementList({get: function () {
            return FirstSt;
          }, set: function (v) {
            FirstSt = v;
          }},{get: function () {
            return LastSt;
          }, set: function (v) {
            LastSt = v;
          }},Add,Src);
        BodyJS.FA = FirstSt;
      };
      function AddRangeCheck(Arg, MinVal, MaxVal, RTLFunc) {
        var Call = null;
        Call = Self.CreateCallExpression(Arg);
        Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[RTLFunc],El);
        AddBodyStatement(Call,Arg);
        Call.AddArg(Self.CreateArgumentAccess(Arg,AContext,Arg));
        Call.AddArg(Self.CreateLiteralNumber(Arg,MinVal));
        Call.AddArg(Self.CreateLiteralNumber(Arg,MaxVal));
      };
      function AddRangeCheckType(Arg, aType) {
        var Value = null;
        Value = AContext.Resolver.EvalTypeRange(aType,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst));
        if (Value === null) Self.RaiseNotSupported(Arg,AContext,20180424111936,"range checking " + pas.PasResolveEval.GetObjName(aType));
        try {
          var $tmp1 = Value.Kind;
          if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeInt) {
            var $tmp2 = Value.ElKind;
            if (($tmp2 === pas.PasResolveEval.TRESetElKind.revskEnum) || ($tmp2 === pas.PasResolveEval.TRESetElKind.revskInt)) {
              AddRangeCheck(Arg,Value.RangeStart,Value.RangeEnd,$mod.TPas2JSBuiltInName.pbifnRangeCheckInt)}
             else if ($tmp2 === pas.PasResolveEval.TRESetElKind.revskChar) AddRangeCheck(Arg,Value.RangeStart,Value.RangeEnd,$mod.TPas2JSBuiltInName.pbifnRangeCheckChar);
          } else if ($tmp1 === pas.PasResolveEval.TREVKind.revkRangeUInt) {
            AddRangeCheck(Arg,Value.RangeStart,Value.RangeEnd,$mod.TPas2JSBuiltInName.pbifnRangeCheckInt)}
           else {
            Self.RaiseNotSupported(Arg,AContext,20180424112010,"range checking " + Value.AsDebugString());
          };
        } finally {
          pas.PasResolveEval.ReleaseEvalValue({get: function () {
              return Value;
            }, set: function (v) {
              Value = v;
            }});
        };
      };
      var FS = null;
      var FD = null;
      var n = 0;
      var i = 0;
      var Line = 0;
      var Col = 0;
      var AssignSt = null;
      var FuncContext = null;
      var ConstContext = null;
      var ProcScope = null;
      var ImplProcScope = null;
      var Arg = null;
      var SelfSt = null;
      var ImplProc = null;
      var BodyPas = null;
      var PosEl = null;
      var Call = null;
      var ClassPath = "";
      var ArgResolved = new pas.PasResolver.TPasResolverResult();
      var MinVal = 0;
      var MaxVal = 0;
      var Lit = null;
      var ConstSrcElems = null;
      var ArgTypeEl = null;
      var aResolver = null;
      Result = null;
      if (El.IsAbstract()) return Result;
      if (El.IsExternal()) return Result;
      ProcScope = El.FData;
      if (ProcScope.DeclarationProc !== null) return Result;
      aResolver = AContext.Resolver;
      ImplProc = El;
      if (ProcScope.ImplProc !== null) ImplProc = ProcScope.ImplProc;
      ImplProcScope = ImplProc.FData;
      if (ImplProcScope.BodyJS !== "") {
        pas.PasResolver.TPasResolver.UnmangleSourceLineNumber(El.SourceLinenumber,{get: function () {
            return Line;
          }, set: function (v) {
            Line = v;
          }},{get: function () {
            return Col;
          }, set: function (v) {
            Col = v;
          }});
        if (ImplProcScope.GlobalJS !== null) {
          ConstContext = AContext.GetGlobalFunc();
          if (!pas.jstree.TJSSourceElements.isPrototypeOf(ConstContext.JSElement)) {
            Self.RaiseNotSupported(El,AContext,20180228231008,"");
          };
          ConstSrcElems = ConstContext.JSElement;
          for (var $l1 = 0, $end2 = ImplProcScope.GlobalJS.GetCount() - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            Lit = pas.jstree.TJSLiteral.$create("Create$1",[Line,Col,El.SourceFilename]);
            Lit.FValue.FCustomValue = pas.jsbase.StrToJSString(ImplProcScope.GlobalJS.Get(i));
            Self.AddToSourceElements(ConstSrcElems,Lit);
          };
        };
        Lit = pas.jstree.TJSLiteral.$create("Create$1",[Line,Col,El.SourceFilename]);
        Lit.FValue.FCustomValue = pas.jsbase.StrToJSString(ImplProcScope.BodyJS);
        Result = Lit;
        return Result;
      };
      AssignSt = null;
      if (AContext.IsGlobal) {
        AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,ImplProc);
        Result = AssignSt;
        AssignSt.FLHS = Self.CreateSubDeclNameExpr$1(El,AContext,ImplProc);
      };
      FS = Self.CreateFunctionSt(ImplProc,ImplProc.Body !== null,false);
      FD = FS.FFuncDef;
      if (AssignSt !== null) {
        AssignSt.FExpr = FS}
       else {
        Result = FS;
        FD.FName = Self.TransformVariableName$1(El,AContext);
      };
      for (var $l3 = 0, $end4 = El.ProcType.Args.FCount - 1; $l3 <= $end4; $l3++) {
        n = $l3;
        Arg = rtl.getObject(El.ProcType.Args.Get(n));
        FD.FParams.Add(Self.TransformVariableName$1(Arg,AContext));
      };
      BodyPas = ImplProc.Body;
      if (BodyPas !== null) {
        PosEl = BodyPas;
        if (PosEl === null) PosEl = ImplProc;
        BodyJS = FD.FBody;
        FuncContext = $mod.TFunctionContext.$create("Create$1",[ImplProc,FD.FBody,AContext]);
        try {
          FuncContext.ScannerBoolSwitches = rtl.refSet(ImplProcScope.BoolSwitches);
          FirstSt = null;
          LastSt = null;
          if ((pas.PScanner.TBoolSwitch.bsRangeChecks in ImplProcScope.BoolSwitches) && (aResolver !== null)) for (var $l5 = 0, $end6 = El.ProcType.Args.FCount - 1; $l5 <= $end6; $l5++) {
            i = $l5;
            Arg = rtl.getObject(El.ProcType.Args.Get(i));
            if (Arg.ArgType === null) continue;
            aResolver.ComputeElement(Arg,{get: function () {
                return ArgResolved;
              }, set: function (v) {
                ArgResolved = v;
              }},rtl.createSet(pas.PasResolver.TPasResolverComputeFlag.rcType),null);
            ArgTypeEl = ArgResolved.LoTypeEl;
            if (ArgTypeEl === null) continue;
            if (ArgResolved.BaseType in $mod.btAllJSInteger) {
              if (pas.PasTree.TPasUnresolvedSymbolRef.isPrototypeOf(ArgTypeEl)) {
                if (!aResolver.GetIntegerRange(ArgResolved.BaseType,{get: function () {
                    return MinVal;
                  }, set: function (v) {
                    MinVal = v;
                  }},{get: function () {
                    return MaxVal;
                  }, set: function (v) {
                    MaxVal = v;
                  }})) Self.RaiseNotSupported(Arg,AContext,20180119192608,"");
                AddRangeCheck(Arg,MinVal,MaxVal,$mod.TPas2JSBuiltInName.pbifnRangeCheckInt);
              } else if (ArgTypeEl.$class.ClassType() === pas.PasTree.TPasRangeType) AddRangeCheckType(Arg,ArgTypeEl);
            } else if (ArgResolved.BaseType in $mod.btAllJSChars) {
              AddRangeCheckType(Arg,ArgTypeEl)}
             else if (ArgResolved.BaseType === pas.PasResolver.TResolverBaseType.btContext) {
              if (ArgTypeEl.$class.ClassType() === pas.PasTree.TPasEnumType) AddRangeCheckType(Arg,ArgTypeEl);
            } else if (ArgResolved.BaseType === pas.PasResolver.TResolverBaseType.btRange) {
              if (ArgResolved.SubType in $mod.btAllJSChars) {
                AddRangeCheckType(Arg,ArgTypeEl)}
               else if (ArgResolved.SubType === pas.PasResolver.TResolverBaseType.btContext) AddRangeCheckType(Arg,ArgTypeEl);
            };
          };
          if (ProcScope.ClassScope !== null) {
            if (pas.PasTree.TProcedureBody.isPrototypeOf(El.FParent)) {
              FuncContext.ThisPas = null;
            } else {
              FuncContext.ThisPas = ProcScope.ClassScope.FElement;
              if (pas.PScanner.TBoolSwitch.bsObjectChecks in FuncContext.ScannerBoolSwitches) {
                Call = Self.CreateCallExpression(PosEl);
                AddBodyStatement(Call,PosEl);
                Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnCheckMethodCall]]);
                Call.AddArg(Self.CreatePrimitiveDotExpr("this",PosEl));
                ClassPath = Self.CreateReferencePath(ProcScope.ClassScope.FElement,AContext,$mod.TRefPathKind.rpkPathAndName,false,null);
                Call.AddArg(Self.CreatePrimitiveDotExpr(ClassPath,PosEl));
              };
              if (ImplProc.Body.Functions.FCount > 0) {
                FuncContext.AddLocalVar(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnSelf],FuncContext.ThisPas);
                SelfSt = Self.CreateVarStatement(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnSelf],Self.CreatePrimitiveDotExpr("this",ImplProc),ImplProc);
                AddBodyStatement(SelfSt,PosEl);
                if (ImplProcScope.SelfArg !== null) {
                  FuncContext.AddLocalVar(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnSelf],ImplProcScope.SelfArg);
                };
              } else if (ImplProcScope.SelfArg !== null) {
                FuncContext.AddLocalVar("this",ImplProcScope.SelfArg);
              };
            };
          };
          if (BodyPas !== null) AddBodyStatement(Self.ConvertDeclarations(BodyPas,FuncContext),BodyPas);
        } finally {
          FuncContext = rtl.freeLoc(FuncContext);
        };
      };
      if (($mod.TPasToJsConverterOption.coStoreImplJS in Self.FOptions) && (aResolver !== null)) {
        if (aResolver.GetTopLvlProc(El) === El) {
          ImplProcScope.BodyJS = Self.CreatePrecompiledJS(Result);
          ImplProcScope.EmptyJS = BodyPas.Body === null;
        };
      };
      return Result;
    };
    this.ConvertResString = function (El, AContext) {
      var Result = null;
      this.RaiseNotSupported(El,AContext,20161024192604,"");
      Result = null;
      return Result;
    };
    this.ConvertVariable = function (El, AContext) {
      var Result = null;
      var V = null;
      var vm = 0;
      for (vm = 0; vm <= 5; vm++) if ((vm in El.VarModifiers) && !(vm in rtl.createSet(pas.PasTree.TVariableModifier.vmClass,pas.PasTree.TVariableModifier.vmExternal))) this.RaiseNotSupported(El,AContext,20170208141622,"modifier " + pas.PasTree.VariableModifierNames[vm]);
      if (El.LibraryName !== null) this.RaiseNotSupported(El,AContext,20170208141844,"library name");
      if (El.AbsoluteExpr !== null) this.RaiseNotSupported(El,AContext,20170208141926,"absolute");
      V = this.CreateElement(pas.jstree.TJSVarDeclaration,El);
      V.FName = this.TransformVariableName$1(El,AContext);
      V.FInit = this.CreateVarInit(El,AContext);
      Result = V;
      return Result;
    };
    var SrcParamName = "s";
    var EqualParamName = "b";
    this.ConvertRecordType = function (El, AContext) {
      var Self = this;
      var Result = null;
      function AddCloneStatements(IfSt, FuncContext) {
        var i = 0;
        var PasVar = null;
        var VarAssignSt = null;
        var First = null;
        var Last = null;
        var VarDotExpr = null;
        var PasVarType = null;
        var VarName = "";
        First = null;
        Last = null;
        for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          PasVar = rtl.getObject(El.Members.Get(i));
          if (!Self.IsElementUsed(PasVar)) continue;
          VarName = Self.TransformVariableName$1(PasVar,FuncContext);
          VarAssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,PasVar);
          Self.AddToStatementList({get: function () {
              return First;
            }, set: function (v) {
              First = v;
            }},{get: function () {
              return Last;
            }, set: function (v) {
              Last = v;
            }},VarAssignSt,PasVar);
          if (IfSt.FBTrue === null) IfSt.FBTrue = First;
          VarAssignSt.FLHS = Self.CreateSubDeclNameExpr(PasVar,VarName,FuncContext,null);
          VarDotExpr = Self.CreateElement(pas.jstree.TJSDotMemberExpression,PasVar);
          VarAssignSt.FExpr = VarDotExpr;
          VarDotExpr.FMexpr = Self.CreatePrimitiveDotExpr(SrcParamName,PasVar);
          VarDotExpr.FName = VarName;
          if (AContext.Resolver !== null) {
            PasVarType = AContext.Resolver.ResolveAliasType(PasVar.VarType);
            if (PasVarType.$class.ClassType() === pas.PasTree.TPasArrayType) {
              if (rtl.length(PasVarType.Ranges) > 0) {
                VarAssignSt.FExpr = Self.CreateCloneStaticArray(PasVar,PasVarType,VarDotExpr,FuncContext);
              };
            } else if (PasVarType.$class.ClassType() === pas.PasTree.TPasRecordType) {
              VarAssignSt.FExpr = Self.CreateCloneRecord(PasVar,PasVarType,VarDotExpr,FuncContext);
            } else if (PasVarType.$class.ClassType() === pas.PasTree.TPasSetType) {
              VarAssignSt.FExpr = Self.CreateReferencedSet(PasVar,VarDotExpr);
            };
          };
        };
      };
      function AddInitDefaultStatements(IfSt, FuncContext) {
        var i = 0;
        var PasVar = null;
        var JSVar = null;
        var First = null;
        var Last = null;
        First = null;
        Last = null;
        for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          PasVar = rtl.getObject(El.Members.Get(i));
          if (!Self.IsElementUsed(PasVar)) continue;
          JSVar = Self.CreateVarDecl(PasVar,FuncContext);
          Self.AddToStatementList({get: function () {
              return First;
            }, set: function (v) {
              First = v;
            }},{get: function () {
              return Last;
            }, set: function (v) {
              Last = v;
            }},JSVar,PasVar);
          if (IfSt.FBFalse === null) IfSt.FBFalse = First;
        };
      };
      function Add_AndExpr_ToReturnSt(RetSt, PasVar, LastAndExpr, Expr) {
        var AndExpr = null;
        if (RetSt.FExpr === null) {
          RetSt.FExpr = Expr}
         else {
          AndExpr = Self.CreateElement(pas.jstree.TJSLogicalAndExpression,PasVar);
          if (LastAndExpr.get() === null) {
            AndExpr.FA = RetSt.FExpr;
            RetSt.FExpr = AndExpr;
          } else {
            AndExpr.FA = LastAndExpr.get().FB;
            LastAndExpr.get().FB = AndExpr;
          };
          AndExpr.FB = Expr;
          LastAndExpr.set(AndExpr);
        };
      };
      function AddEqualFunction(BodyFirst, BodyLast, FuncContext) {
        var AssignSt = null;
        var FD = null;
        var RetSt = null;
        var i = 0;
        var PasVar = null;
        var FDS = null;
        var EqExpr = null;
        var LastAndExpr = null;
        var VarType = null;
        var Call = null;
        var VarName = "";
        AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
        AssignSt.FLHS = Self.CreateMemberExpression(["this",Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRecordEqual]]);
        Self.AddToStatementList(BodyFirst,BodyLast,AssignSt,El);
        FDS = Self.CreateFunctionSt(El,true,false);
        AssignSt.FExpr = FDS;
        FD = FDS.FFuncDef;
        FD.FParams.Add(EqualParamName);
        RetSt = Self.CreateElement(pas.jstree.TJSReturnStatement,El);
        FD.FBody.FA = RetSt;
        LastAndExpr = null;
        for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          PasVar = rtl.getObject(El.Members.Get(i));
          if (!Self.IsElementUsed(PasVar)) continue;
          VarType = PasVar.VarType;
          if (FuncContext.Resolver !== null) VarType = FuncContext.Resolver.ResolveAliasType(VarType);
          VarName = Self.TransformVariableName$1(PasVar,FuncContext);
          if (VarType.$class.ClassType() === pas.PasTree.TPasRecordType) {
            Call = Self.CreateCallExpression(PasVar);
            Add_AndExpr_ToReturnSt(RetSt,PasVar,{get: function () {
                return LastAndExpr;
              }, set: function (v) {
                LastAndExpr = v;
              }},Call);
            Call.FExpr = Self.CreateMemberExpression(["this",VarName,Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRecordEqual]]);
            Call.AddArg(Self.CreateMemberExpression([EqualParamName,VarName]));
          } else if (VarType.$class.ClassType() === pas.PasTree.TPasSetType) {
            Call = Self.CreateCallExpression(PasVar);
            Add_AndExpr_ToReturnSt(RetSt,PasVar,{get: function () {
                return LastAndExpr;
              }, set: function (v) {
                LastAndExpr = v;
              }},Call);
            Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnSet_Equal]]);
            Call.AddArg(Self.CreateMemberExpression(["this",VarName]));
            Call.AddArg(Self.CreateMemberExpression([EqualParamName,VarName]));
          } else if (pas.PasTree.TPasProcedureType.isPrototypeOf(VarType)) {
            Call = Self.CreateCallExpression(PasVar);
            Add_AndExpr_ToReturnSt(RetSt,PasVar,{get: function () {
                return LastAndExpr;
              }, set: function (v) {
                LastAndExpr = v;
              }},Call);
            Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnProcType_Equal]]);
            Call.AddArg(Self.CreateMemberExpression(["this",VarName]));
            Call.AddArg(Self.CreateMemberExpression([EqualParamName,VarName]));
          } else if ((VarType.$class.ClassType() === pas.PasTree.TPasArrayType) && (rtl.length(VarType.Ranges) > 0)) {
            Call = Self.CreateCallExpression(PasVar);
            Add_AndExpr_ToReturnSt(RetSt,PasVar,{get: function () {
                return LastAndExpr;
              }, set: function (v) {
                LastAndExpr = v;
              }},Call);
            Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Equal]]);
            Call.AddArg(Self.CreateMemberExpression(["this",VarName]));
            Call.AddArg(Self.CreateMemberExpression([EqualParamName,VarName]));
          } else {
            EqExpr = Self.CreateElement(pas.jstree.TJSEqualityExpressionSEQ,PasVar);
            Add_AndExpr_ToReturnSt(RetSt,PasVar,{get: function () {
                return LastAndExpr;
              }, set: function (v) {
                LastAndExpr = v;
              }},EqExpr);
            EqExpr.FA = Self.CreateMemberExpression(["this",VarName]);
            EqExpr.FB = Self.CreateMemberExpression([EqualParamName,VarName]);
          };
        };
        if (RetSt.FExpr === null) RetSt.FExpr = Self.CreateLiteralBoolean(El,true);
      };
      function AddRTTIFields(Args, First, Last) {
        var i = 0;
        var PasVar = null;
        var VarType = null;
        for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          PasVar = rtl.getObject(El.Members.Get(i));
          if (!Self.IsElementUsed(PasVar)) continue;
          VarType = PasVar.VarType;
          if (VarType.FName === "") Self.CreateRTTIAnonymous(VarType,AContext,First,Last);
          Args.AddElement(Self.CreateLiteralString(PasVar,Self.TransformVariableName$1(PasVar,AContext)));
          Args.AddElement(Self.CreateTypeInfoRef(VarType,AContext,PasVar));
        };
      };
      var AssignSt = null;
      var FDS = null;
      var FD = null;
      var BodyFirst = null;
      var BodyLast = null;
      var ListFirst = null;
      var ListLast = null;
      var FuncContext = null;
      var ObjLit = null;
      var IfSt = null;
      var Call = null;
      var Call2 = null;
      var ok = false;
      Result = null;
      FuncContext = null;
      ListFirst = null;
      ListLast = null;
      ok = false;
      try {
        FDS = Self.CreateFunctionSt(El,true,false);
        FD = FDS.FFuncDef;
        if (pas.PasTree.TProcedureBody.isPrototypeOf(El.FParent)) {
          Result = FDS;
          FD.FName = Self.TransformVariableName$1(El,AContext);
        } else {
          AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
          Result = AssignSt;
          AssignSt.FLHS = Self.CreateSubDeclNameExpr$1(El,AContext,null);
          AssignSt.FExpr = FDS;
        };
        FD.FParams.Add(SrcParamName);
        FuncContext = $mod.TFunctionContext.$create("Create$1",[El,FD.FBody,AContext]);
        FuncContext.ThisPas = El;
        FuncContext.IsGlobal = true;
        BodyFirst = null;
        BodyLast = null;
        if (El.Members.FCount > 0) {
          IfSt = Self.CreateElement(pas.jstree.TJSIfStatement,El);
          Self.AddToStatementList({get: function () {
              return BodyFirst;
            }, set: function (v) {
              BodyFirst = v;
            }},{get: function () {
              return BodyLast;
            }, set: function (v) {
              BodyLast = v;
            }},IfSt,El);
          FD.FBody.FA = BodyFirst;
          IfSt.FCond = Self.CreatePrimitiveDotExpr(SrcParamName,El);
          AddCloneStatements(IfSt,FuncContext);
          AddInitDefaultStatements(IfSt,FuncContext);
        };
        AddEqualFunction({get: function () {
            return BodyFirst;
          }, set: function (v) {
            BodyFirst = v;
          }},{get: function () {
            return BodyLast;
          }, set: function (v) {
            BodyLast = v;
          }},FuncContext);
        if (FD.FBody.FA === null) FD.FBody.FA = BodyFirst;
        if (Self.HasTypeInfo(El,AContext)) {
          if (!$mod.TFunctionContext.isPrototypeOf(AContext)) Self.RaiseNotSupported(El,AContext,20170412120012,"");
          Self.AddToStatementList({get: function () {
              return ListFirst;
            }, set: function (v) {
              ListFirst = v;
            }},{get: function () {
              return ListLast;
            }, set: function (v) {
              ListLast = v;
            }},Result,El);
          Result = null;
          Call = Self.CreateRTTINewType(El,Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewRecord],false,AContext,{get: function () {
              return ObjLit;
            }, set: function (v) {
              ObjLit = v;
            }});
          if (ObjLit === null) Self.RaiseInconsistency(20170412124804,El);
          if (El.Members.FCount > 0) {
            Call2 = Self.CreateCallExpression(El);
            Call2.FExpr = Self.CreateDotExpression(El,Call,Self.CreatePrimitiveDotExpr(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTIAddFields],El),false);
            Call = Call2;
            AddRTTIFields(Call.FArgs,{get: function () {
                return ListFirst;
              }, set: function (v) {
                ListFirst = v;
              }},{get: function () {
                return ListLast;
              }, set: function (v) {
                ListLast = v;
              }});
          };
          Self.AddToStatementList({get: function () {
              return ListFirst;
            }, set: function (v) {
              ListFirst = v;
            }},{get: function () {
              return ListLast;
            }, set: function (v) {
              ListLast = v;
            }},Call,El);
          Result = ListFirst;
          ListFirst = null;
          ListLast = null;
        };
        ok = true;
      } finally {
        FuncContext = rtl.freeLoc(FuncContext);
        if (ListFirst !== null) {
          pas.SysUtils.FreeAndNil({get: function () {
              return ListFirst;
            }, set: function (v) {
              ListFirst = v;
            }})}
         else if (!ok) pas.SysUtils.FreeAndNil({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      };
      return Result;
    };
    var MemberFuncName = ["$init","$final"];
    this.ConvertClassType = function (El, AContext) {
      var Self = this;
      var Result = null;
      var TMemberFunc = {"0": "mfInit", mfInit: 0, "1": "mfFinalize", mfFinalize: 1};
      var IsTObject = false;
      var AncestorIsExternal = false;
      function IsMemberNeeded(aMember) {
        var Result = false;
        if (Self.IsElementUsed(aMember)) return true;
        if (IsTObject) {
          if (pas.PasTree.TPasProcedure.isPrototypeOf(aMember)) {
            if ((pas.SysUtils.CompareText(aMember.FName,"AfterConstruction") === 0) || (pas.SysUtils.CompareText(aMember.FName,"BeforeDestruction") === 0)) return true;
          };
        };
        Result = false;
        return Result;
      };
      function AddCallAncestorMemberFunction(ClassContext, Ancestor, Src, Kind) {
        var Call = null;
        var AncestorPath = "";
        if ((Ancestor === null) || AncestorIsExternal) return;
        Call = Self.CreateCallExpression(El);
        AncestorPath = Self.CreateReferencePath(Ancestor,ClassContext,$mod.TRefPathKind.rpkPathAndName,false,null);
        Call.FExpr = Self.CreatePrimitiveDotExpr(((AncestorPath + ".") + MemberFuncName[Kind]) + ".call",El);
        Call.AddArg(Self.CreatePrimitiveDotExpr("this",El));
        Self.AddToSourceElements(Src,Call);
      };
      function AddInstanceMemberFunction(Src, ClassContext, Ancestor, Kind) {
        var FuncVD = null;
        var New_Src = null;
        var New_FuncContext = null;
        var I = 0;
        var P = null;
        var NewEl = null;
        var Func = null;
        var VarType = null;
        var AssignSt = null;
        New_Src = Self.CreateElement(pas.jstree.TJSSourceElements,El);
        New_FuncContext = $mod.TFunctionContext.$create("Create$1",[El,New_Src,ClassContext]);
        try {
          New_FuncContext.ThisPas = El;
          New_FuncContext.IsGlobal = true;
          for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            P = rtl.getObject(El.Members.Get(I));
            if (!IsMemberNeeded(P)) continue;
            NewEl = null;
            if ((P.$class.ClassType() === pas.PasTree.TPasVariable) && rtl.eqSet(rtl.intersectSet($mod.ClassVarModifiersType,P.VarModifiers),{})) {
              if (Kind === TMemberFunc.mfInit) {
                NewEl = Self.CreateVarDecl(P,New_FuncContext)}
               else {
                if (pas.PasTree.TVariableModifier.vmExternal in P.VarModifiers) continue;
                VarType = ClassContext.Resolver.ResolveAliasType(P.VarType);
                if (((((((VarType.$class.ClassType() === pas.PasTree.TPasRecordType) || (VarType.$class.ClassType() === pas.PasTree.TPasClassType)) || (VarType.$class.ClassType() === pas.PasTree.TPasClassOfType)) || (VarType.$class.ClassType() === pas.PasTree.TPasSetType)) || (VarType.$class.ClassType() === pas.PasTree.TPasProcedureType)) || (VarType.$class.ClassType() === pas.PasTree.TPasFunctionType)) || (VarType.$class.ClassType() === pas.PasTree.TPasArrayType)) {
                  AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
                  NewEl = AssignSt;
                  AssignSt.FLHS = Self.CreateSubDeclNameExpr$1(P,New_FuncContext,null);
                  AssignSt.FExpr = Self.CreateLiteralUndefined(El);
                };
              };
            };
            if (NewEl === null) continue;
            if ((Kind === TMemberFunc.mfInit) && (New_Src.FStatements.GetCount() === 0)) AddCallAncestorMemberFunction(ClassContext,Ancestor,New_Src,Kind);
            Self.AddToSourceElements(New_Src,NewEl);
          };
          if ((Kind === TMemberFunc.mfFinalize) && (New_Src.FStatements.GetCount() > 0)) AddCallAncestorMemberFunction(ClassContext,Ancestor,New_Src,Kind);
          if (((Ancestor !== null) && !AncestorIsExternal) && (New_Src.FStatements.GetCount() === 0)) return;
          FuncVD = Self.CreateElement(pas.jstree.TJSVarDeclaration,El);
          Self.AddToSourceElements(Src,FuncVD);
          FuncVD.FName = "this." + MemberFuncName[Kind];
          Func = Self.CreateFunctionSt(El,true,false);
          FuncVD.FInit = Func;
          Func.FFuncDef.FBody.FA = New_Src;
          New_Src = null;
        } finally {
          New_Src = rtl.freeLoc(New_Src);
          New_FuncContext = rtl.freeLoc(New_FuncContext);
        };
      };
      function AddInterfaceProcNames(Call) {
        var Arr = null;
        var i = 0;
        var Member = null;
        Arr = Self.CreateElement(pas.jstree.TJSArrayLiteral,El);
        Call.AddArg(Arr);
        for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Member = rtl.getObject(El.Members.Get(i));
          if (!pas.PasTree.TPasProcedure.isPrototypeOf(Member)) continue;
          if (!IsMemberNeeded(Member)) continue;
          Arr.AddElement(Self.CreateLiteralString(Member,Self.TransformVariableName$1(Member,AContext)));
        };
      };
      function AddMapProcs(map, Call, ObjLit, FuncContext) {
        var i = 0;
        var MapItem = null;
        var Proc = null;
        var IntfProc = null;
        var ProcName = "";
        var IntfProcName = "";
        var Intf = null;
        var Lit = null;
        Intf = map.Intf;
        if (map.Procs !== null) for (var $l1 = 0, $end2 = map.Procs.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          MapItem = rtl.getObject(map.Procs.Get(i));
          if (!pas.PasTree.TPasProcedure.isPrototypeOf(MapItem)) continue;
          Proc = MapItem;
          ProcName = Self.TransformVariableName$1(Proc,FuncContext);
          IntfProc = rtl.as(rtl.getObject(Intf.Members.Get(i)),pas.PasTree.TPasProcedure);
          IntfProcName = Self.TransformVariableName$1(IntfProc,FuncContext);
          if (IntfProcName === ProcName) continue;
          if (ObjLit.get() === null) {
            ObjLit.set(Self.CreateElement(pas.jstree.TJSObjectLiteral,El));
            Call.AddArg(ObjLit.get());
          };
          Lit = ObjLit.get().FElements.AddElement();
          Lit.FName = IntfProcName;
          Lit.FExpr = Self.CreateLiteralString(El,ProcName);
        };
        if (map.AncestorMap !== null) AddMapProcs(map.AncestorMap,Call,ObjLit,FuncContext);
      };
      function AddInterfaces(Src, FuncContext) {
        var Call = null;
        var ObjLit = null;
        var i = 0;
        var Scope = null;
        var CurScope = null;
        var o = null;
        var IntfMaps = null;
        var MapsObj = null;
        var map = null;
        var FinishedGUIDs = null;
        var Intf = null;
        var CurEl = null;
        var NeedIntfMap = false;
        var HasInterfaces = false;
        HasInterfaces = false;
        NeedIntfMap = false;
        Scope = El.FData;
        do {
          if (Scope.Interfaces !== null) {
            for (var $l1 = 0, $end2 = Scope.Interfaces.FCount - 1; $l1 <= $end2; $l1++) {
              i = $l1;
              CurEl = Scope.FElement;
              if (!IsMemberNeeded(rtl.getObject(CurEl.Interfaces.Get(i)))) continue;
              HasInterfaces = true;
              o = rtl.getObject(Scope.Interfaces.Get(i));
              if (pas.PasTree.TPasProperty.isPrototypeOf(o)) NeedIntfMap = true;
            };
          };
          Scope = Scope.AncestorScope;
        } while (!(Scope === null));
        if (!HasInterfaces) return;
        IntfMaps = null;
        FinishedGUIDs = pas.Classes.TStringList.$create("Create$1");
        try {
          ObjLit = null;
          Scope = El.FData;
          do {
            if (Scope.Interfaces !== null) {
              for (var $l3 = 0, $end4 = Scope.Interfaces.FCount - 1; $l3 <= $end4; $l3++) {
                i = $l3;
                CurEl = Scope.FElement;
                if (!IsMemberNeeded(rtl.getObject(CurEl.Interfaces.Get(i)))) continue;
                if (NeedIntfMap) {
                  IntfMaps = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
                  Self.AddToSourceElements(Src,IntfMaps);
                  IntfMaps.FLHS = Self.CreatePrimitiveDotExpr("this." + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnIntfMaps],El);
                  MapsObj = Self.CreateElement(pas.jstree.TJSObjectLiteral,El);
                  IntfMaps.FExpr = MapsObj;
                  NeedIntfMap = false;
                };
                o = rtl.getObject(Scope.Interfaces.Get(i));
                if (pas.PasResolver.TPasClassIntfMap.isPrototypeOf(o)) {
                  map = o;
                  Intf = map.Intf;
                  CurScope = Intf.FData;
                  if (FinishedGUIDs.IndexOf(CurScope.GUID) >= 0) continue;
                  FinishedGUIDs.Add(CurScope.GUID);
                  Call = Self.CreateCallExpression(El);
                  Self.AddToSourceElements(Src,Call);
                  Call.FExpr = Self.CreatePrimitiveDotExpr((Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL] + ".") + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfAddMap],El);
                  Call.AddArg(Self.CreatePrimitiveDotExpr("this",El));
                  Call.AddArg(Self.CreateReferencePathExpr(map.Intf,FuncContext,false,null));
                  AddMapProcs(map,Call,{get: function () {
                      return ObjLit;
                    }, set: function (v) {
                      ObjLit = v;
                    }},FuncContext);
                } else if (pas.PasTree.TPasProperty.isPrototypeOf(o)) {
                  Self.AddIntfDelegations(El,o,FinishedGUIDs,MapsObj,FuncContext)}
                 else Self.RaiseNotSupported(El,FuncContext,20180326234026,pas.PasResolveEval.GetObjName(o));
              };
            };
            Scope = Scope.AncestorScope;
          } while (!(Scope === null));
        } finally {
          FinishedGUIDs = rtl.freeLoc(FinishedGUIDs);
        };
      };
      function AddRTTI(Src, FuncContext) {
        var HasRTTIMembers = false;
        var i = 0;
        var P = null;
        var NewEl = null;
        var VarSt = null;
        var C = null;
        FuncContext.AddLocalVar(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTILocal],null);
        HasRTTIMembers = false;
        for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          P = rtl.getObject(El.Members.Get(i));
          if ((El.ObjKind === pas.PasTree.TPasObjKind.okClass) && (P.Visibility !== pas.PasTree.TPasMemberVisibility.visPublished)) continue;
          if (!IsMemberNeeded(P)) continue;
          NewEl = null;
          C = P.$class.ClassType();
          if (C === pas.PasTree.TPasVariable) {
            NewEl = Self.CreateRTTIClassField(P,FuncContext)}
           else if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
            NewEl = Self.CreateRTTIClassMethod(P,FuncContext)}
           else if (C === pas.PasTree.TPasProperty) {
            NewEl = Self.CreateRTTIClassProperty(P,FuncContext)}
           else if (C.InheritsFrom(pas.PasTree.TPasType)) {
            continue}
           else if (C === pas.PasTree.TPasMethodResolution) {
            continue}
           else Self.DoError$2(20170409202315,3053,rtl.getResStr(pas.PasResolveEval,"sSymbolCannotBePublished"),[],P);
          if (NewEl === null) continue;
          if (!HasRTTIMembers) {
            VarSt = Self.CreateVarStatement(Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTILocal],Self.CreateMemberExpression(["this",Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTI]]),El);
            Self.AddToSourceElements(Src,VarSt);
            HasRTTIMembers = true;
          };
          Self.AddToSourceElements(Src,NewEl);
        };
      };
      var Call = null;
      var FunDecl = null;
      var Src = null;
      var ArgEx = null;
      var FuncContext = null;
      var i = 0;
      var NewEl = null;
      var P = null;
      var Scope = null;
      var Ancestor = null;
      var AncestorPath = "";
      var OwnerName = "";
      var DestructorName = "";
      var FnName = "";
      var IntfKind = "";
      var C = null;
      var AssignSt = null;
      var NeedInitFunction = false;
      Result = null;
      if (!(El.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass,pas.PasTree.TPasObjKind.okInterface))) Self.RaiseNotSupported(El,AContext,20170927183645,"");
      if (El.IsForward) {
        Result = Self.ConvertClassForwardType(El,AContext);
        return Result;
      };
      if (El.IsExternal) return Result;
      if ($mod.TPas2JSClassScope.isPrototypeOf(El.FData)) {
        Scope = El.FData;
        if (Scope.AncestorScope !== null) {
          Ancestor = rtl.as(Scope.AncestorScope.FElement,pas.PasTree.TPasType)}
         else {
          Ancestor = null;
          IsTObject = (El.ObjKind === pas.PasTree.TPasObjKind.okClass) && pas.SysUtils.SameText(El.FName,"TObject");
        };
      } else {
        Scope = null;
        IsTObject = ((El.AncestorType === null) && (El.ObjKind === pas.PasTree.TPasObjKind.okClass)) && pas.SysUtils.SameText(El.FName,"TObject");
        Ancestor = El.AncestorType;
      };
      FuncContext = null;
      Call = Self.CreateCallExpression(El);
      try {
        AncestorIsExternal = pas.PasTree.TPasClassType.isPrototypeOf(Ancestor) && Ancestor.IsExternal;
        if (El.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
          FnName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnIntfCreate]}
         else if (AncestorIsExternal) {
          FnName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnCreateClassExt]}
         else FnName = Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnCreateClass];
        Call.FExpr = Self.CreateMemberExpression([Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],FnName]);
        if ((El.FParent === null) || (pas.PasTree.TPasSection.isPrototypeOf(El.FParent) && (El.FParent.$class.ClassType() !== pas.PasTree.TImplementationSection))) {
          OwnerName = AContext.GetLocalName(El.GetModule())}
         else OwnerName = AContext.GetLocalName(El.FParent);
        if (OwnerName === "") OwnerName = "this";
        Call.AddArg(Self.CreatePrimitiveDotExpr(OwnerName,El));
        ArgEx = Self.CreateLiteralString(El,Self.TransformVariableName$1(El,AContext));
        Call.AddArg(ArgEx);
        if (El.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
          Call.AddArg(Self.CreateLiteralString(El,pas.SysUtils.UpperCase(Scope.GUID)));
          AddInterfaceProcNames(Call);
        };
        if (Ancestor === null) {
          AncestorPath = "null"}
         else if (AncestorIsExternal) {
          AncestorPath = Ancestor.ExternalName}
         else AncestorPath = Self.CreateReferencePath(Ancestor,AContext,$mod.TRefPathKind.rpkPathAndName,false,null);
        Call.AddArg(Self.CreatePrimitiveDotExpr(AncestorPath,El));
        if (AncestorIsExternal && (El.ObjKind === pas.PasTree.TPasObjKind.okClass)) {
          if (Scope.NewInstanceFunction !== null) {
            Call.AddArg(Self.CreateLiteralString(Scope.NewInstanceFunction,Scope.NewInstanceFunction.FName))}
           else Call.AddArg(Self.CreateLiteralString(El,""));
        };
        NeedInitFunction = true;
        IntfKind = "";
        if (El.ObjKind === pas.PasTree.TPasObjKind.okInterface) {
          if ((Scope.AncestorScope === null) && !($mod.TPasToJsConverterOption.coNoTypeInfo in Self.FOptions)) {
            var $tmp1 = El.InterfaceType;
            if ($tmp1 === pas.PasTree.TPasClassInterfaceType.citCom) {
              IntfKind = "com"}
             else if ($tmp1 === pas.PasTree.TPasClassInterfaceType.citCorba) {}
            else {
              Self.RaiseNotSupported(El,AContext,20180405093512,"");
            };
          };
          NeedInitFunction = ((pas.PasResolver.TPasClassScopeFlag.pcsfPublished in Scope.Flags) || Self.HasTypeInfo(El,AContext)) || (IntfKind !== "");
        };
        if (NeedInitFunction) {
          FunDecl = Self.CreateFunctionSt(El,true,true);
          Call.AddArg(FunDecl);
          Src = FunDecl.FFuncDef.FBody.FA;
          FuncContext = $mod.TFunctionContext.$create("Create$1",[El,Src,AContext]);
          FuncContext.IsGlobal = true;
          FuncContext.ThisPas = El;
          if (IntfKind !== "") {
            AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
            AssignSt.FLHS = Self.CreatePrimitiveDotExpr("this." + Self.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnIntfKind],El);
            AssignSt.FExpr = Self.CreateLiteralString(El,IntfKind);
            Self.AddToSourceElements(Src,AssignSt);
          };
          if (El.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass)) {
            for (var $l2 = 0, $end3 = El.Members.FCount - 1; $l2 <= $end3; $l2++) {
              i = $l2;
              P = rtl.getObject(El.Members.Get(i));
              if (!IsMemberNeeded(P)) continue;
              C = P.$class.ClassType();
              NewEl = null;
              if (C === pas.PasTree.TPasVariable) {
                if (rtl.neSet(rtl.intersectSet($mod.ClassVarModifiersType,P.VarModifiers),{})) {
                  NewEl = Self.CreateVarDecl(P,FuncContext);
                  if (NewEl === null) continue;
                } else continue;
              } else if (C === pas.PasTree.TPasConst) {
                NewEl = Self.ConvertConst(P,AContext)}
               else if (C === pas.PasTree.TPasProperty) {
                NewEl = Self.ConvertProperty(P,AContext)}
               else if (C.InheritsFrom(pas.PasTree.TPasType)) {
                NewEl = Self.CreateTypeDecl(P,AContext)}
               else if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
                continue}
               else if (C === pas.PasTree.TPasMethodResolution) {
                continue}
               else Self.RaiseNotSupported(P,FuncContext,20161221233338,"");
              if (NewEl !== null) Self.AddToSourceElements(Src,NewEl);
            };
          };
          if (El.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass)) {
            AddInstanceMemberFunction(Src,FuncContext,Ancestor,TMemberFunc.mfInit);
            AddInstanceMemberFunction(Src,FuncContext,Ancestor,TMemberFunc.mfFinalize);
          };
          if (El.ObjKind in rtl.createSet(pas.PasTree.TPasObjKind.okClass)) {
            for (var $l4 = 0, $end5 = El.Members.FCount - 1; $l4 <= $end5; $l4++) {
              i = $l4;
              P = rtl.getObject(El.Members.Get(i));
              if (!IsMemberNeeded(P)) continue;
              if (pas.PasTree.TPasProcedure.isPrototypeOf(P)) {
                if (IsTObject && (P.$class.ClassType() === pas.PasTree.TPasDestructor)) {
                  DestructorName = Self.TransformVariableName$1(P,AContext);
                  if (DestructorName !== "Destroy") {
                    AssignSt = Self.CreateElement(pas.jstree.TJSSimpleAssignStatement,P);
                    AssignSt.FLHS = Self.CreateMemberExpression([Self.GetBuildInNames($mod.TPas2JSBuiltInName.pbivnRTL),Self.GetBuildInNames($mod.TPas2JSBuiltInName.pbivnTObjectDestroy)]);
                    AssignSt.FExpr = Self.CreateLiteralString(P,DestructorName);
                    Self.AddToSourceElements(Src,AssignSt);
                  };
                };
                NewEl = Self.ConvertProcedure(P,FuncContext);
              } else continue;
              if (NewEl === null) continue;
              Self.AddToSourceElements(Src,NewEl);
            };
          };
          if ((El.ObjKind === pas.PasTree.TPasObjKind.okClass) && (AContext.Resolver !== null)) AddInterfaces(Src,FuncContext);
          if (AContext.Resolver !== null) AddRTTI(Src,FuncContext);
        };
        Result = Call;
      } finally {
        FuncContext = rtl.freeLoc(FuncContext);
        if (Result !== Call) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.ConvertClassForwardType = function (El, AContext) {
      var Result = null;
      var Ref = null;
      var aClass = null;
      var ObjLit = null;
      var Creator = "";
      Result = null;
      if ((AContext.Resolver === null) || !pas.PasResolver.TResolvedReference.isPrototypeOf(El.FData)) return Result;
      Ref = El.FData;
      aClass = rtl.as(Ref.FDeclaration,pas.PasTree.TPasClassType);
      if (!this.HasTypeInfo(aClass,AContext)) return Result;
      if (this.IsClassRTTICreatedBefore(aClass,El,AContext)) return Result;
      var $tmp1 = aClass.ObjKind;
      if ($tmp1 === pas.PasTree.TPasObjKind.okClass) {
        Creator = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewClass]}
       else if ($tmp1 === pas.PasTree.TPasObjKind.okInterface) Creator = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewInterface];
      Result = this.CreateRTTINewType(aClass,Creator,true,AContext,{get: function () {
          return ObjLit;
        }, set: function (v) {
          ObjLit = v;
        }});
      if (ObjLit !== null) this.RaiseInconsistency(20170412093427,El);
      return Result;
    };
    this.ConvertClassExternalType = function (El, AContext) {
      var Self = this;
      var Result = null;
      function IsMemberNeeded(aMember) {
        var Result = false;
        Result = Self.IsElementUsed(aMember);
        return Result;
      };
      var i = 0;
      var P = null;
      var C = null;
      var Proc = null;
      Result = null;
      if (El.IsForward) return Result;
      for (var $l1 = 0, $end2 = El.Members.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        P = rtl.getObject(El.Members.Get(i));
        if (!IsMemberNeeded(P)) continue;
        C = P.$class.ClassType();
        if ((C === pas.PasTree.TPasVariable) || (C === pas.PasTree.TPasConst)) {
          if (!(pas.PasTree.TVariableModifier.vmExternal in P.VarModifiers)) Self.DoError$2(20170321150737,4012,rtl.getResStr(pas.FPPas2Js,"sMissingExternalName"),[],P);
        } else if (C === pas.PasTree.TPasProperty) {}
        else if (C.InheritsFrom(pas.PasTree.TPasProcedure)) {
          Proc = P;
          if (Proc.IsExternal()) {}
          else Self.DoError$2(20170321152209,4012,rtl.getResStr(pas.FPPas2Js,"sMissingExternalName"),[],P);
        } else Self.RaiseNotSupported(P,AContext,20170321151727,"");
      };
      return Result;
    };
    this.ConvertClassOfType = function (El, AContext) {
      var Result = null;
      var ObjLit = null;
      var Prop = null;
      var Call = null;
      var ok = false;
      var List = null;
      var DestType = null;
      Result = null;
      if (!this.HasTypeInfo(El,AContext)) return Result;
      ok = false;
      Call = this.CreateRTTINewType(El,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewClassRef],false,AContext,{get: function () {
          return ObjLit;
        }, set: function (v) {
          ObjLit = v;
        }});
      Result = Call;
      try {
        Prop = ObjLit.FElements.AddElement();
        Prop.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIClassRef_InstanceType];
        DestType = AContext.Resolver.ResolveAliasType(El.DestType);
        Prop.FExpr = this.CreateTypeInfoRef(DestType,AContext,El);
        if (!this.IsClassRTTICreatedBefore(rtl.as(DestType,pas.PasTree.TPasClassType),El,AContext)) {
          if (!$mod.TFunctionContext.isPrototypeOf(AContext)) this.RaiseNotSupported(El,AContext,20170412102916,"");
          Call = this.CreateRTTINewType(DestType,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewClass],true,AContext,{get: function () {
              return ObjLit;
            }, set: function (v) {
              ObjLit = v;
            }});
          if (ObjLit !== null) this.RaiseInconsistency(20170412102654,El);
          List = this.CreateElement(pas.jstree.TJSStatementList,El);
          List.FA = Call;
          List.FB = Result;
          Result = List;
        };
        ok = true;
      } finally {
        if (!ok) pas.SysUtils.FreeAndNil({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      };
      return Result;
    };
    this.ConvertEnumType = function (El, AContext) {
      var Result = null;
      var ObjectContect = null;
      var i = 0;
      var EnumValue = null;
      var ParentObj = null;
      var Obj = null;
      var TIObj = null;
      var ObjLit = null;
      var TIProp = null;
      var AssignSt = null;
      var JSName = "";
      var Call = null;
      var List = null;
      var ok = false;
      var OrdType = 0;
      Result = null;
      for (var $l1 = 0, $end2 = El.Values.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        EnumValue = rtl.getObject(El.Values.Get(i));
        if (EnumValue.Value !== null) this.RaiseNotSupported(EnumValue.Value,AContext,20170208145221,"enum constant");
      };
      ok = false;
      ObjectContect = null;
      try {
        Obj = this.CreateElement(pas.jstree.TJSObjectLiteral,El);
        if ($mod.TObjectContext.isPrototypeOf(AContext)) {
          ParentObj = rtl.as(AContext.JSElement,pas.jstree.TJSObjectLiteral);
          ObjLit = ParentObj.FElements.AddElement();
          ObjLit.FName = this.TransformVariableName$1(El,AContext);
          ObjLit.FExpr = Obj;
          Result = Obj;
        } else if (pas.PasTree.TProcedureBody.isPrototypeOf(El.FParent)) {
          Result = this.CreateVarStatement(this.TransformVariableName$1(El,AContext),Obj,El);
        } else {
          AssignSt = this.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
          AssignSt.FLHS = this.CreateSubDeclNameExpr$1(El,AContext,null);
          AssignSt.FExpr = Obj;
          Result = AssignSt;
        };
        ObjectContect = $mod.TObjectContext.$create("Create$1",[El,Obj,AContext]);
        for (var $l3 = 0, $end4 = El.Values.FCount - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          EnumValue = rtl.getObject(El.Values.Get(i));
          JSName = this.TransformVariableName$1(EnumValue,AContext);
          ObjLit = Obj.FElements.AddElement();
          ObjLit.FName = pas.SysUtils.IntToStr(i);
          ObjLit.FExpr = this.CreateLiteralJSString(El,JSName);
          ObjLit = Obj.FElements.AddElement();
          ObjLit.FName = JSName;
          ObjLit.FExpr = this.CreateLiteralNumber(El,i);
        };
        if (this.HasTypeInfo(El,AContext)) {
          if (!$mod.TFunctionContext.isPrototypeOf(AContext)) this.RaiseNotSupported(El,AContext,20170411210045,"typeinfo");
          List = this.CreateElement(pas.jstree.TJSStatementList,El);
          List.FA = Result;
          Result = List;
          OrdType = this.GetOrdType(0,El.Values.FCount - 1,El);
          Call = this.CreateRTTINewType(El,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewEnum],false,AContext,{get: function () {
              return TIObj;
            }, set: function (v) {
              TIObj = v;
            }});
          List.FB = Call;
          TIProp = TIObj.FElements.AddElement();
          TIProp.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIInt_MinValue];
          TIProp.FExpr = this.CreateLiteralNumber(El,0);
          TIProp = TIObj.FElements.AddElement();
          TIProp.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIInt_MaxValue];
          TIProp.FExpr = this.CreateLiteralNumber(El,El.Values.FCount - 1);
          TIProp = TIObj.FElements.AddElement();
          TIProp.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIInt_OrdType];
          TIProp.FExpr = this.CreateLiteralNumber(El,OrdType);
          TIProp = TIObj.FElements.AddElement();
          TIProp.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIEnum_EnumType];
          TIProp.FExpr = this.CreateSubDeclNameExpr$1(El,AContext,null);
        };
        ok = true;
      } finally {
        ObjectContect = rtl.freeLoc(ObjectContect);
        if (!ok) pas.SysUtils.FreeAndNil({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      };
      return Result;
    };
    this.ConvertSetType = function (El, AContext) {
      var Result = null;
      var Obj = null;
      var Call = null;
      var Prop = null;
      Result = null;
      if (El.IsPacked) this.DoError$2(20170222231613,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),["packed"],El);
      if (!this.HasTypeInfo(El,AContext)) return Result;
      Call = this.CreateRTTINewType(El,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewSet],false,AContext,{get: function () {
          return Obj;
        }, set: function (v) {
          Obj = v;
        }});
      try {
        Prop = Obj.FElements.AddElement();
        Prop.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTISet_CompType];
        Prop.FExpr = this.CreateTypeInfoRef(El.EnumType,AContext,El);
        Result = Call;
      } finally {
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.ConvertRangeType = function (El, AContext) {
      var Result = null;
      var TIObj = null;
      var Call = null;
      var MinVal = null;
      var MaxVal = null;
      var MinInt = 0;
      var MaxInt = 0;
      var OrdType = 0;
      var TIProp = null;
      var fn = 0;
      Result = null;
      if (!this.HasTypeInfo(El,AContext)) return Result;
      MinVal = null;
      MaxVal = null;
      Call = null;
      try {
        MinVal = AContext.Resolver.EvalRangeLimit(El.RangeExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),true,El);
        MaxVal = AContext.Resolver.EvalRangeLimit(El.RangeExpr,rtl.createSet(pas.PasResolveEval.TResEvalFlag.refConst),false,El);
        if (MinVal.Kind === pas.PasResolveEval.TREVKind.revkInt) {
          fn = $mod.TPas2JSBuiltInName.pbifnRTTINewInt;
          MinInt = MinVal.Int;
          MaxInt = MaxVal.Int;
        } else if (MinVal.Kind === pas.PasResolveEval.TREVKind.revkEnum) {
          fn = $mod.TPas2JSBuiltInName.pbifnRTTINewEnum;
          MinInt = MinVal.Index;
          MaxInt = MaxVal.Index;
        } else {
          this.RaiseNotSupported(El,AContext,20170925201628,"");
        };
        OrdType = this.GetOrdType(MinInt,MaxInt,El);
        Call = this.CreateRTTINewType(El,this.FBuiltInNames[fn],false,AContext,{get: function () {
            return TIObj;
          }, set: function (v) {
            TIObj = v;
          }});
        TIProp = TIObj.FElements.AddElement();
        TIProp.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIInt_MinValue];
        TIProp.FExpr = this.CreateLiteralNumber(El,MinInt);
        TIProp = TIObj.FElements.AddElement();
        TIProp.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIInt_MaxValue];
        TIProp.FExpr = this.CreateLiteralNumber(El,MaxInt);
        TIProp = TIObj.FElements.AddElement();
        TIProp.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIInt_OrdType];
        TIProp.FExpr = this.CreateLiteralNumber(El,OrdType);
        if (MinVal.Kind === pas.PasResolveEval.TREVKind.revkEnum) {
          TIProp = TIObj.FElements.AddElement();
          TIProp.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIEnum_EnumType];
          TIProp.FExpr = this.CreateSubDeclNameExpr(El,MinVal.ElType.FName,AContext,null);
        };
        Result = Call;
      } finally {
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return MinVal;
          }, set: function (v) {
            MinVal = v;
          }});
        pas.PasResolveEval.ReleaseEvalValue({get: function () {
            return MaxVal;
          }, set: function (v) {
            MaxVal = v;
          }});
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.ConvertTypeAliasType = function (El, AContext) {
      var Result = null;
      var Obj = null;
      Result = null;
      if (!this.HasTypeInfo(El,AContext)) return Result;
      Result = this.CreateRTTINewType(El,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTIInherited],false,AContext,{get: function () {
          return Obj;
        }, set: function (v) {
          Obj = v;
        }});
      return Result;
    };
    this.ConvertPointerType = function (El, AContext) {
      var Result = null;
      var Obj = null;
      var Call = null;
      var Prop = null;
      Result = null;
      if (!this.HasTypeInfo(El,AContext)) return Result;
      Call = this.CreateRTTINewType(El,this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTIInherited],false,AContext,{get: function () {
          return Obj;
        }, set: function (v) {
          Obj = v;
        }});
      try {
        Prop = Obj.FElements.AddElement();
        Prop.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTISet_CompType];
        Prop.FExpr = this.CreateTypeInfoRef(El.DestType,AContext,El);
        Result = Call;
      } finally {
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    this.ConvertProcedureType = function (El, AContext) {
      var Result = null;
      var Call = null;
      var InnerCall = null;
      var FunName = "";
      var ResultEl = null;
      var ResultTypeInfo = null;
      var Flags = 0;
      var MethodKind = 0;
      var Obj = null;
      var Prop = null;
      Result = null;
      if (El.GetIsNested()) this.DoError$2(20170222231636,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),["is nested"],El);
      if (El.CallingConvention !== pas.PasTree.TCallingConvention.ccDefault) this.DoError$2(20170222231532,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),["calling convention " + pas.PasTree.cCallingConventions[El.CallingConvention]],El);
      if (!this.HasTypeInfo(El,AContext)) return Result;
      if (El.GetIsReference()) {
        FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewRefToProcVar]}
       else if (El.GetIsOfObject()) {
        FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewMethodVar]}
       else FunName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewProcVar];
      Call = this.CreateRTTINewType(El,FunName,false,AContext,{get: function () {
          return Obj;
        }, set: function (v) {
          Obj = v;
        }});
      try {
        Prop = Obj.FElements.AddElement();
        Prop.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIProcVar_ProcSig];
        InnerCall = this.CreateCallExpression(El);
        Prop.FExpr = InnerCall;
        InnerCall.FExpr = this.CreateMemberExpression([this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTL],this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewProcSig]]);
        InnerCall.AddArg(this.CreateRTTIArgList(El,El.Args,AContext));
        if (pas.PasTree.TPasFunctionType.isPrototypeOf(El)) {
          ResultEl = El.ResultEl;
          ResultTypeInfo = this.CreateTypeInfoRef(ResultEl.ResultType,AContext,ResultEl);
          if (ResultTypeInfo !== null) InnerCall.AddArg(ResultTypeInfo);
        };
        Flags = 0;
        if (pas.PasTree.TProcTypeModifier.ptmVarargs in El.Modifiers) Flags += 2;
        if (Flags > 0) InnerCall.AddArg(this.CreateLiteralNumber(El,Flags));
        if (El.GetIsOfObject()) {
          Prop = Obj.FElements.AddElement();
          Prop.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIMethodKind];
          if (El.$class.ClassType() === pas.PasTree.TPasProcedureType) {
            MethodKind = $mod.TPasToJSConverter.TMethodKind.mkProcedure}
           else if (El.$class.ClassType() === pas.PasTree.TPasFunctionType) {
            MethodKind = $mod.TPasToJSConverter.TMethodKind.mkFunction}
           else this.RaiseNotSupported(El,AContext,20170411180848,"");
          Prop.FExpr = this.CreateLiteralNumber(El,MethodKind);
        };
        Result = Call;
      } finally {
        if (Result === null) Call = rtl.freeLoc(Call);
      };
      return Result;
    };
    var CloneArrName = "a";
    var CloneResultName = "r";
    var CloneRunName = "i";
    this.ConvertArrayType = function (El, AContext) {
      var Result = null;
      var AssignSt = null;
      var CallName = "";
      var Obj = null;
      var Prop = null;
      var ArrLit = null;
      var Arr = null;
      var Index = 0;
      var ElType = null;
      var RangeEl = null;
      var Call = null;
      var RgLen = 0;
      var RangeEnd = 0;
      var List = null;
      var Func = null;
      var Src = null;
      var VarSt = null;
      var ForLoop = null;
      var ExprLT = null;
      var PlusPlus = null;
      var BracketEx = null;
      var CloneEl = null;
      var ReturnSt = null;
      Result = null;
      if (El.PackMode !== pas.PasTree.TPackMode.pmNone) this.DoError$2(20170222231648,4001,rtl.getResStr(pas.FPPas2Js,"sPasElementNotSupported"),["packed"],El);
      if (AContext.Resolver.HasStaticArrayCloneFunc(El)) {
        BracketEx = null;
        AssignSt = this.CreateElement(pas.jstree.TJSSimpleAssignStatement,El);
        try {
          AssignSt.FLHS = this.CreateSubDeclNameExpr(El,El.FName + this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnArray_Static_Clone],AContext,null);
          Index = 0;
          RangeEl = El.Ranges[Index];
          Func = this.CreateFunctionSt(El,true,true);
          AssignSt.FExpr = Func;
          Func.FFuncDef.FParams.Add(CloneArrName);
          Src = rtl.as(Func.FFuncDef.FBody.FA,pas.jstree.TJSSourceElements);
          VarSt = this.CreateVarStatement(CloneResultName,this.CreateElement(pas.jstree.TJSArrayLiteral,El),El);
          this.AddToSourceElements(Src,VarSt);
          ForLoop = this.CreateElement(pas.jstree.TJSForStatement,El);
          this.AddToSourceElements(Src,ForLoop);
          ForLoop.FInit = this.CreateVarStatement(CloneRunName,this.CreateLiteralNumber(El,0),El);
          ExprLT = this.CreateElement(pas.jstree.TJSRelationalExpressionLT,El);
          ForLoop.FCond = ExprLT;
          ExprLT.FA = this.CreatePrimitiveDotExpr(CloneRunName,El);
          RangeEnd = AContext.Resolver.GetRangeLength(RangeEl);
          ExprLT.FB = this.CreateLiteralNumber(RangeEl,RangeEnd);
          PlusPlus = this.CreateElement(pas.jstree.TJSUnaryPostPlusPlusExpression,El);
          ForLoop.FIncr = PlusPlus;
          PlusPlus.FA = this.CreatePrimitiveDotExpr(CloneRunName,El);
          Call = this.CreateCallExpression(El);
          ForLoop.FBody = Call;
          Call.FExpr = this.CreatePrimitiveDotExpr(CloneResultName + ".push",El);
          BracketEx = this.CreateElement(pas.jstree.TJSBracketMemberExpression,El);
          BracketEx.FMexpr = this.CreatePrimitiveDotExpr(CloneArrName,El);
          BracketEx.FName = this.CreatePrimitiveDotExpr(CloneRunName,El);
          ElType = AContext.Resolver.ResolveAliasType(El.ElType);
          CloneEl = null;
          if (pas.PasTree.TPasArrayType.isPrototypeOf(ElType)) {
            if (rtl.length(ElType.Ranges) === 0) this.RaiseNotSupported(El,AContext,20180218223414,pas.PasResolveEval.GetObjName(ElType));
            CloneEl = this.CreateCloneStaticArray(El,ElType,BracketEx,AContext);
          } else if (pas.PasTree.TPasRecordType.isPrototypeOf(ElType)) {
            CloneEl = this.CreateCloneRecord(El,ElType,BracketEx,AContext)}
           else if (pas.PasTree.TPasSetType.isPrototypeOf(ElType)) {
            CloneEl = this.CreateReferencedSet(El,BracketEx)}
           else this.RaiseNotSupported(El,AContext,20180218223618,pas.PasResolveEval.GetObjName(ElType));
          Call.AddArg(CloneEl);
          BracketEx = null;
          ReturnSt = this.CreateElement(pas.jstree.TJSReturnStatement,El);
          this.AddToSourceElements(Src,ReturnSt);
          ReturnSt.FExpr = this.CreatePrimitiveDotExpr(CloneResultName,El);
          Result = AssignSt;
          AssignSt = null;
        } finally {
          BracketEx = rtl.freeLoc(BracketEx);
          AssignSt = rtl.freeLoc(AssignSt);
        };
      };
      if (this.HasTypeInfo(El,AContext)) {
        if (rtl.length(El.Ranges) > 0) {
          CallName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewStaticArray]}
         else CallName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbifnRTTINewDynArray];
        Call = this.CreateRTTINewType(El,CallName,false,AContext,{get: function () {
            return Obj;
          }, set: function (v) {
            Obj = v;
          }});
        try {
          ElType = AContext.Resolver.ResolveAliasType(El.ElType);
          if (rtl.length(El.Ranges) > 0) {
            Prop = Obj.FElements.AddElement();
            Prop.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIArray_Dims];
            ArrLit = this.CreateElement(pas.jstree.TJSArrayLiteral,El);
            Prop.FExpr = ArrLit;
            Arr = El;
            Index = 0;
            do {
              RangeEl = Arr.Ranges[Index];
              RgLen = AContext.Resolver.GetRangeLength(RangeEl);
              ArrLit.AddElement(this.CreateLiteralNumber(RangeEl,RgLen));
              Index += 1;
              if (Index === rtl.length(Arr.Ranges)) {
                if (ElType.$class.ClassType() !== pas.PasTree.TPasArrayType) break;
                Arr = ElType;
                if (rtl.length(Arr.Ranges) === 0) this.RaiseNotSupported(Arr,AContext,20170411222315,"static array of anonymous array");
                ElType = AContext.Resolver.ResolveAliasType(Arr.ElType);
                Index = 0;
              };
            } while (!false);
          };
          Prop = Obj.FElements.AddElement();
          Prop.FName = this.FBuiltInNames[$mod.TPas2JSBuiltInName.pbivnRTTIArray_ElType];
          Prop.FExpr = this.CreateTypeInfoRef(ElType,AContext,El);
          if (Result === null) {
            Result = Call}
           else {
            List = this.CreateElement(pas.jstree.TJSStatementList,El);
            List.FA = Result;
            List.FB = Call;
            Result = List;
          };
          Call = null;
        } finally {
          Call = rtl.freeLoc(Call);
        };
      };
      return Result;
    };
    this.GetOrdType = function (MinValue, MaxValue, ErrorEl) {
      var Result = 0;
      var V = 0;
      if (MinValue < 0) {
        if (MaxValue < -(MinValue + 1)) {
          V = -(MinValue + 1)}
         else V = MaxValue;
        if (V < 0x8f) {
          Result = $mod.TPasToJSConverter.TOrdType.otSByte}
         else if (V < 0x8fff) {
          Result = $mod.TPasToJSConverter.TOrdType.otSWord}
         else if (V < 0x8fffffff) {
          Result = $mod.TPasToJSConverter.TOrdType.otSLong}
         else if (V <= 4503599627370495) {
          Result = $mod.TPasToJSConverter.TOrdType.otSIntDouble}
         else this.DoError$2(20170925200802,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],ErrorEl);
      } else {
        if (MaxValue < 0xff) {
          Result = $mod.TPasToJSConverter.TOrdType.otUByte}
         else if (MaxValue < 0xffff) {
          Result = $mod.TPasToJSConverter.TOrdType.otUWord}
         else if (MaxValue < 0xffffffff) {
          Result = $mod.TPasToJSConverter.TOrdType.otULong}
         else if (MaxValue <= 4503599627370495) {
          Result = $mod.TPasToJSConverter.TOrdType.otUIntDouble}
         else this.DoError$2(20170925201002,3064,rtl.getResStr(pas.PasResolveEval,"sRangeCheckError"),[],ErrorEl);
      };
      return Result;
    };
    this.Create$1 = function () {
      var n = 0;
      this.FOptions = rtl.refSet($mod.DefaultPasToJSOptions);
      for (n = 0; n <= 141; n++) this.FBuiltInNames[n] = $mod.Pas2JSBuiltInNames[n];
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.ConvertPasElement = function (El, Resolver) {
      var Result = null;
      var aContext = null;
      aContext = $mod.TRootContext.$create("Create$1",[El,null,null]);
      try {
        aContext.Resolver = Resolver;
        if (El.$class.ClassType() === pas.PasTree.TPasImplBeginBlock) {
          Result = this.ConvertBeginEndStatement(El,aContext,false)}
         else Result = this.ConvertElement(El,aContext);
      } finally {
        pas.SysUtils.FreeAndNil({get: function () {
            return aContext;
          }, set: function (v) {
            aContext = v;
          }});
      };
      return Result;
    };
  });
  this.JSTypeCaptions = ["undefined","null","boolean","number","string","object","reference","completion"];
  this.CodePointToJSString = function (u) {
    var Result = "";
    if (u < 0x10000) {
      Result = String.fromCharCode(u)}
     else Result = String.fromCharCode(0xD800 + ((u - 0x10000) >>> 10)) + String.fromCharCode(0xDC00 + ((u - 0x10000) & 0x3ff));
    return Result;
  };
  this.PosLast = function (c, s) {
    var Result = 0;
    Result = s.length;
    while ((Result > 0) && (s.charAt(Result - 1) !== c)) Result -= 1;
    return Result;
  };
  this.JSEquals = function (A, B) {
    var Result = false;
    if (A === null) {
      return B === null}
     else if (B === null) {
      return false}
     else if (A.$class.ClassType() !== B.$class.ClassType()) return false;
    if (A.$class.ClassType() === pas.jstree.TJSPrimaryExpressionIdent) {
      return A.FName === B.FName}
     else if (A.$class.ClassType() === pas.jstree.TJSPrimaryExpressionThis) {}
    else if (A.$class.ClassType() === pas.jstree.TJSDotMemberExpression) {
      Result = $mod.JSEquals(A.FMexpr,B.FMexpr) && (A.FName === B.FName)}
     else if (A.$class.ClassType() === pas.jstree.TJSBracketMemberExpression) {
      Result = $mod.JSEquals(A.FMexpr,B.FMexpr) && (A.FName === B.FName)}
     else return false;
    return Result;
  };
  $mod.$resourcestrings = {sPasElementNotSupported: {org: "Pascal element not supported: %s"}, sNotSupportedX: {org: "Not supported: %s"}, sUnaryOpcodeNotSupported: {org: 'Unary OpCode not yet supported "%s"'}, sBinaryOpcodeNotSupported: {org: 'Binary OpCode not yet supported "%s"'}, sInvalidNumber: {org: 'Invalid number "%s"'}, sInitializedArraysNotSupported: {org: "Initialized array variables not yet supported"}, sMemberExprMustBeIdentifier: {org: "Member expression must be an identifier"}, sCantWriteSetLiteral: {org: "Cannot write set literal"}, sInvalidAbsoluteLocation: {org: "Invalid absolute location"}, sForInJSArrDefaultGetterNotExtBracketAccessor: {org: "for-in-JS-array needs as default getter an external bracket accessor"}, sInvalidFunctionReference: {org: "Invalid function reference"}, sMissingExternalName: {org: "Missing external name"}, sVirtualMethodNameMustMatchExternal: {org: "Virtual method name must match external"}, sInvalidVariableModifier: {org: 'Invalid variable modifier "%s"'}, sPublishedNameMustMatchExternal: {org: "Published name must match external"}, sNoArgumentsAllowedForExternalObjectConstructor: {org: "no arguments allowed for external object constructor"}, sNewInstanceFunctionMustBeVirtual: {org: "NewInstance function must be virtual"}, sNewInstanceFunctionMustHaveTwoParameters: {org: "NewInstance function must have two parameters"}, sNewInstanceFunctionMustNotHaveOverloadAtX: {org: "NewInstance function must not have overload at %s"}, sBracketAccessorOfExternalClassMustHaveOneParameter: {org: "Bracket accessor of external class must have one parameter"}, sTypeXCannotBePublished: {org: 'Type "%s" cannot be published'}, sNestedInheritedNeedsParameters: {org: "nested inherited needs parameters"}, sFreeNeedsVar: {org: "Free needs a variable"}, sDuplicateGUIDXInYZ: {org: "Duplicate GUID %s in %s and %s"}, sCantCallExtBracketAccessor: {org: "cannot call external bracket accessor, use a property instead"}, sJSNewNotSupported: {org: 'Pascal class does not support the "new" constructor'}};
  $mod.$init = function () {
    for ($impl.i = 0; $impl.i <= 58; $impl.i++) if (pas.SysUtils.CompareStr($mod.JSReservedWords[$impl.i],$mod.JSReservedWords[$impl.i + 1]) >= 0) throw pas.SysUtils.Exception.$create("Create$1",[(("20170203135442 " + $mod.JSReservedWords[$impl.i]) + " >= ") + $mod.JSReservedWords[$impl.i + 1]]);
    for ($impl.i = 0; $impl.i <= 50; $impl.i++) if (pas.SysUtils.CompareStr($mod.JSReservedGlobalWords[$impl.i],$mod.JSReservedGlobalWords[$impl.i + 1]) >= 0) throw pas.SysUtils.Exception.$create("Create$1",[(("20170203135443 " + $mod.JSReservedGlobalWords[$impl.i]) + " >= ") + $mod.JSReservedGlobalWords[$impl.i + 1]]);
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.TempRefObjGetterName = "get";
  $impl.TempRefObjSetterName = "set";
  $impl.TempRefObjSetterArgName = "v";
  $impl.IdentChars = rtl.createSet(null,48,57,null,65,90,null,97,122,95);
  $impl.i = 0;
});
rtl.module("FPPJsSrcMap",["System","Classes","SysUtils","Math","jswriter","jstree","JSSrcMap"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TPas2JSSrcMap",pas.JSSrcMap.TSourceMap,function () {
    this.$init = function () {
      pas.JSSrcMap.TSourceMap.$init.call(this);
      this.fRefCount = 0;
      this.LocalFilename = "";
    };
    this.AddRef = function () {
      this.fRefCount += 1;
    };
    this.Release = function () {
      if (this.fRefCount < 0) throw pas.SysUtils.Exception.$create("Create$1",["TPas2JSSrcMap.Release"]);
      this.fRefCount -= 1;
      if (this.fRefCount < 0) this.Free();
    };
  });
  rtl.createClass($mod,"TPas2JSMapper",pas.jswriter.TBufferWriter,function () {
    this.$init = function () {
      pas.jswriter.TBufferWriter.$init.call(this);
      this.FSrcMap = null;
      this.FNeedMapping = false;
      this.FGeneratedStartLine = 0;
      this.FSrcFilename = "";
      this.FSrcLine = 0;
      this.FSrcColumn = 0;
    };
    this.$final = function () {
      this.FSrcMap = undefined;
      pas.jswriter.TBufferWriter.$final.call(this);
    };
    this.SetSrcMap = function (AValue) {
      if (this.FSrcMap === AValue) return;
      if (this.FSrcMap !== null) this.FSrcMap.Release();
      this.FSrcMap = AValue;
      if (this.FSrcMap !== null) this.FSrcMap.AddRef();
    };
    this.SetCurElement = function (AValue) {
      var C = null;
      pas.jswriter.TTextWriter.SetCurElement.call(this,AValue);
      C = AValue.$class.ClassType();
      if (((C === pas.jstree.TJSStatementList) || (C === pas.jstree.TJSEmptyBlockStatement)) || (C === pas.jstree.TJSEmptyStatement)) return;
      if ((AValue !== null) && (AValue.FSource !== "")) {
        if (((this.FSrcFilename !== AValue.FSource) || (this.FSrcLine !== AValue.FLine)) || (this.FSrcColumn !== AValue.FColumn)) {
          this.FNeedMapping = true;
          this.FSrcFilename = AValue.FSource;
          this.FSrcLine = AValue.FLine;
          this.FSrcColumn = AValue.FColumn;
        };
      };
      if (this.FGeneratedStartLine < 1) this.FGeneratedStartLine = this.FCurLine;
    };
    this.Writing = function () {
      var S = "";
      var p = 0;
      var l = 0;
      var Line = 0;
      pas.jswriter.TTextWriter.Writing.call(this);
      if (this.FSrcMap === null) return;
      if (this.FGeneratedStartLine < 1) this.FGeneratedStartLine = this.FCurLine;
      if (!this.FNeedMapping) return;
      if (this.FSrcFilename === "") return;
      this.FNeedMapping = false;
      this.FSrcMap.AddMapping(this.FCurLine,Math.max(0,this.FCurColumn - 1),this.FSrcFilename,this.FSrcLine,Math.max(0,this.FSrcColumn - 1),"");
      if (pas.jstree.TJSLiteral.isPrototypeOf(this.FCurElement) && (this.FCurElement.FValue.FCustomValue !== "")) {
        S = this.FCurElement.FValue.FCustomValue;
        l = S.length;
        p = 1;
        Line = 0;
        while (p <= l) {
          var $tmp1 = S.charAt(p - 1);
          if (($tmp1 === "\n") || ($tmp1 === "\r")) {
            if (((p < l) && (S.charCodeAt((p + 1) - 1) in rtl.createSet(10,13))) && (S.charAt(p - 1) !== S.charAt((p + 1) - 1))) {
              p += 2}
             else p += 1;
            Line += 1;
            this.FSrcMap.AddMapping(this.FCurLine + Line,0,this.FSrcFilename,this.FSrcLine + Line,0,"");
          } else {
            p += 1;
          };
        };
      };
    };
    this.Destroy = function () {
      this.SetSrcMap(null);
      pas.System.TObject.Destroy.call(this);
    };
    this.WriteFile = function (Src, Filename) {
      var l = 0;
      var p = 0;
      var LineStart = 0;
      if (Src === "") return;
      this.FSrcFilename = Filename;
      this.FSrcLine = 1;
      this.FSrcColumn = 1;
      l = Src.length;
      p = 1;
      do {
        LineStart = p;
        while (p <= l) {
          var $tmp1 = Src.charAt(p - 1);
          if (($tmp1 === "\n") || ($tmp1 === "\r")) {
            if (((p < l) && (Src.charCodeAt((p + 1) - 1) in rtl.createSet(10,13))) && (Src.charAt(p - 1) !== Src.charAt((p + 1) - 1))) {
              p += 2}
             else p += 1;
            break;
          } else {
            p += 1;
          };
        };
        this.FNeedMapping = true;
        this.Write(pas.System.Copy(Src,LineStart,p - LineStart));
        this.FSrcLine += 1;
      } while (!(p > l));
    };
  });
});
rtl.module("pas2jsutils",["System","Classes","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.ChompPathDelim = function (Path) {
    var Result = "";
    var Len = 0;
    var MinLen = 0;
    Result = Path;
    if (Path === "") return Result;
    Len = Result.length;
    if (Result.charCodeAt(0) in pas.System.AllowDirectorySeparators) {
      MinLen = 1;
      if (((Len >= 2) && (Result.charAt(1) === Result.charAt(0))) && (pas.System.PathDelim === "\\")) MinLen = 2;
    } else {
      MinLen = 0;
      if (((((pas.System.PathDelim === "\\") && (Len >= 3)) && (Result.charCodeAt(0) in rtl.createSet(null,97,122,null,65,90))) && (Result.charAt(1) === ":")) && (Result.charCodeAt(2) in pas.System.AllowDirectorySeparators)) MinLen = 3;
    };
    while ((Len > MinLen) && (Result.charCodeAt(Len - 1) in pas.System.AllowDirectorySeparators)) Len -= 1;
    if (Len < Result.length) Result = rtl.strSetLength(Result,Len);
    return Result;
  };
  this.GetNextDelimitedItem = function (List, Delimiter, Position) {
    var Result = "";
    var StartPos = 0;
    StartPos = Position.get();
    while ((Position.get() <= List.length) && (List.charAt(Position.get() - 1) !== Delimiter)) Position.set(Position.get() + 1);
    Result = pas.System.Copy(List,StartPos,Position.get() - StartPos);
    if (Position.get() <= List.length) Position.set(Position.get() + 1);
    return Result;
  };
  this.InvalidChangeStamp = -4503599627370496;
  this.IncreaseChangeStamp = function (Stamp) {
    var Result = 0;
    if (Stamp < 4503599627370495) {
      Result = Stamp + 1}
     else Result = -4503599627370496 + 1;
    return Result;
  };
  this.EncodingUTF8 = "UTF-8";
  this.EncodingSystem = "System";
  this.NormalizeEncoding = function (Encoding) {
    var Result = "";
    var i = 0;
    Result = pas.SysUtils.LowerCase(Encoding);
    for (var $l1 = Result.length; $l1 >= 1; $l1--) {
      i = $l1;
      if (Result.charAt(i - 1) === "-") pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},i,1);
    };
    return Result;
  };
  this.IsASCII = function (s) {
    var Result = false;
    var i = 0;
    for (var $l1 = 1, $end2 = s.length; $l1 <= $end2; $l1++) {
      i = $l1;
      if (s.charAt(i - 1) > "") return false;
    };
    Result = true;
    return Result;
  };
  this.IsNonUTF8System = function () {
    var Result = false;
    Result = $mod.NonUTF8System();
    return Result;
  };
  this.NonUTF8System = function () {
    var Result = false;
    Result = $impl.gNonUTF8System;
    return Result;
  };
  this.GetDefaultTextEncoding = function () {
    var Result = "";
    if ($impl.EncodingValid) {
      Result = $impl.DefaultTextEncoding;
      return Result;
    };
    Result = $mod.EncodingUTF8;
    Result = $mod.NormalizeEncoding(Result);
    $impl.DefaultTextEncoding = Result;
    $impl.EncodingValid = true;
    return Result;
  };
  this.SplitCmdLineParams = function (Params, ParamList, ReadBackslash) {
    var TMode = {"0": "mNormal", mNormal: 0, "1": "mApostrophe", mApostrophe: 1, "2": "mQuote", mQuote: 2};
    var p = 0;
    var Mode = 0;
    var Param = "";
    p = 1;
    while (p <= Params.length) {
      while ((p <= Params.length) && (Params.charCodeAt(p - 1) in rtl.createSet(32,9,10,13))) p += 1;
      if ((p > Params.length) || (Params.charAt(p - 1) === "\x00")) break;
      Param = "";
      Mode = TMode.mNormal;
      while (p <= Params.length) {
        var $tmp1 = Params.charAt(p - 1);
        if ($tmp1 === "\x00") {
          break}
         else if ($tmp1 === "\\") {
          p += 1;
          if (ReadBackslash) {
            if ((p > Params.length) || (Params.charAt(p - 1) === "\x00")) break;
            if (Params.charCodeAt(p - 1) < 128) {
              Param += Params.charAt(p - 1);
              p += 1;
            };
          } else {
            Param += "\\";
          };
        } else if ($tmp1 === "'") {
          p += 1;
          var $tmp2 = Mode;
          if ($tmp2 === TMode.mNormal) {
            Mode = TMode.mApostrophe}
           else if ($tmp2 === TMode.mApostrophe) {
            Mode = TMode.mNormal}
           else if ($tmp2 === TMode.mQuote) Param += "'";
        } else if ($tmp1 === '"') {
          p += 1;
          var $tmp3 = Mode;
          if ($tmp3 === TMode.mNormal) {
            Mode = TMode.mQuote}
           else if ($tmp3 === TMode.mApostrophe) {
            Param += '"'}
           else if ($tmp3 === TMode.mQuote) Mode = TMode.mNormal;
        } else if (((($tmp1 === " ") || ($tmp1 === "\t")) || ($tmp1 === "\n")) || ($tmp1 === "\r")) {
          if (Mode === TMode.mNormal) break;
          Param += Params.charAt(p - 1);
          p += 1;
        } else {
          Param += Params.charAt(p - 1);
          p += 1;
        };
      };
      ParamList.Add(Param);
    };
  };
  $mod.$init = function () {
    $impl.InternalInit();
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.EncodingValid = false;
  $impl.DefaultTextEncoding = $mod.EncodingSystem;
  $impl.gNonUTF8System = true;
  $impl.InternalInit = function () {
  };
});
rtl.module("Pas2jsLogger",["System","JS","pas2jsutils","Classes","SysUtils","PasTree","PScanner","jstree","jsbase","jswriter","fpjson"],function () {
  "use strict";
  var $mod = this;
  this.ExitCodeErrorInternal = 1;
  this.ExitCodeErrorInParams = 2;
  this.ExitCodeErrorInConfig = 3;
  this.ExitCodeFileNotFound = 4;
  this.ExitCodeWriteError = 5;
  this.ExitCodeSyntaxError = 6;
  this.ExitCodeConverterError = 7;
  this.ExitCodePCUError = 8;
  this.ExitCodeToolError = 9;
  this.DefaultLogMsgTypes = rtl.createSet(null,pas.PScanner.TMessageType.mtFatal,pas.PScanner.TMessageType.mtDebug);
  rtl.createClass($mod,"TPas2jsStream",pas.System.TObject,function () {
  });
  rtl.createClass($mod,"TPas2jsFileStream",$mod.TPas2jsStream,function () {
    this.Create$1 = function (Filename, Mode) {
      pas.System.Writeln("TPas2JSFileStream.Create TODO ",Filename," Mode=",Mode);
      throw pas.SysUtils.Exception.$create("Create$1",["TPas2JSFileStream.Create"]);
    };
    this.Destroy = function () {
      pas.System.Writeln("TPas2JSFileStream.Destroy TODO");
      throw pas.SysUtils.Exception.$create("Create$1",["TPas2JSFileStream.Destroy"]);
      pas.System.TObject.Destroy.call(this);
    };
    this.Write = function (s) {
      pas.System.Writeln('TPas2JSFileStream.Write TODO s="',s,'"');
      throw pas.SysUtils.Exception.$create("Create$1",["TPas2JSFileStream.Write"]);
    };
  });
  this.fmCreate = 0xFF00;
  this.fmOpenRead = 0;
  this.fmShareDenyNone = 0x40;
  rtl.createClass($mod,"TPas2jsMessage",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.Number = 0;
      this.Typ = 0;
      this.Pattern = "";
    };
  });
  $mod.$rtti.$MethodVar("TPas2jsLogEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Msg",rtl.string,2]]), methodkind: 0});
  rtl.createClass($mod,"TConsoleFileWriter",pas.jswriter.TTextWriter,function () {
    this.Create$2 = function (aFileName) {
      pas.jswriter.TTextWriter.Create$1.call(this);
      this.Write("Opening console log: " + aFileName);
    };
    this.DoWrite = function (S) {
      var Result = 0;
      Result = S.length;
      this.WriteLn(S);
      return Result;
    };
    this.Flush = function () {
    };
  });
  rtl.createClass($mod,"TPas2jsLogger",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FDebugLog = null;
      this.FEncoding = "";
      this.FLastMsgCol = 0;
      this.FLastMsgFile = "";
      this.FLastMsgLine = 0;
      this.FLastMsgNumber = 0;
      this.FLastMsgTxt = "";
      this.FLastMsgType = 0;
      this.FMsgNumberDisabled = [];
      this.FMsg = null;
      this.FOnFormatPath = null;
      this.FOnLog = null;
      this.FOutputFile = null;
      this.FOutputFilename = "";
      this.FShowMsgNumbers = false;
      this.FShowMsgTypes = {};
      this.FSorted = false;
    };
    this.$final = function () {
      this.FDebugLog = undefined;
      this.FMsgNumberDisabled = undefined;
      this.FMsg = undefined;
      this.FOnFormatPath = undefined;
      this.FOnLog = undefined;
      this.FOutputFile = undefined;
      this.FShowMsgTypes = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetMsgCount = function () {
      var Result = 0;
      Result = this.FMsg.FCount;
      return Result;
    };
    this.GetMsgNumberDisabled = function (MsgNumber) {
      var Result = false;
      Result = this.FindMsgNumberDisabled(MsgNumber,false) >= 0;
      return Result;
    };
    this.GetMsgs = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.FMsg.Get(Index));
      return Result;
    };
    this.FindMsgNumberDisabled = function (MsgNumber, FindInsertPos) {
      var Result = 0;
      var l = 0;
      var r = 0;
      var m = 0;
      var CurMsgNumber = 0;
      l = 0;
      r = rtl.length(this.FMsgNumberDisabled) - 1;
      m = 0;
      while (l <= r) {
        m = Math.floor((l + r) / 2);
        CurMsgNumber = this.FMsgNumberDisabled[m];
        if (MsgNumber < CurMsgNumber) {
          r = m - 1}
         else if (MsgNumber > CurMsgNumber) {
          l = m + 1}
         else return m;
      };
      if (FindInsertPos) {
        Result = m;
        if (l > m) Result += 1;
      } else {
        Result = -1;
      };
      return Result;
    };
    this.SetEncoding = function (AValue) {
      var NewValue = "";
      NewValue = pas.SysUtils.Trim(pas.SysUtils.LowerCase(AValue));
      if (this.FEncoding === NewValue) return;
      this.FEncoding = NewValue;
    };
    this.SetMsgNumberDisabled = function (MsgNumber, AValue) {
      var InsertPos = 0;
      var OldCount = 0;
      OldCount = rtl.length(this.FMsgNumberDisabled);
      if (AValue) {
        InsertPos = this.FindMsgNumberDisabled(MsgNumber,true);
        if ((InsertPos < OldCount) && (this.FMsgNumberDisabled[InsertPos] === MsgNumber)) return;
        this.FMsgNumberDisabled.splice(InsertPos,0,MsgNumber);
      } else {
        InsertPos = this.FindMsgNumberDisabled(MsgNumber,false);
        if (InsertPos < 0) return;
        this.FMsgNumberDisabled.splice(InsertPos,1);
      };
    };
    this.SetOutputFilename = function (AValue) {
      if (this.FOutputFilename === AValue) return;
      this.CloseOutputFile();
      this.FOutputFilename = AValue;
      if (this.FOutputFilename !== "") this.OpenOutputFile();
    };
    this.SetSorted = function (AValue) {
      if (this.FSorted === AValue) return;
      this.FSorted = AValue;
      if (this.FSorted) this.Sort();
    };
    this.DoLogRaw = function (Msg, SkipEncoding) {
      var S = "";
      if (SkipEncoding) {
        S = Msg}
       else {
        S = Msg;
      };
      if (this.FDebugLog !== null) this.DebugLogWriteLn(S);
      if (this.FOnLog !== null) {
        this.FOnLog(this,S)}
       else if (this.FOutputFile !== null) {
        this.FOutputFile.Write(S + pas.System.LineEnding)}
       else {
        pas.System.Writeln(S);
      };
    };
    this.Concatenate = function (Args) {
      var Result = "";
      var s = "";
      var i = 0;
      var V = undefined;
      s = "";
      for (var $l1 = 0, $end2 = rtl.length(Args) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        V = Args[i];
        var $tmp3 = typeof(V);
        if ($tmp3 === "boolean") {
          if (V) {
            s += "true"}
           else s += "false"}
         else if ($tmp3 === "number") {
          if (pas.JS.isInteger(V)) {
            s += "" + Math.floor(V)}
           else s += rtl.floatToStr(rtl.getNumber(V))}
         else if ($tmp3 === "string") {
          s += "" + V}
         else {
          continue;
        };
      };
      Result = s;
      return Result;
    };
    this.CreateTextWriter = function (aFileName) {
      var Result = null;
      Result = $mod.TConsoleFileWriter.$create("Create$2",[aFileName]);
      return Result;
    };
    this.Create$1 = function () {
      this.FMsg = pas.Classes.TFPList.$create("Create");
      this.FShowMsgTypes = rtl.refSet($mod.DefaultLogMsgTypes);
    };
    this.Destroy = function () {
      var i = 0;
      this.CloseOutputFile();
      this.CloseDebugLog();
      for (var $l1 = 0, $end2 = this.FMsg.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rtl.getObject(this.FMsg.Get(i)).$destroy("Destroy");
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FMsg;
        }, set: function (v) {
          this.p.FMsg = v;
        }});
      this.FMsgNumberDisabled = [];
      pas.System.TObject.Destroy.call(this);
    };
    this.RegisterMsg = function (MsgType, MsgNumber, Pattern) {
      var Msg = null;
      if (MsgNumber === 0) throw pas.SysUtils.Exception.$create("Create$1",["internal error: TPas2jsLogger.RegisterMsg MsgNumber=0"]);
      Msg = $mod.TPas2jsMessage.$create("Create");
      Msg.Number = MsgNumber;
      Msg.Typ = MsgType;
      Msg.Pattern = Pattern;
      this.FMsg.Add(Msg);
      this.FSorted = false;
    };
    this.FindMsg = function (MsgNumber, ExceptionOnNotFound) {
      var Result = null;
      var l = 0;
      var r = 0;
      var m = 0;
      var Msg = null;
      if (!this.FSorted) this.Sort();
      l = 0;
      r = this.GetMsgCount() - 1;
      while (l <= r) {
        m = Math.floor((l + r) / 2);
        Msg = this.GetMsgs(m);
        if (MsgNumber < Msg.Number) {
          r = m - 1}
         else if (MsgNumber > Msg.Number) {
          l = m + 1}
         else return Msg;
      };
      Result = null;
      if (ExceptionOnNotFound) throw pas.SysUtils.Exception.$create("Create$1",["invalid message number " + pas.SysUtils.IntToStr(MsgNumber)]);
      return Result;
    };
    this.Sort = function () {
      var i = 0;
      var LastMsg = null;
      var CurMsg = null;
      if (this.FMsg.FCount > 1) {
        this.FMsg.Sort($mod.CompareP2JMessage);
        LastMsg = rtl.getObject(this.FMsg.Get(0));
        for (var $l1 = 1, $end2 = this.FMsg.FCount - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          CurMsg = rtl.getObject(this.FMsg.Get(i));
          if (LastMsg.Number === CurMsg.Number) throw pas.SysUtils.Exception.$create("Create$1",[((((("duplicate message number " + pas.SysUtils.IntToStr(CurMsg.Number)) + '. 1st="') + LastMsg.Pattern) + '" 2nd="') + CurMsg.Pattern) + '"']);
          LastMsg = CurMsg;
        };
      };
      this.FSorted = true;
    };
    this.LogRaw = function (Msg) {
      this.ClearLastMsg();
      this.DoLogRaw(Msg,false);
    };
    this.LogRaw$1 = function (Args) {
      this.LogRaw(this.Concatenate(Args));
    };
    this.LogLn = function () {
      this.LogRaw("");
    };
    this.LogPlain = function (Msg) {
      var s = "";
      this.ClearLastMsg();
      if (this.FEncoding === "json") {
        s = this.FormatJSONMsg(pas.PScanner.TMessageType.mtInfo,Msg,0,"",0,0);
        this.DoLogRaw(s,true);
      } else this.DoLogRaw(Msg,false);
    };
    this.LogPlain$1 = function (Args) {
      this.LogPlain(this.Concatenate(Args));
    };
    this.LogMsg = function (MsgNumber, Args, Filename, Line, Col, UseFilter) {
      var Msg = null;
      Msg = this.FindMsg(MsgNumber,true);
      this.Log(Msg.Typ,pas.PScanner.SafeFormat(Msg.Pattern,Args),MsgNumber,Filename,Line,Col,UseFilter);
    };
    this.Log = function (MsgType, Msg, MsgNumber, Filename, Line, Col, UseFilter) {
      var s = "";
      if (UseFilter && !(MsgType in this.FShowMsgTypes)) return;
      if (this.GetMsgNumberDisabled(MsgNumber)) return;
      if (this.FEncoding === "json") {
        s = this.FormatJSONMsg(MsgType,Msg,MsgNumber,Filename,Line,Col)}
       else s = this.FormatMsg(MsgType,Msg,MsgNumber,Filename,Line,Col);
      this.FLastMsgType = MsgType;
      this.FLastMsgNumber = MsgNumber;
      this.FLastMsgTxt = Msg;
      this.FLastMsgFile = Filename;
      this.FLastMsgLine = Line;
      this.FLastMsgCol = Col;
      this.DoLogRaw(s,false);
    };
    this.LogMsgIgnoreFilter = function (MsgNumber, Args) {
      this.LogMsg(MsgNumber,Args,"",0,0,false);
    };
    this.LogExceptionBackTrace = function (E) {
    };
    this.MsgTypeToStr = function (MsgType) {
      var Result = "";
      var $tmp1 = MsgType;
      if ($tmp1 === pas.PScanner.TMessageType.mtFatal) {
        Result = "Fatal"}
       else if ($tmp1 === pas.PScanner.TMessageType.mtError) {
        Result = "Error"}
       else if ($tmp1 === pas.PScanner.TMessageType.mtWarning) {
        Result = "Warning"}
       else if ($tmp1 === pas.PScanner.TMessageType.mtNote) {
        Result = "Note"}
       else if ($tmp1 === pas.PScanner.TMessageType.mtHint) {
        Result = "Hint"}
       else if ($tmp1 === pas.PScanner.TMessageType.mtInfo) {
        Result = "Info"}
       else if ($tmp1 === pas.PScanner.TMessageType.mtDebug) {
        Result = "Debug"}
       else {
        Result = "Verbose";
      };
      return Result;
    };
    this.GetMsgText = function (MsgNumber, Args) {
      var Result = "";
      var Msg = null;
      Msg = this.FindMsg(MsgNumber,true);
      Result = (this.MsgTypeToStr(Msg.Typ) + ": ") + pas.SysUtils.Format(Msg.Pattern,Args);
      return Result;
    };
    this.FormatMsg = function (MsgType, Msg, MsgNumber, Filename, Line, Col) {
      var Result = "";
      var s = "";
      s = "";
      if (Filename !== "") {
        if (this.FOnFormatPath != null) {
          s += this.FOnFormatPath(Filename)}
         else s += Filename;
        if (Line > 0) {
          s += "(" + pas.SysUtils.IntToStr(Line);
          if (Col > 0) s += "," + pas.SysUtils.IntToStr(Col);
          s += ")";
        };
        if (s !== "") s += " ";
      };
      s += this.MsgTypeToStr(MsgType) + ": ";
      if (this.FShowMsgNumbers && (MsgNumber !== 0)) s += ("(" + pas.SysUtils.IntToStr(MsgNumber)) + ") ";
      s += Msg;
      Result = s;
      return Result;
    };
    this.FormatJSONMsg = function (MsgType, Msg, MsgNumber, Filename, Line, Col) {
      var Result = "";
      var J = null;
      var FN = "";
      if (this.FOnFormatPath != null) {
        FN = this.FOnFormatPath(Filename)}
       else FN = Filename;
      J = pas.fpjson.TJSONObject.$create("Create$3",[["message",Msg,"line",Line,"col",Col,"number",MsgNumber,"filename",FN,"type",this.MsgTypeToStr(MsgType)]]);
      try {
        Result = J.GetAsJSON();
      } finally {
        J = rtl.freeLoc(J);
      };
      return Result;
    };
    this.OpenOutputFile = function () {
      this.FOutputFile = this.CreateTextWriter(this.FOutputFilename);
    };
    this.Flush = function () {
    };
    this.CloseOutputFile = function () {
      if (this.FOutputFile === null) return;
      this.Flush();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FOutputFile;
        }, set: function (v) {
          this.p.FOutputFile = v;
        }});
    };
    this.Reset = function () {
      this.SetOutputFilename("");
      this.FMsgNumberDisabled = [];
      this.FShowMsgNumbers = false;
      this.FShowMsgTypes = rtl.refSet($mod.DefaultLogMsgTypes);
    };
    this.ClearLastMsg = function () {
      this.FLastMsgType = pas.PScanner.TMessageType.mtInfo;
      this.FLastMsgNumber = 0;
      this.FLastMsgTxt = "";
      this.FLastMsgFile = "";
      this.FLastMsgLine = 0;
      this.FLastMsgCol = 0;
    };
    var DbgLogFilename = "pas2jsdebug.log";
    this.OpenDebugLog = function () {
      this.FDebugLog = $mod.TPas2jsFileStream.$create("Create$1",[DbgLogFilename,65280 | 64]);
    };
    this.CloseDebugLog = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FDebugLog;
        }, set: function (v) {
          this.p.FDebugLog = v;
        }});
    };
    this.DebugLogWriteLn = function (Msg) {
      if (this.FDebugLog === null) return;
      Msg = Msg + pas.System.LineEnding;
      this.FDebugLog.Write(Msg);
    };
    this.GetEncodingCaption = function () {
      var Result = "";
      Result = this.FEncoding;
      if (Result === "") {
        Result = "utf-8";
      };
      if (Result === "console") ;
      if (Result === "utf8") Result = "utf-8";
      return Result;
    };
  });
  this.CompareP2JMessage = function (Item1, Item2) {
    var Result = 0;
    Result = Item1.Number - Item2.Number;
    return Result;
  };
  this.QuoteStr = function (s, Quote) {
    var Result = "";
    Result = pas.SysUtils.QuotedStr(s,Quote);
    return Result;
  };
  this.DeQuoteStr = function (s, Quote) {
    var Result = "";
    Result = pas.SysUtils.DeQuoteString(s,Quote);
    return Result;
  };
  this.AsString = function (Element, Full) {
    var Result = "";
    if (Element === null) {
      Result = "(no element)"}
     else {
      Result = Element.GetDeclaration(Full);
    };
    return Result;
  };
  this.AsString$1 = function (Element) {
    var Result = "";
    var aTextWriter = null;
    var aWriter = null;
    aTextWriter = pas.jswriter.TBufferWriter.$create("Create$2",[120]);
    aWriter = pas.jswriter.TJSWriter.$create("Create$1",[aTextWriter]);
    aWriter.WriteJS(Element);
    Result = aTextWriter.GetAsString();
    aWriter = rtl.freeLoc(aWriter);
    aTextWriter = rtl.freeLoc(aTextWriter);
    return Result;
  };
  this.DbgString = function (Element, Indent) {
    var Result = "";
    if (Element === null) {
      Result = "(*no element*)"}
     else if (pas.jstree.TJSLiteral.isPrototypeOf(Element)) {
      Result = $mod.DbgAsString(Element.FValue,Indent + 2);
    } else if (pas.jstree.TJSPrimaryExpressionIdent.isPrototypeOf(Element)) {
      Result = Element.FName;
    } else if (pas.jstree.TJSArrayLiteral.isPrototypeOf(Element)) {
      Result = ("[" + $mod.DbgAsString$1(Element.FElements,Indent + 2)) + "]";
    } else if (pas.jstree.TJSObjectLiteral.isPrototypeOf(Element)) {
      Result = ("[" + $mod.DbgAsString$2(Element.FElements,Indent + 2)) + "]";
    } else if (pas.jstree.TJSArguments.isPrototypeOf(Element)) {
      Result = ("(" + $mod.DbgAsString$1(Element.FElements,Indent + 2)) + ")";
    } else if (pas.jstree.TJSMemberExpression.isPrototypeOf(Element)) {
      Result = ("(" + $mod.DbgString(Element.FMexpr,Indent + 2)) + ")";
    } else if (pas.jstree.TJSCallExpression.isPrototypeOf(Element)) {
      Result = $mod.DbgString(Element.FExpr,Indent + 2) + $mod.DbgString(Element.FArgs,Indent + 2);
    } else if (pas.jstree.TJSUnary.isPrototypeOf(Element)) {
      Result = (Element.$class.PrefixOperator() + $mod.DbgString(Element.FA,Indent + 2)) + Element.$class.PostFixOperator();
    } else if (pas.jstree.TJSBinary.isPrototypeOf(Element)) {
      if (pas.jstree.TJSStatementList.isPrototypeOf(Element)) {
        Result = ((($mod.DbgString(Element.FA,Indent + 2) + ";") + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent)) + $mod.DbgString(Element.FB,Indent);
      } else if (pas.jstree.TJSVariableDeclarationList.isPrototypeOf(Element)) {
        Result = ((($mod.DbgString(Element.FA,Indent + 2) + ";") + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent)) + $mod.DbgString(Element.FB,Indent);
      } else if (pas.jstree.TJSWithStatement.isPrototypeOf(Element)) {
        Result = ((((((("with (" + $mod.DbgString(Element.FA,Indent + 2)) + "){") + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent)) + $mod.DbgString(Element.FB,Indent + 2)) + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent)) + "}";
      } else if (pas.jstree.TJSBinaryExpression.isPrototypeOf(Element)) {
        Result = $mod.DbgString(Element.FA,Indent + 2);
        if (Element.$class.AllowCompact()) {
          Result += Element.$class.OperatorString()}
         else Result += (" " + Element.$class.OperatorString()) + " ";
        Result += $mod.DbgString(Element.FB,Indent + 2);
      } else {
        Result = ("{: unknown binary Element: " + Element.$classname) + ":}";
      };
    } else if (pas.jstree.TJSConditionalExpression.isPrototypeOf(Element)) {
      Result = ((($mod.DbgString(Element.FA,Indent + 2) + "?") + $mod.DbgString(Element.FB,Indent + 2)) + ":") + $mod.DbgString(Element.FC,Indent + 2);
    } else if (pas.jstree.TJSAssignStatement.isPrototypeOf(Element)) {
      Result = ($mod.DbgString(Element.FLHS,Indent + 2) + Element.$class.OperatorString()) + $mod.DbgString(Element.FExpr,Indent + 2);
    } else if (pas.jstree.TJSVarDeclaration.isPrototypeOf(Element)) {
      Result = Element.FName;
      if (Element.FInit !== null) Result += "=" + $mod.DbgString(Element.FInit,Indent + 2);
    } else if (pas.jstree.TJSIfStatement.isPrototypeOf(Element)) {
      Result = (((((("if(" + $mod.DbgString(Element.FCond,Indent + 2)) + "){") + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent + 2)) + $mod.DbgString(Element.FBTrue,Indent + 2)) + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent);
      if (Element.FBFalse !== null) Result += (((((" else {" + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent + 2)) + $mod.DbgString(Element.FBFalse,Indent + 2)) + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent)) + "}";
    } else if (pas.jstree.TJSBodyStatement.isPrototypeOf(Element)) {
      if (pas.jstree.TJSWhileStatement.isPrototypeOf(Element)) {
        Result = ("while(" + $mod.DbgString(Element.FCond,Indent + 2)) + ")";
        if (Element.FBody !== null) {
          Result += $mod.DbgString(Element.FBody,Indent)}
         else Result += "{}";
      } else if (pas.jstree.TJSDoWhileStatement.isPrototypeOf(Element)) {
        Result = "do";
        if (Element.FBody !== null) {
          Result += $mod.DbgString(Element.FBody,Indent)}
         else Result += "{}";
        Result += ("(" + $mod.DbgString(Element.FCond,Indent + 2)) + ")";
      } else if (pas.jstree.TJSForStatement.isPrototypeOf(Element)) {
        Result = "for(";
        if (Element.FInit !== null) Result += $mod.DbgString(Element.FInit,Indent + 2);
        Result += ";";
        if (Element.FCond !== null) Result += $mod.DbgString(Element.FCond,Indent + 2);
        Result += ";";
        if (Element.FIncr !== null) Result += $mod.DbgString(Element.FIncr,Indent + 2);
        Result += ")";
        if (Element.FBody !== null) {
          Result += $mod.DbgString(Element.FBody,Indent)}
         else Result += "{}";
      } else {
        if (Element.FBody !== null) {
          Result += ((((("{" + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent + 2)) + $mod.DbgString(Element.FBody,Indent + 2)) + pas.System.LineEnding) + pas.System.StringOfChar(" ",Indent)) + "}"}
         else Result += "{}";
      };
    } else {
      Result = ("{: unknown Element: " + Element.$classname) + ":}";
    };
    return Result;
  };
  this.DbgAsString = function (Element, Indent) {
    var Result = "";
    if (Element === null) {
      Result = "(no value)"}
     else {
      var $tmp1 = Element.FValueType;
      if ($tmp1 === pas.jsbase.TJSType.jstUNDEFINED) {
        Result = "undefined"}
       else if ($tmp1 === pas.jsbase.TJSType.jstNull) {
        Result = "null"}
       else if ($tmp1 === pas.jsbase.TJSType.jstBoolean) {
        Result = pas.SysUtils.BoolToStr$1(Element.GetAsBoolean(),"true","false")}
       else if ($tmp1 === pas.jsbase.TJSType.jstNumber) {
        Result = rtl.floatToStr(Element.GetAsNumber())}
       else if ($tmp1 === pas.jsbase.TJSType.jstString) {
        Result = $mod.QuoteStr(Element.GetAsString(),"'")}
       else if ($tmp1 === pas.jsbase.TJSType.jstObject) {
        Result = "{:OBJECT:}"}
       else if ($tmp1 === pas.jsbase.TJSType.jstReference) {
        Result = "{:REFERENCE:}"}
       else if ($tmp1 === pas.jsbase.TJSType.jstCompletion) {
        Result = "{:COMPLETION:}"}
       else {
        Result = ("{:Unknown ValueType " + pas.SysUtils.IntToStr(Element.FValueType)) + ":}";
      };
    };
    Result = pas.System.StringOfChar(" ",Indent) + Result;
    return Result;
  };
  this.DbgAsString$1 = function (Element, Indent) {
    var Result = "";
    var i = 0;
    Result = "";
    for (var $l1 = 0, $end2 = Element.GetCount() - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (i > 0) Result += ",";
      Result += $mod.DbgString(Element.GetE(i).FExpr,Indent + 2);
    };
    return Result;
  };
  this.DbgAsString$2 = function (Element, Indent) {
    var Result = "";
    var i = 0;
    Result = "";
    for (var $l1 = 0, $end2 = Element.GetCount() - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (i > 0) Result += ",";
      Result += $mod.DbgString(Element.GetE(i).FExpr,Indent + 2);
    };
    return Result;
  };
  this.DbgAsString$3 = function (Element, Indent) {
    var Result = "";
    Result = (Element.FName + ":") + $mod.DbgString(Element.FExpr,Indent + 2);
    return Result;
  };
  this.DbgStr = function (s) {
    var Result = "";
    var i = 0;
    var c = "";
    Result = "";
    for (var $l1 = 1, $end2 = s.length; $l1 <= $end2; $l1++) {
      i = $l1;
      c = s.charAt(i - 1);
      var $tmp3 = c;
      if ((($tmp3 >= "\x00") && ($tmp3 <= "\x1F")) || (($tmp3 >= "") && ($tmp3 <= "ÿ"))) {
        Result += "$" + rtl.hexStr(c.charCodeAt(),2)}
       else {
        Result += c;
      };
    };
    return Result;
  };
});
rtl.module("Pas2jsPParser",["System","Classes","SysUtils","PParser","PScanner","PasTree","PasResolver","FPPas2Js","Pas2jsLogger"],function () {
  "use strict";
  var $mod = this;
  this.nFinalizationNotSupported = 3001;
  this.sFinalizationNotSupported = "Finalization section is not supported.";
  rtl.createClass($mod,"TPas2jsPasParser",pas.PParser.TPasParser,function () {
    this.$init = function () {
      pas.PParser.TPasParser.$init.call(this);
      this.FLog = null;
    };
    this.$final = function () {
      this.FLog = undefined;
      pas.PParser.TPasParser.$final.call(this);
    };
    this.Create$2 = function (AScanner, AFileResolver, AEngine) {
      pas.PParser.TPasParser.Create$1.call(this,AScanner,AFileResolver,AEngine);
      this.SetOptions(rtl.unionSet(this.FOptions,pas.FPPas2Js.po_Pas2js));
    };
    this.RaiseParserError = function (MsgNumber, Args) {
      var Msg = null;
      Msg = this.FLog.FindMsg(MsgNumber,true);
      this.SetLastMsg(Msg.Typ,MsgNumber,Msg.Pattern,Args);
      throw pas.PParser.EParserError.$create("Create$2",[this.FLastMsg,this.FScanner.FCurFilename,this.FScanner.FCurRow,this.FScanner.GetCurColumn()]);
    };
    this.ParseSubModule = function (Module) {
      Module.set(null);
      this.NextToken();
      this.SaveComments();
      var $tmp1 = this.FCurToken;
      if ($tmp1 === pas.PScanner.TToken.tkunit) {
        this.ParseUnit(Module)}
       else if ($tmp1 === pas.PScanner.TToken.tklibrary) {
        this.ParseLibrary(Module)}
       else {
        this.CheckToken(pas.PScanner.TToken.tkunit);
      };
    };
  });
  $mod.$rtti.$MethodVar("TOnFindModule",{procsig: rtl.newTIProcSig([["AUnitName",rtl.string,2],["InFilename",rtl.string,2],["NameExpr",pas.PasTree.$rtti["TPasExpr"]],["InFileExpr",pas.PasTree.$rtti["TPasExpr"]]],pas.PasTree.$rtti["TPasModule"]), methodkind: 1});
  $mod.$rtti.$MethodVar("TOnCheckSrcName",{procsig: rtl.newTIProcSig([["aElement",pas.PasTree.$rtti["TPasElement"],2]]), methodkind: 0});
  rtl.createClass($mod,"TPas2jsCompilerResolver",pas.FPPas2Js.TPas2JSResolver,function () {
    this.$init = function () {
      pas.FPPas2Js.TPas2JSResolver.$init.call(this);
      this.FLog = null;
      this.FOnCheckSrcName = null;
      this.FOnFindModule = null;
      this.FP2JParser = null;
      this.Owner = null;
    };
    this.$final = function () {
      this.FLog = undefined;
      this.FOnCheckSrcName = undefined;
      this.FOnFindModule = undefined;
      this.FP2JParser = undefined;
      this.Owner = undefined;
      pas.FPPas2Js.TPas2JSResolver.$final.call(this);
    };
    this.CreateElement$2 = function (AClass, AName, AParent, AVisibility, ASrcPos) {
      var Result = null;
      if (AClass === pas.PasTree.TFinalizationSection) rtl.as(this.FCurrentParser,$mod.TPas2jsPasParser).RaiseParserError(3001,[]);
      Result = pas.PasResolver.TPasResolver.CreateElement$2.call(this,AClass,AName,AParent,AVisibility,ASrcPos);
      if (pas.PasTree.TPasModule.isPrototypeOf(Result)) this.FOnCheckSrcName(Result);
      return Result;
    };
    this.FindModule = function (aUnitname) {
      var Result = null;
      throw pas.PasResolver.EPasResolve.$create("Create$1",["Call TPas2jsCompilerResolver.FindModule(name,expr,...) instead"]);
      Result = null;
      if (aUnitname === "") ;
      return Result;
    };
    this.FindUnit = function (AName, InFilename, NameExpr, InFileExpr) {
      var Result = null;
      Result = this.FOnFindModule(AName,InFilename,NameExpr,InFileExpr);
      return Result;
    };
    this.UsedInterfacesFinished = function (Section) {
      if (Section === null) ;
    };
  });
  this.RegisterMessages = function (Log) {
    var LastMsgNumber = 0;
    function r(MsgType, MsgNumber, MsgPattern) {
      var s = "";
      if ((LastMsgNumber >= 0) && (MsgNumber !== (LastMsgNumber + 1))) {
        s = (("gap in registered message numbers: " + pas.SysUtils.IntToStr(LastMsgNumber)) + " ") + pas.SysUtils.IntToStr(MsgNumber);
        pas.System.Writeln("Pas2jsPParser.RegisterMessages ",s);
        throw pas.SysUtils.Exception.$create("Create$1",[s]);
      };
      Log.RegisterMsg(MsgType,MsgNumber,MsgPattern);
      LastMsgNumber = MsgNumber;
    };
    LastMsgNumber = -1;
    r(pas.PScanner.TMessageType.mtError,3001,$mod.sFinalizationNotSupported);
  };
});
rtl.module("Pas2jsCompiler",["System","JS","Classes","SysUtils","contnrs","jstree","jswriter","JSSrcMap","PScanner","PParser","PasTree","PasResolver","PasUseAnalyzer","PasResolveEval","FPPas2Js","FPPJsSrcMap","Pas2jsLogger","pas2jsfs","Pas2jsPParser"],function () {
  "use strict";
  var $mod = this;
  this.VersionMajor = 1;
  this.VersionMinor = 1;
  this.VersionRelease = 1;
  this.VersionExtra = "";
  this.DefaultConfigFile = "pas2js.cfg";
  this.nOptionIsEnabled = 101;
  this.sOptionIsEnabled = 'Option "%s" is %s';
  this.nSyntaxModeIs = 102;
  this.sSyntaxModeIs = "Syntax mode is %s";
  this.nMacroDefined = 103;
  this.sMacroDefined = "Macro defined: %s";
  this.nNameValue = 106;
  this.sNameValue = "%s: %s";
  this.nReadingOptionsFromFile = 107;
  this.sReadingOptionsFromFile = "Reading options from file %s";
  this.nEndOfReadingConfigFile = 108;
  this.sEndOfReadingConfigFile = "End of reading config file %s";
  this.nInterpretingFileOption = 109;
  this.sInterpretingFileOption = "interpreting file option %s";
  this.nSourceFileNotFound = 110;
  this.sSourceFileNotFound = "source file not found %s";
  this.nFileIsFolder = 111;
  this.sFileIsFolder = "expected file, but found directory %s";
  this.nConfigFileSearch = 112;
  this.sConfigFileSearch = "Configfile search: %s";
  this.nHandlingOption = 113;
  this.sHandlingOption = "handling option %s";
  this.nQuickHandlingOption = 114;
  this.sQuickHandlingOption = "quick handling option %s";
  this.nOutputDirectoryNotFound = 115;
  this.sOutputDirectoryNotFound = "output directory not found: %s";
  this.nUnableToWriteFile = 116;
  this.sUnableToWriteFile = "Unable to write file %s";
  this.nWritingFile = 117;
  this.sWritingFile = "Writing file %s ...";
  this.nCompilationAborted = 118;
  this.sCompilationAborted = "Compilation aborted";
  this.nCfgDirective = 119;
  this.sCfgDirective = "cfg directive %s: %s";
  this.nUnitCycle = 120;
  this.sUnitCycle = "Unit cycle found %s";
  this.nOptionForbidsCompile = 121;
  this.sOptionForbidsCompile = 'Option -Ju forbids to compile unit "%s"';
  this.nUnitNeedsCompileDueToUsedUnit = 122;
  this.sUnitsNeedCompileDueToUsedUnit = 'Unit "%s" needs compile due to used unit "%s"';
  this.nUnitNeedsCompileDueToOption = 123;
  this.sUnitsNeedCompileDueToOption = 'Unit "%s" needs compile due to option "%s"';
  this.nUnitNeedsCompileJSMissing = 124;
  this.sUnitsNeedCompileJSMissing = 'Unit "%s" needs compile, js file missing "%s"';
  this.nUnitNeedsCompilePasHasChanged = 125;
  this.sUnitsNeedCompilePasHasChanged = 'Unit "%s" needs compile, Pascal file has changed, js is %s';
  this.nParsingFile = 126;
  this.sParsingFile = "Parsing %s ...";
  this.nCompilingFile = 127;
  this.sCompilingFile = "Compiling %s ...";
  this.nExpectedButFound = 128;
  this.sExpectedButFound = 'Illegal unit name: Expected "%s", but found "%s"';
  this.nLinesInFilesCompiled = 129;
  this.sLinesInFilesCompiled = "%s lines in %s files compiled, %s sec%s";
  this.nTargetPlatformIs = 130;
  this.sTargetPlatformIs = "Target platform is %s";
  this.nTargetProcessorIs = 131;
  this.sTargetProcessorIs = "Target processor is %s";
  this.nMessageEncodingIs = 132;
  this.sMessageEncodingIs = "Message encoding is %s";
  this.nUnableToTranslatePathToDir = 133;
  this.sUnableToTranslatePathToDir = "Unable to translate path %s to directory %s";
  this.nSrcMapSourceRootIs = 134;
  this.sSrcMapSourceRootIs = 'source map "sourceRoot" is %s';
  this.nSrcMapBaseDirIs = 135;
  this.sSrcMapBaseDirIs = 'source map "local base directory" is %s';
  this.nUnitFileNotFound = 136;
  this.sUnitFileNotFound = "unit file not found %s";
  this.nClassInterfaceStyleIs = 137;
  this.sClassInterfaceStyleIs = "Class interface style is %s";
  this.nMacroXSetToY = 138;
  this.sMacroXSetToY = "Macro %s set to %s";
  this.nPostProcessorInfoX = 139;
  this.sPostProcessorInfoX = "Post processor: %s";
  this.nPostProcessorRunX = 140;
  this.sPostProcessorRunX = "Run post processor: %s";
  this.nPostProcessorFailX = 141;
  this.sPostProcessorFailX = "Post processor failed: %s";
  this.nPostProcessorWarnX = 142;
  this.sPostProcessorWarnX = "Post processor: %s";
  this.nPostProcessorFinished = 143;
  this.sPostProcessorFinished = "Post processor finished";
  this.TP2jsCompilerOption = {"0": "coSkipDefaultConfigs", coSkipDefaultConfigs: 0, "1": "coBuildAll", coBuildAll: 1, "2": "coShowLogo", coShowLogo: 2, "3": "coShowErrors", coShowErrors: 3, "4": "coShowWarnings", coShowWarnings: 4, "5": "coShowNotes", coShowNotes: 5, "6": "coShowHints", coShowHints: 6, "7": "coShowInfos", coShowInfos: 7, "8": "coShowLineNumbers", coShowLineNumbers: 8, "9": "coShowTriedUsedFiles", coShowTriedUsedFiles: 9, "10": "coShowConditionals", coShowConditionals: 10, "11": "coShowUsedTools", coShowUsedTools: 11, "12": "coShowDebug", coShowDebug: 12, "13": "coShowMessageNumbers", coShowMessageNumbers: 13, "14": "coOverflowChecks", coOverflowChecks: 14, "15": "coRangeChecks", coRangeChecks: 15, "16": "coObjectChecks", coObjectChecks: 16, "17": "coAssertions", coAssertions: 17, "18": "coAllowCAssignments", coAllowCAssignments: 18, "19": "coAllowMacros", coAllowMacros: 19, "20": "coLowerCase", coLowerCase: 20, "21": "coUseStrict", coUseStrict: 21, "22": "coWriteDebugLog", coWriteDebugLog: 22, "23": "coWriteMsgToStdErr", coWriteMsgToStdErr: 23, "24": "coEnumValuesAsNumbers", coEnumValuesAsNumbers: 24, "25": "coKeepNotUsedPrivates", coKeepNotUsedPrivates: 25, "26": "coKeepNotUsedDeclarationsWPO", coKeepNotUsedDeclarationsWPO: 26, "27": "coSourceMapCreate", coSourceMapCreate: 27, "28": "coSourceMapInclude", coSourceMapInclude: 28, "29": "coSourceMapXSSIHeader", coSourceMapXSSIHeader: 29};
  $mod.$rtti.$Enum("TP2jsCompilerOption",{minvalue: 0, maxvalue: 29, ordtype: 1, enumtype: this.TP2jsCompilerOption});
  $mod.$rtti.$Set("TP2jsCompilerOptions",{comptype: $mod.$rtti["TP2jsCompilerOption"]});
  $mod.$rtti.$Enum("TP2jsOptimization",{minvalue: 24, maxvalue: 26, ordtype: 1, enumtype: this.TP2jsCompilerOption});
  this.TP2jsRTLVersionCheck = {"0": "rvcNone", rvcNone: 0, "1": "rvcMain", rvcMain: 1, "2": "rvcSystem", rvcSystem: 2, "3": "rvcUnit", rvcUnit: 3};
  $mod.$rtti.$Enum("TP2jsRTLVersionCheck",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TP2jsRTLVersionCheck});
  this.DefaultP2jsCompilerOptions = rtl.createSet($mod.TP2jsCompilerOption.coShowErrors,$mod.TP2jsCompilerOption.coSourceMapXSSIHeader,$mod.TP2jsCompilerOption.coUseStrict);
  this.DefaultP2jsRTLVersionCheck = $mod.TP2jsRTLVersionCheck.rvcNone;
  this.coShowAll = rtl.createSet(null,$mod.TP2jsCompilerOption.coShowErrors,$mod.TP2jsCompilerOption.coShowDebug);
  this.coO1Enable = rtl.createSet($mod.TP2jsCompilerOption.coEnumValuesAsNumbers);
  this.coO1Disable = rtl.createSet($mod.TP2jsCompilerOption.coKeepNotUsedPrivates,$mod.TP2jsCompilerOption.coKeepNotUsedDeclarationsWPO);
  this.p2jscoCaption = ["Skip default configs","Build all","Show logo","Show errors","Show warnings","Show notes","Show hints","Show infos","Show line numbers","Show tried\/used files","Show conditionals","Show used tools","Show debug","Show message numbers","Overflow checking","Range checking","Method call checking","Assertions","Allow C assignments","Allow macros","Lowercase identifiers","Use strict","Write pas2jsdebug.log","Write messages to StdErr","Enum values as numbers","Keep not used private declarations","Keep not used declarations (WPO)","Create source map","Include Pascal sources in source map","Prepend XSSI protection )]} to source map"];
  this.TP2jsMode = {"0": "p2jmObjFPC", p2jmObjFPC: 0, "1": "p2jmDelphi", p2jmDelphi: 1};
  $mod.$rtti.$Enum("TP2jsMode",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TP2jsMode});
  $mod.$rtti.$Set("TP2jsModes",{comptype: $mod.$rtti["TP2jsMode"]});
  this.p2jscModeNames = ["ObjFPC","Delphi"];
  this.p2jsMode_SwitchSets = [rtl.unionSet(rtl.intersectSet(pas.PScanner.OBJFPCModeSwitches,pas.FPPas2Js.msAllPas2jsModeSwitches),pas.FPPas2Js.msAllPas2jsModeSwitchesReadOnly),rtl.unionSet(rtl.intersectSet(pas.PScanner.DelphiModeSwitches,pas.FPPas2Js.msAllPas2jsModeSwitches),pas.FPPas2Js.msAllPas2jsModeSwitchesReadOnly)];
  rtl.createClass($mod,"EPas2jsMacro",pas.SysUtils.Exception,function () {
  });
  $mod.$rtti.$MethodVar("TOnSubstituteMacro",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Params",rtl.string,1],["Lvl",rtl.longint]],rtl.boolean), methodkind: 1});
  rtl.createClass($mod,"TPas2jsMacro",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.Name = "";
      this.Description = "";
      this.Value = "";
      this.CanHaveParams = false;
      this.OnSubstitute = null;
    };
    this.$final = function () {
      this.OnSubstitute = undefined;
      pas.System.TObject.$final.call(this);
    };
  });
  rtl.createClass($mod,"TPas2jsMacroEngine",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.fMacros = null;
      this.FMaxLevel = 0;
    };
    this.$final = function () {
      this.fMacros = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetMacros = function (Index) {
      var Result = null;
      Result = this.fMacros.GetItem(Index);
      return Result;
    };
    this.Create$1 = function () {
      this.fMacros = pas.contnrs.TObjectList.$create("Create$3",[true]);
      this.FMaxLevel = 10;
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.fMacros;
        }, set: function (v) {
          this.p.fMacros = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.Count = function () {
      var Result = 0;
      Result = this.fMacros.GetCount();
      return Result;
    };
    this.AddValue = function (aName, aDescription, aValue) {
      var Result = null;
      if (!pas.PasResolver.IsValidIdent(aName,false,false)) throw $mod.EPas2jsMacro.$create("Create$1",[('invalid macro name "' + aName) + '"']);
      if (this.IndexOf(aName) >= 0) throw $mod.EPas2jsMacro.$create("Create$1",[('duplicate macro name "' + aName) + '"']);
      Result = $mod.TPas2jsMacro.$create("Create");
      Result.Name = aName;
      Result.Description = aDescription;
      Result.Value = aValue;
      this.fMacros.Add$1(Result);
      return Result;
    };
    this.AddFunction = function (aName, aDescription, OnSubstitute, CanHaveParams) {
      var Result = null;
      if (!pas.PasResolver.IsValidIdent(aName,false,false)) throw $mod.EPas2jsMacro.$create("Create$1",[('invalid macro name "' + aName) + '"']);
      if (this.IndexOf(aName) >= 0) throw $mod.EPas2jsMacro.$create("Create$1",[('duplicate macro name "' + aName) + '"']);
      Result = $mod.TPas2jsMacro.$create("Create");
      Result.Name = aName;
      Result.Description = aDescription;
      Result.CanHaveParams = CanHaveParams;
      Result.OnSubstitute = OnSubstitute;
      this.fMacros.Add$1(Result);
      return Result;
    };
    this.IndexOf = function (aName) {
      var Result = 0;
      var i = 0;
      for (var $l1 = 0, $end2 = this.Count() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.CompareText(this.GetMacros(i).Name,aName) === 0) return i;
      };
      Result = -1;
      return Result;
    };
    this.Delete = function (Index) {
      this.fMacros.Delete(Index);
    };
    this.FindMacro = function (aName) {
      var Result = null;
      var i = 0;
      i = this.IndexOf(aName);
      if (i >= 0) {
        Result = this.GetMacros(i)}
       else Result = null;
      return Result;
    };
    this.Substitute = function (s, Sender, Lvl) {
      var p = 0;
      var StartP = 0;
      var BracketLvl = 0;
      var ParamStartP = 0;
      var MacroName = "";
      var NewValue = "";
      var Macro = null;
      if (Lvl >= this.FMaxLevel) throw $mod.EPas2jsMacro.$create("Create$1",[('macro cycle detected: "' + s.get()) + '"']);
      p = 1;
      while (p < s.get().length) {
        if ((s.get().charAt(p - 1) === "$") && (s.get().charCodeAt((p + 1) - 1) in rtl.createSet(95,null,97,122,null,65,90))) {
          StartP = p;
          p += 2;
          while ((p <= s.get().length) && (s.get().charCodeAt(p - 1) in rtl.createSet(95,null,97,122,null,65,90,null,48,57))) p += 1;
          MacroName = pas.System.Copy(s.get(),StartP + 1,(p - StartP) - 1);
          Macro = this.FindMacro(MacroName);
          if (Macro === null) throw $mod.EPas2jsMacro.$create("Create$1",[((('macro not found "' + MacroName) + '" in "') + s.get()) + '"']);
          NewValue = "";
          if ((Macro.CanHaveParams && (p <= s.get().length)) && (s.get().charAt(p - 1) === "(")) {
            p += 1;
            ParamStartP = p;
            BracketLvl = 1;
            do {
              if (p > s.get().length) throw $mod.EPas2jsMacro.$create("Create$1",[('missing closing bracket ) in "' + s.get()) + '"']);
              var $tmp1 = s.get().charAt(p - 1);
              if ($tmp1 === "(") {
                BracketLvl += 1}
               else if ($tmp1 === ")") if (BracketLvl === 1) {
                NewValue = pas.System.Copy(s.get(),ParamStartP,p - ParamStartP);
                break;
              } else {
                BracketLvl -= 1;
              };
            } while (!false);
          } else if ((p <= s.get().length) && (s.get().charAt(p - 1) === "$")) p += 1;
          if (Macro.OnSubstitute != null) {
            if (!Macro.OnSubstitute(Sender,{get: function () {
                return NewValue;
              }, set: function (v) {
                NewValue = v;
              }},Lvl + 1)) throw $mod.EPas2jsMacro.$create("Create$1",[((('macro "' + MacroName) + '" failed in "') + s.get()) + '"']);
          } else NewValue = Macro.Value;
          s.set((pas.SysUtils.LeftStr(s.get(),StartP - 1) + NewValue) + pas.System.Copy(s.get(),p,s.get().length));
          p = StartP;
        };
        p += 1;
      };
    };
  });
  rtl.createClass($mod,"ECompilerTerminate",pas.SysUtils.Exception,function () {
  });
  $mod.$rtti.$Class("TPas2jsCompiler");
  $mod.$rtti.$Class("TPas2jsCompilerFile");
  this.TUsedBySection = {"0": "ubMainSection", ubMainSection: 0, "1": "ubImplSection", ubImplSection: 1};
  this.TPas2jsReaderState = {"0": "prsNone", prsNone: 0, "1": "prsReading", prsReading: 1, "2": "prsWaitingForUsedUnits", prsWaitingForUsedUnits: 2, "3": "prsCanContinue", prsCanContinue: 3, "4": "prsFinished", prsFinished: 4, "5": "prsError", prsError: 5};
  rtl.createClass($mod,"TPCUSupport",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FFile = null;
    };
    this.$final = function () {
      this.FFile = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.RaiseInternalError = function (id, Msg) {
      this.FFile.RaiseInternalError(id,Msg);
    };
    this.SetPasModule = function (aModule) {
      this.FFile.FPasModule = aModule;
    };
    this.SetReaderState = function (aReaderState) {
      this.FFile.FReaderState = aReaderState;
    };
    this.SetPCUFileName = function (FN) {
      this.FFile.FPCUFilename = FN;
    };
    this.create$1 = function (aCompilerFile) {
      this.FFile = aCompilerFile;
    };
  });
  this.TFindUnitInfo = function (s) {
    if (s) {
      this.FileName = s.FileName;
      this.UnitName = s.UnitName;
      this.isPCU = s.isPCU;
      this.isForeign = s.isForeign;
    } else {
      this.FileName = "";
      this.UnitName = "";
      this.isPCU = false;
      this.isForeign = false;
    };
    this.$equal = function (b) {
      return (this.FileName === b.FileName) && ((this.UnitName === b.UnitName) && ((this.isPCU === b.isPCU) && (this.isForeign === b.isForeign)));
    };
  };
  $mod.$rtti.$Record("TFindUnitInfo",{}).addFields("FileName",rtl.string,"UnitName",rtl.string,"isPCU",rtl.boolean,"isForeign",rtl.boolean);
  this.TLoadInfo = function (s) {
    if (s) {
      this.UseFilename = s.UseFilename;
      this.UseUnitname = s.UseUnitname;
      this.InFilename = s.InFilename;
      this.NameExpr = s.NameExpr;
      this.InFileExpr = s.InFileExpr;
      this.UseIsForeign = s.UseIsForeign;
      this.IsPCU = s.IsPCU;
    } else {
      this.UseFilename = "";
      this.UseUnitname = "";
      this.InFilename = "";
      this.NameExpr = null;
      this.InFileExpr = null;
      this.UseIsForeign = false;
      this.IsPCU = false;
    };
    this.$equal = function (b) {
      return (this.UseFilename === b.UseFilename) && ((this.UseUnitname === b.UseUnitname) && ((this.InFilename === b.InFilename) && ((this.NameExpr === b.NameExpr) && ((this.InFileExpr === b.InFileExpr) && ((this.UseIsForeign === b.UseIsForeign) && (this.IsPCU === b.IsPCU))))));
    };
  };
  $mod.$rtti.$Record("TLoadInfo",{}).addFields("UseFilename",rtl.string,"UseUnitname",rtl.string,"InFilename",rtl.string,"NameExpr",pas.PasTree.$rtti["TPasExpr"],"InFileExpr",pas.PasTree.$rtti["TPasExpr"],"UseIsForeign",rtl.boolean,"IsPCU",rtl.boolean);
  rtl.createClass($mod,"TPas2JSCompilerSupport",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FCompiler = null;
    };
    this.$final = function () {
      this.FCompiler = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (aCompiler) {
      this.FCompiler = aCompiler;
    };
  });
  rtl.createClass($mod,"TPas2jsCompilerFile",$mod.TPas2JSCompilerSupport,function () {
    this.$init = function () {
      $mod.TPas2JSCompilerSupport.$init.call(this);
      this.FConverter = null;
      this.FFileResolver = null;
      this.FIsForeign = false;
      this.FIsMainFile = false;
      this.FJSFilename = "";
      this.FJSModule = null;
      this.FLog = null;
      this.FNeedBuild = false;
      this.FParser = null;
      this.FPasFileName = "";
      this.FPasModule = null;
      this.FPasResolver = null;
      this.FPasUnitName = "";
      this.FPCUFilename = "";
      this.FPCUSupport = null;
      this.FReaderState = 0;
      this.FScanner = null;
      this.FShowDebug = false;
      this.FUseAnalyzer = null;
      this.FUsedBy = rtl.arraySetLength(null,null,2);
    };
    this.$final = function () {
      this.FConverter = undefined;
      this.FFileResolver = undefined;
      this.FJSModule = undefined;
      this.FLog = undefined;
      this.FParser = undefined;
      this.FPasModule = undefined;
      this.FPasResolver = undefined;
      this.FPCUSupport = undefined;
      this.FScanner = undefined;
      this.FUseAnalyzer = undefined;
      this.FUsedBy = undefined;
      $mod.TPas2JSCompilerSupport.$final.call(this);
    };
    this.GetUsedBy = function (Section, Index) {
      var Result = null;
      Result = rtl.getObject(this.FUsedBy[Section].Get(Index));
      return Result;
    };
    this.GetUsedByCount = function (Section) {
      var Result = 0;
      Result = this.FUsedBy[Section].FCount;
      return Result;
    };
    this.OnConverterIsElementUsed = function (Sender, El) {
      var Result = false;
      if ((this.FCompiler.FWPOAnalyzer !== null) && !($mod.TP2jsCompilerOption.coKeepNotUsedDeclarationsWPO in this.FCompiler.FOptions)) {
        Result = this.FCompiler.FWPOAnalyzer.IsUsed(El)}
       else if (!($mod.TP2jsCompilerOption.coKeepNotUsedPrivates in this.FCompiler.FOptions)) {
        Result = this.FUseAnalyzer.IsUsed(El)}
       else Result = true;
      return Result;
    };
    this.OnConverterIsTypeInfoUsed = function (Sender, El) {
      var Result = false;
      if ((this.FCompiler.FWPOAnalyzer !== null) && !($mod.TP2jsCompilerOption.coKeepNotUsedDeclarationsWPO in this.FCompiler.FOptions)) {
        Result = this.FCompiler.FWPOAnalyzer.IsTypeInfoUsed(El)}
       else if (!($mod.TP2jsCompilerOption.coKeepNotUsedPrivates in this.FCompiler.FOptions)) {
        Result = this.FUseAnalyzer.IsTypeInfoUsed(El)}
       else Result = true;
      return Result;
    };
    this.OnPasResolverLog = function (Sender, Msg) {
      var aResolver = null;
      if (Msg === "") ;
      aResolver = Sender;
      this.DoLogMsgAtEl(aResolver.FLastMsgType,aResolver.FLastMsg,aResolver.FLastMsgNumber,aResolver.FLastElement);
    };
    this.OnParserLog = function (Sender, Msg) {
      var aParser = null;
      var aScanner = null;
      if (Msg === "") ;
      aParser = Sender;
      aScanner = aParser.FScanner;
      this.FLog.Log(aParser.FLastMsgType,aParser.FLastMsg,aParser.FLastMsgNumber,aScanner.FCurFilename,aScanner.FCurRow,aScanner.GetCurColumn(),true);
    };
    this.OnScannerLog = function (Sender, Msg) {
      var aScanner = null;
      if (Msg === "") ;
      aScanner = Sender;
      this.FLog.Log(aScanner.FLastMsgType,aScanner.FLastMsg,aScanner.FLastMsgNumber,aScanner.FCurFilename,aScanner.FCurRow,aScanner.GetCurColumn(),true);
    };
    this.OnUseAnalyzerMessage = function (Sender, Msg) {
      this.FLog.Log(Msg.MsgType,Msg.MsgText,Msg.MsgNumber,Msg.Filename,Msg.Row,Msg.Col,true);
    };
    this.HandleEParserError = function (E) {
      this.FLog.Log(this.FParser.FLastMsgType,this.FParser.FLastMsg,this.FParser.FLastMsgNumber,E.FFilename,E.FRow,E.FColumn,true);
      this.FCompiler.Terminate(6);
    };
    this.HandleEPasResolve = function (E) {
      var aFilename = "";
      var aRow = 0;
      var aColumn = 0;
      if (E.FPasElement !== null) {
        aFilename = E.FPasElement.SourceFilename;
        this.FPasResolver.$class.UnmangleSourceLineNumber(E.FPasElement.SourceLinenumber,{get: function () {
            return aRow;
          }, set: function (v) {
            aRow = v;
          }},{get: function () {
            return aColumn;
          }, set: function (v) {
            aColumn = v;
          }});
      } else {
        aFilename = this.FScanner.FCurFilename;
        aRow = this.FScanner.FCurRow;
        aColumn = this.FScanner.GetCurColumn();
      };
      this.FLog.Log(E.MsgType,E.fMessage,E.MsgNumber,aFilename,aRow,aColumn,true);
      this.FCompiler.Terminate(6);
    };
    this.HandleEPas2JS = function (E) {
      var aFilename = "";
      var aRow = 0;
      var aColumn = 0;
      if (E.PasElement !== null) {
        aFilename = E.PasElement.SourceFilename;
        this.FPasResolver.$class.UnmangleSourceLineNumber(E.PasElement.SourceLinenumber,{get: function () {
            return aRow;
          }, set: function (v) {
            aRow = v;
          }},{get: function () {
            return aColumn;
          }, set: function (v) {
            aColumn = v;
          }});
        this.FLog.Log(E.MsgType,E.fMessage,E.MsgNumber,aFilename,aRow,aColumn,true);
      } else {
        this.FLog.Log(E.MsgType,E.fMessage,E.MsgNumber,"",0,0,true);
      };
      this.FCompiler.Terminate(7);
    };
    this.HandleUnknownException = function (E) {
      if (!$mod.ECompilerTerminate.isPrototypeOf(E)) this.FLog.Log(pas.PScanner.TMessageType.mtFatal,(("bug: uncaught " + E.$classname) + ": ") + E.fMessage,0,"",0,0,true);
      this.FLog.Log(pas.PScanner.TMessageType.mtFatal,(E.$classname + ": ") + E.fMessage,0,"",0,0,true);
      this.FCompiler.Terminate(1);
    };
    this.HandleException = function (E) {
      if (this.FShowDebug) this.FLog.LogExceptionBackTrace(E);
      if (pas.PScanner.EScannerError.isPrototypeOf(E)) {
        this.FLog.Log(this.FScanner.FLastMsgType,this.FScanner.FLastMsg,this.FScanner.FLastMsgNumber,this.FScanner.FCurFilename,this.FScanner.FCurRow,this.FScanner.GetCurColumn(),true);
        this.FCompiler.Terminate(6);
      } else if (pas.PParser.EParserError.isPrototypeOf(E)) {
        this.HandleEParserError(E)}
       else if (pas.PasResolver.EPasResolve.isPrototypeOf(E)) {
        this.HandleEPasResolve(E)}
       else if (pas.FPPas2Js.EPas2JS.isPrototypeOf(E)) {
        this.HandleEPas2JS(E)}
       else if (pas.PScanner.EFileNotFoundError.isPrototypeOf(E)) {
        if ((E.fMessage !== "") || (this.FLog.FLastMsgType !== pas.PScanner.TMessageType.mtFatal)) this.FLog.Log(pas.PScanner.TMessageType.mtFatal,E.fMessage,0,"",0,0,true);
        this.FCompiler.Terminate(4);
      } else if (pas.pas2jsfs.EPas2jsFS.isPrototypeOf(E)) {
        this.FLog.Log(pas.PScanner.TMessageType.mtFatal,E.fMessage,0,"",0,0,true);
        this.FCompiler.Terminate(4);
      } else if (!((this.FPCUSupport != null) && this.FPCUSupport.HandleException(E))) {}
      else this.HandleUnknownException(E);
    };
    this.HandleJSException = function (Msg, E) {
      this.FCompiler.HandleJSException(Msg,E,true);
    };
    this.DoLogMsgAtEl = function (MsgType, Msg, MsgNumber, El) {
      var Line = 0;
      var Col = 0;
      var Filename = "";
      if (El !== null) {
        Filename = El.SourceFilename;
        pas.PasResolver.TPasResolver.UnmangleSourceLineNumber(El.SourceLinenumber,{get: function () {
            return Line;
          }, set: function (v) {
            Line = v;
          }},{get: function () {
            return Col;
          }, set: function (v) {
            Col = v;
          }});
      } else {
        Filename = "";
        Line = 0;
        Col = 0;
      };
      this.FLog.Log(MsgType,Msg,MsgNumber,Filename,Line,Col,true);
    };
    this.RaiseInternalError = function (id, Msg) {
      this.FCompiler.RaiseInternalError(id,Msg);
    };
    this.ReaderFinished = function () {
      this.FReaderState = $mod.TPas2jsReaderState.prsFinished;
      try {
        this.FCompiler.RemoveReadingModule(this);
        if ($mod.TP2jsCompilerOption.coWriteDebugLog in this.FCompiler.FOptions) {
          this.FLog.DebugLogWriteLn("Pas-Module:");
          this.FLog.DebugLogWriteLn(this.FPasModule.GetDeclaration(true));
        };
        if (this.IsUnitReadFromPCU()) this.FUseAnalyzer.SetOptions(rtl.unionSet(this.FUseAnalyzer.FOptions,rtl.createSet(pas.PasUseAnalyzer.TPasAnalyzerOption.paoImplReferences)));
        this.FUseAnalyzer.AnalyzeModule(this.FPasModule);
        if ((this.FPCUSupport != null) && !this.FPCUSupport.HasReader()) this.FPCUSupport.WritePCU();
      } catch ($e) {
        if ($mod.ECompilerTerminate.isPrototypeOf($e)) {
          var E = $e;
          throw $e;
        } else if (pas.SysUtils.Exception.isPrototypeOf($e)) {
          var E = $e;
          this.HandleException(E);
        } else {
          this.HandleJSException(('[20181031190529] TPas2jsCompilerFile.ReaderFinished File="' + this.FPasFileName) + '"',$e);
        }
      };
    };
    this.Create$2 = function (aCompiler, aPasFilename) {
      var ub = 0;
      $mod.TPas2JSCompilerSupport.Create$1.call(this,aCompiler);
      this.FPasFileName = aPasFilename;
      this.FLog = this.FCompiler.FLog;
      this.FPasResolver = pas.Pas2jsPParser.TPas2jsCompilerResolver.$create("Create$2");
      this.FPasResolver.Owner = this;
      this.FPasResolver.FOnFindModule = rtl.createCallback(this,"OnResolverFindModule");
      this.FPasResolver.FOnCheckSrcName = rtl.createCallback(this,"OnResolverCheckSrcName");
      this.FPasResolver.FOnLog = rtl.createCallback(this,"OnPasResolverLog");
      this.FPasResolver.FLog = this.FLog;
      this.FPasResolver.AddObjFPCBuiltInIdentifiers(pas.FPPas2Js.btAllJSBaseTypes,pas.FPPas2Js.bfAllJSBaseProcs);
      this.FIsMainFile = this.FCompiler.FFS.SameFileName(this.FCompiler.FMainSrcFile,this.FPasFileName);
      for (ub = 0; ub <= 1; ub++) this.FUsedBy[ub] = pas.Classes.TFPList.$create("Create");
      this.FUseAnalyzer = pas.PasUseAnalyzer.TPasAnalyzer.$create("Create$1");
      this.FUseAnalyzer.FOnMessage = rtl.createCallback(this,"OnUseAnalyzerMessage");
      this.FUseAnalyzer.FResolver = this.FPasResolver;
      this.FPCUSupport = this.CreatePCUSupport();
      if (this.FPCUSupport !== null) this.FPCUFilename = aPasFilename;
    };
    this.Destroy = function () {
      var ub = 0;
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FPCUSupport;
        }, set: function (v) {
          this.p.FPCUSupport = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FUseAnalyzer;
        }, set: function (v) {
          this.p.FUseAnalyzer = v;
        }});
      for (ub = 0; ub <= 1; ub++) pas.SysUtils.FreeAndNil({a: ub, p: this.FUsedBy, get: function () {
          return this.p[this.a];
        }, set: function (v) {
          this.p[this.a] = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FJSModule;
        }, set: function (v) {
          this.p.FJSModule = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FConverter;
        }, set: function (v) {
          this.p.FConverter = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FParser;
        }, set: function (v) {
          this.p.FParser = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FScanner;
        }, set: function (v) {
          this.p.FScanner = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FFileResolver;
        }, set: function (v) {
          this.p.FFileResolver = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FPasResolver;
        }, set: function (v) {
          this.p.FPasResolver = v;
        }});
      if (this.FPasModule !== null) this.FPasModule.ReleaseUsedUnits();
      pas.PasTree.ReleaseAndNil({p: this, get: function () {
          return this.p.FPasModule;
        }, set: function (v) {
          this.p.FPasModule = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.CreatePCUSupport = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.GetInitialModeSwitches = function () {
      var Result = {};
      Result = rtl.refSet($mod.p2jsMode_SwitchSets[this.FCompiler.FMode]);
      return Result;
    };
    this.IsUnitReadFromPCU = function () {
      var Result = false;
      Result = (this.FPCUSupport != null) && this.FPCUSupport.HasReader();
      return Result;
    };
    this.GetInitialBoolSwitches = function () {
      var Result = {};
      var bs = {};
      bs = rtl.createSet(pas.PScanner.TBoolSwitch.bsLongStrings,pas.PScanner.TBoolSwitch.bsWriteableConst);
      if ($mod.TP2jsCompilerOption.coAllowMacros in this.FCompiler.FOptions) bs = rtl.includeSet(bs,pas.PScanner.TBoolSwitch.bsMacro);
      if ($mod.TP2jsCompilerOption.coOverflowChecks in this.FCompiler.FOptions) bs = rtl.includeSet(bs,pas.PScanner.TBoolSwitch.bsOverflowChecks);
      if ($mod.TP2jsCompilerOption.coRangeChecks in this.FCompiler.FOptions) bs = rtl.includeSet(bs,pas.PScanner.TBoolSwitch.bsRangeChecks);
      if ($mod.TP2jsCompilerOption.coObjectChecks in this.FCompiler.FOptions) bs = rtl.includeSet(bs,pas.PScanner.TBoolSwitch.bsObjectChecks);
      if ($mod.TP2jsCompilerOption.coAssertions in this.FCompiler.FOptions) bs = rtl.includeSet(bs,pas.PScanner.TBoolSwitch.bsAssertions);
      if ($mod.TP2jsCompilerOption.coShowHints in this.FCompiler.FOptions) bs = rtl.includeSet(bs,pas.PScanner.TBoolSwitch.bsHints);
      if ($mod.TP2jsCompilerOption.coShowNotes in this.FCompiler.FOptions) bs = rtl.includeSet(bs,pas.PScanner.TBoolSwitch.bsNotes);
      if ($mod.TP2jsCompilerOption.coShowWarnings in this.FCompiler.FOptions) bs = rtl.includeSet(bs,pas.PScanner.TBoolSwitch.bsWarnings);
      Result = rtl.refSet(bs);
      return Result;
    };
    this.GetInitialConverterOptions = function () {
      var Result = {};
      Result = rtl.refSet(pas.FPPas2Js.DefaultPasToJSOptions);
      if ($mod.TP2jsCompilerOption.coUseStrict in this.FCompiler.FOptions) {
        Result = rtl.includeSet(Result,pas.FPPas2Js.TPasToJsConverterOption.coUseStrict)}
       else Result = rtl.excludeSet(Result,pas.FPPas2Js.TPasToJsConverterOption.coUseStrict);
      if ($mod.TP2jsCompilerOption.coEnumValuesAsNumbers in this.FCompiler.FOptions) Result = rtl.includeSet(Result,pas.FPPas2Js.TPasToJsConverterOption.coEnumNumbers);
      if ($mod.TP2jsCompilerOption.coLowerCase in this.FCompiler.FOptions) {
        Result = rtl.includeSet(Result,pas.FPPas2Js.TPasToJsConverterOption.coLowerCase)}
       else Result = rtl.excludeSet(Result,pas.FPPas2Js.TPasToJsConverterOption.coLowerCase);
      var $tmp1 = this.FCompiler.FRTLVersionCheck;
      if ($tmp1 === $mod.TP2jsRTLVersionCheck.rvcNone) {}
      else if ($tmp1 === $mod.TP2jsRTLVersionCheck.rvcMain) {
        Result = rtl.includeSet(Result,pas.FPPas2Js.TPasToJsConverterOption.coRTLVersionCheckMain)}
       else if ($tmp1 === $mod.TP2jsRTLVersionCheck.rvcSystem) {
        Result = rtl.includeSet(Result,pas.FPPas2Js.TPasToJsConverterOption.coRTLVersionCheckSystem)}
       else if ($tmp1 === $mod.TP2jsRTLVersionCheck.rvcUnit) Result = rtl.includeSet(Result,pas.FPPas2Js.TPasToJsConverterOption.coRTLVersionCheckUnit);
      return Result;
    };
    this.CreateScannerAndParser = function (aFileResolver) {
      var aUnitName = "";
      var i = 0;
      var M = null;
      this.FFileResolver = aFileResolver;
      if (this.FScanner !== null) this.RaiseInternalError(20180707193258,this.FPasFileName);
      this.FScanner = pas.FPPas2Js.TPas2jsPasScanner.$create("Create$1",[this.FFileResolver]);
      this.FScanner.FLogEvents = rtl.refSet(this.FPasResolver.FScannerLogEvents);
      this.FScanner.FOnLog = rtl.createCallback(this,"OnScannerLog");
      this.FScanner.FOnFormatPath = rtl.createCallback(this.FCompiler,"FormatPath");
      this.FParser = pas.Pas2jsPParser.TPas2jsPasParser.$create("Create$2",[this.FScanner,this.FFileResolver,this.FPasResolver]);
      this.FScanner.SetOptions(rtl.unionSet(this.FScanner.FOptions,rtl.createSet(pas.PScanner.TPOption.po_StopOnErrorDirective)));
      this.FScanner.SetAllowedModeSwitches(rtl.refSet(pas.FPPas2Js.msAllPas2jsModeSwitches));
      this.FScanner.SetReadOnlyModeSwitches(rtl.refSet(pas.FPPas2Js.msAllPas2jsModeSwitchesReadOnly));
      this.FScanner.SetCurrentModeSwitches(rtl.refSet(this.GetInitialModeSwitches()));
      this.FScanner.SetAllowedBoolSwitches(rtl.refSet(pas.FPPas2Js.msAllPas2jsBoolSwitches));
      this.FScanner.SetReadOnlyBoolSwitches(rtl.refSet(pas.FPPas2Js.msAllPas2jsBoolSwitchesReadOnly));
      this.FScanner.SetCurrentBoolSwitches(rtl.refSet(this.GetInitialBoolSwitches()));
      this.FScanner.SetCurrentValueSwitch(pas.PScanner.TValueSwitch.vsInterfaces,pas.PasTree.InterfaceTypeNames[this.FCompiler.FInterfaceType]);
      if ($mod.TP2jsCompilerOption.coAllowCAssignments in this.FCompiler.FOptions) this.FScanner.SetOptions(rtl.unionSet(this.FScanner.FOptions,rtl.createSet(pas.PScanner.TPOption.po_CAssignments)));
      if (this.FCompiler.FMode === $mod.TP2jsMode.p2jmDelphi) this.FScanner.SetOptions(rtl.unionSet(this.FScanner.FOptions,rtl.createSet(pas.PScanner.TPOption.po_delphi)));
      for (var $l1 = 0, $end2 = this.FCompiler.FDefines.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        M = this.FCompiler.FDefines.GetObject(i);
        if (M === null) {
          this.FScanner.AddDefine(this.FCompiler.FDefines.Get(i),false)}
         else this.FScanner.AddMacro(M.FName,M.FValue,false);
      };
      this.FScanner.FCompilerVersion = this.FCompiler.$class.GetVersion(true);
      this.FScanner.FTargetPlatform = this.FCompiler.FTargetPlatform;
      this.FScanner.FTargetProcessor = this.FCompiler.FTargetProcessor;
      this.FScanner.FResolver = this.FPasResolver;
      this.FParser.FLogEvents = rtl.refSet(this.FPasResolver.FPParserLogEvents);
      this.FParser.FOnLog = rtl.createCallback(this,"OnParserLog");
      this.FParser.FLog = this.FLog;
      this.FPasResolver.FP2JParser = this.FParser;
      if (!this.FIsMainFile) {
        aUnitName = pas.PScanner.ExtractFilenameOnly(this.FPasFileName);
        if (pas.SysUtils.CompareText(aUnitName,"system") === 0) this.FParser.FImplicitUses.Clear();
      };
    };
    this.CreateConverter = function () {
      if (this.FConverter !== null) return;
      this.FConverter = pas.FPPas2Js.TPasToJSConverter.$create("Create$1");
      this.FConverter.FRTLVersion = (((1 * 100) + 1) * 100) + 1;
      this.FConverter.FOptions = rtl.refSet(this.GetInitialConverterOptions());
      this.FConverter.FTargetPlatform = this.FCompiler.FTargetPlatform;
      this.FConverter.FTargetProcessor = this.FCompiler.FTargetProcessor;
    };
    this.OnResolverFindModule = function (UseUnitName, InFilename, NameExpr, InFileExpr) {
      var Result = null;
      var aFile = null;
      var UnitInfo = new $mod.TFindUnitInfo();
      var LoadInfo = new $mod.TLoadInfo();
      Result = null;
      aFile = null;
      if (pas.SysUtils.CompareText(pas.PScanner.ExtractFilenameOnly(this.FPasFileName),UseUnitName) === 0) this.FParser.RaiseParserError(120,[UseUnitName]);
      UnitInfo = new $mod.TFindUnitInfo(this.FCompiler.GetUnitInfo(UseUnitName,InFilename,this.FPCUSupport));
      if (UnitInfo.FileName !== "") {
        LoadInfo.UseFilename = UnitInfo.FileName;
        LoadInfo.UseUnitname = UnitInfo.UnitName;
        LoadInfo.NameExpr = NameExpr;
        LoadInfo.IsPCU = UnitInfo.isPCU;
        if (UnitInfo.isPCU) {
          LoadInfo.InFilename = "";
          LoadInfo.InFileExpr = null;
          LoadInfo.UseIsForeign = false;
        } else {
          LoadInfo.InFilename = InFilename;
          LoadInfo.InFileExpr = InFileExpr;
          LoadInfo.UseIsForeign = UnitInfo.isForeign;
        };
        aFile = this.FCompiler.LoadUsedUnit(new $mod.TLoadInfo(LoadInfo),this);
      };
      if (aFile !== null) Result = aFile.FPasModule;
      return Result;
    };
    this.OnResolverCheckSrcName = function (Element) {
      var SrcName = "";
      var ExpectedSrcName = "";
      if ((Element.$class.ClassType() === pas.PasTree.TPasUnitModule) || (Element.$class.ClassType() === pas.PasTree.TPasModule)) {
        SrcName = Element.FName;
        if (this.FIsMainFile) {
          if (this.FPasUnitName === "") {
            this.FPasUnitName = SrcName;
            this.FCompiler.AddUsedUnit(this);
          };
        } else {
          ExpectedSrcName = pas.PScanner.ExtractFilenameOnly(this.FPasFileName);
          if (pas.SysUtils.CompareText(SrcName,ExpectedSrcName) === 0) return;
          this.FParser.RaiseParserError(128,[ExpectedSrcName,SrcName]);
        };
      };
    };
    this.OpenFile = function (aFilename) {
      this.FPasFileName = aFilename;
      try {
        this.FScanner.OpenFile(this.FPasFileName);
      } catch ($e) {
        if ($mod.ECompilerTerminate.isPrototypeOf($e)) {
          var E = $e;
          throw $e;
        } else if (pas.SysUtils.Exception.isPrototypeOf($e)) {
          var E = $e;
          this.HandleException(E);
        } else {
          this.HandleJSException(('[20181031190536] TPas2jsCompilerFile.OpenFile "' + aFilename) + '"',$e);
        }
      };
    };
    this.ReadUnit = function () {
      if (this.FShowDebug) this.FLog.LogMsg(126,[pas.Pas2jsLogger.QuoteStr(this.FPasFileName,'"')],"",0,0,true);
      if (this.FPasModule !== null) this.FCompiler.RaiseInternalError(20180305190321,this.FPasFileName);
      this.FReaderState = $mod.TPas2jsReaderState.prsReading;
      try {
        this.FCompiler.AddReadingModule(this);
        this.FPasResolver.FInterfaceOnly = this.FIsForeign;
        if (this.IsUnitReadFromPCU()) {
          this.FPCUSupport.ReadUnit()}
         else {
          if (this.FIsMainFile) {
            this.FParser.ParseMain({p: this, get: function () {
                return this.p.FPasModule;
              }, set: function (v) {
                this.p.FPasModule = v;
              }})}
           else this.FParser.ParseSubModule({p: this, get: function () {
              return this.p.FPasModule;
            }, set: function (v) {
              this.p.FPasModule = v;
            }});
          if (this.FParser.FCurModule === null) {
            this.ReaderFinished()}
           else this.FReaderState = $mod.TPas2jsReaderState.prsWaitingForUsedUnits;
        };
      } catch ($e) {
        if ($mod.ECompilerTerminate.isPrototypeOf($e)) {
          var E = $e;
          throw $e;
        } else if (pas.SysUtils.Exception.isPrototypeOf($e)) {
          var E = $e;
          this.HandleException(E);
        } else {
          this.HandleJSException(('[20181031190541] TPas2jsCompilerFile.ReadUnit File="' + this.FPasFileName) + '"',$e);
        }
      };
      if (this.FReaderState === $mod.TPas2jsReaderState.prsReading) this.FReaderState = $mod.TPas2jsReaderState.prsError;
      if ((this.FPasModule !== null) && (this.FPasModule.FData === null)) this.FPasModule.FData = this;
    };
    this.ReadContinue = function () {
      var Result = false;
      Result = true;
      if (this.FShowDebug) this.FLog.LogPlain$1(['Debug: Continue reading unit "',this.FPasFileName,'"...']);
      if (this.FPasModule === null) this.FCompiler.RaiseInternalError(20180305190338,this.FPasFileName);
      this.FReaderState = $mod.TPas2jsReaderState.prsReading;
      try {
        if ((this.FPCUSupport != null) && this.FPCUSupport.HasReader()) {
          Result = this.FPCUSupport.ReadContinue()}
         else {
          this.FParser.ParseContinue();
          Result = this.FParser.FCurModule === null;
        };
        if (Result) {
          this.ReaderFinished()}
         else this.FReaderState = $mod.TPas2jsReaderState.prsWaitingForUsedUnits;
      } catch ($e) {
        if ($mod.ECompilerTerminate.isPrototypeOf($e)) {
          var E = $e;
          throw $e;
        } else if (pas.SysUtils.Exception.isPrototypeOf($e)) {
          var E = $e;
          this.HandleException(E);
        } else {
          this.HandleJSException(('[20181031190545] TPas2jsCompilerFile.ReadContinue File="' + this.FPasFileName) + '"',$e);
        }
      };
      if (this.FReaderState === $mod.TPas2jsReaderState.prsReading) this.FReaderState = $mod.TPas2jsReaderState.prsError;
      return Result;
    };
    this.ReaderState = function () {
      var Result = 0;
      var Section = null;
      Result = this.FReaderState;
      if (Result === $mod.TPas2jsReaderState.prsWaitingForUsedUnits) {
        if ((this.FPCUSupport != null) && this.FPCUSupport.HasReader()) {
          if (this.FPCUSupport.ReadCanContinue()) Result = $mod.TPas2jsReaderState.prsCanContinue;
        } else {
          if (this.FParser.CanParseContinue({get: function () {
              return Section;
            }, set: function (v) {
              Section = v;
            }})) Result = $mod.TPas2jsReaderState.prsCanContinue;
        };
      };
      return Result;
    };
    this.CreateJS = function () {
      try {
        if (!((this.FPCUSupport != null) && !this.FPCUSupport.HasReader())) {
          this.FUseAnalyzer.EmitModuleHints(this.FPasModule);
        };
        this.CreateConverter();
        this.FConverter.FOnIsElementUsed = rtl.createCallback(this,"OnConverterIsElementUsed");
        this.FConverter.FOnIsTypeInfoUsed = rtl.createCallback(this,"OnConverterIsTypeInfoUsed");
        this.FJSModule = this.FConverter.ConvertPasElement(this.FPasModule,this.FPasResolver);
      } catch ($e) {
        if ($mod.ECompilerTerminate.isPrototypeOf($e)) {
          var E = $e;
          throw $e;
        } else if (pas.SysUtils.Exception.isPrototypeOf($e)) {
          var E = $e;
          this.HandleException(E);
        } else {
          this.HandleJSException(('[20181031190549] TPas2jsCompilerFile.CreateJS File="' + this.FPasFileName) + '"',$e);
        }
      };
    };
    this.GetPasFirstSection = function () {
      var Result = null;
      var aModule = null;
      aModule = this.GetCurPasModule();
      if (aModule === null) return Result;
      if (aModule.$class.ClassType() === pas.PasTree.TPasProgram) {
        Result = aModule.ProgramSection}
       else if (aModule.$class.ClassType() === pas.PasTree.TPasLibrary) {
        Result = aModule.LibrarySection}
       else Result = aModule.InterfaceSection;
      return Result;
    };
    this.GetPasImplSection = function () {
      var Result = null;
      var aModule = null;
      Result = null;
      aModule = this.GetCurPasModule();
      if (aModule === null) return Result;
      Result = aModule.ImplementationSection;
      return Result;
    };
    this.GetPasMainUsesClause = function () {
      var Result = [];
      var aModule = null;
      var IntfSection = null;
      var PrgSection = null;
      var LibSection = null;
      Result = [];
      aModule = this.GetCurPasModule();
      if (aModule === null) return Result;
      if (aModule.$class.ClassType() === pas.PasTree.TPasModule) {
        IntfSection = aModule.InterfaceSection;
        if (IntfSection !== null) Result = IntfSection.UsesClause;
      } else if (aModule.$class.ClassType() === pas.PasTree.TPasProgram) {
        PrgSection = aModule.ProgramSection;
        if (PrgSection !== null) Result = PrgSection.UsesClause;
      } else if (aModule.$class.ClassType() === pas.PasTree.TPasLibrary) {
        LibSection = aModule.LibrarySection;
        if (LibSection !== null) Result = LibSection.UsesClause;
      };
      return Result;
    };
    this.GetPasImplUsesClause = function () {
      var Result = [];
      var aModule = null;
      Result = [];
      aModule = this.GetCurPasModule();
      if (aModule === null) return Result;
      if (aModule.ImplementationSection !== null) Result = aModule.ImplementationSection.UsesClause;
      return Result;
    };
    this.GetCurPasModule = function () {
      var Result = null;
      if (this.FPasModule !== null) {
        Result = this.FPasModule}
       else if ((this.FPasResolver !== null) && (this.FPasResolver.FRootElement !== null)) {
        Result = this.FPasResolver.FRootElement}
       else if (this.FParser !== null) {
        Result = this.FParser.FCurModule}
       else Result = null;
      return Result;
    };
    this.GetModuleName = function () {
      var Result = "";
      var aModule = null;
      aModule = this.GetCurPasModule();
      if (aModule !== null) {
        Result = aModule.FName}
       else Result = "";
      if (Result === "") Result = pas.PScanner.ExtractFilenameOnly(this.FPasFileName);
      return Result;
    };
    this.GetFile = function (aModule) {
      var Result = null;
      var Scope = null;
      var Resolver = null;
      Result = null;
      if ((aModule === null) || (aModule.FData === null)) return Result;
      if ($mod.TPas2jsCompilerFile.isPrototypeOf(aModule.FData)) {
        Result = aModule.FData}
       else if (pas.PasResolver.TPasModuleScope.isPrototypeOf(aModule.FData)) {
        Scope = aModule.FData;
        Resolver = rtl.as(pas.PasResolver.NoNil(Scope.Owner),pas.Pas2jsPParser.TPas2jsCompilerResolver);
        Result = rtl.as(Resolver.Owner,$mod.TPas2jsCompilerFile);
      };
      return Result;
    };
  });
  rtl.createClass($mod,"TPas2JSPostProcessorSupport",$mod.TPas2JSCompilerSupport,function () {
  });
  rtl.createClass($mod,"TPas2JSConfigSupport",$mod.TPas2JSCompilerSupport,function () {
    this.$init = function () {
      $mod.TPas2JSCompilerSupport.$init.call(this);
      this.FConditionEval = null;
      this.FCurrentCfgFilename = "";
      this.FCurrentCfgLineNumber = 0;
    };
    this.$final = function () {
      this.FConditionEval = undefined;
      $mod.TPas2JSCompilerSupport.$final.call(this);
    };
    this.CfgSyntaxError = function (Msg) {
      this.FCompiler.FLog.Log(pas.PScanner.TMessageType.mtError,Msg,0,this.FCurrentCfgFilename,this.FCurrentCfgLineNumber,0,true);
      this.FCompiler.Terminate(3);
    };
    this.ConditionEvalVariable = function (Sender, aName, Value) {
      var Result = false;
      var i = 0;
      var M = null;
      var ms = 0;
      i = this.FCompiler.FDefines.IndexOf(aName);
      if (i >= 0) {
        M = this.FCompiler.FDefines.GetObject(i);
        if (M === null) {
          Value.set(pas.PScanner.CondDirectiveBool[1])}
         else Value.set(M.FValue);
        return true;
      };
      ms = pas.PScanner.StrToModeSwitch(aName);
      if ((ms !== pas.PScanner.TModeSwitch.msNone) && (ms in $mod.p2jsMode_SwitchSets[this.FCompiler.FMode])) {
        Value.set(pas.PScanner.CondDirectiveBool[1]);
        return true;
      };
      Result = false;
      return Result;
    };
    this.ConditionEvalLog = function (Sender, Args) {
      this.CfgSyntaxError(pas.PScanner.SafeFormat(Sender.MsgPattern,Args));
    };
    this.Create$1 = function (aCompiler) {
      $mod.TPas2JSCompilerSupport.Create$1.call(this,aCompiler);
      this.FConditionEval = pas.PScanner.TCondDirectiveEvaluator.$create("Create$1");
      this.FConditionEval.FOnLog = rtl.createCallback(this,"ConditionEvalLog");
      this.FConditionEval.FOnEvalVariable = rtl.createCallback(this,"ConditionEvalVariable");
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FConditionEval;
        }, set: function (v) {
          this.p.FConditionEval = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
    this.LoadDefaultConfig = function () {
      var aFileName = "";
      aFileName = this.FindDefaultConfig();
      if (aFileName !== "") this.LoadConfig(aFileName);
    };
    var IdentChars = rtl.createSet(null,97,122,null,65,90,95,null,48,57);
    this.LoadConfig = function (aFileName) {
      var Self = this;
      var TSkip = {"0": "skipNone", skipNone: 0, "1": "skipIf", skipIf: 1, "2": "skipElse", skipElse: 2};
      var Line = "";
      var l = 0;
      var p = 0;
      var StartP = 0;
      function GetWord() {
        var Result = "";
        StartP = p;
        while ((p <= l) && ((Line.charCodeAt(p - 1) in IdentChars) || (Line.charAt(p - 1) > ""))) p += 1;
        Result = pas.System.Copy(Line,StartP,p - StartP);
        while ((p <= l) && (Line.charCodeAt(p - 1) in rtl.createSet(32,9))) p += 1;
        return Result;
      };
      function DebugCfgDirective(s) {
        Self.FCompiler.FLog.LogMsg(119,[pas.Pas2jsLogger.QuoteStr(Line,'"'),s],Self.FCurrentCfgFilename,Self.FCurrentCfgLineNumber,1,false);
      };
      var OldCfgFilename = "";
      var Directive = "";
      var aName = "";
      var Expr = "";
      var aFile = null;
      var IfLvl = 0;
      var SkipLvl = 0;
      var OldCfgLineNumber = 0;
      var Skip = 0;
      if (Self.FCompiler.GetShowDebug() || Self.FCompiler.GetShowTriedUsedFiles()) Self.FCompiler.FLog.LogMsgIgnoreFilter(107,[pas.Pas2jsLogger.QuoteStr(aFileName,'"')]);
      IfLvl = 0;
      SkipLvl = 0;
      Skip = TSkip.skipNone;
      aFile = null;
      try {
        OldCfgFilename = Self.FCurrentCfgFilename;
        Self.FCurrentCfgFilename = aFileName;
        OldCfgLineNumber = Self.FCurrentCfgLineNumber;
        aFile = Self.GetReader(aFileName);
        while (!aFile.IsEOF()) {
          Line = aFile.ReadLine();
          Self.FCurrentCfgLineNumber = aFile.FLineNumber;
          if (Self.FCompiler.GetShowDebug()) Self.FCompiler.FLog.LogMsgIgnoreFilter(109,[pas.Pas2jsLogger.QuoteStr(Line,'"')]);
          if (Line === "") continue;
          l = Line.length;
          p = 1;
          while ((p <= l) && (Line.charCodeAt(p - 1) in rtl.createSet(32,9))) p += 1;
          if (p > l) continue;
          if ((p <= l) && (Line.charAt(p - 1) === "#")) {
            p += 1;
            if ((p > l) || (Line.charCodeAt(p - 1) in rtl.createSet(0,9,32,45))) continue;
            Directive = pas.SysUtils.LowerCase(GetWord());
            var $tmp1 = Directive;
            if (($tmp1 === "ifdef") || ($tmp1 === "ifndef")) {
              IfLvl += 1;
              if (Skip === TSkip.skipNone) {
                aName = GetWord();
                if (Self.FCompiler.IsDefined(aName) === (Directive === "ifdef")) {
                  if (Self.FCompiler.GetShowDebug()) DebugCfgDirective("true -> execute");
                } else {
                  if (Self.FCompiler.GetShowDebug()) DebugCfgDirective("false -> skip");
                  SkipLvl = IfLvl;
                  Skip = TSkip.skipIf;
                };
              };
            } else if ($tmp1 === "if") {
              IfLvl += 1;
              if (Skip === TSkip.skipNone) {
                Expr = pas.System.Copy(Line,p,Line.length);
                if (Self.FConditionEval.Eval(Expr)) {
                  if (Self.FCompiler.GetShowDebug()) DebugCfgDirective("true -> execute");
                } else {
                  if (Self.FCompiler.GetShowDebug()) DebugCfgDirective("false -> skip");
                  SkipLvl = IfLvl;
                  Skip = TSkip.skipIf;
                };
              };
            } else if ($tmp1 === "else") {
              if (IfLvl === 0) Self.CfgSyntaxError(('"' + Directive) + '" without #ifdef');
              if ((Skip === TSkip.skipElse) && (IfLvl === SkipLvl)) Self.CfgSyntaxError('"there was already an #else');
              if ((Skip === TSkip.skipIf) && (IfLvl === SkipLvl)) {
                if (Self.FCompiler.GetShowDebug()) DebugCfgDirective("execute");
                SkipLvl = 0;
                Skip = TSkip.skipNone;
              } else if (Skip === TSkip.skipNone) {
                if (Self.FCompiler.GetShowDebug()) DebugCfgDirective("skip");
                Skip = TSkip.skipElse;
                SkipLvl = IfLvl;
              };
            } else if ($tmp1 === "elseif") {
              if (IfLvl === 0) Self.CfgSyntaxError(('"' + Directive) + '" without #ifdef');
              if ((Skip === TSkip.skipIf) && (IfLvl === SkipLvl)) {
                Expr = pas.System.Copy(Line,p,Line.length);
                if (Self.FConditionEval.Eval(Expr)) {
                  if (Self.FCompiler.GetShowDebug()) DebugCfgDirective("true -> execute");
                  SkipLvl = 0;
                  Skip = TSkip.skipNone;
                } else {
                  if (Self.FCompiler.GetShowDebug()) DebugCfgDirective("false -> skip");
                };
              } else if (Skip === TSkip.skipNone) {
                if (Self.FCompiler.GetShowDebug()) DebugCfgDirective("no test -> skip");
                Skip = TSkip.skipIf;
              };
            } else if ($tmp1 === "endif") {
              if (IfLvl === 0) Self.CfgSyntaxError(('"' + Directive) + '" without #ifdef');
              IfLvl -= 1;
              if (IfLvl < SkipLvl) {
                if (Self.FCompiler.GetShowDebug()) DebugCfgDirective("end block");
                SkipLvl = 0;
                Skip = TSkip.skipNone;
              };
            } else if ($tmp1 === "error") {
              Self.FCompiler.ParamFatal("user defined: " + pas.System.Copy(Line,p,Line.length))}
             else {
              if (Skip === TSkip.skipNone) {
                Self.CfgSyntaxError(('unknown directive "#' + Directive) + '"')}
               else DebugCfgDirective("skipping unknown directive");
            };
          } else if (Skip === TSkip.skipNone) {
            Line = pas.System.Copy(Line,p,Line.length);
            Self.FCompiler.ReadParam(Line,false,false);
          };
        };
      } finally {
        Self.FCurrentCfgFilename = OldCfgFilename;
        Self.FCurrentCfgLineNumber = OldCfgLineNumber;
        aFile = rtl.freeLoc(aFile);
      };
      if (Self.FCompiler.GetShowDebug() || Self.FCompiler.GetShowTriedUsedFiles()) Self.FCompiler.FLog.LogMsgIgnoreFilter(108,[pas.Pas2jsLogger.QuoteStr(aFileName,'"')]);
    };
  });
  rtl.createClass($mod,"TPas2JSWPOptimizer",pas.PasUseAnalyzer.TPasAnalyzer,function () {
  });
  rtl.createClass($mod,"TPas2jsCompiler",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FMainJSFileResolved = "";
      this.FIsMainJSFileResolved = false;
      this.FCompilerExe = "";
      this.FDefines = null;
      this.FFS = null;
      this.FOwnsFS = false;
      this.FFiles = null;
      this.FReadingModules = null;
      this.FHasShownEncoding = false;
      this.FHasShownLogo = false;
      this.FLog = null;
      this.FMainFile = null;
      this.FMode = 0;
      this.FOptions = {};
      this.FParamMacros = null;
      this.FSrcMapSourceRoot = "";
      this.FTargetPlatform = 0;
      this.FTargetProcessor = 0;
      this.FUnits = null;
      this.FWPOAnalyzer = null;
      this.FInterfaceType = 0;
      this.FRTLVersionCheck = 0;
      this.FPrecompileGUID = new pas.System.TGuid();
      this.FInsertFilenames = null;
      this.FNamespaces = null;
      this.FNamespacesFromCmdLine = 0;
      this.FAllJSIntoMainJS = false;
      this.FConfigSupport = null;
      this.FMainJSFile = "";
      this.FMainSrcFile = "";
      this.FSrcMapBaseDir = "";
      this.FPostProcessorSupport = null;
    };
    this.$final = function () {
      this.FDefines = undefined;
      this.FFS = undefined;
      this.FFiles = undefined;
      this.FReadingModules = undefined;
      this.FLog = undefined;
      this.FMainFile = undefined;
      this.FOptions = undefined;
      this.FParamMacros = undefined;
      this.FUnits = undefined;
      this.FWPOAnalyzer = undefined;
      this.FPrecompileGUID = undefined;
      this.FInsertFilenames = undefined;
      this.FNamespaces = undefined;
      this.FConfigSupport = undefined;
      this.FPostProcessorSupport = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.AddInsertJSFilename = function (aFilename) {
      if (this.IndexOfInsertJSFilename(aFilename) < 0) this.FInsertFilenames.Add(aFilename);
    };
    this.AddNamespaces = function (Paths, FromCmdLine) {
      var Self = this;
      var Added = 0;
      function Add(aPath) {
        var Result = false;
        var Remove = false;
        var i = 0;
        Remove = false;
        if (aPath.charAt(aPath.length - 1) === "-") {
          pas.System.Delete({get: function () {
              return aPath;
            }, set: function (v) {
              aPath = v;
            }},aPath.length,1);
          Remove = true;
        };
        if (!pas.PasResolver.IsValidIdent(aPath,true,true)) return false;
        i = Self.FNamespaces.GetCount() - 1;
        while ((i >= 0) && (pas.SysUtils.CompareText(aPath,Self.FNamespaces.Get(i)) !== 0)) i -= 1;
        if (Remove) {
          if (i >= 0) {
            Self.FNamespaces.Delete(i);
            if (Self.FNamespacesFromCmdLine > i) Self.FNamespacesFromCmdLine -= 1;
          };
          return true;
        };
        if (FromCmdLine) {
          if (i >= 0) {
            if (i <= Self.FNamespacesFromCmdLine) return true;
            Self.FNamespaces.Delete(i);
          };
          Self.FNamespaces.Insert(Self.FNamespacesFromCmdLine,aPath);
          Self.FNamespacesFromCmdLine += 1;
        } else {
          if (i >= 0) {
            if (i <= (Self.FNamespacesFromCmdLine + Added)) return true;
            Self.FNamespaces.Delete(i);
          };
          Self.FNamespaces.Insert(Self.FNamespacesFromCmdLine + Added,aPath);
          Added += 1;
        };
        Result = true;
        return Result;
      };
      var aPath = "";
      var p = 0;
      p = 1;
      Added = 0;
      while (p <= Paths.length) {
        aPath = pas.pas2jsutils.GetNextDelimitedItem(Paths,";",{get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }});
        if (aPath === "") continue;
        if (!Add(aPath)) return;
      };
    };
    this.GetDefaultNamespace = function () {
      var Result = "";
      var C = null;
      Result = "";
      if (this.FMainFile === null) return Result;
      if (this.FMainFile.FPasModule === null) return Result;
      C = this.FMainFile.FPasModule.$class.ClassType();
      if (((C === pas.PasTree.TPasProgram) || (C === pas.PasTree.TPasLibrary)) || (C === pas.PasTree.TPasPackage)) Result = this.FMainFile.FPasResolver.FDefaultNameSpace;
      return Result;
    };
    this.GetFileCount = function () {
      var Result = 0;
      Result = this.FFiles.Count();
      return Result;
    };
    this.GetResolvedMainJSFile = function () {
      var Result = "";
      if (!this.FIsMainJSFileResolved) {
        this.FMainJSFileResolved = this.ResolvedMainJSFile();
        this.FIsMainJSFileResolved = true;
      };
      Result = this.FMainJSFileResolved;
      return Result;
    };
    this.GetShowDebug = function () {
      var Result = false;
      Result = $mod.TP2jsCompilerOption.coShowDebug in this.FOptions;
      return Result;
    };
    this.GetShowFullPaths = function () {
      var Result = false;
      Result = this.FFS.OptionIsSet(0);
      return Result;
    };
    this.GetShowLogo = function () {
      var Result = false;
      Result = $mod.TP2jsCompilerOption.coShowLogo in this.FOptions;
      return Result;
    };
    this.GetShowTriedUsedFiles = function () {
      var Result = false;
      Result = $mod.TP2jsCompilerOption.coShowTriedUsedFiles in this.FOptions;
      return Result;
    };
    this.GetShowUsedTools = function () {
      var Result = false;
      Result = $mod.TP2jsCompilerOption.coShowUsedTools in this.FOptions;
      return Result;
    };
    this.GetSkipDefaultConfig = function () {
      var Result = false;
      Result = $mod.TP2jsCompilerOption.coSkipDefaultConfigs in this.FOptions;
      return Result;
    };
    this.GetSrcMapEnable = function () {
      var Result = false;
      Result = $mod.TP2jsCompilerOption.coSourceMapCreate in this.FOptions;
      return Result;
    };
    this.GetSrcMapInclude = function () {
      var Result = false;
      Result = $mod.TP2jsCompilerOption.coSourceMapInclude in this.FOptions;
      return Result;
    };
    this.GetSrcMapXSSIHeader = function () {
      var Result = false;
      Result = $mod.TP2jsCompilerOption.coSourceMapXSSIHeader in this.FOptions;
      return Result;
    };
    this.GetWriteDebugLog = function () {
      var Result = false;
      Result = $mod.TP2jsCompilerOption.coWriteDebugLog in this.FOptions;
      return Result;
    };
    this.GetWriteMsgToStdErr = function () {
      var Result = false;
      Result = $mod.TP2jsCompilerOption.coWriteMsgToStdErr in this.FOptions;
      return Result;
    };
    this.HandleOptionOptimization = function (C, aValue) {
      var Result = false;
      var Enable = false;
      Result = true;
      var $tmp1 = C;
      if ($tmp1 === "-") {
        this.SetOptions(rtl.unionSet(rtl.diffSet(this.FOptions,$mod.coO1Enable),$mod.coO1Disable))}
       else if ($tmp1 === "1") {
        this.SetOptions(rtl.diffSet(rtl.unionSet(this.FOptions,$mod.coO1Enable),$mod.coO1Disable))}
       else if ($tmp1 === "o") {
        if (aValue === "") this.ParamFatal("missing -Oo option");
        Enable = true;
        C = aValue.charAt(aValue.length - 1);
        if (C.charCodeAt() in rtl.createSet(43,45)) {
          Enable = C === "+";
          pas.System.Delete({get: function () {
              return aValue;
            }, set: function (v) {
              aValue = v;
            }},aValue.length,1);
        };
        var $tmp2 = pas.SysUtils.LowerCase(aValue);
        if ($tmp2 === "enumnumbers") {
          this.SetOption($mod.TP2jsCompilerOption.coEnumValuesAsNumbers,Enable)}
         else if ($tmp2 === "emovenotusedprivates") {
          this.SetOption($mod.TP2jsCompilerOption.coKeepNotUsedPrivates,!Enable)}
         else if ($tmp2 === "removenotuseddeclarations") {
          this.SetOption($mod.TP2jsCompilerOption.coKeepNotUsedDeclarationsWPO,!Enable)}
         else {
          Result = false;
        };
      } else {
        Result = false;
      };
      return Result;
    };
    this.IndexOfInsertJSFilename = function (aFilename) {
      var Result = 0;
      var i = 0;
      for (var $l1 = 0, $end2 = this.FInsertFilenames.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.FFS.SameFileName(aFilename,this.FInsertFilenames.Get(i))) return i;
      };
      Result = -1;
      return Result;
    };
    this.InsertCustomJSFiles = function (aWriter) {
      var i = 0;
      var Filename = "";
      var FileResolver = null;
      var aFile = null;
      if (this.FInsertFilenames.GetCount() === 0) return;
      FileResolver = this.FFS.CreateResolver();
      try {
        for (var $l1 = 0, $end2 = this.FInsertFilenames.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Filename = this.FFS.FindCustomJSFileName(this.FInsertFilenames.Get(i));
          if (Filename === "") {
            this.FLog.LogMsg(206,[this.FInsertFilenames.Get(i)],"",0,0,true);
            throw pas.PScanner.EFileNotFoundError.$create("Create$1",[""]);
          };
          aFile = this.FFS.LoadFile(Filename,false);
          if (aFile.FSource === "") continue;
          aWriter.WriteFile(aFile.FSource,Filename);
        };
      } finally {
        FileResolver = rtl.freeLoc(FileResolver);
      };
    };
    this.LoadUsedUnit = function (Info, Context) {
      var Self = this;
      var Result = null;
      function FindCycle(aFile, SearchFor, Cycle) {
        var Result = false;
        var i = 0;
        var aParent = null;
        for (var $l1 = 0, $end2 = aFile.GetUsedByCount($mod.TUsedBySection.ubMainSection) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          aParent = aFile.GetUsedBy($mod.TUsedBySection.ubMainSection,i);
          if (aParent === SearchFor) {
            Cycle.set(pas.Classes.TFPList.$create("Create"));
            Cycle.get().Add(aParent);
            Cycle.get().Add(aFile);
            return true;
          };
          if (FindCycle(aParent,SearchFor,Cycle)) {
            Cycle.get().Add(aFile);
            return true;
          };
        };
        Result = false;
        return Result;
      };
      var aFile = null;
      function CheckCycle() {
        var i = 0;
        var Cycle = null;
        var CyclePath = "";
        if (Context.FPasModule.ImplementationSection === null) {
          aFile.FUsedBy[$mod.TUsedBySection.ubMainSection].Add(Context);
          Cycle = null;
          try {
            if (FindCycle(aFile,aFile,{get: function () {
                return Cycle;
              }, set: function (v) {
                Cycle = v;
              }})) {
              CyclePath = "";
              for (var $l1 = 0, $end2 = Cycle.FCount - 1; $l1 <= $end2; $l1++) {
                i = $l1;
                if (i > 0) CyclePath += ",";
                CyclePath += rtl.getObject(Cycle.Get(i)).GetModuleName();
              };
              Context.FPasResolver.RaiseMsg(20180223141537,120,$mod.sUnitCycle,[CyclePath],Info.NameExpr);
            };
          } finally {
            Cycle = rtl.freeLoc(Cycle);
          };
        } else {
          aFile.FUsedBy[$mod.TUsedBySection.ubImplSection].Add(Context);
        };
      };
      var UseJSFilename = "";
      var OtherFile = null;
      Result = null;
      aFile = Self.FindUnitWithFile(Info.UseFilename);
      if (aFile !== null) {
        if ((aFile.FPasUnitName !== "") && (pas.SysUtils.CompareText(aFile.FPasUnitName,Info.UseUnitname) !== 0)) {
          Self.FLog.LogPlain$1(['Debug: TPas2jsPasTree.FindUnit unitname MISMATCH aFile.PasUnitname="',aFile.FPasUnitName,'"'," Self=",Context.FFileResolver.FFS.FormatPath(Context.FPasFileName)," Uses=",Info.UseUnitname," IsForeign=",Context.FIsForeign]);
          Self.RaiseInternalError(20170504161412,"TPas2jsPasTree.FindUnit unit name mismatch");
        };
        CheckCycle();
      } else {
        if (Info.InFilename !== "") {
          aFile = Self.FindLoadedUnit(Info.UseUnitname);
          if (aFile !== null) {
            Context.FPasResolver.RaiseMsg(20180223141323,205,pas.pas2jsfs.sDuplicateFileFound,[Info.UseFilename,aFile.FPasFileName],Info.InFileExpr);
          };
        };
        UseJSFilename = "";
        if (!Context.FIsForeign) UseJSFilename = Self.FindUnitJSFileName(Info.UseFilename);
        Self.LoadPasFile(Info.UseFilename,Info.UseUnitname,{get: function () {
            return aFile;
          }, set: function (v) {
            aFile = v;
          }},Info.IsPCU);
        if (aFile.FPasUnitName !== Info.UseUnitname) Self.RaiseInternalError(20170922143329,(("aFile.PasUnitName=" + aFile.FPasUnitName) + " UseUnitname=") + Info.UseUnitname);
        if (Info.IsPCU) {
          if (!Self.FFS.SameFileName(aFile.FPCUFilename,Info.UseFilename)) Self.RaiseInternalError(20180312122331,(("aFile.PCUFilename=" + aFile.FPCUFilename) + " UseFilename=") + Info.UseFilename);
        } else {
          if (!Self.FFS.SameFileName(aFile.FPasFileName,Info.UseFilename)) Self.RaiseInternalError(20170922143330,(("aFile.PasFilename=" + aFile.FPasFileName) + " UseFilename=") + Info.UseFilename);
        };
        if (aFile === Context) {
          Context.FParser.RaiseParserError(120,[Info.UseUnitname]);
        };
        Self.AddUsedUnit(aFile);
        OtherFile = Self.FindLoadedUnit(Info.UseUnitname);
        if (aFile !== OtherFile) {
          if (OtherFile === null) {
            Self.RaiseInternalError(20170922143405,"UseUnitname=" + Info.UseUnitname)}
           else Self.RaiseInternalError(20170922143511,(("UseUnitname=" + Info.UseUnitname) + " Found=") + OtherFile.FPasUnitName);
        };
        OtherFile = Self.FindUnitWithFile(Info.UseFilename);
        if (aFile !== OtherFile) {
          if (OtherFile === null) {
            Self.RaiseInternalError(20180224094625,"UsePasFilename=" + Info.UseFilename)}
           else Self.RaiseInternalError(20180224094627,(("UsePasFilename=" + Info.UseFilename) + " Found=") + OtherFile.FPasFileName);
        };
        CheckCycle();
        aFile.FJSFilename = UseJSFilename;
        aFile.FIsForeign = Info.UseIsForeign;
        aFile.ReadUnit();
      };
      Result = aFile;
      return Result;
    };
    this.OnMacroCfgDir = function (Sender, Params, Lvl) {
      var Result = false;
      if (Lvl === 0) ;
      Params.set(pas.SysUtils.ExtractFilePath(this.FConfigSupport.FCurrentCfgFilename));
      Result = true;
      return Result;
    };
    this.RemoveInsertJSFilename = function (aFilename) {
      var i = 0;
      i = this.IndexOfInsertJSFilename(aFilename);
      if (i >= 0) this.FInsertFilenames.Delete(i);
    };
    this.ResolvedMainJSFile = function () {
      var Result = "";
      var OP = "";
      var UP = "";
      OP = this.FFS.FDefaultOutputPath;
      UP = this.FFS.FUnitOutputPath;
      if (this.FMainJSFile === ".") {
        Result = ""}
       else {
        Result = this.FMainJSFile;
        if (Result !== "") {
          if (pas.SysUtils.ExtractFilePath(Result) === "") {
            if (OP !== "") {
              Result = OP + Result}
             else if (UP !== "") Result = UP + Result;
          };
        } else {
          Result = pas.SysUtils.ChangeFileExt(this.FMainSrcFile,".js");
          if (OP !== "") {
            Result = OP + pas.SysUtils.ExtractFileName(Result);
          } else if (UP !== "") {
            Result = UP + pas.SysUtils.ExtractFileName(Result);
          };
        };
      };
      return Result;
    };
    this.SetCompilerExe = function (AValue) {
      if (AValue !== "") AValue = this.ExpandFileName(AValue);
      if (this.FCompilerExe === AValue) return;
      this.FCompilerExe = AValue;
    };
    this.SetFS = function (AValue) {
      if (this.FFS === AValue) return;
      this.FOwnsFS = false;
      this.FFS = AValue;
    };
    this.SetMode = function (AValue) {
      if (this.FMode === AValue) return;
      this.FMode = AValue;
      var $tmp1 = this.FMode;
      if ($tmp1 === $mod.TP2jsMode.p2jmObjFPC) {
        this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coAllowCAssignments)))}
       else if ($tmp1 === $mod.TP2jsMode.p2jmDelphi) this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coAllowCAssignments)));
    };
    this.SetOptions = function (AValue) {
      if (rtl.eqSet(this.FOptions,AValue)) return;
      this.FOptions = rtl.refSet(AValue);
      this.FLog.FShowMsgNumbers = $mod.TP2jsCompilerOption.coShowMessageNumbers in this.FOptions;
      this.FLog.FShowMsgTypes = rtl.refSet(this.GetShownMsgTypes());
      this.FFS.SetOptionFromIndex(1,$mod.TP2jsCompilerOption.coShowTriedUsedFiles in this.FOptions);
    };
    this.SetShowDebug = function (AValue) {
      if (AValue) {
        this.FOptions = rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowNotes,$mod.TP2jsCompilerOption.coShowInfos,$mod.TP2jsCompilerOption.coShowDebug))}
       else this.FOptions = rtl.excludeSet(this.FOptions,$mod.TP2jsCompilerOption.coShowNotes);
    };
    this.SetShowFullPaths = function (AValue) {
      this.FFS.SetOptionFromIndex(0,AValue);
    };
    this.SetShowLogo = function (AValue) {
      this.SetOption($mod.TP2jsCompilerOption.coShowLogo,AValue);
    };
    this.SetShowTriedUsedFiles = function (AValue) {
      this.FFS.SetOptionFromIndex(1,AValue);
      this.SetOption($mod.TP2jsCompilerOption.coShowTriedUsedFiles,AValue);
    };
    this.SetShowUsedTools = function (AValue) {
      this.SetOption($mod.TP2jsCompilerOption.coShowUsedTools,AValue);
    };
    this.SetSkipDefaultConfig = function (AValue) {
      this.SetOption($mod.TP2jsCompilerOption.coSkipDefaultConfigs,AValue);
    };
    this.SetSrcMapBaseDir = function (AValue) {
      var NewValue = "";
      NewValue = this.FFS.ExpandDirectory(AValue);
      if (this.FSrcMapBaseDir === NewValue) return;
      this.FSrcMapBaseDir = NewValue;
    };
    this.SetSrcMapEnable = function (AValue) {
      this.SetOption($mod.TP2jsCompilerOption.coSourceMapCreate,AValue);
    };
    this.SetSrcMapInclude = function (AValue) {
      this.SetOption($mod.TP2jsCompilerOption.coSourceMapInclude,AValue);
    };
    this.SetSrcMapXSSIHeader = function (AValue) {
      this.SetOption($mod.TP2jsCompilerOption.coSourceMapXSSIHeader,AValue);
    };
    this.SetTargetPlatform = function (AValue) {
      if (this.FTargetPlatform === AValue) return;
      this.RemoveDefine(pas.FPPas2Js.PasToJsPlatformNames[this.FTargetPlatform]);
      this.FTargetPlatform = AValue;
      if (this.FTargetPlatform === pas.FPPas2Js.TPasToJsPlatform.PlatformNodeJS) this.SetAllJSIntoMainJS(true);
      this.AddDefinesForTargetPlatform();
    };
    this.SetTargetProcessor = function (AValue) {
      if (this.FTargetProcessor === AValue) return;
      this.RemoveDefine(pas.FPPas2Js.PasToJsProcessorNames[this.FTargetProcessor]);
      this.FTargetProcessor = AValue;
      this.AddDefinesForTargetProcessor();
    };
    this.SetWriteDebugLog = function (AValue) {
      this.SetOption($mod.TP2jsCompilerOption.coWriteDebugLog,AValue);
    };
    this.SetWriteMsgToStdErr = function (AValue) {
      this.SetOption($mod.TP2jsCompilerOption.coWriteMsgToStdErr,AValue);
    };
    this.AddDefinesForTargetPlatform = function () {
      this.AddDefine(pas.FPPas2Js.PasToJsPlatformNames[this.FTargetPlatform]);
      this.AddDefine$1("Pas2JSTargetOS",pas.FPPas2Js.PasToJsPlatformNames[this.FTargetPlatform]);
    };
    this.AddDefinesForTargetProcessor = function () {
      this.AddDefine(pas.FPPas2Js.PasToJsProcessorNames[this.FTargetProcessor]);
      this.AddDefine$1("Pas2JSTargetCPU",pas.FPPas2Js.PasToJsProcessorNames[this.FTargetProcessor]);
      var $tmp1 = this.FTargetProcessor;
      if ($tmp1 === pas.FPPas2Js.TPasToJsProcessor.ProcessorECMAScript5) {
        this.AddDefine$1("ECMAScript","5")}
       else if ($tmp1 === pas.FPPas2Js.TPasToJsProcessor.ProcessorECMAScript6) this.AddDefine$1("ECMAScript","6");
    };
    this.AddReadingModule = function (aFile) {
      if (this.FReadingModules.IndexOf(aFile) >= 0) return;
      this.FReadingModules.Add(aFile);
    };
    this.RemoveReadingModule = function (aFile) {
      this.FReadingModules.Remove(aFile);
    };
    this.LoadConfig = function (CfgFilename) {
      this.FConfigSupport.LoadConfig(CfgFilename);
    };
    this.ReadParam = function (Param, Quick, FromCmdLine) {
      var Self = this;
      function UnknownParam() {
        Self.ParamFatal(('unknown parameter "' + Param) + '". Use -h for help.');
      };
      var EnabledFlags = "";
      var DisabledFlags = "";
      var Identifier = "";
      var aValue = "";
      var p = 0;
      var l = 0;
      var i = 0;
      var c = "";
      var aProc = 0;
      var aPlatform = 0;
      if (Self.GetShowDebug()) if (Quick) {
        Self.FLog.LogMsgIgnoreFilter(114,[pas.Pas2jsLogger.QuoteStr(Param,'"')])}
       else Self.FLog.LogMsgIgnoreFilter(113,[pas.Pas2jsLogger.QuoteStr(Param,'"')]);
      if (Param === "") return;
      Self.FParamMacros.Substitute({get: function () {
          return Param;
        }, set: function (v) {
          Param = v;
        }},Self,0);
      if (Param === "") return;
      if (Quick && (((Param === "-h") || (Param === "-?")) || (Param === "--help"))) {
        Self.WriteHelp();
        Self.Terminate(0);
      };
      l = Param.length;
      p = 1;
      var $tmp1 = Param.charAt(p - 1);
      if ($tmp1 === "-") {
        p += 1;
        if (p > l) UnknownParam();
        aValue = pas.System.Copy(Param,p + 1,Param.length);
        var $tmp2 = Param.charAt(p - 1);
        if ($tmp2 === "i") {
          Self.HandleOptionInfo(aValue);
          Self.Terminate(0);
        } else if ((($tmp2 === "B") || ($tmp2 === "l")) || ($tmp2 === "n")) {
          Self.ReadSingleLetterOptions(Param,p,"Bln",{get: function () {
              return EnabledFlags;
            }, set: function (v) {
              EnabledFlags = v;
            }},{get: function () {
              return DisabledFlags;
            }, set: function (v) {
              DisabledFlags = v;
            }});
          for (var $l3 = 1, $end4 = EnabledFlags.length; $l3 <= $end4; $l3++) {
            i = $l3;
            var $tmp5 = EnabledFlags.charAt(i - 1);
            if ($tmp5 === "B") {
              Self.SetOptions(rtl.unionSet(Self.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coBuildAll)))}
             else if ($tmp5 === "l") {
              Self.SetShowLogo(true)}
             else if ($tmp5 === "n") Self.SetSkipDefaultConfig(true);
          };
          for (var $l6 = 1, $end7 = DisabledFlags.length; $l6 <= $end7; $l6++) {
            i = $l6;
            var $tmp8 = DisabledFlags.charAt(i - 1);
            if ($tmp8 === "B") {
              Self.SetOptions(rtl.diffSet(Self.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coBuildAll)))}
             else if ($tmp8 === "l") {
              Self.SetShowLogo(false)}
             else if ($tmp8 === "n") Self.SetSkipDefaultConfig(false);
          };
        } else if ($tmp2 === "C") {
          Self.ReadCodeGenerationFlags(aValue,1)}
         else if ($tmp2 === "d") {
          if (!Quick) {
            Identifier = aValue;
            i = pas.System.Pos(":=",Identifier);
            if (i > 0) {
              aValue = pas.System.Copy(Identifier,i + 2,Identifier.length);
              Identifier = pas.SysUtils.LeftStr(Identifier,i - 1);
              if (!pas.PasResolver.IsValidIdent(Identifier,false,false)) Self.ParamFatal(('invalid define name (-d): "' + Param) + '"');
              Self.AddDefine$1(Identifier,aValue);
            } else {
              if (!pas.PasResolver.IsValidIdent(Identifier,false,false)) Self.ParamFatal(('invalid define (-d): "' + Param) + '"');
              Self.AddDefine(Identifier);
            };
          }}
         else if ($tmp2 === "F") {
          if (aValue === "") UnknownParam();
          c = aValue.charAt(0);
          pas.System.Delete({get: function () {
              return aValue;
            }, set: function (v) {
              aValue = v;
            }},1,1);
          if (!Self.HandleOptionPaths(c,aValue,FromCmdLine)) UnknownParam();
        } else if ($tmp2 === "I") {
          if (!Quick) {
            if (!Self.HandleOptionPaths("i",aValue,FromCmdLine)) UnknownParam();
          }}
         else if ($tmp2 === "J") {
          if (aValue === "") UnknownParam();
          c = aValue.charAt(0);
          pas.System.Delete({get: function () {
              return aValue;
            }, set: function (v) {
              aValue = v;
            }},1,1);
          if (!Self.HandleOptionJS(c,aValue,Quick,FromCmdLine)) UnknownParam();
        } else if ($tmp2 === "M") {
          var $tmp9 = pas.SysUtils.LowerCase(aValue);
          if ($tmp9 === "delphi") {
            Self.SetMode($mod.TP2jsMode.p2jmDelphi)}
           else if ($tmp9 === "objfpc") {
            Self.SetMode($mod.TP2jsMode.p2jmObjFPC)}
           else {
            Self.ParamFatal(('invalid syntax mode  (-M) "' + aValue) + '"');
          };
        } else if ($tmp2 === "N") {
          if (aValue === "") UnknownParam();
          var $tmp10 = aValue.charAt(0);
          if ($tmp10 === "S") {
            Self.FLog.Log(pas.PScanner.TMessageType.mtWarning,"obsolete option -NS, use -FN instead",0,"",0,0,true);
            pas.System.Delete({get: function () {
                return aValue;
              }, set: function (v) {
                aValue = v;
              }},1,1);
            Self.HandleOptionPaths("N",aValue,FromCmdLine);
          } else {
            UnknownParam();
          };
        } else if ($tmp2 === "o") {
          if (aValue === "") {
            Self.ParamFatal("invalid empty output file (-o)")}
           else if (aValue === "..") {
            Self.ParamFatal(('invalid output file (-o) "' + aValue) + '"')}
           else if (aValue === ".") {}
          else aValue = Self.ExpandFileName(aValue);
          Self.FMainJSFile = aValue;
        } else if ($tmp2 === "O") {
          if (aValue === "") UnknownParam();
          c = aValue.charAt(0);
          pas.System.Delete({get: function () {
              return aValue;
            }, set: function (v) {
              aValue = v;
            }},1,1);
          if (!Self.HandleOptionOptimization(c,aValue)) UnknownParam();
        } else if ($tmp2 === "P") {
          for (aProc = 0; aProc <= 1; aProc++) if (pas.SysUtils.SameText(aValue,pas.FPPas2Js.PasToJsProcessorNames[aProc])) {
            Self.SetTargetProcessor(aProc);
            aValue = "";
            break;
          };
          if (aValue !== "") Self.ParamFatal(('invalid target processor (-P) "' + aValue) + '"');
        } else if ($tmp2 === "S") {
          p += 1;
          if ((p <= l) && (Param.charAt(p - 1) === "I")) {
            Identifier = pas.System.Copy(Param,p,Param.length);
            if (pas.SysUtils.SameText(Identifier,"com")) {
              Self.FInterfaceType = pas.PasTree.TPasClassInterfaceType.citCom}
             else if (pas.SysUtils.SameText(Identifier,"corba")) {
              Self.FInterfaceType = pas.PasTree.TPasClassInterfaceType.citCorba}
             else Self.ParamFatal(('invalid interface style (-SI) "' + Identifier) + '"');
          } else Self.ReadSyntaxFlags(Param,p);
        } else if ($tmp2 === "T") {
          p += 1;
          Identifier = pas.System.Copy(Param,p,Param.length);
          for (aPlatform = 0; aPlatform <= 1; aPlatform++) if (pas.SysUtils.SameText(Identifier,pas.FPPas2Js.PasToJsPlatformNames[aPlatform])) {
            Self.SetTargetPlatform(aPlatform);
            Identifier = "";
            break;
          };
          if (Identifier !== "") Self.ParamFatal(('invalid target platform (-T) "' + Identifier) + '"');
        } else if ($tmp2 === "u") {
          if (!Quick) {
            if (!pas.PasResolver.IsValidIdent(aValue,false,false)) Self.ParamFatal(('invalid undefine (-u): "' + aValue) + '"');
            Self.RemoveDefine(aValue);
          }}
         else if ($tmp2 === "v") {
          p += 1;
          Self.ReadVerbosityFlags(Param,p);
        } else {
          UnknownParam();
        };
      } else if ($tmp1 === "@") {
        if (!Quick) Self.HandleOptionConfigFile(i,pas.System.Copy(Param,2,Param.length))}
       else {
        if (!Quick) {
          if (!FromCmdLine) Self.FConfigSupport.CfgSyntaxError("invalid parameter");
          if (Self.FMainSrcFile !== "") Self.ParamFatal(((('Only one Pascal file is supported, but got "' + Self.FMainSrcFile) + '" and "') + Param) + '".');
          Self.FMainSrcFile = Self.ExpandFileName(Param);
        };
      };
    };
    this.ReadSingleLetterOptions = function (Param, p, Allowed, Enabled, Disabled) {
      var Letter = "";
      var i = 0;
      var l = 0;
      l = Param.length;
      if (p > l) this.ParamFatal(('Invalid option "' + Param) + '"');
      Enabled.set("");
      Disabled.set("");
      while (p <= l) {
        Letter = Param.charAt(p - 1);
        if (Letter === "-") this.ParamFatal(('Invalid option "' + Param) + '"');
        if (pas.System.Pos(Letter,Allowed) < 1) this.ParamFatal(('unknown option "' + Param) + '". Use -h for help.');
        p += 1;
        if ((p <= l) && (Param.charAt(p - 1) === "-")) {
          if (pas.System.Pos(Letter,Disabled.get()) < 1) Disabled.set(Letter);
          i = pas.System.Pos(Letter,Enabled.get());
          if (i > 0) pas.System.Delete(Enabled,i,1);
          p += 1;
        } else {
          if (pas.System.Pos(Letter,Enabled.get()) < 1) Enabled.set(Letter);
          i = pas.System.Pos(Letter,Disabled.get());
          if (i > 0) pas.System.Delete(Disabled,i,1);
          if ((p <= l) && (Param.charAt(p - 1) === "+")) p += 1;
        };
      };
    };
    this.ReadCodeGenerationFlags = function (Param, p) {
      var Enabled = "";
      var Disabled = "";
      var i = 0;
      this.ReadSingleLetterOptions(Param,p,"orR",{get: function () {
          return Enabled;
        }, set: function (v) {
          Enabled = v;
        }},{get: function () {
          return Disabled;
        }, set: function (v) {
          Disabled = v;
        }});
      for (var $l1 = 1, $end2 = Enabled.length; $l1 <= $end2; $l1++) {
        i = $l1;
        var $tmp3 = Enabled.charAt(i - 1);
        if ($tmp3 === "o") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coOverflowChecks)))}
         else if ($tmp3 === "r") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coRangeChecks)))}
         else if ($tmp3 === "R") this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coObjectChecks)));
      };
      for (var $l4 = 1, $end5 = Disabled.length; $l4 <= $end5; $l4++) {
        i = $l4;
        var $tmp6 = Disabled.charAt(i - 1);
        if ($tmp6 === "o") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coOverflowChecks)))}
         else if ($tmp6 === "r") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coRangeChecks)))}
         else if ($tmp6 === "R") this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coObjectChecks)));
      };
    };
    this.ReadSyntaxFlags = function (Param, p) {
      var Enabled = "";
      var Disabled = "";
      var i = 0;
      this.ReadSingleLetterOptions(Param,p,"2acdm",{get: function () {
          return Enabled;
        }, set: function (v) {
          Enabled = v;
        }},{get: function () {
          return Disabled;
        }, set: function (v) {
          Disabled = v;
        }});
      for (var $l1 = 1, $end2 = Enabled.length; $l1 <= $end2; $l1++) {
        i = $l1;
        var $tmp3 = Enabled.charAt(i - 1);
        if ($tmp3 === "2") {
          this.SetMode($mod.TP2jsMode.p2jmObjFPC)}
         else if ($tmp3 === "a") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coAssertions)))}
         else if ($tmp3 === "c") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coAllowCAssignments)))}
         else if ($tmp3 === "d") {
          this.SetMode($mod.TP2jsMode.p2jmDelphi)}
         else if ($tmp3 === "m") this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coAllowMacros)));
      };
      for (var $l4 = 1, $end5 = Disabled.length; $l4 <= $end5; $l4++) {
        i = $l4;
        var $tmp6 = Disabled.charAt(i - 1);
        if ($tmp6 === "2") {}
        else if ($tmp6 === "a") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coAssertions)))}
         else if ($tmp6 === "c") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coAllowCAssignments)))}
         else if ($tmp6 === "d") {}
        else if ($tmp6 === "m") this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coAllowMacros)));
      };
    };
    this.ReadVerbosityFlags = function (Param, p) {
      var Enabled = "";
      var Disabled = "";
      var i = 0;
      var l = 0;
      l = Param.length;
      if (p > l) return;
      if (Param.charAt(p - 1) === "m") {
        do {
          p += 1;
          if ((p > l) || !(Param.charCodeAt(p - 1) in rtl.createSet(null,48,57))) this.ParamFatal(('missing number in "' + Param) + '"');
          i = 0;
          while ((p <= l) && (Param.charCodeAt(p - 1) in rtl.createSet(null,48,57))) {
            i = ((i * 10) + Param.charCodeAt(p - 1)) - "0".charCodeAt();
            if (i > 99999) this.ParamFatal(('Invalid -vm parameter in "' + Param) + '"');
            p += 1;
          };
          if ((p <= l) && (Param.charAt(p - 1) === "-")) {
            p += 1;
            this.FLog.SetMsgNumberDisabled(i,false);
          } else this.FLog.SetMsgNumberDisabled(i,true);
          if (p > l) break;
          if (Param.charAt(p - 1) !== ",") this.ParamFatal(('Invalid option "' + Param) + '"');
        } while (!false);
        return;
      };
      this.ReadSingleLetterOptions(Param,p,"ewnhila0bctdqxvz",{get: function () {
          return Enabled;
        }, set: function (v) {
          Enabled = v;
        }},{get: function () {
          return Disabled;
        }, set: function (v) {
          Disabled = v;
        }});
      for (var $l1 = 1, $end2 = Enabled.length; $l1 <= $end2; $l1++) {
        i = $l1;
        var $tmp3 = Enabled.charAt(i - 1);
        if ($tmp3 === "e") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowErrors)))}
         else if ($tmp3 === "w") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowWarnings)))}
         else if ($tmp3 === "n") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowNotes)))}
         else if ($tmp3 === "h") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowHints)))}
         else if ($tmp3 === "i") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowInfos)))}
         else if ($tmp3 === "l") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowLineNumbers)))}
         else if ($tmp3 === "a") {
          this.SetOptions(rtl.unionSet(this.FOptions,$mod.coShowAll))}
         else if ($tmp3 === "0") {
          this.SetOptions(rtl.unionSet(rtl.diffSet(this.FOptions,$mod.coShowAll),rtl.createSet($mod.TP2jsCompilerOption.coShowErrors)))}
         else if ($tmp3 === "b") {
          this.SetShowFullPaths(true)}
         else if ($tmp3 === "c") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowConditionals,$mod.TP2jsCompilerOption.coShowInfos)))}
         else if ($tmp3 === "t") {
          this.SetShowTriedUsedFiles(true)}
         else if ($tmp3 === "d") {
          this.SetShowDebug(true)}
         else if ($tmp3 === "q") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowMessageNumbers)))}
         else if ($tmp3 === "x") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowUsedTools)))}
         else if ($tmp3 === "v") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coWriteDebugLog)))}
         else if ($tmp3 === "z") this.SetWriteMsgToStdErr(true);
      };
      for (var $l4 = 1, $end5 = Disabled.length; $l4 <= $end5; $l4++) {
        i = $l4;
        var $tmp6 = Disabled.charAt(i - 1);
        if ($tmp6 === "e") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowErrors)))}
         else if ($tmp6 === "w") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowWarnings)))}
         else if ($tmp6 === "n") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowNotes)))}
         else if ($tmp6 === "h") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowHints)))}
         else if ($tmp6 === "i") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowInfos)))}
         else if ($tmp6 === "l") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowLineNumbers)))}
         else if ($tmp6 === "a") {}
        else if ($tmp6 === "0") {}
        else if ($tmp6 === "b") {
          this.SetShowFullPaths(false)}
         else if ($tmp6 === "c") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowConditionals)))}
         else if ($tmp6 === "t") {
          this.SetShowTriedUsedFiles(false)}
         else if ($tmp6 === "d") {
          this.SetShowDebug(false)}
         else if ($tmp6 === "q") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowMessageNumbers)))}
         else if ($tmp6 === "x") {
          this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coShowUsedTools)))}
         else if ($tmp6 === "v") {
          this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet($mod.TP2jsCompilerOption.coWriteDebugLog)))}
         else if ($tmp6 === "z") this.SetWriteMsgToStdErr(false);
      };
    };
    this.RegisterMessages = function () {
      var Self = this;
      var LastMsgNumber = 0;
      function r(MsgType, MsgNumber, MsgPattern) {
        var s = "";
        if ((LastMsgNumber >= 0) && (MsgNumber !== (LastMsgNumber + 1))) {
          s = (("TPas2jsCompiler.RegisterMessages: gap in registered message numbers: " + pas.SysUtils.IntToStr(LastMsgNumber)) + " ") + pas.SysUtils.IntToStr(MsgNumber);
          Self.RaiseInternalError(20170504161422,s);
        };
        Self.FLog.RegisterMsg(MsgType,MsgNumber,MsgPattern);
        LastMsgNumber = MsgNumber;
      };
      LastMsgNumber = -1;
      r(pas.PScanner.TMessageType.mtInfo,101,$mod.sOptionIsEnabled);
      r(pas.PScanner.TMessageType.mtInfo,102,$mod.sSyntaxModeIs);
      r(pas.PScanner.TMessageType.mtInfo,103,$mod.sMacroDefined);
      r(pas.PScanner.TMessageType.mtInfo,104,pas.pas2jsfs.sUsingPath);
      r(pas.PScanner.TMessageType.mtNote,105,pas.pas2jsfs.sFolderNotFound);
      r(pas.PScanner.TMessageType.mtInfo,106,$mod.sNameValue);
      r(pas.PScanner.TMessageType.mtInfo,107,$mod.sReadingOptionsFromFile);
      r(pas.PScanner.TMessageType.mtInfo,108,$mod.sEndOfReadingConfigFile);
      r(pas.PScanner.TMessageType.mtDebug,109,$mod.sInterpretingFileOption);
      r(pas.PScanner.TMessageType.mtFatal,110,$mod.sSourceFileNotFound);
      r(pas.PScanner.TMessageType.mtFatal,111,$mod.sFileIsFolder);
      r(pas.PScanner.TMessageType.mtInfo,112,$mod.sConfigFileSearch);
      r(pas.PScanner.TMessageType.mtDebug,113,$mod.sHandlingOption);
      r(pas.PScanner.TMessageType.mtDebug,114,$mod.sQuickHandlingOption);
      r(pas.PScanner.TMessageType.mtFatal,115,$mod.sOutputDirectoryNotFound);
      r(pas.PScanner.TMessageType.mtError,116,$mod.sUnableToWriteFile);
      r(pas.PScanner.TMessageType.mtInfo,117,$mod.sWritingFile);
      r(pas.PScanner.TMessageType.mtFatal,118,$mod.sCompilationAborted);
      r(pas.PScanner.TMessageType.mtDebug,119,$mod.sCfgDirective);
      r(pas.PScanner.TMessageType.mtError,120,$mod.sUnitCycle);
      r(pas.PScanner.TMessageType.mtError,121,$mod.sOptionForbidsCompile);
      r(pas.PScanner.TMessageType.mtInfo,122,$mod.sUnitsNeedCompileDueToUsedUnit);
      r(pas.PScanner.TMessageType.mtInfo,123,$mod.sUnitsNeedCompileDueToOption);
      r(pas.PScanner.TMessageType.mtInfo,124,$mod.sUnitsNeedCompileJSMissing);
      r(pas.PScanner.TMessageType.mtInfo,125,$mod.sUnitsNeedCompilePasHasChanged);
      r(pas.PScanner.TMessageType.mtInfo,126,$mod.sParsingFile);
      r(pas.PScanner.TMessageType.mtInfo,127,$mod.sCompilingFile);
      r(pas.PScanner.TMessageType.mtError,128,$mod.sExpectedButFound);
      r(pas.PScanner.TMessageType.mtInfo,129,$mod.sLinesInFilesCompiled);
      r(pas.PScanner.TMessageType.mtInfo,130,$mod.sTargetPlatformIs);
      r(pas.PScanner.TMessageType.mtInfo,131,$mod.sTargetProcessorIs);
      r(pas.PScanner.TMessageType.mtInfo,132,$mod.sMessageEncodingIs);
      r(pas.PScanner.TMessageType.mtError,133,$mod.sUnableToTranslatePathToDir);
      r(pas.PScanner.TMessageType.mtInfo,134,$mod.sSrcMapSourceRootIs);
      r(pas.PScanner.TMessageType.mtInfo,135,$mod.sSrcMapBaseDirIs);
      r(pas.PScanner.TMessageType.mtFatal,136,$mod.sUnitFileNotFound);
      r(pas.PScanner.TMessageType.mtInfo,137,$mod.sClassInterfaceStyleIs);
      r(pas.PScanner.TMessageType.mtInfo,138,$mod.sMacroXSetToY);
      r(pas.PScanner.TMessageType.mtInfo,139,$mod.sPostProcessorInfoX);
      r(pas.PScanner.TMessageType.mtInfo,140,$mod.sPostProcessorRunX);
      r(pas.PScanner.TMessageType.mtError,141,$mod.sPostProcessorFailX);
      r(pas.PScanner.TMessageType.mtWarning,142,$mod.sPostProcessorWarnX);
      r(pas.PScanner.TMessageType.mtInfo,143,$mod.sPostProcessorFinished);
      pas.Pas2jsPParser.RegisterMessages(Self.FLog);
    };
    this.SetAllJSIntoMainJS = function (AValue) {
      if (this.FAllJSIntoMainJS === AValue) return;
      if (AValue) this.FIsMainJSFileResolved = false;
      this.FAllJSIntoMainJS = AValue;
    };
    this.CreateJSMapper = function () {
      var Result = null;
      Result = pas.FPPJsSrcMap.TPas2JSMapper.$create("Create$2",[4096]);
      return Result;
    };
    this.CreateJSWriter = function (aFileWriter) {
      var Result = null;
      Result = pas.jswriter.TJSWriter.$create("Create$1",[aFileWriter]);
      return Result;
    };
    this.CreateLog = function () {
      var Result = null;
      Result = pas.Pas2jsLogger.TPas2jsLogger.$create("Create$1");
      return Result;
    };
    this.CreateMacroEngine = function () {
      var Result = null;
      Result = $mod.TPas2jsMacroEngine.$create("Create$1");
      return Result;
    };
    this.CreateSrcMap = function (aFileName) {
      var Result = null;
      Result = pas.FPPJsSrcMap.TPas2JSSrcMap.$create("Create$1",[aFileName]);
      return Result;
    };
    this.CreateOptimizer = function () {
      var Result = null;
      Result = $mod.TPas2JSWPOptimizer.$create("Create$1");
      return Result;
    };
    this.FormatPath = function (aPath) {
      var Result = "";
      Result = this.FFS.FormatPath(aPath);
      return Result;
    };
    this.FullFormatPath = function (aPath) {
      var Result = "";
      Result = pas.Pas2jsLogger.QuoteStr(this.FormatPath(aPath),'"');
      return Result;
    };
    this.WritePrecompiledFormats = function () {
      this.WriteHelpLine("No support for PCU files in this class");
    };
    var MaxLineLen = 78;
    var Indent = 12;
    this.WriteHelpLine = function (S) {
      var Self = this;
      var l = 0;
      var p = 0;
      var LastCharStart = 0;
      var WordBreak = 0;
      var Len = 0;
      var CodePointCount = 0;
      function InitLine() {
        l = S.length;
        p = 1;
        LastCharStart = p;
        WordBreak = 0;
        CodePointCount = 0;
      };
      if (S.length <= 78) {
        Self.FLog.LogRaw(S);
        return;
      };
      InitLine();
      while (p <= l) {
        var $tmp1 = S.charAt(p - 1);
        if (((((((((((($tmp1 >= "a") && ($tmp1 <= "z")) || (($tmp1 >= "A") && ($tmp1 <= "Z"))) || (($tmp1 >= "0") && ($tmp1 <= "9"))) || ($tmp1 === "_")) || ($tmp1 === "-")) || ($tmp1 === ".")) || ($tmp1 === ",")) || ($tmp1 === '"')) || ($tmp1 === "'")) || ($tmp1 === "`")) || (($tmp1 >= "") && ($tmp1 <= "\uFFFF"))) {
          LastCharStart = p;
          if ((p < l) && (S.charCodeAt(p - 1) in rtl.createSet(null,56320,57343))) {
            p += 2}
           else p += 1;
        } else {
          LastCharStart = p;
          WordBreak = p;
          p += 1;
        };
        CodePointCount += 1;
        if (CodePointCount >= 78) {
          if ((WordBreak === 0) || (WordBreak < Math.floor(78 / 2))) WordBreak = LastCharStart;
          Len = WordBreak - 1;
          Self.FLog.LogRaw(pas.SysUtils.LeftStr(S,Len));
          pas.System.Delete({get: function () {
              return S;
            }, set: function (v) {
              S = v;
            }},1,Len);
          S = pas.System.StringOfChar(" ",12) + pas.SysUtils.Trim(S);
          InitLine();
        };
      };
      Self.FLog.LogRaw(S);
    };
    this.CreateCompilerFile = function (UnitFileName) {
      var Result = null;
      Result = $mod.TPas2jsCompilerFile.$create("Create$2",[this,UnitFileName]);
      return Result;
    };
    this.HandleOptionPCUFormat = function (aValue) {
      this.ParamFatal("No PCU support in this compiler for " + aValue);
    };
    this.HandleOptionPaths = function (C, aValue, FromCmdLine) {
      var Result = false;
      var ErrorMsg = "";
      Result = true;
      var $tmp1 = C;
      if ($tmp1 === "N") {
        this.AddNamespaces(aValue,FromCmdLine)}
       else if ($tmp1 === "r") {
        this.FLog.Log(pas.PScanner.TMessageType.mtNote,"-Fr not yet implemented",0,"",0,0,true)}
       else if ($tmp1 === "e") {
        this.FLog.SetOutputFilename(aValue)}
       else {
        ErrorMsg = this.FFS.HandleOptionPaths(C,aValue,FromCmdLine);
        if (ErrorMsg !== "") this.ParamFatal(ErrorMsg);
      };
      return Result;
    };
    this.HandleOptionJS = function (C, aValue, Quick, FromCmdLine) {
      var Result = false;
      var S = "";
      var ErrorMsg = "";
      var i = 0;
      var enable = false;
      Result = true;
      var $tmp1 = C;
      if ($tmp1 === "c") {
        if (aValue === "") {
          this.SetAllJSIntoMainJS(true)}
         else if (aValue === "-") {
          this.SetAllJSIntoMainJS(false)}
         else this.ParamFatal(('invalid value (-Jc) "' + aValue) + '"');
      } else if ($tmp1 === "e") {
        S = pas.pas2jsutils.NormalizeEncoding(aValue);
        var $tmp2 = S;
        if (($tmp2 === "utf8") || ($tmp2 === "json")) {
          if (this.FLog.FEncoding !== S) {
            this.FLog.SetEncoding(S);
            if (this.FHasShownEncoding) {
              this.FHasShownEncoding = false;
              this.WriteEncoding();
            };
          }}
         else {
          this.ParamFatal(('invalid encoding (-Je) "' + aValue) + '"');
        };
      } else if ($tmp1 === "i") {
        if (aValue === "") {
          this.ParamFatal(('missing insertion file "' + aValue) + '"')}
         else if (!Quick) {
          if (aValue === "") {
            Result = false}
           else if (aValue.charAt(aValue.length - 1) === "-") {
            pas.System.Delete({get: function () {
                return aValue;
              }, set: function (v) {
                aValue = v;
              }},aValue.length,1);
            if (aValue === "") {
              Result = false}
             else this.RemoveInsertJSFilename(aValue);
          } else this.AddInsertJSFilename(aValue);
        }}
       else if ($tmp1 === "l") {
        this.SetOption($mod.TP2jsCompilerOption.coLowerCase,aValue !== "-")}
       else if ($tmp1 === "m") {
        if (aValue === "") {
          this.SetSrcMapEnable(true)}
         else if (aValue.charAt(0) === "-") {
          if (aValue !== "-") {
            Result = false}
           else this.SetSrcMapEnable(false);
        } else {
          var $tmp3 = aValue;
          if ($tmp3 === "include") {
            this.SetSrcMapInclude(true)}
           else if ($tmp3 === "include-") {
            this.SetSrcMapInclude(false)}
           else if ($tmp3 === "xssiheader") {
            this.SetSrcMapXSSIHeader(true)}
           else if ($tmp3 === "xssiheader-") {
            this.SetSrcMapXSSIHeader(false)}
           else {
            i = pas.System.Pos("=",aValue);
            if (i < 1) {
              Result = false}
             else {
              S = pas.SysUtils.LeftStr(aValue,i - 1);
              pas.System.Delete({get: function () {
                  return aValue;
                }, set: function (v) {
                  aValue = v;
                }},1,i);
              var $tmp4 = S;
              if ($tmp4 === "sourceroot") {
                this.FSrcMapSourceRoot = aValue}
               else if ($tmp4 === "basedir") {
                this.SetSrcMapBaseDir(aValue)}
               else {
                Result = false;
              };
            };
          };
          this.SetSrcMapEnable(true);
        }}
       else if ($tmp1 === "o") {
        S = aValue;
        if (S === "") this.ParamFatal("missing value of -Jo option");
        enable = true;
        C = S.charAt(S.length - 1);
        if (C.charCodeAt() in rtl.createSet(43,45)) {
          enable = C === "+";
          pas.System.Delete({get: function () {
              return S;
            }, set: function (v) {
              S = v;
            }},S.length,1);
        };
        var $tmp5 = pas.SysUtils.LowerCase(S);
        if ($tmp5 === "searchlikefpc") {
          this.FFS.SetOptionFromIndex(2,enable)}
         else if ($tmp5 === "usestrict") {
          this.SetOption($mod.TP2jsCompilerOption.coUseStrict,enable)}
         else if ($tmp5 === "checkversion=main") {
          this.FRTLVersionCheck = $mod.TP2jsRTLVersionCheck.rvcMain}
         else if ($tmp5 === "checkversion=system") {
          this.FRTLVersionCheck = $mod.TP2jsRTLVersionCheck.rvcSystem}
         else if ($tmp5 === "checkversion=unit") {
          this.FRTLVersionCheck = $mod.TP2jsRTLVersionCheck.rvcUnit}
         else {
          Result = false;
        };
      } else if ($tmp1 === "p") {
        if (!(this.FPostProcessorSupport != null)) this.ParamFatal("-Jp : No postprocessor support available");
        Result = pas.System.Copy(aValue,1,3) === "cmd";
        if (Result) {
          pas.System.Delete({get: function () {
              return aValue;
            }, set: function (v) {
              aValue = v;
            }},1,3);
          if (!Quick) this.FPostProcessorSupport.AddPostProcessor(aValue);
        };
      } else if ($tmp1 === "u") {
        if (!Quick) {
          ErrorMsg = this.FFS.AddForeignUnitPath(aValue,FromCmdLine);
          if (ErrorMsg !== "") this.ParamFatal(('invalid foreign unit path (-Ju) "' + ErrorMsg) + '"');
        }}
       else if ($tmp1 === "U") {
        this.HandleOptionPCUFormat(aValue)}
       else {
        Result = false;
      };
      return Result;
    };
    this.HandleOptionConfigFile = function (aPos, aFileName) {
      var FN = "";
      if (aFileName === "") this.ParamFatal("invalid config file at param position " + pas.SysUtils.IntToStr(aPos));
      FN = this.ExpandFileName(aFileName);
      if (!this.FFS.FileExists(FN)) this.ParamFatal(('config file not found: "' + aFileName) + '"');
      this.LoadConfig(FN);
    };
    this.HandleOptionInfo = function (aValue) {
      var Self = this;
      var infoMsg = "";
      function AppendInfo(Add) {
        if (infoMsg !== "") infoMsg = infoMsg + " ";
        infoMsg = infoMsg + Add;
      };
      var P = 0;
      var L = 0;
      var C = "";
      var c2 = "";
      var pr = 0;
      var pl = 0;
      infoMsg = "";
      if (aValue === "") {
        Self.WriteInfo();
        Self.Terminate(0);
        return;
      };
      P = 1;
      L = aValue.length;
      while (P <= L) {
        C = aValue.charAt(P - 1);
        var $tmp1 = C;
        if ($tmp1 === "D") {
          AppendInfo($mod.GetCompiledDate())}
         else if ($tmp1 === "V") {
          AppendInfo(Self.$class.GetVersion(true))}
         else if ($tmp1 === "W") {
          AppendInfo(Self.$class.GetVersion(false))}
         else if ($tmp1 === "S") {
          P += 1;
          if (P > L) Self.ParamFatal(('missing info option after S in "' + aValue) + '".');
          c2 = aValue.charAt(P - 1);
          var $tmp2 = c2;
          if ($tmp2 === "O") {
            AppendInfo($mod.GetCompiledTargetOS())}
           else if ($tmp2 === "P") {
            AppendInfo($mod.GetCompiledTargetCPU())}
           else {
            Self.ParamFatal(((('unknown info option S"' + c2) + '" in "') + aValue) + '".');
          };
        } else if ($tmp1 === "T") {
          P += 1;
          if (P > L) Self.ParamFatal(('missing info option after T in "' + aValue) + '".');
          c2 = aValue.charAt(P - 1);
          var $tmp3 = c2;
          if ($tmp3 === "O") {
            AppendInfo(pas.FPPas2Js.PasToJsPlatformNames[Self.FTargetPlatform])}
           else if ($tmp3 === "P") {
            AppendInfo(pas.FPPas2Js.PasToJsProcessorNames[Self.FTargetProcessor])}
           else {
            Self.ParamFatal(((('unknown info option S"' + c2) + '" in "') + aValue) + '".');
          };
        } else if ($tmp1 === "c") {
          for (pr = 0; pr <= 1; pr++) Self.FLog.LogPlain(pas.FPPas2Js.PasToJsProcessorNames[pr])}
         else if ($tmp1 === "o") {
          Self.FLog.LogPlain("EnumNumbers");
          Self.FLog.LogPlain("RemoveNotUsedPrivates");
          Self.FLog.LogPlain("RemoveNotUsedDeclarations");
        } else if ($tmp1 === "t") {
          for (pl = 0; pl <= 1; pl++) Self.FLog.LogPlain(pas.FPPas2Js.PasToJsPlatformNames[pl])}
         else {
          Self.ParamFatal(((('unknown info option "' + C) + '" in "') + aValue) + '".');
        };
        P += 1;
      };
      if (infoMsg !== "") Self.FLog.LogPlain(infoMsg);
    };
    this.DoWriteJSFile = function (DestFilename, aWriter) {
      var Result = false;
      Result = false;
      if (DestFilename === "") ;
      if (aWriter === null) ;
      return Result;
    };
    this.Compile = function (StartTime) {
      var Checked = null;
      var CombinedFileWriter = null;
      var SrcFileCount = 0;
      var Seconds = 0.0;
      var ok = false;
      if (this.FMainFile !== null) this.RaiseInternalError(20170504192137,"");
      Checked = null;
      CombinedFileWriter = null;
      SrcFileCount = 0;
      this.SetExitCode(0);
      pas.SysUtils.CreateGUID({p: this, get: function () {
          return this.p.FPrecompileGUID;
        }, set: function (v) {
          this.p.FPrecompileGUID = v;
        }});
      ok = false;
      try {
        this.LoadPasFile(this.FMainSrcFile,"",{p: this, get: function () {
            return this.p.FMainFile;
          }, set: function (v) {
            this.p.FMainFile = v;
          }},false);
        if (this.FMainFile === null) return;
        if (this.FMainFile.FPCUSupport != null) this.FMainFile.FPCUSupport.SetInitialCompileFlags();
        this.FMainFile.ReadUnit();
        this.ProcessQueue();
        if (pas.PasTree.TPasProgram.isPrototypeOf(this.FMainFile.FPasModule)) this.OptimizeProgram(this.FMainFile);
        Checked = this.CreateSetOfCompilerFiles(pas.pas2jsfs.TKeyCompareType.kcFilename);
        this.MarkNeedBuilding(this.FMainFile,Checked,{get: function () {
            return SrcFileCount;
          }, set: function (v) {
            SrcFileCount = v;
          }});
        SrcFileCount = Checked.Count();
        pas.SysUtils.FreeAndNil({get: function () {
            return Checked;
          }, set: function (v) {
            Checked = v;
          }});
        Checked = this.CreateSetOfCompilerFiles(pas.pas2jsfs.TKeyCompareType.kcFilename);
        this.CreateJavaScript(this.FMainFile,Checked);
        pas.SysUtils.FreeAndNil({get: function () {
            return Checked;
          }, set: function (v) {
            Checked = v;
          }});
        Checked = this.CreateSetOfCompilerFiles(pas.pas2jsfs.TKeyCompareType.kcFilename);
        this.WriteJSFiles(this.FMainFile,{get: function () {
            return CombinedFileWriter;
          }, set: function (v) {
            CombinedFileWriter = v;
          }},Checked);
        pas.SysUtils.FreeAndNil({get: function () {
            return Checked;
          }, set: function (v) {
            Checked = v;
          }});
        if (this.GetExitCode() === 0) {
          Seconds = (pas.SysUtils.Now() - StartTime) * 86400;
          this.FLog.LogMsgIgnoreFilter(129,[pas.SysUtils.IntToStr(this.FFS.FReadLineCounter),pas.SysUtils.IntToStr(SrcFileCount),pas.SysUtils.FormatFloat("0.0",Seconds),"s"]);
          ok = true;
        };
      } finally {
        Checked = rtl.freeLoc(Checked);
        if (!ok) this.FLog.LogMsgIgnoreFilter(118,[]);
        CombinedFileWriter = rtl.freeLoc(CombinedFileWriter);
      };
    };
    this.ProcessQueue = function () {
      var i = 0;
      var aFile = null;
      var Found = false;
      var Section = null;
      do {
        Found = false;
        for (var $l1 = this.FReadingModules.FCount - 1; $l1 >= 0; $l1--) {
          i = $l1;
          aFile = rtl.getObject(this.FReadingModules.Get(i));
          if (aFile.ReaderState() !== $mod.TPas2jsReaderState.prsCanContinue) {
            if (!aFile.IsUnitReadFromPCU() && (aFile.FParser.FCurModule === null)) this.RaiseInternalError(20180306111410,("File=" + aFile.FPasFileName) + " Parser.CurModule=nil");
            continue;
          };
          Found = true;
          aFile.ReadContinue();
          if (aFile.ReaderState() === $mod.TPas2jsReaderState.prsCanContinue) {
            this.RaiseInternalError(20180313130300,("File=" + aFile.FPasFileName) + " ReadContinue buggy");
          };
          break;
        };
      } while (Found);
      for (var $l2 = 0, $end3 = this.FReadingModules.FCount - 1; $l2 <= $end3; $l2++) {
        i = $l2;
        aFile = rtl.getObject(this.FReadingModules.Get(i));
        if (aFile.FPasResolver === null) this.RaiseInternalError(20180313124125,aFile.FPasFileName);
        if (!aFile.IsUnitReadFromPCU() && (aFile.FParser.FCurModule !== null)) {
          this.RaiseInternalError(20180305185342,aFile.FPasFileName);
        };
        Section = aFile.FPasResolver.GetLastSection();
        if (Section === null) this.RaiseInternalError(20180313124207,aFile.FPasFileName);
        if (Section.PendingUsedIntf !== null) this.RaiseInternalError(20180313124226,(((aFile.FPasFileName + " ") + pas.PasResolveEval.GetObjName(Section)) + " PendingUsedIntf=") + pas.PasResolveEval.GetObjName(Section.PendingUsedIntf));
      };
    };
    this.MarkNeedBuilding = function (aFile, Checked, SrcFileCount) {
      var Self = this;
      var Result = false;
      function Mark(MsgNumber, Args) {
        if (aFile.FNeedBuild) return;
        aFile.FNeedBuild = true;
        SrcFileCount.set(SrcFileCount.get() + 1);
        if (Self.GetShowDebug() || Self.GetShowTriedUsedFiles()) Self.FLog.LogMsg(MsgNumber,Args,"",0,0,false);
      };
      function CheckUsesClause(UsesClause) {
        var i = 0;
        var UsedFile = null;
        var aModule = null;
        if (rtl.length(UsesClause) === 0) return;
        for (var $l1 = 0, $end2 = rtl.length(UsesClause) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          aModule = rtl.as(UsesClause[i].Module,pas.PasTree.TPasModule);
          UsedFile = $mod.TPas2jsCompilerFile.GetFile(aModule);
          if (UsedFile === null) Self.RaiseInternalError(20171214121631,aModule.FName);
          if (Self.MarkNeedBuilding(UsedFile,Checked,SrcFileCount)) {
            if (!aFile.FNeedBuild) Mark(122,[aFile.GetModuleName(),UsedFile.GetModuleName()]);
          };
        };
      };
      Result = false;
      if (Checked.FindItem(aFile) !== null) return aFile.FNeedBuild;
      Checked.Add(aFile,true);
      if ((Self.FAllJSIntoMainJS && (Self.FWPOAnalyzer !== null)) && !Self.FWPOAnalyzer.IsUsed(aFile.FPasModule)) {
        return false;
      };
      CheckUsesClause(aFile.GetPasMainUsesClause());
      CheckUsesClause(aFile.GetPasImplUsesClause());
      if (!aFile.FNeedBuild && !aFile.FIsForeign) {
        if (aFile.FIsMainFile) {
          Mark(123,[aFile.GetModuleName(),"<main source file>"])}
         else if ($mod.TP2jsCompilerOption.coBuildAll in Self.FOptions) {
          Mark(123,[aFile.GetModuleName(),"-B"])}
         else if (Self.FAllJSIntoMainJS) {
          Mark(123,[aFile.GetModuleName(),"-Jc"])}
         else if ((aFile.FJSFilename !== "") && !Self.FFS.FileExists(aFile.FJSFilename)) {
          Mark(124,[aFile.GetModuleName(),Self.FormatPath(aFile.FJSFilename)])}
         else if ((aFile.FJSFilename !== "") && Self.FFS.File1IsNewer(aFile.FPasFileName,aFile.FJSFilename)) {
          Mark(125,[aFile.GetModuleName(),Self.FullFormatPath(aFile.FJSFilename)]);
        };
      };
      if (aFile.FNeedBuild) {
        if (aFile.FIsForeign) {
          Self.FLog.LogMsg(121,[aFile.GetModuleName()],"",0,0,true);
          Self.Terminate(5);
        };
      };
      Result = aFile.FNeedBuild;
      return Result;
    };
    this.OptimizeProgram = function (aFile) {
      if (!this.FAllJSIntoMainJS) return;
      if ($mod.TP2jsCompilerOption.coKeepNotUsedDeclarationsWPO in this.FOptions) return;
      if (!pas.PasTree.TPasProgram.isPrototypeOf(aFile.FPasModule)) return;
      this.FWPOAnalyzer = this.CreateOptimizer();
      this.FWPOAnalyzer.FResolver = aFile.FPasResolver;
      this.FWPOAnalyzer.SetOptions(rtl.unionSet(this.FWPOAnalyzer.FOptions,rtl.createSet(pas.PasUseAnalyzer.TPasAnalyzerOption.paoOnlyExports)));
      this.FWPOAnalyzer.AnalyzeWholeProgram(aFile.FPasModule);
    };
    this.CreateJavaScript = function (aFile, Checked) {
      var Self = this;
      function CheckUsesClause(UsesClause) {
        var i = 0;
        var UsedFile = null;
        var aModule = null;
        if (rtl.length(UsesClause) === 0) return;
        for (var $l1 = 0, $end2 = rtl.length(UsesClause) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          aModule = rtl.as(UsesClause[i].Module,pas.PasTree.TPasModule);
          UsedFile = $mod.TPas2jsCompilerFile.GetFile(aModule);
          if (UsedFile === null) Self.RaiseInternalError(20171214121720,aModule.FName);
          Self.CreateJavaScript(UsedFile,Checked);
        };
      };
      if ((aFile.FJSModule !== null) || !aFile.FNeedBuild) return;
      if (Checked.FindItem(aFile) !== null) return;
      Checked.Add(aFile,true);
      Self.FLog.LogMsg(127,[Self.FullFormatPath(aFile.FPasFileName)],"",0,0,!($mod.TP2jsCompilerOption.coShowLineNumbers in Self.FOptions));
      CheckUsesClause(aFile.GetPasMainUsesClause());
      CheckUsesClause(aFile.GetPasImplUsesClause());
      aFile.CreateJS();
    };
    this.FinishSrcMap = function (SrcMap) {
      var LocalFilename = "";
      var MapFilename = "";
      var BaseDir = "";
      var aFile = null;
      var i = 0;
      if (this.FSrcMapBaseDir !== "") {
        BaseDir = this.FSrcMapBaseDir}
       else BaseDir = pas.SysUtils.ExtractFilePath(pas.SysUtils.ExtractFilePath(SrcMap.LocalFilename));
      for (var $l1 = 0, $end2 = SrcMap.SourceCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        LocalFilename = SrcMap.GetSourceFiles(i);
        if (LocalFilename === "") continue;
        if (this.GetSrcMapInclude() && this.FFS.FileExists(LocalFilename)) {
          aFile = this.FFS.LoadFile(LocalFilename,false);
          SrcMap.SetSourceContents(i,aFile.FSource);
        };
        if (BaseDir !== "") {
          if (!this.FFS.TryCreateRelativePath(LocalFilename,BaseDir,true,{get: function () {
              return MapFilename;
            }, set: function (v) {
              MapFilename = v;
            }})) {
            if (!this.GetSrcMapInclude()) {
              this.FLog.Log(pas.PScanner.TMessageType.mtError,pas.PScanner.SafeFormat($mod.sUnableToTranslatePathToDir,[pas.Pas2jsLogger.QuoteStr(LocalFilename,'"'),pas.Pas2jsLogger.QuoteStr(BaseDir,'"')]),133,"",0,0,true);
              this.Terminate(7);
            };
            MapFilename = LocalFilename;
          };
          MapFilename = pas.SysUtils.StringReplace(MapFilename,pas.System.PathDelim,"\/",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
          SrcMap.SetSourceTranslatedFiles(i,MapFilename);
        };
      };
    };
    this.WriteJSFiles = function (aFile, CombinedFileWriter, Checked) {
      var Self = this;
      function CheckUsesClause(UsesClause) {
        var i = 0;
        var UsedFile = null;
        var aModule = null;
        if (rtl.length(UsesClause) === 0) return;
        for (var $l1 = 0, $end2 = rtl.length(UsesClause) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          aModule = rtl.as(UsesClause[i].Module,pas.PasTree.TPasModule);
          UsedFile = $mod.TPas2jsCompilerFile.GetFile(aModule);
          if (UsedFile === null) Self.RaiseInternalError(20171214121720,aModule.FName);
          Self.WriteJSFiles(UsedFile,CombinedFileWriter,Checked);
        };
      };
      var aFileWriter = null;
      var FreeWriter = false;
      function CreateFileWriter(aFilename) {
        var SrcMap = null;
        aFileWriter = Self.CreateJSMapper();
        FreeWriter = true;
        if (Self.GetSrcMapEnable()) {
          SrcMap = Self.CreateSrcMap(pas.SysUtils.ExtractFileName(aFilename));
          aFileWriter.SetSrcMap(SrcMap);
          SrcMap.Release();
          SrcMap.FSourceRoot = Self.FSrcMapSourceRoot;
          SrcMap.LocalFilename = aFile.FJSFilename;
          if (Self.GetSrcMapXSSIHeader()) {
            SrcMap.FOptions = rtl.unionSet(SrcMap.FOptions,rtl.createSet(pas.JSSrcMap.TSourceMapOption.smoSafetyHeader))}
           else SrcMap.FOptions = rtl.diffSet(SrcMap.FOptions,rtl.createSet(pas.JSSrcMap.TSourceMapOption.smoSafetyHeader));
          SrcMap.FOptions = rtl.unionSet(SrcMap.FOptions,rtl.createSet(pas.JSSrcMap.TSourceMapOption.smoAllowSrcLine0));
        };
      };
      var DestFilename = "";
      var DestDir = "";
      var Src = "";
      var MapFilename = "";
      var aJSWriter = null;
      var buf = null;
      if ((aFile.FJSModule === null) || !aFile.FNeedBuild) return;
      if (Checked.FindItem(aFile) !== null) return;
      Checked.Add(aFile,true);
      FreeWriter = false;
      if (Self.FAllJSIntoMainJS && (CombinedFileWriter.get() === null)) {
        DestFilename = Self.GetResolvedMainJSFile();
        CreateFileWriter(DestFilename);
        CombinedFileWriter.set(aFileWriter);
        Self.InsertCustomJSFiles(CombinedFileWriter.get());
      } else {
        DestFilename = aFile.FJSFilename;
      };
      CheckUsesClause(aFile.GetPasMainUsesClause());
      CheckUsesClause(aFile.GetPasImplUsesClause());
      aJSWriter = null;
      aFileWriter = CombinedFileWriter.get();
      try {
        if (aFileWriter === null) {
          CreateFileWriter(DestFilename);
          if (aFile.FIsMainFile && !Self.FAllJSIntoMainJS) Self.InsertCustomJSFiles(aFileWriter);
        };
        aJSWriter = Self.CreateJSWriter(aFileWriter);
        aJSWriter.SetOptions(rtl.refSet(pas.FPPas2Js.DefaultJSWriterOptions));
        aJSWriter.FIndentSize = 2;
        try {
          aJSWriter.WriteJS(aFile.FJSModule);
        } catch ($e) {
          if (pas.SysUtils.Exception.isPrototypeOf($e)) {
            var E = $e;
            if (Self.GetShowDebug()) Self.FLog.LogExceptionBackTrace(E);
            Self.FLog.LogPlain((("[20180204193420] Error while creating JavaScript " + Self.FullFormatPath(DestFilename)) + ": ") + E.fMessage);
            Self.Terminate(1);
          } else {
            Self.HandleJSException("[20181031190520] TPas2jsCompiler.WriteJSFiles Error while creating JavaScript",$e,true);
          }
        };
        if (aFile.FIsMainFile && (Self.FTargetPlatform === pas.FPPas2Js.TPasToJsPlatform.PlatformNodeJS)) aFileWriter.WriteFile("rtl.run();" + pas.System.LineEnding,aFile.FPasFileName);
        if (FreeWriter) {
          if (Self.FPostProcessorSupport != null) Self.FPostProcessorSupport.CallPostProcessors(aFile.FJSFilename,aFileWriter);
          if (Self.DoWriteJSFile(aFile.FJSFilename,aFileWriter)) return;
          if ((aFile.FJSFilename === "") && (Self.FMainJSFile === ".")) {
            if (FreeWriter) {
              try {
                Self.FLog.LogRaw(aFileWriter.GetAsString());
              } finally {
              };
            };
          } else if (FreeWriter) {
            Self.FLog.LogMsg(117,[Self.FullFormatPath(DestFilename)],"",0,0,!($mod.TP2jsCompilerOption.coShowLineNumbers in Self.FOptions));
            DestDir = pas.pas2jsutils.ChompPathDelim(pas.SysUtils.ExtractFilePath(DestFilename));
            if ((DestDir !== "") && !Self.FFS.DirectoryExists(DestDir)) {
              Self.FLog.LogMsg(115,[Self.FullFormatPath(DestDir)],"",0,0,true);
              Self.Terminate(4);
            };
            if (Self.FFS.DirectoryExists(DestFilename)) {
              Self.FLog.LogMsg(111,[Self.FullFormatPath(DestFilename)],"",0,0,true);
              Self.Terminate(5);
            };
            MapFilename = DestFilename + ".map";
            try {
              buf = new Array();
              try {
                buf = aFileWriter.FBuffer.slice();
                if (aFileWriter.FSrcMap !== null) {
                  Src = ("\/\/# sourceMappingURL=" + pas.SysUtils.ExtractFileName(MapFilename)) + pas.System.LineEnding;
                  buf.push(Src);
                };
                Self.FFS.SaveToFile(buf,DestFilename);
              } finally {
                buf = null;
              };
            } catch ($e) {
              if (pas.SysUtils.Exception.isPrototypeOf($e)) {
                var E = $e;
                if (Self.GetShowDebug()) Self.FLog.LogExceptionBackTrace(E);
                Self.FLog.LogPlain("Error: " + E.fMessage);
                Self.FLog.LogMsg(116,[Self.FullFormatPath(DestFilename)],"",0,0,true);
                Self.Terminate(5);
              } else {
                Self.HandleJSException("[20181031190637] TPas2jsCompiler.WriteJSFiles",$e,true);
              }
            };
            if (aFileWriter.FSrcMap !== null) {
              Self.FLog.LogMsg(117,[Self.FullFormatPath(MapFilename)],"",0,0,!($mod.TP2jsCompilerOption.coShowLineNumbers in Self.FOptions));
              Self.FinishSrcMap(aFileWriter.FSrcMap);
              try {
                buf = new Array();
                try {
                  aFileWriter.FSrcMap.SaveToStream(buf);
                  Self.FFS.SaveToFile(buf,MapFilename);
                } finally {
                  buf = null;
                };
              } catch ($e) {
                if (pas.SysUtils.Exception.isPrototypeOf($e)) {
                  var E = $e;
                  if (Self.GetShowDebug()) Self.FLog.LogExceptionBackTrace(E);
                  Self.FLog.LogPlain("Error: " + E.fMessage);
                  Self.FLog.LogMsg(116,[Self.FullFormatPath(MapFilename)],"",0,0,true);
                  Self.Terminate(5);
                } else {
                  Self.HandleJSException("[20181031190737] TPas2jsCompiler.WriteJSFiles",$e,true);
                }
              };
            };
          };
        };
      } finally {
        if (FreeWriter) {
          if (CombinedFileWriter.get() === aFileWriter) CombinedFileWriter.set(null);
          aFileWriter = rtl.freeLoc(aFileWriter);
        };
        aJSWriter = rtl.freeLoc(aJSWriter);
      };
    };
    this.InitParamMacros = function () {
      this.FParamMacros.AddValue("Pas2jsFullVersion","major.minor.release<extra>",this.$class.GetVersion(false));
      this.FParamMacros.AddValue("Pas2jsVersion","major.minor.release",this.$class.GetVersion(true));
      this.FParamMacros.AddFunction("CfgDir","Use within a config file. The directory of this config file",rtl.createCallback(this,"OnMacroCfgDir"),false);
    };
    this.ClearDefines = function () {
      var i = 0;
      var M = null;
      for (var $l1 = 0, $end2 = this.FDefines.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        M = this.FDefines.GetObject(i);
        M = rtl.freeLoc(M);
      };
      this.FDefines.Clear();
    };
    this.RaiseInternalError = function (id, Msg) {
      this.FLog.LogPlain((("[" + pas.SysUtils.IntToStr(id)) + "] ") + Msg);
      throw pas.SysUtils.Exception.$create("Create$1",[Msg]);
    };
    this.HandleJSException = function (Msg, E, TerminateInternal) {
      var obj = null;
      var Exc = null;
      if (rtl.isObject(E)) {
        obj = rtl.getObject(E);
        if (rtl.isExt(obj,Error)) {
          if (obj["stack"]) pas.System.Writeln(obj["stack"]);
          this.FLog.Log(pas.PScanner.TMessageType.mtFatal,(Msg + ": ") + ("" + obj["message"]),0,"",0,0,true);
        } else if (rtl.isExt(obj,pas.System.TObject)) {
          if (pas.SysUtils.Exception.isPrototypeOf(obj)) {
            Exc = obj;
            this.FLog.Log(pas.PScanner.TMessageType.mtFatal,(((Msg + ": (") + Exc.$classname) + ") ") + Exc.fMessage,0,"",0,0,true);
          } else {
            this.FLog.Log(pas.PScanner.TMessageType.mtFatal,((Msg + ": (") + obj.$classname) + ")",0,"",0,0,true);
          };
        } else this.FLog.Log(pas.PScanner.TMessageType.mtFatal,(Msg + ": ") + ("" + E),0,"",0,0,true);
      } else {
        this.FLog.Log(pas.PScanner.TMessageType.mtFatal,(Msg + ": ") + ("" + E),0,"",0,0,true);
      };
      if (TerminateInternal) this.Terminate(1);
    };
    this.GetExitCode = function () {
      var Result = 0;
      Result = rtl.exitcode;
      return Result;
    };
    this.SetExitCode = function (Value) {
      rtl.exitcode = Value;
    };
    this.SetWorkingDir = function (aDir) {
    };
    this.Create$1 = function () {
      this.FOptions = rtl.refSet($mod.DefaultP2jsCompilerOptions);
      this.FNamespaces = pas.Classes.TStringList.$create("Create$1");
      this.FDefines = pas.Classes.TStringList.$create("Create$1");
      this.FInsertFilenames = pas.Classes.TStringList.$create("Create$1");
      this.FLog = this.CreateLog();
      this.FLog.FOnFormatPath = rtl.createCallback(this,"FormatPath");
      this.FParamMacros = this.CreateMacroEngine();
      this.RegisterMessages();
      this.SetFS(this.CreateFS());
      this.FOwnsFS = true;
      this.FFiles = this.CreateSetOfCompilerFiles(pas.pas2jsfs.TKeyCompareType.kcFilename);
      this.FUnits = this.CreateSetOfCompilerFiles(pas.pas2jsfs.TKeyCompareType.kcUnitName);
      this.FReadingModules = pas.Classes.TFPList.$create("Create");
      this.InitParamMacros();
      this.Reset();
    };
    this.Destroy = function () {
      var Self = this;
      function FreeStuff() {
        pas.SysUtils.FreeAndNil({p: Self, get: function () {
            return this.p.FNamespaces;
          }, set: function (v) {
            this.p.FNamespaces = v;
          }});
        pas.SysUtils.FreeAndNil({p: Self, get: function () {
            return this.p.FWPOAnalyzer;
          }, set: function (v) {
            this.p.FWPOAnalyzer = v;
          }});
        pas.SysUtils.FreeAndNil({p: Self, get: function () {
            return this.p.FInsertFilenames;
          }, set: function (v) {
            this.p.FInsertFilenames = v;
          }});
        Self.FMainFile = null;
        pas.SysUtils.FreeAndNil({p: Self, get: function () {
            return this.p.FUnits;
          }, set: function (v) {
            this.p.FUnits = v;
          }});
        pas.SysUtils.FreeAndNil({p: Self, get: function () {
            return this.p.FReadingModules;
          }, set: function (v) {
            this.p.FReadingModules = v;
          }});
        Self.FFiles.FreeItems();
        pas.SysUtils.FreeAndNil({p: Self, get: function () {
            return this.p.FFiles;
          }, set: function (v) {
            this.p.FFiles = v;
          }});
        Self.ClearDefines();
        pas.SysUtils.FreeAndNil({p: Self, get: function () {
            return this.p.FDefines;
          }, set: function (v) {
            this.p.FDefines = v;
          }});
        Self.FLog.FOnFormatPath = null;
        if (Self.FOwnsFS) {
          pas.SysUtils.FreeAndNil({p: Self, get: function () {
              return this.p.FFS;
            }, set: function (v) {
              this.p.FFS = v;
            }})}
         else Self.FFS = null;
        pas.SysUtils.FreeAndNil({p: Self, get: function () {
            return this.p.FParamMacros;
          }, set: function (v) {
            this.p.FParamMacros = v;
          }});
        pas.SysUtils.FreeAndNil({p: Self, get: function () {
            return this.p.FConfigSupport;
          }, set: function (v) {
            this.p.FConfigSupport = v;
          }});
        pas.SysUtils.FreeAndNil({p: Self, get: function () {
            return this.p.FPostProcessorSupport;
          }, set: function (v) {
            this.p.FPostProcessorSupport = v;
          }});
      };
      if (Self.GetShowDebug()) {
        try {
          FreeStuff();
        } catch ($e) {
          if (pas.SysUtils.Exception.isPrototypeOf($e)) {
            var E = $e;
            Self.FLog.LogExceptionBackTrace(E);
          } else {
            Self.HandleJSException("[20181031190818] TPas2jsCompiler.Destroy",$e,true);
          }
        }}
       else FreeStuff();
      pas.SysUtils.FreeAndNil({p: Self, get: function () {
          return this.p.FLog;
        }, set: function (v) {
          this.p.FLog = v;
        }});
      pas.System.TObject.Destroy.call(Self);
    };
    this.Reset = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FWPOAnalyzer;
        }, set: function (v) {
          this.p.FWPOAnalyzer = v;
        }});
      this.FPrecompileGUID = new pas.System.TGuid();
      this.FNamespaces.Clear();
      this.FNamespacesFromCmdLine = 0;
      this.FMainFile = null;
      this.FUnits.Clear();
      this.FReadingModules.Clear();
      this.FFiles.FreeItems();
      this.FInsertFilenames.Clear();
      if (this.FPostProcessorSupport != null) this.FPostProcessorSupport.Clear();
      this.FCompilerExe = "";
      this.FSrcMapBaseDir = "";
      this.FMainSrcFile = "";
      this.FOptions = rtl.refSet($mod.DefaultP2jsCompilerOptions);
      this.FRTLVersionCheck = $mod.TP2jsRTLVersionCheck.rvcNone;
      this.FMode = $mod.TP2jsMode.p2jmObjFPC;
      this.FTargetPlatform = pas.FPPas2Js.TPasToJsPlatform.PlatformBrowser;
      this.FTargetProcessor = pas.FPPas2Js.TPasToJsProcessor.ProcessorECMAScript5;
      this.FIsMainJSFileResolved = false;
      this.FLog.Reset();
      this.FLog.FShowMsgTypes = rtl.refSet(this.GetShownMsgTypes());
      this.ClearDefines();
      this.FDefines.SetSorted(true);
      this.AddDefine("PAS2JS");
      this.AddDefine$1("PAS2JS_FULLVERSION",pas.SysUtils.IntToStr((((1 * 100) + 1) * 100) + 1));
      this.AddDefinesForTargetPlatform();
      this.AddDefinesForTargetProcessor();
      this.AddDefine("FPC_HAS_FEATURE_CLASSES");
      this.AddDefine("FPC_HAS_FEATURE_INIT");
      this.AddDefine("FPC_HAS_FEATURE_DYNARRAYS");
      this.AddDefine("FPC_HAS_FEATURE_EXCEPTIONS");
      this.AddDefine("FPC_HAS_FEATURE_EXITCODE");
      this.AddDefine("FPC_HAS_FEATURE_INITFINAL");
      this.AddDefine("FPC_HAS_FEATURE_RTTI");
      this.AddDefine("FPC_HAS_FEATURE_SUPPORT");
      this.AddDefine("FPC_HAS_FEATURE_UNICODESTRINGS");
      this.AddDefine("FPC_HAS_FEATURE_WIDESTRINGS");
      this.AddDefine("FPC_HAS_TYPE_DOUBLE");
      this.AddDefine("FPC_HAS_UNICODESTRING");
      this.AddDefine("FPC_UNICODESTRINGS");
      this.AddDefine("FPC_WIDESTRING_EQUAL_UNICODESTRING");
      this.AddDefine("STR_CONCAT_PROCS");
      this.AddDefine("UNICODE");
      this.FHasShownLogo = false;
      this.FHasShownEncoding = false;
      this.FFS.Reset();
    };
    this.ParamFatal = function (Msg) {
      if ((this.FConfigSupport != null) && (this.FConfigSupport.FCurrentCfgFilename !== "")) {
        this.FLog.Log(pas.PScanner.TMessageType.mtFatal,Msg,0,this.FConfigSupport.FCurrentCfgFilename,this.FConfigSupport.FCurrentCfgLineNumber,0,true)}
       else this.FLog.LogPlain$1(["Fatal: ",Msg]);
      this.Terminate(2);
    };
    this.Run = function (aCompilerExe, aWorkingDir, ParamList, DoReset) {
      var i = 0;
      var StartTime = 0.0;
      StartTime = pas.SysUtils.Now();
      if (DoReset) this.Reset();
      if (this.GetFileCount() > 0) this.RaiseInternalError(20170504161340,"internal error: TPas2jsCompiler.Run FileCount>0");
      try {
        this.SetWorkingDir(aWorkingDir);
        this.SetCompilerExe(aCompilerExe);
        for (var $l1 = 0, $end2 = ParamList.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          this.ReadParam(ParamList.Get(i),true,true);
        };
        if (this.GetWriteDebugLog()) this.FLog.OpenDebugLog();
        if (this.GetShowLogo()) this.WriteLogo();
        if ((this.FConfigSupport != null) && !this.GetSkipDefaultConfig()) this.FConfigSupport.LoadDefaultConfig();
        for (var $l3 = 0, $end4 = ParamList.GetCount() - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          this.ReadParam(ParamList.Get(i),false,true);
        };
        if (this.GetShowLogo()) this.WriteLogo();
        if (this.GetShowDebug()) {
          this.WriteOptions();
          this.WriteDefines();
        };
        if (this.GetShowDebug() || this.GetShowUsedTools()) this.WriteUsedTools();
        if (this.GetShowDebug() || this.GetShowTriedUsedFiles()) this.WriteFoldersAndSearchPaths();
        if (this.FMainSrcFile === "") this.ParamFatal("No source file name in command line");
        if (!this.FFS.FileExists(this.FMainSrcFile)) this.ParamFatal(('Pascal file not found: "' + this.FMainSrcFile) + '"');
        this.Compile(StartTime);
      } catch ($e) {
        if ($mod.ECompilerTerminate.isPrototypeOf($e)) {
          var E = $e;
        } else if (pas.SysUtils.Exception.isPrototypeOf($e)) {
          var E = $e;
          if (this.GetShowDebug()) this.FLog.LogExceptionBackTrace(E);
          throw $e;
        } else {
          if (this.GetShowDebug()) this.FLog.LogExceptionBackTrace(null);
          this.HandleJSException("[20181031190933] TPas2jsCompiler.Run",$e,false);
          throw $e;
        }
      };
    };
    this.Terminate = function (TheExitCode) {
      this.SetExitCode(TheExitCode);
      if (this.FLog !== null) this.FLog.Flush();
      throw $mod.ECompilerTerminate.$create("Create$1",[""]);
    };
    this.GetVersion = function (ShortVersion) {
      var Result = "";
      Result = (((pas.SysUtils.IntToStr(1) + ".") + pas.SysUtils.IntToStr(1)) + ".") + pas.SysUtils.IntToStr(1);
      if (!ShortVersion) Result += $mod.VersionExtra;
      return Result;
    };
    this.WriteHelp = function () {
      var Self = this;
      function w(s) {
        Self.WriteHelpLine(s);
      };
      var i = 0;
      var ParamMacro = null;
      Self.WriteLogo();
      Self.FLog.LogLn();
      if (Self.FCompilerExe !== "") {
        w(("Usage: " + Self.FCompilerExe) + " <your.pas>");
      } else {
        w("Usage: pas2js <your.pas>");
      };
      Self.FLog.LogLn();
      w("Options:");
      w("Put + after a boolean switch option to enable it, - to disable it");
      w("  @<x>    : Read compiler options from file <x> in addition to the default " + $mod.DefaultConfigFile);
      w("  -B      : Rebuild all");
      w("  -d<x>   : Defines the symbol <x>. Optional: -d<x>:=<value>");
      w("  -i<x>   : Write information and halt. <x> is a combination of the following:");
      w("    -iD   : Write compiler date");
      w("    -iSO  : Write compiler OS");
      w("    -iSP  : Write compiler host processor");
      w("    -iTO  : Write target platform");
      w("    -iTP  : Write target processor");
      w("    -iV   : Write short compiler version");
      w("    -iW   : Write full compiler version");
      w("    -ic   : Write list of supported JS processors usable by -P<x>");
      w("    -io   : Write list of supported optimizations usable by -Oo<x>");
      w("    -it   : Write list of supported targets usable by -T<x>");
      w("  -C<x>   : Code generation options. <x> is a combination of the following letters:");
      w("    o     : Overflow checking of integer operations");
      w("    r     : Range checking");
      w("    R     : Object checks. Verify method calls and object type casts.");
      w("  -F...   Set file names and paths:");
      w("   -Fe<x> : Redirect output to file <x>. UTF-8 encoded.");
      w("   -FE<x> : Set main output path to <x>");
      w("   -Fi<x> : Add <x> to include paths");
      w("   -FN<x> : add <x> to namespaces. Namespaces with trailing - are removed.");
      w('            Delphi calls this flag "unit scope names".');
      w("   -Fu<x> : Add <x> to unit paths");
      w("   -FU<x> : Set unit output path to <x>");
      w("  -I<x>   : Add <x> to include paths, same as -Fi");
      w("  -J...  Extra options of pas2js");
      w("   -Jc    : Write all JavaScript concatenated into the output file");
      w("   -Je<x> : Encode messages as <x>.");
      w("     -Jeconsole : Console codepage. This is the default.");
      w("     -Jesystem  : System codepage. On non Windows console and system are the same.");
      w("     -Jeutf-8   : Unicode UTF-8. Default when using -Fe.");
      w("     -JeJSON    : Output compiler messages as JSON. Logo etc are outputted as-is.");
      w("   -Ji<x> : Insert JS file <x> into main JS file. E.g. -Jirtl.js. Can be given multiple times. To remove a file name append a minus, e.g. -Jirtl.js-.");
      w("   -Jl    : lower case identifiers");
      w("   -Jm    : generate source maps");
      w('     -Jmsourceroot=<x> : use x as "sourceRoot", prefix URL for source file names.');
      w("     -Jmbasedir=<x> : write source file names relative to directory x.");
      w("     -Jminclude : include Pascal sources in source map.");
      w("     -Jmxssiheader : start source map with XSSI protection )]}', default.");
      w("     -Jm- : disable generating source maps");
      w("   -Jo<x> : Enable or disable extra option. The x is case insensitive:");
      w("     -JoSearchLikeFPC : search source files like FPC, default: search case insensitive.");
      w('     -JoUseStrict : add "use strict" to modules, default.');
      w("     -JoCheckVersion- : do not add rtl version check, default.");
      w("     -JoCheckVersion=main : insert rtl version check into main.");
      w("     -JoCheckVersion=system : insert rtl version check into system unit init.");
      w("     -JoCheckVersion=unit : insert rtl version check into every unit init.");
      w("   -Jpcmd<command> : Run postprocessor. For each generated js execute command passing the js as stdin and read the new js from stdout. This option can be added multiple times to call several postprocessors in succession.");
      w("   -Ju<x> : Add <x> to foreign unit paths. Foreign units are not compiled.");
      Self.WritePrecompiledFormats();
      w("  -l      : Write logo");
      w("  -MDelphi: Delphi 7 compatibility mode");
      w("  -MObjFPC: FPC's Object Pascal compatibility mode (default)");
      w("  -NS<x>  : obsolete: add <x> to namespaces. Same as -FN<x>");
      w("  -n      : Do not read the default config files");
      w('  -o<x>   : Change main JavaScript file to <x>, "." means stdout');
      w("  -O<x>   : Optimizations:");
      w("    -O-   : Disable optimizations");
      w("    -O1   : Level 1 optimizations (quick and debugger friendly)");
      w("    -Oo<x> : Enable or disable optimization. The x is case insensitive:");
      w("      -OoEnumNumbers[-] : write enum value as number instead of name. Default in -O1.");
      w("      -OoRemoveNotUsedPrivates[-] : Default is enabled");
      w("      -OoRemoveNotUsedDeclarations[-] : Default enabled for programs with -Jc");
      w("  -P<x>   : Set target processor. Case insensitive:");
      w("    -Pecmascript5 : default");
      w("    -Pecmascript6");
      w("  -S<x>   : Syntax options. <x> is a combination of the following letters:");
      w("    a     : Turn on assertions");
      w("    c     : Support operators like C (*=,+=,\/= and -=)");
      w("    d     : Same as -Mdelphi");
      w("    m     : Enables macro replacements");
      w("    2     : Same as -Mobjfpc (default)");
      w("  -SI<x>   : Set interface style to <x>");
      w("    -SIcom   : COM compatible interface (default)");
      w("    -SIcorba : CORBA compatible interface");
      w("  -T<x>   : Set target platform");
      w("    -Tbrowser : default");
      w("    -Tnodejs  : add pas.run(), includes -Jc");
      w("  -u<x>   : Undefines the symbol <x>");
      w("  -v<x>   : Be verbose. <x> is a combination of the following letters:");
      w("    e     : Show errors (default)");
      w("    w     : Show warnings");
      w("    n     : Show notes");
      w("    h     : Show hints");
      w("    i     : Show info");
      w("    l     : Show line numbers, needs -vi");
      w("    a     : Show everything");
      w("    0     : Show nothing (except errors)");
      w("    b     : Show file names with full path");
      w("    c     : Show conditionals");
      w("    t     : Show tried\/used files");
      w("    d     : Show debug notes and info, enables -vni");
      w("    q     : Show message numbers");
      w("    x     : Show used tools");
      w("    v     : Write pas2jsdebug.log with lots of debugging info");
      w("    z     : Write messages to stderr, -o. still uses stdout.");
      w("  -vm<x>,<y>: Do not show messages numbered <x> and <y>.");
      w("  -?      : Show this help");
      w("  -h      : Show this help");
      Self.FLog.LogLn();
      w("Macros: Format is $Name, $Name$ or $Name()");
      for (var $l1 = 0, $end2 = Self.FParamMacros.Count() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        ParamMacro = Self.FParamMacros.GetMacros(i);
        Self.FLog.LogRaw$1(["  $",ParamMacro.Name,pas.SysUtils.BoolToStr$1(ParamMacro.CanHaveParams,"()",""),": ",ParamMacro.Description]);
      };
    };
    this.WriteLogo = function () {
      if (this.FHasShownLogo) return;
      this.FHasShownLogo = true;
      this.WriteVersionLine();
      this.FLog.LogPlain("Copyright (c) 2018 Free Pascal team.");
      if ($mod.TP2jsCompilerOption.coShowInfos in this.FOptions) this.WriteEncoding();
    };
    this.WriteEncoding = function () {
      if (this.FHasShownEncoding) return;
      this.FHasShownEncoding = true;
      this.FLog.LogMsgIgnoreFilter(132,[this.FLog.GetEncodingCaption()]);
    };
    this.WriteVersionLine = function () {
      var s = "";
      s = "Pas2JS Compiler version " + this.$class.GetVersion(false);
      s = (((((s + " [") + "2019\/4\/25") + "] for ") + "Browser") + " ") + "ECMAScript5";
      this.FLog.LogPlain(s);
      if ($mod.TP2jsCompilerOption.coShowInfos in this.FOptions) this.WriteEncoding();
    };
    this.WriteOptions = function () {
      var co = 0;
      var fco = 0;
      this.WriteEncoding();
      this.FLog.LogMsgIgnoreFilter(130,[pas.FPPas2Js.PasToJsPlatformNames[this.FTargetPlatform]]);
      this.FLog.LogMsgIgnoreFilter(131,[pas.FPPas2Js.PasToJsProcessorNames[this.FTargetProcessor]]);
      this.FLog.LogMsgIgnoreFilter(102,[$mod.p2jscModeNames[this.FMode]]);
      this.FLog.LogMsgIgnoreFilter(137,[pas.PasTree.InterfaceTypeNames[this.FInterfaceType]]);
      for (co = 0; co <= 29; co++) this.FLog.LogMsgIgnoreFilter(101,[$mod.p2jscoCaption[co],pas.SysUtils.BoolToStr$1(co in this.FOptions,"enabled","disabled")]);
      for (fco = 0; fco <= 3; fco++) this.FLog.LogMsgIgnoreFilter(101,[pas.pas2jsfs.p2jsfcoCaption[fco],pas.SysUtils.BoolToStr$1(fco in this.FFS.FOptions,"enabled","disabled")]);
      if (this.GetSrcMapEnable()) {
        this.FLog.LogMsgIgnoreFilter(134,[pas.Pas2jsLogger.QuoteStr(this.FSrcMapSourceRoot,'"')]);
        this.FLog.LogMsgIgnoreFilter(135,[pas.Pas2jsLogger.QuoteStr(this.FSrcMapBaseDir,'"')]);
      };
    };
    this.WriteDefines = function () {
      var i = 0;
      var S = "";
      var M = null;
      for (var $l1 = 0, $end2 = this.FDefines.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        S = this.FDefines.Get(i);
        M = this.FDefines.GetObject(i);
        if (M !== null) {
          this.FLog.LogMsgIgnoreFilter(138,[S,pas.Pas2jsLogger.QuoteStr(M.FValue,'"')])}
         else this.FLog.LogMsgIgnoreFilter(103,[S]);
      };
    };
    this.WriteUsedTools = function () {
      if (this.FPostProcessorSupport != null) this.FPostProcessorSupport.WriteUsedTools();
    };
    this.WriteFoldersAndSearchPaths = function () {
      var I = 0;
      this.FFS.WriteFoldersAndSearchPaths();
      for (var $l1 = 0, $end2 = this.FNamespaces.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.FLog.LogMsgIgnoreFilter(104,["unit scope",this.FNamespaces.Get(I)]);
      };
      this.FLog.LogMsgIgnoreFilter(106,["output file",pas.Pas2jsLogger.QuoteStr(this.FMainJSFile,'"')]);
    };
    this.WriteInfo = function () {
      this.WriteVersionLine();
      this.FLog.LogLn();
      this.FLog.LogPlain("Compiler date      : " + $mod.GetCompiledDate());
      this.FLog.LogPlain("Compiler CPU target: " + $mod.GetCompiledTargetCPU());
      this.FLog.LogLn();
      this.FLog.LogPlain("Supported targets (targets marked with '{*}' are under development):");
      this.FLog.LogPlain$1(["  ",pas.FPPas2Js.PasToJsPlatformNames[pas.FPPas2Js.TPasToJsPlatform.PlatformBrowser],": webbrowser"]);
      this.FLog.LogPlain$1(["  ",pas.FPPas2Js.PasToJsPlatformNames[pas.FPPas2Js.TPasToJsPlatform.PlatformNodeJS],": Node.js"]);
      this.FLog.LogLn();
      this.FLog.LogPlain("Supported CPU instruction sets:");
      this.FLog.LogPlain("  ECMAScript5, ECMAScript6");
      this.FLog.LogLn();
      this.FLog.LogPlain("Recognized compiler and RTL features:");
      this.FLog.LogPlain("  RTTI,CLASSES,EXCEPTIONS,EXITCODE,RANDOM,DYNARRAYS,COMMANDARGS,");
      this.FLog.LogPlain("  UNICODESTRINGS");
      this.FLog.LogLn();
      this.FLog.LogPlain("Supported Optimizations:");
      this.FLog.LogPlain("  EnumNumbers");
      this.FLog.LogPlain("  RemoveNotUsedPrivates");
      this.FLog.LogLn();
      this.FLog.LogPlain("Supported Whole Program Optimizations:");
      this.FLog.LogPlain("  RemoveNotUsedDeclarations");
      this.FLog.LogLn();
      this.FLog.LogPlain("This program comes under the Library GNU General Public License");
      this.FLog.LogPlain("For more information read COPYING.FPC, included in this distribution");
      this.FLog.LogLn();
      this.FLog.LogPlain("Please report bugs in our bug tracker on:");
      this.FLog.LogPlain("                 http:\/\/bugs.freepascal.org");
      this.FLog.LogLn();
      this.FLog.LogPlain("More information may be found on our WWW pages (including directions");
      this.FLog.LogPlain("for mailing lists useful for asking questions or discussing potential");
      this.FLog.LogPlain("new features, etc.):");
      this.FLog.LogPlain("                 http:\/\/www.freepascal.org");
    };
    this.GetShownMsgTypes = function () {
      var Result = {};
      Result = rtl.createSet(pas.PScanner.TMessageType.mtFatal);
      if ($mod.TP2jsCompilerOption.coShowErrors in this.FOptions) Result = rtl.includeSet(Result,pas.PScanner.TMessageType.mtError);
      if ($mod.TP2jsCompilerOption.coShowWarnings in this.FOptions) Result = rtl.includeSet(Result,pas.PScanner.TMessageType.mtWarning);
      if ($mod.TP2jsCompilerOption.coShowNotes in this.FOptions) Result = rtl.includeSet(Result,pas.PScanner.TMessageType.mtNote);
      if ($mod.TP2jsCompilerOption.coShowHints in this.FOptions) Result = rtl.includeSet(Result,pas.PScanner.TMessageType.mtHint);
      if ($mod.TP2jsCompilerOption.coShowInfos in this.FOptions) Result = rtl.includeSet(Result,pas.PScanner.TMessageType.mtInfo);
      if ($mod.TP2jsCompilerOption.coShowDebug in this.FOptions) Result = rtl.includeSet(Result,pas.PScanner.TMessageType.mtDebug);
      return Result;
    };
    this.AddDefine = function (aName) {
      if (this.FDefines.IndexOf(aName) >= 0) return;
      this.FDefines.Add(aName);
    };
    this.AddDefine$1 = function (aName, Value) {
      var Index = 0;
      var M = null;
      Index = this.FDefines.IndexOf(aName);
      if (Index < 0) {
        this.FDefines.AddObject(aName,pas.PScanner.TMacroDef.$create("Create$1",[aName,Value]))}
       else {
        M = this.FDefines.GetObject(Index);
        if (M === null) {
          this.FDefines.PutObject(Index,pas.PScanner.TMacroDef.$create("Create$1",[aName,Value]))}
         else M.FValue = Value;
      };
    };
    this.RemoveDefine = function (aName) {
      var i = 0;
      var M = null;
      i = this.FDefines.IndexOf(aName);
      if (i !== -1) {
        M = this.FDefines.GetObject(i);
        M = rtl.freeLoc(M);
        this.FDefines.Delete(i);
      };
    };
    this.IsDefined = function (aName) {
      var Result = false;
      Result = this.FDefines.IndexOf(aName) >= 0;
      return Result;
    };
    this.SetOption = function (Flag, Enable) {
      if (Enable) {
        this.SetOptions(rtl.unionSet(this.FOptions,rtl.createSet(Flag)))}
       else this.SetOptions(rtl.diffSet(this.FOptions,rtl.createSet(Flag)));
    };
    this.GetUnitInfo = function (UseUnitName, InFileName, PCUSupport) {
      var Self = this;
      var Result = new $mod.TFindUnitInfo();
      var FoundPasFilename = "";
      var FoundPasUnitName = "";
      var FoundPasIsForeign = false;
      var FoundPCUFilename = "";
      var FoundPCUUnitName = "";
      function TryUnitName(TestUnitName) {
        var aFile = null;
        if (FoundPasFilename === "") {
          aFile = Self.FindLoadedUnit(TestUnitName);
          if (aFile !== null) {
            FoundPasFilename = aFile.FPasFileName;
            FoundPasUnitName = TestUnitName;
          } else {
            FoundPasFilename = Self.FFS.FindUnitFileName(TestUnitName,"",{get: function () {
                return FoundPasIsForeign;
              }, set: function (v) {
                FoundPasIsForeign = v;
              }});
            if (FoundPasFilename !== "") FoundPasUnitName = TestUnitName;
          };
        };
        if ((PCUSupport != null) && (FoundPCUFilename === "")) {
          FoundPCUFilename = PCUSupport.FindPCU(TestUnitName);
          if (FoundPCUFilename !== "") FoundPCUUnitName = TestUnitName;
        };
      };
      var aFile = null;
      var aNameSpace = "";
      var DefNameSpace = "";
      var i = 0;
      Result = new $mod.TFindUnitInfo();
      FoundPasFilename = "";
      FoundPasIsForeign = false;
      FoundPasUnitName = "";
      FoundPCUFilename = "";
      FoundPCUUnitName = "";
      if ((InFileName === "") && (pas.System.Pos(".",UseUnitName) < 1)) {
        DefNameSpace = Self.GetDefaultNamespace();
        if (DefNameSpace !== "") TryUnitName((DefNameSpace + ".") + UseUnitName);
        if ((FoundPasFilename === "") || (FoundPCUFilename === "")) {
          for (var $l1 = 0, $end2 = Self.FNamespaces.GetCount() - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            aNameSpace = Self.FNamespaces.Get(i);
            if (aNameSpace === "") continue;
            if (pas.SysUtils.SameText(aNameSpace,DefNameSpace)) continue;
            TryUnitName((aNameSpace + ".") + UseUnitName);
          };
        };
      };
      if (FoundPasFilename === "") {
        if (InFileName === "") {
          aFile = Self.FindLoadedUnit(UseUnitName);
          if (aFile !== null) {
            FoundPasFilename = aFile.FPasFileName;
            FoundPasUnitName = UseUnitName;
          };
        };
        if (FoundPasFilename === "") {
          FoundPasFilename = Self.FFS.FindUnitFileName(UseUnitName,InFileName,{get: function () {
              return FoundPasIsForeign;
            }, set: function (v) {
              FoundPasIsForeign = v;
            }});
          if (FoundPasFilename !== "") {
            if (InFileName !== "") {
              FoundPasUnitName = pas.PScanner.ExtractFilenameOnly(InFileName)}
             else FoundPasUnitName = UseUnitName;
          } else if (InFileName !== "") return Result;
        };
      };
      if ((PCUSupport != null) && (FoundPCUFilename === "")) {
        FoundPCUFilename = PCUSupport.FindPCU(UseUnitName);
        FoundPCUUnitName = UseUnitName;
      };
      if ((FoundPasFilename === "") && (FoundPCUFilename !== "")) {
        Result.FileName = FoundPCUFilename;
        Result.UnitName = FoundPCUUnitName;
        Result.isPCU = true;
        Result.isForeign = false;
      };
      if (FoundPasFilename !== "") {
        Result.FileName = FoundPasFilename;
        Result.UnitName = FoundPasUnitName;
        Result.isPCU = false;
        Result.isForeign = FoundPasIsForeign;
      };
      return Result;
    };
    this.FindUnitWithFile = function (PasFilename) {
      var Result = null;
      if (PasFilename === "") return null;
      Result = this.FFiles.FindKey(PasFilename);
      return Result;
    };
    this.LoadPasFile = function (UnitFilename, UseUnitName, aFile, isPCU) {
      var aPasTree = null;
      aFile.set(null);
      this.FLog.LogMsg(126,[this.FormatPath(UnitFilename)],"",0,0,!($mod.TP2jsCompilerOption.coShowLineNumbers in this.FOptions));
      aFile.set(this.FindUnitWithFile(UnitFilename));
      if (aFile.get() !== null) return;
      if ((UnitFilename === "") || !this.FFS.FileExists(UnitFilename)) {
        if (isPCU) {
          this.FLog.LogMsg(110,[pas.Pas2jsLogger.QuoteStr(UnitFilename,'"')],"",0,0,true)}
         else this.FLog.LogMsg(136,[pas.Pas2jsLogger.QuoteStr(UnitFilename,'"')],"",0,0,true);
        this.Terminate(4);
      };
      UnitFilename = this.ExpandFileName(UnitFilename);
      if (this.FFS.DirectoryExists(UnitFilename)) {
        this.FLog.LogMsg(111,[pas.Pas2jsLogger.QuoteStr(UnitFilename,'"')],"",0,0,true);
        this.Terminate(4);
      };
      aFile.set(this.CreateCompilerFile(UnitFilename));
      if (UseUnitName !== "") {
        if (pas.SysUtils.CompareText(pas.PScanner.ExtractFilenameOnly(UnitFilename),UseUnitName) === 0) {
          aFile.get().FPasUnitName = UseUnitName}
         else aFile.get().FPasUnitName = pas.PScanner.ExtractFilenameOnly(UnitFilename);
      };
      this.FFiles.Add(aFile.get(),true);
      aFile.get().FShowDebug = this.GetShowDebug();
      if (aFile.get().FIsMainFile) aFile.get().FJSFilename = this.GetResolvedMainJSFile();
      aPasTree = aFile.get().FPasResolver;
      if ($mod.TP2jsCompilerOption.coShowLineNumbers in this.FOptions) aPasTree.FScannerLogEvents = rtl.unionSet(aPasTree.FScannerLogEvents,rtl.createSet(pas.PScanner.TPScannerLogEvent.sleLineNumber));
      if ($mod.TP2jsCompilerOption.coShowConditionals in this.FOptions) aPasTree.FScannerLogEvents = rtl.unionSet(aPasTree.FScannerLogEvents,rtl.createSet(pas.PScanner.TPScannerLogEvent.sleConditionals));
      if (rtl.neSet(rtl.intersectSet(rtl.createSet($mod.TP2jsCompilerOption.coShowLineNumbers,$mod.TP2jsCompilerOption.coShowInfos,$mod.TP2jsCompilerOption.coShowDebug),this.FOptions),{})) aPasTree.FPParserLogEvents = rtl.unionSet(aPasTree.FPParserLogEvents,rtl.createSet(pas.PParser.TPParserLogEvent.pleInterface,pas.PParser.TPParserLogEvent.pleImplementation));
      aFile.get().CreateScannerAndParser(this.FFS.CreateResolver());
      if (this.GetShowDebug()) this.FLog.LogPlain$1(['Debug: Opening file "',UnitFilename,'"...']);
      if (aFile.get().FPCUSupport != null) {
        aFile.get().FFileResolver.SetBaseDirectory(pas.SysUtils.ExtractFilePath(UnitFilename));
        aFile.get().FPCUSupport.CreatePCUReader();
      } else {
        aFile.get().OpenFile(UnitFilename);
      };
    };
    this.FindUnitJSFileName = function (aFileName) {
      var Result = "";
      if (this.FAllJSIntoMainJS) {
        Result = this.GetResolvedMainJSFile()}
       else Result = this.FFS.FindUnitJSFileName(aFileName);
      return Result;
    };
    this.FindLoadedUnit = function (TheUnitName) {
      var Result = null;
      if (!pas.PasResolver.IsValidIdent(TheUnitName,true,false)) return null;
      Result = this.FUnits.FindKey(TheUnitName);
      return Result;
    };
    this.AddUsedUnit = function (aFile) {
      var OldFile = null;
      if (aFile.FPasUnitName === "") this.RaiseInternalError(20170504161347,('missing PasUnitName "' + aFile.FPasFileName) + '"');
      OldFile = this.FindLoadedUnit(aFile.FPasUnitName);
      if (OldFile !== null) {
        if (OldFile !== aFile) this.RaiseInternalError(20170504161354,((((('duplicate unit "' + OldFile.FPasUnitName) + '" "') + aFile.FPasFileName) + '" "') + OldFile.FPasFileName) + '"');
      } else {
        this.FUnits.Add(aFile,true);
      };
    };
    this.ExpandFileName = function (Filename) {
      var Result = "";
      Result = this.FFS.ExpandFileName(Filename);
      return Result;
    };
  });
  this.GetCompiledDate = function () {
    var Result = "";
    Result = "2019\/4\/25";
    return Result;
  };
  this.GetCompiledVersion = function () {
    var Result = "";
    Result = "1.1.1";
    return Result;
  };
  this.GetCompiledTargetOS = function () {
    var Result = "";
    Result = pas.SysUtils.LowerCase("Browser");
    return Result;
  };
  this.GetCompiledTargetCPU = function () {
    var Result = "";
    Result = pas.SysUtils.LowerCase("ECMAScript5");
    return Result;
  };
},["pas2jsutils"]);
rtl.module("pas2jswebcompiler",["System","Classes","SysUtils","pas2jsfs","PasUseAnalyzer","Pas2jsCompiler","FPPJsSrcMap","webfilecache"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TPas2JSWebcompiler",pas.Pas2jsCompiler.TPas2jsCompiler,function () {
    this.GetWebFS = function () {
      var Result = null;
      Result = this.FFS;
      return Result;
    };
    this.DoWriteJSFile = function (DestFilename, aWriter) {
      var Result = false;
      var S = "";
      S = aWriter.FBuffer.join("");
      this.GetWebFS().SetFileContent(DestFilename,S);
      Result = true;
      return Result;
    };
    this.CreateSetOfCompilerFiles = function (keyType) {
      var Result = null;
      var $tmp1 = keyType;
      if ($tmp1 === pas.pas2jsfs.TKeyCompareType.kcFilename) {
        Result = pas.PasUseAnalyzer.TPasAnalyzerKeySet.$create("Create$1",[$impl.Pas2jsCompilerFile_FilenameToKeyName,$impl.PtrFilenameToKeyName])}
       else if ($tmp1 === pas.pas2jsfs.TKeyCompareType.kcUnitName) {
        Result = pas.PasUseAnalyzer.TPasAnalyzerKeySet.$create("Create$1",[$impl.Pas2jsCompilerFile_UnitnameToKeyName,$impl.PtrUnitnameToKeyName])}
       else {
        throw pas.pas2jsfs.EPas2jsFS.$create("CreateFmt",["Internal Unknown key type: %d",[keyType]]);
      };
      return Result;
    };
    this.CreateFS = function () {
      var Result = null;
      Result = pas.webfilecache.TPas2jsWebFS.$create("Create$1");
      return Result;
    };
  });
},["JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.Pas2jsCompilerFile_FilenameToKeyName = function (Item) {
    var Result = "";
    Result = pas.SysUtils.LowerCase(Item.FPasFileName);
    return Result;
  };
  $impl.PtrUnitnameToKeyName = function (Item) {
    var Result = "";
    Result = pas.SysUtils.LowerCase(Item);
    return Result;
  };
  $impl.Pas2jsCompilerFile_UnitnameToKeyName = function (Item) {
    var Result = "";
    Result = pas.SysUtils.LowerCase(Item.FPasUnitName);
    return Result;
  };
  $impl.PtrFilenameToKeyName = function (FilenameAsPtr) {
    var Result = "";
    Result = pas.SysUtils.LowerCase(FilenameAsPtr);
    return Result;
  };
});
rtl.module("UtilsJSCompile",["System","Classes","SysUtils","XCode","webfilecache","pas2jswebcompiler"],function () {
  "use strict";
  var $mod = this;
  this.WriteIncFile = function (Compiler, IncName, EventType, IncPath, MainCode, IncCode) {
    var FileName = "";
    if (EventType !== "") IncName = (IncName + "__") + EventType;
    FileName = IncName + ".inc";
    Compiler.GetWebFS().SetFileContent(FileName,IncCode.GetTextStr());
    MainCode.get().Add(("{$I " + IncName) + ".inc}");
  };
  this.LoadIncludeFile = function (Compiler, FileName, IncPath) {
    var Result = null;
    var tmp1 = null;
    var tmp = "";
    tmp1 = pas.Classes.TStringList.$create("Create$1");
    tmp = Compiler.GetWebFS().GetFileContent(FileName);
    tmp1.SetTextStr(tmp);
    Result = tmp1;
    return Result;
  };
  rtl.createClass($mod,"TWebCompilerObj",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FCompiler = null;
      this.FCodeEditor = null;
    };
    this.$final = function () {
      this.FCompiler = undefined;
      this.FCodeEditor = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.DoLog = function (Sender, Msg) {
      if (this.FCodeEditor !== null) this.FCodeEditor.SetMessageLines((this.FCodeEditor.GetMessageLines() + pas.System.LineEnding) + Msg);
    };
    this.Create$1 = function () {
      this.FCompiler = pas.pas2jswebcompiler.TPas2JSWebcompiler.$create("Create$1");
    };
  });
  this.MyWebCompiler = null;
  this.JSOutput = "";
  this.eventsinterfacepas = "";
  this.interfacetypespas = "";
  this.classespas = "";
  this.contnrspas = "";
  this.dateutilspas = "";
  this.jspas = "";
  this.mathpas = "";
  this.rtlconstspas = "";
  this.rttipas = "";
  this.strutilspas = "";
  this.systempas = "";
  this.sysutilspas = "";
  this.typespas = "";
  this.typinfopas = "";
  this.LoadRTLFilesForPas2JS = function (lWebFS) {
    // minimal required rtl set....
        //lWebFS.SetFileContent('system.pas',pas.UtilsJSCompile.systempas);
        //lWebFS.SetFileContent('sysutils.pas',pas.UtilsJSCompile.sysutilspas);
        //lWebFS.SetFileContent('classes.pas',pas.UtilsJSCompile.classespas);
        //lWebFS.SetFileContent('rtlconsts.pas',pas.UtilsJSCompile.rtlconstspas);
        //lWebFS.SetFileContent('js.pas',pas.UtilsJSCompile.jspas);
        //lWebFS.SetFileContent('types.pas',pas.UtilsJSCompile.typespas);
    
        // common rtl set....
        lWebFS.SetFileContent('classes.pas',pas.UtilsJSCompile.classespas);
        lWebFS.SetFileContent('contnrs.pas',pas.UtilsJSCompile.contnrspas);
        lWebFS.SetFileContent('dateutils.pas',pas.UtilsJSCompile.dateutilspas);
        lWebFS.SetFileContent('js.pas',pas.UtilsJSCompile.jspas);
        lWebFS.SetFileContent('math.pas',pas.UtilsJSCompile.mathpas);
        lWebFS.SetFileContent('rtlconsts.pas',pas.UtilsJSCompile.rtlconstspas);
        lWebFS.SetFileContent('rtti.pas',pas.UtilsJSCompile.rttipas);
        lWebFS.SetFileContent('strutils.pas',pas.UtilsJSCompile.strutilspas);
        lWebFS.SetFileContent('system.pas',pas.UtilsJSCompile.systempas);
        lWebFS.SetFileContent('sysutils.pas',pas.UtilsJSCompile.sysutilspas);
        lWebFS.SetFileContent('types.pas',pas.UtilsJSCompile.typespas);
        lWebFS.SetFileContent('typinfo.pas',pas.UtilsJSCompile.typinfopas);
    
      //  lWebFS.SetFileContent('timer.pas',pas.UtilsJSCompile.timerpas);
      //  lWebFS.SetFileContent('nodejs.pas',pas.UtilsJSCompile.nodejspas);
      //  lWebFS.SetFileContent('objpas.pas',pas.UtilsJSCompile.objpaspas);
      //  lWebFS.SetFileContent('libjquery.pas',pas.UtilsJSCompile.libjquerypas);
      //  lWebFS.SetFileContent('hotreloadclient.pas',pas.UtilsJSCompile.hotreloadclientpas);
      //  lWebFS.SetFileContent('class2pas.pas',pas.UtilsJSCompile.class2paspas);
      //  lWebFS.SetFileContent('browserconsole.pas',pas.UtilsJSCompile.browserconsolepas);
      //  lWebFS.SetFileContent('web.pas',pas.UtilsJSCompile.webpas);
      //  lWebFS.SetFileContent('webaudio.pas',pas.UtilsJSCompile.webaudiopas);
      //  lWebFS.SetFileContent('webbluetooth.pas',pas.UtilsJSCompile.webbluetoothpas);
      //  lWebFS.SetFileContent('webgl.pas',pas.UtilsJSCompile.webglpas);
      //  lWebFS.SetFileContent('webrouter.pas',pas.UtilsJSCompile.webrouterpas);
  };
  this.RequiredFolders = null;
  this.gpujs = "";
  $mod.$init = function () {
    $mod.MyWebCompiler = $mod.TWebCompilerObj.$create("Create$1");
    $mod.RequiredFolders = pas.Classes.TStringList.$create("Create$1");
  };
});
rtl.module("XButton",["System","Classes","SysUtils","NodeUtils","StringUtils","HTMLUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXButton",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("ButtonClick");
    };
    this.GetCaption = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Caption",true).AttribValue;
      return Result;
    };
    this.GetButtonWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ButtonWidth",true).AttribValue;
      return Result;
    };
    this.GetEnabled = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("Enabled",true).AttribValue);
      return Result;
    };
    this.SetCaption = function (AValue) {
      this.myNode.SetAttributeValue$2("Caption",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         //alert('set button caption '+AValue);
         ob.value=AValue;  };
    };
    this.SetEnabled = function (AValue) {
      this.myNode.SetAttributeValue$1("Enabled",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
      if (AValue==false) {ob.disabled = true}
      else {ob.disabled = false }
      };
    };
    this.SetButtonWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("ButtonWidth",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("Caption",3,rtl.string,"GetCaption","SetCaption");
    $r.addProperty("Enabled",3,rtl.boolean,"GetEnabled","SetEnabled");
    $r.addProperty("ButtonWidth",3,rtl.string,"GetButtonWidth","SetButtonWidth");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Caption","String","Press Me","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Enabled","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ButtonWidth","String","","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXButton","LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXButton","LabelText");
    pas.WrapperPanel.SuppressDesignerProperty("TXButton","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty("TXButton","ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty("TXButton","ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXButton";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var xItemText = "";
    var xEnabled = "";
    var marginString = "";
    xItemText = MyNode.GetAttribute("Caption",true).AttribValue;
    xEnabled = MyNode.GetAttribute("Enabled",true).AttribValue;
    marginString = ((((((("margin:" + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + ";";
    try{
    
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var EnabledString = '';
        if (xEnabled=='False') { EnabledString = ' disabled ';}
    
        var typestring="'ButtonClick'";
        HTMLString = '<input type="button" id='+MyObjectName+' style="display: inline-block; '+
                                                                      marginString+'" '+
                                                                      '" '+
        'onclick="event.stopPropagation(); pas.Events.handleEvent(null,'+typestring+','+NodeIDString+', '+NodeIDString+');"'+
                            '  '+EnabledString+' value="'+xItemText+'"> ';
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
        //alert('created button widget '+HTMLString);
    
      }
      catch(err) { alert(err.message+'  in XButton.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXButton.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XVBox",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXVBox",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetInheritColor = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("InheritColor",true).AttribValue);
      return Result;
    };
    this.SetInheritColor = function (AValue) {
      var clr = "";
      var parentNode = null;
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("InheritColor",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
        parentNode = pas.NodeUtils.FindParentOfNode$1(pas.NodeUtils.SystemNodeTree,this.myNode);
        if (parentNode !== null) {
          if (AValue === true) {
            clr = parentNode.GetAttribute("BgColor",true).AttribValue;
            this.myNode.SetAttributeValue$1("BgColor",clr,"Color");
            var ob = document.getElementById(this.NodeName);
            if (ob!=null) {
              if (AValue==true ) {
                 ob.style.backgroundColor='inherit';
            } };
          } else {
            clr = this.myNode.GetAttribute("BgColor",true).AttribValue;
            var ob = document.getElementById(this.NodeName);
            if (ob!=null) {
              if (AValue==true ) {
                 ob.style.backgroundColor=clr;
            } };
          };
        };
      };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("InheritColor",3,rtl.boolean,"GetInheritColor","SetInheritColor");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerWidth","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerHeight","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BgColor","Color","#FFFFFF","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"InheritColor","Boolean","False","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelText");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXVBox";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var OnClickString = "";
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', \'\');" ';
    try{
          var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
          var HTMLString='';
          var MyObjectName=ScreenObjectName+'Contents';
    
          HTMLString = '<div  id="'+MyObjectName+'" class="vboxNoStretch" '  +
                         ' style="height:100%;width:100%; "' +
                         OnClickString +
                         '></div>  ';
    
          var wrapper=document.getElementById(ScreenObjectName);
          wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
      }catch(err) { alert(err.message+'  in XVBox.CreateVHBox');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, Nodename) {
    var Result = null;
    Result = $mod.TXVBox.$create("Create$3",[MyForm,Nodename]);
    return Result;
  };
});
rtl.module("XMemo",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXMemo",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
      this.myEventTypes.Add("MemoPaste");
    };
    this.GetItemValue = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ItemValue",true).AttribValue;
      return Result;
    };
    this.GetReadOnly = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("ReadOnly",true).AttribValue);
      return Result;
    };
    this.GetMemoWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("MemoWidth",true).AttribValue;
      return Result;
    };
    this.GetMemoHeight = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("MemoHeight",true).AttribValue;
      return Result;
    };
    this.SetItemValue = function (AValue) {
      this.myNode.SetAttributeValue$2("ItemValue",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.value=AValue;  };
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        ob.readOnly = AValue  };
    };
    this.SetMemoWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("MemoWidth",AValue);
      var ob = document.getElementById(this.NodeName);
      //  if (ob==null) {alert(this.NodeName+'  not found');}
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.SetMemoHeight = function (AValue) {
      this.myNode.SetAttributeValue$2("MemoHeight",AValue);
      var ob = document.getElementById(this.NodeName);
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'H',AValue);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("ItemValue",3,rtl.string,"GetItemValue","SetItemValue");
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
    $r.addProperty("MemoHeight",3,rtl.string,"GetMemoHeight","SetMemoHeight");
    $r.addProperty("MemoWidth",3,rtl.string,"GetMemoWidth","SetMemoWidth");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerWidth","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerHeight","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MemoWidth","String","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MemoHeight","String","100","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Top","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Memo Box","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ItemValue","String","....text....","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXMemo","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXMemo";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var LabelText = "";
    var ReadOnly = false;
    var OnChangeString = "";
    var OnClickString = "";
    var OnPasteString = "";
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    ReadOnly = pas.SysUtils.StrToBool(MyNode.GetAttribute("ReadOnly",true).AttribValue);
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value);" ';
    OnChangeString = (((('onchange="pas.NodeUtils.SetInterfaceProperty(\'' + ScreenObjectName) + "','ItemValue',this.value); ") + "pas.Events.handleEvent(null,'Change','") + ScreenObjectName) + '\', this.value, \'ItemValue\');" ';
    OnPasteString = ('onpaste="var pdata=(event.clipboardData || window.clipboardData).getData(\'text\');pas.Events.handleEvent(null,\'MemoPaste\',\'' + ScreenObjectName) + '\', pdata);" ';
    try{
    
    
    
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var ReadOnlyString = '';
        if (ReadOnly==true) { ReadOnlyString = ' readonly ';}
    
        var Pastetypestring="'MemoPaste'";
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
    
    
        var MemoString ='<textarea  id='+MyObjectName+' '+
                            OnPasteString +
                            OnClickString +
                            OnChangeString +
                            ' style="display:inline-block; padding:1px; height:100%; width:100%;"  >'+
                           '</textarea> ';
    
        HTMLString = MemoString+labelstring;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
      }
      catch(err) { alert(err.message+'  in XMemo.CreateXMemo');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXMemo.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XGPUCanvas",["System","Classes","SysUtils","StringUtils","NodeUtils","XIFrame","UtilsJSCompile","XForm","XCode","XButton","XVBox","XTabControl","XMemo","EventsInterface","webfilecache","pas2jswebcompiler","WrapperPanel","Events"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TGPUNumParam = function (s) {
    if (s) {
      this.ParamName = s.ParamName;
      this.ParamValue = s.ParamValue;
    } else {
      this.ParamName = "";
      this.ParamValue = [];
    };
    this.$equal = function (b) {
      return (this.ParamName === b.ParamName) && (this.ParamValue === b.ParamValue);
    };
  };
  $mod.$rtti.$Record("TGPUNumParam",{}).addFields("ParamName",rtl.string,"ParamValue",pas.EventsInterface.$rtti["TNumArray"]);
  $mod.$rtti.$DynArray("TGPUNumParams",{eltype: $mod.$rtti["TGPUNumParam"]});
  this.TGPUImgParam = function (s) {
    if (s) {
      this.ParamName = s.ParamName;
      this.ParamValue = s.ParamValue;
    } else {
      this.ParamName = "";
      this.ParamValue = [];
    };
    this.$equal = function (b) {
      return (this.ParamName === b.ParamName) && (this.ParamValue === b.ParamValue);
    };
  };
  $mod.$rtti.$Record("TGPUImgParam",{}).addFields("ParamName",rtl.string,"ParamValue",pas.EventsInterface.$rtti["TImgArray"]);
  $mod.$rtti.$DynArray("TGPUImgParams",{eltype: $mod.$rtti["TGPUImgParam"]});
  this.TGPUIntConst = function (s) {
    if (s) {
      this.ConstName = s.ConstName;
      this.ConstValue = s.ConstValue;
    } else {
      this.ConstName = "";
      this.ConstValue = 0;
    };
    this.$equal = function (b) {
      return (this.ConstName === b.ConstName) && (this.ConstValue === b.ConstValue);
    };
  };
  $mod.$rtti.$Record("TGPUIntConst",{}).addFields("ConstName",rtl.string,"ConstValue",rtl.longint);
  $mod.$rtti.$DynArray("TGPUIntConsts",{eltype: $mod.$rtti["TGPUIntConst"]});
  rtl.createClass($mod,"TXGPUCanvas",pas.XIFrame.TXIFrame,function () {
    this.$init = function () {
      pas.XIFrame.TXIFrame.$init.call(this);
      this.ParamNumArray = [];
      this.ParamImgArray = [];
      this.ConstIntArray = [];
      this.GeneratedHTML = "";
    };
    this.$final = function () {
      this.ParamNumArray = undefined;
      this.ParamImgArray = undefined;
      this.ConstIntArray = undefined;
      pas.XIFrame.TXIFrame.$final.call(this);
    };
    this.GetAnimationCode = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("AnimationCode",true).AttribValue;
      return Result;
    };
    this.GetActive = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("Active",true).AttribValue);
      return Result;
    };
    this.GetAnimated = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("Animated",true).AttribValue);
      return Result;
    };
    this.GetParamNumList = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ParamNumList",true).AttribValue;
      return Result;
    };
    this.GetConstIntList = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ConstIntList",true).AttribValue;
      return Result;
    };
    this.GetParamImgList = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ParamImgList",true).AttribValue;
      return Result;
    };
    this.GetMaxIterations = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("MaxIterations",true).AttribValue);
      return Result;
    };
    this.GetStartIteration = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("StartIteration",true).AttribValue);
      return Result;
    };
    this.GetNumFrames = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("NumFrames",true).AttribValue);
      return Result;
    };
    this.GetMaxFramesPerSec = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("MaxFramesPerSec",true).AttribValue);
      return Result;
    };
    this.SetAnimationCode = function (AValue) {
      var GPUString = "";
      var FullString = "";
      GPUString = AValue;
      this.myNode.SetAttributeValue$2("AnimationCode",GPUString);
      if ((this.GetActive() === true) && !pas.NodeUtils.StartingUp) {
        FullString = this.FullXMLString();
        this.myNode.SetAttributeValue$2("HTMLSource",FullString);
        pas.StringUtils.ShowMessage("SetAnimationCode RedisplayFrame");
        this.RedisplayFrame();
      };
    };
    this.SetActive = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("Active",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
        if ((pas.NodeUtils.StartingUp === false) && (AValue === true)) {
          this.StartMyGPU();
        } else this.StopMyGPU();
      };
    };
    this.SetAnimated = function (AValue) {
      this.myNode.SetAttributeValue$1("Animated",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
    };
    this.SetParamNumList = function (AValue) {
      var pNames = null;
      var i = 0;
      this.myNode.SetAttributeValue$1("ParamNumList",AValue,"String");
      this.ParamNumArray = rtl.arraySetLength(this.ParamNumArray,$mod.TGPUNumParam,0);
      if (AValue !== "") {
        pNames = pas.Classes.TStringList.$create("Create$1");
        pNames.FStrictDelimiter = true;
        pNames.SetLineBreak(",");
        pNames.SetTextStr(AValue);
        this.ParamNumArray = rtl.arraySetLength(this.ParamNumArray,$mod.TGPUNumParam,pNames.GetCount());
        for (var $l1 = 0, $end2 = pNames.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          this.ParamNumArray[i].ParamName = pNames.Get(i);
          this.ParamNumArray[i].ParamValue = rtl.arraySetLength(this.ParamNumArray[i].ParamValue,0.0,1);
          this.ParamNumArray[i].ParamValue[0] = 0;
        };
        pNames = rtl.freeLoc(pNames);
      };
    };
    this.SetConstIntList = function (AValue) {
      var pNames = null;
      var i = 0;
      this.myNode.SetAttributeValue$1("ConstIntList",AValue,"String");
      this.ConstIntArray = rtl.arraySetLength(this.ConstIntArray,$mod.TGPUIntConst,0);
      if (AValue !== "") {
        pNames = pas.Classes.TStringList.$create("Create$1");
        pNames.FStrictDelimiter = true;
        pNames.SetLineBreak(",");
        pNames.SetTextStr(AValue);
        this.ConstIntArray = rtl.arraySetLength(this.ConstIntArray,$mod.TGPUIntConst,pNames.GetCount());
        for (var $l1 = 0, $end2 = pNames.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          this.ConstIntArray[i].ConstName = pNames.Get(i);
          this.ConstIntArray[i].ConstValue = 0;
        };
        pNames = rtl.freeLoc(pNames);
      };
    };
    this.SetParamImgList = function (AValue) {
      var pNames = null;
      var i = 0;
      this.myNode.SetAttributeValue$1("ParamImgList",AValue,"String");
      this.ParamImgArray = rtl.arraySetLength(this.ParamImgArray,$mod.TGPUImgParam,0);
      if (AValue !== "") {
        pNames = pas.Classes.TStringList.$create("Create$1");
        pNames.FStrictDelimiter = true;
        pNames.SetLineBreak(",");
        pNames.SetTextStr(AValue);
        this.ParamImgArray = rtl.arraySetLength(this.ParamImgArray,$mod.TGPUImgParam,pNames.GetCount());
        for (var $l1 = 0, $end2 = pNames.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          this.ParamImgArray[i].ParamName = pNames.Get(i);
          this.ParamImgArray[i].ParamValue = rtl.arraySetLength(this.ParamImgArray[i].ParamValue,"",1);
        };
        pNames = rtl.freeLoc(pNames);
      };
    };
    this.SetMaxIterations = function (AValue) {
      this.myNode.SetAttributeValue$1("MaxIterations",pas.SysUtils.IntToStr(AValue),"String");
    };
    this.SetStartIteration = function (AValue) {
      this.myNode.SetAttributeValue$1("StartIteration",pas.SysUtils.IntToStr(AValue),"String");
    };
    this.SetNumFrames = function (AValue) {
      this.myNode.SetAttributeValue$1("NumFrames",pas.SysUtils.IntToStr(AValue),"String");
    };
    this.SetMaxFramesPerSec = function (AValue) {
      this.myNode.SetAttributeValue$1("MaxFramesPerSec",pas.SysUtils.IntToStr(AValue),"String");
    };
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("OnStart");
    };
    this.SetPropertyDefaults = function () {
      var FormNode = null;
      var TabControlNode = null;
      var TabPageNode1 = null;
      var TabPageNode2 = null;
      var EditorNode = null;
      var VBNode = null;
      var BtnNode = null;
      var MemoNode = null;
      var VBNode2 = null;
      var BtnNode2 = null;
      var DoneBtn = null;
      var LaunchBtn = null;
      var VB = null;
      var vb2 = null;
      if ($mod.GPUEditorForm === null) {
        FormNode = pas.WrapperPanel.AddDynamicWidget("TXForm",null,null,"XGPUCodeEditorForm","Left",-1);
        $mod.GPUEditorForm = FormNode;
        $mod.GPUEditorForm.fName = "XGPUCodeEditorForm";
        $mod.GPUEditorForm.SetCaption("XGPUCanvas Animation Code Editor");
        $mod.GPUEditorForm.SetTop(100);
        $mod.GPUEditorForm.SetLeft(100);
        $mod.GPUEditorForm.SetHeight(500);
        $mod.GPUEditorForm.SetWidth(800);
        FormNode.IsDynamic = false;
        pas.NodeUtils.AddChildToParentNode({p: pas.NodeUtils, get: function () {
            return this.p.SystemNodeTree;
          }, set: function (v) {
            this.p.SystemNodeTree = v;
          }},{get: function () {
            return FormNode;
          }, set: function (v) {
            FormNode = v;
          }},-1);
        TabControlNode = pas.WrapperPanel.AddDynamicWidget("TXTabControl",$mod.GPUEditorForm,FormNode,"XGPUTabControl","Left",-1);
        TabControlNode.IsDynamic = false;
        $mod.GPUEditorTabControl = TabControlNode.ScreenObject;
        $mod.GPUEditorTabControl.SetContainerHeight("100%");
        $mod.GPUEditorTabControl.SetContainerWidth("100%");
        TabPageNode1 = pas.WrapperPanel.AddDynamicWidget("TXTabSheet",$mod.GPUEditorForm,TabControlNode,"XGPUTabSheet1","Left",-1);
        TabPageNode2 = pas.WrapperPanel.AddDynamicWidget("TXTabSheet",$mod.GPUEditorForm,TabControlNode,"XGPUTabSheet2","Left",-1);
        TabPageNode1.IsDynamic = false;
        TabPageNode2.IsDynamic = false;
        TabPageNode1.ScreenObject.SetCaption("Frame Animation Code");
        TabPageNode2.ScreenObject.SetCaption("Generated HTML");
        TabControlNode.ScreenObject.SetmyTabIndex(0);
        VBNode = pas.WrapperPanel.AddDynamicWidget("TXVBox",$mod.GPUEditorForm,TabPageNode1,"XGPUVBox","Left",-1);
        VB = VBNode.ScreenObject;
        VB.SetContainerHeight("100%");
        VB.SetBorder(false);
        VBNode.IsDynamic = false;
        EditorNode = pas.WrapperPanel.AddDynamicWidget("TXCode",$mod.GPUEditorForm,VBNode,"XGPUCodeEditor","Left",-1);
        $mod.GPUCodeEditor = EditorNode.ScreenObject;
        $mod.GPUCodeEditor.SetContainerHeight("90%");
        $mod.GPUCodeEditor.SetContainerWidth("100%");
        $mod.GPUCodeEditor.SetMessagesHeight("30%");
        $mod.GPUCodeEditor.SetLabelText("");
        $mod.GPUCodeEditor.myNode.RegisterEvent("ClickMessage",rtl.createCallback($mod.GPUEvents,"GPUCodeEditHandleClickMessage"));
        EditorNode.IsDynamic = false;
        BtnNode = pas.WrapperPanel.AddDynamicWidget("TXButton",$mod.GPUEditorForm,VBNode,"XGPUDoneBtn","Left",-1);
        DoneBtn = BtnNode.ScreenObject;
        DoneBtn.SetCaption("Done");
        DoneBtn.myNode.RegisterEvent("ButtonClick",rtl.createCallback($mod.GPUEvents,"CloseCodeEditor"));
        BtnNode.IsDynamic = false;
        VBNode2 = pas.WrapperPanel.AddDynamicWidget("TXVBox",$mod.GPUEditorForm,TabPageNode2,"XGPUVBox2","Left",-1);
        vb2 = VBNode2.ScreenObject;
        vb2.SetContainerHeight("100%");
        vb2.SetBorder(false);
        VBNode2.IsDynamic = false;
        MemoNode = pas.WrapperPanel.AddDynamicWidget("TXMemo",$mod.GPUEditorForm,VBNode2,"XGPUHTMLMemo","Left",-1);
        $mod.GPUMemo = MemoNode.ScreenObject;
        $mod.GPUMemo.SetMemoHeight("85%");
        $mod.GPUMemo.SetMemoWidth("100%");
        $mod.GPUMemo.SetLabelPos("Top");
        $mod.GPUMemo.SetLabelText("HTML generated at the last GPU activation");
        MemoNode.IsDynamic = false;
        BtnNode2 = pas.WrapperPanel.AddDynamicWidget("TXButton",$mod.GPUEditorForm,VBNode2,"XGPULaunchBtn","Left",-1);
        LaunchBtn = BtnNode2.ScreenObject;
        LaunchBtn.SetCaption("Launch HTML in browser");
        LaunchBtn.myNode.RegisterEvent("ButtonClick",rtl.createCallback($mod.GPUEvents,"LaunchGPUHTML"));
        LaunchBtn.SetHint("Launch the generated GPU HTML in a separate browser page to aid diagnostics");
        BtnNode2.IsDynamic = false;
      };
    };
    this.StartMyGPU = function () {
      var h = 0;
      var w = 0;
      h = this.GetActualHeight();
      w = this.GetActualWidth();
      pas.Events.handleEvent$2("OnStart",this.myNode.NodeName,"");
      this.setupGPUPage();
    };
    this.StopMyGPU = function () {
      var doJS = "";
      doJS = "clearInterval(GPUIntervalRunner);";
      var ob=document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        ob.contentWindow.postMessage({"objid":this.NodeName, "mtype":"execCode", "code":doJS},"*");
        };
      this.SetHTMLSource("");
    };
    this.BuildPascalAnimationUnit = function (Compiler) {
      var Result = "";
      var PascalHeader = null;
      var UserCodeParameterList = "";
      var TheAnimationCode = null;
      var i = 0;
      PascalHeader = pas.Classes.TStringList.$create("Create$1");
      PascalHeader.Add(" unit GPUCode; ");
      PascalHeader.Add("interface");
      PascalHeader.Add("uses Classes, SysUtils;");
      PascalHeader.Add(" type ");
      PascalHeader.Add("     TNumArray = array of real;");
      PascalHeader.Add("     TImgArray = array of string;");
      PascalHeader.Add("     TConstantsRecord=record");
      for (var $l1 = 0, $end2 = rtl.length(this.ConstIntArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        PascalHeader.Add(((("       const " + this.ConstIntArray[i].ConstName) + ":integer=") + pas.SysUtils.IntToStr(this.ConstIntArray[i].ConstValue)) + ";");
      };
      PascalHeader.Add("     end;");
      PascalHeader.Add("     TXThread = record\t");
      PascalHeader.Add("       x,y,z:integer;\t");
      PascalHeader.Add("     end;\t");
      PascalHeader.Add("     TGPUThread = class\t");
      PascalHeader.Add("        thread:TXThread;\t");
      PascalHeader.Add("        constants:TConstantsRecord;     \t");
      PascalHeader.Add("        procedure color(r,g,b,a:real); virtual; abstract;\t");
      PascalHeader.Add("     end;\t");
      PascalHeader.Add("     TFuncNotSupported = record\t");
      PascalHeader.Add("          dummy:string; \t");
      PascalHeader.Add("     end;\t");
      PascalHeader.Add("     TFuncNotSupported_Use_log = record\t");
      PascalHeader.Add("          dummy:string;\t");
      PascalHeader.Add("     end; \t");
      PascalHeader.Add("     TFuncNotSupported_Use_atan = record\t");
      PascalHeader.Add("          dummy:string;\t");
      PascalHeader.Add("     end;\t");
      PascalHeader.Add("   implementation\t");
      PascalHeader.Add("   function ln(b:TFuncNotSupported_Use_Log):TFuncNotSupported_Use_Log;\t");
      PascalHeader.Add("   begin\t");
      PascalHeader.Add('    asm alert(" This function is not supported by GPUJS"); end;\t');
      PascalHeader.Add("   end;\t");
      PascalHeader.Add("   function arctan(b:TFuncNotSupported_Use_atan):TFuncNotSupported_Use_atan;\t");
      PascalHeader.Add("   begin\t");
      PascalHeader.Add('    asm alert(" This function is not supported by GPUJS"); end;\t');
      PascalHeader.Add("   end;\t");
      PascalHeader.Add("   function chr(b:TFuncNotSupported):TFuncNotSupported;\t");
      PascalHeader.Add("   begin\t");
      PascalHeader.Add('    asm alert(" This function is not supported by GPUJS"); end;\t');
      PascalHeader.Add("   end;\t");
      PascalHeader.Add("   function Ord(  X: TFuncNotSupported):TFuncNotSupported;\t");
      PascalHeader.Add("   begin\t");
      PascalHeader.Add('    asm alert(" This function is not supported by GPUJS"); end;\t');
      PascalHeader.Add("   end;\t");
      PascalHeader.Add("   function pred( X: TFuncNotSupported):TFuncNotSupported;\t");
      PascalHeader.Add("   begin\t");
      PascalHeader.Add('    asm alert(" This function is not supported by GPUJS"); end;\t');
      PascalHeader.Add("   end;\t");
      PascalHeader.Add("   function Succ( X: TFuncNotSupported):TFuncNotSupported;\t");
      PascalHeader.Add("   begin\t");
      PascalHeader.Add('    asm alert(" This function is not supported by GPUJS"); end;\t');
      PascalHeader.Add("   end;\t");
      PascalHeader.Add("   function trunc( d: TFuncNotSupported):TFuncNotSupported;\t");
      PascalHeader.Add("   begin\t");
      PascalHeader.Add('    asm alert(" This function is not supported by GPUJS"); end;\t');
      PascalHeader.Add("   end;\t");
      PascalHeader.Add("   function sqr(d: TFuncNotSupported):TFuncNotSupported;\t");
      PascalHeader.Add("   begin\t");
      PascalHeader.Add('    asm alert(" This function is not supported by GPUJS"); end;\t');
      PascalHeader.Add("   end;\t");
      PascalHeader.Add("   \t");
      PascalHeader.Add("\/\/ -------------- Declare Parameters List (for compilation) ---------- ");
      for (var $l3 = 0, $end4 = rtl.length(this.ParamNumArray) - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        PascalHeader.Add(("   var " + this.ParamNumArray[i].ParamName) + ":TNumArray;");
      };
      for (var $l5 = 0, $end6 = rtl.length(this.ParamImgArray) - 1; $l5 <= $end6; $l5++) {
        i = $l5;
        PascalHeader.Add(("   var " + this.ParamImgArray[i].ParamName) + ":TImgArray;");
      };
      PascalHeader.Add("   procedure PascalVersionOfGPUCode(AnimationCounterValue:integer");
      if (UserCodeParameterList !== "") PascalHeader.Add(";" + UserCodeParameterList);
      PascalHeader.Add(");\t");
      PascalHeader.Add("   var  this:TGPUThread;\t");
      PascalHeader.Add("        r,g,b,a:real;\t");
      PascalHeader.Add("        zzzzz1:integer;");
      TheAnimationCode = pas.Classes.TStringList.$create("Create$1");
      TheAnimationCode.SetTextStr(this.GetAnimationCode());
      pas.UtilsJSCompile.WriteIncFile(Compiler,this.myNode.NodeName,"","",{get: function () {
          return PascalHeader;
        }, set: function (v) {
          PascalHeader = v;
        }},TheAnimationCode);
      PascalHeader.Add("var zzzzz2:integer;");
      PascalHeader.Add("begin");
      PascalHeader.Add("end.");
      Result = PascalHeader.GetTextStr();
      return Result;
    };
    this.CompileGPUToJS = function (GPUJSOutput) {
      var Result = false;
      var UnitString = "";
      var Res = false;
      var ok = false;
      var args = null;
      var prog = null;
      var lWebFS = null;
      UnitString = this.BuildPascalAnimationUnit(pas.UtilsJSCompile.MyWebCompiler.FCompiler);
      pas.UtilsJSCompile.MyWebCompiler.FCodeEditor = $mod.GPUCodeEditor;
      pas.UtilsJSCompile.MyWebCompiler.FCompiler.FLog.FOnLog = rtl.createCallback(pas.UtilsJSCompile.MyWebCompiler,"DoLog");
      pas.UtilsJSCompile.MyWebCompiler.FCompiler.GetWebFS().FLoadBaseURL = "";
      if (pas.UtilsJSCompile.MyWebCompiler.FCodeEditor !== null) pas.UtilsJSCompile.MyWebCompiler.FCodeEditor.SetItemValue(UnitString);
      Res = false;
      lWebFS = pas.UtilsJSCompile.MyWebCompiler.FCompiler.GetWebFS();
      pas.UtilsJSCompile.LoadRTLFilesForPas2JS(lWebFS);
      lWebFS.SetFileContent(this.NodeName + ".pas",UnitString);
      args = pas.Classes.TStringList.$create("Create$1");
      try {
        args.Add("-vwnhe");
        args.Add("-O-");
        args.Add("-Jc");
        args.Add("-Jirtl.js-");
        args.Add("-dJScript");
        args.Add(this.NodeName + ".pas");
        pas.UtilsJSCompile.MyWebCompiler.FCompiler.Run("","",args,true);
        Res = pas.UtilsJSCompile.MyWebCompiler.FCompiler.GetExitCode() === 0;
      } finally {
        args = rtl.freeLoc(args);
      };
      pas.NodeUtils.EditAttributeValue$2("XMemo2","ItemValue",UnitString);
      if (Res === true) {
        GPUJSOutput.set(pas.UtilsJSCompile.MyWebCompiler.FCompiler.GetWebFS().GetFileContent(this.NodeName + ".js"));
      } else {
        $mod.GPUCodeEditor.SetItemValue(UnitString);
        $mod.EditingGPUNode = this.myNode;
        $mod.GPUCodeEditor.SetReadOnly(true);
        $mod.GPUEditorMode = "Unit";
        $mod.GPUEditorForm.SetShowing("Modal");
      };
      pas.NodeUtils.EditAttributeValue$2("XMemo1","ItemValue",GPUJSOutput.get());
      ok = Res;
      if (Res === true) ;
      prog = rtl.freeLoc(prog);
      Result = ok;
      return Result;
    };
    this.GPUJSHeader = function () {
      var Result = "";
      var str = "";
      var vstr = "";
      var cma = "";
      var plist = "";
      var i = 0;
      var j = 0;
      var vn = [];
      var vb = [];
      str = (((((((((('document.title = "' + this.myNode.NodeName) + " ") + this.myNode.NodeType) + '"; ') + pas.System.LineEnding) + "\/*\/ ------------------------------------ Initialise the GPU ---------------------------------\/*\/ ") + pas.System.LineEnding) + "     const ") + this.myNode.NodeName) + " = new GPU({mode: 'webgl'});   ") + pas.System.LineEnding;
      str = (str + "\/*\/ -------------------------------- Initialise Parameters List -------------------------\/*\/ ") + pas.System.LineEnding;
      for (var $l1 = 0, $end2 = rtl.length(this.ParamNumArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        vn = this.ParamNumArray[i].ParamValue;
        vstr = "[";
        for (var $l3 = 0, $end4 = rtl.length(vn) - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          if (j > 0) vstr = vstr + ",";
          vstr = vstr + pas.SysUtils.FloatToStr(vn[j]);
        };
        vstr = vstr + "]";
        str = (((((str + "   var ") + this.ParamNumArray[i].ParamName) + " = ") + vstr) + ";") + pas.System.LineEnding;
      };
      for (var $l5 = 0, $end6 = rtl.length(this.ParamImgArray) - 1; $l5 <= $end6; $l5++) {
        i = $l5;
        vb = this.ParamImgArray[i].ParamValue;
        vstr = "[";
        for (var $l7 = 0, $end8 = rtl.length(vb) - 1; $l7 <= $end8; $l7++) {
          j = $l7;
          if (j > 0) vstr = vstr + ",";
          vstr = vstr + vb[j];
        };
        vstr = vstr + "]";
        str = (((((str + "   var ") + this.ParamImgArray[i].ParamName) + " = ") + vstr) + ";") + pas.System.LineEnding;
      };
      str = (((str + "  ParamsAsString=function() { ") + pas.System.LineEnding) + '     var s="nums =["; ') + pas.System.LineEnding;
      cma = '""';
      for (var $l9 = 0, $end10 = rtl.length(this.ParamNumArray) - 1; $l9 <= $end10; $l9++) {
        i = $l9;
        str = (((((str + "s = s+") + cma) + '+"["+') + this.ParamNumArray[i].ParamName) + '.toString()+"]";') + pas.System.LineEnding;
        cma = '","';
      };
      str = (((str + '    s=s+"]";') + pas.System.LineEnding) + '     s=s+" imgs =["; ') + pas.System.LineEnding;
      cma = '""';
      for (var $l11 = 0, $end12 = rtl.length(this.ParamImgArray) - 1; $l11 <= $end12; $l11++) {
        i = $l11;
        str = (((((str + "    s = s+") + cma) + '+"["+') + this.ParamImgArray[i].ParamName) + '.toString()+"]";') + pas.System.LineEnding;
        cma = '","';
      };
      str = (str + '    s=s+"]";') + pas.System.LineEnding;
      str = (str + "    return(s);") + pas.System.LineEnding;
      str = (str + "}") + pas.System.LineEnding;
      plist = this.FullParamList();
      str = (((((((((((((((((str + "     \/*\/------------ start of create Kernel routine -------\/*\/ ") + pas.System.LineEnding) + "     var ") + this.myNode.NodeName) + "CanvasRenderFn = ") + this.myNode.NodeName) + ".createKernel(function(AnimationCounterValue") + plist) + ") { ") + pas.System.LineEnding) + "       var r = 0  ;      ") + pas.System.LineEnding) + "       var g = 0  ; \/*\/--initalise the default colour for the GPUCanvas pixel in r,g,b,a format --\/*\/  ") + pas.System.LineEnding) + "       var b = 0  ;   ") + pas.System.LineEnding) + "       var a = 1  ;  ") + pas.System.LineEnding;
      Result = str;
      return Result;
    };
    this.GPUJSFooter = function () {
      var Result = "";
      var h = 0;
      var w = 0;
      var i = 0;
      var str = "";
      var plist = "";
      var ob=document.getElementById(this.NodeName);
      if (ob!=null) {
        //alert('found ob for h/w calc');
        var style = window.getComputedStyle(ob);
        var hh = style.height;
        h = parseInt(hh, 10);
        h = Math.trunc( h*0.85 );
        var ww = style.width;
        w = parseInt(ww, 10);
        w = Math.trunc( w*0.9 );
      }
      else {h=301; w=301;}
      if (w==undefined) {w=302;}
      if (h==undefined) {h=302;}
      //alert('w='+w+' h='+h);
      plist = this.FullParamList();
      str = (((((((((((((((((((("         \/*\/-------- Standard Javascript to place the GPU Canvas on the web page------------------\/*\/     " + pas.System.LineEnding) + "             this.color((r),(g),(b),(a));        ") + pas.System.LineEnding) + "     })  ") + pas.System.LineEnding) + "  \/*\/------- end of create Kernel routine ---------------\/*\/ ") + pas.System.LineEnding) + "  ") + pas.System.LineEnding) + "       .setOutput([") + pas.SysUtils.IntToStr(w)) + ",") + pas.SysUtils.IntToStr(h)) + "])              ") + pas.System.LineEnding) + "       .setLoopMaxIterations([") + pas.SysUtils.IntToStr(this.GetMaxIterations())) + "])   ") + pas.System.LineEnding) + "       .setGraphical(true)                                         ") + pas.System.LineEnding;
      for (var $l1 = 0, $end2 = rtl.length(this.ConstIntArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        str = (((((str + "       .setConstants({") + this.ConstIntArray[i].ConstName) + ": ") + pas.SysUtils.IntToStr(this.ConstIntArray[i].ConstValue)) + "}); ") + pas.System.LineEnding;
      };
      str = (((((((((((((((((((((((((str + "     \/*\/-------------------Run the Graphics code and place it on the web page----------------------\/*\/    ") + pas.System.LineEnding) + "     var AnimationCounterValue=") + pas.SysUtils.IntToStr(this.GetStartIteration())) + "; ") + pas.System.LineEnding) + "     var AnimationCounterMax=") + pas.SysUtils.IntToStr(this.GetMaxIterations())) + "; ") + pas.System.LineEnding) + "     ") + this.myNode.NodeName) + "CanvasRenderFn(AnimationCounterValue") + plist) + ");               ") + pas.System.LineEnding) + "     var ") + this.myNode.NodeName) + "BrowserCanvas = ") + this.myNode.NodeName) + "CanvasRenderFn.getCanvas();                    ") + pas.System.LineEnding) + '     document.getElementsByTagName("body")[0].appendChild(') + this.myNode.NodeName) + "BrowserCanvas);                ") + pas.System.LineEnding;
      str = (((((str + "  function GetMessage(msg) {") + pas.System.LineEnding) + '    alert("msg="+msg);  ') + pas.System.LineEnding) + "}") + pas.System.LineEnding;
      str = (((((str + "  function RunCode(theCode) {") + pas.System.LineEnding) + "    eval(theCode);  ") + pas.System.LineEnding) + "}") + pas.System.LineEnding;
      str = (((((((((((((((((((((((((((str + '  window.addEventListener("message", function(ev) { ') + pas.System.LineEnding) + "if (ev.data.objid!=undefined) { ") + pas.System.LineEnding) + '  if (ev.data.mtype=="SetNumParam") {    ') + pas.System.LineEnding) + "  try {   ") + pas.System.LineEnding) + '    eval(ev.data.pName+"=["+ev.data.pValue.toString()+"];");  ') + pas.System.LineEnding) + "   }catch(err){alert(err.message);}  ") + pas.System.LineEnding) + "  } ") + pas.System.LineEnding) + '  if (ev.data.mtype=="execCode") {    ') + pas.System.LineEnding) + "  try {   ") + pas.System.LineEnding) + "    eval(ev.data.code);  ") + pas.System.LineEnding) + "   }catch(err){alert(err.message);}  ") + pas.System.LineEnding) + "  } ") + pas.System.LineEnding) + "} ") + pas.System.LineEnding) + "} );") + pas.System.LineEnding;
      Result = str;
      return Result;
    };
    this.GPUJSAnimationFooter = function () {
      var Result = "";
      var str = "";
      var plist = "";
      plist = this.FullParamList();
      str = "  \/*\/------------------ Now Animate the Graphics ------------------------------------------------\/*\/   " + pas.System.LineEnding;
      str = (((((((((str + "  function FrameDone() {") + pas.System.LineEnding) + "    return new Promise(resolve => { ") + pas.System.LineEnding) + "  }); } ") + pas.System.LineEnding) + "  function FetchParamValuesFromParent()  {") + pas.System.LineEnding) + "  }  ") + pas.System.LineEnding;
      str = (((((((((((((((((((((str + "  async function DoFrame() {  ") + pas.System.LineEnding) + "          ") + this.myNode.NodeName) + "CanvasRenderFn(AnimationCounterValue") + plist) + "); ") + pas.System.LineEnding) + "            AnimationCounterValue = AnimationCounterValue +1; ") + pas.System.LineEnding) + "            if (AnimationCounterValue > AnimationCounterMax) {AnimationCounterValue = 0};  ") + pas.System.LineEnding) + "            try {    ") + pas.System.LineEnding) + "              FetchParamValuesFromParent();  ") + pas.System.LineEnding) + "            }catch(err){alert(err.message); clearInterval(AnimationFrameID);}  ") + pas.System.LineEnding) + "            var xx = await FrameDone() ; ") + pas.System.LineEnding) + "  } ") + pas.System.LineEnding;
      str = (((((((((((((str + "  var AnimationFrameID;  ") + pas.System.LineEnding) + "  var GPUIntervalRunner;  ") + pas.System.LineEnding) + "  function animate(timestamp){  ") + pas.System.LineEnding) + "    GPUIntervalRunner=setInterval(DoFrame, 1000\/") + pas.SysUtils.IntToStr(this.GetMaxFramesPerSec())) + "); ") + pas.System.LineEnding) + "    } ") + pas.System.LineEnding) + "  AnimationFrameID=requestAnimationFrame(animate) ; ") + pas.System.LineEnding;
      Result = str;
      return Result;
    };
    this.setupGPUPage = function () {
      var GPUString = "";
      GPUString = this.FullXMLString();
      this.SetHTMLSource(GPUString);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.XIFrame.TXIFrame.Create$3.call(this,MyForm,NodeName);
      this.NodeType = "TXGPUCanvas";
      this.FIsContainer = false;
      this.ParamNumArray = rtl.arraySetLength(this.ParamNumArray,$mod.TGPUNumParam,0);
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
      this.SetPropertyDefaults();
    };
    this.FullParamList = function () {
      var Result = "";
      var plist = "";
      plist = "";
      if (this.GetParamNumList() !== "") plist = "," + this.GetParamNumList();
      if (this.GetParamImgList() !== "") plist = (plist + ",") + this.GetParamImgList();
      Result = plist;
      return Result;
    };
    this.FullXMLString = function () {
      var Result = "";
      var PasString = "";
      var Pas2jsOutput = "";
      var Pas2JSTrimmed = "";
      var tmp = "";
      var FullString = "";
      var tmpList = null;
      var ok = false;
      var i = 0;
      var j = 0;
      PasString = this.myNode.GetAttribute("AnimationCode",true).AttribValue;
      if (PasString !== "") {
        ok = this.CompileGPUToJS({get: function () {
            return Pas2jsOutput;
          }, set: function (v) {
            Pas2jsOutput = v;
          }});
        if (ok) {
          tmpList = pas.Classes.TStringList.$create("Create$1");
          tmpList.SetTextStr(Pas2jsOutput);
          while ((tmpList.GetCount() > 0) && (pas.StringUtils.FoundString(tmpList.Get(0),"zzzzz1") < 1)) tmpList.Delete(0);
          if (tmpList.GetCount() > 0) {
            tmpList.Delete(0);
            i = 0;
            while (i < tmpList.GetCount()) {
              if (pas.StringUtils.FoundString(tmpList.Get(i),"zzzzz2") > 0) {
                j = i - 1;
                i = tmpList.GetCount();
              };
              i = i + 1;
            };
            while (j < tmpList.GetCount()) tmpList.Delete(j);
          };
          Pas2JSTrimmed = tmpList.GetTextStr();
          tmpList = rtl.freeLoc(tmpList);
        };
      };
      Pas2JSTrimmed = pas.StringUtils.myStringReplace(Pas2JSTrimmed,"$impl.","",-1,-1);
      Pas2JSTrimmed = pas.StringUtils.myStringReplace(Pas2JSTrimmed,"This.","this.",-1,-1);
      Pas2JSTrimmed = pas.StringUtils.myStringReplace(Pas2JSTrimmed,"Math.","",-1,-1);
      Pas2JSTrimmed = pas.StringUtils.myStringReplace(Pas2JSTrimmed," for ("," for (var ",-1,-1);
      FullString = (this.GPUJSHeader() + Pas2JSTrimmed) + this.GPUJSFooter();
      if (this.GetAnimated()) FullString = FullString + this.GPUJSAnimationFooter();
      tmp = pas.NodeUtils.UnSubstituteSpecials(pas.UtilsJSCompile.gpujs);
      FullString = (((((((((((((((((((((((("<!DOCTYPE html>" + pas.System.LineEnding) + "<html>") + pas.System.LineEnding) + '<body  style="margin:0px; font:normal 12px Verdana, Arial, sans-serif;">') + pas.System.LineEnding) + "<script>") + tmp) + "<\/script>  ") + pas.System.LineEnding) + '<div  id="GPUCanvas" > ') + pas.System.LineEnding) + "<script>") + pas.System.LineEnding) + FullString) + pas.System.LineEnding) + "<\/script>") + pas.System.LineEnding) + "<\/div> ") + pas.System.LineEnding) + '<div id="paramString" style="display:none" ><\/div>') + pas.System.LineEnding) + "<\/body> ") + pas.System.LineEnding) + "<\/html> ") + pas.System.LineEnding;
      this.GeneratedHTML = FullString;
      Result = FullString;
      return Result;
    };
    this.GetParamNumValue = function (pName) {
      var Result = [];
      var i = 0;
      var pval = [];
      for (var $l1 = 0, $end2 = rtl.length(this.ParamNumArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.ParamNumArray[i].ParamName === pName) {
          pval = this.ParamNumArray[i].ParamValue;
        };
      };
      Result = pval;
      return Result;
    };
    this.GetConstIntValue = function (pName) {
      var Result = 0;
      var i = 0;
      var pval = 0;
      for (var $l1 = 0, $end2 = rtl.length(this.ConstIntArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.ConstIntArray[i].ConstName === pName) {
          pval = this.ConstIntArray[i].ConstValue;
        };
      };
      Result = pval;
      return Result;
    };
    this.GetParamImgValue = function (pName) {
      var Result = [];
      var i = 0;
      var pval = [];
      for (var $l1 = 0, $end2 = rtl.length(this.ParamImgArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.ParamImgArray[i].ParamName === pName) {
          pval = this.ParamImgArray[i].ParamValue;
        };
      };
      Result = pval;
      return Result;
    };
    this.SetParamNumValue = function (pName, pValue, ForwardToWidget) {
      var i = 0;
      var j = 0;
      for (var $l1 = 0, $end2 = rtl.length(this.ParamNumArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.UpperCase(this.ParamNumArray[i].ParamName) === pas.SysUtils.UpperCase(pName)) {
          this.ParamNumArray[i].ParamValue = rtl.arraySetLength(this.ParamNumArray[i].ParamValue,0.0,rtl.length(pValue));
          for (var $l3 = 0, $end4 = rtl.length(pValue) - 1; $l3 <= $end4; $l3++) {
            j = $l3;
            this.ParamNumArray[i].ParamValue[j] = pValue[j];
          };
          if (((ForwardToWidget && this.GetActive()) && (this.GetHTMLSource() !== "")) && (this.GetHTMLSource() !== "about:blank")) {
            var ob=document.getElementById(this.NodeName+'Contents');
            if (ob!=null) {
              //alert('found iframe. posting param message');
              ob.contentWindow.postMessage({"objid":this.NodeName, "mtype":"SetNumParam", "pName":pName, "pValue":pValue},"*");
              };
          };
        };
      };
    };
    this.SetConstIntValue = function (pName, pValue) {
      var i = 0;
      for (var $l1 = 0, $end2 = rtl.length(this.ConstIntArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.UpperCase(this.ConstIntArray[i].ConstName) === pas.SysUtils.UpperCase(pName)) {
          this.ConstIntArray[i].ConstValue = pValue;
        };
      };
    };
    this.SetParamImgValue = function (pName, pValue, ForwardToWidget) {
      var i = 0;
      var j = 0;
      for (var $l1 = 0, $end2 = rtl.length(this.ParamImgArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.UpperCase(this.ParamImgArray[i].ParamName) === pas.SysUtils.UpperCase(pName)) {
          this.ParamImgArray[i].ParamValue = rtl.arraySetLength(this.ParamImgArray[i].ParamValue,"",rtl.length(pValue));
          for (var $l3 = 0, $end4 = rtl.length(pValue) - 1; $l3 <= $end4; $l3++) {
            j = $l3;
            this.ParamImgArray[i].ParamValue[j] = pValue[j];
          };
          if (((ForwardToWidget && this.GetActive()) && (this.GetHTMLSource() !== "")) && (this.GetHTMLSource() !== "about:blank")) {
            var ob=document.getElementById(this.NodeName+'Contents');
            if (ob!=null) {
              //alert('found iframe. posting param message');
              ob.contentWindow.postMessage({"objid":this.NodeName, "mtype":"SetImgParam", "pName":pName, "pValue":pValue},"*");
              };
          };
        };
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Active",3,rtl.boolean,"GetActive","SetActive");
    $r.addProperty("Animated",3,rtl.boolean,"GetAnimated","SetAnimated");
    $r.addProperty("AnimationCode",3,rtl.string,"GetAnimationCode","SetAnimationCode");
    $r.addProperty("ParamNumList",3,rtl.string,"GetParamNumList","SetParamNumList");
    $r.addProperty("ConstIntList",3,rtl.string,"GetConstIntList","SetConstIntList");
    $r.addProperty("ParamImgList",3,rtl.string,"GetParamImgList","SetParamImgList");
    $r.addProperty("MaxIterations",3,rtl.longint,"GetMaxIterations","SetMaxIterations");
    $r.addProperty("StartIteration",3,rtl.longint,"GetStartIteration","SetStartIteration");
    $r.addProperty("NumFrames",3,rtl.longint,"GetNumFrames","SetNumFrames");
    $r.addProperty("MaxFramesPerSec",3,rtl.longint,"GetMaxFramesPerSec","SetMaxFramesPerSec");
  });
  rtl.createClass($mod,"TGPUEventClass",pas.System.TObject,function () {
    this.CloseCodeEditor = function (e, nodeID, myValue) {
      $mod.GPUEditorForm.SetShowing("No");
      $mod.EditingGPUNode.ScreenObject.SetActive(false);
      if ($mod.GPUEditorMode === "Animation") {
        pas.NodeUtils.EditAttributeValue$2($mod.EditingGPUNode.NodeName,"AnimationCode",$mod.GPUCodeEditor.GetItemValue());
      };
    };
    this.GPUCodeEditHandleClickMessage = function (e, nodeID, myValue) {
      var linenumber = 0;
      var targetLine = 0;
      var SelectedLine = "";
      var FileName = "";
      var CharPos = "";
      var FoundLineNum = false;
      var tmp1 = null;
      var LineNum = "";
      var Messages = null;
      try {
        linenumber = pas.SysUtils.StrToInt(myValue);
      } catch ($e) {
        if (pas.SysUtils.EConvertError.isPrototypeOf($e)) {
          var E = $e;
          return;
        } else throw $e
      };
      Messages = pas.Classes.TStringList.$create("Create$1");
      Messages.SetTextStr($mod.GPUCodeEditor.GetMessageLines());
      if (linenumber > Messages.GetCount()) return;
      SelectedLine = Messages.Get(linenumber - 1);
      Messages = rtl.freeLoc(Messages);
      $mod.GPUCodeEditor.GetFileNameLineNumAndCharPos({get: function () {
          return FoundLineNum;
        }, set: function (v) {
          FoundLineNum = v;
        }},SelectedLine,"(",{get: function () {
          return FileName;
        }, set: function (v) {
          FileName = v;
        }},{get: function () {
          return LineNum;
        }, set: function (v) {
          LineNum = v;
        }},{get: function () {
          return CharPos;
        }, set: function (v) {
          CharPos = v;
        }});
      if (pas.SysUtils.Trim(FileName) !== "") {
        tmp1 = pas.UtilsJSCompile.LoadIncludeFile(pas.UtilsJSCompile.MyWebCompiler.FCompiler,FileName,"");
        if (tmp1.GetCount() > 0) {
          $mod.GPUCodeEditor.SetItemValue(tmp1.GetTextStr());
          $mod.GPUCodeEditor.SetReadOnly(false);
          $mod.GPUEditorMode = "Animation";
          pas.SysUtils.FreeAndNil({get: function () {
              return tmp1;
            }, set: function (v) {
              tmp1 = v;
            }});
          if ((LineNum !== "") && (CharPos !== "")) {
            targetLine = pas.SysUtils.StrToInt(LineNum);
            $mod.GPUCodeEditor.GoToLineCharPos(targetLine,pas.SysUtils.StrToInt(CharPos));
          };
        } else {
          pas.StringUtils.ShowMessage("This file is not available for edit");
        };
      };
    };
    this.LaunchGPUHTML = function (e, nodeID, myValue) {
      var myHTML = "";
      if ($mod.GPUMemo.GetItemValue() !== "") {
        myHTML = $mod.GPUMemo.GetItemValue();
        $mod.EditingGPUNode.ScreenObject.LaunchHTML("Data",myHTML,"GPU Diagnostic");
      };
    };
  });
  this.GPUEvents = null;
  this.GPUEditorForm = null;
  this.GPUEditorTabControl = null;
  this.GPUCodeEditor = null;
  this.GPUMemo = null;
  this.EditingGPUNode = null;
  this.GPUEditorMode = "";
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ActualHeight","Integer","","",true,false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ActualWidth","Integer","","",true,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"FrameWidth","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"FrameHeight","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Top","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","GPU Canvas","",false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"HTMLSource","String","","",false,false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Active","Boolean","False","",false,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Animated","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ParamNumList","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ParamImgList","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ConstIntList","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MaxIterations","Integer","512","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"StartIteration","Integer","1","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"NumFrames","Integer","100","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MaxFramesPerSec","Integer","15","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"AnimationCode","String","","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    $mod.GPUEvents = $mod.TGPUEventClass.$create("Create");
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObjGPU,$impl.CreateGPUCanvasWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"SuspendRefresh");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"HTMLSource");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXGPUCanvas";
  $impl.myDefaultAttribs = [];
  $impl.CreateGPUCanvasWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    var h = 0;
    var w = 0;
    pas.XIFrame.DoCreateFrameWidget(MyNode,ParentNode,ScreenObjectName,position);
    NewWidget = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    h = NewWidget.GetActualHeight();
    w = NewWidget.GetActualWidth();
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObjGPU = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXGPUCanvas.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("WrapperPanel",["System","Classes","SysUtils","TypInfo","StringUtils","NodeUtils","HTMLUtils"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TWrapperPanel",pas.NodeUtils.TInterfaceObject,function () {
    this.$init = function () {
      pas.NodeUtils.TInterfaceObject.$init.call(this);
      this.FIsContainer = false;
      this.FAlignChildrenVertical = false;
      this.FIsSelected = false;
    };
    this.GetName = function () {
      var Result = "";
      Result = this.NodeName;
      return Result;
    };
    this.GetIsVisible = function () {
      var Result = false;
      var tmp = "";
      if (this.myNode !== null) {
        tmp = this.myNode.GetAttribute("IsVisible",true).AttribValue;
        if (tmp === "") tmp = "True";
        Result = pas.StringUtils.MyStrToBool(tmp);
      } else Result = true;
      return Result;
    };
    this.GetContainerWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ContainerWidth",true).AttribValue;
      return Result;
    };
    this.GetContainerHeight = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ContainerHeight",true).AttribValue;
      return Result;
    };
    this.GetHint = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Hint",true).AttribValue;
      return Result;
    };
    this.GetBgColor = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("BgColor",true).AttribValue;
      return Result;
    };
    this.GetLabelText = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("LabelText",true).AttribValue;
      return Result;
    };
    this.GetLabelPos = function () {
      var Result = "";
      if (this.myNode !== null) {
        Result = this.myNode.GetAttribute("LabelPos",true).AttribValue}
       else Result = "Top";
      return Result;
    };
    this.GetAlignment = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Alignment",true).AttribValue;
      return Result;
    };
    this.GetSpacingAround = function () {
      var Result = 0;
      var str = "";
      str = this.myNode.GetAttribute("SpacingAround",true).AttribValue;
      if (str === "") str = "0";
      Result = pas.SysUtils.StrToInt(str);
      return Result;
    };
    this.GetBorder = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("Border",true).AttribValue);
      return Result;
    };
    this.SetIsVisible = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("IsVisible",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
        var ob = document.getElementById(this.NodeName);
        if (ob!=null)  {
          if (AValue==true) {
            if (this.NodeType != 'TXMenuItem') {
            ob.style.display = 'flex';                //!!!! this needs to be reset to whatever it was before!!!!
            if (this.LabelPos!='') {
              self.SortOutMyAlignmentAndLabelPos;
              }
            else
              {self.SortOutAlignment;}
            }
            else
            { //!!!!! for a menu item ?????
            }
          }
          else  {
            ob.style.display = 'none';
          }
        };
      };
    };
    this.SetMyName = function (AValue) {
      this.SetMyName(AValue);
      var ob = document.getElementById(this.NodeName);
      inner = pas.HTMLUtils.ScreenObjectInnerComponent(this);
      if (inner.id == this.NodeName+'Contents') {
        inner.id = AValue+'Contents';
        }
         //!!!! issue here with naming of html components / references within event handlers / inner components / etc
      ob.id = AValue;
      if (this.myNode !== null) this.myNode.NodeName = AValue;
    };
    this.SetHint = function (AValue) {
      this.myNode.SetAttributeValue$2("Hint",AValue);
      var ob = document.getElementById(this.NodeName);
      if (ob!=null)  {
      ob.title=AValue; };
    };
    this.SetLabelText = function (AValue) {
      this.myNode.SetAttributeValue$2("LabelText",AValue);
      var ob = document.getElementById(this.NodeName+'ContentsLbl');
      if (ob!=null) {
        ob.innerHTML=AValue;   };
    };
    this.SetAlignment = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$2("Alignment",AValue);
        if (this.GetLabelPos() !== "") {
          this.SortOutMyAlignmentAndLabelPos()}
         else this.SortOutAlignment();
      };
    };
    this.SetSpacingAround = function (AValue) {
      var str = "";
      str = pas.SysUtils.IntToStr(AValue);
      if (this.myNode !== null) this.myNode.SetAttributeValue$1("SpacingAround",str,"Integer");
      var ob = document.getElementById(this.NodeName);
      if (ob!=null) {
        ob.style.margin=str+'px';
      };
    };
    this.SetBorder = function (AValue) {
      this.myNode.SetAttributeValue$1("Border",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName);
      if (ob!=null) {
      if (AValue==true ) {
         ob.classList.add("normal-border");
      }
      else {
         ob.classList.remove("normal-border");
      } };
    };
    this.Create$2 = function (NodeName) {
      pas.NodeUtils.TDataNode.Create$1.call(this,"UI",NodeName,"",false);
      this.FAlignChildrenVertical = true;
      this.NodeName = NodeName;
      this.FIsContainer = true;
      this.SetIsVisible(true);
      this.myNode = this;
      pas.NodeUtils.AddChildToParentNode({p: pas.NodeUtils, get: function () {
          return this.p.SystemNodeTree;
        }, set: function (v) {
          this.p.SystemNodeTree = v;
        }},{p: this, get: function () {
          return this.p.myNode;
        }, set: function (v) {
          this.p.myNode = v;
        }},-1);
    };
    this.SortOutAlignment = function () {
      var ParentAlignChildrenVertical = false;
      var ContainerType = false;
      var MyAlignment = "";
      var MyLabelPos = "";
      var NewAlignment = "";
      var ParentNode = null;
      var nm = "";
      var typ = "";
      var pos = 0;
      ContainerType = this.FIsContainer;
      nm = this.NodeName;
      typ = this.NodeType;
      MyAlignment = this.GetAlignment();
      MyLabelPos = this.GetLabelPos();
      ParentNode = pas.NodeUtils.FindParentOfNodeByName(pas.NodeUtils.SystemNodeTree,this.NodeName,false,{get: function () {
          return pos;
        }, set: function (v) {
          pos = v;
        }});
      if (ParentNode === null) {
        if (pas.XGPUCanvas.GPUEditorForm !== null) ParentNode = pas.NodeUtils.FindParentOfNodeByName(pas.XGPUCanvas.GPUEditorForm,this.NodeName,false,{get: function () {
            return pos;
          }, set: function (v) {
            pos = v;
          }});
      };
      if (ParentNode !== null) {
        ParentAlignChildrenVertical = ParentNode.FAlignChildrenVertical;
        NewAlignment = pas.NodeUtils.AlignmentResetInvalidCombinations(MyAlignment,this.NodeName,this.NodeType,ParentAlignChildrenVertical,this.FIsContainer,rtl.length(ParentNode.ChildNodes) > 1);
        if (NewAlignment !== MyAlignment) {
          MyAlignment = NewAlignment;
          this.SetAttributeValue$2("Alignment",NewAlignment);
        };
        try {
                   var wrapper = document.getElementById(this.NodeName);
                   var ob = document.getElementById(this.NodeName+'Contents');
        
                   if ((ob!=null)  && (wrapper!=null)) {
                     wrapper.classList.remove('hboxNoStretch');
                     wrapper.classList.remove('vboxNoStretch');
                     wrapper.classList.remove('vboxNoFlex');
                     wrapper.classList.remove('AlignmentCentre');
                     wrapper.classList.remove('AlignmentRight');
                     wrapper.classList.remove('AlignmentLeft');
                     wrapper.classList.remove('AlignmentLeftContainer');
                     wrapper.classList.remove('AlignmentTop');
                     wrapper.classList.remove('AlignmentBottom');
        
        
                     if (MyAlignment=='Right') {
                       if (ParentAlignChildrenVertical) {
                       ob.style.float='right';
                       wrapper.classList.add('AlignmentRight');
                     }
                     }
                     else if (MyAlignment=='Left') {
                        if (ParentAlignChildrenVertical) {
                         ob.style.float='left';
                          if (ContainerType==true) {
                           wrapper.classList.add('AlignmentLeftContainer'); }
                         else {
                           wrapper.classList.add('AlignmentLeft');  }
                       }
                       }
                     else if (MyAlignment=='Centre') {
                       ob.style.float='left';
                        wrapper.classList.add('AlignmentCentre');
                     }
        
                     else if (MyAlignment=='Top') {
                     if (ParentAlignChildrenVertical==false) {
                       ob.style.float='left';
                       wrapper.classList.add('AlignmentTop');
                     }
                     }
                     else if (MyAlignment=='Bottom') {
                     if (ParentAlignChildrenVertical==false) {
                       ob.style.float='left';
                       wrapper.classList.add('AlignmentBottom');
                     }
                   }
        
                 }
               } catch(err) { alert(err.message+'  in WrapperPanel.SortOutAlignment'); };
      };
    };
    this.SetLabelPos = function (AValue) {
      this.myNode.SetAttributeValue$2("LabelPos",AValue);
      this.SortOutMyAlignmentAndLabelPos();
    };
    this.SetIsSelected = function (AValue) {
      if (AValue !== this.FIsSelected) {
        this.FIsSelected = AValue;
        pas.HTMLUtils.ShowHideSelectedBorder(this,this.FIsSelected);
      };
    };
    this.SetBgColor = function (AValue) {
      this.SetAttributeValue$1("BgColor",AValue,"Color");
      try {
      var ob = document.getElementById(this.NodeName);
      if (ob!=null) {
      ob.style.backgroundColor = AValue;  }
      } catch(err) { alert(err.message+'  in WrapperPanel.SetBgColor'); };
    };
    this.SetContainerHeight = function (AValue) {
      this.myNode.SetAttributeValue$2("ContainerHeight",AValue);
      var ob = document.getElementById(this.NodeName);
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'H',AValue);
    };
    this.SetContainerWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("ContainerWidth",AValue);
      var ob = document.getElementById(this.NodeName);
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.SortOutMyAlignmentAndLabelPos = function () {
      var ParentAlignChildrenVertical = false;
      var ContainerType = false;
      var MyAlignment = "";
      var MyLabelPos = "";
      var NewAlignment = "";
      var typ = "";
      var nm = "";
      var ParentNode = null;
      var pos = 0;
      ContainerType = this.FIsContainer;
      MyAlignment = this.GetAlignment();
      MyLabelPos = this.GetLabelPos();
      ParentNode = pas.NodeUtils.FindParentOfNodeByName(pas.NodeUtils.SystemNodeTree,this.NodeName,false,{get: function () {
          return pos;
        }, set: function (v) {
          pos = v;
        }});
      ParentAlignChildrenVertical = true;
      if ((ParentNode !== null) && $mod.TWrapperPanel.isPrototypeOf(ParentNode)) {
        ParentAlignChildrenVertical = ParentNode.FAlignChildrenVertical;
        NewAlignment = pas.NodeUtils.AlignmentResetInvalidCombinations(MyAlignment,this.NodeName,this.NodeType,ParentAlignChildrenVertical,this.FIsContainer,rtl.length(ParentNode.ChildNodes) > 1);
        if (NewAlignment !== MyAlignment) {
          MyAlignment = NewAlignment;
          this.SetAttributeValue$2("Alignment",NewAlignment);
        };
        nm = this.NodeName;
        typ = this.NodeType;
        try {
                   var ob = document.getElementById(this.NodeName+'Contents');
                   var lbl = document.getElementById(this.NodeName+'ContentsLbl');
                   var wrapper = document.getElementById(this.NodeName);
                   var lp = MyLabelPos;
        
                   if ((ob!=null) && (wrapper!=null)) {
                   // clear everything first...
                   wrapper.style.display='';
                   wrapper.classList.remove('hbox');
                   wrapper.classList.remove('hboxNoStretch');
                   wrapper.classList.remove('vbox');
                   wrapper.classList.remove('vboxNoStretch');
                   wrapper.classList.remove('vboxNoFlex');
                   wrapper.classList.remove('AlignmentCentre');
                   wrapper.classList.remove('AlignmentRight');
                   wrapper.classList.remove('AlignmentLeft');
                   wrapper.classList.remove('AlignmentLeftContainer');
                   wrapper.classList.remove('AlignmentTop');
                   wrapper.classList.remove('AlignmentBottom');
        
                  if (lbl!=null) {
                     lbl.style.padding='0px';
        
                     if (lp=='Left') {
                       lbl.parentNode.insertBefore(lbl, ob);  //put lbl before ob
                       wrapper.classList.add('hboxNoStretch');
                       lbl.style.alignSelf='center';
                       lbl.style.padding='0px 3px 0px 0px';               // t,r,b,l
                     }
                     else if (lp=='Right') {
                       ob.parentNode.insertBefore(ob, lbl);  //put lbl after ob
                       wrapper.classList.add('hboxNoStretch');
                       lbl.style.alignSelf='center';
                       lbl.style.padding='0px 0px 0px 3px';               // t,r,b,l
                     }
                     else if (lp=='Top') {
                       ob.parentNode.insertBefore(lbl, ob);
                       //wrapper.classList.add('vboxNoStretch');
                       wrapper.classList.add('vboxNoFlex');
                       lbl.style.alignSelf='center';
                       lbl.style.padding='0px 0px 0px 3px';               // t,r,b,l
                     }
                     else if (lp=='Bottom') {
                       ob.parentNode.insertBefore(ob, lbl);
                       //wrapper.classList.add('vboxNoStretch');
                       wrapper.classList.add('vboxNoFlex');
                       lbl.style.alignSelf='center';
                       lbl.style.padding='3px 0px 0px 0px';               // t,r,b,l
                     }
                   }
        
        
                   if (MyAlignment=='Right') {
                     if (ParentAlignChildrenVertical) {
                     ob.style.float='right';
                     wrapper.classList.add('AlignmentRight');
                     if (lbl!=null) {
                       lbl.style.float='right';
                       if ((lp=='Top')||(lp=='Bottom')) {
                           lbl.style.alignSelf='flex-e'+'nd';
                       }
                     }
                   }
                   }
                   else if (MyAlignment=='Left') {
                   if (ParentAlignChildrenVertical) {
                       ob.style.float='left';
                       if (ContainerType==true) {
                         wrapper.classList.add('AlignmentLeftContainer'); }
                       else {
                         wrapper.classList.add('AlignmentLeft');  }
                       if (lbl!=null) {
                         lbl.style.float='left';
                         if ((lp=='Top')||(lp=='Bottom')) {
                             lbl.style.alignSelf='flex-start';
                         }
                       }
                     }
                     }
                   else if (MyAlignment=='Centre') {
                     ob.style.float='left';
                      wrapper.classList.add('AlignmentCentre');
                      if (lbl!=null) {
                         lbl.style.float='left';
                      }
                   }
        
                   else if (MyAlignment=='Top') {
                   if (ParentAlignChildrenVertical==false) {
                     ob.style.float='left';
                     wrapper.classList.add('AlignmentTop');
                     if (lbl!=null) {
                       lbl.style.float='left';
                       if ((lp=='Left')||(lp=='Right')) {
                           lbl.style.alignSelf='flex-start';
                         }
                     }
                    }
                    }
                   else if (MyAlignment=='Bottom') {
                   if (ParentAlignChildrenVertical==false) {
                     ob.style.float='left';
                     wrapper.classList.add('AlignmentBottom');
                     if (lbl!=null) {
                      lbl.style.float='left';
                      if ((lp=='Left')||(lp=='Right')) {
                           lbl.style.alignSelf='flex-e'+'nd';
                           }
                     }
                 }
                }
        
        
               }
             } catch(err) { alert(err.message+'  in WrapperPanel.SortOutMyAlignmentAndLabelPos'); };
      };
    };
    var $r = this.$rtti;
    $r.addProperty("IsContainer",0,rtl.boolean,"FIsContainer","FIsContainer");
    $r.addProperty("AlignChildrenVertical",0,rtl.boolean,"FAlignChildrenVertical","FAlignChildrenVertical");
    $r.addProperty("IsSelected",2,rtl.boolean,"FIsSelected","SetIsSelected",{Default: false});
    $r.addProperty("Alignment",3,rtl.string,"GetAlignment","SetAlignment");
    $r.addProperty("LabelText",3,rtl.string,"GetLabelText","SetLabelText");
    $r.addProperty("LabelPos",3,rtl.string,"GetLabelPos","SetLabelPos");
    $r.addProperty("IsVisible",3,rtl.boolean,"GetIsVisible","SetIsVisible");
    $r.addProperty("Hint",3,rtl.string,"GetHint","SetHint");
    $r.addProperty("Name",3,rtl.string,"GetName","SetMyName");
    $r.addProperty("ContainerWidth",3,rtl.string,"GetContainerWidth","SetContainerWidth");
    $r.addProperty("ContainerHeight",3,rtl.string,"GetContainerHeight","SetContainerHeight");
    $r.addProperty("BgColor",3,rtl.string,"GetBgColor","SetBgColor");
    $r.addProperty("SpacingAround",3,rtl.longint,"GetSpacingAround","SetSpacingAround");
    $r.addProperty("Border",3,rtl.boolean,"GetBorder","SetBorder");
  });
  this.SuppressDesignerProperty = function (Classname, pName) {
    if ($mod.FindSuppressedProperty(Classname,pName) < 0) {
      $mod.SuppressedDesignerProperties = rtl.arraySetLength($mod.SuppressedDesignerProperties,$mod.TSuppressedDesignerProperty,rtl.length($mod.SuppressedDesignerProperties) + 1);
      $mod.SuppressedDesignerProperties[rtl.length($mod.SuppressedDesignerProperties) - 1].ClassName = Classname;
      $mod.SuppressedDesignerProperties[rtl.length($mod.SuppressedDesignerProperties) - 1].PName = pName;
    };
  };
  this.AddDynamicWidget = function (TypeName, ParentForm, ParentNode, NodeName, Alignment, position) {
    var Result = null;
    var NewNode = null;
    var fn = null;
    var starting = false;
    var NewWidget = null;
    fn = pas.NodeUtils.LookupComponentFunc(TypeName);
    if (fn !== null) {
      starting = pas.NodeUtils.StartingUp;
      pas.NodeUtils.StartingUp = true;
      NewWidget = pas.NodeUtils.CreateInterfaceObject(null,TypeName,NodeName);
      if (pas.TypInfo.IsPublishedProp(NewWidget,"Alignment")) pas.TypInfo.SetStringProp(NewWidget,"Alignment",Alignment);
      NewNode = NewWidget;
      NewWidget.myNode = NewNode;
      if (ParentNode !== null) pas.NodeUtils.AddChildToParentNode({get: function () {
          return ParentNode;
        }, set: function (v) {
          ParentNode = v;
        }},{get: function () {
          return NewNode;
        }, set: function (v) {
          NewNode = v;
        }},position);
      fn(NewNode,ParentNode,NodeName,position,Alignment);
      pas.NodeUtils.StartingUp = starting;
      NewNode.IsDynamic = true;
      Result = NewNode;
    } else {
      pas.StringUtils.ShowMessage("No function defined to instantiate component of type " + TypeName);
      Result = null;
    };
    return Result;
  };
  this.SetCommonWrapperProperties = function (myWrapper) {
    myWrapper.SetAlignment(myWrapper.GetAlignment());
    myWrapper.SetHint(myWrapper.GetHint());
    myWrapper.SetIsVisible(myWrapper.GetIsVisible());
    myWrapper.SetSpacingAround(myWrapper.GetSpacingAround());
    myWrapper.SetBorder(myWrapper.GetBorder());
    if ($mod.FindSuppressedProperty(myWrapper.myNode.NodeType,"BgColor") < 0) myWrapper.SetBgColor(myWrapper.GetBgColor());
  };
  this.SetCommonWrapperPropDefaults = function (myWrapper) {
    myWrapper.SetAlignment("Left");
    myWrapper.SetHint("");
    myWrapper.SetIsVisible(true);
    myWrapper.SetSpacingAround(0);
    myWrapper.SetBorder(false);
  };
  this.TSuppressedDesignerProperty = function (s) {
    if (s) {
      this.ClassName = s.ClassName;
      this.PName = s.PName;
    } else {
      this.ClassName = "";
      this.PName = "";
    };
    this.$equal = function (b) {
      return (this.ClassName === b.ClassName) && (this.PName === b.PName);
    };
  };
  $mod.$rtti.$Record("TSuppressedDesignerProperty",{}).addFields("ClassName",rtl.string,"PName",rtl.string);
  this.SuppressedDesignerProperties = [];
  this.FindSuppressedProperty = function (Classname, pName) {
    var Result = 0;
    var i = 0;
    var l = 0;
    Result = -1;
    l = rtl.length($mod.SuppressedDesignerProperties);
    i = 0;
    while (i < rtl.length($mod.SuppressedDesignerProperties)) {
      if (($mod.SuppressedDesignerProperties[i].ClassName === Classname) && ($mod.SuppressedDesignerProperties[i].PName === pName)) {
        Result = i;
        i = rtl.length($mod.SuppressedDesignerProperties);
      };
      i = i + 1;
    };
    return Result;
  };
  $mod.$init = function () {
  };
},["XGPUCanvas"]);
rtl.module("XBitMap",["System","Classes","SysUtils","NodeUtils","StringUtils","HTMLUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TColorLookup",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.PixelType = "";
      this.r = 0;
      this.g = 0;
      this.b = 0;
      this.a = 0;
    };
  });
  $mod.$rtti.$DynArray("TXBitMapColors",{eltype: $mod.$rtti["TColorLookup"]});
  rtl.createClass($mod,"TXBitMap",pas.WrapperPanel.TWrapperPanel,function () {
    this.$init = function () {
      pas.WrapperPanel.TWrapperPanel.$init.call(this);
      this.fMapPixelArray = [];
      this.fColorsArray = null;
      this.fColorsLookup = [];
      this.fBitMapWidth = 0;
      this.fBitMapHeight = 0;
    };
    this.$final = function () {
      this.fMapPixelArray = undefined;
      this.fColorsArray = undefined;
      this.fColorsLookup = undefined;
      pas.WrapperPanel.TWrapperPanel.$final.call(this);
    };
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetMapData = function () {
      var Result = "";
      this.RebuildXPMDataString();
      Result = this.myNode.GetAttribute("MapData",true).AttribValue;
      return Result;
    };
    this.GetMapColors = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("MapColors",true).AttribValue;
      return Result;
    };
    this.GetImageWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ImageWidth",true).AttribValue;
      return Result;
    };
    this.GetImageHeight = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ImageHeight",true).AttribValue;
      return Result;
    };
    this.GetMapPixelArray = function () {
      var Result = [];
      Result = this.fMapPixelArray;
      return Result;
    };
    this.GetActualHeight = function () {
      var Result = 0;
      var h = 0;
      h = pas.HTMLUtils.GetCurrentHeight(this.NodeName);
      this.myNode.SetAttributeValue("ActualHeight",pas.SysUtils.IntToStr(h),"Integer",true);
      Result = h;
      return Result;
    };
    this.GetActualWidth = function () {
      var Result = 0;
      var w = 0;
      w = pas.HTMLUtils.GetCurrentWidth(this.NodeName);
      this.myNode.SetAttributeValue("ActualWidth",pas.SysUtils.IntToStr(w),"Integer",true);
      Result = w;
      return Result;
    };
    this.SetMapData = function (AValue) {
      var myxpmArray = null;
      var bits = null;
      var bits0 = null;
      var i = 0;
      var c = 0;
      var x = 0;
      var tmp = "";
      var tmp1 = "";
      var colorItem = null;
      var ok = false;
      var rtmp = 0;
      var gtmp = 0;
      var btmp = 0;
      var atmp = 0;
      var h = 0;
      var w = 0;
      ok = true;
      myxpmArray = pas.Classes.TStringList.$create("Create$1");
      myxpmArray.FStrictDelimiter = true;
      myxpmArray.SetLineBreak(",");
      myxpmArray.SetTextStr(AValue);
      if (ok) {
        bits0 = pas.Classes.TStringList.$create("Create$1");
        bits0.FStrictDelimiter = true;
        bits0.SetLineBreak('"');
        bits = pas.Classes.TStringList.$create("Create$1");
        bits.FStrictDelimiter = true;
        bits.SetLineBreak(" ");
        i = 0;
        while (i < myxpmArray.GetCount()) {
          tmp = $impl.StripComments(myxpmArray.Get(i));
          x = pas.System.Pos("{",tmp);
          if (x > 0) tmp = pas.SysUtils.RightStr(tmp,x);
          if (tmp.charAt(0) === '"') {
            bits0.SetTextStr(tmp);
            tmp = bits0.Get(1);
            bits.SetTextStr(tmp);
            if (bits.GetCount() === 4) {
              this.fBitMapWidth = pas.SysUtils.StrToInt(bits.Get(0));
              this.fBitMapHeight = pas.SysUtils.StrToInt(bits.Get(1));
            };
            i = myxpmArray.GetCount();
          };
          i = i + 1;
        };
        this.fColorsArray.Clear();
        this.fColorsLookup = rtl.arraySetLength(this.fColorsLookup,null,0);
        i = 0;
        c = 0;
        while (i < myxpmArray.GetCount()) {
          bits0.SetTextStr(myxpmArray.Get(i));
          if (bits0.GetCount() > 1) {
            tmp = bits0.Get(1);
            tmp1 = "";
            while (tmp1 !== tmp) {
              tmp1 = pas.StringUtils.myStringReplace(tmp,"  "," ",-1,-1);
              tmp = tmp1;
            };
            bits.SetTextStr(tmp);
            if ((bits.GetCount() === 3) && (bits.Get(1) === "c")) {
              this.fColorsArray.Add(('"' + tmp) + '"');
              c = i;
              colorItem = $mod.TColorLookup.$create("Create");
              colorItem.PixelType = bits.Get(0);
              if (bits.Get(2) === "none") {
                colorItem.r = 255;
                colorItem.g = 255;
                colorItem.b = 255;
                colorItem.a = 0;
              } else {
                pas.StringUtils.HexRGBToColor(bits.Get(2),{get: function () {
                    return rtmp;
                  }, set: function (v) {
                    rtmp = v;
                  }},{get: function () {
                    return gtmp;
                  }, set: function (v) {
                    gtmp = v;
                  }},{get: function () {
                    return btmp;
                  }, set: function (v) {
                    btmp = v;
                  }},{get: function () {
                    return atmp;
                  }, set: function (v) {
                    atmp = v;
                  }});
                colorItem.r = rtmp;
                colorItem.g = gtmp;
                colorItem.b = btmp;
                colorItem.a = 255;
              };
              this.fColorsLookup = rtl.arraySetLength(this.fColorsLookup,null,rtl.length(this.fColorsLookup) + 1);
              this.fColorsLookup[rtl.length(this.fColorsLookup) - 1] = colorItem;
            } else if (this.fColorsArray.GetCount() > 0) i = myxpmArray.GetCount();
            i = i + 1;
          };
        };
        this.myNode.SetAttributeValue$2("MapColors",this.fColorsArray.GetTextStr());
        this.fMapPixelArray = rtl.arraySetLength(this.fMapPixelArray,"",0);
        i = c + 1;
        while (i < myxpmArray.GetCount()) {
          tmp = myxpmArray.Get(i);
          if ($impl.StripComments(myxpmArray.Get(i)).charAt(0) === '"') {
            bits0.SetTextStr(myxpmArray.Get(i));
            tmp = bits0.Get(1);
            this.fMapPixelArray = rtl.arraySetLength(this.fMapPixelArray,"",rtl.length(this.fMapPixelArray) + 1);
            this.fMapPixelArray[rtl.length(this.fMapPixelArray) - 1] = tmp;
          } else if (rtl.length(this.fMapPixelArray) > 0) i = myxpmArray.GetCount();
          i = i + 1;
        };
        this.SetMapPixelArray(this.fMapPixelArray);
        h = rtl.length(this.fMapPixelArray);
        if (h > 0) {
          w = this.fMapPixelArray[0].length;
          this.PaintRect(0,0,w,h,w,h);
        };
        this.myNode.SetAttributeValue$2("MapData",AValue);
        bits0 = rtl.freeLoc(bits0);
        bits = rtl.freeLoc(bits);
      };
      myxpmArray = rtl.freeLoc(myxpmArray);
    };
    this.SetMapColors = function (AValue) {
      var bits = null;
      var i = 0;
      var tmp = "";
      var NewMapData = "";
      var oldval = "";
      oldval = this.myNode.GetAttribute("MapColors",true).AttribValue;
      if (AValue !== oldval) {
        this.myNode.SetAttributeValue$2("MapColors",AValue);
        bits = pas.Classes.TStringList.$create("Create$1");
        bits.FStrictDelimiter = true;
        bits.SetLineBreak(",");
        bits.SetTextStr(AValue);
        this.fColorsArray.Clear();
        for (var $l1 = 0, $end2 = bits.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          tmp = $impl.StripComments(bits.Get(i));
          if (tmp !== "") this.fColorsArray.Add(tmp);
        };
        bits = rtl.freeLoc(bits);
        if (AValue !== "") {
          this.RebuildXPMDataString();
          NewMapData = this.myNode.GetAttribute("MapData",false).AttribValue;
          this.myNode.SetAttributeValue$2("MapData","...");
          this.SetMapData(NewMapData);
        };
      };
    };
    this.SetImageWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("ImageWidth",AValue);
      var ob = document.getElementById(this.NodeName);
      if (ob!=null) {
        pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
        //for correct scaling, have to set width the same as CSS width
        var obc = document.getElementById(this.NodeName+'Contents');
        obc.setAttribute('width',ob.style.width);
      };
    };
    this.SetImageHeight = function (AValue) {
      this.myNode.SetAttributeValue$2("ImageHeight",AValue);
      var ob = document.getElementById(this.NodeName);
      if (ob!=null) {
        pas.HTMLUtils.SetHeightWidthHTML(this,ob,'H',AValue);
        //for correct scaling, have to set height the same as CSS height
        var obc = document.getElementById(this.NodeName+'Contents');
        obc.setAttribute('height',ob.style.height);
      };
    };
    this.SetMapPixelArray = function (AValue) {
      var bits = null;
      var i = 0;
      this.fMapPixelArray = AValue;
      bits = pas.Classes.TStringList.$create("Create$1");
      bits.FStrictDelimiter = true;
      bits.SetLineBreak(",");
      for (var $l1 = 0, $end2 = rtl.length(AValue) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        bits.Add(AValue[i]);
      };
      this.myNode.SetAttributeValue("MapPixelArray",bits.GetTextStr(),"StringArray",true);
      bits = rtl.freeLoc(bits);
    };
    this.RebuildXPMDataString = function () {
      var newmapdata = "";
      var i = 0;
      newmapdata = (((((((((("\/* XPM *\/" + "static char * XMap[] = {") + "\/* <Values>*\/") + "\/* <width\/columns> <height\/rows> <colors> <chars per pixel>*\/") + '"') + pas.SysUtils.IntToStr(this.fBitMapWidth)) + " ") + pas.SysUtils.IntToStr(this.fBitMapHeight)) + " ") + pas.SysUtils.IntToStr(this.fColorsArray.GetCount())) + ' 1",') + "\/* <Colors>*\/";
      for (var $l1 = 0, $end2 = this.fColorsArray.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        newmapdata = (newmapdata + this.fColorsArray.Get(i)) + ",";
      };
      newmapdata = newmapdata + "\/* <Pixels>*\/";
      for (var $l3 = 0, $end4 = rtl.length(this.fMapPixelArray) - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        if (i < rtl.length(this.fMapPixelArray)) {
          newmapdata = ((newmapdata + '"') + this.fMapPixelArray[i]) + '",'}
         else newmapdata = ((newmapdata + '"') + this.fMapPixelArray[i]) + '"';
      };
      newmapdata = newmapdata + "};";
      this.myNode.SetAttributeValue$2("MapData",newmapdata);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      this.fColorsArray = pas.Classes.TStringList.$create("Create$1");
      this.fColorsArray.FStrictDelimiter = true;
      this.fColorsArray.SetLineBreak(",");
      this.fMapPixelArray = rtl.arraySetLength(this.fMapPixelArray,"",0);
      this.fColorsLookup = rtl.arraySetLength(this.fColorsLookup,null,0);
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    this.GetMapPixelArraySection = function (x, y, w, h) {
      var Result = [];
      var i = 0;
      var j = 0;
      var r = 0;
      var arr = [];
      var rowstr = "";
      r = -1;
      if ((rtl.length(this.fMapPixelArray) > 0) && (this.fMapPixelArray[0].length > 0)) if ((y + h) < rtl.length(this.fMapPixelArray)) for (var $l1 = y, $end2 = (y + h) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        arr = rtl.arraySetLength(arr,"",i + 1);
        r = r + 1;
        rowstr = "";
        if (((x + 1) + w) < this.fMapPixelArray[i].length) for (var $l3 = x + 1, $end4 = ((x + 1) + w) - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          rowstr = rowstr + this.fMapPixelArray[i].charAt(j - 1);
        };
        arr[r] = rowstr;
      };
      Result = arr;
      return Result;
    };
    this.SetMapPixelArraySection = function (AValue, x, y) {
      var i = 0;
      var j = 0;
      if ((((rtl.length(this.fMapPixelArray) > 0) && (rtl.length(AValue) > 0)) && ((y + rtl.length(AValue)) < rtl.length(this.fMapPixelArray))) && ((x + AValue[0].length) < this.fMapPixelArray[0].length)) {
        for (var $l1 = 0, $end2 = rtl.length(AValue) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          for (var $l3 = 1, $end4 = AValue[0].length; $l3 <= $end4; $l3++) {
            j = $l3;
            this.fMapPixelArray[y + i] = rtl.setCharAt(this.fMapPixelArray[y + i],(x + j) - 1,AValue[i].charAt(j - 1));
          };
        };
      };
    };
    this.PaintRect = function (sx, sy, sWidth, sHeight, ImageWidth, ImageHeight) {
      var NumColours = 0;
      NumColours = rtl.length(this.fColorsLookup);
      //alert('PaintRect. '+this.NodeName+' Imagewidth='+ImageWidth+' Imageheight='+ImageHeight);
          var RawImagecanvas  = document.getElementById(this.NodeName+'Contents');
              if (RawImagecanvas!=null) {
            var RawImagecontext = RawImagecanvas.getContext("2d");
            var RawImageData = RawImagecontext.createImageData(ImageWidth, ImageHeight);
                //alert('ImageData length='+RawImageData.data.length);
      
            function SetRawPixel(x,y,r,g,b,a)
            {
                //alert('SetRawPixel '+x+','+y+','+r+','+g+','+b+','+a);
                  var pixelIndex =  4 * (x + y * ImageWidth);
                  //alert('SetRawPixel '+x+','+y+' index='+pixelIndex);
              RawImageData.data[pixelIndex    ] = r;  //0..255 red   color
              RawImageData.data[pixelIndex + 1] = g;  //0..255 green color
              RawImageData.data[pixelIndex + 2] = b;  //0..255 blue  color
              RawImageData.data[pixelIndex + 3] = a;  //0..255 transparency
            }
      
            function PaintRawImage(sx, sy, sWidth, sHeight) //Copy a rectangle from the Raw Pixel Data
            {
              // Canvas X and Y are sx, sy, because we are dealing with a custom component with coincedent origins
              // context.putImageData(RawImageData, canvasX, canvasY, sx, sy, sWidth, sHeight);
              // we assume that sx,and sy etc deal with the row indexing and times 4 aspects internally
              RawImagecontext.putImageData(RawImageData, sx, sy, sx, sy, sWidth, sHeight);
            }
      
            function LookupColour(ob,instring)
            {
              for (var i = 0; i < NumColours; i++)
              {
                var r = 0;
                var g = 0;
                var b = 0;
                var a = 0; // if a lookupchar is not found the pixel is transparent
                if (instring == ob.fColorsLookup[i].PixelType)
                  {
                      r = ob.fColorsLookup[i].r;
                      g = ob.fColorsLookup[i].g;
                      b = ob.fColorsLookup[i].b;
                      a = 255;
                              //alert('found color '+instring+' = '+r+' '+g+' '+b+' '+a);
                              return [r,g,b,a];
                  }
              }
                   return [r,g,b,a];
            }
      
            for (var j = 0; j < sHeight; j++)
            {
      
                for (var i = 0; i < sWidth; i++)
                {
                          var clr=LookupColour(this,this.fMapPixelArray[sy+j][sx+i]);
                          SetRawPixel(sx+i,sy+j,clr[0],clr[1],clr[2],clr[3]);
                }
              }
                  PaintRawImage(sx,sy,sWidth, sHeight);
                };
    };
    var $r = this.$rtti;
    $r.addProperty("MapData",3,rtl.string,"GetMapData","SetMapData");
    $r.addProperty("MapColors",3,rtl.string,"GetMapColors","SetMapColors");
    $r.addProperty("ImageHeight",3,rtl.string,"GetImageHeight","SetImageHeight");
    $r.addProperty("ImageWidth",3,rtl.string,"GetImageWidth","SetImageWidth");
    $r.addProperty("MapPixelArray",3,pas.SysUtils.$rtti["TStringArray"],"GetMapPixelArray","SetMapPixelArray");
    $r.addProperty("ActualHeight",1,rtl.longint,"GetActualHeight","");
    $r.addProperty("ActualWidth",1,rtl.longint,"GetActualWidth","");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ActualHeight","Integer","","",true,false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ActualWidth","Integer","","",true,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ImageWidth","String","250","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ImageHeight","String","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Bitmap Image","",false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MapColors","String","","",false,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MapData","String",((((((((((((((((((((((((((((("\/* XPM *\/" + "static char * XMap[] = {") + "\/* <Values>") + "\/* <width\/columns> <height\/rows> <colors> <chars per pixel>*\/") + '"48 20 2 1",') + "\/* <Colors>*\/") + '"a c #ffffff",') + '"b c #000000",') + "\/* <Pixels>*\/") + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"bbaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"bbaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"bbaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"bbaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"bbaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"bbaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"bbaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"abaabaababaaabaabababaabaabaababaabaaababaabaaab",') + '"bbaabaababaaabaabababaabaabaababaabaaababaabaaab"') + "\/* <Extensions>*\/") + "};","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXBitMap";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var LabelText = "";
    var OnClickString = "";
    var marginString = "";
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    marginString = ((((((("margin:" + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + ";";
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', \'\');" ';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
        var MyObjectName=ScreenObjectName+'Contents';
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
    
        var ImageString = ' <canvas  id='+MyObjectName+ ' style="display: inline-block; width:100%; height:100%;" ' +
                             OnClickString +
                             ' >';
    
        var HTMLString = labelstring+ImageString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
        }
        catch(err) { alert(err.message+'  in XBitMap.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXBitMap.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
  $impl.StripComments = function (instr) {
    var Result = "";
    var workstr = "";
    var tmp = "";
    var x1 = 0;
    var x2 = 0;
    workstr = instr;
    if (instr.length > 3) while (pas.System.Pos("\/*",workstr) > 0) {
      x1 = pas.System.Pos("\/*",workstr);
      x2 = pas.System.Pos("*\/",workstr);
      if (x2 <= x1) x2 = x1 + 2;
      tmp = pas.SysUtils.LeftStr(workstr,x1 - 1);
      workstr = pas.SysUtils.RightStr(tmp,(x2 - x1) + 2);
    };
    Result = workstr;
    return Result;
  };
});
rtl.module("XLabel",["System","Classes","SysUtils","NodeUtils","HTMLUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXLabel",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetLabelCaption = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("LabelCaption",true).AttribValue;
      return Result;
    };
    this.SetLabelCaption = function (AValue) {
      this.myNode.SetAttributeValue$2("LabelCaption",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
      //alert('set labelCaption to '+AValue);
         ob.innerHTML=AValue;   };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("LabelCaption",3,rtl.string,"GetLabelCaption","SetLabelCaption");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelCaption","String","...Label...","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelText");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"BgColor");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXLabel";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var LabelText = "";
    var OnClickString = "";
    var marginString = "";
    LabelText = MyNode.GetAttribute("LabelCaption",true).AttribValue;
    marginString = ((((((("margin:" + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + ";";
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value);" ';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var MyObjectName=ScreenObjectName+'Contents';
    
        var HTMLString = ' <label id='+MyObjectName+' '+
                       OnClickString +
                     ' style="display: inline-block;'+marginString+'; backgroundColor=inherit"  >'
                     +LabelText+'</label> ';
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
        }
        catch(err) { alert(err.message+'  in XLabel.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXLabel.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("PasteDialogUnit",["System","Classes","SysUtils","WrapperPanel","StringUtils","EventsInterface","XForm","XVBox","XMemo","XLabel","XButton","NodeUtils"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TpasteDialogEvents",pas.System.TObject,function () {
    this.PasteDoneBtnHandleButtonClick = function (e, nodeID, myValue) {
      var StringToCopy = "";
      StringToCopy = $mod.PasteTarget.GetItemValue();
      // alert('click done button handler');
       pas.NodeUtils.myCopyToClip('HTML System',StringToCopy);
      // alert('copy done');
      $mod.PasteDialog.SetShowing("No");
    };
  });
  this.PasteDialog = null;
  this.CompletionEvent = null;
  this.PasteTarget = null;
  this.PasteDialogEvents = null;
  this.PasteDoneBtn = null;
  this.PasteLabel = null;
  this.SetupPasteDialogForm = function () {
    var FormNode = null;
    var VBNode = null;
    var MemoNode = null;
    var BtnNode = null;
    var LabelNode = null;
    var VB = null;
    FormNode = pas.WrapperPanel.AddDynamicWidget("TXForm",null,null,"PasteDialog","Left",-1);
    $mod.PasteDialog = FormNode;
    pas.NodeUtils.AddChildToParentNode({p: pas.NodeUtils, get: function () {
        return this.p.UIRootNode;
      }, set: function (v) {
        this.p.UIRootNode = v;
      }},{get: function () {
        return FormNode;
      }, set: function (v) {
        FormNode = v;
      }},-1);
    $mod.PasteDialog.SetCaption("PasteDialog");
    $mod.PasteDialog.SetTop(214);
    $mod.PasteDialog.SetLeft(900);
    $mod.PasteDialog.SetHeight(106);
    $mod.PasteDialog.SetWidth(320);
    FormNode.IsDynamic = false;
    VBNode = pas.WrapperPanel.AddDynamicWidget("TXVBox",$mod.PasteDialog,$mod.PasteDialog.myNode,"Popup1Root","Left",-1);
    VBNode.IsDynamic = false;
    VB = VBNode.ScreenObject;
    VB.SetContainerHeight("100%");
    LabelNode = pas.WrapperPanel.AddDynamicWidget("TXLabel",$mod.PasteDialog,VBNode,"PasteLabel","Left",-1);
    LabelNode.IsDynamic = false;
    $mod.PasteLabel = LabelNode.ScreenObject;
    $mod.PasteLabel.SetLabelCaption("Waiting for a copy\/paste action");
    MemoNode = pas.WrapperPanel.AddDynamicWidget("TXMemo",$mod.PasteDialog,VBNode,"PasteTarget","Left",-1);
    MemoNode.IsDynamic = false;
    $mod.PasteTarget = MemoNode.ScreenObject;
    $mod.PasteTarget.SetMemoHeight("40");
    $mod.PasteTarget.SetMemoWidth("200");
    BtnNode = pas.WrapperPanel.AddDynamicWidget("TXButton",$mod.PasteDialog,VBNode,"PasteDoneBtn","Left",-1);
    BtnNode.IsDynamic = false;
    $mod.PasteDoneBtn = BtnNode.ScreenObject;
    $mod.PasteDoneBtn.myNode = BtnNode;
    $mod.PasteDoneBtn.SetCaption("Done");
    $mod.PasteDoneBtn.myNode.RegisterEvent("ButtonClick",rtl.createCallback($mod.PasteDialogEvents,"PasteDoneBtnHandleButtonClick"));
  };
  $mod.$init = function () {
    $mod.PasteDialogEvents = $mod.TpasteDialogEvents.$create("Create");
  };
});
rtl.module("NodeUtils",["System","Classes","SysUtils","StringUtils","TypInfo","EventsInterface"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$Class("TDataNode");
  this.TCodeInputRec = function (s) {
    if (s) {
      this.InputNodeName = s.InputNodeName;
      this.InputAttribName = s.InputAttribName;
      this.InputSynonym = s.InputSynonym;
      this.InputValue = s.InputValue;
    } else {
      this.InputNodeName = "";
      this.InputAttribName = "";
      this.InputSynonym = "";
      this.InputValue = "";
    };
    this.$equal = function (b) {
      return (this.InputNodeName === b.InputNodeName) && ((this.InputAttribName === b.InputAttribName) && ((this.InputSynonym === b.InputSynonym) && (this.InputValue === b.InputValue)));
    };
  };
  $mod.$rtti.$Record("TCodeInputRec",{}).addFields("InputNodeName",rtl.string,"InputAttribName",rtl.string,"InputSynonym",rtl.string,"InputValue",rtl.string);
  $mod.$rtti.$DynArray("TCodeInputs",{eltype: $mod.$rtti["TCodeInputRec"]});
  $mod.$rtti.$MethodVar("TEventHandler",{procsig: rtl.newTIProcSig([["e",pas.EventsInterface.$rtti["TEventStatus"]],["nodeID",rtl.string],["myValue",rtl.string]]), methodkind: 0});
  this.TEventHandlerRec = function (s) {
    if (s) {
      this.TheHandler = s.TheHandler;
      this.TheCode = s.TheCode;
      this.InitCode = s.InitCode;
    } else {
      this.TheHandler = null;
      this.TheCode = "";
      this.InitCode = "";
    };
    this.$equal = function (b) {
      return rtl.eqCallback(this.TheHandler,b.TheHandler) && ((this.TheCode === b.TheCode) && (this.InitCode === b.InitCode));
    };
  };
  $mod.$rtti.$Record("TEventHandlerRec",{}).addFields("TheHandler",$mod.$rtti["TEventHandler"],"TheCode",rtl.string,"InitCode",rtl.string);
  $mod.$rtti.$MethodVar("TGenericHandler",{procsig: rtl.newTIProcSig([["MyEventType",rtl.string],["myValue",rtl.string],["myNode",$mod.$rtti["TDataNode"]]],rtl.boolean), methodkind: 1});
  $mod.$rtti.$ProcVar("TAddComponentFunc",{procsig: rtl.newTIProcSig([["MyNode",$mod.$rtti["TDataNode"]],["ParentNode",$mod.$rtti["TDataNode"]],["ScreenObjectName",rtl.string],["position",rtl.longint],["Alignment",rtl.string]],$mod.$rtti["TDataNode"])});
  rtl.createClass($mod,"TForm",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.fName = "";
    };
    var $r = this.$rtti;
    $r.addProperty("Name",0,rtl.string,"fName","fName");
  });
  $mod.$rtti.$ProcVar("TCreateInObFunc",{procsig: rtl.newTIProcSig([["MyForm",$mod.$rtti["TForm"]],["NodeName",rtl.string]],pas.System.$rtti["TObject"])});
  this.TNodeFuncsLookup = function (s) {
    if (s) {
      this.NodeType = s.NodeType;
      this.ScreenObjFunctionPtr = s.ScreenObjFunctionPtr;
      this.InObFunctionPtr = s.InObFunctionPtr;
    } else {
      this.NodeType = "";
      this.ScreenObjFunctionPtr = null;
      this.InObFunctionPtr = null;
    };
    this.$equal = function (b) {
      return (this.NodeType === b.NodeType) && (rtl.eqCallback(this.ScreenObjFunctionPtr,b.ScreenObjFunctionPtr) && rtl.eqCallback(this.InObFunctionPtr,b.InObFunctionPtr));
    };
  };
  $mod.$rtti.$Record("TNodeFuncsLookup",{}).addFields("NodeType",rtl.string,"ScreenObjFunctionPtr",$mod.$rtti["TAddComponentFunc"],"InObFunctionPtr",$mod.$rtti["TCreateInObFunc"]);
  $mod.$rtti.$DynArray("TNodeFuncsTable",{eltype: $mod.$rtti["TNodeFuncsLookup"]});
  this.TDefaultAttribute = function (s) {
    if (s) {
      this.AttribName = s.AttribName;
      this.AttribType = s.AttribType;
      this.AttribValue = s.AttribValue;
      this.AttribReadOnly = s.AttribReadOnly;
      this.AttribHint = s.AttribHint;
      this.AttribIncludeInSave = s.AttribIncludeInSave;
    } else {
      this.AttribName = "";
      this.AttribType = "";
      this.AttribValue = "";
      this.AttribReadOnly = false;
      this.AttribHint = "";
      this.AttribIncludeInSave = false;
    };
    this.$equal = function (b) {
      return (this.AttribName === b.AttribName) && ((this.AttribType === b.AttribType) && ((this.AttribValue === b.AttribValue) && ((this.AttribReadOnly === b.AttribReadOnly) && ((this.AttribHint === b.AttribHint) && (this.AttribIncludeInSave === b.AttribIncludeInSave)))));
    };
  };
  $mod.$rtti.$Record("TDefaultAttribute",{}).addFields("AttribName",rtl.string,"AttribType",rtl.string,"AttribValue",rtl.string,"AttribReadOnly",rtl.boolean,"AttribHint",rtl.string,"AttribIncludeInSave",rtl.boolean);
  $mod.$rtti.$DynArray("TDefaultAttributesArray",{eltype: $mod.$rtti["TDefaultAttribute"]});
  this.TDefaultAttribsByType = function (s) {
    if (s) {
      this.NodeType = s.NodeType;
      this.DefaultAttribs = s.DefaultAttribs;
    } else {
      this.NodeType = "";
      this.DefaultAttribs = [];
    };
    this.$equal = function (b) {
      return (this.NodeType === b.NodeType) && (this.DefaultAttribs === b.DefaultAttribs);
    };
  };
  $mod.$rtti.$Record("TDefaultAttribsByType",{}).addFields("NodeType",rtl.string,"DefaultAttribs",$mod.$rtti["TDefaultAttributesArray"]);
  $mod.$rtti.$DynArray("TDefaultAttribsTable",{eltype: $mod.$rtti["TDefaultAttribsByType"]});
  this.TNodeAttribute = function (s) {
    if (s) {
      this.AttribName = s.AttribName;
      this.AttribType = s.AttribType;
      this.AttribValue = s.AttribValue;
      this.AttribReadOnly = s.AttribReadOnly;
      this.AttribSource = new $mod.TCodeInputRec(s.AttribSource);
    } else {
      this.AttribName = "";
      this.AttribType = "";
      this.AttribValue = "";
      this.AttribReadOnly = false;
      this.AttribSource = new $mod.TCodeInputRec();
    };
    this.$equal = function (b) {
      return (this.AttribName === b.AttribName) && ((this.AttribType === b.AttribType) && ((this.AttribValue === b.AttribValue) && ((this.AttribReadOnly === b.AttribReadOnly) && this.AttribSource.$equal(b.AttribSource))));
    };
  };
  $mod.$rtti.$Record("TNodeAttribute",{}).addFields("AttribName",rtl.string,"AttribType",rtl.string,"AttribValue",rtl.string,"AttribReadOnly",rtl.boolean,"AttribSource",$mod.$rtti["TCodeInputRec"]);
  $mod.$rtti.$DynArray("TNodesArray",{eltype: $mod.$rtti["TDataNode"]});
  rtl.createClass($mod,"TComponentTag",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.HH = "";
      this.WW = "";
    };
  });
  rtl.createClass($mod,"TDataNode",$mod.TForm,function () {
    this.$init = function () {
      $mod.TForm.$init.call(this);
      this.NodeName = "";
      this.NodeType = "";
      this.NodeClass = "";
      this.IsDynamic = false;
      this.ScreenObject = null;
      this.MyForm = null;
      this.NodeAttributes = [];
      this.ChildNodes = [];
      this.myEventTypes = null;
      this.myEventHandlers = [];
    };
    this.$final = function () {
      this.ScreenObject = undefined;
      this.MyForm = undefined;
      this.NodeAttributes = undefined;
      this.ChildNodes = undefined;
      this.myEventTypes = undefined;
      this.myEventHandlers = undefined;
      $mod.TForm.$final.call(this);
    };
    this.Create$1 = function (MyClass, MyName, MyType, NodeIsDynamic) {
      this.ChildNodes = rtl.arraySetLength(this.ChildNodes,null,0);
      this.NodeAttributes = rtl.arraySetLength(this.NodeAttributes,$mod.TNodeAttribute,0);
      this.myEventTypes = pas.Classes.TStringList.$create("Create$1");
      this.myEventHandlers = rtl.arraySetLength(this.myEventHandlers,$mod.TEventHandlerRec,0);
      this.NodeClass = MyClass;
      this.NodeName = MyName;
      this.NodeType = MyType;
      this.IsDynamic = NodeIsDynamic;
    };
    this.DeleteMe = function () {
      this.ScreenObject = null;
      if (this != null) this.$destroy("Destroy");
    };
    this.HasAttribute = function (AttrName) {
      var Result = false;
      var found = false;
      var i = 0;
      found = false;
      for (var $l1 = 0, $end2 = rtl.length(this.NodeAttributes) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.NodeAttributes[i].AttribName === AttrName) found = true;
      };
      Result = found;
      return Result;
    };
    this.GetAttribute = function (AttrName, AllowSpace) {
      var Result = new $mod.TNodeAttribute();
      var i = 0;
      var foundAttrib = new $mod.TNodeAttribute();
      var myAttribs = [];
      i = 0;
      foundAttrib.AttribName = "";
      myAttribs = this.NodeAttributes;
      while (i < rtl.length(myAttribs)) {
        if (this.NodeAttributes[i].AttribName === AttrName) {
          foundAttrib = new $mod.TNodeAttribute(this.NodeAttributes[i]);
          i = rtl.length(myAttribs);
        };
        i = i + 1;
      };
      if (foundAttrib.AttribName !== AttrName) if (AllowSpace) {
        foundAttrib.AttribName = AttrName;
        foundAttrib.AttribType = "String";
        foundAttrib.AttribValue = "";
        foundAttrib.AttribReadOnly = false;
      } else {
        pas.StringUtils.ShowMessage((("Attribute " + AttrName) + " not found in node ") + this.NodeName);
      };
      Result = new $mod.TNodeAttribute(foundAttrib);
      return Result;
    };
    this.GetAttributeAnyCase = function (AttrName, AllowSpace) {
      var Result = new $mod.TNodeAttribute();
      var i = 0;
      var foundAttrib = new $mod.TNodeAttribute();
      var myAttribs = [];
      i = 0;
      foundAttrib.AttribName = "";
      myAttribs = this.NodeAttributes;
      while (i < rtl.length(myAttribs)) {
        if (pas.SysUtils.Trim(pas.SysUtils.UpperCase(this.NodeAttributes[i].AttribName)) === pas.SysUtils.Trim(pas.SysUtils.UpperCase(AttrName))) {
          foundAttrib = new $mod.TNodeAttribute(this.NodeAttributes[i]);
          i = rtl.length(myAttribs);
        };
        i = i + 1;
      };
      if (pas.SysUtils.Trim(pas.SysUtils.UpperCase(foundAttrib.AttribName)) !== pas.SysUtils.Trim(pas.SysUtils.UpperCase(AttrName))) if (AllowSpace) {
        foundAttrib.AttribName = AttrName;
        foundAttrib.AttribType = "String";
        foundAttrib.AttribValue = "";
        foundAttrib.AttribReadOnly = false;
      } else {
        pas.StringUtils.ShowMessage((("Attribute " + AttrName) + " not found in node ") + this.NodeName);
      };
      Result = new $mod.TNodeAttribute(foundAttrib);
      return Result;
    };
    this.GetAttributeAnyCase$1 = function (AttrName) {
      var Result = new $mod.TNodeAttribute();
      Result = new $mod.TNodeAttribute(this.GetAttributeAnyCase(AttrName,false));
      return Result;
    };
    this.AddAttribute = function (AttributeName, AttributeType, AttributeValue, AttributeReadOnly) {
      var numAttributes = 0;
      var myAttributes = [];
      myAttributes = this.NodeAttributes;
      numAttributes = rtl.length(myAttributes);
      this.NodeAttributes = rtl.arraySetLength(this.NodeAttributes,$mod.TNodeAttribute,numAttributes + 1);
      this.NodeAttributes[numAttributes].AttribName = AttributeName;
      this.NodeAttributes[numAttributes].AttribValue = AttributeValue;
      this.NodeAttributes[numAttributes].AttribType = AttributeType;
      this.NodeAttributes[numAttributes].AttribReadOnly = AttributeReadOnly;
      $mod.SortAttribs({p: this, get: function () {
          return this.p.NodeAttributes;
        }, set: function (v) {
          this.p.NodeAttributes = v;
        }});
    };
    this.SetAttributeValue = function (AttrName, NewValue, AttrType, AttribReadOnly) {
      var foundAttrib = new $mod.TNodeAttribute();
      var myAttribs = [];
      var i = 0;
      var found = false;
      foundAttrib = new $mod.TNodeAttribute(this.GetAttribute(AttrName,true));
      if (AttrType !== "") foundAttrib.AttribType = AttrType;
      foundAttrib.AttribValue = NewValue;
      found = false;
      myAttribs = this.NodeAttributes;
      i = 0;
      while (i < rtl.length(myAttribs)) {
        if (this.NodeAttributes[i].AttribName === AttrName) {
          this.NodeAttributes[i] = new $mod.TNodeAttribute(foundAttrib);
          i = rtl.length(myAttribs);
          found = true;
        };
        i = i + 1;
      };
      if (!found) {
        this.AddAttribute(foundAttrib.AttribName,foundAttrib.AttribType,foundAttrib.AttribValue,AttribReadOnly);
      };
    };
    this.SetAttributeValue$1 = function (AttrName, NewValue, AttrType) {
      this.SetAttributeValue(AttrName,NewValue,AttrType,false);
    };
    this.SetAttributeValue$2 = function (AttrName, NewValue) {
      this.SetAttributeValue$1(AttrName,NewValue,"");
    };
    this.SetAttributeSource = function (AttrName, SourceNodeName, SourceAttribName) {
      var foundAttrib = new $mod.TNodeAttribute();
      var myAttribs = [];
      var i = 0;
      var found = false;
      foundAttrib = new $mod.TNodeAttribute(this.GetAttribute(AttrName,true));
      if (foundAttrib.AttribName === "") if (SourceNodeName !== "") {
        pas.StringUtils.ShowMessage((("Unable to set source for missing attribute " + this.NodeName) + ".") + AttrName);
        return;
      };
      foundAttrib.AttribSource.InputNodeName = SourceNodeName;
      foundAttrib.AttribSource.InputAttribName = SourceAttribName;
      if (SourceNodeName === "") {
        foundAttrib.AttribSource.InputSynonym = "";
        foundAttrib.AttribSource.InputValue = "";
      };
      found = false;
      myAttribs = this.NodeAttributes;
      i = 0;
      while (i < rtl.length(myAttribs)) {
        if (this.NodeAttributes[i].AttribName === AttrName) {
          this.NodeAttributes[i] = new $mod.TNodeAttribute(foundAttrib);
          i = rtl.length(myAttribs);
          found = true;
        };
        i = i + 1;
      };
    };
    this.GetChildIndex = function (ChildNode) {
      var Result = 0;
      var i = 0;
      var mychildren = [];
      Result = -1;
      mychildren = this.ChildNodes;
      for (var $l1 = 0, $end2 = rtl.length(mychildren) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (mychildren[i].NodeName === ChildNode.NodeName) Result = i;
      };
      return Result;
    };
    this.RemoveChildNode = function (ChildNode) {
      var i = 0;
      var l = 0;
      var found = false;
      var mychildren = [];
      found = false;
      mychildren = this.ChildNodes;
      l = rtl.length(mychildren);
      i = 0;
      while (i < rtl.length(mychildren)) {
        if (found === false) {
          if (mychildren[i] === ChildNode) {
            found = true;
          };
        };
        if (found && (i < rtl.length(mychildren))) mychildren[i] = mychildren[i + 1];
        i = i + 1;
      };
      if (found) mychildren = rtl.arraySetLength(mychildren,null,l - 1);
      this.ChildNodes = mychildren;
    };
    this.FindRegisteredEvent = function (EventType) {
      var Result = null;
      var i = 0;
      Result = null;
      if (rtl.length(this.myEventHandlers) < this.myEventTypes.GetCount()) this.myEventHandlers = rtl.arraySetLength(this.myEventHandlers,$mod.TEventHandlerRec,this.myEventTypes.GetCount());
      for (var $l1 = 0, $end2 = this.myEventTypes.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.myEventTypes.Get(i) === EventType) Result = this.myEventHandlers[i].TheHandler;
      };
      return Result;
    };
    this.RegisterEvent = function (EventType, TheHandler) {
      var i = 0;
      if (rtl.length(this.myEventHandlers) < this.myEventTypes.GetCount()) this.myEventHandlers = rtl.arraySetLength(this.myEventHandlers,$mod.TEventHandlerRec,this.myEventTypes.GetCount());
      for (var $l1 = 0, $end2 = this.myEventTypes.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.myEventTypes.Get(i) === EventType) {
          this.myEventHandlers[i].TheHandler = TheHandler;
        };
      };
    };
    this.HasUserEventCode = function (EventType) {
      var Result = false;
      var i = 0;
      Result = false;
      for (var $l1 = 0, $end2 = rtl.length(this.myEventHandlers) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.myEventTypes.Get(i) === EventType) if (pas.SysUtils.Trim(this.myEventHandlers[i].TheCode) !== "") Result = true;
      };
      return Result;
    };
    this.EventNum = function (EventType) {
      var Result = 0;
      var i = 0;
      Result = -1;
      for (var $l1 = 0, $end2 = this.myEventTypes.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.myEventTypes.Get(i) === EventType) Result = i;
      };
      return Result;
    };
    this.GetEventCode = function (EventType) {
      var Result = "";
      var i = 0;
      Result = "";
      for (var $l1 = 0, $end2 = rtl.length(this.myEventHandlers) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.myEventTypes.Get(i) === EventType) if (pas.SysUtils.Trim(this.myEventHandlers[i].TheCode) !== "") Result = this.myEventHandlers[i].TheCode;
      };
      return Result;
    };
    this.GetEventInitCode = function (EventType) {
      var Result = "";
      var i = 0;
      Result = "";
      for (var $l1 = 0, $end2 = rtl.length(this.myEventHandlers) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.myEventTypes.Get(i) === EventType) if (pas.SysUtils.Trim(this.myEventHandlers[i].InitCode) !== "") Result = this.myEventHandlers[i].InitCode;
      };
      return Result;
    };
  });
  this.AlignmentOptions = ["Left","Right","Centre","Top","Bottom"];
  this.LabelPosOptions = ["Top","Bottom","Left","Right"];
  this.ScrollBarsOptions = ["Bottom","Right","Both"];
  this.TAttribOptionsRec = function (s) {
    if (s) {
      this.ComponentType = s.ComponentType;
      this.AttribName = s.AttribName;
      this.Options = s.Options;
    } else {
      this.ComponentType = "";
      this.AttribName = "";
      this.Options = null;
    };
    this.$equal = function (b) {
      return (this.ComponentType === b.ComponentType) && ((this.AttribName === b.AttribName) && (this.Options === b.Options));
    };
  };
  $mod.$rtti.$Record("TAttribOptionsRec",{}).addFields("ComponentType",rtl.string,"AttribName",rtl.string,"Options",pas.Classes.$rtti["TStringList"]);
  $mod.$rtti.$DynArray("TAttribOptionsArray",{eltype: $mod.$rtti["TAttribOptionsRec"]});
  rtl.createClass($mod,"TInterfaceObject",$mod.TDataNode,function () {
    this.$init = function () {
      $mod.TDataNode.$init.call(this);
      this.myNode = null;
    };
    this.$final = function () {
      this.myNode = undefined;
      $mod.TDataNode.$final.call(this);
    };
    var $r = this.$rtti;
    $r.addField("myNode",$mod.$rtti["TDataNode"]);
  });
  this.SubstituteSpecials = function (instring) {
    var Result = "";
    var tempstr = "";
    tempstr = instring;
    tempstr = pas.StringUtils.myStringReplace(tempstr,"<","&lt;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,">","&gt;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"'","&apos;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,'"',"&quot;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"\\n","&bksln;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"\\","&bksl;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,pas.System.LineEnding,"&crlf;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,String.fromCharCode(10),"&crlf;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,$mod.EventAttributeDelimiter,"&eadlm;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,$mod.EventListdelimiter,"&eldlm;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,$mod.delimiterBetweenAttribsAndEvents,"&aedlm;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,$mod.attributeListdelimiter,"&aldlm;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,$mod.EventListdelimiter,"&eldlm;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,$mod.AttribBitsDelimiter,"&abdlm;",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,$mod.AttribLinkDelimiter,"&akdlm;",-1,-1);
    Result = tempstr;
    return Result;
  };
  this.UnSubstituteSpecials = function (instring) {
    var Result = "";
    var tempstr = "";
    tempstr = instring;
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&lt;","<",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&gt;",">",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&apos;","'",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&quot;",'"',-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&bksln;","\\n",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&bksl;","\\",-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&crlf;",pas.System.LineEnding,-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&eadlm;",$mod.EventAttributeDelimiter,-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&eldlm;",$mod.EventListdelimiter,-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&aedlm;",$mod.delimiterBetweenAttribsAndEvents,-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&aldlm;",$mod.attributeListdelimiter,-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&eldlm;",$mod.EventListdelimiter,-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&abdlm;",$mod.AttribBitsDelimiter,-1,-1);
    tempstr = pas.StringUtils.myStringReplace(tempstr,"&akdlm;",$mod.AttribLinkDelimiter,-1,-1);
    Result = tempstr;
    return Result;
  };
  this.CreateFormNode = function (myForm) {
    var Result = null;
    var myNode = null;
    myForm.ChildNodes = rtl.arraySetLength(myForm.ChildNodes,null,0);
    myForm.NodeAttributes = rtl.arraySetLength(myForm.NodeAttributes,$mod.TNodeAttribute,0);
    myForm.myEventTypes = pas.Classes.TStringList.$create("Create$1");
    myForm.myEventHandlers = rtl.arraySetLength(myForm.myEventHandlers,$mod.TEventHandlerRec,0);
    myForm.IsDynamic = false;
    myForm.NodeName = myForm.fName;
    myForm.NodeClass = "UI";
    myForm.NodeType = "TXForm";
    myForm.ScreenObject = myForm;
    myForm.MyForm = myForm;
    myNode = myForm;
    myForm.myNode = myNode;
    Result = myNode;
    return Result;
  };
  this.AddFormToNodeTree = function (myForm) {
    var Result = null;
    var myNode = null;
    myNode = $mod.CreateFormNode(myForm);
    $mod.AddChildToParentNode({p: $mod, get: function () {
        return this.p.UIRootNode;
      }, set: function (v) {
        this.p.UIRootNode = v;
      }},{get: function () {
        return myNode;
      }, set: function (v) {
        myNode = v;
      }},-1);
    Result = myNode;
    return Result;
  };
  this.InitialiseCodeTree = function () {
    var Result = null;
    var myNode = null;
    myNode = null;
    myNode = $mod.TDataNode.$create("Create$1",["Code","CodeUnits","Root",false]);
    $mod.AddChildToParentNode({p: $mod, get: function () {
        return this.p.SystemNodeTree;
      }, set: function (v) {
        this.p.SystemNodeTree = v;
      }},{get: function () {
        return myNode;
      }, set: function (v) {
        myNode = v;
      }},-1);
    Result = myNode;
    return Result;
  };
  this.AddDefaultsToTable = function (MyNodeType, myDefaultAttribs) {
    $mod.DefaultAttribsByType = rtl.arraySetLength($mod.DefaultAttribsByType,$mod.TDefaultAttribsByType,rtl.length($mod.DefaultAttribsByType) + 1);
    $mod.DefaultAttribsByType[rtl.length($mod.DefaultAttribsByType) - 1].NodeType = MyNodeType;
    $mod.DefaultAttribsByType[rtl.length($mod.DefaultAttribsByType) - 1].DefaultAttribs = myDefaultAttribs;
  };
  this.GetDefaultAttribs = function (NodeType) {
    var Result = [];
    var i = 0;
    var empty = [];
    var thisrec = new $mod.TDefaultAttribsByType();
    empty = rtl.arraySetLength(empty,$mod.TDefaultAttribute,0);
    Result = empty;
    i = 0;
    while (i < rtl.length($mod.DefaultAttribsByType)) {
      if ($mod.DefaultAttribsByType[i].NodeType === NodeType) {
        thisrec = new $mod.TDefaultAttribsByType($mod.DefaultAttribsByType[i]);
        Result = thisrec.DefaultAttribs;
        i = rtl.length($mod.DefaultAttribsByType);
      };
      i = i + 1;
    };
    return Result;
  };
  this.GetDefaultAttrib = function (NodeType, AttrName) {
    var Result = new $mod.TDefaultAttribute();
    var i = 0;
    var j = 0;
    var dummyrec = new $mod.TDefaultAttribute();
    var thisrec = new $mod.TDefaultAttribsByType();
    dummyrec.AttribName = "";
    Result = new $mod.TDefaultAttribute(dummyrec);
    i = 0;
    while (i < rtl.length($mod.DefaultAttribsByType)) {
      if ($mod.DefaultAttribsByType[i].NodeType === NodeType) {
        j = 0;
        thisrec = new $mod.TDefaultAttribsByType($mod.DefaultAttribsByType[i]);
        while (j < rtl.length(thisrec.DefaultAttribs)) {
          if ($mod.DefaultAttribsByType[i].DefaultAttribs[j].AttribName === AttrName) {
            Result = new $mod.TDefaultAttribute($mod.DefaultAttribsByType[i].DefaultAttribs[j]);
            j = rtl.length($mod.DefaultAttribsByType[i].DefaultAttribs);
          };
          j = j + 1;
        };
        i = rtl.length($mod.DefaultAttribsByType);
      };
      i = i + 1;
    };
    return Result;
  };
  this.AddDefaultAttribs = function (myComponent, NewNode, defaultAttribs) {
    var i = 0;
    $mod.SetNodePropDefaults(NewNode,defaultAttribs);
    for (var $l1 = 0, $end2 = rtl.length(defaultAttribs) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (defaultAttribs[i].AttribReadOnly === false) {
        $mod.SetXObjectProperty(myComponent,NewNode,defaultAttribs[i].AttribName,defaultAttribs[i].AttribType,defaultAttribs[i].AttribValue);
      };
    };
  };
  this.AddDefaultAttribute = function (Attribs, AttrName, AttrType, AttrValue, AttrHint, ro) {
    $mod.AddDefaultAttribute$1(Attribs,AttrName,AttrType,AttrValue,AttrHint,ro,true);
  };
  this.AddDefaultAttribute$1 = function (Attribs, AttrName, AttrType, AttrValue, AttrHint, ro, incl) {
    var numAttributes = 0;
    numAttributes = rtl.length(Attribs.get());
    Attribs.set(rtl.arraySetLength(Attribs.get(),$mod.TDefaultAttribute,numAttributes + 1));
    Attribs.get()[numAttributes].AttribName = AttrName;
    Attribs.get()[numAttributes].AttribValue = AttrValue;
    Attribs.get()[numAttributes].AttribType = AttrType;
    Attribs.get()[numAttributes].AttribReadOnly = ro;
    Attribs.get()[numAttributes].AttribHint = AttrHint;
    Attribs.get()[numAttributes].AttribIncludeInSave = incl;
  };
  this.AddAttrib = function (AttrParams, attrName, attrType, attrValue, attrReadOnly) {
    var i = 0;
    i = rtl.length(AttrParams.get());
    AttrParams.set(rtl.arraySetLength(AttrParams.get(),$mod.TNodeAttribute,i + 1));
    AttrParams.get()[i] = new $mod.TNodeAttribute($impl.MakeAttrib(attrName,attrType,attrValue,attrReadOnly));
  };
  this.AddChildToParentNode = function (ParentNode, ChildNode, position) {
    var numchildren = 0;
    var i = 0;
    var pn = null;
    if (ChildNode.get().NodeName !== "") {
      pn = $mod.FindParentOfNode$1($mod.SystemNodeTree,ChildNode.get());
      if (pn !== null) {
        pn.RemoveChildNode(ChildNode.get());
      };
    };
    numchildren = rtl.length(ParentNode.get().ChildNodes);
    ParentNode.get().ChildNodes = rtl.arraySetLength(ParentNode.get().ChildNodes,null,numchildren + 1);
    if (position === -1) {
      ParentNode.get().ChildNodes[numchildren] = ChildNode.get();
    } else {
      for (var $l1 = numchildren, $end2 = position + 1; $l1 >= $end2; $l1--) {
        i = $l1;
        ParentNode.get().ChildNodes[i] = ParentNode.get().ChildNodes[i - 1];
      };
      ParentNode.get().ChildNodes[position] = ChildNode.get();
    };
    ChildNode.get().SetAttributeValue$2("ParentName",ParentNode.get().NodeName);
  };
  this.StringToCodeInputs = function (InputString) {
    var Result = [];
    var myInputs = [];
    var Inputs = null;
    var InputBits = null;
    var InputStr = "";
    var j = 0;
    var k = 0;
    myInputs = rtl.arraySetLength(myInputs,$mod.TCodeInputRec,0);
    if (InputString !== "") {
      Inputs = pas.StringUtils.stringsplit(InputString,$mod.AttribLinkDelimiter);
      myInputs = rtl.arraySetLength(myInputs,$mod.TCodeInputRec,0);
      k = 0;
      for (var $l1 = 0, $end2 = Inputs.GetCount() - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        InputStr = Inputs.Get(j);
        InputBits = pas.StringUtils.stringsplit(InputStr,".");
        if (pas.SysUtils.Trim(InputBits.Get(0)) !== "") {
          myInputs = rtl.arraySetLength(myInputs,$mod.TCodeInputRec,k + 1);
          myInputs[k].InputSynonym = InputBits.Get(0);
          myInputs[k].InputNodeName = InputBits.Get(1);
          if (InputBits.GetCount() > 2) myInputs[k].InputAttribName = InputBits.Get(2);
          k = k + 1;
        };
      };
    };
    Result = myInputs;
    return Result;
  };
  this.CodeInputsToString = function (myInputs) {
    var Result = "";
    var j = 0;
    var InputsString = "";
    InputsString = "";
    for (var $l1 = 0, $end2 = rtl.length(myInputs) - 1; $l1 <= $end2; $l1++) {
      j = $l1;
      InputsString = (((((InputsString + myInputs[j].InputSynonym) + ".") + myInputs[j].InputNodeName) + ".") + myInputs[j].InputAttribName) + $mod.AttribLinkDelimiter;
    };
    Result = InputsString;
    return Result;
  };
  this.NodeTreeToXML = function (CurrentItem, ParentNode, DynamicOnly, QuotedString) {
    var Result = "";
    var XMLString = "";
    var ParentName = "";
    var i = 0;
    var numchildren = 0;
    var numAttributes = 0;
    var CurrentChildNodes = [];
    var myAttribs = [];
    var AQuote1 = "";
    var AQuote2 = "";
    var DfltAttrib = new $mod.TDefaultAttribute();
    XMLString = "";
    if (QuotedString) {
      AQuote1 = "'";
      AQuote2 = "' +";
    } else {
      AQuote1 = "";
      AQuote2 = "";
    };
    if (ParentNode !== null) ParentName = ParentNode.NodeName;
    if ((((((((CurrentItem.NodeClass === "Root") || (CurrentItem.NodeClass === "UI")) || (CurrentItem.NodeClass === "NV")) || (CurrentItem.NodeClass === "SVG")) || (CurrentItem.NodeClass === "Code")) && (CurrentItem.NodeName !== "XGPUCodeEditorForm")) && (CurrentItem.NodeName !== "PasteDialog")) && (CurrentItem.NodeName !== "CompilerLogForm")) {
      if ((CurrentItem.IsDynamic === true) || (DynamicOnly === false)) {
        XMLString = ((((AQuote2 + pas.System.LineEnding) + AQuote1) + $mod.StartXMLString) + CurrentItem.NodeType) + $mod.attributeListdelimiter;
        XMLString = (((XMLString + " Class ") + $mod.NameValuePairdelimiter) + CurrentItem.NodeClass) + $mod.attributeListdelimiter;
        XMLString = (((XMLString + " Name ") + $mod.NameValuePairdelimiter) + CurrentItem.NodeName) + $mod.attributeListdelimiter;
        myAttribs = CurrentItem.NodeAttributes;
        numAttributes = rtl.length(myAttribs);
        for (var $l1 = 0, $end2 = numAttributes - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          DfltAttrib = new $mod.TDefaultAttribute($mod.GetDefaultAttrib(CurrentItem.NodeType,CurrentItem.NodeAttributes[i].AttribName));
          if (DfltAttrib.AttribName === "") DfltAttrib.AttribIncludeInSave = true;
          if ((((pas.WrapperPanel.FindSuppressedProperty(CurrentItem.NodeType,CurrentItem.NodeAttributes[i].AttribName) < 0) && (DfltAttrib.AttribIncludeInSave === true)) && (CurrentItem.NodeAttributes[i].AttribName !== "ParentName")) && ((CurrentItem.NodeAttributes[i].AttribName !== "XMLString") || ((CurrentItem.NodeAttributes[i].AttribName === "XMLString") && (CurrentItem.IsDynamic === false)))) {
            XMLString = ((((((((((((XMLString + CurrentItem.NodeAttributes[i].AttribName) + $mod.AttribBitsDelimiter) + " ") + CurrentItem.NodeAttributes[i].AttribType) + $mod.AttribBitsDelimiter) + $mod.SubstituteSpecials(CurrentItem.NodeAttributes[i].AttribValue)) + $mod.AttribBitsDelimiter) + pas.StringUtils.MyBoolToStr(CurrentItem.NodeAttributes[i].AttribReadOnly)) + $mod.AttribBitsDelimiter) + CurrentItem.NodeAttributes[i].AttribSource.InputNodeName) + ".") + CurrentItem.NodeAttributes[i].AttribSource.InputAttribName) + $mod.attributeListdelimiter;
          };
        };
        XMLString = (((((((((XMLString + "ParentName") + $mod.AttribBitsDelimiter) + " String") + $mod.AttribBitsDelimiter) + $mod.SubstituteSpecials(ParentName)) + $mod.AttribBitsDelimiter) + "True") + $mod.AttribBitsDelimiter) + ".") + $mod.attributeListdelimiter;
        if (CurrentItem.IsDynamic || (CurrentItem === $mod.UIRootNode)) {
          XMLString = XMLString + $mod.delimiterBetweenAttribsAndEvents;
          if (CurrentItem.myEventTypes.GetCount() > 0) if (CurrentItem.myEventTypes.GetCount() !== rtl.length(CurrentItem.myEventHandlers)) CurrentItem.myEventHandlers = rtl.arraySetLength(CurrentItem.myEventHandlers,$mod.TEventHandlerRec,CurrentItem.myEventTypes.GetCount());
          for (var $l3 = 0, $end4 = CurrentItem.myEventTypes.GetCount() - 1; $l3 <= $end4; $l3++) {
            i = $l3;
            XMLString = (((((XMLString + CurrentItem.myEventTypes.Get(i)) + $mod.AttribBitsDelimiter) + $mod.SubstituteSpecials(pas.SysUtils.Trim(CurrentItem.myEventHandlers[i].TheCode))) + $mod.AttribBitsDelimiter) + $mod.SubstituteSpecials(pas.SysUtils.Trim(CurrentItem.myEventHandlers[i].InitCode))) + $mod.attributeListdelimiter;
          };
        };
        XMLString = XMLString + $mod.EndXMLString;
      };
      CurrentChildNodes = CurrentItem.ChildNodes;
      numchildren = rtl.length(CurrentChildNodes);
      for (var $l5 = 0, $end6 = numchildren - 1; $l5 <= $end6; $l5++) {
        i = $l5;
        XMLString = XMLString + $mod.NodeTreeToXML(CurrentItem.ChildNodes[i],CurrentItem,DynamicOnly,QuotedString);
      };
      XMLString = (((XMLString + $mod.StartXMLString) + $mod.ToggleFlagMarker) + CurrentItem.NodeType) + $mod.EndXMLString;
    };
    Result = XMLString;
    return Result;
  };
  this.SaveSystem = function (ToClip) {
    var systemstring = "";
    var fullstring = "";
    systemstring = $mod.NodeTreeToXML($mod.SystemNodeTree,null,false,!ToClip);
    fullstring = systemstring;
    if (ToClip) ;
  };
  this.FindDataNodeById = function (InTree, ScreenObjectID, showerror) {
    var Result = null;
    var FoundItem = null;
    var TempItem = null;
    var FoundParent = null;
    var pos = 0;
    pos = -1;
    if (pas.SysUtils.Trim(ScreenObjectID) === "") pas.StringUtils.ShowMessage("oops no id");
    FoundItem = null;
    FoundParent = null;
    TempItem = $impl.ScanChildrenForNodeByName(InTree,ScreenObjectID,{get: function () {
        return FoundParent;
      }, set: function (v) {
        FoundParent = v;
      }},{get: function () {
        return pos;
      }, set: function (v) {
        pos = v;
      }});
    if (TempItem !== null) {
      FoundItem = TempItem;
    } else {
      if (showerror) pas.StringUtils.ShowMessage(("Error in NodeUtils.FindDataNodeById >" + ScreenObjectID) + "< not found");
    };
    Result = FoundItem;
    return Result;
  };
  this.FindParentOfNode = function (InTree, targetNode, showerror, position) {
    var Result = null;
    var FoundItem = null;
    var TempItem = null;
    var FoundParent = null;
    FoundItem = null;
    TempItem = null;
    FoundParent = null;
    position.set(-1);
    TempItem = $impl.ScanChildrenForNode(InTree,targetNode,{get: function () {
        return FoundParent;
      }, set: function (v) {
        FoundParent = v;
      }},position);
    if ((TempItem !== null) && (FoundParent !== null)) {
      FoundItem = FoundParent;
    } else if (showerror) pas.StringUtils.ShowMessage((((("Error in Nodeutils.FindParentOfNode >" + targetNode.NodeType) + "(") + targetNode.NodeName) + ")") + " < not found");
    Result = FoundItem;
    return Result;
  };
  this.FindParentOfNode$1 = function (InTree, targetNode) {
    var Result = null;
    var pos = 0;
    Result = $mod.FindParentOfNode(InTree,targetNode,false,{get: function () {
        return pos;
      }, set: function (v) {
        pos = v;
      }});
    return Result;
  };
  this.FindParentOfNodeByName = function (InTree, ScreenObjectID, showerror, position) {
    var Result = null;
    var FoundItem = null;
    var TempItem = null;
    var FoundParent = null;
    FoundItem = null;
    TempItem = null;
    FoundParent = null;
    position.set(-1);
    TempItem = $impl.ScanChildrenForNodeByName(InTree,ScreenObjectID,{get: function () {
        return FoundParent;
      }, set: function (v) {
        FoundParent = v;
      }},position);
    if ((TempItem !== null) && (FoundParent !== null)) {
      FoundItem = FoundParent;
    } else if (showerror) pas.StringUtils.ShowMessage(("Error in Nodeutils.FindParentOfNode >" + ScreenObjectID) + "< not found");
    Result = FoundItem;
    return Result;
  };
  this.FindParentOfNodeByName$1 = function (InTree, ScreenObjectID, showError) {
    var Result = null;
    var pos = 0;
    Result = $mod.FindParentOfNodeByName(InTree,ScreenObjectID,false,{get: function () {
        return pos;
      }, set: function (v) {
        pos = v;
      }});
    return Result;
  };
  this.FindParentOfNodeByName$2 = function (InTree, ScreenObjectID) {
    var Result = null;
    var pos = 0;
    Result = $mod.FindParentOfNodeByName(InTree,ScreenObjectID,false,{get: function () {
        return pos;
      }, set: function (v) {
        pos = v;
      }});
    return Result;
  };
  this.ReParentNode = function (MyNode, NewParent) {
    var OldParent = null;
    var pos = 0;
    OldParent = $mod.FindParentOfNodeByName($mod.SystemNodeTree,MyNode.NodeName,false,{get: function () {
        return pos;
      }, set: function (v) {
        pos = v;
      }});
    if (OldParent !== null) {
      OldParent.RemoveChildNode(MyNode);
    };
    $mod.AddChildToParentNode({get: function () {
        return NewParent;
      }, set: function (v) {
        NewParent = v;
      }},{get: function () {
        return MyNode;
      }, set: function (v) {
        MyNode = v;
      }},-1);
  };
  this.DeleteNode = function (ParentNode, MyNode) {
    var handlers = [];
    var supp = false;
    supp = $mod.SuppressEvents;
    $mod.SuppressEvents = true;
    handlers = rtl.arraySetLength(handlers,$mod.TEventHandlerRec,0);
    MyNode.myEventHandlers = handlers;
    $mod.DeleteNodeChildren(MyNode);
    $impl.DeleteScreenObject(MyNode);
    if (ParentNode === null) ParentNode = $mod.FindParentOfNode$1($mod.SystemNodeTree,MyNode);
    if (ParentNode !== null) {
      ParentNode.RemoveChildNode(MyNode);
    };
    MyNode.DeleteMe();
    $mod.SuppressEvents = supp;
  };
  this.CopyNode = function (SourceNode) {
    var Result = null;
    var NewNode = null;
    var myAttribs = [];
    var i = 0;
    myAttribs = rtl.arraySetLength(myAttribs,$mod.TNodeAttribute,rtl.length(SourceNode.NodeAttributes));
    for (var $l1 = 0, $end2 = rtl.length(SourceNode.NodeAttributes) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      myAttribs[i] = new $mod.TNodeAttribute(SourceNode.NodeAttributes[i]);
    };
    NewNode = $mod.TDataNode.$create("Create$1",[SourceNode.NodeClass,SourceNode.NodeName,SourceNode.NodeType,false]);
    NewNode.IsDynamic = true;
    NewNode.NodeAttributes = myAttribs;
    NewNode.myEventTypes = pas.Classes.TStringList.$create("Create$1");
    NewNode.myEventHandlers = rtl.arraySetLength(NewNode.myEventHandlers,$mod.TEventHandlerRec,SourceNode.myEventTypes.GetCount());
    for (var $l3 = 0, $end4 = SourceNode.myEventTypes.GetCount() - 1; $l3 <= $end4; $l3++) {
      i = $l3;
      NewNode.myEventTypes.Add(SourceNode.myEventTypes.Get(i));
      NewNode.myEventHandlers[i].TheHandler = null;
    };
    $impl.CopyEventHandlers(NewNode,SourceNode.myEventHandlers);
    NewNode.ChildNodes = rtl.arraySetLength(NewNode.ChildNodes,null,rtl.length(SourceNode.ChildNodes));
    for (var $l5 = 0, $end6 = rtl.length(SourceNode.ChildNodes) - 1; $l5 <= $end6; $l5++) {
      i = $l5;
      NewNode.ChildNodes[i] = $mod.CopyNode(SourceNode.ChildNodes[i]);
    };
    Result = NewNode;
    return Result;
  };
  this.AddChildToDataNode = function (ParentNode, MyClass, MyName, MyType, MyAttributes, position) {
    var Result = null;
    var numchildren = 0;
    var tempDataNodeArray = [];
    var newNode = null;
    var i = 0;
    if ($mod.NodeNameIsUnique(null,MyName,true)) {
      tempDataNodeArray = ParentNode.ChildNodes;
      numchildren = rtl.length(tempDataNodeArray);
      ParentNode.ChildNodes = rtl.arraySetLength(ParentNode.ChildNodes,null,numchildren + 1);
      newNode = $mod.TDataNode.$create("Create$1",[MyClass,MyName,MyType,false]);
      newNode.NodeAttributes = MyAttributes;
      if (position === -1) {
        ParentNode.ChildNodes[numchildren] = newNode;
        Result = ParentNode.ChildNodes[numchildren];
      } else {
        for (var $l1 = numchildren, $end2 = position + 1; $l1 >= $end2; $l1--) {
          i = $l1;
          ParentNode.ChildNodes[i] = ParentNode.ChildNodes[i - 1];
        };
        ParentNode.ChildNodes[position] = newNode;
        Result = ParentNode.ChildNodes[position];
      };
    } else Result = null;
    return Result;
  };
  this.LookupComponentFunc = function (NodeType) {
    var Result = null;
    var i = 0;
    i = 0;
    Result = null;
    while (i < rtl.length($mod.NodeFuncsLookup)) {
      if ($mod.NodeFuncsLookup[i].NodeType === NodeType) {
        Result = $mod.NodeFuncsLookup[i].ScreenObjFunctionPtr;
        i = rtl.length($mod.NodeFuncsLookup);
      };
      i = i + 1;
    };
    return Result;
  };
  this.NodeIsDescendantOf = function (ThisNode, AncestorName) {
    var Result = 0;
    var myresult = 0;
    var parentNode = null;
    var CurrentNode = null;
    var done = false;
    myresult = -1;
    if (ThisNode.NodeName === AncestorName) {
      myresult = 0}
     else {
      done = false;
      CurrentNode = ThisNode;
      while (done === false) {
        if (CurrentNode.NodeName === $mod.SystemRootName) {
          done = true;
          myresult = -1;
        } else {
          parentNode = $mod.FindParentOfNode$1($mod.SystemNodeTree,CurrentNode);
          if (parentNode !== null) {
            myresult = myresult + 1;
            if (parentNode.NodeName === AncestorName) {
              done = true;
            } else CurrentNode = parentNode;
          } else {
            done = true;
            myresult = -1;
          };
        };
      };
    };
    Result = myresult;
    return Result;
  };
  this.NodeIsInXForm = function (ThisNode) {
    var Result = false;
    var myresult = false;
    var parentNode = null;
    var CurrentNode = null;
    var done = false;
    myresult = false;
    if (((ThisNode.NodeType === "TXForm") && (ThisNode.IsDynamic === true)) && (ThisNode.ScreenObject !== $mod.MainForm)) {
      myresult = true}
     else {
      done = false;
      CurrentNode = ThisNode;
      while (done === false) {
        if (CurrentNode.NodeName === $mod.SystemRootName) {
          done = true;
          myresult = false;
        } else {
          parentNode = $mod.FindParentOfNode$1($mod.SystemNodeTree,CurrentNode);
          if (parentNode !== null) {
            if (((parentNode.NodeType === "TXForm") && (parentNode.IsDynamic === true)) && (parentNode.ScreenObject !== $mod.MainForm)) {
              done = true;
              myresult = true;
            } else CurrentNode = parentNode;
          } else {
            done = true;
            myresult = false;
          };
        };
      };
    };
    Result = myresult;
    return Result;
  };
  this.DeleteNodeChildren = function (ParentNode) {
    var i = 0;
    var handlers = [];
    if (ParentNode === null) {
      pas.StringUtils.ShowMessage("parentnode nil in DeleteNodeChildren")}
     else {
      for (var $l1 = 0, $end2 = rtl.length(ParentNode.ChildNodes) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        handlers = rtl.arraySetLength(handlers,$mod.TEventHandlerRec,0);
        ParentNode.ChildNodes[i].myEventHandlers = handlers;
        $mod.DeleteNodeChildren(ParentNode.ChildNodes[i]);
        $impl.DeleteScreenObject(ParentNode.ChildNodes[i]);
        ParentNode.ChildNodes[i].DeleteMe();
      };
      ParentNode.ChildNodes = rtl.arraySetLength(ParentNode.ChildNodes,null,0);
    };
  };
  this.InsertSystemNode = function (ParentNode, SourceNode, Position) {
    var Result = null;
    var myparent = null;
    var myself = null;
    var i = 0;
    myparent = ParentNode;
    if ((myparent !== null) && (myparent.NodeName !== "")) {
      if (((SourceNode.NodeClass === "UI") || (SourceNode.NodeClass === "NV")) || (SourceNode.NodeClass === "SVG")) {
        myself = pas.WrapperPanel.AddDynamicWidget(SourceNode.NodeType,ParentNode.MyForm,ParentNode,SourceNode.NodeName,"Left",Position);
        $impl.CopyEventHandlers(myself,SourceNode.myEventHandlers);
        for (var $l1 = 0, $end2 = rtl.length(SourceNode.NodeAttributes) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (SourceNode.NodeAttributes[i].AttribReadOnly === false) {
            $mod.EditAttributeValue(SourceNode.NodeName,new $mod.TNodeAttribute(SourceNode.NodeAttributes[i]),true);
          };
        };
        for (var $l3 = 0, $end4 = rtl.length(SourceNode.ChildNodes) - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          $mod.InsertSystemNode(myself,SourceNode.ChildNodes[i],-1);
        };
      } else if (SourceNode.NodeClass === "Code") {
        myself = SourceNode;
        myself.IsDynamic = true;
        $mod.AddChildToParentNode({get: function () {
            return myparent;
          }, set: function (v) {
            myparent = v;
          }},{get: function () {
            return myself;
          }, set: function (v) {
            myself = v;
          }},Position);
      };
    };
    Result = myself;
    return Result;
  };
  this.ClearAttribs = function (AttrParams) {
    AttrParams.set(rtl.arraySetLength(AttrParams.get(),$mod.TNodeAttribute,0));
  };
  this.NodeNameIsUnique = function (myNode, NodeName, showerror) {
    var Result = false;
    var myresult = false;
    var founditem = null;
    myresult = true;
    founditem = $mod.FindDataNodeById($mod.SystemNodeTree,NodeName,false);
    if (((founditem !== null) && (founditem !== myNode)) && (founditem.NodeName === NodeName)) {
      if (showerror) pas.StringUtils.ShowMessage(("Error. Name >" + NodeName) + "< is not unique when creating a new object");
      myresult = false;
    };
    Result = myresult;
    return Result;
  };
  this.SetUniqueName = function (myNode, Formname, NewName) {
    var Result = "";
    var ApplyName = "";
    var i = 0;
    ApplyName = NewName;
    i = 1;
    while ($mod.NodeNameIsUnique(myNode,ApplyName,false) === false) {
      ApplyName = (Formname + NewName) + pas.SysUtils.IntToStr(i);
      i = i + 1;
    };
    Result = ApplyName;
    return Result;
  };
  this.InitSystemNodetree = function () {
    $mod.SystemNodeTree = $mod.TDataNode.$create("Create$1",["Root","ApplicationRoot","Root",false]);
    $mod.UIRootNode = $mod.TDataNode.$create("Create$1",["Root",$mod.SystemRootName,"Root",false]);
    $mod.AddChildToParentNode({p: $mod, get: function () {
        return this.p.SystemNodeTree;
      }, set: function (v) {
        this.p.SystemNodeTree = v;
      }},{p: $mod, get: function () {
        return this.p.UIRootNode;
      }, set: function (v) {
        this.p.UIRootNode = v;
      }},-1);
    $mod.CodeRootNode = $mod.TDataNode.$create("Create$1",["Code",$mod.CodeRootName,"Root",false]);
    $mod.AddChildToParentNode({p: $mod, get: function () {
        return this.p.SystemNodeTree;
      }, set: function (v) {
        this.p.SystemNodeTree = v;
      }},{p: $mod, get: function () {
        return this.p.CodeRootNode;
      }, set: function (v) {
        this.p.CodeRootNode = v;
      }},-1);
  };
  this.ClearAllDynamicNodes = function (StartNode) {
    var i = 0;
    if (StartNode === $mod.UIRootNode) {
      for (var $l1 = 0, $end2 = rtl.length(StartNode.myEventHandlers) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        StartNode.myEventHandlers[i].InitCode = "";
        StartNode.myEventHandlers[i].TheCode = "";
        StartNode.myEventHandlers[i].TheHandler = null;
      };
    };
    for (var $l3 = rtl.length(StartNode.ChildNodes) - 1; $l3 >= 0; $l3--) {
      i = $l3;
      $mod.ClearAllDynamicNodes(StartNode.ChildNodes[i]);
      if (StartNode.ChildNodes[i].IsDynamic) $mod.DeleteNode(StartNode,StartNode.ChildNodes[i]);
    };
  };
  this.NilScreenObject = function (MyNode) {
    var i = 0;
    if (MyNode.ScreenObject !== null) {
      MyNode.ScreenObject = null;
    };
    for (var $l1 = 0, $end2 = rtl.length(MyNode.ChildNodes) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      $mod.NilScreenObject(MyNode.ChildNodes[i]);
    };
  };
  this.AlignmentResetInvalidCombinations = function (OldAlignment, myName, myClass, ParentAlignChildrenVertical, IsContainer, HasSibs) {
    var Result = "";
    var MyAlignment = "";
    var ShowMessages = false;
    ShowMessages = true;
    MyAlignment = OldAlignment;
    if (MyAlignment === "") {
      ShowMessages = false;
      if (ParentAlignChildrenVertical === true) {
        MyAlignment = "Left"}
       else MyAlignment = "Top";
    };
    if ((MyAlignment === "Right") || (MyAlignment === "Left")) {
      if (ParentAlignChildrenVertical === false) {
        MyAlignment = "Top";
      };
    } else if ((MyAlignment === "Top") || (MyAlignment === "Bottom")) {
      if (ParentAlignChildrenVertical === true) {
        MyAlignment = "Left";
      };
    };
    if (((MyAlignment === "Right") || (MyAlignment === "Centre")) && IsContainer) if (HasSibs) {
      MyAlignment = "Left";
      if (ShowMessages && !$mod.StartingUp) pas.StringUtils.ShowMessage(((("Place this " + myClass) + "(") + myName) + ") inside its own parent VBox to set Alignment Right or Centre");
    };
    if (((MyAlignment === "Bottom") || (MyAlignment === "Centre")) && IsContainer) if (HasSibs) {
      MyAlignment = "Top";
      if (ShowMessages && !$mod.StartingUp) pas.StringUtils.ShowMessage(((("Place this " + myClass) + "(") + myName) + ") inside its own parent HBox to set Alignment Bottom or Centre");
    };
    Result = MyAlignment;
    return Result;
  };
  this.SortAttribs = function (Attribs) {
    var i = 0;
    var n = 0;
    var Swapped = false;
    n = rtl.length(Attribs.get());
    do {
      Swapped = false;
      for (var $l1 = 1, $end2 = n - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if ($impl.CompareAttribName(Attribs.get()[i - 1],Attribs.get()[i]) > 0) {
          $impl.SwapAttrib({a: i - 1, p: Attribs.get(), get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},{a: i, p: Attribs.get(), get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }});
          Swapped = true;
        };
      };
      n -= 1;
    } while (Swapped);
  };
  this.AddAttribOptions = function (ComponentType, AttribName, Options) {
    var AttribOptionsRec = new $mod.TAttribOptionsRec();
    var i = 0;
    AttribOptionsRec.ComponentType = ComponentType;
    AttribOptionsRec.AttribName = AttribName;
    AttribOptionsRec.Options = pas.Classes.TStringList.$create("Create$1");
    for (var $l1 = 0, $end2 = rtl.length(Options) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      AttribOptionsRec.Options.Add(Options[i]);
    };
    $mod.AttribOptionsArray = rtl.arraySetLength($mod.AttribOptionsArray,$mod.TAttribOptionsRec,rtl.length($mod.AttribOptionsArray) + 1);
    $mod.AttribOptionsArray[rtl.length($mod.AttribOptionsArray) - 1] = new $mod.TAttribOptionsRec(AttribOptionsRec);
  };
  this.LookupAttribOptions = function (ComponentType, AttribName) {
    var Result = null;
    var i = 0;
    i = 0;
    Result = null;
    while (i < rtl.length($mod.AttribOptionsArray)) {
      if (($mod.AttribOptionsArray[i].ComponentType === ComponentType) && ($mod.AttribOptionsArray[i].AttribName === AttribName)) {
        Result = $mod.AttribOptionsArray[i].Options;
        i = rtl.length($mod.AttribOptionsArray);
      };
      i = i + 1;
    };
    return Result;
  };
  this.XMLToNodeTree = function (XMLString) {
    var Result = "";
    var i = 0;
    var TempChar = "";
    var NextChar = "";
    var NewString = "";
    var RootNodeName = "";
    var BracesToggleFlag = false;
    if ($impl.checkData(XMLString) === true) {
      $mod.StartingUp = true;
      RootNodeName = $mod.SystemRootName;
      var ob=document.getElementById(RootNodeName);
      $mod.SystemNodeTree.ScreenObject=ob;
      NewString = "";
      for (var $l1 = 1, $end2 = XMLString.length; $l1 <= $end2; $l1++) {
        i = $l1;
        TempChar = XMLString.charAt(i - 1);
        if (TempChar === "<") {
          TempChar = "";
          BracesToggleFlag = true;
          NextChar = XMLString.charAt((i + 1) - 1);
          if (NextChar === "\/") BracesToggleFlag = false;
        };
        if (TempChar === ">") {
          if (BracesToggleFlag === true) {
            $impl.addComponentFromXML(NewString);
          };
          BracesToggleFlag = false;
          NewString = "";
        };
        if (BracesToggleFlag === true) {
          NewString = NewString + TempChar;
        };
      };
      $mod.StartingUp = false;
    } else pas.StringUtils.ShowMessage("Error .....Unable to load data");
    return Result;
  };
  this.SetXObjectProperty = function (myObj, targetNode, PropName, AttrType, newValue) {
    var pType = 0;
    if ((myObj !== null) && pas.TypInfo.IsPublishedProp(myObj,PropName)) {
      pType = pas.TypInfo.PropType(myObj,PropName);
      if (pType === pas.TypInfo.TTypeKind.tkString) {
        pas.TypInfo.SetStringProp(myObj,PropName,newValue);
      } else if (pType === pas.TypInfo.TTypeKind.tkInteger) {
        pas.TypInfo.SetNativeIntProp(myObj,PropName,pas.SysUtils.StrToInt(newValue));
      } else if (pType === pas.TypInfo.TTypeKind.tkBool) {
        pas.TypInfo.SetBoolProp(myObj,PropName,pas.StringUtils.MyStrToBool(newValue))}
       else if (pType === pas.TypInfo.TTypeKind.tkDynArray) {
        targetNode.SetAttributeValue$2(PropName,newValue);
      } else pas.StringUtils.ShowMessage((("EditAttributeValue. ** Need to handle property type for " + targetNode.NodeName) + ".") + PropName);
    };
  };
  this.EditAttributeValue = function (NodeNameToEdit, SourceAttrib, AddIfMissing) {
    var targetNode = null;
    var targetAttrib = new $mod.TNodeAttribute();
    var myObj = null;
    var AttrNameToEdit = "";
    var newValue = "";
    var IsReadOnly = false;
    targetNode = $mod.FindDataNodeById($mod.SystemNodeTree,NodeNameToEdit,true);
    if (targetNode !== null) {
      AttrNameToEdit = SourceAttrib.AttribName;
      newValue = SourceAttrib.AttribValue;
      IsReadOnly = SourceAttrib.AttribReadOnly;
      targetAttrib = new $mod.TNodeAttribute(targetNode.GetAttributeAnyCase(AttrNameToEdit,AddIfMissing));
      if (targetAttrib.AttribName !== "") {
        AttrNameToEdit = targetAttrib.AttribName;
        targetAttrib.AttribReadOnly = IsReadOnly;
        if ((SourceAttrib.AttribType !== "String") && (targetAttrib.AttribType === "String")) targetAttrib.AttribType = SourceAttrib.AttribType;
        myObj = targetNode;
        if (((myObj !== null) && (IsReadOnly === false)) && pas.TypInfo.IsPublishedProp(myObj,AttrNameToEdit)) {
          $mod.SetXObjectProperty(myObj,targetNode,AttrNameToEdit,targetAttrib.AttribType,newValue);
        } else {
          targetNode.SetAttributeValue$2(AttrNameToEdit,newValue);
        };
      };
    };
  };
  this.EditAttributeValue$1 = function (NodeNameToEdit, AttrNameToEdit, newValue, AddIfMissing) {
    var SourceAttrib = new $mod.TNodeAttribute();
    SourceAttrib.AttribName = AttrNameToEdit;
    SourceAttrib.AttribValue = newValue;
    SourceAttrib.AttribType = "String";
    SourceAttrib.AttribReadOnly = false;
    $mod.EditAttributeValue(NodeNameToEdit,new $mod.TNodeAttribute(SourceAttrib),AddIfMissing);
  };
  this.EditAttributeValue$2 = function (NodeNameToEdit, AttrNameToEdit, newValue) {
    var SourceAttrib = new $mod.TNodeAttribute();
    SourceAttrib.AttribName = AttrNameToEdit;
    SourceAttrib.AttribValue = newValue;
    SourceAttrib.AttribType = "String";
    SourceAttrib.AttribReadOnly = false;
    $mod.EditAttributeValue(NodeNameToEdit,new $mod.TNodeAttribute(SourceAttrib),false);
  };
  this.EditAttributeValue2 = function (NodeNameToEdit, AttrNameToEdit, newValue) {
    $mod.EditAttributeValue$2(NodeNameToEdit,AttrNameToEdit,newValue);
  };
  this.EditAttributeValueIndexed = function (NodeNameToEdit, AttrNameToEdit, newValue, x, y) {
    var targetNode = null;
    var targetAttrib = new $mod.TNodeAttribute();
    var myObj = null;
    targetNode = $mod.FindDataNodeById($mod.SystemNodeTree,NodeNameToEdit,true);
    if (targetNode !== null) {
      targetAttrib = new $mod.TNodeAttribute(targetNode.GetAttributeAnyCase$1(AttrNameToEdit));
      if (targetAttrib.AttribName !== "") {
        AttrNameToEdit = targetAttrib.AttribName;
        if (targetNode.ScreenObject === null) {
          myObj = targetNode}
         else myObj = targetNode.ScreenObject;
        if (myObj !== null) {
          if (pas.XBitMap.TXBitMap.isPrototypeOf(myObj)) if (AttrNameToEdit === "MapPixelArray") myObj.SetMapPixelArraySection(newValue,x,y);
        };
      };
    };
  };
  this.myCopyToClip = function (stringname, instring) {
    try {
    
       // Register a copy handler which will directly add the text to the DataTransfer object.
         function copyHandler(event) {
           if (event.clipboardData) {
             event.clipboardData.setData("text/plain", instring);
           }
           else {
             // Internet Explorer is special, and needs to be given both a different
             // MIME type, and have the method called on a different object.
             clipboardData.setData("Text", instring);
           }
           event.preventDefault();
         }
       document.addEventListener("copy", copyHandler);
    
       // Create a dummy text area and select it, as Safari, Chrome and Edge require the
       // text area to be selected to trigger an execCommand("copy") event.
       var textField=document.getElementById('NodeUtilsCopyArea');
       if (textField==null) {
         textField = document.createElement('textarea');
         textField.id = 'NodeUtilsCopyArea';
         document.body.appendChild(textField);
         }
       textField.value = 'a';             //something very short (quick)
       textField.focus();
       textField.select();
    
       // Trigger the copy command,
       var successful = document.execCommand("copy");
    
       // and then remove the event listener
       document.removeEventListener("copy", copyHandler);
       textField.remove();
    
       var msg = successful ? 'successful' : 'unsuccessful';
       alert('Saving the '+stringname+' to the Clipboard was ' + msg);
    
    
        } catch(err) { alert(err.message+'  in NodeUtils.myCopyToClip'); };
  };
  this.FindNodesOfType = function (StartNode, NodeType) {
    var Result = [];
    var newNodes = [];
    var descendants = [];
    var i = 0;
    var j = 0;
    var l = 0;
    newNodes = rtl.arraySetLength(newNodes,null,0);
    for (var $l1 = 0, $end2 = rtl.length(StartNode.ChildNodes) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (StartNode.ChildNodes[i].NodeType === NodeType) {
        newNodes = rtl.arraySetLength(newNodes,null,rtl.length(newNodes) + 1);
        newNodes[rtl.length(newNodes) - 1] = StartNode.ChildNodes[i];
      };
      descendants = $mod.FindNodesOfType(StartNode.ChildNodes[i],NodeType);
      l = rtl.length(newNodes);
      newNodes = rtl.arraySetLength(newNodes,null,l + rtl.length(descendants));
      for (var $l3 = 0, $end4 = rtl.length(descendants) - 1; $l3 <= $end4; $l3++) {
        j = $l3;
        newNodes[l + j] = descendants[j];
      };
    };
    Result = newNodes;
    return Result;
  };
  this.SetNodePropDefaults = function (myNode, defaultAttribs) {
    var i = 0;
    for (var $l1 = 0, $end2 = rtl.length(defaultAttribs) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (myNode.HasAttribute(defaultAttribs[i].AttribName) === false) myNode.AddAttribute(defaultAttribs[i].AttribName,defaultAttribs[i].AttribType,defaultAttribs[i].AttribValue,defaultAttribs[i].AttribReadOnly);
    };
  };
  this.RefreshComponentProps = function (myComponent) {
    var i = 0;
    for (var $l1 = 0, $end2 = rtl.length(myComponent.NodeAttributes) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (myComponent.NodeAttributes[i].AttribReadOnly === false) {
        $mod.SetXObjectProperty(myComponent,myComponent,myComponent.NodeAttributes[i].AttribName,myComponent.NodeAttributes[i].AttribType,myComponent.NodeAttributes[i].AttribValue);
      };
    };
  };
  this.UnSuspendFrames = function (StartNode) {
    var i = 0;
    if (StartNode.IsDynamic) if (StartNode.HasAttribute("SuspendRefresh")) $mod.EditAttributeValue$2(StartNode.NodeName,"SuspendRefresh","False");
    for (var $l1 = 0, $end2 = rtl.length(StartNode.ChildNodes) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      $mod.UnSuspendFrames(StartNode.ChildNodes[i]);
    };
  };
  this.InitFormObject = function (myForm, NodeName) {
    var myNode = null;
    myForm.fName = NodeName;
    myNode = $mod.AddFormToNodeTree(myForm);
  };
  this.AddNodeFuncLookup = function (NodeType, InObFuncPtr, ScreenObjFunc) {
    var myRec = new $mod.TNodeFuncsLookup();
    var l = 0;
    if (NodeType === "") return;
    l = rtl.length($mod.NodeFuncsLookup);
    $mod.NodeFuncsLookup = rtl.arraySetLength($mod.NodeFuncsLookup,$mod.TNodeFuncsLookup,l + 1);
    myRec.NodeType = NodeType;
    myRec.InObFunctionPtr = InObFuncPtr;
    myRec.ScreenObjFunctionPtr = ScreenObjFunc;
    $mod.NodeFuncsLookup[l] = new $mod.TNodeFuncsLookup(myRec);
  };
  this.SetInterfaceProperty = function (myName, PropName, NewValue) {
    var myObj = null;
    var MyPropType = 0;
    var valueStr = "";
    var i = 0;
    valueStr = NewValue;
    myObj = $mod.FindDataNodeById($mod.SystemNodeTree,myName,false);
    if (myObj !== null) {
      MyPropType = pas.TypInfo.PropType(myObj,PropName);
      if (MyPropType === pas.TypInfo.TTypeKind.tkString) {
        pas.TypInfo.SetStringProp(myObj,PropName,NewValue);
      } else if (MyPropType === pas.TypInfo.TTypeKind.tkBool) {
        pas.TypInfo.SetBoolProp(myObj,PropName,pas.StringUtils.MyStrToBool(NewValue));
      } else if (MyPropType === pas.TypInfo.TTypeKind.tkInteger) {
        i = pas.SysUtils.StrToInt(valueStr);
        pas.TypInfo.SetNativeIntProp(myObj,PropName,i);
      } else pas.StringUtils.ShowMessage("SetInterfaceProperty.  Need to handle property type for " + PropName);
    } else pas.StringUtils.ShowMessage("SetInterfaceProperty cannot find node " + myName);
  };
  this.mygetClipboardData = function (stringname) {
    var Result = "";
    pas.PasteDialogUnit.PasteDoneBtn.SetIsVisible(false);
    pas.PasteDialogUnit.PasteLabel.SetLabelCaption("Waiting for a copy\/paste action");
    pas.PasteDialogUnit.PasteTarget.SetIsVisible(true);
    pas.XForm.OpenModal("PasteDialog");
    try {
             var pasteTarget = document.getElementById('PasteTargetContents');
             pasteTarget.spellcheck=false;
    
             pasteTarget.value= '';
             pasteTarget.style.height =  '19px';
             pasteTarget.style.width =  '100px';
            pasteTarget.focus();
             alert('After closing this message box, Confirm Paste from clipboard by hitting "Ctrl-V"  Any other action will abandon this paste operation');
    
         } catch(err) { alert(err.message+'  in NodeUtils.myGetClipboardData'); };
    Result = "Wait for Dialog To Close";
    return Result;
  };
  this.FinishHTMLPasteAction = function (myValue) {
    var Result = "";
    $impl.closeClipboardPasteDialog(myValue);
    return Result;
  };
  this.MainForm = null;
  this.SuppressEvents = false;
  this.AttribOptionsArray = [];
  this.ProjectDirectory = "";
  this.DefaultAttribsByType = [];
  this.TMethod = function (s) {
    if (s) {
      this.Code = s.Code;
      this.Data = s.Data;
    } else {
      this.Code = null;
      this.Data = null;
    };
    this.$equal = function (b) {
      return (this.Code === b.Code) && (this.Data === b.Data);
    };
  };
  $mod.$rtti.$Record("TMethod",{}).addFields("Code",rtl.pointer,"Data",rtl.pointer);
  this.CreateInterfaceObject = function (MyForm, NodeType, NodeName) {
    var Result = null;
    var myObj = null;
    var inobFn = null;
    var mynode = null;
    inobFn = $impl.LookupNodeInObFunc(NodeType);
    if (inobFn === null) {
      pas.StringUtils.ShowMessage("no interface object creation function for " + mynode.NodeName)}
     else {
      myObj = inobFn(MyForm,NodeName);
    };
    Result = myObj;
    return Result;
  };
  this.LoadedSystemString = "";
  this.SystemRootName = "UIRootNode";
  this.CodeRootName = "CodeUnits";
  this.PortraitMode = false;
  this.SystemNodeTree = null;
  this.UIRootNode = null;
  this.CodeRootNode = null;
  this.StartingUp = false;
  this.NodeFuncsLookup = [];
  this.EventAttributeDelimiter = "|@|";
  this.EventListdelimiter = "|^|";
  this.EventHistorydelimiter = "|~|";
  this.delimiterBetweenAttribsAndEvents = "|@@|";
  this.attributeListdelimiter = "|;";
  this.NameValuePairdelimiter = "|=";
  this.AttribBitsDelimiter = "|{";
  this.AttribLinkDelimiter = "|}";
  this.StartXMLString = "<";
  this.ToggleFlagMarker = "\/";
  this.EndXMLString = ">";
  this.AttributeTypes = '["String","Integer","Boolean","Color","TableString","TreeString"]';
  $mod.$init = function () {
    $mod.InitSystemNodetree();
    $mod.SuppressEvents = false;
  };
},["WrapperPanel","XForm","XBitMap","PasteDialogUnit"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.ScanChildrenForNode = function (CurrentItem, targetNode, FoundParent, position) {
    var Result = null;
    var FoundItem = null;
    var TempItem = null;
    var TempArrayOfChildren = [];
    var NumChildren = 0;
    var i = 0;
    FoundItem = null;
    FoundParent.set(null);
    if (CurrentItem === targetNode) {
      FoundItem = CurrentItem;
    } else {
      TempArrayOfChildren = CurrentItem.ChildNodes;
      NumChildren = rtl.length(TempArrayOfChildren);
      i = 0;
      while (i < NumChildren) {
        if (FoundItem === null) {
          TempItem = CurrentItem.ChildNodes[i];
          if (TempItem === targetNode) {
            FoundItem = TempItem;
            FoundParent.set(CurrentItem);
            position.set(i);
            i = NumChildren;
          } else FoundItem = $impl.ScanChildrenForNode(TempItem,targetNode,FoundParent,position);
        };
        i = i + 1;
      };
    };
    Result = FoundItem;
    return Result;
  };
  $impl.ScanChildrenForNodeByName = function (CurrentItem, ScreenObjectID, FoundParent, position) {
    var Result = null;
    var FoundItem = null;
    var TempItem = null;
    var TempArrayOfChildren = [];
    var NumChildren = 0;
    var i = 0;
    FoundItem = null;
    FoundParent.set(null);
    if (pas.SysUtils.Trim(pas.SysUtils.UpperCase(CurrentItem.NodeName)) === pas.SysUtils.Trim(pas.SysUtils.UpperCase(ScreenObjectID))) {
      FoundItem = CurrentItem;
    } else {
      TempArrayOfChildren = CurrentItem.ChildNodes;
      NumChildren = rtl.length(TempArrayOfChildren);
      i = 0;
      while (i < NumChildren) {
        if (FoundItem === null) {
          TempItem = CurrentItem.ChildNodes[i];
          if (pas.SysUtils.Trim(pas.SysUtils.UpperCase(TempItem.NodeName)) === pas.SysUtils.Trim(pas.SysUtils.UpperCase(ScreenObjectID))) {
            FoundItem = TempItem;
            FoundParent.set(CurrentItem);
            position.set(i);
            i = NumChildren;
          } else FoundItem = $impl.ScanChildrenForNodeByName(TempItem,ScreenObjectID,FoundParent,position);
        };
        i = i + 1;
      };
    };
    Result = FoundItem;
    return Result;
  };
  $impl.MakeAttrib = function (attrName, attrType, attrValue, attrReadOnly) {
    var Result = new $mod.TNodeAttribute();
    var newAttrib = new $mod.TNodeAttribute();
    newAttrib.AttribName = attrName;
    newAttrib.AttribType = attrType;
    newAttrib.AttribValue = attrValue;
    newAttrib.AttribReadOnly = attrReadOnly;
    Result = new $mod.TNodeAttribute(newAttrib);
    return Result;
  };
  $impl.CopyEventHandlers = function (myNode, myEventHandlers) {
    var i = 0;
    myNode.myEventHandlers = rtl.arraySetLength(myNode.myEventHandlers,$mod.TEventHandlerRec,myNode.myEventTypes.GetCount());
    for (var $l1 = 0, $end2 = rtl.length(myEventHandlers) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (pas.SysUtils.Trim(myEventHandlers[i].TheCode) !== "") {
        myNode.myEventHandlers[i].TheCode = myEventHandlers[i].TheCode;
        myNode.myEventHandlers[i].InitCode = myEventHandlers[i].InitCode;
      };
    };
  };
  $impl.AttribsFromXML = function (attributeList, offset, ParentName) {
    var Result = [];
    var myAttribs = [];
    var AttribBits = null;
    var sourceBits = null;
    var i = 0;
    var tmp = "";
    myAttribs = rtl.arraySetLength(myAttribs,$mod.TNodeAttribute,attributeList.GetCount() - offset);
    for (var $l1 = offset, $end2 = attributeList.GetCount() - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      AttribBits = pas.StringUtils.stringsplit(attributeList.Get(i),$mod.AttribBitsDelimiter);
      myAttribs[i - offset].AttribName = pas.StringUtils.TrimWhiteSpace(AttribBits.Get(0));
      myAttribs[i - offset].AttribType = pas.StringUtils.TrimWhiteSpace(AttribBits.Get(1));
      myAttribs[i - offset].AttribValue = $mod.UnSubstituteSpecials(AttribBits.Get(2));
      myAttribs[i - offset].AttribReadOnly = pas.StringUtils.MyStrToBool(pas.StringUtils.TrimWhiteSpace(AttribBits.Get(3)));
      if (AttribBits.GetCount() > 4) {
        tmp = pas.StringUtils.TrimWhiteSpace(AttribBits.Get(4));
        sourceBits = pas.StringUtils.stringsplit(tmp,".");
        if (sourceBits.GetCount() > 0) if (sourceBits.Get(0) !== "") {
          myAttribs[i - offset].AttribSource.InputNodeName = sourceBits.Get(0);
          if (sourceBits.GetCount() > 1) myAttribs[i - offset].AttribSource.InputAttribName = sourceBits.Get(1);
        };
      };
      if (myAttribs[i - offset].AttribName === "ParentName") ParentName.set(AttribBits.Get(2));
    };
    Result = myAttribs;
    return Result;
  };
  $impl.EventsFromXML = function (eventsList, EventNames) {
    var Result = [];
    var myEvents = [];
    var AttribBits = null;
    var i = 0;
    var t1 = "";
    var t2 = "";
    var tmp = "";
    myEvents = rtl.arraySetLength(myEvents,$mod.TEventHandlerRec,eventsList.GetCount());
    for (var $l1 = 0, $end2 = eventsList.GetCount() - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      t1 = eventsList.Get(i);
      AttribBits = pas.StringUtils.stringsplit(eventsList.Get(i),$mod.AttribBitsDelimiter);
      t2 = AttribBits.Get(0);
      tmp = AttribBits.Get(1);
      EventNames.get().Add(pas.StringUtils.TrimWhiteSpace(AttribBits.Get(0)));
      myEvents[i].TheCode = $mod.UnSubstituteSpecials(AttribBits.Get(1));
      if (AttribBits.GetCount() > 2) {
        tmp = AttribBits.Get(2);
        myEvents[i].InitCode = $mod.UnSubstituteSpecials(AttribBits.Get(2));
      };
    };
    Result = myEvents;
    return Result;
  };
  $impl.BuildSourceNodeFromXML = function (XMLString, ParentName) {
    var Result = null;
    var ScreenObjectName = "";
    var NodeClass = "";
    var ScreenObjectType = "";
    var AttribsEvents = null;
    var attributeList = null;
    var EventsList = null;
    var EventNames = null;
    var NameValuePair = null;
    var i = 0;
    var myAttribs = [];
    var myEventHandlers = [];
    var mynode = null;
    var tmp = "";
    var NodeString = "";
    Result = null;
    NodeString = XMLString;
    AttribsEvents = pas.StringUtils.stringsplit(NodeString,$mod.delimiterBetweenAttribsAndEvents);
    attributeList = pas.StringUtils.stringsplit(AttribsEvents.Get(0),$mod.attributeListdelimiter);
    if (AttribsEvents.GetCount() > 1) {
      EventsList = pas.StringUtils.stringsplit(AttribsEvents.Get(1),$mod.attributeListdelimiter)}
     else EventsList = pas.Classes.TStringList.$create("Create$1");
    ScreenObjectType = attributeList.Get(0);
    NameValuePair = pas.StringUtils.stringsplit(attributeList.Get(1),$mod.NameValuePairdelimiter);
    NodeClass = pas.StringUtils.TrimWhiteSpace(NameValuePair.Get(1));
    NameValuePair = pas.StringUtils.stringsplit(attributeList.Get(2),$mod.NameValuePairdelimiter);
    ScreenObjectName = pas.StringUtils.TrimWhiteSpace(NameValuePair.Get(1));
    if (NodeClass !== "Root") {
      myAttribs = $impl.AttribsFromXML(attributeList,3,ParentName);
      EventNames = pas.Classes.TStringList.$create("Create$1");
      myEventHandlers = $impl.EventsFromXML(EventsList,{get: function () {
          return EventNames;
        }, set: function (v) {
          EventNames = v;
        }});
      if (ScreenObjectType === "TXButton") for (var $l1 = 0, $end2 = rtl.length(myEventHandlers) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        tmp = myEventHandlers[i].TheCode;
        tmp = myEventHandlers[i].InitCode;
        tmp = "";
      };
      mynode = $mod.TDataNode.$create("Create$1",[NodeClass,ScreenObjectName,ScreenObjectType,true]);
      mynode.NodeAttributes = myAttribs;
      mynode.myEventTypes = EventNames;
      mynode.myEventHandlers = myEventHandlers;
      Result = mynode;
    } else {
      mynode = $mod.FindDataNodeById($mod.SystemNodeTree,ScreenObjectName,false);
      if (mynode !== null) {
        myAttribs = $impl.AttribsFromXML(attributeList,3,ParentName);
        for (var $l3 = 0, $end4 = rtl.length(myAttribs) - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          mynode.SetAttributeValue$2(myAttribs[i].AttribName,myAttribs[i].AttribValue);
        };
        EventNames = pas.Classes.TStringList.$create("Create$1");
        myEventHandlers = $impl.EventsFromXML(EventsList,{get: function () {
            return EventNames;
          }, set: function (v) {
            EventNames = v;
          }});
        mynode.myEventTypes = EventNames;
        mynode.myEventHandlers = myEventHandlers;
      };
    };
    return Result;
  };
  $impl.closeClipboardPasteDialog = function (myValue) {
    var Result = "";
    //alert('closeClipboardPasteDialog '+myValue);
          try {
                 setTimeout(function() {
                    try {
                     var pasteTarget = document.getElementById('PasteTargetContents');
                      var PasteString = myValue;
                      // myValue should hold the pasted data direct from the clipboard.
                      // However if it's blank, revert to the text content of pasteTarget...
                      if (PasteString=='') {PasteString = pasteTarget.value};
    
                      pas.XForm.CloseModal('PasteDialog');
    
                     if (pas.PasteDialogUnit.CompletionEvent!=null) {
                        //alert('call completion event '+pas.PasteDialogUnit.CompletionEvent.EventType+' '+pas.PasteDialogUnit.CompletionEvent.NodeId);
                        pas.PasteDialogUnit.CompletionEvent.ReturnString=PasteString;
                        pas.Events.handleEvent(pas.PasteDialogUnit.CompletionEvent,
                                               pas.PasteDialogUnit.CompletionEvent.EventType,
                                               pas.PasteDialogUnit.CompletionEvent.NodeId,
                                               PasteString,'');
                        pas.PasteDialogUnit.CompletionEvent=null;
                      }
                    } catch(err) { alert(err.message+'  in NodeUtils.setTimeout'); }
                 }, 10);
             } catch(err) { alert(err.message+'  in NodeUtils.closeClipboardPasteDialog'); };
    Result = "";
    return Result;
  };
  $impl.LookupNodeInObFunc = function (NodeType) {
    var Result = null;
    var i = 0;
    i = 0;
    while (i < rtl.length($mod.NodeFuncsLookup)) {
      if ($mod.NodeFuncsLookup[i].NodeType === NodeType) {
        Result = $mod.NodeFuncsLookup[i].InObFunctionPtr;
        i = rtl.length($mod.NodeFuncsLookup);
      };
      i = i + 1;
    };
    return Result;
  };
  $impl.addComponentFromXML = function (XMLString) {
    var Result = "";
    var ParentName = "";
    var mf = "";
    var ScreenObjectName = "";
    var ScreenObjectType = "";
    var i = 0;
    var ParentNode = null;
    var SourceNode = null;
    var mynode = null;
    var fn = null;
    var myDynamicWrapper = null;
    SourceNode = $impl.BuildSourceNodeFromXML(XMLString,{get: function () {
        return ParentName;
      }, set: function (v) {
        ParentName = v;
      }});
    if (SourceNode !== null) {
      ScreenObjectName = SourceNode.NodeName;
      ScreenObjectType = SourceNode.NodeType;
      if (ParentName === "") {
        pas.StringUtils.ShowMessage("parentname is blank for " + ScreenObjectName);
        ParentNode = $mod.SystemNodeTree;
      } else ParentNode = $mod.FindDataNodeById($mod.SystemNodeTree,ParentName,true);
      mynode = $mod.FindDataNodeById($mod.SystemNodeTree,ScreenObjectName,false);
      if (mynode === null) {
        if ((((SourceNode.NodeClass === "UI") && (SourceNode.NodeType !== "")) || ((SourceNode.NodeClass === "NV") && (SourceNode.NodeType !== ""))) || (SourceNode.NodeClass === "SVG")) {
          myDynamicWrapper = $mod.CreateInterfaceObject(ParentNode.MyForm,ScreenObjectType,ScreenObjectName);
          if (myDynamicWrapper !== null) {
            mynode = myDynamicWrapper;
            myDynamicWrapper.myNode = mynode;
            if (mynode === null) pas.StringUtils.ShowMessage("myNode is nil");
            mynode.IsDynamic = true;
            mynode.myEventTypes = SourceNode.myEventTypes;
            mynode.myEventHandlers = SourceNode.myEventHandlers;
          };
          if (mynode === null) pas.StringUtils.ShowMessage("mynode is nil in addComponentFromXML");
        } else if (SourceNode.NodeClass === "Code") {
          mynode = SourceNode;
        };
      };
      $mod.ReParentNode(mynode,ParentNode);
      if ((((SourceNode.NodeClass === "UI") && (SourceNode.NodeType !== "")) || ((SourceNode.NodeClass === "NV") && (SourceNode.NodeType !== ""))) || (SourceNode.NodeClass === "SVG")) {
        for (var $l1 = 0, $end2 = rtl.length(SourceNode.NodeAttributes) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          mynode.SetAttributeValue$2(SourceNode.NodeAttributes[i].AttribName,SourceNode.NodeAttributes[i].AttribValue);
        };
        if ($mod.MainForm !== null) {
          mf = $mod.MainForm.fName}
         else mf = ".";
        if (ScreenObjectName!=mf) {
          // object may already exist if this is a system re-load, so delete the old one.
          var ob = document.getElementById(ScreenObjectName);
          if (ob!=null) {
             var Parent = pas.HTMLUtils.ScreenObjectInnerComponent(ParentNode);
            if (Parent!=null) {
               Parent.removeChild(ob); }
          }
        };
        fn = $mod.LookupComponentFunc(SourceNode.NodeType);
        fn(mynode,ParentNode,SourceNode.NodeName,-1,"Left");
      };
      if (mynode.HasAttribute("SuspendRefresh")) mynode.SetAttributeValue$2("SuspendRefresh","False");
    };
    return Result;
  };
  $impl.DeleteScreenObject = function (MyNode) {
    var Result = "";
    var ObjName = "";
    ObjName = MyNode.NodeName;
    try{
    var ThisObject = document.getElementById(ObjName);
    if (ThisObject!=null) {
       ThisObject.parentNode.removeChild(ThisObject);
      }
    }catch(err) { alert(err.message+' in NodeUtils.DeleteScreenObject');};
    $mod.NilScreenObject(MyNode);
    return Result;
  };
  $impl.checkData = function (SystemDescription) {
    var Result = false;
    var teststring = "";
    var sys = "";
    var i = 0;
    var MatchFound = false;
    MatchFound = true;
    sys = pas.SysUtils.Trim(SystemDescription);
    teststring = "<Root|; Class |=R";
    for (var $l1 = 1, $end2 = teststring.length; $l1 <= $end2; $l1++) {
      i = $l1;
      if (sys.charAt(i - 1) !== teststring.charAt(i - 1)) MatchFound = false;
    };
    Result = MatchFound;
    return Result;
  };
  $impl.CompareAttribName = function (Attr1, Attr2) {
    var Result = 0;
    Result = pas.SysUtils.CompareText(Attr1.AttribName,Attr2.AttribName);
    return Result;
  };
  $impl.SwapAttrib = function (Attr1, Attr2) {
    var temp = new $mod.TNodeAttribute();
    temp = new $mod.TNodeAttribute(Attr1.get());
    Attr1.set(new $mod.TNodeAttribute(Attr2.get()));
    Attr2.set(new $mod.TNodeAttribute(temp));
  };
});
rtl.module("XSVGContainer",["System","Classes","SysUtils","StringUtils","NodeUtils","WrapperPanel","Events","XIFrame","XForm"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.HandleMessage = function (msg) {
    var ItemNode = null;
    if (pas.StringUtils.FoundString(msg,"Target = >") > 0) {
      ItemNode = $mod.SVGItemFromTitle(msg);
      if (ItemNode !== null) {
        pas.Events.handleEvent$2("Click",ItemNode.NodeName,msg);
      };
    };
  };
  this.SVGItemFromTitle = function (IFrameTitle) {
    var Result = null;
    var bits = null;
    var items = null;
    var ItemID = "";
    var XStr = "";
    var YStr = "";
    bits = pas.Classes.TStringList.$create("Create$1");
    bits.FStrictDelimiter = true;
    bits.SetLineBreak(">");
    bits.SetTextStr(IFrameTitle);
    if (bits.GetCount() > 1) {
      items = pas.Classes.TStringList.$create("Create$1");
      items.FStrictDelimiter = true;
      items.SetLineBreak(pas.NodeUtils.attributeListdelimiter);
      items.SetTextStr(bits.Get(1));
      if (items.GetCount() > 3) {
        ItemID = items.Get(1);
        XStr = items.Get(2);
        YStr = items.Get(3);
        if (ItemID !== "") {
          Result = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,ItemID,false)}
         else Result = null;
      } else Result = null;
    } else Result = null;
    return Result;
  };
  rtl.createClass($mod,"TXSVGContainer",pas.XIFrame.TXIFrame,function () {
    this.GetXMLString = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("XMLString",true).AttribValue;
      return Result;
    };
    this.SetXMLString = function (AValue) {
      var SVGString = "";
      var FilteredSVGString = "";
      SVGString = AValue;
      FilteredSVGString = this.XMLWarnings(SVGString);
      this.myNode.SetAttributeValue$2("XMLString",SVGString);
      SVGString = this.FullXMLString();
      this.myNode.SetAttributeValue$2("HTMLSource",SVGString);
      this.RedisplayFrame();
    };
    this.SetSuspendRefresh = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("SuspendRefresh",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
        if (AValue === false) {
          this.myNode.SetAttributeValue$2("HTMLSource",this.FullXMLString());
          this.RedisplayFrame();
        };
      };
    };
    this.ConstructXMLString = function (myName) {
      var JavascriptString = "";
      var stylestring = "";
      var SvgString = "";
      JavascriptString = (((((((((((((((((((((((((((((("<script> " + '  document.title = "') + this.myNode.NodeName) + " ") + this.myNode.NodeType) + '"; ') + '  document.documentElement.addEventListener("click", function( event ) { event.stopPropagation();') + "    var x=event.clientX; ") + "    var y=event.clientY; ") + '    var ts= "";') + "    var t=event.target;") + '    var targetstring = "" ;') + "    if ((t!=null)&&(t.attributes.length>0)) ") + "    { ts = t.id; ") + '      targetstring = "') + this.myNode.NodeName) + " ") + this.myNode.NodeType) + " Target = >") + pas.NodeUtils.attributeListdelimiter) + '"+ts+"') + pas.NodeUtils.attributeListdelimiter) + '";  ') + '      document.title = targetstring +  x + "') + pas.NodeUtils.attributeListdelimiter) + '"+ y + "') + pas.NodeUtils.attributeListdelimiter) + '";') + '      parent.postMessage(document.title,"*");  ') + "}") + "   }, false); ") + "<\/script> ";
      stylestring = ((((" <style>    " + " a:focus {              ") + "  stroke: black;         ") + "  stroke-width: 5;     ") + "}                     ") + "<\/style>              ";
      SvgString = ((('<svg id="' + myName) + '" top="0" left="0" ') + ' width="100%" height="92%" overflow:"hidden" position:"fixed">') + "<\/svg> ";
      this.myNode.SetAttributeValue$2("XMLString",(JavascriptString + stylestring) + SvgString);
    };
    this.SpliceSVGChildStrings = function (parentstring, childstring) {
      var Result = "";
      var parentlength = 0;
      var endTagPos = 0;
      var i = 0;
      var j = 0;
      var found = false;
      var startstring = "";
      var endstring = "";
      var returnstr = "";
      parentlength = parentstring.length;
      found = false;
      endTagPos = 0;
      startstring = "";
      endstring = "";
      returnstr = "";
      for (var $l1 = parentlength; $l1 >= 1; $l1--) {
        i = $l1;
        if (found === false) if (parentstring.charAt(i - 1) === "<") {
          for (var $l2 = i, $end3 = parentlength; $l2 <= $end3; $l2++) {
            j = $l2;
            endstring = endstring + parentstring.charAt(j - 1);
          };
          for (var $l4 = 1, $end5 = i - 1; $l4 <= $end5; $l4++) {
            j = $l4;
            startstring = startstring + parentstring.charAt(j - 1);
          };
          if ("<\/svg>" === pas.SysUtils.LowerCase(pas.StringUtils.TrimWhiteSpace(endstring))) {
            endTagPos = i;
            found = true;
            returnstr = (((startstring + " ") + childstring) + " ") + endstring;
          } else pas.StringUtils.ShowMessage("SVG string is not valid:  " + parentstring);
        };
      };
      Result = returnstr;
      return Result;
    };
    this.XMLWarnings = function (SVGString) {
      var Result = "";
      var FilteredSVGString = "";
      this.WarnAboutTTypeBezierCurves(SVGString);
      FilteredSVGString = pas.StringUtils.myStringReplace(SVGString,"transparent","none",-1,-1);
      if (FilteredSVGString.length !== SVGString.length) {
        pas.StringUtils.ShowMessage('Warning the fill type of "transparent" is not supported by this SVG component - it has been replaced with "none"');
      };
      SVGString = FilteredSVGString;
      return Result;
    };
    this.WarnAboutTTypeBezierCurves = function (instring) {
      var Result = "";
      var startOfPathStatement = 0;
      var startOfPathData = 0;
      var i = 0;
      var tempstr = "";
      var endOfData = false;
      startOfPathStatement = pas.StringUtils.FoundString(instring,"<path");
      if (startOfPathStatement > 0) {
        endOfData = false;
        startOfPathData = pas.StringUtils.FoundString(instring,"d=");
        if (startOfPathData > 0) {
          for (var $l1 = startOfPathData + 2, $end2 = instring.length; $l1 <= $end2; $l1++) {
            i = $l1;
            if (endOfData === false) {
              tempstr = instring.charAt(i - 1);
              if (((tempstr === "t") || (tempstr === "T")) && (instring.charAt((i - 1) - 1) === " ")) pas.StringUtils.ShowMessage('Bezier curves of type "T" are not supported by this SVG component - please use an alternative form');
              if ((tempstr === '"') || (tempstr === ">")) endOfData = true;
            };
          };
        };
      };
      return Result;
    };
    this.FullXMLString = function () {
      var Result = "";
      var SVGString = "";
      var childdata = "";
      var i = 0;
      var childNode = null;
      childdata = "";
      SVGString = this.myNode.GetAttribute("XMLString",true).AttribValue;
      for (var $l1 = 0, $end2 = rtl.length(this.myNode.ChildNodes) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        childNode = this.myNode.ChildNodes[i];
        childdata = childdata + childNode.GetAttribute("XMLString",true).AttribValue;
      };
      Result = this.SpliceSVGChildStrings(SVGString,childdata);
      return Result;
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.XIFrame.TXIFrame.Create$3.call(this,MyForm,NodeName);
      this.NodeType = "TXSVGContainer";
      this.FIsContainer = true;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.SVGDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("XMLString",3,rtl.string,"GetXMLString","SetXMLString");
  });
  rtl.createClass($mod,"TXSVGWidget",pas.NodeUtils.TDataNode,function () {
    this.$init = function () {
      pas.NodeUtils.TDataNode.$init.call(this);
      this.FIsSelected = false;
      this.myNode = null;
    };
    this.$final = function () {
      this.myNode = undefined;
      pas.NodeUtils.TDataNode.$final.call(this);
    };
    this.getXMLString = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("XMLString",true).AttribValue;
      return Result;
    };
    this.getXPos = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("XPos",true).AttribValue;
      return Result;
    };
    this.getYPos = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("YPos",true).AttribValue;
      return Result;
    };
    this.getHeight = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Height",true).AttribValue;
      return Result;
    };
    this.getWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Width",true).AttribValue;
      return Result;
    };
    this.getStrokeWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("StrokeWidth",true).AttribValue;
      return Result;
    };
    this.getStrokeColor = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("StrokeColor",true).AttribValue;
      return Result;
    };
    this.getFillColor = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("FillColor",true).AttribValue;
      return Result;
    };
    this.getFillTransparent = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("FillTransparent",true).AttribValue);
      return Result;
    };
    this.getRotate = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Rotate",true).AttribValue;
      return Result;
    };
    this.GetHint = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Hint",true).AttribValue;
      return Result;
    };
    this.setXMLString = function (AValue) {
      var myParent = null;
      var pn = null;
      this.myNode.SetAttributeValue$2("XMLString",AValue);
      pn = pas.NodeUtils.FindParentOfNode$1(pas.NodeUtils.SystemNodeTree,this.myNode);
      if (pn !== null) {
        myParent = pn;
        myParent.SetXMLString(myParent.GetXMLString());
      };
    };
    this.setXPos = function (AValue) {
      this.myNode.SetAttributeValue$2("XPos",AValue);
      this.ConstructXMLString();
    };
    this.setYPos = function (AValue) {
      this.myNode.SetAttributeValue$2("YPos",AValue);
      this.ConstructXMLString();
    };
    this.setWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("Width",AValue);
      this.ConstructXMLString();
    };
    this.setHeight = function (AValue) {
      this.myNode.SetAttributeValue$2("Height",AValue);
      this.ConstructXMLString();
    };
    this.setStrokeWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("StrokeWidth",AValue);
      this.ConstructXMLString();
    };
    this.setStrokeColor = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("StrokeColor",AValue,"Color");
        this.ConstructXMLString();
      };
    };
    this.setFillColor = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("FillColor",AValue,"Color");
        this.ConstructXMLString();
      };
    };
    this.setFillTransparent = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("FillTransparent",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
        this.ConstructXMLString();
      };
    };
    this.setRotate = function (AValue) {
      this.myNode.SetAttributeValue$2("Rotate",AValue);
      this.ConstructXMLString();
    };
    this.SetHint = function (AValue) {
      this.myNode.SetAttributeValue$2("Hint",AValue);
      this.ConstructXMLString();
    };
    this.SetupWidget = function (ParentNode, position) {
      var Result = null;
      var NewNode = null;
      NewNode = this.myNode;
      pas.NodeUtils.AddChildToParentNode({get: function () {
          return ParentNode;
        }, set: function (v) {
          ParentNode = v;
        }},{get: function () {
          return NewNode;
        }, set: function (v) {
          NewNode = v;
        }},position);
      NewNode.myEventHandlers = rtl.arraySetLength(NewNode.myEventHandlers,pas.NodeUtils.TEventHandlerRec,NewNode.myEventTypes.GetCount());
      pas.NodeUtils.RefreshComponentProps(this.myNode);
      Result = NewNode;
      return Result;
    };
    this.FinishSVGInObCreate = function () {
      this.myNode = this;
      this.SetMyEventTypes();
      this.SetDefaultAttribs();
    };
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.ConstructXMLString = function () {
    };
    this.SetDefaultAttribs = function () {
    };
    var $r = this.$rtti;
    $r.addProperty("IsSelected",0,rtl.boolean,"FIsSelected","FIsSelected");
    $r.addProperty("XMLString",3,rtl.string,"getXMLString","setXMLString");
    $r.addProperty("XPos",3,rtl.string,"getXPos","setXPos");
    $r.addProperty("YPos",3,rtl.string,"getYPos","setYPos");
    $r.addProperty("Width",3,rtl.string,"getWidth","setWidth");
    $r.addProperty("Height",3,rtl.string,"getHeight","setHeight");
    $r.addProperty("StrokeWidth",3,rtl.string,"getStrokeWidth","setStrokeWidth");
    $r.addProperty("StrokeColor",3,rtl.string,"getStrokeColor","setStrokeColor");
    $r.addProperty("FillColor",3,rtl.string,"getFillColor","setFillColor");
    $r.addProperty("FillTransparent",3,rtl.boolean,"getFillTransparent","setFillTransparent");
    $r.addProperty("Rotate",3,rtl.string,"getRotate","setRotate");
    $r.addProperty("Hint",3,rtl.string,"GetHint","SetHint");
  });
  rtl.createClass($mod,"TXSVGText",$mod.TXSVGWidget,function () {
    this.getTextString = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("TextString",true).AttribValue;
      return Result;
    };
    this.getFontFamily = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("FontFamily",true).AttribValue;
      return Result;
    };
    this.getFontWeight = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("FontWeight",true).AttribValue;
      return Result;
    };
    this.getFontStyle = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("FontStyle",true).AttribValue;
      return Result;
    };
    this.setTextString = function (AValue) {
      this.myNode.SetAttributeValue$2("TextString",AValue);
      this.ConstructXMLString();
    };
    this.setFontFamily = function (AValue) {
      this.myNode.SetAttributeValue$2("FontFamily",AValue);
      this.ConstructXMLString();
    };
    this.setFontWeight = function (AValue) {
      this.myNode.SetAttributeValue$2("FontWeight",AValue);
      this.ConstructXMLString();
    };
    this.setFontStyle = function (AValue) {
      this.myNode.SetAttributeValue$2("FontStyle",AValue);
      this.ConstructXMLString();
    };
    this.ConstructXMLString = function () {
      this.setXMLString((((((((((((((((((((((((((' <text id="' + this.NodeName) + '" x="') + this.getXPos()) + '" y="') + this.getYPos()) + '" transform="rotate(') + this.getRotate()) + ",") + this.getXPos()) + ",") + this.getYPos()) + ')"') + ' style="font-family: ') + this.getFontFamily()) + "; font-weight:") + this.getFontWeight()) + ";font-size:") + this.getHeight()) + "; font-style: ") + this.getFontStyle()) + '" >') + this.getTextString()) + "<title>") + this.GetHint()) + "<\/title>") + " <\/text>");
    };
    this.SetDefaultAttribs = function () {
      this.myNode.SetAttributeValue$2("XPos","50");
      this.myNode.SetAttributeValue$2("YPos","50");
      this.myNode.SetAttributeValue$2("TextString","SVG Text Example");
      this.myNode.SetAttributeValue$2("Height","20");
      this.myNode.SetAttributeValue$2("FontFamily"," impact, georgia, times, serif;");
      this.myNode.SetAttributeValue$2("FontWeight"," normal");
      this.myNode.SetAttributeValue$2("FontStyle"," normal");
      this.myNode.SetAttributeValue$2("Rotate","0");
      this.ConstructXMLString();
    };
    var $r = this.$rtti;
    $r.addProperty("TextString",3,rtl.string,"getTextString","setTextString");
    $r.addProperty("FontFamily",3,rtl.string,"getFontFamily","setFontFamily");
    $r.addProperty("FontWeight",3,rtl.string,"getFontWeight","setFontWeight");
    $r.addProperty("FontStyle",3,rtl.string,"getFontStyle","setFontStyle");
  });
  rtl.createClass($mod,"TXSVGRect",$mod.TXSVGWidget,function () {
    this.ConstructXMLString = function () {
      this.setXMLString(((((((((((((((((((((((((('<rect id="' + this.NodeName) + '" x="') + this.getXPos()) + '" y="') + this.getYPos()) + '" transform="rotate(') + this.getRotate()) + ",") + this.getXPos()) + ",") + this.getYPos()) + ')" width="') + this.getWidth()) + '" height="') + this.getHeight()) + '" stroke="') + $impl.ColorToStr(this.getStrokeColor())) + '" fill="') + $impl.FillColorToStr(this.getFillColor(),this.getFillTransparent())) + '" stroke-width="') + this.getStrokeWidth()) + '" >') + "<title>") + this.GetHint()) + "<\/title>") + " <\/rect>");
    };
    this.SetDefaultAttribs = function () {
      this.myNode.SetAttributeValue$2("XPos","50");
      this.myNode.SetAttributeValue$2("YPos","50");
      this.myNode.SetAttributeValue$2("Width","50");
      this.myNode.SetAttributeValue$2("Height","50");
      this.myNode.SetAttributeValue$2("StrokeWidth","3");
      this.myNode.SetAttributeValue$1("StrokeColor","#BBBBBB","Color");
      this.myNode.SetAttributeValue$1("FillColor","#FF0000","Color");
      this.myNode.SetAttributeValue$1("FillTransparent","False","Boolean");
      this.myNode.SetAttributeValue$2("Rotate","0");
      this.ConstructXMLString();
    };
  });
  rtl.createClass($mod,"TXSVGRoundedRect",$mod.TXSVGWidget,function () {
    this.getrx = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Rx",true).AttribValue;
      return Result;
    };
    this.getry = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Ry",true).AttribValue;
      return Result;
    };
    this.setrx = function (AValue) {
      this.myNode.SetAttributeValue$2("Rx",AValue);
      this.ConstructXMLString();
    };
    this.setry = function (AValue) {
      this.myNode.SetAttributeValue$2("Ry",AValue);
      this.ConstructXMLString();
    };
    this.ConstructXMLString = function () {
      this.setXMLString(((((((((((((((((((((((((((((((('<rect id="' + this.NodeName) + '" x="') + this.getXPos()) + '" y="') + this.getYPos()) + '" rx="') + this.getrx()) + '" ry="') + this.getry()) + '" title="') + this.GetHint()) + '" transform="rotate(') + this.getRotate()) + ",") + this.getXPos()) + ",") + this.getYPos()) + ')" width="') + this.getWidth()) + '" height="') + this.getHeight()) + '" stroke="') + $impl.ColorToStr(this.getStrokeColor())) + '" fill="') + $impl.FillColorToStr(this.getFillColor(),this.getFillTransparent())) + '" stroke-width="') + this.getStrokeWidth()) + '" >') + "<title>") + this.GetHint()) + "<\/title>") + " <\/rect>");
    };
    this.SetDefaultAttribs = function () {
      this.myNode.SetAttributeValue$2("XPos","50");
      this.myNode.SetAttributeValue$2("YPos","50");
      this.myNode.SetAttributeValue$2("Rx","10");
      this.myNode.SetAttributeValue$2("Ry","10");
      this.myNode.SetAttributeValue$2("Width","50");
      this.myNode.SetAttributeValue$2("Height","50");
      this.myNode.SetAttributeValue$2("StrokeWidth","3");
      this.myNode.SetAttributeValue$1("StrokeColor","#BBBBBB","Color");
      this.myNode.SetAttributeValue$1("FillColor","#FF0000","Color");
      this.myNode.SetAttributeValue$1("FillTransparent","False","Boolean");
      this.myNode.SetAttributeValue$2("Rotate","0");
      this.ConstructXMLString();
    };
    var $r = this.$rtti;
    $r.addProperty("rx",3,rtl.string,"getrx","setrx");
    $r.addProperty("ry",3,rtl.string,"getry","setry");
  });
  rtl.createClass($mod,"TXSVGCircle",$mod.TXSVGWidget,function () {
    this.getRadius = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Radius",true).AttribValue;
      return Result;
    };
    this.setRadius = function (AValue) {
      this.myNode.SetAttributeValue$2("Radius",AValue);
      this.ConstructXMLString();
    };
    this.ConstructXMLString = function () {
      this.setXMLString(((((((((((((((((((((((('<circle id="' + this.NodeName) + '" cx="') + this.getXPos()) + '" cy="') + this.getYPos()) + '" transform="rotate(') + this.getRotate()) + ",") + this.getXPos()) + ",") + this.getYPos()) + ')" r="') + this.getRadius()) + '" stroke="') + $impl.ColorToStr(this.getStrokeColor())) + '" fill="') + $impl.FillColorToStr(this.getFillColor(),this.getFillTransparent())) + '" stroke-width="') + this.getStrokeWidth()) + ' "> ') + "<title>") + this.GetHint()) + "<\/title>") + "<\/circle>");
    };
    this.SetDefaultAttribs = function () {
      this.myNode.SetAttributeValue$2("YPos","75");
      this.myNode.SetAttributeValue$2("XPos","25");
      this.myNode.SetAttributeValue$2("Radius","20");
      this.myNode.SetAttributeValue$2("StrokeWidth","5");
      this.myNode.SetAttributeValue$1("StrokeColor","#00FF00","Color");
      this.myNode.SetAttributeValue$1("FillColor","#FFFF00","Color");
      this.myNode.SetAttributeValue$1("FillTransparent","False","Boolean");
      this.myNode.SetAttributeValue$2("Rotate","0");
      this.ConstructXMLString();
    };
    var $r = this.$rtti;
    $r.addProperty("Radius",3,rtl.string,"getRadius","setRadius");
  });
  rtl.createClass($mod,"TXSVGEllipse",$mod.TXSVGWidget,function () {
    this.getrx = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Rx",true).AttribValue;
      return Result;
    };
    this.getry = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Ry",true).AttribValue;
      return Result;
    };
    this.setrx = function (AValue) {
      this.myNode.SetAttributeValue$2("Rx",AValue);
      this.ConstructXMLString();
    };
    this.setry = function (AValue) {
      this.myNode.SetAttributeValue$2("Ry",AValue);
      this.ConstructXMLString();
    };
    this.ConstructXMLString = function () {
      this.setXMLString(((((((((((((((((((((((((((('<ellipse id="' + this.NodeName) + '" cx="') + this.getXPos()) + '"  cy="') + this.getYPos()) + '"  rx="') + this.getrx()) + '" ry="') + this.getry()) + '"') + ' transform="rotate(') + this.getRotate()) + ",") + this.getXPos()) + ",") + this.getYPos()) + ')"') + ' stroke="') + $impl.ColorToStr(this.getStrokeColor())) + '" fill="') + $impl.FillColorToStr(this.getFillColor(),this.getFillTransparent())) + '" stroke-width="') + this.getStrokeWidth()) + '" > ') + "<title>") + this.GetHint()) + "<\/title>") + " <\/ellipse>");
    };
    this.SetDefaultAttribs = function () {
      this.myNode.SetAttributeValue$2("YPos","75");
      this.myNode.SetAttributeValue$2("XPos","100");
      this.myNode.SetAttributeValue$2("Rx","20");
      this.myNode.SetAttributeValue$2("Ry","50");
      this.myNode.SetAttributeValue$2("StrokeWidth","5");
      this.myNode.SetAttributeValue$1("StrokeColor","#66FF66","Color");
      this.myNode.SetAttributeValue$1("FillColor","#AABBCC","Color");
      this.myNode.SetAttributeValue$1("FillTransparent","False","Boolean");
      this.myNode.SetAttributeValue$2("Rotate","0");
      this.ConstructXMLString();
    };
    var $r = this.$rtti;
    $r.addProperty("rx",3,rtl.string,"getrx","setrx");
    $r.addProperty("ry",3,rtl.string,"getry","setry");
  });
  rtl.createClass($mod,"TXSVGLine",$mod.TXSVGWidget,function () {
    this.getX1 = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("X1",true).AttribValue;
      return Result;
    };
    this.getX2 = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("X2",true).AttribValue;
      return Result;
    };
    this.getY1 = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Y1",true).AttribValue;
      return Result;
    };
    this.getY2 = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Y2",true).AttribValue;
      return Result;
    };
    this.setX1 = function (AValue) {
      this.myNode.SetAttributeValue$2("X1",AValue);
      this.ConstructXMLString();
    };
    this.setX2 = function (AValue) {
      this.myNode.SetAttributeValue$2("X2",AValue);
      this.ConstructXMLString();
    };
    this.setY1 = function (AValue) {
      this.myNode.SetAttributeValue$2("Y1",AValue);
      this.ConstructXMLString();
    };
    this.setY2 = function (AValue) {
      this.myNode.SetAttributeValue$2("Y2",AValue);
      this.ConstructXMLString();
    };
    this.ConstructXMLString = function () {
      this.setXMLString(((((((((((((((((((((((((('<line id="' + this.NodeName) + '" x1="') + this.getX1()) + '" x2="') + this.getX2()) + '" y1="') + this.getY1()) + '" y2="') + this.getY2()) + '"') + ' transform="rotate(') + this.getRotate()) + ",") + this.getX1()) + ",") + this.getY1()) + ')"') + ' stroke="') + $impl.ColorToStr(this.getStrokeColor())) + '" stroke-width="') + this.getStrokeWidth()) + '" > ') + "<title>") + this.GetHint()) + "<\/title>") + " <\/line>");
    };
    this.SetDefaultAttribs = function () {
      this.myNode.SetAttributeValue$2("X1","19");
      this.myNode.SetAttributeValue$2("Y1","110");
      this.myNode.SetAttributeValue$2("X2","50");
      this.myNode.SetAttributeValue$2("Y2","150");
      this.myNode.SetAttributeValue$2("StrokeWidth","5");
      this.myNode.SetAttributeValue$1("StrokeColor","#66FF66","Color");
      this.myNode.SetAttributeValue$2("Rotate","0");
      this.ConstructXMLString();
    };
    var $r = this.$rtti;
    $r.addProperty("X1",3,rtl.string,"getX1","setX1");
    $r.addProperty("Y1",3,rtl.string,"getY1","setY1");
    $r.addProperty("X2",3,rtl.string,"getX2","setX2");
    $r.addProperty("Y2",3,rtl.string,"getY2","setY2");
  });
  rtl.createClass($mod,"TXSVGPolyLine",$mod.TXSVGWidget,function () {
    this.getXCoords = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("XCoords",true).AttribValue;
      return Result;
    };
    this.getYCoords = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("YCoords",true).AttribValue;
      return Result;
    };
    this.setXCoords = function (AValue) {
      this.myNode.SetAttributeValue$2("XCoords",AValue);
      this.ConstructXMLString();
    };
    this.setYCoords = function (AValue) {
      this.myNode.SetAttributeValue$2("YCoords",AValue);
      this.ConstructXMLString();
    };
    this.ConstructXMLString = function () {
      var str = "";
      var XArray = [];
      var YArray = [];
      var i = 0;
      var numpoints = 0;
      XArray = $impl.GetArrayFromString(this.getXCoords());
      YArray = $impl.GetArrayFromString(this.getYCoords());
      str = ('<polyline id="' + this.NodeName) + '" points="';
      numpoints = rtl.length(XArray);
      for (var $l1 = 0, $end2 = numpoints - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        str = (((str + pas.SysUtils.IntToStr(XArray[i])) + " ") + pas.SysUtils.IntToStr(YArray[i])) + " ";
      };
      this.setXMLString((((((((((((((((((str + '" transform="rotate(') + this.getRotate()) + ",") + pas.SysUtils.IntToStr(XArray[0])) + ",") + pas.SysUtils.IntToStr(YArray[0])) + ')"') + ' stroke="') + $impl.ColorToStr(this.getStrokeColor())) + '" fill="') + $impl.FillColorToStr(this.getFillColor(),this.getFillTransparent())) + '" stroke-width="') + this.getStrokeWidth()) + '" > ') + "<title>") + this.GetHint()) + "<\/title>") + " <\/polyline>");
    };
    this.SetDefaultAttribs = function () {
      this.myNode.SetAttributeValue$2("XCoords","60 , 65 , 70 , 75  , 80 , 85 , 90,  95 , 100 ");
      this.myNode.SetAttributeValue$2("YCoords","110, 120, 115 ,130 ,125 ,140, 135 ,150 , 145");
      this.myNode.SetAttributeValue$2("StrokeWidth","2");
      this.myNode.SetAttributeValue$1("FillColor","#FFFFFF","Color");
      this.myNode.SetAttributeValue$1("FillTransparent","False","Boolean");
      this.myNode.SetAttributeValue$1("StrokeColor","#000000","Color");
      this.myNode.SetAttributeValue$2("Rotate","0");
      this.ConstructXMLString();
    };
    var $r = this.$rtti;
    $r.addProperty("XCoords",3,rtl.string,"getXCoords","setXCoords");
    $r.addProperty("YCoords",3,rtl.string,"getYCoords","setYCoords");
  });
  rtl.createClass($mod,"TXSVGPolyGon",$mod.TXSVGPolyLine,function () {
    this.ConstructXMLString = function () {
      var str = "";
      var XArray = [];
      var YArray = [];
      var i = 0;
      var numpoints = 0;
      XArray = $impl.GetArrayFromString(this.getXCoords());
      YArray = $impl.GetArrayFromString(this.getYCoords());
      str = ('<polygon id="' + this.NodeName) + '" points="';
      numpoints = rtl.length(XArray);
      for (var $l1 = 0, $end2 = numpoints - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        str = (((str + pas.SysUtils.IntToStr(XArray[i])) + " ") + pas.SysUtils.IntToStr(YArray[i])) + " ";
      };
      this.setXMLString(((((((((((((((((((str + '" transform="rotate(') + this.getRotate()) + ",") + pas.SysUtils.IntToStr(XArray[0])) + ",") + pas.SysUtils.IntToStr(YArray[0])) + ')"') + ' stroke="') + $impl.ColorToStr(this.getStrokeColor())) + '" fill="') + $impl.FillColorToStr(this.getFillColor(),this.getFillTransparent())) + '"') + ' stroke-width="') + this.getStrokeWidth()) + '" >') + "<title>") + this.GetHint()) + "<\/title>") + "<\/polygon>");
    };
    this.SetDefaultAttribs = function () {
      this.myNode.SetAttributeValue$2("XCoords","50 ,  55 ,   70 , 60 ,  65 ,  50 ,  35  , 40 ,  30 ,  45 ");
      this.myNode.SetAttributeValue$2("YCoords","160 , 180 , 180 , 190 , 205 , 195 , 205 , 190 , 180,  180");
      this.myNode.SetAttributeValue$2("StrokeWidth","2");
      this.myNode.SetAttributeValue$1("StrokeColor","#FF0000","Color");
      this.myNode.SetAttributeValue$1("FillColor","#AAAAAA","Color");
      this.myNode.SetAttributeValue$1("FillTransparent","False","Boolean");
      this.myNode.SetAttributeValue$2("Rotate","0");
      this.ConstructXMLString();
    };
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"SuspendRefresh","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"ActualHeight","Integer","","",false,false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"ActualWidth","Integer","","",false,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"FrameWidth","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"FrameHeight","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"LabelPos","String","Top","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"LabelText","String","SVG Frame","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"BgColor","Color","#FFFFFF","",false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"HTMLSource","String","","",false,false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.SVGDefaultAttribs;
      }, set: function (v) {
        this.p.SVGDefaultAttribs = v;
      }},"XMLString","String","","",false,false);
    pas.NodeUtils.AddDefaultsToTable("TXSVGContainer",$impl.SVGDefaultAttribs);
    pas.NodeUtils.AddAttribOptions("TXSVGContainer","Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions("TXSVGContainer","LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup("TXSVGContainer",$impl.CreateinterfaceObjSVG,$impl.CreateSVGContainerWidget);
    pas.NodeUtils.AddNodeFuncLookup("TXSVGText",$impl.CreateInObSVGText,$impl.CreateWidgetSVGText);
    pas.NodeUtils.AddNodeFuncLookup("TXSVGRect",$impl.CreateInObSVGRect,$impl.CreateWidgetSVGRect);
    pas.NodeUtils.AddNodeFuncLookup("TXSVGRoundedRect",$impl.CreateInObSVGRoundedRect,$impl.CreateWidgetSVGRoundedRect);
    pas.NodeUtils.AddNodeFuncLookup("TXSVGCircle",$impl.CreateInObSVGCircle,$impl.CreateWidgetSVGCircle);
    pas.NodeUtils.AddNodeFuncLookup("TXSVGEllipse",$impl.CreateInObSVGEllipse,$impl.CreateWidgetSVGEllipse);
    pas.NodeUtils.AddNodeFuncLookup("TXSVGLine",$impl.CreateInObSVGLine,$impl.CreateWidgetSVGLine);
    pas.NodeUtils.AddNodeFuncLookup("TXSVGPolyLine",$impl.CreateInObSVGPolyLine,$impl.CreateWidgetSVGPolyLine);
    pas.NodeUtils.AddNodeFuncLookup("TXSVGPolyGon",$impl.CreateInObSVGPolyGon,$impl.CreateWidgetSVGPolyGon);
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGContainer","ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGContainer","ContainerWidth");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGContainer","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGContainer","HTMLSource");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGText","Width");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGCircle","Width");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGCircle","Height");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGEllipse","Width");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGEllipse","Height");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGLine","XPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGLine","YPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGLine","Width");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGLine","Height");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGLine","FillColor");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGPolyLine","XPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGPolyLine","YPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGPolyLine","Width");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGPolyLine","Height");
    pas.WrapperPanel.SuppressDesignerProperty("TXSVGPolyLine","FillColor");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.SVGDefaultAttribs = [];
  $impl.CreateSVGContainerWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    pas.XIFrame.DoCreateFrameWidget(MyNode,ParentNode,ScreenObjectName,position);
    MyNode.ConstructXMLString(ScreenObjectName);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObjSVG = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXSVGContainer.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
  $impl.CreateInObSVGText = function (MyForm, NodeName) {
    var Result = null;
    var NewObj = null;
    NewObj = $mod.TXSVGText.$create("Create$1",["SVG",NodeName,"TXSVGText",true]);
    NewObj.FinishSVGInObCreate();
    Result = NewObj;
    return Result;
  };
  $impl.CreateWidgetSVGText = function (myNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    NewWidget = myNode;
    NewWidget.setXPos(NewWidget.getXPos());
    NewWidget.setYPos(NewWidget.getYPos());
    NewWidget.setTextString(NewWidget.getTextString());
    NewWidget.setHeight(NewWidget.getHeight());
    NewWidget.setFontFamily(NewWidget.getFontFamily());
    NewWidget.setFontWeight(NewWidget.getFontWeight());
    NewWidget.setFontStyle(NewWidget.getFontStyle());
    NewWidget.setRotate(NewWidget.getRotate());
    Result = NewWidget.SetupWidget(ParentNode,position);
    return Result;
  };
  $impl.ColorToStr = function (Clr) {
    var Result = "";
    Result = Clr;
    return Result;
  };
  $impl.FillColorToStr = function (Clr, Transparent) {
    var Result = "";
    if (Transparent) {
      Result = "none"}
     else Result = $impl.ColorToStr(Clr);
    return Result;
  };
  $impl.CreateInObSVGRect = function (MyForm, NodeName) {
    var Result = null;
    var NewObj = null;
    NewObj = $mod.TXSVGRect.$create("Create$1",["SVG",NodeName,"TXSVGRect",true]);
    NewObj.FinishSVGInObCreate();
    Result = NewObj;
    return Result;
  };
  $impl.CreateWidgetSVGRect = function (myNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    NewWidget = myNode;
    NewWidget.setXPos(NewWidget.getXPos());
    NewWidget.setYPos(NewWidget.getYPos());
    NewWidget.setWidth(NewWidget.getWidth());
    NewWidget.setHeight(NewWidget.getHeight());
    NewWidget.setStrokeWidth(NewWidget.getStrokeWidth());
    NewWidget.setStrokeColor(NewWidget.getStrokeColor());
    NewWidget.setFillColor(NewWidget.getFillColor());
    NewWidget.setFillTransparent(NewWidget.getFillTransparent());
    NewWidget.setRotate(NewWidget.getRotate());
    Result = NewWidget.SetupWidget(ParentNode,position);
    return Result;
  };
  $impl.CreateInObSVGRoundedRect = function (MyForm, NodeName) {
    var Result = null;
    var NewObj = null;
    NewObj = $mod.TXSVGRoundedRect.$create("Create$1",["SVG",NodeName,"TXSVGRoundedRect",true]);
    NewObj.FinishSVGInObCreate();
    Result = NewObj;
    return Result;
  };
  $impl.CreateWidgetSVGRoundedRect = function (myNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    NewWidget = myNode;
    NewWidget.setXPos(NewWidget.getXPos());
    NewWidget.setYPos(NewWidget.getYPos());
    NewWidget.setrx(NewWidget.getrx());
    NewWidget.setry(NewWidget.getry());
    NewWidget.setWidth(NewWidget.getWidth());
    NewWidget.setHeight(NewWidget.getHeight());
    NewWidget.setStrokeWidth(NewWidget.getStrokeWidth());
    NewWidget.setStrokeColor(NewWidget.getStrokeColor());
    NewWidget.setFillColor(NewWidget.getFillColor());
    NewWidget.setFillTransparent(NewWidget.getFillTransparent());
    NewWidget.setRotate(NewWidget.getRotate());
    Result = NewWidget.SetupWidget(ParentNode,position);
    return Result;
  };
  $impl.CreateInObSVGCircle = function (MyForm, NodeName) {
    var Result = null;
    var NewObj = null;
    NewObj = $mod.TXSVGCircle.$create("Create$1",["SVG",NodeName,"TXSVGCircle",true]);
    NewObj.FinishSVGInObCreate();
    Result = NewObj;
    return Result;
  };
  $impl.CreateWidgetSVGCircle = function (myNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    NewWidget = myNode;
    NewWidget.setXPos(NewWidget.getXPos());
    NewWidget.setYPos(NewWidget.getYPos());
    NewWidget.setRadius(NewWidget.getRadius());
    NewWidget.setStrokeWidth(NewWidget.getStrokeWidth());
    NewWidget.setStrokeColor(NewWidget.getStrokeColor());
    NewWidget.setFillColor(NewWidget.getFillColor());
    NewWidget.setFillTransparent(NewWidget.getFillTransparent());
    NewWidget.setRotate(NewWidget.getRotate());
    Result = NewWidget.SetupWidget(ParentNode,position);
    return Result;
  };
  $impl.CreateInObSVGEllipse = function (MyForm, NodeName) {
    var Result = null;
    var NewObj = null;
    NewObj = $mod.TXSVGEllipse.$create("Create$1",["SVG",NodeName,"TXSVGEllipse",true]);
    NewObj.FinishSVGInObCreate();
    Result = NewObj;
    return Result;
  };
  $impl.CreateWidgetSVGEllipse = function (myNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    NewWidget = myNode;
    NewWidget.setXPos(NewWidget.getXPos());
    NewWidget.setYPos(NewWidget.getYPos());
    NewWidget.setrx(NewWidget.getrx());
    NewWidget.setry(NewWidget.getry());
    NewWidget.setStrokeWidth(NewWidget.getStrokeWidth());
    NewWidget.setStrokeColor(NewWidget.getStrokeColor());
    NewWidget.setFillColor(NewWidget.getFillColor());
    NewWidget.setFillTransparent(NewWidget.getFillTransparent());
    NewWidget.setRotate(NewWidget.getRotate());
    Result = NewWidget.SetupWidget(ParentNode,position);
    return Result;
  };
  $impl.CreateInObSVGLine = function (MyForm, NodeName) {
    var Result = null;
    var NewObj = null;
    NewObj = $mod.TXSVGLine.$create("Create$1",["SVG",NodeName,"TXSVGLine",true]);
    NewObj.FinishSVGInObCreate();
    Result = NewObj;
    return Result;
  };
  $impl.CreateWidgetSVGLine = function (myNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    NewWidget = myNode;
    NewWidget.setX1(NewWidget.getX1());
    NewWidget.setY1(NewWidget.getY1());
    NewWidget.setX2(NewWidget.getX2());
    NewWidget.setY2(NewWidget.getY2());
    NewWidget.setStrokeWidth(NewWidget.getStrokeWidth());
    NewWidget.setStrokeColor(NewWidget.getStrokeColor());
    NewWidget.setRotate(NewWidget.getRotate());
    Result = NewWidget.SetupWidget(ParentNode,position);
    return Result;
  };
  $impl.GetArrayFromString = function (instring) {
    var Result = [];
    var stringlist = null;
    var numpoints = 0;
    var i = 0;
    var resultArray = [];
    stringlist = pas.StringUtils.stringsplit(instring,",");
    numpoints = stringlist.GetCount();
    resultArray = rtl.arraySetLength(resultArray,0,numpoints);
    for (var $l1 = 0, $end2 = numpoints - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      resultArray[i] = pas.SysUtils.StrToInt(pas.StringUtils.TrimWhiteSpace(stringlist.Get(i)));
    };
    Result = resultArray;
    return Result;
  };
  $impl.CreateInObSVGPolyLine = function (MyForm, NodeName) {
    var Result = null;
    var NewObj = null;
    NewObj = $mod.TXSVGPolyLine.$create("Create$1",["SVG",NodeName,"TXSVGPolyLine",true]);
    NewObj.FinishSVGInObCreate();
    Result = NewObj;
    return Result;
  };
  $impl.CreateWidgetSVGPolyLine = function (myNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    NewWidget = myNode;
    NewWidget.setXCoords(NewWidget.getXCoords());
    NewWidget.setYCoords(NewWidget.getYCoords());
    NewWidget.setStrokeWidth(NewWidget.getStrokeWidth());
    NewWidget.setStrokeColor(NewWidget.getStrokeColor());
    NewWidget.setFillColor(NewWidget.getFillColor());
    NewWidget.setFillTransparent(NewWidget.getFillTransparent());
    NewWidget.setRotate(NewWidget.getRotate());
    Result = NewWidget.SetupWidget(ParentNode,position);
    return Result;
  };
  $impl.CreateInObSVGPolyGon = function (MyForm, NodeName) {
    var Result = null;
    var NewObj = null;
    NewObj = $mod.TXSVGPolyGon.$create("Create$1",["SVG",NodeName,"TXSVGPolyGon",true]);
    NewObj.FinishSVGInObCreate();
    Result = NewObj;
    return Result;
  };
  $impl.CreateWidgetSVGPolyGon = function (myNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    NewWidget = myNode;
    NewWidget.setXCoords(NewWidget.getXCoords());
    NewWidget.setYCoords(NewWidget.getYCoords());
    NewWidget.setStrokeWidth(NewWidget.getStrokeWidth());
    NewWidget.setStrokeColor(NewWidget.getStrokeColor());
    NewWidget.setFillColor(NewWidget.getFillColor());
    NewWidget.setFillTransparent(NewWidget.getFillTransparent());
    NewWidget.setRotate(NewWidget.getRotate());
    Result = NewWidget.SetupWidget(ParentNode,position);
    return Result;
  };
});
rtl.module("HTMLUtils",["System","Classes","SysUtils","StringUtils","NodeUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.removeClassName = function (el, ClassName) {
    {
    
      var i, curList, newList;
    
      if (el.className == null)
        return;
    
      // Remove the given class name from the element's className property.
    
      newList = new Array();
      curList = el.className.split(" ");
      for (i = 0; i < curList.length; i++)
        if (curList[i] != ClassName)
          newList.push(curList[i]);
      el.className = newList.join(" ");
    };
  };
  this.StopBubbling = function (event) {
    if (pas.HTMLUtils.browser.isIE)
      window.event.cancelBubble = true;
    else
      event.stopPropagation();
  };
  this.addHandVBoxStyles = function () {
    var Result = "";
    var dummy = 0;
    dummy = 0;
    // ----------------------------------------check if the style has already been set
        var x = document.getElementsByTagName("STYLE");
        var StyleIsSet = false;
        if (x.length>0){
          for (var i=0; i<x.length; i++){
            var y= x[i].innerHTML;
            if (y.indexOf(".hbox") !=-1) { StyleIsSet =true}
          }
        }
       
        if (StyleIsSet == false){
            var HandVBoxStyleString = '<style>'
       //     +'div.outline: none !important; '
            +'.hbox { '
                +' display: -webkit-flex;'
                +' display: -ms-flexbox;'
                +' display: -flex;'
                +' -webkit-flex-direction: row;'
                +' -ms-flex-direction: row;'
                +' flex-direction: row;'
                +' -webkit-align-content: stretch;'
                +' -ms-flex-line-pack: stretch;'
                +' align-items: stretch;'
                +' }'
           +'.hboxNoStretch { '
                +' display: -webkit-flex;'
               +' display: -ms-flexbox;'
               +' display: -flex;'
               +' -webkit-flex-direction: row;'
               +' -ms-flex-direction: row;'
               +' flex-direction: row;'
               +' -webkit-align-content: flex-start;'
               +' -ms-flex-line-pack: start;'
               +' align-items: flex-start;'
               +' }'
    
          +'.vbox { '
                 +' display: -webkit-flex;'
                 +' display: -ms-flexbox;'
                 +' display: flex;'
                  +' -webkit-flex-direction: column;'
                  +' -ms-flex-direction: column;'
                  +' flex-direction: column;'
                  +' -webkit-align-content: stretch;'
                  +' -ms-flex-line-pack: stretch;'
                  +' align-items: stretch;'
                  +' }'
                +'.vboxNoStretch { '
                  +' display: -webkit-flex;'
                  +' display: -ms-flexbox;'
                  +' display: flex;'
                   +' -webkit-flex-direction: column;'
                   +' -ms-flex-direction: column;'
                   +' flex-direction: column;'
                   +' -webkit-align-content: flex-start;'
                   +' -ms-flex-line-pack: start;'
                   +' align-items: flex-start;'
                   +' }'
               +'.vboxNoFlex { '
                   +' display: inline-block;'
                   +' -webkit-flex-direction: column;'
                   +' -ms-flex-direction: column;'
                   +' flex-direction: column;'
                   +' -webkit-align-content: flex-start;'
                   +' -ms-flex-line-pack: start;'
                   +' align-items: flex-start;'
                   +' }'
    
    
            +'.AlignmentCentre {display: flex;'
               +'align-items: center;'
               +'align-self: center;'
               +'flex-shrink: 0; '
               +'justify-content: start;}'             //center?
            +'.AlignmentRight {display:flex;'
             +'align-items: flex-e'+'nd;'
              +'align-self: flex-e'+'nd;'
              +'flex-shrink: 0; '
              +'justify-content: flex-e'+'nd;'
              +'float:right;'
              +'}'
            +'.AlignmentLeft {display:flex;'
              +'align-items: flex-start;'
              +'align-self: flex-start;'
              +'flex-shrink: 0; '
              +'justify-content: flex-start;}'
            +'.AlignmentLeftContainer {display:flex;'
              +'align-items: flex-start;'
              +'align-self: stretch;'
              +'flex-shrink: 0; '
                +'justify-content: flex-start;}'
            +'.AlignmentTop {display:flex;'
            +'align-items: flex-start;'
            +'align-self: flex-start;'
              +'justify-content: flex-start;}'
            +'.AlignmentBottom {display:flex;'
              +'align-items: flex-e'+'nd;'
              +'align-self: flex-e'+'nd;'
              +'justify-content: flex-e'+'nd;}'
    
            +'  input {'
                    +' line-height: 20px;'
                 +'}'
    
    
               +' </style>';
    
          //----------------------------- now append the style declarations to the head of the HTML page
          document.head.innerHTML = document.head.innerHTML+HandVBoxStyleString;
         };
    return Result;
  };
  this.getAncestorWithTagAndClass = function (node, tagName, className) {
    var Result = null;
    {
    
      // Starting with the given node, find the nearest containing element
      // with the specified tag name and style class.
    
      while (node != null) {
        if (node.tagName != null && node.tagName == tagName &&
            pas.HTMLUtils.hasClassName(node, className))
          return node;
        node = node.parentNode;
      }
    
      return node;
    };
    return Result;
  };
  this.getPageOffsetLeft = function (el) {
    var Result = 0;
    var x = 0;
    {
    function getOffset(el) {
      const rect = el.getBoundingClientRect();
      return {
        left: rect.left + window.scrollX,
        top: rect.top + window.scrollY
      };
    }
      // Return the x coordinate of an element relative to the page.
    
    //  x = el.offsetLeft;
    //  if (el.offsetParent != null) {
    //    x += pas.HTMLUtils.getPageOffsetLeft(el.offsetParent);
    //    }
    x=getOffset(el).left;
    };
    Result = x;
    return Result;
  };
  this.getPageOffsetTop = function (el) {
    var Result = 0;
    var y = 0;
    {
      // Return the y coordinate of an element relative to the page.
    
      y = el.offsetTop;
      if (el.offsetParent != null)
        y += pas.HTMLUtils.getPageOffsetTop(el.offsetParent);
    };
    Result = y;
    return Result;
  };
  this.hasClassName = function (el, name) {
    var Result = false;
    {
    
      var i, list;
    
      // Return true if the given element currently has the given class
      // name.
    
      list = el.className.split(" ");
      for (i = 0; i < list.length; i++)
        if (list[i] == name)
          return true;
    
      return false;
    };
    return Result;
  };
  this.PrepareHeightWidthHTML = function (HW, StrVal, StyleVal) {
    var Result = false;
    var hw1 = "";
    var pct = false;
    pct = false;
    if (pas.StringUtils.FoundString(StrVal.get(),"%") > 0) pct = true;
    if ((pas.StringUtils.FoundString(StrVal.get(),"px") > 0) || (pct === true)) {
      hw1 = StrVal.get()}
     else if (StrVal.get() !== "") {
      hw1 = StrVal.get() + "px"}
     else hw1 = "";
    StrVal.set(hw1);
    if (HW.get() === "H") {
      StyleVal.set(("height:" + hw1) + ";");
      if (pas.StringUtils.FoundString(hw1,"px") > 0) StyleVal.set(((StyleVal.get() + "max-height:") + hw1) + ";");
    };
    if (HW.get() === "W") {
      StyleVal.set(("width:" + hw1) + ";");
      if (pas.StringUtils.FoundString(hw1,"px") > 0) StyleVal.set(((StyleVal.get() + "max-width:") + hw1) + ";");
    };
    Result = pct;
    return Result;
  };
  this.SetHeightWidthHTML = function (MyNode, ob, HW, AttrValue) {
    var hwStr = "";
    var StyleHW0 = "";
    var pct = false;
    pct = $mod.PrepareHeightWidthHTML({get: function () {
        return HW;
      }, set: function (v) {
        HW = v;
      }},{get: function () {
        return AttrValue;
      }, set: function (v) {
        AttrValue = v;
      }},{get: function () {
        return StyleHW0;
      }, set: function (v) {
        StyleHW0 = v;
      }});
    hwStr = AttrValue;
    if (ob!=null) {
      if (HW=='H') {
        ob.style.height=hwStr;
        if (pct==false) {
          ob.style.minHeight=hwStr;
          ob.style.maxHeight=hwStr;
        }
        else
        {
        ob.style.minHeight='';
        ob.style.maxHeight='';
        }
      }
      else {
        ob.style.width=hwStr;
        if (pct==false) {
          ob.style.minWidth=hwStr;
          ob.style.maxWidth=hwStr;
        }
        else
        {
          ob.style.minWidth='';
          ob.style.maxWidth='';
       }
      }
    };
  };
  this.DeleteScreenObject = function (MyNode) {
    var Result = "";
    var ObjName = "";
    ObjName = MyNode.NodeName;
    try{
    var ThisObject = document.getElementById(ObjName);
    if (ThisObject!=null) {
       ThisObject.parentNode.removeChild(ThisObject);
      }
    }catch(err) { alert(err.message+' in HTMLUtils.DeleteScreenObject');};
    pas.NodeUtils.NilScreenObject(MyNode);
    return Result;
  };
  this.CreateWrapperHtml = function (NewNode, ParentNode, ClassName, ScreenObjectName, ScreenObjectType) {
    var Result = "";
    var Border = "";
    Border = NewNode.GetAttribute("Border",true).AttribValue;
    try{
    
        // note tabindex=0 allows a div to be focused.  Only the focused element will listen to keyboard events.
    
        var ClassString =' class="';
        if (Border=='True') {ClassString = ClassString+' normal-border '+ClassName;}
        else  {ClassString = ClassString+' no-border '+ClassName;}
    
        ClassString= ClassString + '" ';
    
        var ComponentHTML='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var componentClick="'Click'";
    
        var WrapperStyle = ' background-color:inherit; white-space:nowrap; ';
    
        var FullHTMLString='<div '+ClassString+' style="'+WrapperStyle+'" tabindex="0" id='+ScreenObjectName+
                    ' onclick="event.stopPropagation(); pas.Events.handleEvent(null,'+componentClick+','+NodeIDString+', this.value);" '+
                       ' </div> ';
    
      }catch(err) { alert(err.message+'  in HTMLUtils.CreateWrapperHtml');}
    
      return FullHTMLString;
    return Result;
  };
  this.CreateWrapperDiv = function (MyNode, ParentNode, NodeClass, ScreenObjectName, ScreenObjectType, position) {
    var Result = null;
    var bdr = "";
    var ShowBorder = false;
    bdr = MyNode.GetAttribute("Border",true).AttribValue;
    if (bdr !== "") {
      ShowBorder = pas.StringUtils.MyStrToBool(bdr)}
     else ShowBorder = false;
    try {
           var MyParent = pas.HTMLUtils.ScreenObjectInnerComponent(ParentNode);
     //      alert('adding '+MyNode.NodeName+' to '+MyParent.id);
           var HTMLImplementation = pas.HTMLUtils.CreateWrapperHtml(MyNode,ParentNode,'',ScreenObjectName,ScreenObjectType);
           pas.HTMLUtils.AddObjectToParentObject(ParentNode,MyParent.id,ScreenObjectName,position,HTMLImplementation);
           var wrapper=document.getElementById(ScreenObjectName);
           if ((wrapper.style.overflow!='scroll') && (ScreenObjectType!='TXMainMenu')  && (ScreenObjectType!='TXMenuItem'))
           {
              wrapper.style.overflow = 'hidden';
           }
           if (ShowBorder==true) {
              wrapper.classList.add("normal-border");
           }
    
           return wrapper;
    
       } catch(err) { alert(err.message+'  in HTMLUtils.CreateWrapperDiv');};
    return Result;
  };
  this.AddObjectToParentObject = function (ParentNode, ParentId, myId, position, HTMLString) {
    var pos = 0;
    var mysib = null;
    pos = position;
    if (pos > 0) {
      if (rtl.length(ParentNode.ChildNodes) > (pos + 1)) {
        mysib = ParentNode.ChildNodes[pos + 1];
        if (mysib.ScreenObject === null) {
          pos = -1;
        };
      } else {
        if (pos > (rtl.length(ParentNode.ChildNodes) - 1)) pas.StringUtils.ShowMessage(((("cannot insert under " + ParentNode.NodeName) + " at position ") + pas.SysUtils.IntToStr(pos)) + ". reverted to end");
        pos = -1;
      };
    };
    try {
     var myParent=document.getElementById(ParentId);
       // Insert the new container under the given parent, at the correct sibling position
       if (pos==-1)  {
       myParent.insertAdjacentHTML('beforeend', HTMLString);
       }
       else if ( pos==0) {
       myParent.insertAdjacentHTML('afterbegin', HTMLString);
       }
       else {
         var mySibling=document.getElementById(mysib.NodeName);
         if (mySibling!=null) {
           mySibling.insertAdjacentHTML('beforebegin', HTMLString);
         }
         else {
           // insert msg here.... (1)
           var str=sibname;
           alert(str);
           myParent.insertAdjacentHTML('beforeend', HTMLString);
         }
         }
    } catch(err) { alert(err.message+'  in HTMLUtils.AddObjectToParentObject');};
  };
  this.ScreenObjectInnerComponent = function (SystemNode) {
    var Result = null;
    var innername = "";
    innername = SystemNode.NodeName + "Contents";
    Result=document.getElementById(innername);
    if (Result === null) Result=document.getElementById(SystemNode.NodeName);
    if (Result === null) pas.StringUtils.ShowMessage(("object " + SystemNode.NodeName) + " not found in HTMLUtils.ScreenObjectInnerComponent");
    return Result;
  };
  this.UnHighlight = function (ObjID, HadBorder) {
    try{
         // alert('unhighlight '+ObjID);
          var ob=document.getElementById(ObjID)
          if (ob!=null) {
            ob.classList.remove("highlight-border");
    
            if (HadBorder=='True') {
               ob.classList.add("normal-border");
               }
          }
          }catch(err) { alert(ObjID+': '+err.message+'  in HTMLUtils.UnHighlight'); };
  };
  this.Highlight = function (ObjID) {
    try{
    //alert('Highlight '+ObjID);
    var ob=document.getElementById(ObjID);
    if (ob!=null) {
      ob.classList.remove("normal-border");
      ob.classList.remove("no-border");
      ob.classList.add("highlight-border");
    }
    }catch(err) { alert(err.message+'  in HTMLUtils.Highlight'); };
  };
  this.ShowHideSelectedBorder = function (myNode, showborder) {
    var HadBorder = false;
    if (myNode.GetAttribute("Border",true).AttribValue !== "") {
      HadBorder = pas.StringUtils.MyStrToBool(myNode.GetAttribute("Border",true).AttribValue)}
     else HadBorder = false;
    var ob = document.getElementById(this.NodeName);
    if (ob!=null) {
    if (showborder==true) {
       pas.HTMLUtils.Highlight(ob.id);
    }
    else {
       pas.HTMLUtils.UnHighlight(ob.id, HadBorder);
    }      };
    if (myNode.NodeType === "TXSVGContainer") {
      myNode.SetXMLString(myNode.GetXMLString());
    };
  };
  this.GetDataNodeFromTreeNode = function (nodeID) {
    var Result = null;
    var bits = null;
    bits = pas.StringUtils.stringsplit(nodeID,"Contents");
    Result = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,bits.Get(0),true);
    return Result;
  };
  this.getParentByTagName = function (topname, node, tagname) {
    var Result = null;
    var foundOb = null;
    {
          foundOb=null;
          var parent;
          if (node == null || tagname == '') {foundOb=null}
          else
          {
            parent  = node.parentNode;
            tagname = tagname.toUpperCase();
            //alert('looking for tagname '+tagname);
    
            while ((parent.id != topname+'Contents')&&(foundOb==null)) {
              //alert('parent.id='+parent.id + 'tagname='+parent.tagName);
          if (parent.tagName == tagname) {
              foundOb = parent;
          }
              else {
            parent = parent.parentNode;
              }
            }
    
            foundOb = parent;
          }
      };
    Result = foundOb;
    return Result;
  };
  this.ContainsChildWithTag = function (node, tagname) {
    var Result = false;
    var found = false;
    found = false;
    if (node == null || tagname == '') {found=false}
      else
      {
        tagname = tagname.toUpperCase();
    
        for (var i=0; i<node.children.length; i++) {
          if (node.children[i].tagName==tagname) {found=true;}
        }
      };
    Result = found;
    return Result;
  };
  this.WriteToLocalStore = function (KeyName, TheData) {
    if (KeyName !== "") {
      try{
      localStorage.setItem(KeyName,TheData);
      }catch(err) { alert(err.message+'  in HTMLUtils.WriteToLocalStore'); };
    };
  };
  this.ReadFromLocalStore = function (KeyName) {
    var Result = "";
    var TheData = "";
    TheData = "";
    if (KeyName !== "") {
      try{
      TheData=localStorage.getItem(KeyName);
      if (TheData==null) {TheData='';}
      }catch(err) { alert(err.message+'  in HTMLUtils.ReadFromLocalStore'); };
    };
    Result = TheData;
    return Result;
  };
  this.ClearLocalStore = function (KeyName) {
    if (KeyName !== "") {
      try{
      localStorage.removeItem(KeyName);
      }catch(err) { alert(err.message+'  in HTMLUtils.ClearLocalStore'); };
    };
  };
  this.GetCurrentHeight = function (ObjectName) {
    var Result = 0;
    var h = 0;
    h = 0;
    var ob = document.getElementById(ObjectName);
      if (ob!=null) {
        var style = window.getComputedStyle(ob);
        var hh = style.height;
        h = parseInt(hh, 10);
    //     alert('calculated height='+h);
        };
    Result = h;
    return Result;
  };
  this.GetCurrentWidth = function (ObjectName) {
    var Result = 0;
    var w = 0;
    w = 0;
    var ob = document.getElementById(ObjectName);
      if (ob!=null) {
        var style = window.getComputedStyle(ob);
        var ww = style.width;
        w = parseInt(ww, 10);
    //      alert('calculated Width='+w);
        };
    Result = w;
    return Result;
  };
  this.ShowGreyOverlay = function (ParentName, WindowId) {
    try{
    //alert('ShowGreyOverlay '+WindowId);
      pas.XForm.InitialiseXFormStyles();
      var HTMLString = ''
      +'<div id='+WindowId+' class="modal-background" style="display:block; cursor:progress;" '
      +'>Please wait...</div>';
    
      var ParentItem=document.getElementById(ParentName);
      ParentItem.insertAdjacentHTML('beforeend', HTMLString);
    
    }catch(err) {alert('Error in HTMLUtils.ShowGreyOverlay '+ err.message);};
  };
  this.DeleteGreyOverlay = function (DivId) {
    var ob = document.getElementById(DivId);
    if (ob!=null) {
      ob.parentNode.removeChild(ob);
      };
  };
  this.glbBorderWidth = 3;
  this.glbLabelSpacing = 3;
  this.glbMarginSpacing = "3px";
  this.browser = null;
  $mod.$init = function () {
    $impl.IdentifyBrowser();
  };
},["XSVGContainer"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.IdentifyBrowser = function () {
    function Browser()
    {
    
      var ua, s, i;
    
      this.isIE    = false;  // Internet Explorer
      this.isOP    = false;  // Opera
      this.isNS    = false;  // Netscape
      this.version = null;
    
      ua = navigator.userAgent;
    
      s = "Opera";
      if ((i = ua.indexOf(s)) >= 0) {
        this.isOP = true;
        this.version = parseFloat(ua.substr(i + s.length));
        return;
      }
    
      s = "Netscape6/";
      if ((i = ua.indexOf(s)) >= 0) {
        this.isNS = true;
        this.version = parseFloat(ua.substr(i + s.length));
        return;
      }
    
      // Treat any other "Gecko" browser as Netscape 6.1.
    
      s = "Gecko";
      if ((i = ua.indexOf(s)) >= 0) {
        this.isNS = true;
        this.version = 6.1;
        return;
      }
    
      s = "MSIE";
      if ((i = ua.indexOf(s))) {
        this.isIE = true;
        this.version = parseFloat(ua.substr(i + s.length));
        return;
      }
    }
    //alert('IdentifyBrowser');
    pas.HTMLUtils.browser = new Browser();
    //alert('IdentifyBrowser done.  isIE='+pas.HTMLUtils.browser.isIE);
  };
});
rtl.module("XMenu",["System","Classes","SysUtils","NodeUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.addMenuBarStyles = function () {
    // ----------------------------------------check if the styles have already been set
    var x = document.getElementsByTagName("STYLE");
    var StyleIsSet = false;
    if (x.length>0){
      for (var i=0; i<x.length; i++){
        var y= x[i].innerHTML;
        if (y.indexOf("menuBar") !=-1) { StyleIsSet =true}
      }
    }
    
    if (StyleIsSet==false) {
    //First, the bar. A DIV tag is used with a style class defined to set the appearance.
    
    var StyleText='<style>';
    
    StyleText=StyleText + 'div.menuBar {';
    StyleText=StyleText + 'font-family: "MS Sans Serif", Arial, sans-serif;';
    StyleText=StyleText + 'font-size: 8pt;';
    StyleText=StyleText + 'font-style: normal;';
    StyleText=StyleText + 'font-weight: normal;';
    StyleText=StyleText + 'color: #000000;';
    StyleText=StyleText + '}';
    
    StyleText=StyleText + 'div.menuBar {';
    StyleText=StyleText + '  background-color: #d0d0d0;';
    StyleText=StyleText + '  border: 2px solid;';
    StyleText=StyleText + '  border-color: #f0f0f0 #909090 #909090 #f0f0f0;';
    StyleText=StyleText + '  padding: 4px 2px 4px 2px;';
    StyleText=StyleText + '  text-align: left;';
    StyleText=StyleText + '}';
    
    
    //For the buttons, normal hypertext links (A tags) are used. This way, both a style class and a hover: pseudo-class can be defined to
    //set the default and mouseover appearance. The style sheet is updated as follows.
    
    StyleText=StyleText + 'div.menuBar,';
    StyleText=StyleText + 'div.menuBar a.menuButton {';
    StyleText=StyleText + '  font-family: "MS Sans Serif", Arial, sans-serif;';
    StyleText=StyleText + '  font-size: 8pt;';
    StyleText=StyleText + '  font-style: normal;';
    StyleText=StyleText + '  font-weight: normal;';
    StyleText=StyleText + '  color: #000000;';
    StyleText=StyleText + '}';
    
    StyleText=StyleText + 'div.menuBar {';
    StyleText=StyleText + '  background-color: #d0d0d0;';
    StyleText=StyleText + '  border: 2px solid;';
    StyleText=StyleText + '  border-color: #f0f0f0 #909090 #909090 #f0f0f0;';
    StyleText=StyleText + '  padding: 4px 2px 4px 2px;';
    StyleText=StyleText + '  text-align: left;';
    StyleText=StyleText + '}';
    
    StyleText=StyleText + 'div.menuBar a.menuButton {';
    StyleText=StyleText + '  background-color: transparent; ';
    StyleText=StyleText + '  border: 1px solid #d0d0d0;';
    StyleText=StyleText + '  color: #000000;';
    StyleText=StyleText + '  cursor: default;';
    StyleText=StyleText + '  left: 0px;';
    StyleText=StyleText + '  margin: 1px;';
    StyleText=StyleText + '  padding: 2px 6px 2px 6px;';
    StyleText=StyleText + '  position: relative;';
    StyleText=StyleText + '  text-decoration: none;';
    StyleText=StyleText + '  top: 0px;';
    StyleText=StyleText + '  z-index: 100;';
    StyleText=StyleText + '}';
    
    StyleText=StyleText + 'div.menuBar a.menuButton:hover {';
    StyleText=StyleText + '  background-color: transparent;';
    StyleText=StyleText + '  border-color: #f0f0f0 #909090 #909090 #f0f0f0;';
    StyleText=StyleText + '  color: #000000;';
    StyleText=StyleText + '}';
    //First, note that the button's border color on the normal class matches that of the bar background, so it will
    //remain invisible until moused over. Also, the cursor:default setting to used prevent the normal link cursor from
    //displaying when the buttons are moused over. This makes it look more like a menu bar found on a typical application window.
    //The reason for using relative positioning will be seen later.
    //
    
    
    //When a button is clicked on, we want to change its appearance, making it look depressed. This is done by defining another style class.
    
    StyleText=StyleText + 'div.menuBar a.menuButtonActive,';
    StyleText=StyleText + 'div.menuBar a.menuButtonActive:hover {';
    StyleText=StyleText + '  background-color: #a0a0a0;';
    StyleText=StyleText + '  border-color: #909090 #f0f0f0 #f0f0f0 #909090;';
    StyleText=StyleText + '  color: #ffffff;';
    StyleText=StyleText + '  left: 1px;';
    StyleText=StyleText + '  top: 1px;';
    StyleText=StyleText + '}';
    
    
    //A similar approach is used for the drop down menus. Each menu will consist of a DIV tag which acts as a
    //container for several item links and possibly some separator bars. As before, style classes as set up for each component of the menu.
    
    
    StyleText=StyleText + 'div.menuBar,';
    StyleText=StyleText + 'div.menuBar a.menuButton,';
    StyleText=StyleText + 'div.menu,';
    StyleText=StyleText + 'div.menu a.menuItem {';
    StyleText=StyleText + '  font-family: "MS Sans Serif", Arial, sans-serif;';
    StyleText=StyleText + '  font-size: 8pt;';
    StyleText=StyleText + '  font-style: normal;';
    StyleText=StyleText + '  font-weight: normal;';
    StyleText=StyleText + '  color: #000000;';
    StyleText=StyleText + '}';
    
    
    StyleText=StyleText + 'div.menu {';
    StyleText=StyleText + '  background-color: #d0d0d0;';
    StyleText=StyleText + '  border: 2px solid;';
    StyleText=StyleText + '  border-color: #f0f0f0 #909090 #909090 #f0f0f0;';
    StyleText=StyleText + '  left: 0px;';
    StyleText=StyleText + '  padding: 0px 1px 1px 0px;';
    StyleText=StyleText + '  position: absolute;';
    StyleText=StyleText + '  top: 0px;';
    StyleText=StyleText + '  visibility: hidden;';
    StyleText=StyleText + '  z-index: 101;';
    StyleText=StyleText + '}';
    
    StyleText=StyleText + 'div.menu a.menuItem {';
    StyleText=StyleText + '  color: #000000;';
    StyleText=StyleText + '  cursor: default;';
    StyleText=StyleText + '  display: block;';
    StyleText=StyleText + '  padding: 3px 1em;';
    StyleText=StyleText + '  text-decoration: none;';
    StyleText=StyleText + '  white-space: nowrap;';
    StyleText=StyleText + '}';
    
    StyleText=StyleText + 'div.menu a.menuItem:hover, div.menu a.menuItemHighlight {';
    StyleText=StyleText + '  background-color: #000080;';
    StyleText=StyleText + '  color: #ffffff;';
    StyleText=StyleText + '}';
    
    StyleText=StyleText + 'div.menu div.menuItemSep {';
    StyleText=StyleText + '  border-top: 1px solid #909090;';
    StyleText=StyleText + '  border-bottom: 1px solid #f0f0f0;';
    StyleText=StyleText + '  margin: 4px 2px;';
    StyleText=StyleText + '}';
    
    StyleText=StyleText + 'div.menu a.menuItem span.menuItemText {}';
    
    StyleText=StyleText + 'div.menu a.menuItem span.menuItemArrow {';
    StyleText=StyleText + '  margin-right: -.75em;';
    StyleText=StyleText + '}';
    
    
    StyleText=StyleText + '</style>';
    
    //alert(StyleText);
    document.head.innerHTML = document.head.innerHTML+StyleText;
    
    }
    //else {alert('style found already');};
  };
  this.menuBoxInit = function (menu) {
    {
    
      var itemList, spanList;
      var textEl, arrowEl;
      var itemWidth;
      var w, dw;
      var i, j;
    
    
      // For IE, replace arrow characters.
    
      if (pas.HTMLUtils.browser.isIE) {
        menu.style.lineHeight = "2.5ex";
        spanList = menu.getElementsByTagName("SPAN");
        for (i = 0; i < spanList.length; i++)
          if (pas.HTMLUtils.hasClassName(spanList[i], "menuItemArrow")) {
            spanList[i].style.fontFamily = "Webdings";
            spanList[i].firstChild.nodeValue = "4";
          }
      }
      // Find the width of a menu item.
    
      itemList = menu.getElementsByTagName("A");
      if (itemList.length > 0)
        itemWidth = itemList[0].offsetWidth;
      else
        return;
    
          // For items with arrows, add padding to item text to make the
    // arrows flush right.
    
    for (i = 0; i < itemList.length; i++) {
      spanList = itemList[i].getElementsByTagName("SPAN");
      textEl  = null;
      arrowEl = null;
      for (j = 0; j < spanList.length; j++) {
        if (pas.HTMLUtils.hasClassName(spanList[j], "menuItemText"))
          textEl = spanList[j];
        if (pas.HTMLUtils.hasClassName(spanList[j], "menuItemArrow"))
          arrowEl = spanList[j];
      }
      if (textEl != null && arrowEl != null) {
        textEl.style.paddingRight = (itemWidth
          - (textEl.offsetWidth + arrowEl.offsetWidth)) + "px";
        // For Opera, remove the negative right margin to fix a display bug.
        if (pas.HTMLUtils.browser.isOP)
          arrowEl.style.marginRight = "0px";
      }
    }
    
      // Fix IE hover problem by setting an explicit width on first item of
    // the menu.
    
    if (pas.HTMLUtils.browser.isIE) {
      w = itemList[0].offsetWidth;
      itemList[0].style.width = w + "px";
      dw = itemList[0].offsetWidth - w;
      w -= dw;
      itemList[0].style.width = w + "px";
    }
    
    };
  };
  this.resetButton = function (button) {
    {
      //alert('resetButton '+button.id);
    
      // Restore the button's style class.
    
      pas.HTMLUtils.removeClassName(button, "menuButtonActive");
    
      // Hide the button's menu, first closing any sub menus.
    
      if (button.menu != null) {
        //alert('closing button menu '+ button.menu.id);
        pas.XMenu.closeSubMenu(button.menu.id);
        //alert('set hidden '+ button.menu.id);
        button.menu.style.visibility = "hidden";
      }
    };
  };
  this.closeSubMenu = function (menuName) {
    try{
      var menu=document.getElementById(menuName);
      if ((menu == null) || (menu==undefined) || (menu.activeItem == null)) {
        return;
        }
      //alert('closeSubMenu '+menuName);
    
      // Recursively close any sub menus.
    
      if (menu.activeItem.subMenu != null) {
        //alert('menu.activeItem.subMenu is '+menu.activeItem.subMenu.id);
        pas.XMenu.closeSubMenu(menu.activeItem.subMenu.id);
        //alert('hiding submenu '+menu.activeItem.subMenu.id);
        menu.activeItem.subMenu.style.visibility = "hidden";
        menu.activeItem.subMenu = null;
      }
      //alert(menuName+' removeClassName menuItemHighlight');
      pas.HTMLUtils.removeClassName(menu.activeItem, "menuItemHighlight");
      //alert('menu '+menu.id+' clear activeitem ');
      menu.activeItem = null;
    
      //alert(menuName+' closeSubMenu done');
      } catch(err) { alert(err.message+'  in XMenu.closeSubMenu'); };
  };
  this.CloseAnyDropdown = function (menuName) {
    var mainmenunode = null;
    var mainmenu = null;
    mainmenunode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,menuName,true);
    mainmenu = mainmenunode.ScreenObject;
    {
    //alert('menuBarClick '+menuName);
      // Close any active sub menu.
    
      if (mainmenu.ActiveButton != null) {
          pas.XMenu.resetButton(mainmenu.ActiveButton);
          }
    };
  };
  this.menuButtonClick = function (buttonName) {
    var mainmenu = null;
    var ButtonNode = null;
    var parentNode = null;
    var submenuname = "";
    mainmenu = $impl.IdentifyMainMenu(buttonName);
    $mod.CloseAnyDropdown(mainmenu.NodeName);
    ButtonNode = pas.NodeUtils.FindDataNodeById(mainmenu,buttonName,true);
    parentNode = pas.NodeUtils.FindParentOfNode$1(mainmenu,ButtonNode);
    submenuname = buttonName + "Box";
    {
       function depressButton(button) {
    
      var x, y;
    
      // Update the button's style class to make it look like it's
      // depressed.
    
      //alert('setting menuButtonActive on '+button.id);
      button.className += " menuButtonActive";
    
      // Position the associated drop down menu under the button and
      // show it.
      if (button.menu!=null) {
        x = pas.HTMLUtils.getPageOffsetLeft(button);
        y = pas.HTMLUtils.getPageOffsetTop(button) + button.offsetHeight;
    
       // alert('depressButton  x='+x+' y='+y+' menu is '+button.menu.id);
    
       //alert('showing button menu '+button.menu.id);
        button.menu.style.left = x + "px";
        button.menu.style.top  = y + "px";
        button.menu.style.visibility = "visible";
      }
    }
    
    
    
    
    // Get the target button element.
     // alert('menuButtonClick '+buttonName+' submenuname='+submenuname);
    
      var button = document.getElementById(buttonName);
    
      // Blur focus from the link to remove that annoying outline.
    
      button.blur();
    
      // Associate the named sub-menu to this button if not already done.
      // Additionally, initialize menu display.
    
      if (button.menu == null) {
        button.menu = document.getElementById(submenuname);
        if (button.menu!=null)
        {
        if ((!(button.menu.hasAttribute("isInitialized")))
         ||(button.menu.isInitialized == null))  {
          pas.XMenu.menuBoxInit(button.menu);
          button.menu.isInitialized = true;
          }
         }
      }
    
      // Activate this button, unless it was the currently active one.
    
      if (button != mainmenu.ActiveButton) {
        depressButton(button);
        mainmenu.ActiveButton = button;
      }
      else {
        mainmenu.ActiveButton = null;
        }
    };
  };
  this.menuBarClick = function (menuName) {
    $mod.CloseAnyDropdown(menuName);
  };
  this.buttonMouseover = function (buttonName) {
    var mainmenu = null;
    mainmenu = $impl.IdentifyMainMenu(buttonName);
    {
    
         var button = document.getElementById(buttonName);
    
        // If any other button menu is active, make this one active instead.
    
        if (mainmenu.ActiveButton != null && mainmenu.ActiveButton != button)
        {
          pas.XMenu.menuButtonClick(buttonName);
          }
      };
  };
  this.menuItemMouseover = function (itemName) {
    var parentmenu = null;
    var localName = "";
    var parentName = "";
    parentmenu = $impl.IdentifyParentMenu(itemName);
    parentName = parentmenu.NodeName + "Box";
    localName = itemName;
    {
      var   x, y;
      // Find the target item element and its parent menu element.
      var menu = document.getElementById(parentName);    // the box we are in
      var item = document.getElementById(localName);     // the item under the mouse
    
      // Close any active sub menu and mark this one as active.
      //alert('menu '+menu.id+' set activeitem '+item.id);
      if (menu.activeItem != null) {
        //alert('close submenu '+menu.id);
        pas.XMenu.closeSubMenu(menu.id);
        }
      menu.activeItem = item;
    
      // Highlight the item element.
      item.className += " menuItemHighlight";
    
      // Initialize the item's submenu, if not already done.
      if (item.subMenu == null) {
        item.subMenu = document.getElementById(localName+'Box');          //????
        //item.subMenu = document.getElementById(localName);          //????
        if (item.subMenu!=null)
        {
        if ((!(item.subMenu.hasAttribute("isInitialized")))
         ||(item.subMenu.isInitialized == null))  {
          //alert('initialising submenu '+localName);
          pas.XMenu.menuBoxInit(item.subMenu);
          item.subMenu.isInitialized = true;
         }
         }
      }
    
      if (item.subMenu!=null)
      {
      // Get position for submenu based on the menu item.
      x = pas.HTMLUtils.getPageOffsetLeft(item);
      //+ item.offsetWidth;                           //!!!! still not right.... tbd
      y = pas.HTMLUtils.getPageOffsetTop(item);
    
      //alert('initial x='+x+' y='+y);
    
      // Adjust position to fit in view.
      var maxX, maxY;
    
      if (pas.HTMLUtils.browser.isIE) {
        maxX =
          (document.documentElement.scrollLeft   != 0 ?
             document.documentElement.scrollLeft
           : document.body.scrollLeft)
        + (document.documentElement.clientWidth  != 0 ?
           document.documentElement.clientWidth
           : document.body.clientWidth);
        maxY =
          (document.documentElement.scrollTop    != 0 ?
           document.documentElement.scrollTop
           : document.body.scrollTop)
        + (document.documentElement.clientHeight != 0 ?
           document.documentElement.clientHeight
           : document.body.clientHeight);
      }
      if (pas.HTMLUtils.browser.isOP) {
        maxX = document.documentElement.scrollLeft + window.innerWidth;
        maxY = document.documentElement.scrollTop  + window.innerHeight;
      }
      if (pas.HTMLUtils.browser.isNS) {
        maxX = window.scrollX + window.innerWidth;
        maxY = window.scrollY + window.innerHeight;
      }
      maxX -= item.subMenu.offsetWidth;
      maxY -= item.subMenu.offsetHeight;
    
      if (x > maxX)
        x = Math.max(0, x - item.offsetWidth - item.subMenu.offsetWidth
          + (menu.offsetWidth - item.offsetWidth));
      y = Math.max(0, Math.min(y, maxY));
    
      //alert('final x='+x+' y='+y);
    
      // Position and show it.
      //alert('showing submenu '+item.subMenu.id);
      item.subMenu.style.left = x + "px";
      item.subMenu.style.top  = y + "px";
      item.subMenu.style.visibility = "visible";
      }
    };
  };
  rtl.createClass($mod,"TXMainMenu",pas.WrapperPanel.TWrapperPanel,function () {
    this.$init = function () {
      pas.WrapperPanel.TWrapperPanel.$init.call(this);
      this.fActiveButton = null;
    };
    this.$final = function () {
      this.fActiveButton = undefined;
      pas.WrapperPanel.TWrapperPanel.$final.call(this);
    };
    this.SetMyEventTypes = function () {
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = true;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.MenuDefaultAttribs);
    };
  });
  rtl.createClass($mod,"TXMenuItem",pas.WrapperPanel.TWrapperPanel,function () {
    this.GetCaption = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Caption",true).AttribValue;
      return Result;
    };
    this.SetCaption = function (AValue) {
      this.myNode.SetAttributeValue$2("Caption",AValue);
      var ob=document.getElementById(this.myNode.NodeName);
      if (ob!=null) {
        ob.innerHTML=AValue;
      };
    };
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = "TXMenuItem";
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = true;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.ItemDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("Caption",3,rtl.string,"GetCaption","SetCaption");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.MenuDefaultAttribs;
      }, set: function (v) {
        this.p.MenuDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultsToTable("TXMainMenu",$impl.MenuDefaultAttribs);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ItemDefaultAttribs;
      }, set: function (v) {
        this.p.ItemDefaultAttribs = v;
      }},"Caption","String","New Item","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ItemDefaultAttribs;
      }, set: function (v) {
        this.p.ItemDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.ItemDefaultAttribs;
      }, set: function (v) {
        this.p.ItemDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultsToTable("TXMenuItem",$impl.ItemDefaultAttribs);
    pas.NodeUtils.AddNodeFuncLookup("TXMainMenu",$impl.CreateMainMenuInterfaceObj,$impl.CreateMainMenu);
    pas.NodeUtils.AddNodeFuncLookup("TXMenuItem",$impl.CreateMenuItemInterfaceObj,$impl.CreateMenuItem);
    pas.WrapperPanel.SuppressDesignerProperty("TXMainMenu","LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXMainMenu","LabelText");
    pas.WrapperPanel.SuppressDesignerProperty("TXMenuItem","LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXMenuItem","LabelText");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXMainMenu";
  $impl.MenuDefaultAttribs = [];
  $impl.ItemDefaultAttribs = [];
  $impl.CreateMainMenu = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var OnMouseOverString = "";
    OnMouseOverString = ("pas.XMenu.menuBarClick('" + ScreenObjectName) + "');pas.HTMLUtils.StopBubbling(event);";
    try{
        pas.XMenu.addMenuBarStyles();
    
        //alert('add main menu to parent '+ParentNode.NodeName);
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,0);
        wrapper.position="";
    
    
        //localcontainer is an inner div.  Its id is  ScreenObjectName+'Contents'
        // It is a child of the outer container div (wrapper)
        //
         var localcontainer = document.createElement("div");
         localcontainer.id = ScreenObjectName+'Contents';
         localcontainer.classList.add('menuBar');
    
         //localcontainer.onmouseover = function(){pas.XMenu.menuMouseover(ScreenObjectName);pas.HTMLUtils.StopBubbling(event);}
         localcontainer.onclick = function(){pas.XMenu.menuBarClick(ScreenObjectName);pas.HTMLUtils.StopBubbling(event);}
    
         wrapper.appendChild(localcontainer);
    
    
        }
        catch(err) { alert(err.message+'  in XMenu.CreateMainMenu');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.IdentifyMainMenu = function (menuName) {
    var Result = null;
    var StartNode = null;
    var found = false;
    var ParentName = "";
    StartNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,menuName,true);
    found = false;
    while ((found === false) && (StartNode !== null)) {
      if (StartNode.NodeType === "TXMainMenu") {
        found = true}
       else {
        ParentName = StartNode.GetAttribute("ParentName",false).AttribValue;
        StartNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,ParentName,true);
      };
    };
    Result = StartNode.ScreenObject;
    return Result;
  };
  $impl.IdentifyParentMenu = function (itemName) {
    var Result = null;
    var StartNode = null;
    var ParentName = "";
    StartNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,itemName,true);
    if (StartNode !== null) {
      ParentName = StartNode.GetAttribute("ParentName",false).AttribValue;
      StartNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,ParentName,true);
      Result = StartNode.ScreenObject;
    } else Result = null;
    return Result;
  };
  $impl.CreateMenuItem = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var OnClickString = "";
    var OnMouseOverString1 = "";
    var OnMouseOverString2 = "";
    var BgColor = "";
    var Caption = "";
    var ParentName = "";
    var IsMainItem = false;
    if (ParentNode.NodeType === "TXMainMenu") {
      IsMainItem = true}
     else IsMainItem = false;
    ParentName = ParentNode.NodeName;
    Caption = MyNode.GetAttribute("Caption",true).AttribValue;
    BgColor = "#FFFFFF";
    OnClickString = ((((('onclick="event.stopPropagation();pas.XMenu.menuButtonClick(\'' + ScreenObjectName) + "'); ") + "pas.Events.handleEvent(null,'Click','") + ScreenObjectName) + "',''); ") + '" ';
    OnMouseOverString1 = ('onmouseover="pas.XMenu.buttonMouseover(\'' + ScreenObjectName) + '\');pas.HTMLUtils.StopBubbling(event);" ';
    OnMouseOverString2 = ('onmouseover="pas.XMenu.menuItemMouseover(\'' + ScreenObjectName) + '\');pas.HTMLUtils.StopBubbling(event);" ';
    try{
    
    
      // -----------------------------Define the HTML to be used to create Menu control
    
      // if this is a main menu item, use button tag
      if (IsMainItem) {
    
          var MyParent = pas.HTMLUtils.ScreenObjectInnerComponent(ParentNode);
    
          var MenuItemHTML =
                         '<a href="#" class="menuButton" id="'+ScreenObjectName+'"' +
                         OnClickString +
                         OnMouseOverString1 +
                         '>'+Caption+
                         '</a>'+
                         '<div id="'+ScreenObjectName+'Box'+'" class="menu" visibility = "hidden" >';
    
           pas.HTMLUtils.AddObjectToParentObject(ParentNode,MyParent.id,ScreenObjectName,position,MenuItemHTML);
           }
      else {
          MyParent =  document.getElementById(ParentName);
          //alert('Adding item '+ScreenObjectName+' parent: '+ParentName);
    
          if ((IsMainItem==false) && (pas.HTMLUtils.hasClassName(MyParent,'menuItem'))) {
            // adjust the parent item's html definition so that the expansion arrow is visible
            // eg...
            //<a class="menuItem" href="...">
            //  <span class="menuItemText">Menu 3 Item 4</span>
            //  <span class="menuItemArrow">&#9654;</span></a>
    
            // ParentName should give us the <a> item relating to the menu item that is the parent of this sub item.
            // so, insert the arrow for that parent, if not already there
            var ob = document.getElementById(ParentName+'Span');
            if (ob==null) {
              var newSpan = document.createElement("SPAN");
              newSpan.id = ParentName+'Span';
              newSpan.className = 'menuItemArrow';
              newSpan.innerHTML = '&#9654;';
              MyParent.appendChild(newSpan);
            }
          }
    
          MenuItemHTML='<a href="#" class="menuItem" id="'+ScreenObjectName+'" '+
                        OnClickString +
                        OnMouseOverString2+
                        ' >' +
                        '<span class="menuItemText">'+Caption+'</span>' +
                        '</a>' +
                        '<div id="'+ScreenObjectName+'Box'+'" class="menu" >'+
                        '</div>';
    
          pas.HTMLUtils.AddObjectToParentObject(ParentNode,MyParent.id,ScreenObjectName,position,MenuItemHTML);
    
          var wrapper=document.getElementById(ScreenObjectName);
    
          //alert('attaching '+wrapper.id+' to parent '+ParentName+'Box');
          var menubox = document.getElementById(ParentName+"Box");
          menubox.appendChild(wrapper);
          }
      }
      catch(err) { alert(err.message+'  in XMenu.CreateMenuItem');};
    MyNode.ScreenObject = MyNode;
    pas.WrapperPanel.SetCommonWrapperProperties(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateMainMenuInterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXMainMenu.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
  $impl.CreateMenuItemInterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXMenuItem.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XHBox",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXHBox",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetInheritColor = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("InheritColor",true).AttribValue);
      return Result;
    };
    this.SetInheritColor = function (AValue) {
      var clr = "";
      var parentNode = null;
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("InheritColor",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
        parentNode = pas.NodeUtils.FindParentOfNode$1(pas.NodeUtils.SystemNodeTree,this.myNode);
        if (parentNode !== null) {
          if (AValue === true) {
            clr = parentNode.GetAttribute("BgColor",true).AttribValue;
            this.myNode.SetAttributeValue$1("BgColor",clr,"Color");
            var ob = document.getElementById(this.NodeName);
            if (ob!=null) {
              if (AValue==true ) {
                 ob.style.backgroundColor='inherit';
            } };
          } else {
            clr = this.myNode.GetAttribute("BgColor",true).AttribValue;
            var ob = document.getElementById(this.NodeName);
            if (ob!=null) {
              if (AValue==true ) {
                 ob.style.backgroundColor=clr;
            } };
          };
        };
      };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FAlignChildrenVertical = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("InheritColor",3,rtl.boolean,"GetInheritColor","SetInheritColor");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerWidth","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerHeight","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BgColor","Color","#FFFFFF","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"InheritColor","Boolean","False","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelText");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXHBox";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ShowBorder = false;
    var Bdr = "";
    var OnClickString = "";
    Bdr = MyNode.GetAttribute("Border",true).AttribValue;
    if (Bdr !== "") {
      ShowBorder = pas.StringUtils.MyStrToBool(Bdr)}
     else ShowBorder = false;
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', \'\');" ';
    try{
    
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        HTMLString = '<div  id="'+MyObjectName+'" class="hbox" '+
                           'style="height:100%;width:100%; "'+
                           OnClickString +
                            '></div>  ';
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
        }catch(err) { alert(err.message+'  in XHBox.CreateHBox');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXHBox.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XTree",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$MethodVar("TTreeNodeHint",{procsig: rtl.newTIProcSig([["TreeLabelStr",rtl.string]],rtl.string), methodkind: 1});
  $mod.$rtti.$MethodVar("TTreeNodeDropAccepted",{procsig: rtl.newTIProcSig([["myTree",pas.System.$rtti["TObject"]],["SourceName",rtl.string],["SrcText",rtl.string],["DstText",rtl.string]],rtl.boolean), methodkind: 1});
  this.TreeNodeHighlightColor = "#ffff00";
  this.addTreeStyles = function (dummy) {
    var Result = "";
    try{
         // ----------------------------------------check if the style has already been set
         var x = document.getElementsByTagName("STYLE");
         var StyleIsSet = false;
         if (x.length>0){
           for (var i=0; i<x.length; i++){
             var y= x[i].innerHTML;
             if (y.indexOf("summary.hasChildren") !=-1) { StyleIsSet =true}
           }
         }
         if (StyleIsSet == false){
            //<-------------- Styles to switch the child marker on and off on the summary line ---------------
            var styletext = '<style> summary.noChildren::-webkit-details-marker { display:none; } </style>'
                           + '<style> summary.hasChildren {color:black; }</style> ';
            //----------------------------- now append the style declarations to the head of the HTML page
            document.head.innerHTML = document.head.innerHTML+styletext;
         }
    }catch(err) {alert('Error in XTree.addTreeStyles '+ err.message);};
    return Result;
  };
  this.addTreeNode = function (WrapperNodeId, parentName, NameOfDetailsList, SummaryText, HasChildren, color, isopen, NodeHintFunc, Draggable) {
    var Result = "";
    try{
    
     //alert('addTreeNode node '+SummaryText);
    
      var SystemNodeText='';
      if (Array.isArray(SummaryText)){
        SystemNodeText=SummaryText[0];
        }
      else {
        SystemNodeText=SummaryText;
        }
      var myHint='';
      if (NodeHintFunc!=null) {
         myHint = NodeHintFunc(SystemNodeText);
         //alert('Hint '+myHint);
         }
    
    //alert('addTreeNode '+NameOfDetailsList+' to '+parentName);
      var parent = (document.getElementById(parentName));
      if (parent==null) {alert('cannot find parent '+parentName);}
      else
      {
      var div = document.createElement("div");
      div.style.width  = parent.width;
      div.style.marginLeft = "25px";
      div.id = NameOfDetailsList+'OuterDiv';
    
      var dragstartstring='event.stopPropagation(); pas.XTree.DragStart("'+WrapperNodeId+'" ,"'+NameOfDetailsList+'" ,"'+SummaryText+'"); ';
      var dragOverEventString='if (pas.XTree.HandleTreeNodeDragOver(event.target,"'+WrapperNodeId+'","'+SummaryText+'")==true) {event.preventDefault();};';
      var dropEventString='event.stopPropagation(); pas.Events.handleEvent(null, "Drop" ,"'+NameOfDetailsList+'" ,"'+SummaryText+'"); ';
      var dragEventString =  'draggable="true" '
        +" ondragstart = '"+dragstartstring+"' "
        +" ondragover = '"+dragOverEventString+"' "
        +" ondrop =  '"+dropEventString+"' ";
    
      var ClickEventString = 'event.stopPropagation(); '+
                             'pas.XTree.HandleTreeNodeClick("'+WrapperNodeId+'" ,"'+NameOfDetailsList+'Summary"); '+
                             'pas.Events.handleEvent(null, "TreeNodeClick" ,"'+NameOfDetailsList+'" ,"'+SummaryText+'"); '+
                             '';
      if (HasChildren==true){
        if(isopen==true){
          div.innerHTML = "<details open id="+NameOfDetailsList+"><summary id="+NameOfDetailsList+"Summary "
                          +dragEventString
                          +"  onclick ='"+ClickEventString
                          +"'  class='hasChildren ' style='background-color:"+color+";'>"+SummaryText+"</summary></details>";}
          else {
          div.innerHTML = "<details  id="+NameOfDetailsList+"><summary id="+NameOfDetailsList+"Summary "
                          +dragEventString
                          +" onclick ='" +ClickEventString
                          +"'  class='hasChildren ' style='background-color:"+color+";'>"+SummaryText+"</summary></details>";
        }
      }
      else {
        div.innerHTML = "<details id = "+NameOfDetailsList+" ><summary id="+NameOfDetailsList+"Summary "
                         +dragEventString
                         +" onclick ='"+ClickEventString
                         +"'  class='noChildren' style='background-color:"+color+";' >"+SummaryText+"</summary></details>";
      }
       div.title = myHint;
    
       parent.appendChild(div);
      }
     }catch(err) {alert('Error in XTree.addTreeNode '+ err.message);};
    return Result;
  };
  this.addnode = function (WrapperNodeId, ParentName, currentNodeTree, IdOfNodeBeingAdded, OpenToLevel, level, normalColor, NodeHintFunc, Draggable) {
    var Result = "";
    try {
       //alert('addnode: '+ParentNodeId+' '+ParentName+' '+ParentName+' newnode '+IdOfNodeBeingAdded);
           var isopen=false;
           if (level<OpenToLevel) {isopen=true;}  //by default just show the first n levels of the tree
           var localcurrentNodeTree=currentNodeTree;
    
           if ((localcurrentNodeTree.length>1)&&(Array.isArray(localcurrentNodeTree))){
           // This node has children so create the parent node
             pas.XTree.addTreeNode(WrapperNodeId,ParentName,IdOfNodeBeingAdded,localcurrentNodeTree[0],
                                          true,normalColor,isopen,NodeHintFunc,Draggable);
    
           // then make the recursive call for each of its children
           for (var i=1; i<localcurrentNodeTree.length; i++){
             var NameOfChildNode = IdOfNodeBeingAdded+'_'+i
             pas.XTree.addnode(WrapperNodeId,IdOfNodeBeingAdded,localcurrentNodeTree[i],
                               NameOfChildNode,OpenToLevel,level+1,normalColor,NodeHintFunc,Draggable);}
           }
           else {
           // This node does not have children so just create the node
             pas.XTree.addTreeNode(WrapperNodeId,ParentName,IdOfNodeBeingAdded,localcurrentNodeTree,
                                          false,normalColor,true,NodeHintFunc,Draggable);
           }
        }catch(err){alert('Error in XTree.addnode '+ err.message);};
    return Result;
  };
  this.SetOpenStatusOfNodeChildren = function (NodeName, NameOfSelectedNode, level) {
    var Result = false;
    var containsSelectedNode = false;
    try{
      containsSelectedNode = false;
      if (NodeName!='') {
         var parentNode=document.getElementById(NodeName);
         if (parentNode != null){
         if (parentNode.children.length>0) {
            for (var i=0; i<parentNode.children.length; i++) {
              var TempContainsSelectedNode = pas.XTree.SetOpenStatusOfNodeChildren( parentNode.children[i].id,NameOfSelectedNode,level+1);
              if (TempContainsSelectedNode==true){containsSelectedNode = true};
              if ( parentNode.children[i].id== NameOfSelectedNode ){containsSelectedNode = true};
            }
            var test = parentNode.getAttributeNode("open");
            if ((containsSelectedNode == true)||(level < 1) )
              {parentNode.setAttribute("open", "") }
         } }
      }
    }catch(err) { alert(err.message+'  in XTree.SetOpenStatusOfNodeChildren'); };
    Result = containsSelectedNode;
    return Result;
  };
  this.GetTreeRootID = function (NodeID) {
    var Result = "";
    try{
    //alert('GetTreeRootID. NodeID='+NodeID);
        var TreeRootID = "";
        var instring = pas.StringUtils.TrimWhiteSpace(NodeID);
        var EndOfTreeRootID = pas.StringUtils.FoundString(instring,"Contents" );
        for (var i=0; i<EndOfTreeRootID-1; i++){ TreeRootID = TreeRootID+instring[i];}
     }catch(err) { alert(err.message+'  in XTree.GetTreeRootID'); }
     return TreeRootID;
    return Result;
  };
  this.deselectNodeChildren = function (NodeName, normalColor) {
    var Result = "";
    try{
          if (NodeName!='') {
          var parentNode=document.getElementById(NodeName);
          parentNode.style.background=normalColor;
    
          if (parentNode.children.length>0) {
           // if (pas.Stringutils.FoundString(NodeName,'Navig')<1) {alert('node '+NodeName+' has '+parentNode.children.length+' children');}
            for (var i=0; i<parentNode.children.length; i++) {
              pas.XTree.deselectNodeChildren( parentNode.children[i].id,normalColor);
            }
          }
          }
        }catch(err) { alert(err.message+'  in XTree.deselectNodeChildren'); };
    return Result;
  };
  this.clearNodeSelectedMarker = function (NameOfDetailsList, normalColor) {
    var Result = "";
    try{
          //alert('clearNodeSelectedMarker. NameOfDetailsList='+NameOfDetailsList+' normalColor='+normalColor);
          // go down the tree from the root clearing the selected colour
    
          var TreeRootID=pas.XTree.GetTreeRootID(NameOfDetailsList)+'ContentsScroll';  // the tree nodes container
          //alert('tree root id='+TreeRootID);
          var root = (document.getElementById(TreeRootID));
          if (root==null) {
            alert('root is null')}
          else {
            pas.XTree.deselectNodeChildren(root.id,normalColor); }
    
        }catch(err) { alert(err.message+'  in XTree.clearNodeSelectedMarker'); };
    return Result;
  };
  this.OpenAndScrollToSelectedNode = function (NameOfDetailsList) {
    var Result = "";
    try{
      var TreeRootID=pas.XTree.GetTreeRootID(NameOfDetailsList)+'ContentsScroll'; // the tree nodes container
      var root = (document.getElementById(TreeRootID));
      pas.XTree.SetOpenStatusOfNodeChildren(root.id,NameOfDetailsList,0);
      var SelectedNode=document.getElementById(NameOfDetailsList);
      var AlignToTop = false;
      SelectedNode.scrollIntoView(AlignToTop);
    }catch(err) { alert(err.message+'  in XTree.OpenAndScrollToSelectedNode'); };
    return Result;
  };
  this.clearTreeNode = function (parentName) {
    try {
     parent = (document.getElementById(parentName));
     if (parent!=null) {
       //alert('clearTreeNode '+parentName);
       parent.innerHTML = '';}
    }catch(err){alert('Error in XTree.clearTreeNode '+ err.message);};
  };
  this.HandleTreeNodeClick = function (WrapperNodeId, SelectedNodeObjectId) {
    var myNode = null;
    var NodeText = "";
    myNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,WrapperNodeId,true);
    NodeText = $impl.NodeTextFromId(myNode,SelectedNodeObjectId);
    myNode.SetSelectedNodeText(NodeText);
  };
  this.DragStart = function (nodeId, NameOfDetailsList, SummaryText) {
    var treeNode = null;
    var myXTree = null;
    treeNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,nodeId,true);
    myXTree = treeNode.ScreenObject;
    $mod.DraggingTree = myXTree;
    myXTree.fNodeBeingDragged = SummaryText;
    pas.Events.handleEvent( null,'DragStart' ,NameOfDetailsList,SummaryText);
  };
  this.HandleTreeNodeDragOver = function (ob, DestTreeId, DstText) {
    var Result = false;
    var thisXTree = null;
    var thisNode = null;
    if ($mod.DraggingTree !== null) {
      thisNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,DestTreeId,true);
      thisXTree = thisNode.ScreenObject;
      if (thisXTree.fTreeNodeDropAccepted !== null) {
        Result = thisXTree.fTreeNodeDropAccepted(thisXTree,$mod.DraggingTree.myNode.NodeName,$mod.DraggingTree.fNodeBeingDragged,DstText);
      };
    };
    return Result;
  };
  this.NodeIdFromText = function (TreeNode, NodeText) {
    var Result = "";
    var TreeObject = null;
    var FoundId = "";
    TreeObject = TreeNode;
    var ob = document.getElementById(TreeObject.NodeName+'ContentsScroll');  // the tree nodes container
    if (ob!=null) {
            function checkChildren(obj) {
               for (var i=0; i<obj.children.length; i++) {
                 if (obj.children[i].innerHTML==NodeText) {
                   //alert('found '+NodeText+' at '+ obj.children[i].id);   //Summary level
                   //return obj.id;                                         //id is name minus 'Summary' suffix
                   return obj.children[i].id;                                         //id is name including 'Summary' suffix
                 }
                 else {
                   var tmp=checkChildren(obj.children[i]);
                   if (tmp!='') {return tmp;}
                 }
               }
               return '';
            }
      //alert('top text is '+ ob.innerHTML);
      if (ob.innerHTML==NodeText) {
        //alert('top found '+NodeText+' at '+ ob.id);
        FoundId=ob.id;
      }
      else {
        FoundId=checkChildren(ob);
      }
    };
    Result = FoundId;
    return Result;
  };
  this.SetDraggableAttribute = function (NodeName, draggable) {
    try{
          if (NodeName!='') {
          var parentNode=document.getElementById(NodeName);
          var d = draggable.toLowerCase();
          if (parentNode.tagName=='SUMMARY') {parentNode.setAttribute('draggable',d);}
    
          if (parentNode.children.length>0) {
            for (var i=0; i<parentNode.children.length; i++) {
              pas.XTree.SetDraggableAttribute( parentNode.children[i].id,d);
            }
          }
          }
        }catch(err) { alert(err.message+'  in XTree.SetDraggableAttribute'); };
  };
  rtl.createClass($mod,"TXTree",pas.WrapperPanel.TWrapperPanel,function () {
    this.$init = function () {
      pas.WrapperPanel.TWrapperPanel.$init.call(this);
      this.fTreeNodeHint = null;
      this.fTreeNodeDropAccepted = null;
      this.fSelectedNodeId = "";
      this.fNodeBeingDragged = "";
    };
    this.$final = function () {
      this.fTreeNodeHint = undefined;
      this.fTreeNodeDropAccepted = undefined;
      pas.WrapperPanel.TWrapperPanel.$final.call(this);
    };
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Created");
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("TreeNodeClick");
      this.myEventTypes.Add("DragStart");
      this.myEventTypes.Add("Drop");
    };
    this.GetTreeData = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("TreeData",true).AttribValue;
      return Result;
    };
    this.GetSelectedNodeText = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("SelectedNodeText",true).AttribValue;
      return Result;
    };
    this.GetTreeWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("TreeWidth",true).AttribValue;
      return Result;
    };
    this.GetTreeHeight = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("TreeHeight",true).AttribValue;
      return Result;
    };
    this.GetReadOnly = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("ReadOnly",true).AttribValue);
      return Result;
    };
    this.GetDraggable = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("Draggable",true).AttribValue);
      return Result;
    };
    this.GetopenTolevel = function () {
      var Result = 0;
      var str = "";
      str = this.myNode.GetAttribute("OpenToLevel",true).AttribValue;
      if (str !== "") {
        Result = pas.SysUtils.StrToInt(str)}
       else Result = 0;
      return Result;
    };
    this.SetTreeData = function (NodeTreeString) {
      var SelectedId = "";
      var myNodeName = "";
      var NodeHintFunc = null;
      var localDraggable = false;
      var openlvl = 0;
      this.myNode.SetAttributeValue$1("TreeData",NodeTreeString,"TreeString");
      openlvl = this.GetopenTolevel();
      localDraggable = this.GetDraggable();
      SelectedId = this.fSelectedNodeId;
      myNodeName = this.NodeName;
      $mod.clearTreeNode(myNodeName + "ContentsScroll");
      NodeHintFunc = this.myNode.fTreeNodeHint;
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        var TreeName = myNodeName+'ContentsScroll';
        var localNodeTree =JSON.parse(NodeTreeString);
        pas.XTree.addnode(myNodeName,TreeName,localNodeTree,(TreeName+'Node'),
                          openlvl,0,this.BgColor,NodeHintFunc,localDraggable) ;
      };
      this.SetSelectedNodeText("");
    };
    this.SetSelectedNodeText = function (AValue) {
      var NodeId = "";
      if (AValue !== this.GetSelectedNodeText()) {
        this.myNode.SetAttributeValue$2("SelectedNodeText",AValue);
        if (AValue !== "") {
          NodeId = $mod.NodeIdFromText(this,AValue);
          this.SetSelectedNodeId(NodeId);
        };
      };
    };
    this.SetTreeWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("TreeWidth",AValue);
      var ob = document.getElementById(this.NodeName);
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.SetTreeHeight = function (AValue) {
      this.myNode.SetAttributeValue$2("TreeHeight",AValue);
      var ob = document.getElementById(this.NodeName);
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'H',AValue);
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        ob.readOnly = AValue  };
    };
    this.SetDraggable = function (AValue) {
      this.myNode.SetAttributeValue$1("Draggable",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        //draggable attribute must be set for all the tree nodes (with summary tag)
        pas.XTree.SetDraggableAttribute(ob.id, AValue.toString());
        };
    };
    this.SetOpenToLevel = function (AValue) {
      this.myNode.SetAttributeValue$1("OpenToLevel",pas.SysUtils.IntToStr(AValue),"Integer");
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    this.DeSelectNode = function () {
      var normalColor = "";
      normalColor = this.GetBgColor();
      $mod.deselectNodeChildren(this.NodeName,normalColor);
    };
    this.InsertNewSiblingNode = function (NodeText) {
      var localSelectedNodeId = "";
      var localDraggable = false;
      localSelectedNodeId = this.fSelectedNodeId;
      localDraggable = this.GetDraggable();
      if (localSelectedNodeId !== "") {
        //  alert('WrapperNodeId='+this.NodeName+' localSelectedNodeId='+localSelectedNodeId+' this.SelectedNodeId='+this.SelectedNodeId);  //!!!! why is this.SelectedNodeId undefined??
        var ob = document.getElementById(localSelectedNodeId);
        // find parent of selected node
        var parentnode=pas.HTMLUtils.getParentByTagName(this.NodeName,ob.parentNode,'details');
        if (parentnode!=null) {
           //alert('found parent '+parentnode.id+' (tag is '+parentnode.tagName+')');
           pas.XTree.addnode(this.NodeName,parentnode.id,NodeText,(NodeText+'Node'),1,0,this.BgColor,null,localDraggable);
        }
          else {alert('parentnode not found');};
        this.SetTreeData(this.BuildTreeDataString());
      } else pas.StringUtils.ShowMessage("Please select a tree node first");
    };
    this.InsertNewChildNode = function (NodeText) {
      var localSelectedNodeId = "";
      var localDraggable = false;
      localSelectedNodeId = this.fSelectedNodeId;
      localDraggable = this.GetDraggable();
      if (localSelectedNodeId !== "") {
        //alert('WrapperNodeId='+this.NodeName+' localSelectedNodeId='+localSelectedNodeId+' this.SelectedNodeId='+this.SelectedNodeId);
        var ob = document.getElementById(localSelectedNodeId);
        //alert('adding under parent '+ob.parentNode.id+' (tag is '+ob.parentNode.tagName+')');
        pas.XTree.addnode(this.NodeName,ob.parentNode.id,NodeText,(NodeText+'Node'),1,0,this.BgColor,null,localDraggable);
        this.SetTreeData(this.BuildTreeDataString());
      } else pas.StringUtils.ShowMessage("Please select a tree node first");
    };
    this.DeleteSelectedNode = function () {
      var localSelectedNodeId = "";
      localSelectedNodeId = this.fSelectedNodeId;
      if (localSelectedNodeId !== "") {
        var ob = document.getElementById(localSelectedNodeId);
        // delete the HTML node that is the DIV parent of the selected node
        var divp = pas.HTMLUtils.getParentByTagName(this.NodeName,ob,'div');
        divp.remove();
        this.SetTreeData(this.BuildTreeDataString());
      } else pas.StringUtils.ShowMessage("DeleteSelectedNode: Please select a tree node first");
    };
    this.MoveNode = function (SourceNodeText, DestNodeText) {
      var str = "";
      this.SetSelectedNodeText(SourceNodeText);
      this.DeleteSelectedNode();
      this.SetSelectedNodeText(DestNodeText);
      this.InsertNewSiblingNode(SourceNodeText);
      this.SetSelectedNodeText(SourceNodeText);
      str = this.BuildTreeDataString();
      this.SetTreeData(str);
    };
    this.NodeTextIsUnique = function (NodeText) {
      var Result = false;
      var FoundId = "";
      var ob = document.getElementById(this.NodeName+'ContentsScroll');  // the tree nodes container
          if (ob!=null) {
                  function checkChildren(obj) {
                     for (var i=0; i<obj.children.length; i++) {
                       if (obj.children[i].innerHTML==NodeText) {
                         //alert('found '+NodeText+' at '+ obj.children[i].id);   //Summary level
                         //return obj.id;                                         //id is name minus 'Summary' suffix
                         return obj.children[i].id;                                         //id is name including 'Summary' suffix
                       }
                       else {
                         var tmp=checkChildren(obj.children[i]);
                         if (tmp!='') {return tmp;}
                       }
                     }
                     return '';
                  }
      
            if (ob.innerHTML==NodeText) {
               FoundId=ob.id;
            }
            else {
              FoundId=checkChildren(ob);
            }
          };
      if (FoundId !== "") {
        Result = false}
       else Result = true;
      return Result;
    };
    this.MakeTextUnique = function (NodeText) {
      var Result = "";
      var i = 0;
      if (this.NodeTextIsUnique(NodeText)) {
        Result = NodeText}
       else {
        i = 1;
        while (!this.NodeTextIsUnique(NodeText + pas.SysUtils.IntToStr(i))) {
          i = i + 1;
        };
        Result = NodeText + pas.SysUtils.IntToStr(i);
      };
      return Result;
    };
    this.BuildTreeDataString = function () {
      var Result = "";
      var str = "";
      str = "";
      //alert('treedata for '+this.NodeName);
          var ob = document.getElementById(this.NodeName+'ContentsScroll');  // the tree nodes top container
          if (ob!=null) {
                  function fetchChildren(obj,str) {
                    //alert('fetchChildren of '+obj.id+' tag='+obj.tagName);
                    if (obj.tagName=='SUMMARY') {return str + '"'+obj.innerHTML+'"';}
                    if ((obj.tagName!='DETAILS')&&(obj.tagName!='DIV')) {return str;}
      
                    // DETAILS or DIV tag...
                     if (obj.children.length==0) {
                       return str;
                     }
                     else
                     {
                     var hasChildNodes = ((obj.tagName=='DETAILS')&&(pas.HTMLUtils.ContainsChildWithTag(obj,'DIV')));
                     if (hasChildNodes) {str=str+'[';}
                     for (var i=0; i<obj.children.length; i++) {
                        if (i>0) {str = str + ','; }
                        str=fetchChildren(obj.children[i],str);
                       }
                     if (hasChildNodes) {str=str+']';}
                     }
                     return str;
                  }
          str=fetchChildren(ob,str);
          }
          else
            alert('ob not found');
      Result = str;
      return Result;
    };
    this.SelectTreeNodeById = function (NodeId) {
      var normalColor = "";
      var ParentId = "";
      normalColor = this.GetBgColor();
      ParentId = pas.StringUtils.myStringReplace(NodeId,"Summary","",-1,-1);
      try{
         //alert('SelectTreeNodeById NodeId='+ NodeId+' TreeName='+this.NodeName);
         if (NodeId!='') {
           // NodeId is the name (id) of a tree node
           var myself = document.getElementById(ParentId);
           if (myself!=null)
           {
           //alert('node found');
           var HTMLString = myself.innerHTML;
           var hasChildren = pas.StringUtils.FoundString(HTMLString,"hasChildren");
      
           // go down the tree from the root clearing the selected colour
           pas.XTree.clearNodeSelectedMarker(ParentId,normalColor);  // clear old selected nodes if selecting a new one
      
           pas.XTree.OpenAndScrollToSelectedNode(ParentId);
      
           //alert('SelectTreeNodeById 1. looking for '+NodeId);
           // Highlight this selected node in yellow
           var mySummary=document.getElementById(NodeId);
           mySummary.style.background=pas.XTree.TreeNodeHighlightColor;
      
           if (hasChildren>0)   // toggle the open attribute
           {
               //alert('has children');
               var test = myself.getAttributeNode("open");
               //alert('test='+test);
               if (test == null){
                  myself.setAttribute("open", "");
                  } else {
                  myself.removeAttribute("open");}
            }
             //**** have to do this to force the document to repaint this element (eg if node has been opened)
             HTMLString = myself.innerHTML;
             myself.innerHTML = HTMLString;
             }
           }
           else alert('Cannot find node '+NodeId);
           }catch(err) { alert(err.message+'  in XTree.SelectTreeNodeById'); }
           //alert('done');
    };
    this.SetSelectedNodeId = function (AValue) {
      this.fSelectedNodeId = AValue;
      if (AValue !== "") {
        this.SelectTreeNodeById(AValue);
      };
    };
    var $r = this.$rtti;
    $r.addProperty("SelectedNodeText",3,rtl.string,"GetSelectedNodeText","SetSelectedNodeText");
    $r.addProperty("TreeData",3,rtl.string,"GetTreeData","SetTreeData");
    $r.addProperty("TreeHeight",3,rtl.string,"GetTreeHeight","SetTreeHeight");
    $r.addProperty("TreeWidth",3,rtl.string,"GetTreeWidth","SetTreeWidth");
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
    $r.addProperty("Draggable",3,rtl.boolean,"GetDraggable","SetDraggable");
    $r.addProperty("OpenToLevel",3,rtl.longint,"GetopenTolevel","SetOpenToLevel");
    $r.addProperty("TreeNodeHintFunc",0,$mod.$rtti["TTreeNodeHint"],"fTreeNodeHint","fTreeNodeHint");
    $r.addProperty("TreeNodeDropAccepted",0,$mod.$rtti["TTreeNodeDropAccepted"],"fTreeNodeDropAccepted","fTreeNodeDropAccepted");
    $r.addProperty("NodeBeingDragged",0,rtl.string,"fNodeBeingDragged","fNodeBeingDragged");
    $r.addProperty("SelectedNodeId",2,rtl.string,"fSelectedNodeId","SetSelectedNodeId");
  });
  this.DraggingTree = null;
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"TreeWidth","String","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"TreeHeight","String","150","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Top","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Tree View","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BgColor","Color","#FFFFFF","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Draggable","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SelectedNodeText","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"OpenToLevel","Integer","1","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"TreeData","Integer",$impl.ExampleNodeTree,"",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXTree","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXTree";
  $impl.ExampleNodeTree = '["myTreeName",["Layout","TestStuff"],"SimpleItems","Collection Items",["Media items","TestMoreStuff"],"Option Forms"]';
  $impl.myDefaultAttribs = [];
  $impl.NodeTextFromId = function (TreeNode, NodeId) {
    var Result = "";
    var TreeObject = null;
    var FoundText = "";
    TreeObject = TreeNode;
    var ob = document.getElementById(TreeObject.NodeName+'ContentsScroll');  // the tree nodes container
    if (ob!=null) {
       var node = document.getElementById(NodeId);
      // NB. the node object should be a <summary> object, where innerHTML is simply the visible node text.
      //alert('node '+NodeId+' text is '+ node.innerHTML);
      FoundText=node.innerHTML;
    };
    Result = FoundText;
    return Result;
  };
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NodeTree = "";
    var LabelText = "";
    var LabelPos = "";
    var normalColor = "";
    var Ht = "";
    var Wd = "";
    var NodeName = "";
    var NodeHintFunc = null;
    var openlvl = 0;
    NodeTree = MyNode.GetAttribute("TreeData",true).AttribValue;
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    LabelPos = pas.SysUtils.UpperCase(MyNode.GetAttribute("LabelPos",true).AttribValue);
    openlvl = pas.SysUtils.StrToInt(MyNode.GetAttribute("OpenToLevel",true).AttribValue);
    normalColor = MyNode.GetAttribute("BgColor",true).AttribValue;
    Wd = " width:100%; ";
    Ht = " height:100%; ";
    NodeName = MyNode.NodeName;
    NodeHintFunc = MyNode.fTreeNodeHint;
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
        var wrapper=document.getElementById(ScreenObjectName);
    
        var MyObjectName=ScreenObjectName+'Contents';
        var localcontainer = document.createElement("div");
        localcontainer.id = MyObjectName;
        localcontainer.style.display="inline-block;";
        localcontainer.style.height="100%";
        localcontainer.style.width="100%";
        wrapper.appendChild(localcontainer);
    
        pas.XTree.addTreeStyles();// this style script removes the arrowhead on all nodes that do not have children
    
    
        // put in a scrollbox to contain all the tree nodes
        //alert('tree container id='+ScreenObjectName+'Contents'+'Scroll');
        var ContainerString = '<div style = "overflow:scroll; display:inline-block;'+
                                    'background-color:'+normalColor+';'+Ht+Wd+'" '+
                                    'id='+MyObjectName+'Scroll ></div> ';
        localcontainer.insertAdjacentHTML( 'beforeend', ContainerString );
    
        var TreeName = ScreenObjectName+'ContentsScroll';
        var localNodeTree =JSON.parse(NodeTree);
        //alert('NodeName='+NodeName+' Treename='+TreeName);
    
        pas.XTree.addnode(NodeName,TreeName,localNodeTree,(TreeName+'Node'),
                          openlvl,0,normalColor,NodeHintFunc,true) ;
    
    
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
        if (LabelPos=='LEFT') {
          wrapper.insertAdjacentHTML( 'afterbegin', labelstring );
        }
        else {
          wrapper.insertAdjacentHTML( 'beforeend', labelstring );
          }
    
        }
        catch(err) { alert(err.message+'  in XTree.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXTree.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XEditBox",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXEditBox",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
      this.myEventTypes.Add("EditBoxPaste");
    };
    this.GetItemValue = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ItemValue",true).AttribValue;
      return Result;
    };
    this.GetReadOnly = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("ReadOnly",true).AttribValue);
      return Result;
    };
    this.GetBoxWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("BoxWidth",true).AttribValue;
      return Result;
    };
    this.GetPasswordBox = function () {
      var Result = false;
      var tmp = "";
      if (this.myNode !== null) {
        tmp = this.myNode.GetAttribute("PasswordBox",true).AttribValue;
        if (tmp === "") tmp = "True";
        Result = pas.StringUtils.MyStrToBool(tmp);
      } else Result = true;
      return Result;
    };
    this.SetItemValue = function (AValue) {
      this.myNode.SetAttributeValue$2("ItemValue",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.value=AValue;  };
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        ob.readOnly = AValue  };
    };
    this.SetBoxWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("BoxWidth",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      //  if (ob==null) {alert(this.NodeName+'Contents'+'  not found');}
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.SetPasswordBox = function (AValue) {
      this.myNode.SetAttributeValue$1("PasswordBox",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        if (AValue) {
           ob.type = 'password'  }
        else {
             ob.type = 'text'}
        };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("ItemValue",3,rtl.string,"GetItemValue","SetItemValue");
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
    $r.addProperty("BoxWidth",3,rtl.string,"GetBoxWidth","SetBoxWidth");
    $r.addProperty("PasswordBox",3,rtl.boolean,"GetPasswordBox","SetPasswordBox");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BoxWidth","String","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Edit Box","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"PasswordBox","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ItemValue","String","","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXEditBox","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXEditBox";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ItemValue = "";
    var LabelText = "";
    var ReadOnly = false;
    var PasswordBox = false;
    var OnChangeString = "";
    var OnClickString = "";
    var OnPasteString = "";
    ItemValue = MyNode.GetAttribute("ItemValue",true).AttribValue;
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    ReadOnly = pas.SysUtils.StrToBool(MyNode.GetAttribute("ReadOnly",true).AttribValue);
    PasswordBox = pas.SysUtils.StrToBool(MyNode.GetAttribute("PasswordBox",true).AttribValue);
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value);" ';
    OnChangeString = (((('onchange="pas.NodeUtils.SetInterfaceProperty(\'' + ScreenObjectName) + "','ItemValue',this.value); ") + "pas.Events.handleEvent(null,'Change','") + ScreenObjectName) + '\', this.value, \'ItemValue\');" ';
    OnPasteString = ('onpaste="pas.Events.handleEvent(null,\'EditBoxPaste\',\'' + ScreenObjectName) + '\', this.value);" ';
    try{
    
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var ReadOnlyString = '';
        if (ReadOnly==true) { ReadOnlyString = ' readonly ';}
    
        var TypeString = 'text';
        if (PasswordBox) { TypeString = 'password';}
    
        var inputtext= ItemValue;
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
        var EBoxString = '<input type="'+TypeString+'"  id='+MyObjectName+' ' +
                              OnPasteString +
                              OnClickString +
                              OnChangeString +
                     ' style="display: inline-block; '+
                     '" value="'+inputtext+'"'+ReadOnlyString+'>' ;
    
        HTMLString = labelstring+EBoxString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
        // fix the height for an edit box to one line-height...
        var ob=document.getElementById(MyObjectName);
        var obStyle = window.getComputedStyle(ob);
        ob.style.maxHeight = obStyle.getPropertyValue('line-height');
        //alert('maxHeight='+ob.style.maxHeight);
      }
      catch(err) { alert(err.message+'  in XEditBox.CreateXEditBox');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXEditBox.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XCheckBox",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXCheckBox",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetChecked = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("Checked",true).AttribValue);
      return Result;
    };
    this.GetReadOnly = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("ReadOnly",true).AttribValue);
      return Result;
    };
    this.SetChecked = function (AValue) {
      this.myNode.SetAttributeValue$1("Checked",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.checked=AValue;  };
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
      if (AValue==true) {ob.disabled = true}
      else {ob.disabled = false }  };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("Checked",3,rtl.boolean,"GetChecked","SetChecked");
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerWidth","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Checkbox","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Checked","Boolean","False","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXCheckBox";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var Checked = "";
    var ReadOnly = "";
    var LabelText = "";
    var OnClickString = "";
    Checked = MyNode.GetAttribute("Checked",true).AttribValue;
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    ReadOnly = MyNode.GetAttribute("ReadOnly",true).AttribValue;
    OnClickString = (((((('onclick="if (this.checked!=undefined) {' + "pas.NodeUtils.SetInterfaceProperty('") + ScreenObjectName) + "','Checked',this.checked.toString());") + "event.stopPropagation(); ") + "pas.Events.handleEvent(null,'Click','") + ScreenObjectName) + '\', this.checked.toString());}"';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
        wrapper.style.display = 'flex';
        var goright =  'flex-e'+'nd';
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var ReadOnlyString = '';
        if (ReadOnly=='True') { ReadOnlyString = ' readonly ';}
    
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
    
        var Checkstring = '';
        if (Checked == 'true'){Checkstring = 'checked'};
    
        var CheckBoxString = '<input  type="checkbox" id='+MyObjectName+ ' '+
                           OnClickString +
                           Checkstring +
                           ' style="display:inline-block;" '+ReadOnlyString+' >' ;
    
        HTMLString = labelstring+CheckBoxString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
      }
      catch(err) { alert(err.message+'  in XCheckBox.CreateXCheckBox');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXCheckBox.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XHyperLink",["System","Classes","SysUtils","NodeUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXHyperLink",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetLabelCaption = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("LabelCaption",true).AttribValue;
      return Result;
    };
    this.GetURL = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("URL",true).AttribValue;
      return Result;
    };
    this.SetLabelCaption = function (AValue) {
      this.myNode.SetAttributeValue$2("LabelCaption",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.innerHTML=AValue;   };
    };
    this.SetURL = function (AValue) {
      this.myNode.SetAttributeValue$2("URL",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.href=AValue;   };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("LabelCaption",3,rtl.string,"GetLabelCaption","SetLabelCaption");
    $r.addProperty("URL",3,rtl.string,"GetURL","SetURL");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelCaption","String","BBC News","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"URL","String","http:\/\/www.bbc.co.uk\/news","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXHyperLink","BgColor");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXHyperlink";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var LabelCaption = "";
    var URL = "";
    var OnClickString = "";
    LabelCaption = MyNode.GetAttribute("LabelCaption",true).AttribValue;
    URL = MyNode.GetAttribute("URL",true).AttribValue;
    OnClickString = ((('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + "','") + URL) + '\'); " ';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var MyObjectName=ScreenObjectName+'Contents';
    
        HTMLString = '<a id='+MyObjectName+' href="'+URL+'" target="_blank" '+
                             OnClickString +
                             ' style="display: inline-block;"  >'+LabelCaption+'</a> ';
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
      }
      catch(err) { alert(err.message+'  in XHyperLink.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXHyperLink.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XRadioBtns",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.CreateButtonsList = function (myNode, OptionList) {
    var Result = "";
    var OnChangeString = "";
    var ItemValue = "";
    var ReadOnly = "";
    var myName = "";
    var quot = "";
    ReadOnly = myNode.GetAttribute("ReadOnly",true).AttribValue;
    ItemValue = myNode.GetAttribute("ItemValue",true).AttribValue;
    myName = myNode.NodeName;
    OnChangeString = (((('onchange="if (this.checked) {pas.NodeUtils.SetInterfaceProperty(\'' + myName) + "','ItemValue',this.value);") + "pas.Events.handleEvent(null,'Change','") + myName) + "','";
    quot = "'";
    try{
        var ReadOnlyString = '';
        if (ReadOnly=='true') { ReadOnlyString = ' readonly ';}
    
        var HTMLString='';
        var optionlistarray=JSON.parse(OptionList);
        for (var i=0; i<optionlistarray.length; i++){
           var currentitemstring = optionlistarray[i];
           var selectedflag ='';
           if (i==ItemValue ){selectedflag = 'checked'}
           HTMLString = HTMLString +'<input type="radio"  '+selectedflag + ReadOnlyString
                                   +' id="'+myName+currentitemstring+'" '
                                   +' name='+myName+' '
                                   + OnChangeString+i+quot+');}" '
                                   +' value="'+currentitemstring+'" '
                                   +'>'+currentitemstring+'<Br>';
         }
         return HTMLString;
      }
      catch(err) { alert(err.message+'  in XRadioBtns.CreateButtonsList');};
    return Result;
  };
  rtl.createClass($mod,"TXRadioBtns",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
    };
    this.GetReadOnly = function () {
      var Result = false;
      var tmp = "";
      tmp = this.myNode.GetAttribute("ReadOnly",true).AttribValue;
      if (tmp === "") tmp = "False";
      Result = pas.StringUtils.MyStrToBool(tmp);
      return Result;
    };
    this.GetItemValue = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ItemValue",true).AttribValue;
      return Result;
    };
    this.GetOptionList = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("OptionList",true).AttribValue;
      return Result;
    };
    this.GetCaption = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Caption",true).AttribValue;
      return Result;
    };
    this.GetBoxWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("BoxWidth",true).AttribValue;
      return Result;
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      //alert('setreadonly');
      var ob = document.getElementById(this.NodeName);
      if (ob!=null) {
      if (AValue==true) {ob.disabled = true}
      else {ob.disabled = false }  }
       // alert('setreadonly done');
    };
    this.SetItemValue = function (AValue) {
      this.myNode.SetAttributeValue$2("ItemValue",AValue);
      //alert('setitemvalue to '+AValue);
      var ob = document.getElementById(this.NodeName+AValue);
      if (ob!=null) {
         ob.checked=true;  };
    };
    this.SetOptionList = function (AValue) {
      var myName = "";
      var myCaption = "";
      this.myNode.SetAttributeValue$2("OptionList",AValue);
      myName = this.NodeName;
      myCaption = this.myNode.GetAttribute("Caption",true).AttribValue;
      //alert('setoptionlist. AValue='+AValue);
      var ob = document.getElementById(myName+'Contents');
      if (ob!=null) {
        var Legend='<legend id='+myName+'ContentsLegend >"'+myCaption+'"</legend>';
        var ItemValue=ob.value;
        var Buttons=$mod.CreateButtonsList(this.myNode,AValue);
        //alert('setting innerHTML to '+Legend+Buttons);
        ob.innerHTML=Legend+Buttons;
      };
    };
    this.SetCaption = function (AValue) {
      this.myNode.SetAttributeValue$2("Caption",AValue);
      var ob = document.getElementById(this.NodeName+'ContentsLegend');
      if (ob!=null) {
         //alert('setcaption '+AValue);
         ob.innerHTML=AValue  };
    };
    this.SetBoxWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("BoxWidth",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      //  if (ob==null) {alert(this.NodeName+'Contents'+'  not found');}
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
    $r.addProperty("ItemValue",3,rtl.string,"GetItemValue","SetItemValue");
    $r.addProperty("Caption",3,rtl.string,"GetCaption","SetCaption");
    $r.addProperty("OptionList",3,rtl.string,"GetOptionList","SetOptionList");
    $r.addProperty("BoxWidth",3,rtl.string,"GetBoxWidth","SetBoxWidth");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BgColor","Color","#FFFFFF","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Caption","String","Radio Buttons","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"OptionList","String",'["Option 1","Option 2","Option 3"]',"",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ItemValue","String","Option 1","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BoxWidth","String","300","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelText");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXRadioBtns";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var myCaption = "";
    var OptionList = "";
    var OnClickString = "";
    myCaption = MyNode.GetAttribute("Caption",true).AttribValue;
    OptionList = MyNode.GetAttribute("OptionList",true).AttribValue;
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\',\'\');"';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        HTMLString = '<fieldset  id='+MyObjectName+' style="display: inline-block;height:100%;width:100%;" '
                     + OnClickString
                     +' >  ';
        var Legend='<legend id='+MyObjectName+'Legend >'+myCaption+'</legend>';
        var Buttons=$mod.CreateButtonsList(MyNode,OptionList);
        HTMLString = HTMLString + Legend + Buttons + '</fieldset> ';
        //alert('create radiogroup widget. html='+HTMLString);
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
      }
      catch(err) { alert(err.message+'  in XRadioBtns.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXRadioBtns.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XTable",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel","Events"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.AddTableStyles = function (dummy) {
    try{
         // ----------------------------------------check if the style has already been set
         //alert('AddTableStyles');
         var x = document.getElementsByTagName("STYLE");
         var StyleIsSet = false;
         if (x.length>0){
           for (var i=0; i<x.length; i++){
             var y= x[i].innerHTML;
             if (y.indexOf("table") !=-1) { StyleIsSet =true}
           }
         }
         if (StyleIsSet == false){
           var styletext = '<style>'+
                         'table, th, td { '+
                          ' background-color:#FFFFFF; '+
                          ' border: 1px solid black; '+
                          ' border-collapse: collapse; '+
                          '}'+
                         'th { '+
                          ' background-color:#DDDDDD; '+
                          ' text-align: left;'+
                           '}'+
                        '}</style>';
         //alert(styletext);
         //----------------------------- now append the style declarations to the head of the HTML page
            document.head.innerHTML = document.head.innerHTML+styletext;
         }
    }catch(err) {alert('Error in XTable.AddTableStyles '+ err.message);};
  };
  this.TableChange = function (Sender, NodeName) {
    var newData = "";
    var myNode = null;
    myNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,NodeName,true);
    newData = myNode.ConstructDataString();
    if (newData !== myNode.GetTableData()) {
      myNode.SetAttributeValue$2("TableData",newData);
      if ((myNode.GetSelectedCol() > -1) && (myNode.GetSelectedRow() > -1)) {
        if (myNode.GetNumCols() < (myNode.GetSelectedCol() + 1)) myNode.SetSelectedCol(myNode.GetNumCols() - 1);
        if (myNode.GetNumRows() < (myNode.GetSelectedRow() + 1)) myNode.SetSelectedRow(myNode.GetNumRows() - 1);
        myNode.SetSelectedValue(myNode.GetCellValue(myNode.GetSelectedRow(),myNode.GetSelectedCol()));
      };
      pas.Events.handleEvent$2("Change",myNode.NodeName,newData);
    };
  };
  this.CellClick = function (target, NodeName) {
    var TargetNode = null;
    var col = 0;
    var row = 0;
    TargetNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,NodeName,true);
    var closestByTag = function(el, clazz) {
          // Traverse the DOM up with a while loop
          while (el.tagName != clazz) {
              // Increment the loop to the parent node
              el = el.parentNode;
              if (!el) {
                  return null;
              }
          }
          // At this point, the while loop has stopped and `el` represents the element that has
          // the class you specified in the second parameter of the function `clazz`
    
          // Then return the matched element
          return el;
      }
      var tr = closestByTag(target,'TR');
      var td = closestByTag(target,'TD');
      //alert('rowindex is '+tr.rowIndex);
      if (tr!=null) {row=tr.rowIndex;}  else {row=0;}
      //alert('cellindex is '+td.cellIndex);
      if (tr!=null) {col=td.cellIndex;} else {col=0;}
      //alert('click at row='+row+' col='+col);
    TargetNode.SetSelectedRow(row);
    TargetNode.SetSelectedCol(col);
    TargetNode.SetSelectedValue(TargetNode.GetCellValue(row,col));
  };
  rtl.createClass($mod,"TXTable",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
    };
    this.GetReadOnly = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("ReadOnly",true).AttribValue);
      return Result;
    };
    this.GetTableWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("TableWidth",true).AttribValue;
      return Result;
    };
    this.GetTableHeight = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("TableHeight",true).AttribValue;
      return Result;
    };
    this.GetTableData = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("TableData",true).AttribValue;
      return Result;
    };
    this.GetColWidth = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("ColWidth",true).AttribValue);
      return Result;
    };
    this.GetNumCols = function () {
      var Result = 0;
      var num = 0;
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        if (ob.rows.length > 0) {
          num=ob.rows[0].cells.length;
        }
        else {num=0};
      };
      Result = num;
      return Result;
    };
    this.GetNumRows = function () {
      var Result = 0;
      var num = 0;
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
      num=ob.rows.length;
      };
      Result = num;
      return Result;
    };
    this.GetSelectedRow = function () {
      var Result = 0;
      var str = "";
      str = this.myNode.GetAttribute("SelectedRow",true).AttribValue;
      if (str !== "") {
        Result = pas.SysUtils.StrToInt(str)}
       else Result = -1;
      return Result;
    };
    this.GetSelectedCol = function () {
      var Result = 0;
      var str = "";
      str = this.myNode.GetAttribute("SelectedCol",true).AttribValue;
      if (str !== "") {
        Result = pas.SysUtils.StrToInt(str)}
       else Result = -1;
      return Result;
    };
    this.GetSelectedValue = function () {
      var Result = "";
      var r = 0;
      var c = 0;
      var v = "";
      r = this.GetSelectedRow();
      c = this.GetSelectedCol();
      if ((r >= 0) && (c >= 0)) {
        v = this.GetCellValue(r,c);
        this.myNode.SetAttributeValue$1("SelectedValue",v,"String");
        Result = v;
      } else Result = "";
      return Result;
    };
    this.GetHasHeaderRow = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("HasHeaderRow",true).AttribValue);
      return Result;
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName);
      if (ob!=null) {
      if (AValue==true) {ob.disabled = true}
      else {ob.disabled = false }
      };
    };
    this.SetTableWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("TableWidth",AValue);
      var ob = document.getElementById(this.NodeName);
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.SetTableHeight = function (AValue) {
      this.myNode.SetAttributeValue$2("TableHeight",AValue);
      var ob = document.getElementById(this.NodeName);
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'H',AValue);
    };
    this.SetTableData = function (AValue) {
      var cw = "";
      var hasHeaders = false;
      var i = 0;
      this.myNode.SetAttributeValue$1("TableData",AValue,"TableString");
      hasHeaders = this.GetHasHeaderRow();
      cw = this.myNode.GetAttribute("ColWidth",true).AttribValue;
      var ob = document.getElementById(this.NodeName+'Contents');
          if ((ob!=null)&&(AValue!='')) {
            var localtestdata=JSON.parse(AValue);
            var RowCount =localtestdata.length;
            var ColCount = 0;
            for ( var i = 0; i < RowCount; i++ ) {
              if(localtestdata[i].length> ColCount)
                {ColCount = localtestdata[i].length }
            }
            //alert('rows='+RowCount+' cols='+ColCount);
            ob.innerHTML='';
            if (RowCount>0) {
      
              // first row is headers
              var toprow=document.createElement("tr");
              for (var j=0; j<ColCount; j++) {
                if (hasHeaders==true) {
                  var hdr=document.createElement("th"); }
                else {
                  var hdr=document.createElement("td");}
                hdr.style.width=cw+'px';
                var textnode=document.createTextNode(localtestdata[0][j]);
                hdr.appendChild(textnode);
                toprow.appendChild(hdr);
              }
              ob.appendChild(toprow);
      
              for (i = 1; i < RowCount; i++ ) {
                 var row=document.createElement("tr");
                 for (j=0; j<ColCount; j++) {
                   var cell = document.createElement("td");
                   //alert('cell value is '+localtestdata[i][j]);
                   textnode=document.createTextNode(localtestdata[i][j]);
                   cell.appendChild(textnode);
                   row.appendChild(cell);
                 }
                 ob.appendChild(row);
              }
            }
          };
      i = this.GetNumCols();
      this.SetNumCols(this.GetNumCols());
      this.SetNumRows(this.GetNumRows());
    };
    this.SetColWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("ColWidth",pas.SysUtils.IntToStr(AValue));
      this.SetTableData(this.GetTableData());
    };
    this.SetSelectedRow = function (AValue) {
      var v = "";
      this.myNode.SetAttributeValue$1("SelectedRow",pas.SysUtils.IntToStr(AValue),"Integer");
      v = this.GetSelectedValue();
    };
    this.SetSelectedCol = function (AValue) {
      var v = "";
      this.myNode.SetAttributeValue$1("SelectedCol",pas.SysUtils.IntToStr(AValue),"Integer");
      v = this.GetSelectedValue();
    };
    this.SetSelectedValue = function (AValue) {
      this.myNode.SetAttributeValue$1("SelectedValue",AValue,"String");
      this.SetCellValue(this.GetSelectedRow(),this.GetSelectedCol(),AValue);
    };
    this.SetNumRows = function (AValue) {
      var r0 = 0;
      var r = 0;
      r0 = this.GetNumRows();
      if (AValue > 0) {
        if (AValue > r0) {
          this.AddTableRows(AValue - r0)}
         else if (AValue < r0) for (var $l1 = r0 - 1, $end2 = AValue; $l1 >= $end2; $l1--) {
          r = $l1;
          this.DeleteRow(r);
        };
        this.myNode.SetAttributeValue$1("NumRows",pas.SysUtils.IntToStr(AValue),"Integer");
      };
    };
    this.SetNumCols = function (AValue) {
      var c0 = 0;
      var c = 0;
      c0 = this.GetNumCols();
      if (AValue > 0) {
        if (AValue > c0) {
          this.AddTableColumns(AValue - c0)}
         else if (AValue < c0) for (var $l1 = c0 - 1, $end2 = AValue; $l1 >= $end2; $l1--) {
          c = $l1;
          this.DeleteColumn(c);
        };
        this.myNode.SetAttributeValue$1("NumCols",pas.SysUtils.IntToStr(AValue),"Integer");
      };
    };
    this.SetHasHeaderRow = function (AValue) {
      this.myNode.SetAttributeValue$1("HasHeaderRow",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      this.SetTableData(this.ConstructDataString());
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    this.ConstructDataString = function () {
      var Result = "";
      var dataStr = "";
      dataStr = "[";
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        //alert('ob is '+ob.id);
        for (var i = 0, row; row = ob.rows[i]; i++) {
          if (i>0) { dataStr=dataStr+',';}
          dataStr=dataStr+'[';
          for (var j = 0, col; col = row.cells[j]; j++) {
            if (j>0) { dataStr=dataStr+','; }
            var str = row.cells[j].innerText;
            dataStr=dataStr+ '"'+str+'"';
          }
          dataStr=dataStr+']';
        }
      };
      dataStr = dataStr + "]";
      Result = dataStr;
      return Result;
    };
    this.ConstructTableStringFromArray = function (myArray) {
      var Result = "";
      var i = 0;
      var j = 0;
      var str = "";
      str = "[";
      for (var $l1 = 0, $end2 = rtl.length(myArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (i > 0) str = str + ",";
        str = str + "[";
        for (var $l3 = 0, $end4 = rtl.length(myArray[i]) - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          if (j > 0) str = str + ",";
          str = ((str + '"') + myArray[i][j]) + '"';
        };
        str = str + "]";
      };
      str = str + "]";
      Result = str;
      return Result;
    };
    this.GetCellValue = function (row, col) {
      var Result = "";
      var myval = "";
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        if (ob.rows.length > row) {
          if (ob.rows[row].cells.length > col) {
            var str=ob.rows[row].cells[col].innerText;
            //str=str.replace(/&nbsp;/g, " ");
            myval = str;
          }
        }
      };
      Result = myval;
      return Result;
    };
    this.SetCellValue = function (row, col, AValue) {
      if ((row >= 0) && (col >= 0)) {
        var ob = document.getElementById(this.NodeName+'Contents');
        if (ob!=null) {
          if (ob.rows.length > row) {
            if (ob.rows[row].cells.length > col) {
              if (ob.rows[row].cells[col].innerText != AValue) {
                ob.rows[row].cells[col].innerText = AValue;
                pas.XTable.TableChange(ob,this.NodeName);
              }
            }
          }
        };
      };
    };
    this.GetCellsAsArray = function () {
      var Result = [];
      var myArray = [];
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
      for (var i = 0, row; row = ob.rows[i]; i++) {
         myArray[i] = [];
         for (var j = 0, col; col = row.cells[j]; j++) {
           myArray[i][j] = row.cells[j].innerText;
        }
      }
      }
      //alert(myArray);
      Result = myArray;
      return Result;
    };
    this.AddTableRows = function (numRows) {
      var TheArray = [];
      var c = 0;
      var r = 0;
      var r1 = 0;
      TheArray = this.GetCellsAsArray();
      r1 = rtl.length(TheArray);
      TheArray = rtl.arraySetLength(TheArray,[],rtl.length(TheArray) + numRows);
      for (var $l1 = r1, $end2 = rtl.length(TheArray) - 1; $l1 <= $end2; $l1++) {
        r = $l1;
        TheArray[r] = rtl.arraySetLength(TheArray[r],"",rtl.length(TheArray[0]));
        for (var $l3 = 0, $end4 = rtl.length(TheArray[0]) - 1; $l3 <= $end4; $l3++) {
          c = $l3;
          TheArray[r][c] = "";
        };
      };
      this.SetTableData(this.ConstructTableStringFromArray(TheArray));
      this.SetNumRows(this.GetNumRows());
    };
    this.AddTableColumns = function (numCols) {
      var TheArray = [];
      var i = 0;
      var j = 0;
      var j0 = 0;
      TheArray = this.GetCellsAsArray();
      j0 = rtl.length(TheArray[0]);
      for (var $l1 = 0, $end2 = rtl.length(TheArray) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        TheArray[i] = rtl.arraySetLength(TheArray[i],"",j0 + numCols);
        for (var $l3 = j0, $end4 = rtl.length(TheArray[0]) - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          if (i === 0) {
            TheArray[i][j] = "hdr"}
           else TheArray[i][j] = "";
        };
      };
      this.SetTableData(this.ConstructTableStringFromArray(TheArray));
      this.SetNumCols(this.GetNumCols());
    };
    this.DeleteRow = function (r) {
      if ((r < 0) || (r > (this.GetNumRows() - 1))) {
        pas.StringUtils.ShowMessage(("DeleteRow " + pas.SysUtils.IntToStr(r)) + " out of range")}
       else {
        //alert('deleting row '+r);
        var ob = document.getElementById(this.NodeName+'Contents');
        ob.deleteRow(r);
        this.SetTableData(this.ConstructDataString());
        this.SetNumRows(this.GetNumRows());
      };
    };
    this.DeleteColumn = function (c) {
      if ((c < 0) || (c > (this.GetNumCols() - 1))) {
        pas.StringUtils.ShowMessage(("DeleteColumn " + pas.SysUtils.IntToStr(c)) + " out of range")}
       else {
        var ob = document.getElementById(this.NodeName+'Contents');
        if (ob!=null) {
        for (var i = 0, row; row = ob.rows[i]; i++) {
                row.deleteCell(c);
            } };
        this.SetTableData(this.ConstructDataString());
        this.SetNumCols(this.GetNumCols());
      };
    };
    this.DeleteSelectedRow = function () {
      var r = 0;
      var c = 0;
      r = this.GetSelectedRow();
      c = this.GetSelectedCol();
      if ((r < 0) || (c < 0)) {
        pas.StringUtils.ShowMessage("DeleteSelectedRow - row not selected")}
       else if (r < 1) {
        pas.StringUtils.ShowMessage("DeleteSelectedRow - cannot delete header row")}
       else {
        this.DeleteRow(r);
      };
    };
    this.DeleteSelectedColumn = function () {
      var r = 0;
      var c = 0;
      r = this.GetSelectedRow();
      c = this.GetSelectedCol();
      if ((r < 0) || (c < 0)) {
        pas.StringUtils.ShowMessage("DeleteTableColumn - column not selected")}
       else if ((c === 0) && (this.GetNumCols() === 1)) {
        pas.StringUtils.ShowMessage("DeleteTableColumn - cannot delete all columns")}
       else {
        this.DeleteColumn(c);
      };
    };
    var $r = this.$rtti;
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
    $r.addProperty("TableHeight",3,rtl.string,"GetTableHeight","SetTableHeight");
    $r.addProperty("TableWidth",3,rtl.string,"GetTableWidth","SetTableWidth");
    $r.addProperty("TableData",3,rtl.string,"GetTableData","SetTableData");
    $r.addProperty("ColWidth",3,rtl.longint,"GetColWidth","SetColWidth");
    $r.addProperty("SelectedRow",3,rtl.longint,"GetSelectedRow","SetSelectedRow");
    $r.addProperty("SelectedCol",3,rtl.longint,"GetSelectedCol","SetSelectedCol");
    $r.addProperty("SelectedValue",3,rtl.string,"GetSelectedValue","SetSelectedValue");
    $r.addProperty("NumCols",3,rtl.longint,"GetNumCols","SetNumCols");
    $r.addProperty("NumRows",3,rtl.longint,"GetNumRows","SetNumRows");
    $r.addProperty("HasHeaderRow",3,rtl.boolean,"GetHasHeaderRow","SetHasHeaderRow");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"TableWidth","String","150","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"TableHeight","String","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Top","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Table","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"HasHeaderRow","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"TableData","String",'[["a","b","c"],["1","2","3"]]',"",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SelectedRow","Integer","-1","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SelectedCol","Integer","-1","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"NumCols","Integer","3","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"NumRows","Integer","2","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ColWidth","Integer","40","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SelectedValue","String","","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXTable","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXTable";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ReadOnly = "";
    var LabelText = "";
    var OnFocusOutString = "";
    var OnClickString = "";
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    ReadOnly = MyNode.GetAttribute("ReadOnly",true).AttribValue;
    OnClickString = ((((('onclick="event.stopPropagation();pas.XTable.CellClick(event.target,\'' + ScreenObjectName) + "');") + "pas.Events.handleEvent(null,'Click','") + ScreenObjectName) + "', '');") + '" ';
    OnFocusOutString = ('onfocusout="pas.XTable.TableChange(this,\'' + ScreenObjectName) + '\');"';
    try{
        pas.XTable.AddTableStyles('');
    
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
        wrapper.style.display = 'flex';
        var goright =  'flex-e'+'nd';
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var ReadOnlyString = '';
        if (ReadOnly=='False') { ReadOnlyString = ' contenteditable ';}
    
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
    
        var TableString = '<table id='+MyObjectName+ ' '+
                           OnClickString +
                           OnFocusOutString +
                           ' style="display:inline-block; overflow:scroll; width:100%; height:100%;" '+
                           ReadOnlyString+' >' +
                             '<tr>'+
                               '<th>1</th>'+
                               '<th>2</th>'+
                               '<th>3</th>'+
                             '</tr>'+
                           '</table> ';
    
        HTMLString = labelstring+TableString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
      }
      catch(err) { alert(err.message+'  in XCheckBox.CreateXCheckBox');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXTable.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XProgressBar",["System","Classes","SysUtils","NodeUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXProgressBar",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetItemValue = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("ItemValue",true).AttribValue);
      return Result;
    };
    this.GetBarWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("BarWidth",true).AttribValue;
      return Result;
    };
    this.GetMaxVal = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("MaxVal",true).AttribValue);
      return Result;
    };
    this.SetItemValue = function (AValue) {
      this.myNode.SetAttributeValue$2("ItemValue",pas.SysUtils.IntToStr(AValue));
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.value=AValue;  };
    };
    this.SetBarWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("BarWidth",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.SetMaxVal = function (AValue) {
      this.myNode.SetAttributeValue$2("MaxVal",pas.SysUtils.IntToStr(AValue));
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.max=AValue;  };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("ItemValue",3,rtl.longint,"GetItemValue","SetItemValue");
    $r.addProperty("BarWidth",3,rtl.string,"GetBarWidth","SetBarWidth");
    $r.addProperty("MaxVal",3,rtl.longint,"GetMaxVal","SetMaxVal");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BarWidth","String","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Progress Bar","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MaxVal","Integer","100","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ItemValue","Integer","5","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXProgressBar","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXProgressBar";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ItemValue = "";
    var MaxVal = "";
    var LabelText = "";
    var OnClickString = "";
    ItemValue = MyNode.GetAttribute("ItemValue",true).AttribValue;
    MaxVal = MyNode.GetAttribute("MaxVal",true).AttribValue;
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value);" ';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
    
        var BarString = '<progress id='+MyObjectName+' style="display: inline-block; height:20px"  max='+MaxVal+' value='+ItemValue+
                                  OnClickString +
                                  '></progress>';
    
        HTMLString = labelstring+BarString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
      }
      catch(err) { alert(err.message+'  in XProgressBar.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXProgressBar.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XNumericSlider",["System","Classes","SysUtils","NodeUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXNumericSlider",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetItemValue = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("ItemValue",true).AttribValue);
      return Result;
    };
    this.GetBarWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("BarWidth",true).AttribValue;
      return Result;
    };
    this.GetMaxVal = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("MaxVal",true).AttribValue);
      return Result;
    };
    this.GetMinVal = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("MinVal",true).AttribValue);
      return Result;
    };
    this.SetItemValue = function (AValue) {
      this.myNode.SetAttributeValue$2("ItemValue",pas.SysUtils.IntToStr(AValue));
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.value=AValue;  };
    };
    this.SetBarWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("BarWidth",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.SetMaxVal = function (AValue) {
      this.myNode.SetAttributeValue$2("MaxVal",pas.SysUtils.IntToStr(AValue));
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.max=AValue;  };
    };
    this.SetMinVal = function (AValue) {
      this.myNode.SetAttributeValue$2("MinVal",pas.SysUtils.IntToStr(AValue));
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.min=AValue;  };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("ItemValue",3,rtl.longint,"GetItemValue","SetItemValue");
    $r.addProperty("BarWidth",3,rtl.string,"GetBarWidth","SetBarWidth");
    $r.addProperty("MaxVal",3,rtl.longint,"GetMaxVal","SetMaxVal");
    $r.addProperty("MinVal",3,rtl.longint,"GetMinVal","SetMinVal");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BarWidth","String","50","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Number Slider","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MinVal","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MaxVal","Integer","100","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ItemValue","Integer","5","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXNumericSlider","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXNumericSlider";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ItemValue = "";
    var MaxVal = "";
    var MinVal = "";
    var LabelText = "";
    var ReadOnly = "";
    var OnClickString = "";
    var OnChangeString = "";
    ItemValue = MyNode.GetAttribute("ItemValue",true).AttribValue;
    MaxVal = MyNode.GetAttribute("MaxVal",true).AttribValue;
    MinVal = MyNode.GetAttribute("MinVal",true).AttribValue;
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    ReadOnly = MyNode.GetAttribute("ReadOnly",true).AttribValue;
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value);" ';
    OnChangeString = (((('onchange="pas.NodeUtils.SetInterfaceProperty(\'' + ScreenObjectName) + "','ItemValue',this.value);") + "pas.Events.handleEvent(null,'Change','") + ScreenObjectName) + '\', this.value.toString());" ';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
        var ReadOnlyString = '';
        if (ReadOnly=='True') { ReadOnlyString = ' readonly ';}
    
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
    
        var SliderString = '<input type="range" id='+MyObjectName + ' '+
                     OnChangeString + ' '+
                     OnClickString + ' '+
                     '   '+ReadOnlyString+
                     ' value='+ItemValue+
                     ' min='+MinVal+' max='+MaxVal+' step=1 ></input>' ;
    
        HTMLString = labelstring+SliderString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
      }
      catch(err) { alert(err.message+'  in XNumericSlider.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXNumericSlider.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XNumberSpinner",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXNumberSpinner",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
    };
    this.GetMaxVal = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("MaxVal",true).AttribValue);
      return Result;
    };
    this.GetMinVal = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("MinVal",true).AttribValue);
      return Result;
    };
    this.GetStepSize = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("StepSize",true).AttribValue);
      return Result;
    };
    this.GetItemValue = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("ItemValue",true).AttribValue);
      return Result;
    };
    this.GetReadOnly = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("ReadOnly",true).AttribValue);
      return Result;
    };
    this.GetSpinnerWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("SpinnerWidth",true).AttribValue;
      return Result;
    };
    this.SetMaxVal = function (AValue) {
      this.myNode.SetAttributeValue$2("MaxVal",pas.SysUtils.IntToStr(AValue));
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.max=AValue;  };
    };
    this.SetMinVal = function (AValue) {
      this.myNode.SetAttributeValue$2("MinVal",pas.SysUtils.IntToStr(AValue));
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.min=AValue;  };
    };
    this.SetStepSize = function (AValue) {
      this.myNode.SetAttributeValue$2("StepSize",pas.SysUtils.IntToStr(AValue));
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.step=AValue;  };
    };
    this.SetItemValue = function (AValue) {
      this.myNode.SetAttributeValue$2("ItemValue",pas.SysUtils.IntToStr(AValue));
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.value=AValue;  };
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        ob.readOnly = AValue  };
    };
    this.SetSpinnerWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("SpinnerWidth",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("MaxVal",3,rtl.longint,"GetMaxVal","SetMaxVal");
    $r.addProperty("MinVal",3,rtl.longint,"GetMinVal","SetMinVal");
    $r.addProperty("StepSize",3,rtl.longint,"GetStepSize","SetStepSize");
    $r.addProperty("ItemValue",3,rtl.longint,"GetItemValue","SetItemValue");
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
    $r.addProperty("SpinnerWidth",3,rtl.string,"GetSpinnerWidth","SetSpinnerWidth");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpinnerWidth","String","50","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Number Spinner","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MinVal","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"MaxVal","Integer","100","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"StepSize","Integer","1","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ItemValue","Integer","5","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXNumberSpinner","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXNumberSpinner";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ItemValue = "";
    var LabelText = "";
    var MinVal = "";
    var MaxVal = "";
    var StepSize = "";
    var ReadOnly = false;
    var OnChangeString = "";
    var OnClickString = "";
    MinVal = MyNode.GetAttribute("MinVal",true).AttribValue;
    MaxVal = MyNode.GetAttribute("MaxVal",true).AttribValue;
    StepSize = MyNode.GetAttribute("StepSize",true).AttribValue;
    ItemValue = MyNode.GetAttribute("ItemValue",true).AttribValue;
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    ReadOnly = pas.SysUtils.StrToBool(MyNode.GetAttribute("ReadOnly",true).AttribValue);
    OnClickString = ((('onclick="ob=document.getElementById(\'' + ScreenObjectName) + "');ob.focus();pas.Events.handleEvent(null,'Click','") + ScreenObjectName) + '\', this.value);event.stopPropagation();" ';
    OnChangeString = (((('onchange="pas.NodeUtils.SetInterfaceProperty(\'' + ScreenObjectName) + "','ItemValue',this.value); ") + "pas.Events.handleEvent(null,'Change','") + ScreenObjectName) + '\', this.value, \'ItemValue\');" ';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var ReadOnlyString = '';
        if (ReadOnly==true) { ReadOnlyString = ' readonly ';}
    
        var inputtext= ItemValue;
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
        var SpinnerString = '<input type="number"  id='+MyObjectName+' ' +
                              OnClickString +
                              OnChangeString +
                     ' style="display: inline-block; '+
                     '" value='+ItemValue+' '+ReadOnlyString+
                     ' min='+MinVal+' max='+MaxVal+' step='+StepSize+'></input>' ;
    
        HTMLString = labelstring+SpinnerString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
      }
      catch(err) { alert(err.message+'  in XNumberSpinner.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXNumberSpinner.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XComboBox",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXComboBox",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
    };
    this.GetItemIndex = function () {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(this.myNode.GetAttribute("ItemIndex",true).AttribValue);
      return Result;
    };
    this.GetItemValue = function () {
      var Result = "";
      var i = 0;
      var val = "";
      i = pas.SysUtils.StrToInt(this.myNode.GetAttribute("ItemIndex",true).AttribValue);
      if (i > -1) {
        var ob = document.getElementById(this.NodeName+'Contents');
        if (ob!=null) {
          val=ob.options[i].value;
        };
        Result = val;
      };
      return Result;
    };
    this.GetReadOnly = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("ReadOnly",true).AttribValue);
      return Result;
    };
    this.GetBoxWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("BoxWidth",true).AttribValue;
      return Result;
    };
    this.GetOptionList = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("OptionList",true).AttribValue;
      return Result;
    };
    this.SetItemIndex = function (AValue) {
      this.myNode.SetAttributeValue$1("ItemIndex",pas.SysUtils.IntToStr(AValue),"Integer");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         ob.selectedIndex=AValue;
         this.myNode.SetAttributeValue('ItemValue',ob.value,'String',false);
         };
    };
    this.SetItemValue = function (AValue) {
      var i = 0;
      var options = null;
      var tmp = "";
      tmp = this.GetOptionList();
      options = pas.StringUtils.JSONStringToStringList(this.GetOptionList());
      tmp = pas.StringUtils.StringListToJSONString(options);
      i = options.IndexOf(AValue);
      this.SetItemIndex(i);
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        ob.readOnly = AValue  };
    };
    this.SetBoxWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("BoxWidth",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      //  if (ob==null) {alert(this.NodeName+'Contents'+'  not found');}
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.SetOptionList = function (AValue) {
      this.myNode.SetAttributeValue$1("OptionList",AValue,"String");
      function removeOptions(selectbox)
          {
              var i;
              for(i = selectbox.options.length - 1 ; i >= 0 ; i--)
              {
                  selectbox.remove(i);
              }
          }
      
          var ob = document.getElementById(this.NodeName+'Contents');
          if (ob!=null) {
            removeOptions(ob);
            var selectedIndex = this.ItemIndex;
      
            var optionlistarray=JSON.parse( AValue);
            for (var i=0; i<optionlistarray.length; i++){
              var option = document.createElement("option");
              option.text = optionlistarray[i];
              if (i==this.ItemIndex ){option.selected=true;}
              ob.add(option);
            }
          };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("ItemIndex",3,rtl.longint,"GetItemIndex","SetItemIndex");
    $r.addProperty("ItemValue",3,rtl.string,"GetItemValue","SetItemValue");
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
    $r.addProperty("BoxWidth",3,rtl.string,"GetBoxWidth","SetBoxWidth");
    $r.addProperty("OptionList",3,rtl.string,"GetOptionList","SetOptionList");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BoxWidth","String","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Combo Box","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ItemIndex","Integer","-1","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"OptionList","String",'["Option 1","Option 2","Option 3"]',"",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXComboBox","ItemValue");
    pas.WrapperPanel.SuppressDesignerProperty("TXComboBox","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXComboBox";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ItemIndex = "";
    var LabelText = "";
    var OptionList = "";
    var ReadOnly = false;
    var OnChangeString = "";
    var OnClickString = "";
    OptionList = MyNode.GetAttribute("OptionList",true).AttribValue;
    ItemIndex = MyNode.GetAttribute("ItemIndex",true).AttribValue;
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    ReadOnly = pas.SysUtils.StrToBool(MyNode.GetAttribute("ReadOnly",true).AttribValue);
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value);" ';
    OnChangeString = (((('onchange="pas.NodeUtils.SetInterfaceProperty(\'' + ScreenObjectName) + "','ItemIndex',pas.SysUtils.IntToStr(this.selectedIndex)); ") + "pas.Events.handleEvent(null,'Change','") + ScreenObjectName) + '\', this.options[selectedIndex].value, \'ItemValue\');" ';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var ReadOnlyString = '';
        if (ReadOnly==true) { ReadOnlyString = ' readonly ';}
    
        var TypeString = 'text';
    
        var inputtext= ItemIndex;
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
        var ComboString = '<select id="'+MyObjectName+'" ' + ReadOnlyString +
                      OnChangeString +
                      OnClickString +
                      ' style="display: inline-block;"   value='+ItemIndex+'> ';
    
         var optionlistarray=JSON.parse( OptionList);
         for (var i=0; i<optionlistarray.length; i++){
           var selectedflag ='';
           if (i==ItemIndex ){selectedflag = 'selected'}
           ComboString = ComboString +'<option value="'+optionlistarray[i]+'" '+selectedflag+'>'+optionlistarray[i]+'</option> ';
         }
         ComboString = ComboString +'</select> ';
    
        HTMLString = labelstring+ComboString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
        // attempt to fix the height for a combo box to one line-height... (still not displayed same as editbox...tbd!!!!)
        var dummyEBoxString = '<input type="'+TypeString+'"  id='+MyObjectName+'dummy ' +
                         ' style="display: inline-block;" >';
        wrapper.insertAdjacentHTML('beforeend', dummyEBoxString);
        var ob=document.getElementById(MyObjectName);
        var dum=document.getElementById(MyObjectName+'dummy');
        var obStyle = window.getComputedStyle(dum);
        ob.style.height = obStyle.getPropertyValue('line-height');
        //alert('combobox height='+ob.style.height);
        wrapper.removeChild(dum);
      }
      catch(err) { alert(err.message+'  in XComboBox.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXComboBox.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XDatePicker",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXDatePicker",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
    };
    this.GetItemValue = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ItemValue",true).AttribValue;
      return Result;
    };
    this.GetReadOnly = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("ReadOnly",true).AttribValue);
      return Result;
    };
    this.GetBoxWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("BoxWidth",true).AttribValue;
      return Result;
    };
    this.SetItemValue = function (AValue) {
      var ob = document.getElementById(this.NodeName+'Contents');
          if (ob!=null) {
              //alert('set '+AValue);
              // format is DD/MM/YYYY from the property editor, OR YYYY-MM-DD from the picker widget
              var bits = AValue.split('/');
              if (bits.length > 1) {
              var mmddyyyy = bits[1]+'/'+bits[0]+'/'+bits[2];
              }
              else
              {
                bits = AValue.split('-');
                mmddyyyy = bits[1]+'/'+bits[2]+'/'+bits[0];
              }
              //alert('formatted '+mmddyyyy);
              var date = new Date(mmddyyyy);   // use format MM/DD/YYYY
      
              var month = date.getMonth() +1;
              var monthstr = month.toString();
              if (month<10) {monthstr='0'+monthstr;}
      
              var day = date.getDate();
              var daystr = day.toString();
              if (day<10) {daystr='0'+daystr;}
      
              var year = date.getFullYear();
              //alert(daystr+'/'+monthstr+'/'+year);
      
              ob.value=year+'-'+monthstr+'-'+daystr;      // wants format YYYY-MM-DD
              this.SetAttributeValue('ItemValue',daystr+'/'+monthstr+'/'+year,'String',false); // set property format DD/MM/YYYY
              };
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        ob.readOnly = AValue  };
    };
    this.SetBoxWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("BoxWidth",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("ItemValue",3,rtl.string,"GetItemValue","SetItemValue");
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
    $r.addProperty("BoxWidth",3,rtl.string,"GetBoxWidth","SetBoxWidth");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BoxWidth","String","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Date Picker","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ItemValue","String","01\/01\/2000","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXDatePicker","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXDatePicker";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ItemValue = "";
    var LabelText = "";
    var ReadOnly = false;
    var OnChangeString = "";
    var OnClickString = "";
    ItemValue = MyNode.GetAttribute("ItemValue",true).AttribValue;
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    ReadOnly = pas.SysUtils.StrToBool(MyNode.GetAttribute("ReadOnly",true).AttribValue);
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value.toString());" ';
    OnChangeString = (((('onchange="pas.NodeUtils.SetInterfaceProperty(\'' + ScreenObjectName) + "','ItemValue',this.value.toString()); ") + "pas.Events.handleEvent(null,'Change','") + ScreenObjectName) + '\', this.value.toString(), \'ItemValue\');" ';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var ReadOnlyString = '';
        if (ReadOnly==true) { ReadOnlyString = ' readonly ';}
    
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
        var PickerString = '<input type="date" id='+MyObjectName+' '+
                            OnClickString +
                            OnChangeString +
                            ' style="display: inline-block;"   '+ReadOnlyString+'> ';
    
        HTMLString = labelstring+PickerString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
      }
      catch(err) { alert(err.message+'  in XDatePicker.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXDatePicker.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XColorPicker",["System","Classes","SysUtils","NodeUtils","StringUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXColorPicker",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
    };
    this.GetItemValue = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ItemValue",true).AttribValue;
      return Result;
    };
    this.GetReadOnly = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("ReadOnly",true).AttribValue);
      return Result;
    };
    this.GetBoxWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("BoxWidth",true).AttribValue;
      return Result;
    };
    this.SetItemValue = function (AValue) {
      this.myNode.SetAttributeValue$2("ItemValue",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
          ob.value=AValue;
          };
    };
    this.SetReadOnly = function (AValue) {
      this.myNode.SetAttributeValue$1("ReadOnly",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        ob.readOnly = AValue  };
    };
    this.SetBoxWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("BoxWidth",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("ItemValue",3,rtl.string,"GetItemValue","SetItemValue");
    $r.addProperty("ReadOnly",3,rtl.boolean,"GetReadOnly","SetReadOnly");
    $r.addProperty("BoxWidth",3,rtl.string,"GetBoxWidth","SetBoxWidth");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BoxWidth","String","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Colour Picker","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ReadOnly","Boolean","False","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ItemValue","String","","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXColorPicker","BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXColorPicker";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var ItemValue = "";
    var LabelText = "";
    var ReadOnly = false;
    var OnChangeString = "";
    var OnClickString = "";
    ItemValue = MyNode.GetAttribute("ItemValue",true).AttribValue;
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    ReadOnly = pas.SysUtils.StrToBool(MyNode.GetAttribute("ReadOnly",true).AttribValue);
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value.toString());" ';
    OnChangeString = (((('onchange="pas.NodeUtils.SetInterfaceProperty(\'' + ScreenObjectName) + "','ItemValue',this.value.toString()); ") + "pas.Events.handleEvent(null,'Change','") + ScreenObjectName) + '\', this.value.toString(), \'ItemValue\');" ';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var NodeIDString = "'"+ScreenObjectName+"'";
        var MyObjectName=ScreenObjectName+'Contents';
    
        var ReadOnlyString = '';
        if (ReadOnly==true) { ReadOnlyString = ' readonly ';}
    
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
        var PickerString = '<input type="color"  id='+MyObjectName+' '+
                            OnClickString +
                            OnChangeString +
                           ' style="display: inline-block;" value='+ItemValue+' '+ReadOnlyString+'> ';
    
        HTMLString = labelstring+PickerString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
      }
      catch(err) { alert(err.message+'  in XColorPicker.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXColorPicker.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XImage",["System","Classes","SysUtils","NodeUtils","HTMLUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXImage",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetSource = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Source",true).AttribValue;
      return Result;
    };
    this.GetImageWidth = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ImageWidth",true).AttribValue;
      return Result;
    };
    this.GetImageHeight = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("ImageHeight",true).AttribValue;
      return Result;
    };
    this.SetSource = function (AValue) {
      this.myNode.SetAttributeValue$2("Source",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
         if (AValue=='') {
           ob.src='dfltImage.gif';
         }
         else {
         try{
           ob.src=AValue
           }
               catch(err) { alert(err.message+'  in XImage.SetSource '+AValue);}
           }
         };
    };
    this.SetImageWidth = function (AValue) {
      this.myNode.SetAttributeValue$2("ImageWidth",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'W',AValue);
    };
    this.SetImageHeight = function (AValue) {
      this.myNode.SetAttributeValue$2("ImageHeight",AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      pas.HTMLUtils.SetHeightWidthHTML(this,ob,'H',AValue);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.SetMyEventTypes();
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("Source",3,rtl.string,"GetSource","SetSource");
    $r.addProperty("ImageHeight",3,rtl.string,"GetImageHeight","SetImageHeight");
    $r.addProperty("ImageWidth",3,rtl.string,"GetImageWidth","SetImageWidth");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ImageWidth","String","250","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ImageHeight","String","200","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Right","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","Image","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Source","String","","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty("TXImage","ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty("TXImage","ContainerWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXImage";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var Source = "";
    var LabelText = "";
    var OnClickString = "";
    var marginString = "";
    LabelText = MyNode.GetAttribute("LabelText",true).AttribValue;
    Source = MyNode.GetAttribute("Source",true).AttribValue;
    marginString = ((((((("margin:" + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + " ") + pas.HTMLUtils.glbMarginSpacing) + ";";
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', \'\');" ';
    try{
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var MyObjectName=ScreenObjectName+'Contents';
    
        var labelstring='<label for="'+MyObjectName+'" id="'+MyObjectName+'Lbl'+'">'+LabelText+'</label>';
    
        var ImageString = ' <img  id='+MyObjectName+ ' style="display: inline-block;" src='+Source+' '+
                             OnClickString +
                             ' >';
    
        var HTMLString = labelstring+ImageString;
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
        }
        catch(err) { alert(err.message+'  in XImage.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXImage.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XGroupBox",["System","Classes","SysUtils","NodeUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXGroupBox",pas.WrapperPanel.TWrapperPanel,function () {
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
    };
    this.GetCaption = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("Caption",true).AttribValue;
      return Result;
    };
    this.SetCaption = function (AValue) {
      var AVal = "";
      this.myNode.SetAttributeValue$2("Caption",AValue);
      AVal = pas.SysUtils.UpperCase(AValue);
      var ob = document.getElementById(this.NodeName+'Contents');
      if (ob!=null) {
        };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeType = $impl.MyNodeType;
      this.MyForm = MyForm;
      this.FAlignChildrenVertical = true;
      this.SetMyEventTypes();
      this.FIsContainer = true;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    var $r = this.$rtti;
    $r.addProperty("Caption",3,rtl.string,"GetCaption","SetCaption");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerWidth","String","300px","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ContainerHeight","String","300px","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"BgColor","Color","#555555","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Caption","String","Group Caption","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"LabelText");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXGroupBox";
  $impl.myDefaultAttribs = [];
  $impl.CreateWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var Caption = "";
    var OnClickString = "";
    Caption = pas.SysUtils.UpperCase(MyNode.GetAttribute("Caption",true).AttribValue);
    OnClickString = ('onclick="event.stopPropagation();pas.Events.handleEvent(null,\'Click\',\'' + ScreenObjectName) + '\', this.value);" ';
    try{
    
        var wrapper = pas.HTMLUtils.CreateWrapperDiv(MyNode,ParentNode,'UI',ScreenObjectName,$impl.MyNodeType,position);
    
        var HTMLString='';
        var MyObjectName=ScreenObjectName+'Contents';
    
       // HTMLString = '<div  id='+MyObjectName+ ' style=" height:100%; width:100%; position:relative; z-index:0;" ' +
        HTMLString = '<div  id='+MyObjectName+ ' style=" height:100%; width:100%; z-index:0;"  class="vboxNoStretch" ' +
                     OnClickString +
                      '><legend>'+Caption+'</legend></div>';
    
    
        var wrapper=document.getElementById(ScreenObjectName);
        wrapper.insertAdjacentHTML('beforeend', HTMLString);
    
      }
      catch(err) { alert(err.message+'  in XScrollBox.CreateWidget');};
    MyNode.ScreenObject = MyNode;
    pas.NodeUtils.RefreshComponentProps(MyNode);
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXGroupBox.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XStore",["System","Classes","SysUtils","NodeUtils","HTMLUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXStore",pas.WrapperPanel.TWrapperPanel,function () {
    this.getDataValue = function () {
      var Result = "";
      Result = pas.HTMLUtils.ReadFromLocalStore(this.getKeyName());
      return Result;
    };
    this.getKeyName = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("KeyName",true).AttribValue;
      return Result;
    };
    this.setDataValue = function (AValue) {
      this.myNode.SetAttributeValue$2("DataValue",AValue);
      pas.HTMLUtils.WriteToLocalStore(this.getKeyName(),AValue);
    };
    this.setKeyName = function (AValue) {
      this.myNode.SetAttributeValue$2("KeyName",AValue);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeClass = "NV";
      this.NodeType = "TXStore";
      this.MyForm = MyForm;
      this.myNode.myEventTypes = pas.Classes.TStringList.$create("Create$1");
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    this.Destroy = function () {
      pas.HTMLUtils.ClearLocalStore(this.getKeyName());
      pas.System.TObject.Destroy.call(this);
    };
    var $r = this.$rtti;
    $r.addProperty("KeyName",3,rtl.string,"getKeyName","setKeyName");
    $r.addProperty("DataValue",3,rtl.string,"getDataValue","setDataValue");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"KeyName","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"DataValue","String","","",false);
    pas.NodeUtils.AddNodeFuncLookup("TXStore",$impl.CreateinterfaceObj,$impl.CreateStore);
    pas.WrapperPanel.SuppressDesignerProperty("TXStore","Alignment");
    pas.WrapperPanel.SuppressDesignerProperty("TXStore","IsVisible");
    pas.WrapperPanel.SuppressDesignerProperty("TXStore","LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXStore","LabelText");
    pas.WrapperPanel.SuppressDesignerProperty("TXStore","Hint");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.myDefaultAttribs = [];
  $impl.CreateStore = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    MyNode.ScreenObject = MyNode;
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXStore.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XTrapEvents",["System","Classes","SysUtils","NodeUtils","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TXTrapEvents",pas.WrapperPanel.TWrapperPanel,function () {
    this.Create$3 = function (MyForm, NodeName) {
      pas.WrapperPanel.TWrapperPanel.Create$2.call(this,NodeName);
      this.NodeClass = "NV";
      this.NodeType = "TXTrapEvents";
      this.MyForm = MyForm;
      this.myNode.myEventTypes = pas.Classes.TStringList.$create("Create$1");
      this.SetMyEventTypes();
      this.FIsContainer = false;
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Any");
    };
  });
  $mod.$init = function () {
    pas.NodeUtils.AddNodeFuncLookup("TXTrapEvents",$impl.CreateinterfaceObj,$impl.CreateTrapper);
    pas.WrapperPanel.SuppressDesignerProperty("TXTrapEvents","Alignment");
    pas.WrapperPanel.SuppressDesignerProperty("TXTrapEvents","IsVisible");
    pas.WrapperPanel.SuppressDesignerProperty("TXTrapEvents","LabelPos");
    pas.WrapperPanel.SuppressDesignerProperty("TXTrapEvents","LabelText");
    pas.WrapperPanel.SuppressDesignerProperty("TXTrapEvents","Hint");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.CreateTrapper = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    MyNode.ScreenObject = MyNode;
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXTrapEvents.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XHTMLText",["System","Classes","SysUtils","StringUtils","NodeUtils","XIFrame","UtilsJSCompile","XForm","XCode","XButton","XVBox","XTabControl","XMemo","WrapperPanel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TXHTMLMessage = function (s) {
    if (s) {
      this.objid = s.objid;
      this.mtype = s.mtype;
      this.mdata = s.mdata;
    } else {
      this.objid = "";
      this.mtype = "";
      this.mdata = "";
    };
    this.$equal = function (b) {
      return (this.objid === b.objid) && ((this.mtype === b.mtype) && (this.mdata === b.mdata));
    };
  };
  $mod.$rtti.$Record("TXHTMLMessage",{}).addFields("objid",rtl.string,"mtype",rtl.string,"mdata",rtl.string);
  this.HandleTXHTMLMessage = function (msg) {
    var ItemNode = null;
    var message = "";
    if (msg.objid !== "") {
      ItemNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,msg.objid,false);
      if (ItemNode !== null) {
        if (msg.mtype === "titleChange") {
          message = msg.mdata;
          if (message !== "") {
            message = ItemNode.ExtractTextFromTitle(message);
            if (pas.SysUtils.Trim(message).length > 0) {
              ItemNode.SetSourceText(message);
            };
          };
        };
      };
    };
  };
  rtl.createClass($mod,"TXHTMLText",pas.XIFrame.TXIFrame,function () {
    this.GetIsEditable = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("IsEditable",true).AttribValue);
      return Result;
    };
    this.GetSourceText = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("SourceText",true).AttribValue;
      return Result;
    };
    this.GetHeaderHTML = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("HeaderHTML",true).AttribValue;
      return Result;
    };
    this.GetFooterHTML = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("FooterHTML",true).AttribValue;
      return Result;
    };
    this.SetIsEditable = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("IsEditable",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      };
    };
    this.SetSourceText = function (AValue) {
      var URLStringList = null;
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("SourceText",AValue,"String");
        URLStringList = this.CreateTextURL(AValue);
        this.SetHTMLSource(URLStringList.GetTextStr());
        URLStringList = rtl.freeLoc(URLStringList);
      };
    };
    this.SetHeaderHTML = function (AValue) {
      if (this.myNode !== null) {
        if (AValue !== this.myNode.GetAttribute("HeaderHTML",false).AttribValue) {
          this.myNode.SetAttributeValue$1("HeaderHTML",AValue,"String");
          this.SetSourceText(this.GetSourceText());
        };
      };
    };
    this.SetFooterHTML = function (AValue) {
      if (this.myNode !== null) {
        if (AValue !== this.myNode.GetAttribute("FooterHTML",false).AttribValue) {
          this.myNode.SetAttributeValue$1("FooterHTML",AValue,"String");
          this.SetSourceText(this.GetSourceText());
        };
      };
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.XIFrame.TXIFrame.Create$3.call(this,MyForm,NodeName);
      this.NodeType = "TXHTMLText";
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    this.CreateTextURL = function (txt) {
      var Result = null;
      var WYSIWYGHEADER = null;
      var WYSIWYGFOOTER = null;
      var TheText = null;
      var OutputStringList = null;
      var startstring = "";
      var endstring = "";
      var InnerStartLength = 0;
      var InnerEndLength = 0;
      WYSIWYGHEADER = pas.Classes.TStringList.$create("Create$1");
      WYSIWYGFOOTER = pas.Classes.TStringList.$create("Create$1");
      TheText = pas.Classes.TStringList.$create("Create$1");
      OutputStringList = pas.Classes.TStringList.$create("Create$1");
      startstring = '<div contenteditable="false" class="wysiwyg-content">';
      endstring = "<\/div>";
      InnerStartLength = startstring.length;
      InnerEndLength = endstring.length;
      TheText.Add(startstring);
      TheText.Add(txt);
      TheText.Add(endstring);
      WYSIWYGHEADER.Add("<!DOCTYPE html>");
      WYSIWYGHEADER.Add("<html>");
      WYSIWYGHEADER.Add("<head>");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add(("<title>TXHTMLText " + this.myNode.NodeName) + "<\/title>");
      WYSIWYGHEADER.Add("<\/head>");
      WYSIWYGHEADER.Add("<body>");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add('<div id="FrameContent" class="content" style="background-color:powderblue; ">');
      WYSIWYGHEADER.Add(this.myNode.GetAttribute("HeaderHTML",false).AttribValue);
      WYSIWYGHEADER.Add('      <div id="thetext" class="wysiwyg" style="height: 100%; width: 100%; background-color:white; border-style: solid;border-width:thin;">');
      WYSIWYGFOOTER.Add("      <\/div>");
      WYSIWYGFOOTER.Add(this.myNode.GetAttribute("FooterHTML",false).AttribValue);
      WYSIWYGFOOTER.Add("    <\/div>");
      WYSIWYGFOOTER.Add("<\/body>");
      WYSIWYGFOOTER.Add("<\/html>");
      OutputStringList.AddStrings(WYSIWYGHEADER);
      OutputStringList.AddStrings(TheText);
      OutputStringList.AddStrings(WYSIWYGFOOTER);
      Result = OutputStringList;
      WYSIWYGHEADER = rtl.freeLoc(WYSIWYGHEADER);
      WYSIWYGFOOTER = rtl.freeLoc(WYSIWYGFOOTER);
      TheText = rtl.freeLoc(TheText);
      return Result;
    };
    this.ExtractTextFromTitle = function (message) {
      var Result = "";
      var str = "";
      var StartPos = 0;
      var EndPos = 0;
      str = message;
      StartPos = pas.System.Pos("Z!Z!Z",str);
      if (StartPos > 0) {
        str = pas.System.Copy(str,StartPos + 5,999999);
        EndPos = pas.System.Pos("Z!Z!Z",str);
        if (EndPos > 0) str = pas.System.Copy(str,1,EndPos - 1);
      } else str = "Z!Z!Z";
      Result = str;
      return Result;
    };
    this.SetMyEventTypes$1 = function () {
      this.myEventTypes.Add("Click");
    };
    var $r = this.$rtti;
    $r.addProperty("IsEditable",3,rtl.boolean,"GetIsEditable","SetIsEditable");
    $r.addProperty("SourceText",3,rtl.string,"GetSourceText","SetSourceText");
    $r.addProperty("HeaderHTML",3,rtl.string,"GetHeaderHTML","SetHeaderHTML");
    $r.addProperty("FooterHTML",3,rtl.string,"GetFooterHTML","SetFooterHTML");
  });
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"FrameWidth","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"FrameHeight","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Top","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","HTML Text","",false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"HTMLSource","String","","",false,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsEditable","Boolean","True","Allow the text page to be edited",false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Showing","Boolean","False","When not embedded, set this to display the text in a standalone browser page",false,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SourceText","String","...text...","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"HeaderHTML","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"FooterHTML","String","","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateHTMLTextWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"HTMLSource");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ActualHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ActualWidth");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXHTMLText";
  $impl.myDefaultAttribs = [];
  $impl.CreateHTMLTextWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    var h = 0;
    var w = 0;
    pas.XIFrame.DoCreateFrameWidget(MyNode,ParentNode,ScreenObjectName,position);
    NewWidget = MyNode;
    h = NewWidget.GetActualHeight();
    w = NewWidget.GetActualWidth();
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXHTMLText.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("XHTMLEditor",["System","Classes","SysUtils","StringUtils","NodeUtils","XIFrame","UtilsJSCompile","XForm","XCode","XButton","XVBox","XTabControl","XMemo","EventsInterface","WrapperPanel","Events"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TXHTMLMessage = function (s) {
    if (s) {
      this.objid = s.objid;
      this.mtype = s.mtype;
      this.mdata = s.mdata;
    } else {
      this.objid = "";
      this.mtype = "";
      this.mdata = "";
    };
    this.$equal = function (b) {
      return (this.objid === b.objid) && ((this.mtype === b.mtype) && (this.mdata === b.mdata));
    };
  };
  $mod.$rtti.$Record("TXHTMLMessage",{}).addFields("objid",rtl.string,"mtype",rtl.string,"mdata",rtl.string);
  this.HandleTXHTMLMessage = function (msg) {
    var ItemNode = null;
    var message = "";
    if (msg.objid !== "") {
      ItemNode = pas.NodeUtils.FindDataNodeById(pas.NodeUtils.SystemNodeTree,msg.objid,false);
      if (ItemNode !== null) {
        if (msg.mtype === "titleChange") {
          message = msg.mdata;
          if (message !== "") {
            message = ItemNode.ExtractTextFromTitle(message);
            if (pas.SysUtils.Trim(message).length > 0) {
              ItemNode.SetSourceText(message);
            };
          } else {
            ItemNode.SetShowing(false);
            pas.Events.handleEvent$2("HTMLEditorBrowserClosed",ItemNode.NodeName,"");
          };
        };
      };
    };
  };
  rtl.createClass($mod,"TXHTMLEditor",pas.XIFrame.TXIFrame,function () {
    this.$init = function () {
      pas.XIFrame.TXIFrame.$init.call(this);
      this.fHandleChange = null;
    };
    this.$final = function () {
      this.fHandleChange = undefined;
      pas.XIFrame.TXIFrame.$final.call(this);
    };
    this.GetIsEmbedded = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("IsEmbedded",true).AttribValue);
      return Result;
    };
    this.GetIsEditable = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("IsEditable",true).AttribValue);
      return Result;
    };
    this.GetShowing = function () {
      var Result = false;
      Result = pas.StringUtils.MyStrToBool(this.myNode.GetAttribute("GetShowing",true).AttribValue);
      return Result;
    };
    this.GetSourceText = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("SourceText",true).AttribValue;
      return Result;
    };
    this.GetHeaderHTML = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("HeaderHTML",true).AttribValue;
      return Result;
    };
    this.GetFooterHTML = function () {
      var Result = "";
      Result = this.myNode.GetAttribute("FooterHTML",true).AttribValue;
      return Result;
    };
    this.SetIsEmbedded = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("IsEmbedded",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
        if (AValue === false) {
          this.SetIsVisible(false)}
         else {
          this.SetIsVisible(true);
          this.SetSourceText(this.GetSourceText());
        };
      };
    };
    this.SetIsEditable = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("IsEditable",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
      };
    };
    this.SetShowing = function (AValue) {
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("Showing",pas.StringUtils.MyBoolToStr(AValue),"Boolean");
        if (this.GetIsEmbedded() === false) {
          if (AValue === true) {
            this.PopUpBrowser()}
           else {
            this.CloseBrowserWindow();
          };
        };
      };
    };
    this.SetSourceText = function (AValue) {
      var URLStringList = null;
      if (this.myNode !== null) {
        this.myNode.SetAttributeValue$1("SourceText",AValue,"String");
        URLStringList = this.CreateTextURL();
        this.SetHTMLSource(URLStringList.GetTextStr());
      };
    };
    this.SetHeaderHTML = function (AValue) {
      if (this.myNode !== null) {
        if (AValue !== this.myNode.GetAttribute("HeaderHTML",false).AttribValue) {
          this.myNode.SetAttributeValue$1("HeaderHTML",AValue,"String");
          this.SetSourceText(this.GetSourceText());
        };
      };
    };
    this.SetFooterHTML = function (AValue) {
      if (this.myNode !== null) {
        if (AValue !== this.myNode.GetAttribute("FooterHTML",false).AttribValue) {
          this.myNode.SetAttributeValue$1("FooterHTML",AValue,"String");
          this.SetSourceText(this.GetSourceText());
        };
      };
    };
    this.PopUpBrowser = function () {
      var URLStringList = null;
      URLStringList = this.CreateTextURL();
      if (this.GetIsEmbedded() === false) {
        this.LaunchHTML("Data",URLStringList.GetTextStr(),"TXHTMLEditor");
      } else {
        this.SetHTMLSource(URLStringList.GetTextStr());
      };
      URLStringList = rtl.freeLoc(URLStringList);
    };
    this.Create$3 = function (MyForm, NodeName) {
      pas.XIFrame.TXIFrame.Create$3.call(this,MyForm,NodeName);
      this.NodeType = "TXHTMLEditor";
      this.FIsContainer = false;
      pas.NodeUtils.SetNodePropDefaults(this,$impl.myDefaultAttribs);
    };
    this.CreateTextURL = function () {
      var Result = null;
      var WYSIWYGHEADER = null;
      var WYSIWYGFOOTER = null;
      var HelpText = null;
      var OutputStringList = null;
      var startstring = "";
      var endstring = "";
      var InnerStartLength = 0;
      var InnerEndLength = 0;
      var ActionBarClass = "";
      WYSIWYGHEADER = pas.Classes.TStringList.$create("Create$1");
      WYSIWYGFOOTER = pas.Classes.TStringList.$create("Create$1");
      HelpText = pas.Classes.TStringList.$create("Create$1");
      OutputStringList = pas.Classes.TStringList.$create("Create$1");
      if (this.GetIsEditable() === true) {
        startstring = '<div contenteditable="true"  class="wysiwyg-content" id = "my_wysiwyg_editor">'}
       else startstring = '<div contenteditable="false" class="wysiwyg-content" id = "my_wysiwyg_editor">';
      endstring = "<\/div>";
      InnerStartLength = startstring.length;
      InnerEndLength = endstring.length;
      HelpText.Add(startstring);
      HelpText.Add(this.GetSourceText());
      HelpText.Add(endstring);
      WYSIWYGHEADER.Add("<!DOCTYPE html>");
      WYSIWYGHEADER.Add("<html>");
      WYSIWYGHEADER.Add("<head>");
      WYSIWYGHEADER.Add("<!--");
      WYSIWYGHEADER.Add("The MIT License (MIT)");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add("Copyright (c) Jared Reich");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add("Permission is hereby granted, free of charge, to any person obtaining a copy");
      WYSIWYGHEADER.Add('of this software and associated documentation files (the "Software"), to deal');
      WYSIWYGHEADER.Add("in the Software without restriction, including without limitation the rights");
      WYSIWYGHEADER.Add("to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell");
      WYSIWYGHEADER.Add("copies of the Software, and to permit persons to whom the Software is");
      WYSIWYGHEADER.Add("furnished to do so, subject to the following conditions:");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add("The above copyright notice and this permission notice shall be included in all");
      WYSIWYGHEADER.Add("copies or substantial portions of the Software.");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add('THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR');
      WYSIWYGHEADER.Add("IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,");
      WYSIWYGHEADER.Add("FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE");
      WYSIWYGHEADER.Add("AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER");
      WYSIWYGHEADER.Add("LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,");
      WYSIWYGHEADER.Add("OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE");
      WYSIWYGHEADER.Add("SOFTWARE.");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add("Downloaded from ...... https:\/\/github.com\/jaredreich\/pell......26\/01\/2019");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add("Modified by Steve Wright 27\/01\/2019 to exclude images and code but include");
      WYSIWYGHEADER.Add("superscripts, centering, colors, undo, save, done and quit functions ");
      WYSIWYGHEADER.Add("as well as code to return the edited text to the calling program -->");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add('<meta name="viewport" content="user-scalable=1.0,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0">');
      WYSIWYGHEADER.Add(("<title>TXHTMLEditor " + this.myNode.NodeName) + "<\/title>");
      WYSIWYGHEADER.Add("<style>");
      WYSIWYGHEADER.Add(".wysiwyg-actionbar-color: #FFF !default;");
      WYSIWYGHEADER.Add(".wysiwyg-border-color: rgba(10, 10, 10, 0.1) !default;");
      WYSIWYGHEADER.Add(".wysiwyg-border-style: solid !default;");
      WYSIWYGHEADER.Add(".wysiwyg-border-width: 1px !default;");
      WYSIWYGHEADER.Add(".wysiwyg-button-height: 30px !default;");
      WYSIWYGHEADER.Add(".wysiwyg-button-selected-color: #F0F0F0 !default;");
      WYSIWYGHEADER.Add(".wysiwyg-button-width: 30px !default;");
      WYSIWYGHEADER.Add(".wysiwyg-content-height: 300px !default;");
      WYSIWYGHEADER.Add(".wysiwyg-content-padding: 10px !default;");
      WYSIWYGHEADER.Add(".wysiwyg {");
      WYSIWYGHEADER.Add("  border: .wysiwyg-border-width .wysiwyg-border-style .wysiwyg-border-color;");
      WYSIWYGHEADER.Add("}");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add(".wysiwyg-content {");
      WYSIWYGHEADER.Add("  box-sizing: border-box;");
      WYSIWYGHEADER.Add("  height: .wysiwyg-content-height;");
      WYSIWYGHEADER.Add("  outline: 0;");
      WYSIWYGHEADER.Add("  overflow-y: auto;");
      WYSIWYGHEADER.Add("  padding: .wysiwyg-content-padding;");
      WYSIWYGHEADER.Add("}");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add(".wysiwyg-actionbar {");
      WYSIWYGHEADER.Add("  background-color: powderblue;");
      WYSIWYGHEADER.Add("  border-bottom: .wysiwyg-border-width .wysiwyg-border-style .wysiwyg-border-color;");
      WYSIWYGHEADER.Add("}");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add(".wysiwyg-button {");
      WYSIWYGHEADER.Add("  background-color: transparent;");
      WYSIWYGHEADER.Add("  border: none;");
      WYSIWYGHEADER.Add("  cursor: pointer;");
      WYSIWYGHEADER.Add("  height: .wysiwyg-button-height;");
      WYSIWYGHEADER.Add("  outline: 0;");
      WYSIWYGHEADER.Add("  width: .wysiwyg-button-width;");
      WYSIWYGHEADER.Add("  vertical-align: bottom;");
      WYSIWYGHEADER.Add("}");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add(".wysiwyg-button-selected {");
      WYSIWYGHEADER.Add("  background-color: .wysiwyg-button-selected-color;");
      WYSIWYGHEADER.Add("}");
      WYSIWYGHEADER.Add(".showActionBar {background-color:powderblue; border-style: solid; border-width:thin;");
      WYSIWYGHEADER.Add("}");
      WYSIWYGHEADER.Add(".hideActionBar {height:0px;");
      WYSIWYGHEADER.Add("}");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add("<\/style>");
      WYSIWYGHEADER.Add("<style>");
      WYSIWYGHEADER.Add("      html {");
      WYSIWYGHEADER.Add("        height: 100%;");
      WYSIWYGHEADER.Add("      }");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add("      body {");
      WYSIWYGHEADER.Add("        height: 100%;");
      WYSIWYGHEADER.Add("        margin: 0;");
      WYSIWYGHEADER.Add("        padding: 0;");
      WYSIWYGHEADER.Add("      }");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add("      .content {");
      WYSIWYGHEADER.Add("        box-sizing: border-box;");
      WYSIWYGHEADER.Add("        margin: 0 auto;");
      WYSIWYGHEADER.Add("        max-width: 1000px;");
      WYSIWYGHEADER.Add("        padding: 20px;");
      WYSIWYGHEADER.Add("      }");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add("      #html-output {");
      WYSIWYGHEADER.Add("        white-space: pre-wrap;");
      WYSIWYGHEADER.Add("      }");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add("<\/style>");
      WYSIWYGHEADER.Add("<\/head>");
      WYSIWYGHEADER.Add("<body>");
      WYSIWYGHEADER.Add("");
      WYSIWYGHEADER.Add('<div id="FrameContent" class="content" style="display:flex;flex-direction:column;background-color:powderblue; height:100%">');
      WYSIWYGHEADER.Add(this.myNode.GetAttribute("HeaderHTML",false).AttribValue);
      if (this.GetIsEditable() === true) {
        ActionBarClass = "showActionBar"}
       else ActionBarClass = "hideActionBar";
      WYSIWYGHEADER.Add(('      <div id="MyActionBar" class="' + ActionBarClass) + '" >');
      WYSIWYGHEADER.Add("      <\/div>");
      WYSIWYGHEADER.Add('      <div id="editor" class="wysiwyg" style="flex-grow: 1; width: 100%; overflow:scroll;background-color:white; border-style: solid;border-width:thin;">');
      WYSIWYGFOOTER.Add("      <\/div>");
      WYSIWYGFOOTER.Add(this.myNode.GetAttribute("FooterHTML",false).AttribValue);
      WYSIWYGFOOTER.Add("    <\/div>");
      WYSIWYGFOOTER.Add("<script>");
      WYSIWYGFOOTER.Add("function stopediting(){window.close()};");
      WYSIWYGFOOTER.Add('const defaultParagraphSeparatorString = "defaultParagraphSeparator"');
      WYSIWYGFOOTER.Add('const formatBlock = "formatBlock"');
      WYSIWYGFOOTER.Add("const addEventListener = (parent, type, listener) => parent.addEventListener(type, listener)");
      WYSIWYGFOOTER.Add("const appendChild = (parent, child) => parent.appendChild(child)");
      WYSIWYGFOOTER.Add("const createElement = tag => document.createElement(tag)");
      WYSIWYGFOOTER.Add("const queryCommandState = command => document.queryCommandState(command)");
      WYSIWYGFOOTER.Add("const queryCommandValue = command => document.queryCommandValue(command)");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("\/\/export");
      WYSIWYGFOOTER.Add("const exec = (command, value = null) => document.execCommand(command, false, value)");
      WYSIWYGFOOTER.Add("var updateCounter = 0; ");
      WYSIWYGFOOTER.Add("function checkTitle() {");
      WYSIWYGFOOTER.Add("  var Checkstring = document.title.substr(document.title.length-5);");
      WYSIWYGFOOTER.Add('  if (Checkstring != "Z!Z!Z" ){ ');
      WYSIWYGFOOTER.Add('    alert("Error ---- There is a problem saving the edited text (text too long ?)  ---- Save your work to the clipboard, and Quit ")');
      WYSIWYGFOOTER.Add("    return false; } ");
      WYSIWYGFOOTER.Add("  else return true; ");
      WYSIWYGFOOTER.Add("}");
      WYSIWYGFOOTER.Add("const defaultActions = {");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("bold: {");
      WYSIWYGFOOTER.Add('    icon: "<b>B<\/b>",');
      WYSIWYGFOOTER.Add('    title: "Bold",');
      WYSIWYGFOOTER.Add('    state: () => queryCommandState("bold"),');
      WYSIWYGFOOTER.Add('    result: () => exec("bold")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("italic: {");
      WYSIWYGFOOTER.Add('    icon: "<i>I<\/i>",');
      WYSIWYGFOOTER.Add('    title: "Italic",');
      WYSIWYGFOOTER.Add('    state: () => queryCommandState("italic"),');
      WYSIWYGFOOTER.Add('    result: () => exec("italic")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("underline: {");
      WYSIWYGFOOTER.Add('    icon: "<u>U<\/u>",');
      WYSIWYGFOOTER.Add('    title: "Underline",');
      WYSIWYGFOOTER.Add('    state: () => queryCommandState("underline"),');
      WYSIWYGFOOTER.Add('    result: () => exec("underline")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("strikethrough: {");
      WYSIWYGFOOTER.Add('    icon: "<strike>S<\/strike>",');
      WYSIWYGFOOTER.Add('    title: "Strike-through",');
      WYSIWYGFOOTER.Add('    state: () => queryCommandState("strikeThrough"),');
      WYSIWYGFOOTER.Add('    result: () => exec("strikeThrough")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add(" Superscript: {");
      WYSIWYGFOOTER.Add('      icon: "<b><sup>s<\/sup><\/b>",');
      WYSIWYGFOOTER.Add('      title: "superscript",');
      WYSIWYGFOOTER.Add('      result: () => exec("superscript")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("heading1: {");
      WYSIWYGFOOTER.Add('    icon: "<b>H<sub>1<\/sub><\/b>",');
      WYSIWYGFOOTER.Add('    title: "Heading 1",');
      WYSIWYGFOOTER.Add('    result: () => exec(formatBlock, "<h1>")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("heading2: {");
      WYSIWYGFOOTER.Add('    icon: "<b>H<sub>2<\/sub><\/b>",');
      WYSIWYGFOOTER.Add('    title: "Heading 2",');
      WYSIWYGFOOTER.Add('    result: () => exec(formatBlock, "<h2>")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("heading3: {");
      WYSIWYGFOOTER.Add('    icon: "<b>H<sub>3<\/sub><\/b>",');
      WYSIWYGFOOTER.Add('    title: "Heading 3",');
      WYSIWYGFOOTER.Add('    result: () => exec(formatBlock, "<h3>")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("paragraph: {");
      WYSIWYGFOOTER.Add('    icon: "&#182;",');
      WYSIWYGFOOTER.Add('    title: "Paragraph",');
      WYSIWYGFOOTER.Add('    result: () => exec(formatBlock, "<p>")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("quote: {");
      WYSIWYGFOOTER.Add('    icon: "&#8220; &#8221;",');
      WYSIWYGFOOTER.Add('    title: "Quote (This indents the text)",');
      WYSIWYGFOOTER.Add('    result: () => exec(formatBlock, "<blockquote>")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("centre: {");
      WYSIWYGFOOTER.Add('    icon: "<b>c<\/b>",');
      WYSIWYGFOOTER.Add('    title: "Centre the selected text",');
      WYSIWYGFOOTER.Add('    result: () => document.execCommand("justifycenter")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("olist: {");
      WYSIWYGFOOTER.Add('    icon: "&#35;",');
      WYSIWYGFOOTER.Add('    title: "Ordered List",');
      WYSIWYGFOOTER.Add('    result: () => exec("insertOrderedList")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("ulist: {");
      WYSIWYGFOOTER.Add('    icon: "&#8226;",');
      WYSIWYGFOOTER.Add('    title: "Unordered List",');
      WYSIWYGFOOTER.Add('    result: () => exec("insertUnorderedList")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("line: {");
      WYSIWYGFOOTER.Add('    icon: "&#8213;",');
      WYSIWYGFOOTER.Add('    title: "Horizontal Line",');
      WYSIWYGFOOTER.Add('    result: () => exec("insertHorizontalRule")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("red: {");
      WYSIWYGFOOTER.Add('    icon: "<b>r<\/b>",');
      WYSIWYGFOOTER.Add('    title: "Red",');
      WYSIWYGFOOTER.Add('    BackgroundColor: "#FF5050",');
      WYSIWYGFOOTER.Add("    \/\/ I have made this more of a pink to help people");
      WYSIWYGFOOTER.Add("    \/\/ who are red green colour blind to tell the difference");
      WYSIWYGFOOTER.Add('    result: () => document.execCommand("foreColor",false, "#FF5050")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("green: {");
      WYSIWYGFOOTER.Add('    icon: "<b>g<\/b>",');
      WYSIWYGFOOTER.Add('    title: "Green",');
      WYSIWYGFOOTER.Add('    BackgroundColor: "#00FF00",');
      WYSIWYGFOOTER.Add('    result: () => document.execCommand("foreColor",false, "#00FF00")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("blue: {");
      WYSIWYGFOOTER.Add('      icon: "<b>b<\/b>",');
      WYSIWYGFOOTER.Add('      title: "Blue",');
      WYSIWYGFOOTER.Add('      BackgroundColor: "#0000FF",');
      WYSIWYGFOOTER.Add('      result: () =>document.execCommand("foreColor",false, "#0000FF")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("link: {");
      WYSIWYGFOOTER.Add('    icon: "&#128279;",');
      WYSIWYGFOOTER.Add('    title: "Link",');
      WYSIWYGFOOTER.Add("    result: () => {");
      WYSIWYGFOOTER.Add('      const url = window.prompt("Enter the link URL")');
      WYSIWYGFOOTER.Add('      if (url) exec("createLink", url)');
      WYSIWYGFOOTER.Add("    }");
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("Undo: {");
      WYSIWYGFOOTER.Add('    icon: "<b>Undo<\/b>",');
      WYSIWYGFOOTER.Add('    title: "Undo",');
      WYSIWYGFOOTER.Add('    result: () => exec("undo")');
      WYSIWYGFOOTER.Add("  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("save: {");
      WYSIWYGFOOTER.Add('    icon: "<b>Save<\/b>",');
      WYSIWYGFOOTER.Add('    title: "Save",');
      WYSIWYGFOOTER.Add("    result: () => {  ");
      WYSIWYGFOOTER.Add('                  var theText = document.getElementById("my_wysiwyg_editor").innerHTML;    ');
      WYSIWYGFOOTER.Add(('                  var savedtext = "TXHTMLEditor ' + this.myNode.NodeName) + 'Z!Z!Z"+ theText+"Z!Z!Z";');
      if (this.GetIsEmbedded()) {
        WYSIWYGFOOTER.Add(('                if (parent!=null) {parent.postMessage({"objid":"' + this.myNode.NodeName) + '", "mtype":"titleChange", "mdata":savedtext},"*")}')}
       else WYSIWYGFOOTER.Add(('                if (window.opener!=null) {window.opener.postMessage({"objid":"' + this.myNode.NodeName) + '", "mtype":"titleChange", "mdata":savedtext},"*")} ');
      WYSIWYGFOOTER.Add("                  },");
      WYSIWYGFOOTER.Add("      },");
      WYSIWYGFOOTER.Add("");
      if (this.GetIsEmbedded() === false) {
        WYSIWYGFOOTER.Add("Done: {");
        WYSIWYGFOOTER.Add('    icon: "<b>Done<\/b>",');
        WYSIWYGFOOTER.Add('    title: "Save and exit",');
        WYSIWYGFOOTER.Add("    result: () => {  ");
        WYSIWYGFOOTER.Add(('                  var savedtext = "TXHTMLEditor ' + this.myNode.NodeName) + 'Z!Z!Z"+ document.getElementById("my_wysiwyg_editor").innerHTML+"Z!Z!Z";');
        WYSIWYGFOOTER.Add("                  document.title =savedtext; var ok=checkTitle(); ");
        WYSIWYGFOOTER.Add("                  if (ok) { ");
        WYSIWYGFOOTER.Add(('                    if (window.opener!=null) {window.opener.postMessage({"objid":"' + this.myNode.NodeName) + '", "mtype":"titleChange", "mdata":savedtext},"*");}');
        WYSIWYGFOOTER.Add("                    setTimeout(function(){stopediting(); }, 600);} },");
        WYSIWYGFOOTER.Add("  },");
        WYSIWYGFOOTER.Add("");
        WYSIWYGFOOTER.Add("Quit: {");
        WYSIWYGFOOTER.Add('    icon: "<b>Quit<\/b>",');
        WYSIWYGFOOTER.Add('    title: "Exit without saving",');
        WYSIWYGFOOTER.Add("    result: () => window.close()");
        WYSIWYGFOOTER.Add("  },");
        WYSIWYGFOOTER.Add("");
      };
      WYSIWYGFOOTER.Add("\/\/code: {");
      WYSIWYGFOOTER.Add('\/\/    icon: "&lt;\/&gt;",');
      WYSIWYGFOOTER.Add('\/\/    title: "Code",');
      WYSIWYGFOOTER.Add('\/\/    result: () => exec(formatBlock, "<pre>")');
      WYSIWYGFOOTER.Add("\/\/  },");
      WYSIWYGFOOTER.Add("");
      WYSIWYGFOOTER.Add("\/\/image: {");
      WYSIWYGFOOTER.Add('\/\/    icon: "&#128247;",');
      WYSIWYGFOOTER.Add('\/\/    title: "Image",');
      WYSIWYGFOOTER.Add("\/\/    result: () => {");
      WYSIWYGFOOTER.Add('\/\/      const url = window.prompt("Enter the image URL")');
      WYSIWYGFOOTER.Add('\/\/      if (url) exec("insertImage", url)');
      WYSIWYGFOOTER.Add("\/\/    }");
      WYSIWYGFOOTER.Add("\/\/  }");
      WYSIWYGFOOTER.Add("}");
      WYSIWYGFOOTER.Add("const defaultClasses = {");
      WYSIWYGFOOTER.Add('  actionbar: "wysiwyg-actionbar",');
      WYSIWYGFOOTER.Add('  button: "wysiwyg-button",');
      WYSIWYGFOOTER.Add('  content: "wysiwyg-content",');
      WYSIWYGFOOTER.Add('  selected: "wysiwyg-button-selected"');
      WYSIWYGFOOTER.Add("}");
      WYSIWYGFOOTER.Add("\/\/export");
      WYSIWYGFOOTER.Add("const init = settings => {");
      WYSIWYGFOOTER.Add("\tconst actions = settings.actions");
      WYSIWYGFOOTER.Add("    ? (");
      WYSIWYGFOOTER.Add("      settings.actions.map(action => {");
      WYSIWYGFOOTER.Add('        if (typeof action === "string") return defaultActions[action]');
      WYSIWYGFOOTER.Add("        else if (defaultActions[action.name]) return { ...defaultActions[action.name], ...action }");
      WYSIWYGFOOTER.Add("        return action");
      WYSIWYGFOOTER.Add("      })");
      WYSIWYGFOOTER.Add("    )");
      WYSIWYGFOOTER.Add("    : Object.keys(defaultActions).map(action => defaultActions[action])");
      WYSIWYGFOOTER.Add("\tconst classes = { ...defaultClasses, ...settings.classes }");
      WYSIWYGFOOTER.Add('\tconst defaultParagraphSeparator = settings[defaultParagraphSeparatorString] || "div"');
      if (this.GetIsEditable() === true) {
        WYSIWYGFOOTER.Add('\tconst actionbar = createElement("div")');
        WYSIWYGFOOTER.Add('\tactionbar.style.border = "solid"');
        WYSIWYGFOOTER.Add('\tactionbar.style.borderWidth="thin"');
        WYSIWYGFOOTER.Add('\tactionbar.style.width = "100%"');
        WYSIWYGFOOTER.Add("    actionbar.className = classes.actionbar");
        WYSIWYGFOOTER.Add("    \/\/ detect IE8 and above, and edge");
        WYSIWYGFOOTER.Add("    if (document.documentMode || \/Edge\/.test(navigator.userAgent)) {");
        WYSIWYGFOOTER.Add('      appendChild(document.getElementById("MyActionBar"), actionbar)');
        WYSIWYGFOOTER.Add("    }");
        WYSIWYGFOOTER.Add("    else");
        WYSIWYGFOOTER.Add("    {");
        WYSIWYGFOOTER.Add('      var referenceNode = document.getElementById("editor");');
        WYSIWYGFOOTER.Add("      referenceNode.before(actionbar);");
        WYSIWYGFOOTER.Add("    }");
      };
      WYSIWYGFOOTER.Add('\tconst content = settings.element.content = createElement("div")');
      WYSIWYGFOOTER.Add("\tcontent.contentEditable = false");
      WYSIWYGFOOTER.Add("\tcontent.className = classes.content");
      WYSIWYGFOOTER.Add("\tcontent.oninput = ({ target: { firstChild } }) => {");
      WYSIWYGFOOTER.Add("    if (firstChild && firstChild.nodeType === 3) exec(formatBlock, `<${defaultParagraphSeparator}>`)");
      WYSIWYGFOOTER.Add('    else if (content.innerHTML === "<br>") content.innerHTML = ""');
      WYSIWYGFOOTER.Add("    settings.onChange(content.innerHTML)");
      WYSIWYGFOOTER.Add("  }");
      WYSIWYGFOOTER.Add("\tcontent.onkeydown = event => {");
      WYSIWYGFOOTER.Add('    if (event.key === "Enter" && queryCommandValue(formatBlock) === "blockquote") {');
      WYSIWYGFOOTER.Add("      setTimeout(() => exec(formatBlock, `<${defaultParagraphSeparator}>`), 0)");
      WYSIWYGFOOTER.Add("    }");
      WYSIWYGFOOTER.Add("  }");
      WYSIWYGFOOTER.Add("\tappendChild(settings.element, content)");
      WYSIWYGFOOTER.Add("\tactions.forEach(action => {");
      WYSIWYGFOOTER.Add('    const button = createElement("button")');
      WYSIWYGFOOTER.Add("    button.className = classes.button");
      WYSIWYGFOOTER.Add("    button.innerHTML = action.icon");
      WYSIWYGFOOTER.Add("    button.title = action.title");
      WYSIWYGFOOTER.Add("    button.style.backgroundColor = action.BackgroundColor");
      WYSIWYGFOOTER.Add('    button.setAttribute("type", "button")');
      WYSIWYGFOOTER.Add("    button.onclick = () => action.result() && content.focus()");
      WYSIWYGFOOTER.Add("    if (action.state) {");
      WYSIWYGFOOTER.Add('      const handler = () => button.classList[action.state() ? "add" : "remove"](classes.selected)');
      WYSIWYGFOOTER.Add('      addEventListener(content, "keyup", handler)');
      WYSIWYGFOOTER.Add('      addEventListener(content, "mouseup", handler)');
      WYSIWYGFOOTER.Add('      addEventListener(button, "click", handler)');
      WYSIWYGFOOTER.Add("    }");
      WYSIWYGFOOTER.Add("    appendChild(actionbar, button)");
      WYSIWYGFOOTER.Add("  })");
      WYSIWYGFOOTER.Add('  if (settings.styleWithCSS) exec("styleWithCSS")');
      WYSIWYGFOOTER.Add("  exec(defaultParagraphSeparatorString, defaultParagraphSeparator)");
      WYSIWYGFOOTER.Add("  return settings.element");
      WYSIWYGFOOTER.Add("}");
      WYSIWYGFOOTER.Add("\/\/export");
      WYSIWYGFOOTER.Add("\/\/default");
      WYSIWYGFOOTER.Add("\/\/ { exec, init }");
      WYSIWYGFOOTER.Add("<\/script>");
      WYSIWYGFOOTER.Add("<script>");
      WYSIWYGFOOTER.Add("      var editor = init({");
      WYSIWYGFOOTER.Add('        element: document.getElementById("editor"),');
      WYSIWYGFOOTER.Add('        defaultParagraphSeparator: "p",');
      WYSIWYGFOOTER.Add("        onChange: function (html) {");
      WYSIWYGFOOTER.Add("        }");
      WYSIWYGFOOTER.Add("      })");
      WYSIWYGFOOTER.Add("<\/script>");
      WYSIWYGFOOTER.Add("<\/body>");
      WYSIWYGFOOTER.Add("<\/html>");
      OutputStringList.AddStrings(WYSIWYGHEADER);
      OutputStringList.Add(HelpText.GetTextStr());
      OutputStringList.AddStrings(WYSIWYGFOOTER);
      Result = OutputStringList;
      WYSIWYGHEADER = rtl.freeLoc(WYSIWYGHEADER);
      WYSIWYGFOOTER = rtl.freeLoc(WYSIWYGFOOTER);
      HelpText = rtl.freeLoc(HelpText);
      return Result;
    };
    this.ExtractTextFromTitle = function (message) {
      var Result = "";
      var str = "";
      var StartPos = 0;
      var EndPos = 0;
      str = message;
      StartPos = pas.System.Pos("Z!Z!Z",str);
      if (StartPos > 0) {
        str = pas.System.Copy(str,StartPos + 5,999999);
        EndPos = pas.System.Pos("Z!Z!Z",str);
        if (EndPos > 0) str = pas.System.Copy(str,1,EndPos - 1);
      } else str = "Z!Z!Z";
      Result = str;
      return Result;
    };
    this.SetMyEventTypes = function () {
      this.myEventTypes.Add("Click");
      this.myEventTypes.Add("Change");
      this.myEventTypes.Add("HTMLEditorBrowserClosed");
    };
    var $r = this.$rtti;
    $r.addProperty("IsEmbedded",3,rtl.boolean,"GetIsEmbedded","SetIsEmbedded");
    $r.addProperty("IsEditable",3,rtl.boolean,"GetIsEditable","SetIsEditable");
    $r.addProperty("Showing",3,rtl.boolean,"GetShowing","SetShowing");
    $r.addProperty("SourceText",3,rtl.string,"GetSourceText","SetSourceText");
    $r.addProperty("HeaderHTML",3,rtl.string,"GetHeaderHTML","SetHeaderHTML");
    $r.addProperty("FooterHTML",3,rtl.string,"GetFooterHTML","SetFooterHTML");
    $r.addProperty("HandleChange",0,pas.NodeUtils.$rtti["TEventHandler"],"fHandleChange","fHandleChange");
  });
  this.dotest = function () {
  };
  $mod.$init = function () {
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SuspendRefresh","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ActualHeight","Integer","","",true,false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"ActualWidth","Integer","","",true,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Alignment","String","Left","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Hint","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsVisible","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"FrameWidth","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"FrameHeight","String","300","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Border","Boolean","True","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SpacingAround","Integer","0","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelPos","String","Top","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"LabelText","String","HTML Editor","",false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"HTMLSource","String","","",false,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsEmbedded","Boolean","False","Display the text in an embedded IFrame (needs CEF4)",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"IsEditable","Boolean","True","Allow the text page to be edited",false);
    pas.NodeUtils.AddDefaultAttribute$1({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"Showing","Boolean","False","When not embedded, set this to display the text in a standalone browser page",false,false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"SourceText","String","...text...","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"HeaderHTML","String","","",false);
    pas.NodeUtils.AddDefaultAttribute({p: $impl, get: function () {
        return this.p.myDefaultAttribs;
      }, set: function (v) {
        this.p.myDefaultAttribs = v;
      }},"FooterHTML","String","","",false);
    pas.NodeUtils.AddDefaultsToTable($impl.MyNodeType,$impl.myDefaultAttribs);
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"Alignment",pas.NodeUtils.AlignmentOptions.slice(0));
    pas.NodeUtils.AddAttribOptions($impl.MyNodeType,"LabelPos",pas.NodeUtils.LabelPosOptions.slice(0));
    pas.NodeUtils.AddNodeFuncLookup($impl.MyNodeType,$impl.CreateinterfaceObj,$impl.CreateHTMLEditorWidget);
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerHeight");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"ContainerWidth");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"SuspendRefresh");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"BgColor");
    pas.WrapperPanel.SuppressDesignerProperty($impl.MyNodeType,"HTMLSource");
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.MyNodeType = "TXHTMLEditor";
  $impl.myDefaultAttribs = [];
  $impl.CreateHTMLEditorWidget = function (MyNode, ParentNode, ScreenObjectName, position, Alignment) {
    var Result = null;
    var NewWidget = null;
    var h = 0;
    var w = 0;
    pas.XIFrame.DoCreateFrameWidget(MyNode,ParentNode,ScreenObjectName,position);
    NewWidget = MyNode;
    h = NewWidget.GetActualHeight();
    w = NewWidget.GetActualWidth();
    Result = MyNode;
    return Result;
  };
  $impl.CreateinterfaceObj = function (MyForm, NodeName) {
    var Result = null;
    Result = $mod.TXHTMLEditor.$create("Create$3",[MyForm,NodeName]);
    return Result;
  };
});
rtl.module("Example2Unit",["System","Classes","SysUtils","HTMLUtils","StringUtils","NodeUtils","PasteDialogUnit","UtilsJSCompile","XIFrame","XMenu","XScrollBox","XVBox","XHBox","XTree","XMemo","XTabControl","XButton","XLabel","XEditBox","XCheckBox","XHyperLink","XRadioBtns","XForm","XTable","XProgressBar","XNumericSlider","XNumberSpinner","XComboBox","XDatePicker","XColorPicker","XImage","XGroupBox","XCode","XStore","XBitMap","XTrapEvents","XHTMLText","XHTMLEditor"],function () {
  "use strict";
  var $mod = this;
  this.InitialisePage = function (dummy) {
    pas.NodeUtils.StartingUp = true;
    $mod.Example2Form = $mod.TExample2Form.$create("Create");
    pas.NodeUtils.InitFormObject($mod.Example2Form,"Example2Form");
    pas.NodeUtils.MainForm = $mod.Example2Form;
    $mod.Example2Form.MainMenu1 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXMainMenu","MainMenu1");
    $mod.Example2Form.MyRootDiv = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXScrollBox","MyRootDiv");
    $mod.Example2Form.XVBox2 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXVBox","XVBox2");
    $mod.Example2Form.XHBox1 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXHBox","XHBox1");
    $mod.Example2Form.XButton2 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXButton","XButton2");
    $mod.Example2Form.XButton3 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXButton","XButton3");
    $mod.Example2Form.XButton4 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXButton","XButton4");
    $mod.Example2Form.XVBox3 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXVBox","XVBox3");
    $mod.Example2Form.XVBox1 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXVBox","XVBox1");
    $mod.Example2Form.XButton1 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXButton","XButton1");
    $mod.Example2Form.XButton5 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXButton","XButton5");
    $mod.Example2Form.XButton7 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXButton","XButton7");
    $mod.Example2Form.XVBox4 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXVBox","XVBox4");
    $mod.Example2Form.XScrollBox1 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXScrollBox","XScrollBox1");
    $mod.Example2Form.XLabel1 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXLabel","XLabel1");
    $mod.Example2Form.XButton6 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXButton","XButton6");
    $mod.Example2Form.XButton8 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXButton","XButton8");
    $mod.Example2Form.XHBox2 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXHBox","XHBox2");
    $mod.Example2Form.XScrollBox2 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXScrollBox","XScrollBox2");
    $mod.Example2Form.XLabel2 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXLabel","XLabel2");
    $mod.Example2Form.XGroupBox1 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXGroupBox","XGroupBox1");
    $mod.Example2Form.XButton9 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXButton","XButton9");
    $mod.Example2Form.XCheckBox1 = pas.NodeUtils.CreateInterfaceObject($mod.Example2Form,"TXCheckBox","XCheckBox1");
    pas.NodeUtils.MainForm = $mod.Example2Form;
    pas.NodeUtils.UIRootNode.MyForm = null;
    pas.NodeUtils.LoadedSystemString = "*";
    pas.NodeUtils.LoadedSystemString = (((((((((((((((((((((((((("" + "<Root|; Class |=Root|; Name |=ApplicationRoot|;ParentName|{ String|{|{True|{.|;>") + "<Root|; Class |=Root|; Name |=UIRootNode|;ParentName|{ String|{ApplicationRoot|{True|{.|;|@@|>") + "<TXForm|; Class |=UI|; Name |=Example2Form|;ParentName|{ String|{UIRootNode|{True|{.|;>") + "<TXMainMenu|; Class |=UI|; Name |=MainMenu1|;IsVisible|{ Boolean|{True|{False|{.|;ParentName|{ String|{Example2Form|{True|{.|;><\/TXMainMenu>") + "<TXScrollBox|; Class |=UI|; Name |=MyRootDiv|;Alignment|{ String|{Left|{False|{.|;BgColor|{ Color|{#80FFFF|{False|{.|;Border|{ Boolean|{True|{False|{.|;ContainerHeight|{ String|{100%|{False|{.|;ContainerWidth|{ String|{100%|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;ScrollType|{ String|{Both|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{Example2Form|{True|{.|;>") + "<TXVBox|; Class |=UI|; Name |=XVBox2|;Alignment|{ String|{Left|{False|{.|;BgColor|{ Color|{#FFFFFF|{False|{.|;Border|{ Boolean|{True|{False|{.|;ContainerHeight|{ String|{|{False|{.|;ContainerWidth|{ String|{|{False|{.|;Hint|{ String|{|{False|{.|;InheritColor|{ Boolean|{False|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;LabelPos|{ String|{|{False|{.|;LabelText|{ String|{|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{MyRootDiv|{True|{.|;>") + "<TXHBox|; Class |=UI|; Name |=XHBox1|;Alignment|{ String|{Centre|{False|{.|;BgColor|{ Color|{#FFFFFF|{False|{.|;Border|{ Boolean|{True|{False|{.|;ContainerHeight|{ String|{200|{False|{.|;ContainerWidth|{ String|{|{False|{.|;Hint|{ String|{|{False|{.|;InheritColor|{ Boolean|{False|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;LabelPos|{ String|{|{False|{.|;LabelText|{ String|{|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XVBox2|{True|{.|;>") + "<TXButton|; Class |=UI|; Name |=XButton2|;Alignment|{ String|{Bottom|{False|{.|;Border|{ Boolean|{False|{False|{.|;ButtonWidth|{ String|{|{False|{.|;Caption|{ String|{Bottom|{False|{.|;Enabled|{ Boolean|{True|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XHBox1|{True|{.|;><\/TXButton>") + "<TXButton|; Class |=UI|; Name |=XButton3|;Alignment|{ String|{Top|{False|{.|;Border|{ Boolean|{False|{False|{.|;ButtonWidth|{ String|{|{False|{.|;Caption|{ String|{Top in HBox|{False|{.|;Enabled|{ Boolean|{True|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XHBox1|{True|{.|;><\/TXButton>") + "<TXButton|; Class |=UI|; Name |=XButton4|;Alignment|{ String|{Centre|{False|{.|;Border|{ Boolean|{False|{False|{.|;ButtonWidth|{ String|{|{False|{.|;Caption|{ String|{Centre|{False|{.|;Enabled|{ Boolean|{True|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XHBox1|{True|{.|;><\/TXButton><\/TXHBox><\/TXVBox>") + "<TXVBox|; Class |=UI|; Name |=XVBox3|;Alignment|{ String|{Left|{False|{.|;BgColor|{ Color|{#FFFFFF|{False|{.|;Border|{ Boolean|{True|{False|{.|;ContainerHeight|{ String|{|{False|{.|;ContainerWidth|{ String|{|{False|{.|;Hint|{ String|{|{False|{.|;InheritColor|{ Boolean|{False|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;LabelPos|{ String|{|{False|{.|;LabelText|{ String|{|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{MyRootDiv|{True|{.|;>") + "<TXVBox|; Class |=UI|; Name |=XVBox1|;Alignment|{ String|{Centre|{False|{.|;BgColor|{ Color|{#FFFFFF|{False|{.|;Border|{ Boolean|{True|{False|{.|;ContainerHeight|{ String|{|{False|{.|;ContainerWidth|{ String|{500|{False|{.|;Hint|{ String|{|{False|{.|;InheritColor|{ Boolean|{False|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;LabelPos|{ String|{|{False|{.|;LabelText|{ String|{|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XVBox3|{True|{.|;>") + "<TXButton|; Class |=UI|; Name |=XButton1|;Alignment|{ String|{Centre|{False|{.|;Border|{ Boolean|{False|{False|{.|;ButtonWidth|{ String|{|{False|{.|;Caption|{ String|{Centre in VBox|{False|{.|;Enabled|{ Boolean|{True|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XVBox1|{True|{.|;><\/TXButton>") + "<TXButton|; Class |=UI|; Name |=XButton5|;Alignment|{ String|{Right|{False|{.|;Border|{ Boolean|{False|{False|{.|;ButtonWidth|{ String|{|{False|{.|;Caption|{ String|{Right|{False|{.|;Enabled|{ Boolean|{True|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XVBox1|{True|{.|;><\/TXButton>") + "<TXButton|; Class |=UI|; Name |=XButton7|;Alignment|{ String|{Left|{False|{.|;Border|{ Boolean|{False|{False|{.|;ButtonWidth|{ String|{|{False|{.|;Caption|{ String|{Left|{False|{.|;Enabled|{ Boolean|{True|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XVBox1|{True|{.|;><\/TXButton><\/TXVBox><\/TXVBox>") + "<TXVBox|; Class |=UI|; Name |=XVBox4|;Alignment|{ String|{Left|{False|{.|;BgColor|{ Color|{#FFFFFF|{False|{.|;Border|{ Boolean|{True|{False|{.|;ContainerHeight|{ String|{|{False|{.|;ContainerWidth|{ String|{500|{False|{.|;Hint|{ String|{|{False|{.|;InheritColor|{ Boolean|{False|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;LabelPos|{ String|{|{False|{.|;LabelText|{ String|{|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{MyRootDiv|{True|{.|;>") + "<TXScrollBox|; Class |=UI|; Name |=XScrollBox1|;Alignment|{ String|{Left|{False|{.|;BgColor|{ Color|{#A6CAF0|{False|{.|;Border|{ Boolean|{True|{False|{.|;ContainerHeight|{ String|{100|{False|{.|;ContainerWidth|{ String|{300px|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;ScrollType|{ String|{Both|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XVBox4|{True|{.|;>") + "<TXLabel|; Class |=UI|; Name |=XLabel1|;Alignment|{ String|{Left|{False|{.|;Border|{ Boolean|{False|{False|{.|;ContainerHeight|{ String|{|{False|{.|;ContainerWidth|{ String|{|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;LabelCaption|{ String|{Scrollbox aligned Left in VBox|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XScrollBox1|{True|{.|;><\/TXLabel><\/TXScrollBox>") + "<TXButton|; Class |=UI|; Name |=XButton6|;Alignment|{ String|{Centre|{False|{.|;Border|{ Boolean|{False|{False|{.|;ButtonWidth|{ String|{|{False|{.|;Caption|{ String|{Button aligned Centre|{False|{.|;Enabled|{ Boolean|{True|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XVBox4|{True|{.|;><\/TXButton>") + "<TXButton|; Class |=UI|; Name |=XButton8|;Alignment|{ String|{Left|{False|{.|;Border|{ Boolean|{False|{False|{.|;ButtonWidth|{ String|{|{False|{.|;Caption|{ String|{Button aligned Left|{False|{.|;Enabled|{ Boolean|{True|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XVBox4|{True|{.|;><\/TXButton><\/TXVBox>") + "<TXHBox|; Class |=UI|; Name |=XHBox2|;Alignment|{ String|{Left|{False|{.|;BgColor|{ Color|{#FFFFFF|{False|{.|;Border|{ Boolean|{True|{False|{.|;ContainerHeight|{ String|{200|{False|{.|;ContainerWidth|{ String|{300|{False|{.|;Hint|{ String|{|{False|{.|;InheritColor|{ Boolean|{False|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;LabelPos|{ String|{|{False|{.|;LabelText|{ String|{|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{MyRootDiv|{True|{.|;>") + "<TXScrollBox|; Class |=UI|; Name |=XScrollBox2|;Alignment|{ String|{Centre|{False|{.|;BgColor|{ Color|{#3399FF|{False|{.|;Border|{ Boolean|{True|{False|{.|;ContainerHeight|{ String|{100|{False|{.|;ContainerWidth|{ String|{300px|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;ScrollType|{ String|{Both|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XHBox2|{True|{.|;>") + "<TXLabel|; Class |=UI|; Name |=XLabel2|;Alignment|{ String|{Left|{False|{.|;Border|{ Boolean|{False|{False|{.|;ContainerHeight|{ String|{|{False|{.|;ContainerWidth|{ String|{|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;LabelCaption|{ String|{Scrollbox aligned Centre in HBox|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XScrollBox2|{True|{.|;><\/TXLabel><\/TXScrollBox><\/TXHBox>") + "<TXGroupBox|; Class |=UI|; Name |=XGroupBox1|;Alignment|{ String|{Left|{False|{.|;BgColor|{ Color|{#C8C8C8|{False|{.|;Border|{ Boolean|{True|{False|{.|;Caption|{ String|{Group Caption|{False|{.|;ContainerHeight|{ String|{100|{False|{.|;ContainerWidth|{ String|{300px|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{MyRootDiv|{True|{.|;>") + "<TXButton|; Class |=UI|; Name |=XButton9|;Alignment|{ String|{Centre|{False|{.|;Border|{ Boolean|{False|{False|{.|;ButtonWidth|{ String|{|{False|{.|;Caption|{ String|{Centre in GroupBox|{False|{.|;Enabled|{ Boolean|{True|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XGroupBox1|{True|{.|;><\/TXButton>") + "<TXCheckBox|; Class |=UI|; Name |=XCheckBox1|;Alignment|{ String|{Centre|{False|{.|;Border|{ Boolean|{False|{False|{.|;Checked|{ Boolean|{False|{False|{.|;Hint|{ String|{|{False|{.|;IsVisible|{ Boolean|{True|{False|{.|;LabelPos|{ String|{Right|{False|{.|;LabelText|{ String|{Centre|{False|{.|;ReadOnly|{ Boolean|{False|{False|{.|;SpacingAround|{ Integer|{0|{False|{.|;ParentName|{ String|{XGroupBox1|{True|{.|;><\/TXCheckBox><\/TXGroupBox><\/TXScrollBox><\/TXForm><\/Root>") + "<Root|; Class |=Code|; Name |=CodeUnits|;ParentName|{ String|{ApplicationRoot|{True|{.|;><\/Root><\/Root>";
    pas.NodeUtils.XMLToNodeTree(pas.NodeUtils.LoadedSystemString);
    pas.NodeUtils.StartingUp = false;
  };
  rtl.createClass($mod,"TExample2Form",pas.XForm.TXForm,function () {
    this.$init = function () {
      pas.XForm.TXForm.$init.call(this);
      this.MainMenu1 = null;
      this.MyRootDiv = null;
      this.XButton1 = null;
      this.XButton2 = null;
      this.XButton3 = null;
      this.XButton4 = null;
      this.XButton5 = null;
      this.XButton6 = null;
      this.XButton7 = null;
      this.XButton8 = null;
      this.XButton9 = null;
      this.XCheckBox1 = null;
      this.XGroupBox1 = null;
      this.XHBox1 = null;
      this.XHBox2 = null;
      this.XLabel1 = null;
      this.XLabel2 = null;
      this.XScrollBox1 = null;
      this.XScrollBox2 = null;
      this.XVBox1 = null;
      this.XVBox2 = null;
      this.XVBox3 = null;
      this.XVBox4 = null;
    };
    this.$final = function () {
      this.MainMenu1 = undefined;
      this.MyRootDiv = undefined;
      this.XButton1 = undefined;
      this.XButton2 = undefined;
      this.XButton3 = undefined;
      this.XButton4 = undefined;
      this.XButton5 = undefined;
      this.XButton6 = undefined;
      this.XButton7 = undefined;
      this.XButton8 = undefined;
      this.XButton9 = undefined;
      this.XCheckBox1 = undefined;
      this.XGroupBox1 = undefined;
      this.XHBox1 = undefined;
      this.XHBox2 = undefined;
      this.XLabel1 = undefined;
      this.XLabel2 = undefined;
      this.XScrollBox1 = undefined;
      this.XScrollBox2 = undefined;
      this.XVBox1 = undefined;
      this.XVBox2 = undefined;
      this.XVBox3 = undefined;
      this.XVBox4 = undefined;
      pas.XForm.TXForm.$final.call(this);
    };
    this.DummyPositionMarker = function () {
    };
  });
  this.Example2Form = null;
  $mod.$init = function () {
    pas.StringUtils.MainUnitName = "Example2Unit";
    try{
    // now do any Javascript specific start up code
    pas.HTMLUtils.addHandVBoxStyles();
    }catch(err) { alert(err.message+' in StartupCode');};
  };
});
